/*! For license information please see index.js.LICENSE.txt */
(()=>{var t={660:(t,e,n)=>{"use strict";n.r(e),n.d(e,{AgeGenderNet:()=>Ev,BoundingBox:()=>Lp,Box:()=>Bp,ComposableTask:()=>hm,ComputeAllFaceDescriptorsTask:()=>ag,ComputeFaceDescriptorsTaskBase:()=>ig,ComputeSingleFaceDescriptorTask:()=>sg,DetectAllFaceLandmarksTask:()=>cg,DetectAllFacesTask:()=>fg,DetectFaceLandmarksTaskBase:()=>ug,DetectFacesTaskBase:()=>hg,DetectSingleFaceLandmarksTask:()=>lg,DetectSingleFaceTask:()=>pg,Dimensions:()=>wp,FACE_EXPRESSION_LABELS:()=>uv,FaceDetection:()=>zp,FaceDetectionNet:()=>Jv,FaceExpressionNet:()=>lv,FaceExpressions:()=>cv,FaceLandmark68Net:()=>Iv,FaceLandmark68TinyNet:()=>Sv,FaceLandmarkNet:()=>kv,FaceLandmarks:()=>Jp,FaceLandmarks5:()=>Qp,FaceLandmarks68:()=>Zp,FaceMatch:()=>td,FaceMatcher:()=>wg,FaceRecognitionNet:()=>Ov,Gender:()=>wv,LabeledBox:()=>ed,LabeledFaceDescriptors:()=>nd,Mtcnn:()=>Em,MtcnnOptions:()=>Vv,NetInput:()=>Td,NeuralNetwork:()=>Vd,ObjectDetection:()=>Wp,Point:()=>Pp,PredictedBox:()=>rd,Rect:()=>$p,SsdMobilenetv1:()=>Kv,SsdMobilenetv1Options:()=>qv,TinyFaceDetector:()=>Rm,TinyFaceDetectorOptions:()=>lm,TinyYolov2:()=>um,TinyYolov2Options:()=>am,TinyYolov2SizeType:()=>$v,allFaces:()=>xg,allFacesMtcnn:()=>yg,allFacesSsdMobilenetv1:()=>mg,allFacesTinyYolov2:()=>gg,awaitMediaLoaded:()=>Ed,bufferToImage:()=>_d,computeFaceDescriptor:()=>Mm,createCanvas:()=>Rd,createCanvasFromMedia:()=>Sd,createFaceDetectionNet:()=>Yv,createFaceRecognitionNet:()=>Pv,createMtcnn:()=>Cg,createSsdMobilenetv1:()=>Xv,createTinyFaceDetector:()=>Eg,createTinyYolov2:()=>cm,detectAllFaces:()=>vg,detectFaceLandmarks:()=>Fm,detectFaceLandmarksTiny:()=>Nm,detectLandmarks:()=>Xm,detectSingleFace:()=>dg,draw:()=>i,env:()=>dd,euclideanDistance:()=>bg,extendWithAge:()=>Wv,extendWithFaceDescriptor:()=>Bv,extendWithFaceDetection:()=>id,extendWithFaceExpressions:()=>fv,extendWithFaceLandmarks:()=>vv,extendWithGender:()=>Uv,extractFaceTensors:()=>Md,extractFaces:()=>Nd,fetchImage:()=>Pd,fetchJson:()=>Bd,fetchNetWeights:()=>Ld,fetchOrThrow:()=>Od,getContext2dOrThrow:()=>md,getMediaDimensions:()=>Id,imageTensorToCanvas:()=>kd,imageToSquare:()=>Ad,inverseSigmoid:()=>Xp,iou:()=>Up,isMediaElement:()=>Dd,isMediaLoaded:()=>Cd,isWithAge:()=>Lv,isWithFaceDetection:()=>od,isWithFaceExpressions:()=>hv,isWithFaceLandmarks:()=>dv,isWithGender:()=>zv,loadAgeGenderModel:()=>jm,loadFaceDetectionModel:()=>qm,loadFaceExpressionModel:()=>Hm,loadFaceLandmarkModel:()=>Um,loadFaceLandmarkTinyModel:()=>Vm,loadFaceRecognitionModel:()=>Gm,loadMtcnnModel:()=>Wm,loadSsdMobilenetv1Model:()=>Bm,loadTinyFaceDetectorModel:()=>Lm,loadTinyYolov2Model:()=>zm,loadWeightMap:()=>zd,locateFaces:()=>Km,matchDimensions:()=>Ud,minBbox:()=>Vp,mtcnn:()=>Tm,nets:()=>Sm,nonMaxSuppression:()=>Gp,normalize:()=>Hp,padToSquare:()=>jp,predictAgeAndGender:()=>Pm,recognizeFaceExpressions:()=>Om,resizeResults:()=>_g,resolveInput:()=>vd,shuffleArray:()=>qp,sigmoid:()=>Kp,ssdMobilenetv1:()=>km,tf:()=>r,tinyFaceDetector:()=>Dm,tinyYolov2:()=>Am,toNetInput:()=>Fd,utils:()=>o,validateConfig:()=>nm});var r={};n.r(r),n.d(r,{AdadeltaOptimizer:()=>rp,AdagradOptimizer:()=>op,AdamOptimizer:()=>ip,AdamaxOptimizer:()=>ap,DataStorage:()=>go,ENV:()=>f,Environment:()=>l,KernelBackend:()=>yo,MomentumOptimizer:()=>up,Optimizer:()=>np,RMSPropOptimizer:()=>cp,Rank:()=>Et,Reduction:()=>Yl,SGDOptimizer:()=>sp,Tensor:()=>Ct,TensorBuffer:()=>yt,Variable:()=>kt,abs:()=>Xs,acos:()=>Ys,acosh:()=>$s,add:()=>Xu,addN:()=>Yu,addStrict:()=>$u,all:()=>pl,any:()=>dl,argMax:()=>vl,argMin:()=>ml,asin:()=>Js,asinh:()=>Qs,atan:()=>Zs,atan2:()=>Ju,atanh:()=>tu,avgPool:()=>rl,avgPool3d:()=>al,backend:()=>ln,backend_util:()=>Lo,basicLSTMCell:()=>Nl,batchNorm:()=>Lu,batchNorm2d:()=>Wu,batchNorm3d:()=>zu,batchNorm4d:()=>Uu,batchNormalization:()=>Bu,batchNormalization2d:()=>Mu,batchNormalization3d:()=>Ou,batchNormalization4d:()=>Pu,batchToSpaceND:()=>dr,booleanMaskAsync:()=>Tc,broadcastTo:()=>vr,browser:()=>jf,buffer:()=>fr,cast:()=>mr,ceil:()=>eu,clipByValue:()=>nu,clone:()=>gr,complex:()=>kn,concat:()=>Xn,concat1d:()=>Yn,concat2d:()=>$n,concat3d:()=>Jn,concat4d:()=>Qn,conv1d:()=>Oc,conv2d:()=>Pc,conv2dTranspose:()=>Hc,conv3d:()=>Bc,conv3dTranspose:()=>jc,cos:()=>ru,cosh:()=>ou,cumsum:()=>yr,customGrad:()=>fo,deprecationWarn:()=>Ke,depthToSpace:()=>xr,depthwiseConv2d:()=>zc,diag:()=>ql,disableDeprecationWarnings:()=>qe,dispose:()=>Ze,disposeVariables:()=>Xe,div:()=>Qu,divNoNan:()=>Zu,divStrict:()=>tc,dot:()=>Kc,dropout:()=>Kl,elu:()=>_l,enableDebugMode:()=>je,enableProdMode:()=>He,engine:()=>Ye,env:()=>h,equal:()=>vc,equalStrict:()=>mc,erf:()=>iu,exp:()=>au,expandDims:()=>br,expm1:()=>su,eye:()=>wr,fft:()=>Wl,fill:()=>Gn,findBackend:()=>sn,findBackendFactory:()=>un,floor:()=>uu,floorDiv:()=>ec,frame:()=>Ql,fused:()=>Th,gather:()=>Dc,gatherND:()=>jl,gather_util:()=>Kr,getBackend:()=>on,getGradient:()=>m,getKernel:()=>v,getKernelsForBackend:()=>g,grad:()=>so,grads:()=>uo,greater:()=>gc,greaterEqual:()=>yc,greaterEqualStrict:()=>xc,greaterStrict:()=>bc,hammingWindow:()=>Jl,hannWindow:()=>$l,ifft:()=>zl,imag:()=>An,image:()=>Eh,inTopKAsync:()=>eh,io:()=>Uf,irfft:()=>Vl,isFinite:()=>bu,isInf:()=>xu,isNaN:()=>yu,keep:()=>tn,leakyRelu:()=>Il,less:()=>wc,lessEqual:()=>Cc,lessEqualStrict:()=>Ec,lessStrict:()=>_c,linalg:()=>mh,linspace:()=>Hn,localResponseNormalization:()=>Tl,log:()=>cu,log1p:()=>lu,logSigmoid:()=>hu,logSoftmax:()=>mo,logSumExp:()=>gl,logicalAnd:()=>Vu,logicalNot:()=>Gu,logicalOr:()=>Hu,logicalXor:()=>ju,losses:()=>hh,matMul:()=>qc,math:()=>Gf,max:()=>yl,maxPool:()=>nl,maxPool3d:()=>il,maximum:()=>nc,maximumStrict:()=>rc,mean:()=>xl,memory:()=>$e,min:()=>bl,minimum:()=>oc,minimumStrict:()=>ic,mod:()=>ac,modStrict:()=>sc,moments:()=>wl,movingAverage:()=>Ol,mul:()=>uc,mulStrict:()=>cc,multiRNNCell:()=>Ml,multinomial:()=>Cr,neg:()=>fu,nextFrame:()=>pp,norm:()=>Fl,notEqual:()=>Ic,notEqualStrict:()=>Rc,oneHot:()=>Er,ones:()=>Un,onesLike:()=>qn,op:()=>Sn,outerProduct:()=>Xc,pad:()=>_r,pad1d:()=>Ir,pad2d:()=>Rr,pad3d:()=>Sr,pad4d:()=>kr,pool:()=>ol,pow:()=>lc,powStrict:()=>hc,prelu:()=>Rl,print:()=>pr,prod:()=>El,profile:()=>Je,rand:()=>Dr,randomGamma:()=>Tr,randomNormal:()=>Ar,randomUniform:()=>Fr,range:()=>jn,ready:()=>rn,real:()=>Dn,reciprocal:()=>pu,registerBackend:()=>cn,registerGradient:()=>x,registerKernel:()=>y,relu:()=>Sl,relu6:()=>kl,removeBackend:()=>an,reshape:()=>Nr,reverse:()=>Yc,reverse1d:()=>$c,reverse2d:()=>Jc,reverse3d:()=>Qc,reverse4d:()=>Zc,rfft:()=>Ul,round:()=>du,rsqrt:()=>vu,scalar:()=>Nn,scatterND:()=>Ll,scatter_util:()=>Qr,selu:()=>Dl,separableConv2d:()=>Gc,serialization:()=>Yf,setBackend:()=>nn,setPlatform:()=>hn,setdiff1dAsync:()=>zr,sigmoid:()=>mu,sign:()=>gu,signal:()=>th,sin:()=>wu,sinh:()=>Cu,slice:()=>sl,slice1d:()=>ul,slice2d:()=>cl,slice3d:()=>ll,slice4d:()=>hl,slice_util:()=>ao,softmax:()=>vo,softplus:()=>Eu,spaceToBatchND:()=>Mr,sparseToDense:()=>Hl,spectral:()=>Gl,split:()=>Zn,sqrt:()=>_u,square:()=>js,squaredDifference:()=>Ks,squaredDifferenceStrict:()=>fc,squeeze:()=>Or,stack:()=>Pr,step:()=>Iu,stft:()=>Zl,stridedSlice:()=>Pl,sub:()=>pc,subStrict:()=>dc,sum:()=>Cl,sumOutType:()=>Tt,tan:()=>Ru,tanh:()=>Su,tensor:()=>Tn,tensor1d:()=>Mn,tensor2d:()=>On,tensor3d:()=>Pn,tensor4d:()=>Bn,tensor5d:()=>Ln,tensor6d:()=>Wn,tensor_util:()=>Pt,test_util:()=>Zf,tidy:()=>Qe,tile:()=>Br,time:()=>en,topk:()=>Bl,train:()=>hp,transpose:()=>Al,truncatedNormal:()=>Lr,unregisterGradient:()=>w,unregisterKernel:()=>b,unsortedSegmentSum:()=>Ac,unstack:()=>Wr,util:()=>ft,valueAndGrad:()=>co,valueAndGrads:()=>lo,variable:()=>zn,variableGrads:()=>ho,version_core:()=>tp,webgl:()=>ep,where:()=>qu,whereAsync:()=>Ku,zeros:()=>Vn,zerosLike:()=>Kn});var o={};n.r(o),n.d(o,{computeReshapedDimensions:()=>Tp,getCenterPoint:()=>Fp,isDimensions:()=>Ap,isEven:()=>kp,isFloat:()=>Sp,isTensor:()=>Cp,isTensor1D:()=>Ep,isTensor2D:()=>_p,isTensor3D:()=>Ip,isTensor4D:()=>Rp,isValidNumber:()=>Mp,isValidProbablitiy:()=>Op,range:()=>Np,round:()=>Dp});var i={};n.r(i),n.d(i,{AnchorPosition:()=>pd,DrawBox:()=>bd,DrawBoxOptions:()=>xd,DrawFaceLandmarks:()=>gv,DrawFaceLandmarksOptions:()=>mv,DrawTextField:()=>yd,DrawTextFieldOptions:()=>gd,drawContour:()=>dp,drawDetections:()=>wd,drawFaceExpressions:()=>pv,drawFaceLandmarks:()=>yv});var a=function(t,e){return(a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(t,e)};function s(t,e){function n(){this.constructor=t}a(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}function u(t,e,n,r){return new(n||(n=Promise))((function(o,i){function a(t){try{u(r.next(t))}catch(t){i(t)}}function s(t){try{u(r.throw(t))}catch(t){i(t)}}function u(t){t.done?o(t.value):new n((function(e){e(t.value)})).then(a,s)}u((r=r.apply(t,e||[])).next())}))}function c(t,e){var n,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,r=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!(o=(o=a.trys).length>0&&o[o.length-1])&&(6===i[0]||2===i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=e.call(t,a)}catch(t){i=[6,t],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}}var l=function(){function t(t){this.global=t,this.flags={},this.flagRegistry={},this.urlFlags={},this.populateURLFlags()}return t.prototype.setPlatform=function(t,e){null!=this.platform&&console.warn("Platform "+this.platformName+" has already been set. Overwriting the platform with "+e+"."),this.platformName=t,this.platform=e},t.prototype.registerFlag=function(t,e,n){if(this.flagRegistry[t]={evaluationFn:e,setHook:n},null!=this.urlFlags[t]){var r=this.urlFlags[t];console.warn("Setting feature override from URL "+t+": "+r+"."),this.set(t,r)}},t.prototype.get=function(t){return t in this.flags||(this.flags[t]=this.evaluateFlag(t)),this.flags[t]},t.prototype.getNumber=function(t){return this.get(t)},t.prototype.getBool=function(t){return this.get(t)},t.prototype.getFlags=function(){return this.flags},Object.defineProperty(t.prototype,"features",{get:function(){return this.flags},enumerable:!0,configurable:!0}),t.prototype.set=function(t,e){if(null==this.flagRegistry[t])throw new Error("Cannot set flag "+t+" as it has not been registered.");this.flags[t]=e,null!=this.flagRegistry[t].setHook&&this.flagRegistry[t].setHook(e)},t.prototype.evaluateFlag=function(t){if(null==this.flagRegistry[t])throw new Error("Cannot evaluate flag '"+t+"': no evaluation function found.");return this.flagRegistry[t].evaluationFn()},t.prototype.setFlags=function(t){this.flags=Object.assign({},t)},t.prototype.reset=function(){this.flags={},this.urlFlags={},this.populateURLFlags()},t.prototype.populateURLFlags=function(){var t=this;if(void 0!==this.global&&void 0!==this.global.location&&void 0!==this.global.location.search){var e,n,r=(e=this.global.location.search,n={},e.replace(/[?&]([^=?&]+)(?:=([^&]*))?/g,(function(t){for(var e=[],r=1;r<arguments.length;r++)e[r-1]=arguments[r];return function(t,e,n){t[decodeURIComponent(e)]=decodeURIComponent(n||"")}(n,e[0],e[1]),e.join("=")})),n);"tfjsflags"in r&&r.tfjsflags.split(",").forEach((function(e){var n=e.split(":"),r=n[0],o=n[1];t.urlFlags[r]=function(t,e){if("true"===(e=e.toLowerCase())||"false"===e)return"true"===e;if(""+ +e===e)return+e;throw new Error("Could not parse value flag value "+e+" for flag "+t+".")}(r,o)}))}},t}();function h(){return f}var f=null,p=new Map,d=new Map;function v(t,e){var n=C(t,e);return p.get(n)}function m(t){return d.get(t)}function g(t){for(var e=p.entries(),n=[];;){var r=e.next(),o=r.done,i=r.value;if(o)break;var a=i[0],s=i[1];a.split("_")[0]===t&&n.push(s)}return n}function y(t){var e=t.kernelName,n=t.backendName,r=C(e,n);if(p.has(r))throw new Error("The kernel '"+e+"' for backend '"+n+"' is already registered");p.set(r,t)}function x(t){var e=t.kernelName;d.has(e)&&console.warn("Overriding the gradient for '"+e+"'"),d.set(e,t)}function b(t,e){var n=C(t,e);if(!p.has(n))throw new Error("The kernel '"+t+"' for backend '"+e+"' is not registered");p.delete(n)}function w(t){if(!d.has(t))throw new Error("The gradient '"+t+"' for backend is not registered");d.delete(t)}function C(t,e){return e+"_"+t}function E(t){for(var e=t.length,n=0,r=0;e>0;)r=Math.random()*e|0,n=t[--e],t[e]=t[r],t[r]=n}function _(t,e,n){return Math.max(t,Math.min(e,n))}function I(t){return t%2==0?t:t+1}function R(t){for(var e=0,n=0;n<t.length;n++)e+=t[n];return e}function S(t,e){if(!t)throw new Error("string"==typeof e?e:e())}function k(t,e,n){void 0===n&&(n=""),S(F(t,e),(function(){return n+" Shapes "+t+" and "+e+" must match"}))}function D(t){S(null!=t,(function(){return"The input to the tensor constructor must be a non-null value."}))}function A(t,e,n){if(void 0===e&&(e=[]),void 0===n&&(n=!1),null==e&&(e=[]),Array.isArray(t)||q(t)&&!n)for(var r=0;r<t.length;++r)A(t[r],e,n);else e.push(t);return e}function T(t){if(0===t.length)return 1;for(var e=t[0],n=1;n<t.length;n++)e*=t[n];return e}function F(t,e){if(t===e)return!0;if(null==t||null==e)return!1;if(t.length!==e.length)return!1;for(var n=0;n<t.length;n++)if(t[n]!==e[n])return!1;return!0}function N(t){return t%1==0}function M(t){if(null!=Math.tanh)return Math.tanh(t);if(t===1/0)return 1;if(t===-1/0)return-1;var e=Math.exp(2*t);return(e-1)/(e+1)}function O(t){var e=Math.ceil(Math.sqrt(t));return[e,Math.ceil(t/e)]}function P(t,e){return e<=t.length?t:t+" ".repeat(e-t.length)}function B(t,e,n){return void 0===e&&(e=function(t){return 0}),new Promise((function(r,o){var i=0,a=function(){if(t())r();else{i++;var s=e(i);null!=n&&i>=n?o():setTimeout(a,s)}};a()}))}function L(t,e){for(var n=1,r=-1,o=0;o<t.length;++o)if(t[o]>=0)n*=t[o];else if(-1===t[o]){if(-1!==r)throw Error("Shapes can only have 1 implicit size. Found -1 at dim "+r+" and dim "+o);r=o}else if(t[o]<0)throw Error("Shapes can not be < 0. Found "+t[o]+" at dim "+o);if(-1===r){if(e>0&&e!==n)throw Error("Size("+e+") must match the product of shape "+t);return t}if(0===n)throw Error("Cannot infer the missing size in ["+t+"] when there are 0 elements");if(e%n!=0)throw Error("The implicit shape can't be a fractional number. Got "+e+" / "+n);var i=t.slice();return i[r]=e/n,i}function W(t,e){var n=e.length;return S((t=null==t?e.map((function(t,e){return e})):[].concat(t)).every((function(t){return t>=-n&&t<n})),(function(){return"All values in axis param must be in range [-"+n+", "+n+") but got axis "+t})),S(t.every((function(t){return N(t)})),(function(){return"All values in axis param must be integers but got axis "+t})),t.map((function(t){return t<0?n+t:t}))}function z(t,e){for(var n=[],r=[],o=null!=e&&Array.isArray(e)&&0===e.length,i=null==e||o?null:W(e,t).sort(),a=0,s=0;s<t.length;++s){if(null!=i){if(i[a]===s&&1!==t[s])throw new Error("Can't squeeze axis "+s+" since its dim '"+t[s]+"' is not 1");(null==i[a]||i[a]>s)&&1===t[s]&&(n.push(t[s]),r.push(s)),i[a]<=s&&a++}1!==t[s]&&(n.push(t[s]),r.push(s))}return{newShape:n,keptDims:r}}function U(t,e){var n=null;if(null==t||"float32"===t)n=new Float32Array(e);else if("int32"===t)n=new Int32Array(e);else{if("bool"!==t)throw new Error("Unknown data type "+t);n=new Uint8Array(e)}return n}function V(t,e){var n=null;if(null==t||"float32"===t)n=new Float32Array(e);else if("int32"===t)n=new Int32Array(e);else if("bool"===t)n=new Uint8Array(e);else{if("string"!==t)throw new Error("Unknown data type "+t);n=new Array(e)}return n}function G(t,e){for(var n=0;n<t.length;n++){var r=t[n];if(isNaN(r)||!isFinite(r))throw Error("A tensor of type "+e+" being uploaded contains "+r+".")}}function H(t){return"bool"===t||"complex64"===t||"float32"===t||"int32"===t||"string"===t}function j(t,e){return!("complex64"===e||"float32"===e&&"complex64"!==t||"int32"===e&&"float32"!==t&&"complex64"!==t||"bool"===e&&"bool"===t)}function q(t){return t instanceof Float32Array||t instanceof Int32Array||t instanceof Uint8Array}function K(t){if("float32"===t||"int32"===t)return 4;if("complex64"===t)return 8;if("bool"===t)return 1;throw new Error("Unknown dtype "+t)}function X(t){if(null==t)return 0;var e=0;return t.forEach((function(t){return e+=t.length})),e}function Y(t){return"string"==typeof t||t instanceof String}function $(t){return"boolean"==typeof t}function J(t){return"number"==typeof t}function Q(t){return Array.isArray(t)?Q(t[0]):t instanceof Float32Array?"float32":t instanceof Int32Array||t instanceof Uint8Array?"int32":J(t)?"float32":Y(t)?"string":$(t)?"bool":"float32"}function Z(t){return!!(t&&t.constructor&&t.call&&t.apply)}function tt(t,e){for(var n=e;n<t;++n)if(t%n==0)return n;return t}function et(t){var e=t.length;if(e<2)return[];var n=new Array(e-1);n[e-2]=t[e-1];for(var r=e-3;r>=0;--r)n[r]=n[r+1]*t[r+1];return n}function nt(t,e,n){if("string"===e)throw new Error("Cannot convert a string[] to a TypedArray");if(Array.isArray(t)&&(t=A(t)),n&&G(t,e),function(t,e){return t instanceof Float32Array&&"float32"===e||t instanceof Int32Array&&"int32"===e||t instanceof Uint8Array&&"bool"===e}(t,e))return t;if(null==e||"float32"===e||"complex64"===e)return new Float32Array(t);if("int32"===e)return new Int32Array(t);if("bool"===e){for(var r=new Uint8Array(t.length),o=0;o<r.length;++o)0!==Math.round(t[o])&&(r[o]=1);return r}throw new Error("Unknown data type "+e)}function rt(t,e){if(0===t.length)return e[0];var n=t.reduce((function(t,e){return t*e}));if(0===n)return[];if(n!==e.length)throw new Error("["+t+"] does not match the input size.");return function t(e,n,r){var o=new Array;if(1===n.length)for(var i=n[0],a=0;a<i;a++)o[a]=r[e+a];else{i=n[0];var s=n.slice(1),u=s.reduce((function(t,e){return t*e}));for(a=0;a<i;a++)o[a]=t(e+a*u,s,r)}return o}(0,t,e)}function ot(t,e){for(var n=it(t,e),r=0;r<n.length;r++)n[r]=1;return n}function it(t,e){if(null==e||"float32"===e||"complex64"===e)return new Float32Array(t);if("int32"===e)return new Int32Array(t);if("bool"===e)return new Uint8Array(t);throw new Error("Unknown data type "+e)}function at(){return h().platform.now()}function st(t){t.forEach((function(e){S(Number.isInteger(e)&&e>=0,(function(){return"Tensor must have a shape comprised of positive integers but got shape ["+t+"]."}))}))}function ut(t,e){return void 0===e&&(e="utf-8"),e=e||"utf-8",h().platform.encode(t,e)}function ct(t,e){return void 0===e&&(e="utf-8"),e=e||"utf-8",h().platform.decode(t,e)}function lt(t,e,n){if(0===e)return 0;if(1===e)return t[0];for(var r=t[t.length-1],o=0;o<t.length-1;++o)r+=n[o]*t[o];return r}function ht(t,e,n){if(0===e)return[];if(1===e)return[t];for(var r=new Array(e),o=0;o<r.length-1;++o)r[o]=Math.floor(t/n[o]),t-=r[o]*n[o];return r[r.length-1]=t,r}var ft=Object.freeze({shuffle:E,clamp:_,nearestLargerEven:I,sum:R,randUniform:function(t,e){var n=Math.random();return e*n+(1-n)*t},distSquared:function(t,e){for(var n=0,r=0;r<t.length;r++){var o=Number(t[r])-Number(e[r]);n+=o*o}return n},assert:S,assertShapesMatch:k,assertNonNull:D,flatten:A,sizeFromShape:T,isScalarShape:function(t){return 0===t.length},arraysEqual:F,isInt:N,tanh:M,sizeToSquarishShape:O,createShuffledIndices:function(t){for(var e=new Uint32Array(t),n=0;n<t;++n)e[n]=n;return E(e),e},rightPad:P,repeatedTry:B,inferFromImplicitShape:L,parseAxisParam:W,squeezeShape:z,getTypedArrayFromDType:U,getArrayFromDType:V,checkConversionForErrors:G,isValidDtype:H,hasEncodingLoss:j,isTypedArray:q,bytesPerElement:K,bytesFromStringArray:X,isString:Y,isBoolean:$,isNumber:J,inferDtype:Q,isFunction:Z,nearestDivisor:tt,computeStrides:et,toTypedArray:nt,toNestedArray:rt,makeOnesTypedArray:ot,makeZerosTypedArray:it,now:at,assertNonNegativeIntegerDimensions:st,fetch:function(t,e){return h().platform.fetch(t,e)},encodeString:ut,decodeString:ct,locToIndex:lt,indexToLoc:ht}),pt=function(){function t(t,e){this.backendTimer=t,this.logger=e,null==e&&(this.logger=new dt)}return t.prototype.profileKernel=function(t,e,n){var r,o=this,i=this.backendTimer.time((function(){r=n()}));return r.forEach((function(n){n.data().then((function(r){!function(t,e,n){if("float32"!==e)return!1;for(var r=0;r<t.length;r++){var o=t[r];if(isNaN(o)||!isFinite(o))return console.warn("Found "+o+" in the result of '"+n+"'"),!0}}(r,n.dtype,t),i.then((function(i){var a="";null!=i.getExtraProfileInfo&&(a=i.getExtraProfileInfo()),o.logger.logKernelProfile(t,n,r,i.kernelMs,e,a)}))}))})),r},t}(),dt=function(){function t(){}return t.prototype.logKernelProfile=function(t,e,n,r,o,i){var a="number"==typeof r?P(r+"ms",9):r.error,s=P(t,25),u=e.rank,c=e.size,l=P(e.shape.toString(),14),h="";for(var f in o){var p=o[f].shape||e.shape,d=p.length;h+=f+": "+d+"D "+(d>0?p:"")+" "}console.log("%c"+s+"\t%c"+a+"\t%c"+u+"D "+l+"\t%c"+c+"\t%c"+h+"\t%c"+i,"font-weight:bold","color:red","color:blue","color: orange","color: green","color: steelblue")},t}();function vt(t,e,n){return P(Array.isArray(t)?parseFloat(t[0].toFixed(7))+" + "+parseFloat(t[1].toFixed(7))+"j":Y(t)?"'"+t+"'":"bool"===n?mt(t):parseFloat(t.toFixed(7)).toString(),e)}function mt(t){return 0===t?"false":"true"}function gt(t){for(var e=[],n=0;n<t.length;n+=2)e.push([t[n],t[n+1]]);return e}var yt=function(){function t(t,e,n){var r=this;if(this.dtype=e,this.shape=t.slice(),this.size=T(t),null!=n){var o=n.length;S(o===this.size,(function(){return"Length of values '"+o+"' does not match the size inferred by the shape '"+r.size+"'."}))}if("complex64"===e)throw new Error("complex64 dtype TensorBuffers are not supported. Please create a TensorBuffer for the real and imaginary parts separately and call tf.complex(real, imag).");this.values=n||V(e,this.size),this.strides=et(t)}return t.prototype.set=function(t){for(var e=this,n=[],r=1;r<arguments.length;r++)n[r-1]=arguments[r];0===n.length&&(n=[0]),S(n.length===this.rank,(function(){return"The number of provided coordinates ("+n.length+") must match the rank ("+e.rank+")"}));var o=this.locToIndex(n);this.values[o]=t},t.prototype.get=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];0===t.length&&(t=[0]);for(var n=0,r=0,o=t;r<o.length;r++){var i=o[r];if(i<0||i>=this.shape[n]){var a="Requested out of range element at "+t+".   Buffer shape="+this.shape;throw new Error(a)}n++}for(var s=t[t.length-1],u=0;u<t.length-1;++u)s+=this.strides[u]*t[u];return this.values[s]},t.prototype.locToIndex=function(t){if(0===this.rank)return 0;if(1===this.rank)return t[0];for(var e=t[t.length-1],n=0;n<t.length-1;++n)e+=this.strides[n]*t[n];return e},t.prototype.indexToLoc=function(t){if(0===this.rank)return[];if(1===this.rank)return[t];for(var e=new Array(this.shape.length),n=0;n<e.length-1;++n)e[n]=Math.floor(t/this.strides[n]),t-=e[n]*this.strides[n];return e[e.length-1]=t,e},Object.defineProperty(t.prototype,"rank",{get:function(){return this.shape.length},enumerable:!0,configurable:!0}),t.prototype.toTensor=function(){return xt().makeTensor(this.values,this.shape,this.dtype)},t}(),xt=null,bt=null,wt=null,Ct=function(){function t(t,e,n,r){this.kept=!1,this.isDisposedInternal=!1,this.shape=t.slice(),this.dtype=e||"float32",this.size=T(t),this.strides=et(t),this.dataId=n,this.id=r,this.rankType=this.rank<5?this.rank.toString():"higher"}return t.prototype.flatten=function(){return this.throwIfDisposed(),this.as1D()},t.prototype.asScalar=function(){return this.throwIfDisposed(),S(1===this.size,(function(){return"The array must have only 1 element."})),this.reshape([])},t.prototype.as1D=function(){return this.throwIfDisposed(),this.reshape([this.size])},t.prototype.as2D=function(t,e){return this.throwIfDisposed(),this.reshape([t,e])},t.prototype.as3D=function(t,e,n){return this.throwIfDisposed(),this.reshape([t,e,n])},t.prototype.as4D=function(t,e,n,r){return this.throwIfDisposed(),this.reshape([t,e,n,r])},t.prototype.as5D=function(t,e,n,r,o){return this.throwIfDisposed(),this.reshape([t,e,n,r,o])},t.prototype.asType=function(t){return this.throwIfDisposed(),bt.cast(this,t)},Object.defineProperty(t.prototype,"rank",{get:function(){return this.shape.length},enumerable:!0,configurable:!0}),t.prototype.buffer=function(){return u(this,void 0,void 0,(function(){var t;return c(this,(function(e){switch(e.label){case 0:return[4,this.data()];case 1:return t=e.sent(),[2,bt.buffer(this.shape,this.dtype,t)]}}))}))},t.prototype.bufferSync=function(){return bt.buffer(this.shape,this.dtype,this.dataSync())},t.prototype.array=function(){return u(this,void 0,void 0,(function(){var t;return c(this,(function(e){switch(e.label){case 0:return[4,this.data()];case 1:return t=e.sent(),[2,rt(this.shape,t)]}}))}))},t.prototype.arraySync=function(){return rt(this.shape,this.dataSync())},t.prototype.data=function(){return u(this,void 0,void 0,(function(){var t,e;return c(this,(function(n){switch(n.label){case 0:return this.throwIfDisposed(),t=xt().read(this.dataId),"string"!==this.dtype?[3,2]:[4,t];case 1:e=n.sent();try{return[2,e.map((function(t){return ct(t)}))]}catch(t){throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}n.label=2;case 2:return[2,t]}}))}))},t.prototype.dataSync=function(){this.throwIfDisposed();var t=xt().readSync(this.dataId);if("string"===this.dtype)try{return t.map((function(t){return ct(t)}))}catch(t){throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}return t},t.prototype.bytes=function(){return u(this,void 0,void 0,(function(){var t;return c(this,(function(e){switch(e.label){case 0:return this.throwIfDisposed(),[4,xt().read(this.dataId)];case 1:return t=e.sent(),"string"===this.dtype?[2,t]:[2,new Uint8Array(t.buffer)]}}))}))},t.prototype.dispose=function(){this.isDisposed||(xt().disposeTensor(this),this.isDisposedInternal=!0)},Object.defineProperty(t.prototype,"isDisposed",{get:function(){return this.isDisposedInternal},enumerable:!0,configurable:!0}),t.prototype.throwIfDisposed=function(){if(this.isDisposed)throw new Error("Tensor is disposed.")},t.prototype.toFloat=function(){return this.asType("float32")},t.prototype.toInt=function(){return this.asType("int32")},t.prototype.toBool=function(){return this.asType("bool")},t.prototype.print=function(t){return void 0===t&&(t=!1),bt.print(this,t)},t.prototype.reshape=function(t){return this.throwIfDisposed(),bt.reshape(this,t)},t.prototype.reshapeAs=function(t){return this.throwIfDisposed(),this.reshape(t.shape)},t.prototype.expandDims=function(t){return void 0===t&&(t=0),bt.expandDims(this,t)},t.prototype.cumsum=function(t,e,n){return void 0===t&&(t=0),void 0===e&&(e=!1),void 0===n&&(n=!1),bt.cumsum(this,t,e,n)},t.prototype.squeeze=function(t){return this.throwIfDisposed(),bt.squeeze(this,t)},t.prototype.clone=function(){return this.throwIfDisposed(),bt.clone(this)},t.prototype.oneHot=function(t,e,n){return this.throwIfDisposed(),bt.oneHot(this,t,e,n)},t.prototype.toString=function(t){return void 0===t&&(t=!1),function(t,e,n,r){var o=et(e),i=function(t,e,n,r){var o=T(e),i=r[r.length-1],a=new Array(i).fill(0),s=e.length,u="complex64"===n?gt(t):t;if(s>1)for(var c=0;c<o/i;c++)for(var l=c*i,h=0;h<i;h++)a[h]=Math.max(a[h],vt(u[l+h],0,n).length);return a}(t,e,n,o),a=e.length,s=function t(e,n,r,o,i,a){void 0===a&&(a=!0);var s="complex64"===r?2:1,u=n[0],c=n.length;if(0===c)return"complex64"===r?[vt(gt(e)[0],0,r)]:"bool"===r?[mt(e[0])]:[e[0].toString()];if(1===c){if(u>20){var l=3*s,h=Array.from(e.slice(0,l)),f=Array.from(e.slice((u-3)*s,u*s));return"complex64"===r&&(h=gt(h),f=gt(f)),["["+h.map((function(t,e){return vt(t,i[e],r)})).join(", ")+", ..., "+f.map((function(t,e){return vt(t,i[u-3+e],r)})).join(", ")+"]"]}return["["+("complex64"===r?gt(e):Array.from(e)).map((function(t,e){return vt(t,i[e],r)})).join(", ")+"]"]}var p=n.slice(1),d=o.slice(1),v=o[0]*s,m=[];if(u>20){for(var g=0;g<3;g++){var y=(x=g*v)+v;m.push.apply(m,t(e.slice(x,y),p,r,d,i,!1))}for(m.push("..."),g=u-3;g<u;g++)y=(x=g*v)+v,m.push.apply(m,t(e.slice(x,y),p,r,d,i,g===u-1))}else for(g=0;g<u;g++){var x;y=(x=g*v)+v,m.push.apply(m,t(e.slice(x,y),p,r,d,i,g===u-1))}var b=2===c?",":"";for(m[0]="["+m[0]+b,g=1;g<m.length-1;g++)m[g]=" "+m[g]+b;var w=",\n";for(g=2;g<c;g++)w+="\n";return m[m.length-1]=" "+m[m.length-1]+"]"+(a?"":w),m}(t,e,n,o,i),u=["Tensor"];return r&&(u.push("  dtype: "+n),u.push("  rank: "+a),u.push("  shape: ["+e+"]"),u.push("  values:")),u.push(s.map((function(t){return"    "+t})).join("\n")),u.join("\n")}(this.dataSync(),this.shape,this.dtype,t)},t.prototype.tile=function(t){return this.throwIfDisposed(),bt.tile(this,t)},t.prototype.gather=function(t,e){return void 0===e&&(e=0),this.throwIfDisposed(),bt.gather(this,t,e)},t.prototype.matMul=function(t,e,n){return void 0===e&&(e=!1),void 0===n&&(n=!1),this.throwIfDisposed(),bt.matMul(this,t,e,n)},t.prototype.dot=function(t){return this.throwIfDisposed(),bt.dot(this,t)},t.prototype.norm=function(t,e,n){return void 0===t&&(t="euclidean"),void 0===e&&(e=null),void 0===n&&(n=!1),this.throwIfDisposed(),bt.norm(this,t,e,n)},t.prototype.slice=function(t,e){return this.throwIfDisposed(),bt.slice(this,t,e)},t.prototype.reverse=function(t){return this.throwIfDisposed(),bt.reverse(this,t)},t.prototype.concat=function(e,n){return void 0===n&&(n=0),this.throwIfDisposed(),e instanceof t&&(e=[e]),bt.concat([this].concat(e),n)},t.prototype.split=function(t,e){return void 0===e&&(e=0),this.throwIfDisposed(),bt.split(this,t,e)},t.prototype.stack=function(t,e){return void 0===e&&(e=0),bt.stack([this,t],e)},t.prototype.unstack=function(t){return void 0===t&&(t=0),bt.unstack(this,t)},t.prototype.pad=function(t,e){return void 0===e&&(e=0),bt.pad(this,t,e)},t.prototype.batchNormalization=function(t,e,n,r,o){return void 0===n&&(n=.001),wt("tf.batchNormalization() is going away. Use tf.batchNorm() instead, and note the positional argument change of scale, offset, and varianceEpsilon"),this.batchNorm(t,e,o,r,n)},t.prototype.batchNorm=function(t,e,n,r,o){return void 0===o&&(o=.001),this.throwIfDisposed(),bt.batchNorm(this,t,e,n,r,o)},t.prototype.all=function(t,e){return void 0===t&&(t=null),void 0===e&&(e=!1),this.throwIfDisposed(),bt.all(this,t,e)},t.prototype.any=function(t,e){return void 0===t&&(t=null),void 0===e&&(e=!1),this.throwIfDisposed(),bt.any(this,t,e)},t.prototype.logSumExp=function(t,e){return void 0===t&&(t=null),void 0===e&&(e=!1),this.throwIfDisposed(),bt.logSumExp(this,t,e)},t.prototype.sum=function(t,e){return void 0===t&&(t=null),void 0===e&&(e=!1),this.throwIfDisposed(),bt.sum(this,t,e)},t.prototype.prod=function(t,e){return void 0===t&&(t=null),void 0===e&&(e=!1),this.throwIfDisposed(),bt.prod(this,t,e)},t.prototype.mean=function(t,e){return void 0===t&&(t=null),void 0===e&&(e=!1),this.throwIfDisposed(),bt.mean(this,t,e)},t.prototype.min=function(t,e){return void 0===t&&(t=null),void 0===e&&(e=!1),this.throwIfDisposed(),bt.min(this,t,e)},t.prototype.max=function(t,e){return void 0===t&&(t=null),void 0===e&&(e=!1),this.throwIfDisposed(),bt.max(this,t,e)},t.prototype.argMin=function(t){return void 0===t&&(t=null),this.throwIfDisposed(),bt.argMin(this,t)},t.prototype.argMax=function(t){return void 0===t&&(t=null),this.throwIfDisposed(),bt.argMax(this,t)},t.prototype.cast=function(t){return this.throwIfDisposed(),bt.cast(this,t)},t.prototype.add=function(t){return this.throwIfDisposed(),bt.add(this,t)},t.prototype.addStrict=function(t){return this.throwIfDisposed(),bt.addStrict(this,t)},t.prototype.atan2=function(t){return this.throwIfDisposed(),bt.atan2(this,t)},t.prototype.sub=function(t){return this.throwIfDisposed(),bt.sub(this,t)},t.prototype.subStrict=function(t){return this.throwIfDisposed(),bt.subStrict(this,t)},t.prototype.pow=function(t){return this.throwIfDisposed(),bt.pow(this,t)},t.prototype.powStrict=function(t){return this.throwIfDisposed(),bt.powStrict(this,t)},t.prototype.mul=function(t){return this.throwIfDisposed(),bt.mul(this,t)},t.prototype.mulStrict=function(t){return this.throwIfDisposed(),bt.mulStrict(this,t)},t.prototype.div=function(t){return this.throwIfDisposed(),bt.div(this,t)},t.prototype.divNoNan=function(t){return this.throwIfDisposed(),bt.divNoNan(this,t)},t.prototype.floorDiv=function(t){return this.throwIfDisposed(),bt.floorDiv(this,t)},t.prototype.divStrict=function(t){return this.throwIfDisposed(),bt.divStrict(this,t)},t.prototype.minimum=function(t){return this.throwIfDisposed(),bt.minimum(this,t)},t.prototype.minimumStrict=function(t){return this.throwIfDisposed(),bt.minimumStrict(this,t)},t.prototype.maximum=function(t){return this.throwIfDisposed(),bt.maximum(this,t)},t.prototype.maximumStrict=function(t){return this.throwIfDisposed(),bt.maximumStrict(this,t)},t.prototype.mod=function(t){return this.throwIfDisposed(),bt.mod(this,t)},t.prototype.modStrict=function(t){return this.throwIfDisposed(),bt.modStrict(this,t)},t.prototype.squaredDifferenceStrict=function(t){return this.throwIfDisposed(),bt.squaredDifferenceStrict(this,t)},t.prototype.transpose=function(t){return this.throwIfDisposed(),bt.transpose(this,t)},t.prototype.notEqual=function(t){return this.throwIfDisposed(),bt.notEqual(this,t)},t.prototype.notEqualStrict=function(t){return this.throwIfDisposed(),bt.notEqualStrict(this,t)},t.prototype.less=function(t){return this.throwIfDisposed(),bt.less(this,t)},t.prototype.lessStrict=function(t){return this.throwIfDisposed(),bt.lessStrict(this,t)},t.prototype.equal=function(t){return this.throwIfDisposed(),bt.equal(this,t)},t.prototype.equalStrict=function(t){return this.throwIfDisposed(),bt.equalStrict(this,t)},t.prototype.lessEqual=function(t){return this.throwIfDisposed(),bt.lessEqual(this,t)},t.prototype.lessEqualStrict=function(t){return this.throwIfDisposed(),bt.lessEqualStrict(this,t)},t.prototype.greater=function(t){return this.throwIfDisposed(),bt.greater(this,t)},t.prototype.greaterStrict=function(t){return this.throwIfDisposed(),bt.greaterStrict(this,t)},t.prototype.greaterEqual=function(t){return this.throwIfDisposed(),bt.greaterEqual(this,t)},t.prototype.greaterEqualStrict=function(t){return this.throwIfDisposed(),bt.greaterEqualStrict(this,t)},t.prototype.logicalAnd=function(t){return this.throwIfDisposed(),bt.logicalAnd(this,t)},t.prototype.logicalOr=function(t){return this.throwIfDisposed(),bt.logicalOr(this,t)},t.prototype.logicalNot=function(){return this.throwIfDisposed(),bt.logicalNot(this)},t.prototype.logicalXor=function(t){return this.throwIfDisposed(),bt.logicalXor(this,t)},t.prototype.where=function(t,e){return this.throwIfDisposed(),bt.where(t,this,e)},t.prototype.neg=function(){return this.throwIfDisposed(),bt.neg(this)},t.prototype.ceil=function(){return this.throwIfDisposed(),bt.ceil(this)},t.prototype.floor=function(){return this.throwIfDisposed(),bt.floor(this)},t.prototype.sign=function(){return this.throwIfDisposed(),bt.sign(this)},t.prototype.isNaN=function(){return this.throwIfDisposed(),bt.isNaN(this)},t.prototype.isInf=function(){return this.throwIfDisposed(),bt.isInf(this)},t.prototype.isFinite=function(){return this.throwIfDisposed(),bt.isFinite(this)},t.prototype.exp=function(){return this.throwIfDisposed(),bt.exp(this)},t.prototype.expm1=function(){return this.throwIfDisposed(),bt.expm1(this)},t.prototype.log=function(){return this.throwIfDisposed(),bt.log(this)},t.prototype.log1p=function(){return this.throwIfDisposed(),bt.log1p(this)},t.prototype.sqrt=function(){return this.throwIfDisposed(),bt.sqrt(this)},t.prototype.rsqrt=function(){return this.throwIfDisposed(),bt.rsqrt(this)},t.prototype.square=function(){return this.throwIfDisposed(),bt.square(this)},t.prototype.reciprocal=function(){return this.throwIfDisposed(),bt.reciprocal(this)},t.prototype.abs=function(){return this.throwIfDisposed(),bt.abs(this)},t.prototype.clipByValue=function(t,e){return this.throwIfDisposed(),bt.clipByValue(this,t,e)},t.prototype.relu=function(){return this.throwIfDisposed(),bt.relu(this)},t.prototype.relu6=function(){return this.throwIfDisposed(),bt.relu6(this)},t.prototype.elu=function(){return this.throwIfDisposed(),bt.elu(this)},t.prototype.selu=function(){return this.throwIfDisposed(),bt.selu(this)},t.prototype.leakyRelu=function(t){return void 0===t&&(t=.2),this.throwIfDisposed(),bt.leakyRelu(this,t)},t.prototype.prelu=function(t){return this.throwIfDisposed(),bt.prelu(this,t)},t.prototype.sigmoid=function(){return this.throwIfDisposed(),bt.sigmoid(this)},t.prototype.logSigmoid=function(){return this.throwIfDisposed(),bt.logSigmoid(this)},t.prototype.softplus=function(){return this.throwIfDisposed(),bt.softplus(this)},t.prototype.zerosLike=function(){return this.throwIfDisposed(),bt.zerosLike(this)},t.prototype.onesLike=function(){return this.throwIfDisposed(),bt.onesLike(this)},t.prototype.sin=function(){return this.throwIfDisposed(),bt.sin(this)},t.prototype.cos=function(){return this.throwIfDisposed(),bt.cos(this)},t.prototype.tan=function(){return this.throwIfDisposed(),bt.tan(this)},t.prototype.asin=function(){return this.throwIfDisposed(),bt.asin(this)},t.prototype.acos=function(){return this.throwIfDisposed(),bt.acos(this)},t.prototype.atan=function(){return this.throwIfDisposed(),bt.atan(this)},t.prototype.sinh=function(){return this.throwIfDisposed(),bt.sinh(this)},t.prototype.cosh=function(){return this.throwIfDisposed(),bt.cosh(this)},t.prototype.tanh=function(){return this.throwIfDisposed(),bt.tanh(this)},t.prototype.asinh=function(){return this.throwIfDisposed(),bt.asinh(this)},t.prototype.acosh=function(){return this.throwIfDisposed(),bt.acosh(this)},t.prototype.atanh=function(){return this.throwIfDisposed(),bt.atanh(this)},t.prototype.erf=function(){return this.throwIfDisposed(),bt.erf(this)},t.prototype.round=function(){return this.throwIfDisposed(),bt.round(this)},t.prototype.step=function(t){return void 0===t&&(t=0),this.throwIfDisposed(),bt.step(this,t)},t.prototype.softmax=function(t){return void 0===t&&(t=-1),this.throwIfDisposed(),bt.softmax(this,t)},t.prototype.logSoftmax=function(t){return void 0===t&&(t=-1),this.throwIfDisposed(),bt.logSoftmax(this,t)},t.prototype.resizeBilinear=function(t,e){return void 0===e&&(e=!1),this.throwIfDisposed(),bt.image.resizeBilinear(this,t,e)},t.prototype.resizeNearestNeighbor=function(t,e){return void 0===e&&(e=!1),this.throwIfDisposed(),bt.image.resizeNearestNeighbor(this,t,e)},t.prototype.conv1d=function(t,e,n,r,o,i){return void 0===r&&(r="NWC"),void 0===o&&(o=1),this.throwIfDisposed(),bt.conv1d(this,t,e,n,r,o,i)},t.prototype.conv2d=function(t,e,n,r,o,i){return void 0===r&&(r="NHWC"),void 0===o&&(o=[1,1]),this.throwIfDisposed(),bt.conv2d(this,t,e,n,r,o,i)},t.prototype.conv2dTranspose=function(t,e,n,r,o){return this.throwIfDisposed(),bt.conv2dTranspose(this,t,e,n,r,o)},t.prototype.depthwiseConv2D=function(t,e,n,r,o,i){return void 0===r&&(r="NHWC"),void 0===o&&(o=[1,1]),this.throwIfDisposed(),bt.depthwiseConv2d(this,t,e,n,r,o,i)},t.prototype.separableConv2d=function(t,e,n,r,o,i){return void 0===o&&(o=[1,1]),void 0===i&&(i="NHWC"),this.throwIfDisposed(),bt.separableConv2d(this,t,e,n,r,o,i)},t.prototype.avgPool=function(t,e,n,r){return this.throwIfDisposed(),bt.avgPool(this,t,e,n,r)},t.prototype.maxPool=function(t,e,n,r){return this.throwIfDisposed(),bt.maxPool(this,t,e,n,r)},t.prototype.localResponseNormalization=function(t,e,n,r){return void 0===t&&(t=5),void 0===e&&(e=1),void 0===n&&(n=1),void 0===r&&(r=.5),bt.localResponseNormalization(this,t,e,n,r)},t.prototype.pool=function(t,e,n,r,o){return this.throwIfDisposed(),bt.pool(this,t,e,n,r,o)},t.prototype.variable=function(t,e,n){return void 0===t&&(t=!0),this.throwIfDisposed(),xt().makeVariable(this,t,e,n)},t.prototype.unsortedSegmentSum=function(t,e){return this.throwIfDisposed(),bt.unsortedSegmentSum(this,t,e)},t.prototype.batchToSpaceND=function(t,e){return this.throwIfDisposed(),bt.batchToSpaceND(this,t,e)},t.prototype.spaceToBatchND=function(t,e){return this.throwIfDisposed(),bt.spaceToBatchND(this,t,e)},t.prototype.topk=function(t,e){return void 0===t&&(t=1),void 0===e&&(e=!0),this.throwIfDisposed(),bt.topk(this,t,e)},t.prototype.stridedSlice=function(t,e,n,r,o,i,a,s){return void 0===r&&(r=0),void 0===o&&(o=0),void 0===i&&(i=0),void 0===a&&(a=0),void 0===s&&(s=0),this.throwIfDisposed(),bt.stridedSlice(this,t,e,n,r,o,i,a,s)},t.prototype.depthToSpace=function(t,e){return this.throwIfDisposed(),bt.depthToSpace(this,t,e)},t.prototype.fft=function(){return this.throwIfDisposed(),bt.spectral.fft(this)},t.prototype.ifft=function(){return this.throwIfDisposed(),bt.spectral.ifft(this)},t.prototype.rfft=function(){return this.throwIfDisposed(),bt.spectral.rfft(this)},t.prototype.irfft=function(){return this.throwIfDisposed(),bt.spectral.irfft(this)},t}();Object.defineProperty(Ct,Symbol.hasInstance,{value:function(t){return!!t&&null!=t.dataId&&null!=t.shape&&null!=t.dtype}});var Et,_t,It,Rt,St,kt=function(t){function e(e,n,r,o){var i=t.call(this,e.shape,e.dtype,e.dataId,o)||this;return i.trainable=n,i.name=r,i}return s(e,t),e.prototype.assign=function(t){if(t.dtype!==this.dtype)throw new Error("dtype of the new value ("+t.dtype+") and previous value ("+this.dtype+") must match");if(!F(t.shape,this.shape))throw new Error("shape of the new value ("+t.shape+") and previous value ("+this.shape+") must match");xt().disposeTensor(this),this.dataId=t.dataId,xt().incRef(this,null)},e.prototype.dispose=function(){xt().disposeVariable(this),this.isDisposedInternal=!0},e}(Ct);Object.defineProperty(kt,Symbol.hasInstance,{value:function(t){return t instanceof Ct&&null!=t.assign&&t.assign instanceof Function}}),function(t){t.R0="R0",t.R1="R1",t.R2="R2",t.R3="R3",t.R4="R4",t.R5="R5",t.R6="R6"}(Et||(Et={})),function(t){t.float32="float32",t.int32="int32",t.bool="int32",t.complex64="complex64"}(_t||(_t={})),function(t){t.float32="float32",t.int32="int32",t.bool="bool",t.complex64="complex64"}(It||(It={})),function(t){t.float32="float32",t.int32="float32",t.bool="float32",t.complex64="complex64"}(Rt||(Rt={})),function(t){t.float32="complex64",t.int32="complex64",t.bool="complex64",t.complex64="complex64"}(St||(St={}));var Dt={float32:Rt,int32:_t,bool:It,complex64:St};function At(t,e){if("string"===t||"string"===e){if("string"===t&&"string"===e)return"string";throw new Error("Can not upcast "+t+" with "+e)}return Dt[t][e]}function Tt(t){return At(t,"int32")}function Ft(t,e){if(t.dtype===e.dtype)return[t,e];var n=At(t.dtype,e.dtype);return[t.cast(n),e.cast(n)]}function Nt(t,e){S(t.dtype===e.dtype,(function(){return"The dtypes of the first("+t.dtype+") and second("+e.dtype+") input must match"}))}function Mt(t){var e=[];return function t(e,n,r){if(null!=e)if(e instanceof Ct)n.push(e);else if(o=e,Array.isArray(o)||"object"==typeof o){var o,i=e;for(var a in i){var s=i[a];r.has(s)||(r.add(s),t(s,n,r))}}}(t,e,new Set),e}var Ot,Pt=Object.freeze({makeTypesMatch:Ft,assertTypesMatch:Nt,isTensorInList:function(t,e){return e.some((function(e){return e.id===t.id}))},getTensorsInContainer:Mt}),Bt=function(){function t(){this.registeredVariables={},this.nextTapeNodeId=0,this.numBytes=0,this.numTensors=0,this.numStringTensors=0,this.numDataBuffers=0,this.gradientDepth=0,this.kernelDepth=0,this.scopeStack=[],this.numDataMovesStack=[],this.nextScopeId=0,this.tensorInfo=new WeakMap,this.profiling=!1,this.activeProfile={newBytes:0,newTensors:0,peakBytes:0,kernels:[],result:null}}return t.prototype.dispose=function(){for(var t in this.registeredVariables)this.registeredVariables[t].dispose()},t}(),Lt=function(){function t(t){this.ENV=t,this.registry={},this.registryFactory={},this.pendingBackendInitId=0,this.state=new Bt}return t.prototype.ready=function(){return u(this,void 0,void 0,(function(){var t,e,n;return c(this,(function(r){switch(r.label){case 0:if(null!=this.pendingBackendInit)return[2,this.pendingBackendInit.then((function(){}))];if(null!=this.backendInstance)return[2];t=this.getSortedBackends(),e=0,r.label=1;case 1:return e<t.length?(n=t[e],[4,this.initializeBackend(n).success]):[3,5];case 2:return r.sent()?[4,this.setBackend(n)]:[3,4];case 3:return r.sent(),[2];case 4:return e++,[3,1];case 5:throw new Error("Could not initialize any backends, all backend initializations failed.")}}))}))},Object.defineProperty(t.prototype,"backend",{get:function(){if(null!=this.pendingBackendInit)throw new Error("Backend '"+this.backendName+"' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods");if(null==this.backendInstance){var t=this.initializeBackendsAndReturnBest(),e=t.name;if(t.asyncInit)throw new Error("The highest priority backend '"+e+"' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods");this.setBackend(e)}return this.backendInstance},enumerable:!0,configurable:!0}),t.prototype.backendNames=function(){return Object.keys(this.registryFactory)},t.prototype.findBackend=function(t){if(!(t in this.registry)){if(!(t in this.registryFactory))return null;if(this.initializeBackend(t).asyncInit)return null}return this.registry[t]},t.prototype.findBackendFactory=function(t){return t in this.registryFactory?this.registryFactory[t].factory:null},t.prototype.registerBackend=function(t,e,n){return void 0===n&&(n=1),t in this.registryFactory?(console.warn(t+" backend was already registered. Reusing existing backend factory."),!1):(this.registryFactory[t]={factory:e,priority:n},!0)},t.prototype.setBackend=function(t){return u(this,void 0,void 0,(function(){var e,n,r;return c(this,(function(o){switch(o.label){case 0:if(null==this.registryFactory[t])throw new Error("Backend name '"+t+"' not found in registry");return this.backendName=t,null!=this.registry[t]?[3,4]:(this.backendInstance=null,e=this.initializeBackend(t),n=e.success,e.asyncInit?[4,n]:[3,2]);case 1:return r=o.sent(),[3,3];case 2:r=n,o.label=3;case 3:if(!r)return[2,!1];o.label=4;case 4:return this.backendInstance=this.registry[t],this.setupRegisteredKernels(),this.profiler=new pt(this.backendInstance),[2,!0]}}))}))},t.prototype.setupRegisteredKernels=function(){var t=this;g(this.backendName).forEach((function(e){null!=e.setupFunc&&e.setupFunc(t.backendInstance)}))},t.prototype.disposeRegisteredKernels=function(t){var e=this;g(t).forEach((function(n){null!=n.disposeFunc&&n.disposeFunc(e.registry[t])}))},t.prototype.initializeBackend=function(t){var e=this,n=this.registryFactory[t];if(null==n)throw new Error("Cannot initialize backend "+t+", no registration found.");try{var r=n.factory();if(Promise.resolve(r)===r){var o=++this.pendingBackendInitId,i=r.then((function(n){return!(o<e.pendingBackendInitId||(e.registry[t]=n,e.pendingBackendInit=null,0))})).catch((function(n){return!(o<e.pendingBackendInitId||(e.pendingBackendInit=null,console.warn("Initialization of backend "+t+" failed"),console.warn(n.stack||n.message),1))}));return this.pendingBackendInit=i,{success:i,asyncInit:!0}}return this.registry[t]=r,{success:!0,asyncInit:!1}}catch(e){return console.warn("Initialization of backend "+t+" failed"),console.warn(e.stack||e.message),{success:!1,asyncInit:!1}}},t.prototype.removeBackend=function(t){if(!(t in this.registryFactory))throw new Error(t+" backend not found in registry");this.backendName===t&&null!=this.pendingBackendInit&&this.pendingBackendInitId++,t in this.registry&&(this.disposeRegisteredKernels(t),this.registry[t].dispose(),delete this.registry[t]),delete this.registryFactory[t],this.backendName===t&&(this.pendingBackendInit=null,this.backendName=null,this.backendInstance=null)},t.prototype.getSortedBackends=function(){var t=this;if(0===Object.keys(this.registryFactory).length)throw new Error("No backend found in registry.");return Object.keys(this.registryFactory).sort((function(e,n){return t.registryFactory[n].priority-t.registryFactory[e].priority}))},t.prototype.initializeBackendsAndReturnBest=function(){for(var t=this.getSortedBackends(),e=0;e<t.length;e++){var n=t[e],r=this.initializeBackend(n),o=r.success,i=r.asyncInit;if(i||o)return{name:n,asyncInit:i}}throw new Error("Could not initialize any backends, all backend initializations failed.")},t.prototype.moveData=function(t,e){var n=this.state.tensorInfo.get(e),r=n.backend,o=this.readSync(e);r.disposeData(e),n.backend=t,t.move(e,o,n.shape,n.dtype),this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack[this.state.numDataMovesStack.length-1]++},t.prototype.tidy=function(t,e){var n,r=this,o=null;if(null==e){if("function"!=typeof t)throw new Error("Please provide a function to tidy()");e=t}else{if("string"!=typeof t&&!(t instanceof String))throw new Error("When calling with two arguments, the first argument to tidy() must be a string");if("function"!=typeof e)throw new Error("When calling with two arguments, the 2nd argument to tidy() must be a function");o=t}return this.scopedRun((function(){return r.startScope(o)}),(function(){return r.endScope(n)}),(function(){return(n=e())instanceof Promise&&console.error("Cannot return a Promise inside of tidy."),n}))},t.prototype.scopedRun=function(t,e,n){t();try{var r=n();return e(),r}catch(t){throw e(),t}},t.prototype.nextTensorId=function(){return t.nextTensorId++},t.prototype.nextVariableId=function(){return t.nextVariableId++},t.prototype.clone=function(t){var e=this.makeTensorFromDataId(t.dataId,t.shape,t.dtype),n={x:t};return this.addTapeNode(this.state.activeScope.name,n,[e],(function(t){return{x:function(){return t.toFloat()}}}),[]),e},t.prototype.runKernel=function(t,e,n,r,o){return this.runKernelFunc(null,e,null,t,n,r,o)},t.prototype.shouldCheckForMemLeaks=function(){return this.ENV.getBool("IS_TEST")},t.prototype.checkKernelForMemLeak=function(t,e,n){var r=this.backend.numDataIds(),o=0;n.forEach((function(t){o+="complex64"===t.dtype?3:1}));var i=this.state.numDataMovesStack[this.state.numDataMovesStack.length-1],a=r-e-o-i;if(a>0)throw new Error("Backend '"+this.backendName+"' has an internal memory leak ("+a+" data ids) after running '"+t+"'")},t.prototype.runKernelFunc=function(t,e,n,r,o,i,a){var s,u=this;void 0===i&&(i=[]),void 0===a&&(a=[]);var c=[],l=this.isTapeOn();null==r&&(r=null!=this.state.activeScope?this.state.activeScope.name:"");var h,f=function(t){l&&(c=t.map((function(t){return u.keep(u.clone(t))})))},p=this.state.numBytes,d=this.state.numTensors;this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack.push(0);var m,g=v(r,this.backendName);return h=null!=g?function(){var t=u.backend.numDataIds();m=g.kernelFunc({inputs:e,attrs:o,backend:u.backend});var n=Array.isArray(m)?m:[m];u.shouldCheckForMemLeaks()&&u.checkKernelForMemLeak(r,t,n);var s=n.map((function(t){var e=t.dataId,n=t.shape,r=t.dtype;return u.makeTensorFromDataId(e,n,r)})),c=s.filter((function(t,e){return a[e]}));return f((i||[]).slice().concat(c)),s}:function(){var e=u.backend.numDataIds();m=u.tidy((function(){return t(u.backend,f)}));var n=Array.isArray(m)?m:[m];return u.shouldCheckForMemLeaks()&&u.checkKernelForMemLeak(r,e,n),n},this.scopedRun((function(){return u.state.kernelDepth++}),(function(){return u.state.kernelDepth--}),(function(){s=u.ENV.getBool("DEBUG")?u.profiler.profileKernel(r,e,(function(){return h()})):h()})),l&&this.addTapeNode(r,e,s,n,c),this.state.profiling&&this.state.activeProfile.kernels.push({name:r,bytesAdded:this.state.numBytes-p,totalBytesSnapshot:this.state.numBytes,tensorsAdded:this.state.numTensors-d,totalTensorsSnapshot:this.state.numTensors,inputShapes:Object.keys(e).map((function(t){return e[t].shape})),outputShapes:s.map((function(t){return t.shape}))}),Array.isArray(m)?s:s[0]},t.prototype.makeTensor=function(t,e,n,r){if(null==t)throw new Error("Values passed to engine.makeTensor() are null");n=n||"float32",r=r||this.backend;var o=t;"string"===n&&Y(t[0])&&(o=t.map((function(t){return ut(t)})));var i=r.write(o,e,n),a=new Ct(e,n,i,this.nextTensorId());if(this.incRef(a,r),"string"===n){var s=this.state.tensorInfo.get(i),u=X(o);this.state.numBytes+=u-s.bytes,s.bytes=u}return a},t.prototype.makeTensorFromDataId=function(t,e,n,r){var o=new Ct(e,n=n||"float32",t,this.nextTensorId());return this.incRef(o,r),o},t.prototype.makeVariable=function(t,e,n,r){void 0===e&&(e=!0),n=n||this.nextVariableId().toString(),null!=r&&r!==t.dtype&&(t=t.asType(r));var o=new kt(t,e,n,this.nextTensorId());if(null!=this.state.registeredVariables[o.name])throw new Error("Variable with name "+o.name+" was already registered");return this.state.registeredVariables[o.name]=o,this.incRef(o,this.backend),o},t.prototype.incRef=function(t,e){var n=this.state.tensorInfo.has(t.dataId)?this.state.tensorInfo.get(t.dataId).refCount:0;if(this.state.numTensors++,"string"===t.dtype&&this.state.numStringTensors++,0===n){this.state.numDataBuffers++;var r=0;"complex64"!==t.dtype&&"string"!==t.dtype&&(r=t.size*K(t.dtype)),this.state.tensorInfo.set(t.dataId,{backend:e||this.backend,dtype:t.dtype,shape:t.shape,bytes:r,refCount:0}),this.state.numBytes+=r}this.state.tensorInfo.get(t.dataId).refCount++,t instanceof kt||this.track(t)},t.prototype.disposeTensor=function(t){if(this.state.tensorInfo.has(t.dataId)){this.state.numTensors--,"string"===t.dtype&&this.state.numStringTensors--;var e=this.state.tensorInfo.get(t.dataId);e.refCount<=1?("complex64"!==t.dtype&&(this.state.numBytes-=e.bytes),this.state.numDataBuffers--,e.backend.disposeData(t.dataId),this.state.tensorInfo.delete(t.dataId)):this.state.tensorInfo.get(t.dataId).refCount--}},t.prototype.disposeVariables=function(){for(var t in this.state.registeredVariables){var e=this.state.registeredVariables[t];this.disposeVariable(e)}},t.prototype.disposeVariable=function(t){this.disposeTensor(t),null!=this.state.registeredVariables[t.name]&&delete this.state.registeredVariables[t.name]},t.prototype.memory=function(){var t=this.backend.memory();return t.numTensors=this.state.numTensors,t.numDataBuffers=this.state.numDataBuffers,t.numBytes=this.state.numBytes,this.state.numStringTensors>0&&(t.unreliable=!0,null==t.reasons&&(t.reasons=[]),t.reasons.push("Memory usage by string tensors is approximate (2 bytes per character)")),t},t.prototype.profile=function(t){return u(this,void 0,void 0,(function(){var e,n;return c(this,(function(r){return this.state.profiling=!0,e=this.state.numBytes,n=this.state.numTensors,this.state.activeProfile.kernels=[],this.state.activeProfile.result=t(),this.state.profiling=!1,this.state.activeProfile.peakBytes=Math.max.apply(Math,this.state.activeProfile.kernels.map((function(t){return t.totalBytesSnapshot}))),this.state.activeProfile.newBytes=this.state.numBytes-e,this.state.activeProfile.newTensors=this.state.numTensors-n,[2,this.state.activeProfile]}))}))},t.prototype.isTapeOn=function(){return this.state.gradientDepth>0&&0===this.state.kernelDepth},t.prototype.addTapeNode=function(t,e,n,r,o){var i=this,a={id:this.state.nextTapeNodeId++,kernelName:t,inputs:e,outputs:n,saved:o},s=m(t);null!=s&&(r=s.gradFunc),null!=r&&(a.gradient=function(t){return t=t.map((function(t,e){if(null==t){var r=n[e],o=it(r.size,r.dtype);return i.makeTensor(o,r.shape,r.dtype)}return t})),r(t.length>1?t:t[0],o)}),this.state.activeTape.push(a)},t.prototype.keep=function(t){return t.kept=!0,t},t.prototype.startTape=function(){0===this.state.gradientDepth&&(this.state.activeTape=[]),this.state.gradientDepth++},t.prototype.endTape=function(){this.state.gradientDepth--},t.prototype.startScope=function(t){var e={track:[],name:"unnamed scope",id:this.state.nextScopeId++};t&&(e.name=t),this.state.scopeStack.push(e),this.state.activeScope=e},t.prototype.endScope=function(t){for(var e=this,n=Mt(t),r=new Set(n.map((function(t){return t.id}))),o=0;o<this.state.activeScope.track.length;o++){var i=this.state.activeScope.track[o];i.kept||r.has(i.id)||i.dispose()}var a=this.state.scopeStack.pop();this.state.activeScope=0===this.state.scopeStack.length?null:this.state.scopeStack[this.state.scopeStack.length-1],n.forEach((function(t){t.kept||t.scopeId!==a.id||e.track(t)}))},t.prototype.gradients=function(t,e,n,r){var o=this;if(void 0===r&&(r=!1),S(e.length>0,(function(){return"gradients() received an empty list of xs."})),null!=n&&"float32"!==n.dtype)throw new Error("dy must have 'float32' dtype, but has '"+n.dtype+"'");var i=this.scopedRun((function(){return o.startTape()}),(function(){return o.endTape()}),(function(){return o.tidy("forward",t)}));S(i instanceof Ct,(function(){return"The result y returned by f() must be a tensor."}));var a=function(t,e,n){for(var r={},o={},i=0;i<e.length;i++)r[e[i].id]=!0;for(i=0;i<t.length;i++){var a=(d=t[i]).inputs;for(var s in a){for(var u=a[s],c=!1,l=0;l<e.length;l++)if(r[u.id]){d.outputs.forEach((function(t){return r[t.id]=!0})),c=!0,o[d.id]=!0;break}if(c)break}}var h={};h[n.id]=!0;var f={};for(i=t.length-1;i>=0;i--)for(a=(d=t[i]).inputs,l=0;l<d.outputs.length;l++)if(h[d.outputs[l].id]){for(var s in a)h[a[s].id]=!0,f[d.id]=!0;break}var p=[];for(i=0;i<t.length;i++){var d;if(o[(d=t[i]).id]&&f[d.id]){var v={};for(var s in d.inputs){var m=d.inputs[s];r[m.id]&&(v[s]=m)}var g=Object.assign({},d);g.inputs=v,g.outputs=d.outputs,p.push(g)}}return p}(this.state.activeTape,e,i);if(!r&&0===a.length&&e.length>0)throw new Error("Cannot compute gradient of y=f(x) with respect to x. Make sure that the f you passed encloses all operations that lead from x to y.");return this.tidy("backward",(function(){var t,r,s={};s[i.id]=null==n?(r=ot(T(t=i.shape),"float32"),Wt.makeTensor(r,t,"float32")):n,function(t,e,n){for(var r=function(r){var o=e[r],i=[];if(o.outputs.forEach((function(e){var n=t[e.id];null!=n?i.push(n):i.push(null)})),null==o.gradient)throw new Error("Cannot compute gradient: gradient function not found for "+o.kernelName+".");var a=o.gradient(i),s=function(e){if(!(e in a))throw new Error("Cannot backprop through input "+e+". Available gradients found: "+Object.keys(a)+".");var r=n((function(){return a[e]()}));if("float32"!==r.dtype)throw new Error("Error in gradient for op "+o.kernelName+". The gradient of input "+e+" must have 'float32' dtype, but has '"+r.dtype+"'");var i=o.inputs[e];if(!F(r.shape,i.shape))throw new Error("Error in gradient for op "+o.kernelName+". The gradient of input '"+e+"' has shape '"+r.shape+"', which does not match the shape of the input '"+i.shape+"'");if(null==t[i.id])t[i.id]=r;else{var s=t[i.id];t[i.id]=s.add(r),s.dispose()}};for(var u in o.inputs)s(u)},o=e.length-1;o>=0;o--)r(o)}(s,a,(function(t){return o.tidy(t)}));var u=e.map((function(t){return s[t.id]}));return 0===o.state.gradientDepth&&(o.state.activeTape.forEach((function(t){for(var e=0,n=t.saved;e<n.length;e++)n[e].dispose()})),o.state.activeTape=null),{value:i,grads:u}}))},t.prototype.customGrad=function(t){var e=this;return S(Z(t),(function(){return"The f passed in customGrad(f) must be a function."})),function(){for(var n,r=[],o=0;o<arguments.length;o++)r[o]=arguments[o];S(r.every((function(t){return t instanceof Ct})),(function(){return"The args passed in customGrad(f)(x1, x2,...) must all be tensors"}));var i={};return r.forEach((function(t,e){i[e]=t})),e.runKernelFunc((function(e,o){return S((n=t.apply(void 0,r.concat([o]))).value instanceof Ct,(function(){return"The function f passed in customGrad(f) must return an object where `obj.value` is a tensor"})),S(Z(n.gradFunc),(function(){return"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function."})),n.value}),i,(function(t,e){var o=n.gradFunc(t,e),i=Array.isArray(o)?o:[o];S(i.length===r.length,(function(){return"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns the same number of tensors as inputs passed to f(...)."})),S(i.every((function(t){return t instanceof Ct})),(function(){return"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns a list of only tensors."}));var a={};return i.forEach((function(t,e){a[e]=function(){return t}})),a}))}},t.prototype.readSync=function(t){return this.state.tensorInfo.get(t).backend.readSync(t)},t.prototype.read=function(t){return this.state.tensorInfo.get(t).backend.read(t)},t.prototype.time=function(t){return u(this,void 0,void 0,(function(){var e,n;return c(this,(function(r){switch(r.label){case 0:return e=at(),[4,this.backend.time(t)];case 1:return(n=r.sent()).wallMs=at()-e,[2,n]}}))}))},t.prototype.track=function(t){return null!=this.state.activeScope&&(t.scopeId=this.state.activeScope.id,this.state.activeScope.track.push(t)),t},Object.defineProperty(t.prototype,"registeredVariables",{get:function(){return this.state.registeredVariables},enumerable:!0,configurable:!0}),t.prototype.reset=function(){for(var t in this.pendingBackendInitId++,this.state.dispose(),this.ENV.reset(),this.state=new Bt,this.registry)this.disposeRegisteredKernels(t),this.registry[t].dispose(),delete this.registry[t];this.backendName=null,this.backendInstance=null,this.pendingBackendInit=null},t.nextTensorId=0,t.nextVariableId=0,t}(),Wt=function(){var t=function(){if(null==Ot){var t=void 0;if("undefined"!=typeof window)t=window;else if(void 0!==n.g)t=n.g;else if("undefined"!=typeof process)t=process;else{if("undefined"==typeof self)throw new Error("Could not find a global object");t=self}Ot=t}return Ot}();if(null==t._tfengine){var e=new l(t);t._tfengine=new Lt(e)}return function(t){f=t}(t._tfengine.ENV),xt=function(){return t._tfengine},t._tfengine}();function zt(){return"undefined"!=typeof window&&null!=window.document||"undefined"!=typeof WorkerGlobalScope}var Ut=h();Ut.registerFlag("DEBUG",(function(){return!1}),(function(t){t&&console.warn("Debugging mode is ON. The output of every math call will be downloaded to CPU and checked for NaNs. This significantly impacts performance.")})),Ut.registerFlag("IS_BROWSER",(function(){return zt()})),Ut.registerFlag("IS_NODE",(function(){return"undefined"!=typeof process&&void 0!==process.versions&&void 0!==process.versions.node})),Ut.registerFlag("IS_CHROME",(function(){return"undefined"!=typeof navigator&&null!=navigator&&null!=navigator.userAgent&&/Chrome/.test(navigator.userAgent)&&/Google Inc/.test(navigator.vendor)})),Ut.registerFlag("PROD",(function(){return!1})),Ut.registerFlag("TENSORLIKE_CHECK_SHAPE_CONSISTENCY",(function(){return Ut.getBool("DEBUG")})),Ut.registerFlag("DEPRECATION_WARNINGS_ENABLED",(function(){return!0})),Ut.registerFlag("IS_TEST",(function(){return!1}));var Vt,Gt,Ht,jt={},qt={alpha:!1,antialias:!1,premultipliedAlpha:!1,preserveDrawingBuffer:!1,depth:!1,stencil:!1,failIfMajorPerformanceCaveat:!0};function Kt(t,e){jt[t]=e}function Xt(t){t in jt||(jt[t]=function(t){if(1!==t&&2!==t)throw new Error("Cannot get WebGL rendering context, WebGL is disabled.");var e=function(t){if("undefined"!=typeof OffscreenCanvas&&2===t)return new OffscreenCanvas(300,150);if("undefined"!=typeof document)return document.createElement("canvas");throw new Error("Cannot create a canvas in this context")}(t);return e.addEventListener("webglcontextlost",(function(e){e.preventDefault(),delete jt[t]}),!1),1===t?e.getContext("webgl",qt)||e.getContext("experimental-webgl",qt):e.getContext("webgl2",qt)}(t));var e=jt[t];return e.isContextLost()?(delete jt[t],Xt(t)):(e.disable(e.DEPTH_TEST),e.disable(e.STENCIL_TEST),e.disable(e.BLEND),e.disable(e.DITHER),e.disable(e.POLYGON_OFFSET_FILL),e.disable(e.SAMPLE_COVERAGE),e.enable(e.SCISSOR_TEST),e.enable(e.CULL_FACE),e.cullFace(e.BACK),jt[t])}function Yt(t,e){return[e,t]}function $t(t){var e=T(t);return O(Math.ceil(e/4))}function Jt(t,e){return[Math.max(1,Math.ceil(e/2)),Math.max(1,Math.ceil(t/2))]}function Qt(t,e){var n,r,o,i,a,s,u,c,l,f=t;return 2===h().getNumber("WEBGL_VERSION")?(n=f.R32F,r=f.R16F,o=f.RGBA16F,i=f.RGBA32F,a=f.RED,s=4,u=1,c=f.HALF_FLOAT,l=f.FLOAT):(n=t.RGBA,r=t.RGBA,o=t.RGBA,i=f.RGBA,a=t.RGBA,s=4,u=4,c=null!=e?e.HALF_FLOAT_OES:null,l=t.FLOAT),{internalFormatFloat:n,internalFormatHalfFloat:r,internalFormatPackedHalfFloat:o,internalFormatPackedFloat:i,textureFormatFloat:a,downloadTextureFormat:t.RGBA,downloadUnpackNumChannels:s,defaultNumChannels:u,textureTypeHalfFloat:c,textureTypeFloat:l}}function Zt(t,e,n){var r=n();return e&&function(t){var e=t.getError();if(e!==t.NO_ERROR)throw new Error("WebGL Error: "+ee(t,e))}(t),r}function te(t){return!!(h().getBool("WEBGL_RENDER_FLOAT32_ENABLED")||0===t||5.96e-8<Math.abs(t)&&Math.abs(t)<65504)}function ee(t,e){switch(e){case t.NO_ERROR:return"NO_ERROR";case t.INVALID_ENUM:return"INVALID_ENUM";case t.INVALID_VALUE:return"INVALID_VALUE";case t.INVALID_OPERATION:return"INVALID_OPERATION";case t.INVALID_FRAMEBUFFER_OPERATION:return"INVALID_FRAMEBUFFER_OPERATION";case t.OUT_OF_MEMORY:return"OUT_OF_MEMORY";case t.CONTEXT_LOST_WEBGL:return"CONTEXT_LOST_WEBGL";default:return"Unknown error code "+e}}function ne(t,e,n){return Ie(t,e,(function(){return t.getExtension(n)}),'Extension "'+n+'" not supported on this browser.')}function re(t,e,n){var r=Ie(t,e,(function(){return t.createShader(t.VERTEX_SHADER)}),"Unable to create vertex WebGLShader.");if(Zt(t,e,(function(){return t.shaderSource(r,n)})),Zt(t,e,(function(){return t.compileShader(r)})),!1===t.getShaderParameter(r,t.COMPILE_STATUS))throw console.log(t.getShaderInfoLog(r)),new Error("Failed to compile vertex shader.");return r}function oe(t,e,n){var r=Ie(t,e,(function(){return t.createShader(t.FRAGMENT_SHADER)}),"Unable to create fragment WebGLShader.");if(Zt(t,e,(function(){return t.shaderSource(r,n)})),Zt(t,e,(function(){return t.compileShader(r)})),!1===t.getShaderParameter(r,t.COMPILE_STATUS))throw function(t,e){var n=se.exec(e);if(null==n)return console.log("Couldn't parse line number in error: "+e),void console.log(t);for(var r=+n[1],o=t.split("\n"),i=o.length.toString().length+2,a=o.map((function(t,e){return P((e+1).toString(),i)+t})),s=0,u=0;u<a.length;u++)s=Math.max(a[u].length,s);var c=a.slice(0,r-1),l=a.slice(r-1,r),h=a.slice(r);console.log(c.join("\n")),console.log(e.split("\n")[0]),console.log("%c "+P(l[0],s),"border:1px solid red; background-color:#e3d2d2; color:#a61717"),console.log(h.join("\n"))}(n,t.getShaderInfoLog(r)),new Error("Failed to compile fragment shader.");return r}!function(t){t[t.DENSE=0]="DENSE",t[t.SHARED_BATCH=1]="SHARED_BATCH"}(Vt||(Vt={})),function(t){t[t.RENDER=0]="RENDER",t[t.UPLOAD=1]="UPLOAD",t[t.PIXELS=2]="PIXELS",t[t.DOWNLOAD=3]="DOWNLOAD"}(Gt||(Gt={})),function(t){t[t.UNPACKED_FLOAT16=0]="UNPACKED_FLOAT16",t[t.UNPACKED_FLOAT32=1]="UNPACKED_FLOAT32",t[t.PACKED_4X1_UNSIGNED_BYTE=2]="PACKED_4X1_UNSIGNED_BYTE",t[t.PACKED_2X2_FLOAT32=3]="PACKED_2X2_FLOAT32",t[t.PACKED_2X2_FLOAT16=4]="PACKED_2X2_FLOAT16"}(Ht||(Ht={}));var ie,ae,se=/ERROR: [0-9]+:([0-9]+):/g;function ue(t,e){return Ie(t,e,(function(){return t.createProgram()}),"Unable to create WebGLProgram.")}function ce(t,e,n){if(Zt(t,e,(function(){return t.linkProgram(n)})),!1===t.getProgramParameter(n,t.LINK_STATUS))throw console.log(t.getProgramInfoLog(n)),new Error("Failed to link vertex and fragment shaders.")}function le(t,e,n){if(Zt(t,e,(function(){return t.validateProgram(n)})),!1===t.getProgramParameter(n,t.VALIDATE_STATUS))throw console.log(t.getProgramInfoLog(n)),new Error("Shader program validation failed.")}function he(t,e,n){var r=Ie(t,e,(function(){return t.createBuffer()}),"Unable to create WebGLBuffer");return Zt(t,e,(function(){return t.bindBuffer(t.ARRAY_BUFFER,r)})),Zt(t,e,(function(){return t.bufferData(t.ARRAY_BUFFER,n,t.STATIC_DRAW)})),r}function fe(t,e,n){var r=Ie(t,e,(function(){return t.createBuffer()}),"Unable to create WebGLBuffer");return Zt(t,e,(function(){return t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,r)})),Zt(t,e,(function(){return t.bufferData(t.ELEMENT_ARRAY_BUFFER,n,t.STATIC_DRAW)})),r}function pe(t,e){return Ie(t,e,(function(){return t.createTexture()}),"Unable to create WebGLTexture.")}function de(t,e){var n=h().getNumber("WEBGL_MAX_TEXTURE_SIZE");if(t<=0||e<=0){var r="["+t+"x"+e+"]";throw new Error("Requested texture size "+r+" is invalid.")}if(t>n||e>n)throw r="["+t+"x"+e+"]",new Error("Requested texture size "+r+" greater than WebGL maximum on this browser / GPU ["+n+"x"+n+"].")}function ve(t,e){return Ie(t,e,(function(){return t.createFramebuffer()}),"Unable to create WebGLFramebuffer.")}function me(t,e,n,r,o,i,a,s){var u=t.getAttribLocation(n,r);return-1!==u&&(Zt(t,e,(function(){return t.bindBuffer(t.ARRAY_BUFFER,o)})),Zt(t,e,(function(){return t.vertexAttribPointer(u,i,t.FLOAT,!1,a,s)})),Zt(t,e,(function(){return t.enableVertexAttribArray(u)})),!0)}function ge(t,e,n,r){Re(t,r),Zt(t,e,(function(){return t.activeTexture(t.TEXTURE0+r)})),Zt(t,e,(function(){return t.bindTexture(t.TEXTURE_2D,n)}))}function ye(t,e,n,r){return Ie(t,e,(function(){return t.getUniformLocation(n,r)}),'uniform "'+r+'" not present in program.')}function xe(t,e,n){return t.getUniformLocation(e,n)}function be(t,e,n,r,o,i){Zt(t,e,(function(){return ge(t,e,r,i)})),Zt(t,e,(function(){return t.uniform1i(o,i)}))}function we(t,e,n,r){Zt(t,e,(function(){return t.bindFramebuffer(t.FRAMEBUFFER,r)})),Zt(t,e,(function(){return t.framebufferTexture2D(t.FRAMEBUFFER,t.COLOR_ATTACHMENT0,t.TEXTURE_2D,n,0)}))}function Ce(t,e,n){Zt(t,e,(function(){return t.bindFramebuffer(t.FRAMEBUFFER,n)})),Zt(t,e,(function(){return t.framebufferTexture2D(t.FRAMEBUFFER,t.COLOR_ATTACHMENT0,t.TEXTURE_2D,null,0)}))}function Ee(t){var e=t.checkFramebufferStatus(t.FRAMEBUFFER);if(e!==t.FRAMEBUFFER_COMPLETE)throw new Error("Error binding framebuffer: "+_e(t,e))}function _e(t,e){switch(e){case t.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:return"FRAMEBUFFER_INCOMPLETE_ATTACHMENT";case t.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:return"FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT";case t.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:return"FRAMEBUFFER_INCOMPLETE_DIMENSIONS";case t.FRAMEBUFFER_UNSUPPORTED:return"FRAMEBUFFER_UNSUPPORTED";default:return"unknown error "+e}}function Ie(t,e,n,r){var o=Zt(t,e,(function(){return n()}));if(null==o)throw new Error(r);return o}function Re(t,e){var n=t.MAX_COMBINED_TEXTURE_IMAGE_UNITS-1,r=e+t.TEXTURE0;if(r<t.TEXTURE0||r>n)throw new Error("textureUnit must be in [gl.TEXTURE0, gl.TEXTURE"+n+"].")}function Se(t,e){return void 0===e&&(e=2),T(t.slice(0,t.length-e))}function ke(t){if(0===t.length)throw Error("Cannot get rows and columns of an empty shape array.");return[t.length>1?t[t.length-2]:1,t[t.length-1]]}function De(t){var e=[1,1,1];return 0===t.length||1===t.length&&1===t[0]||(e=[Se(t)].concat(ke(t))),e}function Ae(t,e){var n;void 0===e&&(e=!1);var r=h().getNumber("WEBGL_MAX_TEXTURE_SIZE");if(e&&(r*=2,1===(t=t.map((function(e,n){return n>=t.length-2?I(t[n]):t[n]}))).length&&(t=[2,t[0]])),2!==t.length){var o=z(t);t=o.newShape}var i=T(t);if(t.length<=1&&i<=r)return[1,i];if(2===t.length&&t[0]<=r&&t[1]<=r)return t;if(3===t.length&&t[0]*t[1]<=r&&t[2]<=r)return[t[0]*t[1],t[2]];if(3===t.length&&t[0]<=r&&t[1]*t[2]<=r)return[t[0],t[1]*t[2]];if(4===t.length&&t[0]*t[1]*t[2]<=r&&t[3]<=r)return[t[0]*t[1]*t[2],t[3]];if(4===t.length&&t[0]<=r&&t[1]*t[2]*t[3]<=r)return[t[0],t[1]*t[2]*t[3]];if(e){var a=Se(t),s=2,u=2;return t.length&&(s=(n=ke(t))[0],u=n[1]),O(i=a*(s/2)*(u/2)).map((function(t){return 2*t}))}return O(i)}function Te(t){return t%2==0}function Fe(t,e){if(F(t=t.slice(-2),e=e.slice(-2)))return!0;if(!t.length||!e.length)return!0;if(0===t[0]||0===t[1]||0===e[0]||0===e[1])return!0;if(t.length!==e.length){var n=t.slice(-1)[0],r=e.slice(-1)[0];if(n===r)return!0;if(Te(n)&&Te(r)&&(1===t[0]||1===e[0]))return!0}return t[1]===e[1]&&Te(t[0])&&Te(e[0])}function Ne(t){if(null==ie){var e=Xt(t);ie=e.getParameter(e.MAX_TEXTURE_SIZE)}return ie}function Me(t){if(null==ae){var e=Xt(t);ae=e.getParameter(e.MAX_TEXTURE_IMAGE_UNITS)}return Math.min(16,ae)}function Oe(t){if(0===t)return 0;var e=Xt(t);return Pe(e,"EXT_disjoint_timer_query_webgl2")&&2===t?2:Pe(e,"EXT_disjoint_timer_query")?1:0}function Pe(t,e){return null!=t.getExtension(e)}function Be(t){try{if(null!=Xt(t))return!0}catch(t){return!1}return!1}function Le(t){if(0===t)return!1;var e=Xt(t);if(1===t){if(!Pe(e,"OES_texture_float"))return!1}else if(!Pe(e,"EXT_color_buffer_float"))return!1;return ze(e)}function We(t){if(0===t)return!1;var e=Xt(t);if(1!==t){if(Pe(e,"EXT_color_buffer_float"))return ze(e);if(Pe(e,"EXT_color_buffer_half_float")){var n=e.getExtension("EXT_color_buffer_half_float");return function(t,e){var n=Qt(t,e),r=t.createTexture();t.bindTexture(t.TEXTURE_2D,r),t.texImage2D(t.TEXTURE_2D,0,n.internalFormatHalfFloat,1,1,0,n.textureFormatFloat,n.textureTypeHalfFloat,null);var o=t.createFramebuffer();t.bindFramebuffer(t.FRAMEBUFFER,o),t.framebufferTexture2D(t.FRAMEBUFFER,t.COLOR_ATTACHMENT0,t.TEXTURE_2D,r,0);var i=t.checkFramebufferStatus(t.FRAMEBUFFER)===t.FRAMEBUFFER_COMPLETE;return t.bindTexture(t.TEXTURE_2D,null),t.bindFramebuffer(t.FRAMEBUFFER,null),t.deleteTexture(r),t.deleteFramebuffer(o),i}(e,n)}return!1}return!!Pe(e,"OES_texture_float")&&!!Pe(e,"WEBGL_color_buffer_float")&&ze(e)}function ze(t){var e=Qt(t),n=t.createTexture();t.bindTexture(t.TEXTURE_2D,n),t.texImage2D(t.TEXTURE_2D,0,e.internalFormatFloat,1,1,0,e.textureFormatFloat,e.textureTypeFloat,null);var r=t.createFramebuffer();t.bindFramebuffer(t.FRAMEBUFFER,r),t.framebufferTexture2D(t.FRAMEBUFFER,t.COLOR_ATTACHMENT0,t.TEXTURE_2D,n,0);var o=t.checkFramebufferStatus(t.FRAMEBUFFER)===t.FRAMEBUFFER_COMPLETE;return t.bindTexture(t.TEXTURE_2D,null),t.bindFramebuffer(t.FRAMEBUFFER,null),t.deleteTexture(n),t.deleteFramebuffer(r),o}function Ue(t){return 2===t&&null!=Xt(t).fenceSync}var Ve=Object.freeze({callAndCheck:Zt,canBeRepresented:te,getWebGLErrorMessage:ee,getExtensionOrThrow:ne,createVertexShader:re,createFragmentShader:oe,createProgram:ue,linkProgram:ce,validateProgram:le,createStaticVertexBuffer:he,createStaticIndexBuffer:fe,getNumChannels:function(){return 2===h().getNumber("WEBGL_VERSION")?1:4},createTexture:pe,validateTextureSize:de,createFramebuffer:ve,bindVertexBufferToProgramAttribute:me,bindTextureUnit:ge,unbindTextureUnit:function(t,e,n){Re(t,n),Zt(t,e,(function(){return t.activeTexture(t.TEXTURE0+n)})),Zt(t,e,(function(){return t.bindTexture(t.TEXTURE_2D,null)}))},getProgramUniformLocationOrThrow:ye,getProgramUniformLocation:xe,bindTextureToProgramUniformSampler:be,bindCanvasToFramebuffer:function(t,e){Zt(t,e,(function(){return t.bindFramebuffer(t.FRAMEBUFFER,null)})),Zt(t,e,(function(){return t.viewport(0,0,t.canvas.width,t.canvas.height)})),Zt(t,e,(function(){return t.scissor(0,0,t.canvas.width,t.canvas.height)}))},bindColorTextureToFramebuffer:we,unbindColorTextureFromFramebuffer:Ce,validateFramebuffer:Ee,getFramebufferErrorMessage:_e,getBatchDim:Se,getRowsCols:ke,getShapeAs3D:De,getTextureShapeFromLogicalShape:Ae,isReshapeFree:Fe,getWebGLMaxTextureSize:Ne,resetMaxTextureSize:function(){ie=null},resetMaxTexturesInShader:function(){ae=null},getMaxTexturesInShader:Me,getWebGLDisjointQueryTimerVersion:Oe,hasExtension:Pe,isWebGLVersionEnabled:Be,isCapableOfRenderingToFloatTexture:Le,isDownloadFloatTextureEnabled:We,isWebGLFenceEnabled:Ue}),Ge=h();function He(){h().set("PROD",!0)}function je(){h().set("DEBUG",!0)}function qe(){h().set("DEPRECATION_WARNINGS_ENABLED",!1),console.warn("TensorFlow.js deprecation warnings have been disabled.")}function Ke(t){h().getBool("DEPRECATION_WARNINGS_ENABLED")&&console.warn(t+" You can disable deprecation warnings with tf.disableDeprecationWarnings().")}function Xe(){Wt.disposeVariables()}function Ye(){return Wt}function $e(){return Wt.memory()}function Je(t){return Wt.profile(t)}function Qe(t,e){return Wt.tidy(t,e)}function Ze(t){Mt(t).forEach((function(t){return t.dispose()}))}function tn(t){return Wt.keep(t)}function en(t){return Wt.time(t)}function nn(t){return Wt.setBackend(t)}function rn(){return Wt.ready()}function on(){return Wt.backendName}function an(t){Wt.removeBackend(t)}function sn(t){return Wt.findBackend(t)}function un(t){return Wt.findBackendFactory(t)}function cn(t,e,n){return void 0===n&&(n=1),Wt.registerBackend(t,e,n)}function ln(){return Wt.backend}function hn(t,e){h().setPlatform(t,e)}function fn(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];h().getBool("IS_TEST")||console.warn.apply(console,t)}function pn(t,e){var n=t;if(q(t))return"string"===e?[]:[t.length];if(!Array.isArray(t))return[];for(var r=[];Array.isArray(n)||q(n)&&"string"!==e;)r.push(n.length),n=n[0];return Array.isArray(t)&&h().getBool("TENSORLIKE_CHECK_SHAPE_CONSISTENCY")&&function t(e,n,r){if(r=r||[],Array.isArray(e)||q(e)){S(n.length>0,(function(){return"Element arr["+r.join("][")+"] should be a primitive, but is an array of "+e.length+" elements"})),S(e.length===n[0],(function(){return"Element arr["+r.join("][")+"] should have "+n[0]+" elements, but has "+e.length+" elements"}));for(var o=n.slice(1),i=0;i<e.length;++i)t(e[i],o,r.concat(i))}else S(0===n.length,(function(){return"Element arr["+r.join("][")+"] is a primitive, but should be an array/TypedArray of "+n[0]+" elements"}))}(t,r,[]),r}function dn(t,e,n,r){if(null!=t&&("numeric"!==t&&t!==e||"numeric"===t&&"string"===e))throw new Error("Argument '"+n+"' passed to '"+r+"' must be "+t+" tensor, but got "+e+" tensor")}function vn(t,e,n,r){if(void 0===r&&(r="numeric"),t instanceof Ct)return dn(r,t.dtype,e,n),t;var o=Q(t);if("string"!==o&&["bool","int32","float32"].indexOf(r)>=0&&(o=r),dn(r,o,e,n),null==t||!q(t)&&!Array.isArray(t)&&"number"!=typeof t&&"boolean"!=typeof t&&"string"!=typeof t){var i=null==t?"null":t.constructor.name;throw new Error("Argument '"+e+"' passed to '"+n+"' must be a Tensor or TensorLike, but got '"+i+"'")}var a=pn(t,o);q(t)||Array.isArray(t)||(t=[t]);var s="string"!==o?nt(t,o,h().getBool("DEBUG")):A(t,[],!0);return Wt.makeTensor(s,a,o)}function mn(t,e,n,r){if(void 0===r&&(r="numeric"),!Array.isArray(t))throw new Error("Argument "+e+" passed to "+n+" must be a `Tensor[]` or `TensorLike[]`");return t.map((function(t,r){return vn(t,e+"["+r+"]",n)}),r)}function gn(t,e){for(var n=0;n<t.length;++n)if(t[t.length-n-1]!==e-1-n)return!1;return!0}function yn(t,e,n){for(var r=t.length+e.length,o=[],i=0,a=0,s=0;s<r;s++)-1===n.indexOf(s)?o.push(t[i++]):o.push(e[a++]);return o}function xn(t,e){for(var n=[],r=t.length,o=0;o<r;o++)-1===e.indexOf(o)&&n.push(t[o]);return[n,e.map((function(e){return t[e]}))]}function bn(t,e){return yn(t,e.map((function(t){return 1})),e)}function wn(t,e,n){S(gn(e,n),(function(){return t+" supports only inner-most axes for now. Got axes "+e+" and rank-"+n+" input."}))}function Cn(t,e){if(gn(t,e))return null;for(var n=[],r=0;r<e;++r)-1===t.indexOf(r)&&n.push(r);return t.forEach((function(t){return n.push(t)})),n}function En(t){return t.map((function(t,e){return[e,t]})).sort((function(t,e){return t[1]-e[1]})).map((function(t){return t[0]}))}function _n(t,e){for(var n=[],r=e-t;r<e;++r)n.push(r);return n}function In(t,e){var n=t[0].length;t.forEach((function(t,e){S(t.length===n,(function(){return"Error in concat"+n+"D: rank of tensors["+e+"] must be the same as the rank of the rest ("+n+")"}))})),S(e>=0&&e<n,(function(){return"Error in concat"+n+"D: axis must be between 0 and "+(n-1)+"."}));var r=t[0];t.forEach((function(t,o){for(var i=0;i<n;i++)S(i===e||t[i]===r[i],(function(){return"Error in concat"+n+"D: Shape of tensors["+o+"] ("+t+") does not match the shape of the rest ("+r+") along the non-concatenated axis "+o+"."}))}))}function Rn(t,e){for(var n=t[0].slice(),r=1;r<t.length;r++)n[e]+=t[r][e];return n}function Sn(t){var e=Object.keys(t);if(1!==e.length)throw new Error("Please provide an object with a single key (operation name) mapping to a function. Got an object with "+e.length+" keys.");var n=e[0],r=t[n];n.endsWith("_")&&(n=n.substring(0,n.length-1));var o=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];Wt.startScope(n);try{var o=r.apply(void 0,t);return o instanceof Promise&&console.error("Cannot return a Promise inside of tidy."),Wt.endScope(o),o}catch(t){throw Wt.endScope(null),t}};return Object.defineProperty(o,"name",{value:n,configurable:!0}),o}Ge.registerFlag("HAS_WEBGL",(function(){return Ge.getNumber("WEBGL_VERSION")>0})),Ge.registerFlag("WEBGL_VERSION",(function(){return Be(2)?2:Be(1)?1:0})),Ge.registerFlag("WEBGL_BUFFER_SUPPORTED",(function(){return 2===Ge.get("WEBGL_VERSION")})),Ge.registerFlag("WEBGL_CPU_FORWARD",(function(){return!0})),Ge.registerFlag("WEBGL_FORCE_F16_TEXTURES",(function(){return!1})),Ge.registerFlag("WEBGL_PACK",(function(){return Ge.getBool("HAS_WEBGL")})),Ge.registerFlag("WEBGL_PACK_NORMALIZATION",(function(){return Ge.getBool("WEBGL_PACK")})),Ge.registerFlag("WEBGL_PACK_CLIP",(function(){return Ge.getBool("WEBGL_PACK")})),Ge.registerFlag("WEBGL_PACK_DEPTHWISECONV",(function(){return!1})),Ge.registerFlag("WEBGL_PACK_BINARY_OPERATIONS",(function(){return Ge.getBool("WEBGL_PACK")})),Ge.registerFlag("WEBGL_PACK_UNARY_OPERATIONS",(function(){return Ge.getBool("WEBGL_PACK")})),Ge.registerFlag("WEBGL_PACK_ARRAY_OPERATIONS",(function(){return Ge.getBool("WEBGL_PACK")})),Ge.registerFlag("WEBGL_PACK_IMAGE_OPERATIONS",(function(){return Ge.getBool("WEBGL_PACK")})),Ge.registerFlag("WEBGL_PACK_REDUCE",(function(){return Ge.getBool("WEBGL_PACK")})),Ge.registerFlag("WEBGL_LAZILY_UNPACK",(function(){return Ge.getBool("WEBGL_PACK")})),Ge.registerFlag("WEBGL_CONV_IM2COL",(function(){return Ge.getBool("WEBGL_PACK")})),Ge.registerFlag("WEBGL_MAX_TEXTURE_SIZE",(function(){return Ne(Ge.getNumber("WEBGL_VERSION"))})),Ge.registerFlag("WEBGL_MAX_TEXTURES_IN_SHADER",(function(){return Me(Ge.getNumber("WEBGL_VERSION"))})),Ge.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION",(function(){var t=Ge.getNumber("WEBGL_VERSION");return 0===t?0:Oe(t)})),Ge.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE",(function(){return Ge.getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0&&(t=navigator.userAgent||navigator.vendor||window.opera,!(/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(t)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(t.substr(0,4))));var t})),Ge.registerFlag("WEBGL_RENDER_FLOAT32_CAPABLE",(function(){return Le(Ge.getNumber("WEBGL_VERSION"))})),Ge.registerFlag("WEBGL_RENDER_FLOAT32_ENABLED",(function(){return!Ge.getBool("WEBGL_FORCE_F16_TEXTURES")&&Ge.getBool("WEBGL_RENDER_FLOAT32_CAPABLE")})),Ge.registerFlag("WEBGL_DOWNLOAD_FLOAT_ENABLED",(function(){return We(Ge.getNumber("WEBGL_VERSION"))})),Ge.registerFlag("WEBGL_FENCE_API_ENABLED",(function(){return Ue(Ge.getNumber("WEBGL_VERSION"))})),Ge.registerFlag("WEBGL_SIZE_UPLOAD_UNIFORM",(function(){return Ge.getBool("WEBGL_RENDER_FLOAT32_ENABLED")?4:0})),wt=Ke;var kn=Sn({complex_:function(t,e){var n=vn(t,"real","complex"),r=vn(e,"imag","complex");return k(n.shape,r.shape,"real and imag shapes, "+n.shape+" and "+r.shape+", must match in call to tf.complex()."),Wt.runKernelFunc((function(t){return t.complex(n,r)}),{$real:n,$imag:r})}}),Dn=Sn({real_:function(t){var e=vn(t,"input","real");return Wt.runKernelFunc((function(t){return t.real(e)}),{$input:e})}}),An=Sn({imag_:function(t){var e=vn(t,"input","imag");return Wt.runKernelFunc((function(t){return t.imag(e)}),{$input:e})}});function Tn(t,e,n){return Fn(t,e,pn(t,n),n)}function Fn(t,e,n,r){if(null==r&&(r=Q(t)),"complex64"===r)throw new Error("Cannot construct a complex64 tensor directly. Please use tf.complex(real, imag).");if(!q(t)&&!Array.isArray(t)&&"number"!=typeof t&&"boolean"!=typeof t&&"string"!=typeof t)throw new Error("values passed to tensor(values) must be a number/boolean/string or an array of numbers/booleans/strings, or a TypedArray");if(null!=e){st(e);var o=T(e),i=T(n);S(o===i,(function(){return"Based on the provided shape, ["+e+"], the tensor should have "+o+" values but has "+i}));for(var a=0;a<n.length;++a){var s=n[a],u=a!==n.length-1||s!==T(e.slice(a));S(n[a]===e[a]||!u,(function(){return"Error creating a new Tensor. Inferred shape ("+n+") does not match the provided shape ("+e+"). "}))}}return q(t)||Array.isArray(t)||(t=[t]),e=e||n,t="string"!==r?nt(t,r,h().getBool("DEBUG")):A(t,[],!0),Wt.makeTensor(t,e,r)}function Nn(t,e){if((q(t)&&"string"!==e||Array.isArray(t))&&"complex64"!==e)throw new Error("Error creating a new Scalar: value must be a primitive (number|boolean|string)");if("string"===e&&q(t)&&!(t instanceof Uint8Array))throw new Error("When making a scalar from encoded string, the value must be `Uint8Array`.");return Fn(t,[],[],e)}function Mn(t,e){D(t);var n=pn(t,e);if(1!==n.length)throw new Error("tensor1d() requires values to be a flat/TypedArray");return Fn(t,null,n,e)}function On(t,e,n){if(D(t),null!=e&&2!==e.length)throw new Error("tensor2d() requires shape to have two numbers");var r=pn(t,n);if(2!==r.length&&1!==r.length)throw new Error("tensor2d() requires values to be number[][] or flat/TypedArray");if(1===r.length&&null==e)throw new Error("tensor2d() requires shape to be provided when `values` are a flat/TypedArray");return Fn(t,e,r,n)}function Pn(t,e,n){if(D(t),null!=e&&3!==e.length)throw new Error("tensor3d() requires shape to have three numbers");var r=pn(t,n);if(3!==r.length&&1!==r.length)throw new Error("tensor3d() requires values to be number[][][] or flat/TypedArray");if(1===r.length&&null==e)throw new Error("tensor3d() requires shape to be provided when `values` are a flat array");return Fn(t,e,r,n)}function Bn(t,e,n){if(D(t),null!=e&&4!==e.length)throw new Error("tensor4d() requires shape to have four numbers");var r=pn(t,n);if(4!==r.length&&1!==r.length)throw new Error("tensor4d() requires values to be number[][][][] or flat/TypedArray");if(1===r.length&&null==e)throw new Error("tensor4d() requires shape to be provided when `values` are a flat array");return Fn(t,e,r,n)}function Ln(t,e,n){if(D(t),null!=e&&5!==e.length)throw new Error("tensor5d() requires shape to have five numbers");var r=pn(t,n);if(5!==r.length&&1!==r.length)throw new Error("tensor5d() requires values to be number[][][][][] or flat/TypedArray");if(1===r.length&&null==e)throw new Error("tensor5d() requires shape to be provided when `values` are a flat array");return Fn(t,e,r,n)}function Wn(t,e,n){if(D(t),null!=e&&6!==e.length)throw new Error("tensor6d() requires shape to have six numbers");var r=pn(t,n);if(6!==r.length&&1!==r.length)throw new Error("tensor6d() requires values to be number[][][][][][] or flat/TypedArray");if(1===r.length&&null==e)throw new Error("tensor6d() requires shape to be provided when `values` are a flat array");return Fn(t,e=e||r,r,n)}function zn(t,e,n,r){return void 0===e&&(e=!0),Wt.makeVariable(t,e,n,r)}function Un(t,e){if(void 0===e&&(e="float32"),"complex64"===e){var n=Un(t,"float32"),r=Vn(t,"float32");return kn(n,r)}var o=ot(T(t),e);return Wt.makeTensor(o,t,e)}function Vn(t,e){if(void 0===e&&(e="float32"),"complex64"===e){var n=Vn(t,"float32"),r=Vn(t,"float32");return kn(n,r)}var o=it(T(t),e);return Wt.makeTensor(o,t,e)}function Gn(t,e,n){return Wt.runKernelFunc((function(r){return r.fill(t,e,n)}),{})}function Hn(t,e,n){if(n<=0)throw new Error("The number of values should be positive.");return Wt.runKernelFunc((function(r){return r.linspace(t,e,n)}),{})}function jn(t,e,n,r){if(void 0===n&&(n=1),void 0===r&&(r="float32"),0===n)throw new Error("Cannot have a step of zero");if(t===e||t<e&&n<0||e<t&&n>1)return Vn([0],r);var o=it(Math.abs(Math.ceil((e-t)/n)),r);e<t&&1===n&&(n=-1),o[0]=t;for(var i=1;i<o.length;i++)o[i]=o[i-1]+n;return Mn(o,r)}var qn=Sn({onesLike_:function(t){var e=vn(t,"x","onesLike");if("complex64"===e.dtype){var n=qn(Dn(e)),r=Kn(An(e));return kn(n,r)}return Wt.runKernelFunc((function(t){return t.onesLike(e)}),{$x:e},(function(t,e){return{$x:function(){return Kn(t)}}}))}}),Kn=Sn({zerosLike_:function(t){var e=vn(t,"x","zerosLike");return Wt.runKernelFunc((function(t){return t.zerosLike(e)}),{$x:e},(function(t,e){return{$x:function(){return Kn(t)}}}))}}),Xn=Sn({concat_:function(t,e){void 0===e&&(e=0),S(t.length>=1,(function(){return"Pass at least one tensor to concat"}));var n=mn(t,"tensors","concat");"complex64"===n[0].dtype&&n.forEach((function(t){if("complex64"!==t.dtype)throw new Error("Cannot concatenate complex64 tensors with a tensor\n          with dtype "+t.dtype+". ")})),e=W(e,n[0].shape)[0];var r=Rn(n.map((function(t){return t.shape})),e);if(0===T(r))return Tn([],r);if(1===(n=n.filter((function(t){return t.size>0}))).length)return n[0];var o=n.map((function(t){return t.shape}));In(o,e);var i=n,a={axis:e};return Wt.runKernelFunc((function(t){return t.concat(n,e)}),i,(function(t){var n=o.map((function(t){return t[e]}));return Zn(t,n,e).map((function(t){return function(){return t}}))}),"Concat",a)}}),Yn=Sn({concat1d_:function(t){return Xn(t,0)}}),$n=Sn({concat2d_:function(t,e){return Xn(t,e)}}),Jn=Sn({concat3d_:function(t,e){return Xn(t,e)}}),Qn=Sn({concat4d_:function(t,e){return Xn(t,e)}}),Zn=Sn({split_:function(t,e,n){void 0===n&&(n=0);var r,o=vn(t,"x","split");return n=W(n,o.shape)[0],"number"==typeof e?(S(o.shape[n]%e==0,(function(){return"Number of splits must evenly divide the axis."})),r=new Array(e).fill(o.shape[n]/e)):(S(o.shape[n]===e.reduce((function(t,e){return t+e})),(function(){return"The sum of sizes must match the size of the axis dimension."})),r=e),Wt.runKernelFunc((function(t){return t.split(o,r,n)}),{$x:o},(function(t){return{$x:function(){return Xn(t,n)}}}))}});function tr(t,e){return t(e={exports:{}},e.exports),e.exports}"undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:void 0!==n.g?n.g:"undefined"!=typeof self&&self;var er=tr((function(t){!function(t,e,n){function r(t){var e,n=this,r=(e=4022871197,function(t){t=t.toString();for(var n=0;n<t.length;n++){var r=.02519603282416938*(e+=t.charCodeAt(n));r-=e=r>>>0,e=(r*=e)>>>0,e+=4294967296*(r-=e)}return 2.3283064365386963e-10*(e>>>0)});n.next=function(){var t=2091639*n.s0+2.3283064365386963e-10*n.c;return n.s0=n.s1,n.s1=n.s2,n.s2=t-(n.c=0|t)},n.c=1,n.s0=r(" "),n.s1=r(" "),n.s2=r(" "),n.s0-=r(t),n.s0<0&&(n.s0+=1),n.s1-=r(t),n.s1<0&&(n.s1+=1),n.s2-=r(t),n.s2<0&&(n.s2+=1),r=null}function o(t,e){return e.c=t.c,e.s0=t.s0,e.s1=t.s1,e.s2=t.s2,e}function i(t,e){var n=new r(t),i=e&&e.state,a=n.next;return a.int32=function(){return 4294967296*n.next()|0},a.double=function(){return a()+11102230246251565e-32*(2097152*a()|0)},a.quick=a,i&&("object"==typeof i&&o(i,n),a.state=function(){return o(n,{})}),a}e&&e.exports?e.exports=i:this.alea=i}(0,t)})),nr=tr((function(t){!function(t,e,n){function r(t){var e=this,n="";e.x=0,e.y=0,e.z=0,e.w=0,e.next=function(){var t=e.x^e.x<<11;return e.x=e.y,e.y=e.z,e.z=e.w,e.w^=e.w>>>19^t^t>>>8},t===(0|t)?e.x=t:n+=t;for(var r=0;r<n.length+64;r++)e.x^=0|n.charCodeAt(r),e.next()}function o(t,e){return e.x=t.x,e.y=t.y,e.z=t.z,e.w=t.w,e}function i(t,e){var n=new r(t),i=e&&e.state,a=function(){return(n.next()>>>0)/4294967296};return a.double=function(){do{var t=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},a.int32=n.next,a.quick=a,i&&("object"==typeof i&&o(i,n),a.state=function(){return o(n,{})}),a}e&&e.exports?e.exports=i:this.xor128=i}(0,t)})),rr=tr((function(t){!function(t,e,n){function r(t){var e=this,n="";e.next=function(){var t=e.x^e.x>>>2;return e.x=e.y,e.y=e.z,e.z=e.w,e.w=e.v,(e.d=e.d+362437|0)+(e.v=e.v^e.v<<4^t^t<<1)|0},e.x=0,e.y=0,e.z=0,e.w=0,e.v=0,t===(0|t)?e.x=t:n+=t;for(var r=0;r<n.length+64;r++)e.x^=0|n.charCodeAt(r),r==n.length&&(e.d=e.x<<10^e.x>>>4),e.next()}function o(t,e){return e.x=t.x,e.y=t.y,e.z=t.z,e.w=t.w,e.v=t.v,e.d=t.d,e}function i(t,e){var n=new r(t),i=e&&e.state,a=function(){return(n.next()>>>0)/4294967296};return a.double=function(){do{var t=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},a.int32=n.next,a.quick=a,i&&("object"==typeof i&&o(i,n),a.state=function(){return o(n,{})}),a}e&&e.exports?e.exports=i:this.xorwow=i}(0,t)})),or=tr((function(t){!function(t,e,n){function r(t){var e=this;e.next=function(){var t,n,r=e.x,o=e.i;return t=r[o],n=(t^=t>>>7)^t<<24,n^=(t=r[o+1&7])^t>>>10,n^=(t=r[o+3&7])^t>>>3,n^=(t=r[o+4&7])^t<<7,t=r[o+7&7],n^=(t^=t<<13)^t<<9,r[o]=n,e.i=o+1&7,n},function(t,e){var n,r=[];if(e===(0|e))r[0]=e;else for(e=""+e,n=0;n<e.length;++n)r[7&n]=r[7&n]<<15^e.charCodeAt(n)+r[n+1&7]<<13;for(;r.length<8;)r.push(0);for(n=0;n<8&&0===r[n];++n);for(8==n?r[7]=-1:r[n],t.x=r,t.i=0,n=256;n>0;--n)t.next()}(e,t)}function o(t,e){return e.x=t.x.slice(),e.i=t.i,e}function i(t,e){null==t&&(t=+new Date);var n=new r(t),i=e&&e.state,a=function(){return(n.next()>>>0)/4294967296};return a.double=function(){do{var t=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},a.int32=n.next,a.quick=a,i&&(i.x&&o(i,n),a.state=function(){return o(n,{})}),a}e&&e.exports?e.exports=i:this.xorshift7=i}(0,t)})),ir=tr((function(t){!function(t,e,n){function r(t){var e=this;e.next=function(){var t,n,r=e.w,o=e.X,i=e.i;return e.w=r=r+1640531527|0,n=o[i+34&127],t=o[i=i+1&127],n^=n<<13,t^=t<<17,n^=n>>>15,t^=t>>>12,n=o[i]=n^t,e.i=i,n+(r^r>>>16)|0},function(t,e){var n,r,o,i,a,s=[],u=128;for(e===(0|e)?(r=e,e=null):(e+="\0",r=0,u=Math.max(u,e.length)),o=0,i=-32;i<u;++i)e&&(r^=e.charCodeAt((i+32)%e.length)),0===i&&(a=r),r^=r<<10,r^=r>>>15,r^=r<<4,r^=r>>>13,i>=0&&(a=a+1640531527|0,o=0==(n=s[127&i]^=r+a)?o+1:0);for(o>=128&&(s[127&(e&&e.length||0)]=-1),o=127,i=512;i>0;--i)r=s[o+34&127],n=s[o=o+1&127],r^=r<<13,n^=n<<17,r^=r>>>15,n^=n>>>12,s[o]=r^n;t.w=a,t.X=s,t.i=o}(e,t)}function o(t,e){return e.i=t.i,e.w=t.w,e.X=t.X.slice(),e}function i(t,e){null==t&&(t=+new Date);var n=new r(t),i=e&&e.state,a=function(){return(n.next()>>>0)/4294967296};return a.double=function(){do{var t=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},a.int32=n.next,a.quick=a,i&&(i.X&&o(i,n),a.state=function(){return o(n,{})}),a}e&&e.exports?e.exports=i:this.xor4096=i}(0,t)})),ar=tr((function(t){!function(t,e,n){function r(t){var e=this,n="";e.next=function(){var t=e.b,n=e.c,r=e.d,o=e.a;return t=t<<25^t>>>7^n,n=n-r|0,r=r<<24^r>>>8^o,o=o-t|0,e.b=t=t<<20^t>>>12^n,e.c=n=n-r|0,e.d=r<<16^n>>>16^o,e.a=o-t|0},e.a=0,e.b=0,e.c=-1640531527,e.d=1367130551,t===Math.floor(t)?(e.a=t/4294967296|0,e.b=0|t):n+=t;for(var r=0;r<n.length+20;r++)e.b^=0|n.charCodeAt(r),e.next()}function o(t,e){return e.a=t.a,e.b=t.b,e.c=t.c,e.d=t.d,e}function i(t,e){var n=new r(t),i=e&&e.state,a=function(){return(n.next()>>>0)/4294967296};return a.double=function(){do{var t=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},a.int32=n.next,a.quick=a,i&&("object"==typeof i&&o(i,n),a.state=function(){return o(n,{})}),a}e&&e.exports?e.exports=i:this.tychei=i}(0,t)})),sr=tr((function(t){!function(e,r){var o,i=this,a=256,s="random",u=r.pow(a,6),c=r.pow(2,52),l=2*c,h=a-1;function f(t,n,h){var f=[],g=v(function t(e,n){var r,o=[],i=typeof e;if(n&&"object"==i)for(r in e)try{o.push(t(e[r],n-1))}catch(t){}return o.length?o:"string"==i?e:e+"\0"}((n=1==n?{entropy:!0}:n||{}).entropy?[t,m(e)]:null==t?function(){try{var t;return o&&(t=o.randomBytes)?t=t(a):(t=new Uint8Array(a),(i.crypto||i.msCrypto).getRandomValues(t)),m(t)}catch(t){var n=i.navigator,r=n&&n.plugins;return[+new Date,i,r,i.screen,m(e)]}}():t,3),f),y=new p(f),x=function(){for(var t=y.g(6),e=u,n=0;t<c;)t=(t+n)*a,e*=a,n=y.g(1);for(;t>=l;)t/=2,e/=2,n>>>=1;return(t+n)/e};return x.int32=function(){return 0|y.g(4)},x.quick=function(){return y.g(4)/4294967296},x.double=x,v(m(y.S),e),(n.pass||h||function(t,e,n,o){return o&&(o.S&&d(o,y),t.state=function(){return d(y,{})}),n?(r[s]=t,e):t})(x,g,"global"in n?n.global:this==r,n.state)}function p(t){var e,n=t.length,r=this,o=0,i=r.i=r.j=0,s=r.S=[];for(n||(t=[n++]);o<a;)s[o]=o++;for(o=0;o<a;o++)s[o]=s[i=h&i+t[o%n]+(e=s[o])],s[i]=e;(r.g=function(t){for(var e,n=0,o=r.i,i=r.j,s=r.S;t--;)e=s[o=h&o+1],n=n*a+s[h&(s[o]=s[i=h&i+e])+(s[i]=e)];return r.i=o,r.j=i,n})(a)}function d(t,e){return e.i=t.i,e.j=t.j,e.S=t.S.slice(),e}function v(t,e){for(var n,r=t+"",o=0;o<r.length;)e[h&o]=h&(n^=19*e[h&o])+r.charCodeAt(o++);return m(e)}function m(t){return String.fromCharCode.apply(0,t)}if(r["seed"+s]=f,v(r.random(),e),t.exports){t.exports=f;try{o=n(294)}catch(t){}}}([],Math)}));sr.alea=er,sr.xor128=nr,sr.xorwow=rr,sr.xorshift7=or,sr.xor4096=ir,sr.tychei=ar;var ur=sr.alea,cr=function(){function t(t,e,n,r,o){this.mean=t,this.stdDev=e,this.dtype=n,this.nextVal=NaN,this.truncated=r,this.truncated&&(this.upper=this.mean+2*this.stdDev,this.lower=this.mean-2*this.stdDev);var i=o||Math.random();this.random=ur(i.toString())}return t.prototype.nextValue=function(){if(!isNaN(this.nextVal)){var t=this.nextVal;return this.nextVal=NaN,t}for(var e,n,r=!1;!r;){var o=void 0,i=void 0,a=void 0;do{a=(o=2*this.random()-1)*o+(i=2*this.random()-1)*i}while(a>=1||0===a);var s=Math.sqrt(-2*Math.log(a)/a);e=this.mean+this.stdDev*o*s,n=this.mean+this.stdDev*i*s,this.truncated&&!this.isValidTruncated(e)||(r=!0)}return this.truncated&&!this.isValidTruncated(n)||(this.nextVal=this.convertValue(n)),this.convertValue(e)},t.prototype.convertValue=function(t){return null==this.dtype||"float32"===this.dtype?t:Math.round(t)},t.prototype.isValidTruncated=function(t){return t<=this.upper&&t>=this.lower},t}(),lr=function(){function t(t,e,n,r){this.alpha=t,this.beta=1/e,this.dtype=n;var o=r||Math.random();this.randu=ur(o.toString()),this.randn=new cr(0,1,n,!1,this.randu()),this.d=t<1?t+2/3:t-1/3,this.c=1/Math.sqrt(9*this.d)}return t.prototype.nextValue=function(){for(var t,e,n,r,o,i;;){do{r=this.randn.nextValue(),i=1+this.c*r}while(i<=0);if(i*=i*i,e=1-.331*(t=r*r)*t,n=.5*t+this.d*(1-i+Math.log(i)),(o=this.randu())<e||Math.log(o)<n)break}return i=1/this.beta*this.d*i,this.alpha<1&&(i*=Math.pow(this.randu(),1/this.alpha)),this.convertValue(i)},t.prototype.convertValue=function(t){return"float32"===this.dtype?t:Math.round(t)},t}(),hr=function(){function t(t,e,n,r){var o=this;if(void 0===t&&(t=0),void 0===e&&(e=1),this.canReturnFloat=function(){return null==o.dtype||"float32"===o.dtype},this.min=t,this.range=e-t,this.dtype=n,null==r&&(r=Math.random()),"number"==typeof r&&(r=r.toString()),!this.canReturnFloat()&&this.range<=1)throw new Error("The difference between "+t+" - "+e+" <= 1 and dtype is not float");this.random=ur(r)}return t.prototype.convertValue=function(t){return this.canReturnFloat()?t:Math.round(t)},t.prototype.nextValue=function(){return this.convertValue(this.min+this.range*this.random())},t}();function fr(t,e,n){return void 0===e&&(e="float32"),e=e||"float32",st(t),new yt(t,e,n)}function pr(t,e){void 0===e&&(e=!1),console.log(t.toString(e))}var dr=Sn({batchToSpaceND_:function(t,e,n){var r=vn(t,"x","batchToSpaceND"),o=e.reduce((function(t,e){return t*e}));return S(r.rank>=1+e.length,(function(){return"input rank is "+r.rank+" but should be > than blockShape.length "+e.length})),S(n.length===e.length,(function(){return"crops.length is "+n.length+" but should be equal to blockShape.length  "+e.length})),S(r.shape[0]%o==0,(function(){return"input tensor batch is "+r.shape[0]+" but is not divisible by the product of the elements of blockShape "+e.join(" * ")+" === "+o})),Wt.runKernelFunc((function(t){return t.batchToSpaceND(r,e,n)}),{$x:r},(function(t){return{$x:function(){return t.spaceToBatchND(e,n)}}}))}}),vr=Sn({broadcastTo_:function(t,e){var n=vn(t,"broadcastTo","x"),r=n.shape;if(e.some((function(t){return!(t>0)||t%1!=0})))throw new Error("broadcastTo(): Invalid broadcast shape ["+e+"].");if(e.length<n.rank)throw new Error("broadcastTo(): shape.length="+e.length+" < input.rank="+n.rank+".");if(e.length>n.rank){for(var o=n.shape.slice();o.length<e.length;)o.unshift(1);n=n.reshape(o)}for(var i=Array.from(e),a=e.length-1;a>=0;a--)if(n.shape[a]===e[a])i[a]=1;else if(1!==n.shape[a])throw new Error("broadcastTo(): ["+r+"] cannot be broadcast to ["+e+"].");var s=i.map((function(t,e){return t>1?e:-1})).filter((function(t){return t>=0}));return 0===s.length?n.clone():Wt.runKernelFunc((function(t){return t.tile(n,i)}),{input:n},(function(t){return{input:function(){return t.sum(s,!0)}}}))}}),mr=Sn({cast_:function(t,e){var n=vn(t,"x","cast");if(!H(e))throw new Error("Failed to cast to unknown dtype "+e);if("string"===e&&"string"!==n.dtype||"string"!==e&&"string"===n.dtype)throw new Error("Only strings can be casted to strings");var r={dtype:e};return Wt.runKernelFunc((function(t){return t.cast(n,e)}),{x:n},(function(t){return{x:function(){return t.clone()}}}),"Cast",r)}}),gr=Sn({clone_:function(t){var e=vn(t,"x","clone",null);return Wt.runKernelFunc((function(){return Wt.makeTensorFromDataId(e.dataId,e.shape,e.dtype)}),{$x:e},(function(t){return{$x:function(){return t.toFloat()}}}))}}),yr=Sn({cumsum_:function(t,e,n,r){void 0===e&&(e=0),void 0===n&&(n=!1),void 0===r&&(r=!1);var o=vn(t,"x","cumsum"),i=Cn([e|=0],o.rank),a=o;null!=i&&(a=o.transpose(i));var s=_n(1,o.rank)[0],u=Wt.runKernelFunc((function(t){return t.cumsum(a,s,n,r)}),{permutedX:a},(function(t){return{permutedX:function(){return t.cumsum(e,n,!r)}}}));return null!=i&&(u=u.transpose(i)),u}}),xr=Sn({depthToSpace_:function(t,e,n){void 0===n&&(n="NHWC");var r=vn(t,"x","depthToSpace"),o="NHWC"===n?r.shape[1]:r.shape[2],i="NHWC"===n?r.shape[2]:r.shape[3],a="NHWC"===n?r.shape[3]:r.shape[1];return S(o*e>=0,(function(){return"Negative dimension size caused by overflow when multiplying\n      "+o+" and "+e+"  for depthToSpace with input shape\n      "+r.shape})),S(i*e>=0,(function(){return"Negative dimension size caused by overflow when multiplying\n      "+i+" and "+e+" for depthToSpace with input shape\n          "+r.shape})),S(a%(e*e)==0,(function(){return"Dimension size must be evenly divisible by "+e*e+" but is "+a+" for depthToSpace with input shape "+r.shape})),Wt.runKernelFunc((function(t){return t.depthToSpace(r,e,n)}),{$x:r})}}),br=Sn({expandDims_:function(t,e){void 0===e&&(e=0);var n=vn(t,"x","expandDims",null);S(e<=n.rank,(function(){return"Axis must be <= rank of the tensor"}));var r=n.shape.slice();return e<0&&(S(-(n.rank+1)<=e,(function(){return"Axis must be in the interval ["+-(n.rank+1)+", "+n.rank+"]"})),e=n.rank+e+1),r.splice(e,0,1),Nr(n,r)}}),wr=Sn({eye_:function(t,e,n,r){void 0===r&&(r="float32"),null==e&&(e=t);for(var o=fr([t,e],r),i=t<=e?t:e,a=0;a<i;++a)o.set(1,a,a);var s=o.toTensor().as2D(t,e);if(null==n)return s;if(1===n.length)return Br(br(s,0),[n[0],1,1]);if(2===n.length)return Br(br(br(s,0),0),[n[0],n[1],1,1]);if(3===n.length)return Br(br(br(br(s,0),0),0),[n[0],n[1],n[2],1,1]);throw new Error("eye() currently supports only 1D and 2D batchShapes, but received "+n.length+"D.")}}),Cr=Sn({multinomial_:function(t,e,n,r){void 0===r&&(r=!1);var o=vn(t,"logits","multinomial"),i=o.size,a=o.rank;if(i<2)throw new Error("Error in multinomial: you need at least 2 outcomes, but got "+i+".");if(a>2)throw new Error("Rank of probabilities must be 1 or 2, but is "+a);n=n||Math.random();var s=1===a?o.as2D(1,-1):o,u=Wt.runKernelFunc((function(t){return t.multinomial(s,r,e,n)}),{logits2D:s});return 1===a?u.as1D():u}}),Er=Sn({oneHot_:function(t,e,n,r){if(void 0===n&&(n=1),void 0===r&&(r=0),e<2)throw new Error("Error in oneHot: depth must be >=2, but it is "+e);var o=vn(t,"indices","oneHot","int32"),i=o.shape.concat([e]);return o=o.flatten(),Wt.runKernelFunc((function(t){return t.oneHot(o,e,n,r)}),{$indices:o},(function(t){return{$indices:function(){return Vn(o.shape,"float32")}}})).reshape(i)}}),_r=Sn({pad_:function(t,e,n){void 0===n&&(n=0);var r=vn(t,"x","pad");if(0===r.rank)throw new Error("pad(scalar) is not defined. Pass non-scalar to pad");var o={paddings:e,constantValue:n};return Wt.runKernelFunc((function(t){return t.pad(r,e,n)}),{x:r},(function(t){var n=e.map((function(t){return t[0]}));return{x:function(){return t.slice(n,r.shape)}}}),"PadV2",o)}}),Ir=Sn({pad1d_:function(t,e,n){return void 0===n&&(n=0),S(2===e.length,(function(){return"Invalid number of paddings. Must be length of 2."})),_r(t,[e],n)}}),Rr=Sn({pad2d_:function(t,e,n){return void 0===n&&(n=0),S(2===e.length&&2===e[0].length&&2===e[1].length,(function(){return"Invalid number of paddings. Must be length of 2 each."})),_r(t,e,n)}}),Sr=Sn({pad3d_:function(t,e,n){return void 0===n&&(n=0),S(3===e.length&&2===e[0].length&&2===e[1].length&&2===e[2].length,(function(){return"Invalid number of paddings. Must be length of 2 each."})),_r(t,e,n)}}),kr=Sn({pad4d_:function(t,e,n){return void 0===n&&(n=0),S(4===e.length&&2===e[0].length&&2===e[1].length&&2===e[2].length&&2===e[3].length,(function(){return"Invalid number of paddings. Must be length of 2 each."})),_r(t,e,n)}}),Dr=Sn({rand_:function(t,e,n){var r=T(t),o=null;if(null==n||"float32"===n)o=new Float32Array(r);else if("int32"===n)o=new Int32Array(r);else{if("bool"!==n)throw new Error("Unknown data type "+n);o=new Uint8Array(r)}for(var i=0;i<r;i++)o[i]=e();return Wt.makeTensor(o,t,n)}}),Ar=Sn({randomNormal_:function(t,e,n,r,o){if(void 0===e&&(e=0),void 0===n&&(n=1),null!=r&&"bool"===r)throw new Error("Unsupported data type "+r);for(var i=new cr(e,n,r,!1,o),a=fr(t,r),s=0;s<a.values.length;s++)a.values[s]=i.nextValue();return a.toTensor()}}),Tr=Sn({randomGamma_:function(t,e,n,r,o){if(void 0===n&&(n=1),void 0===r&&(r="float32"),null==n&&(n=1),null==r&&(r="float32"),"float32"!==r&&"int32"!==r)throw new Error("Unsupported data type "+r);for(var i=new lr(e,n,r,o),a=fr(t,r),s=0;s<a.values.length;s++)a.values[s]=i.nextValue();return a.toTensor()}}),Fr=Sn({randomUniform_:function(t,e,n,r,o){void 0===e&&(e=0),void 0===n&&(n=1),void 0===r&&(r="float32");for(var i=fr(t,r),a=new hr(e,n,null,o),s=0;s<i.values.length;s++)i.values[s]=a.nextValue();return i.toTensor()}}),Nr=Sn({reshape_:function(t,e){var n=vn(t,"x","reshape",null);e=L(e,n.size),S(n.size===T(e),(function(){return"new shape and old shape must have the same number of elements."}));var r={shape:e};return Wt.runKernelFunc((function(t){return t.reshape(n,e)}),{x:n},(function(t){return{x:function(){return t.reshape(n.shape)}}}),"Reshape",r)}}),Mr=Sn({spaceToBatchND_:function(t,e,n){var r=vn(t,"x","spaceToBatchND");return S(r.rank>=1+e.length,(function(){return"input rank "+r.rank+" should be > than [blockShape] "+e.length})),S(n.length===e.length,(function(){return"paddings.shape[0] "+n.length+" must be equal to [blockShape] "+e.length})),S(r.shape.reduce((function(t,r,o){return o>0&&o<=e.length?t&&(r+n[o-1][0]+n[o-1][1])%e[o-1]==0:t}),!0),(function(){return"input spatial dimensions "+r.shape.slice(1)+" with paddings "+n.toString()+" must be divisible by blockShapes "+e.toString()})),Wt.runKernelFunc((function(t){return t.spaceToBatchND(r,e,n)}),{$x:r},(function(t){return{$x:function(){return t.batchToSpaceND(e,n)}}}))}}),Or=Sn({squeeze_:function(t,e){var n=vn(t,"x","squeeze");return Nr(n,z(n.shape,e).newShape)}}),Pr=Sn({stack_:function(t,e){void 0===e&&(e=0);var n=mn(t,"tensors","stack");if(S(n.length>=1,(function(){return"Pass at least one tensor to tf.stack"})),1===n.length)return n[0].expandDims(e);var r=n[0].rank,o=n[0].shape,i=n[0].dtype;S(e<=r,(function(){return"Axis must be <= rank of the tensor"})),n.forEach((function(t){k(o,t.shape,"All tensors passed to stack must have matching shapes")})),n.forEach((function(t){S(i===t.dtype,(function(){return"All tensors passed to stack must have matching dtypes"}))}));var a=n.map((function(t){return t.expandDims(e)}));return Xn(a,e)}}),Br=Sn({tile_:function(t,e){var n=vn(t,"x","tile",null);S(n.rank===e.length,(function(){return"Error in transpose: rank of input "+n.rank+" must match length of reps "+e+"."}));var r=[n],o={reps:e};return Wt.runKernelFunc((function(t,r){var o=t.tile(n,e);return r([n]),o}),{x:n},(function(t,n){var r=n[0];return{x:function(){var n=Kn(r);if(1===r.rank)for(var o=0;o<e[0];++o)n=n.add(t.slice([o*r.shape[0]],[r.shape[0]]));else if(2===r.rank)for(o=0;o<e[0];++o)for(var i=0;i<e[1];++i)n=n.add(t.slice([o*r.shape[0],i*r.shape[1]],[r.shape[0],r.shape[1]]));else if(3===r.rank)for(o=0;o<e[0];++o)for(i=0;i<e[1];++i)for(var a=0;a<e[2];++a)n=n.add(t.slice([o*r.shape[0],i*r.shape[1],a*r.shape[2]],[r.shape[0],r.shape[1],r.shape[2]]));else{if(4!==r.rank)throw new Error("Gradient for tile operation is not implemented for rank-"+r.rank+" tensors yet.");for(o=0;o<e[0];++o)for(i=0;i<e[1];++i)for(a=0;a<e[2];++a)for(var s=0;s<e[3];++s)n=n.add(t.slice([o*r.shape[0],i*r.shape[1],a*r.shape[2],s*r.shape[3]],[r.shape[0],r.shape[1],r.shape[2],r.shape[3]]))}return n}}}),"Tile",o,r)}}),Lr=Sn({truncatedNormal_:function(t,e,n,r,o){if(void 0===e&&(e=0),void 0===n&&(n=1),null!=r&&"bool"===r)throw new Error("Unsupported data type "+r);for(var i=new cr(e,n,r,!0,o),a=fr(t,r),s=0;s<a.values.length;s++)a.values[s]=i.nextValue();return a.toTensor()}}),Wr=Sn({unstack_:function(t,e){void 0===e&&(e=0),e=e||0;var n=vn(t,"x","unstack");S(e>=-n.shape.length&&e<n.shape.length,(function(){return"Axis = "+e+" is not in [-"+n.shape.length+", "+n.shape.length+")"})),e<0&&(e+=n.shape.length);var r={axis:e};return Wt.runKernelFunc((function(t){return t.unstack(n,e)}),{x:n},(function(t){return{x:function(){return Pr(t,e)}}}),"Unpack",r)}}),zr=function(t,e){return u(this,void 0,void 0,(function(){var n,r,o,i,a,s,u,l,h,f;return c(this,(function(c){switch(c.label){case 0:return n=vn(t,"x","setdiff1d"),r=vn(e,"y","setdiff1d"),S(n.dtype===r.dtype,(function(){return"x and y should have the same dtype, but got x ("+n.dtype+") and y ("+r.dtype+")."})),S(1===n.rank,(function(){return"x should be 1D tensor, but got x ("+n.shape+")."})),S(1===r.rank,(function(){return"y should be 1D tensor, but got y ("+r.shape+")."})),[4,n.data()];case 1:return o=c.sent(),[4,r.data()];case 2:for(i=c.sent(),a=new Set(i),s=0,h=0;h<o.length;h++)a.has(o[h])||s++;for(u=new yt([s],n.dtype),l=new yt([s],"int32"),h=0,f=0;h<o.length;h++)a.has(o[h])||(u.values[f]=o[h],l.values[f]=h,f++);return[2,[u.toTensor(),l.toTensor()]]}}))}))};function Ur(t,e,n,r){void 0===r&&(r=!0);var o=[];if(r)(o=o.concat(e.slice(0))).push(t[0]/n),o=o.concat(t.slice(1));else{o=o.concat(t[0]);for(var i=e.length,a=0;a<i;++a)o=o.concat([t[a+1]/e[a],e[a]]);o=o.concat(t.slice(i+1))}return o}function Vr(t,e,n){void 0===n&&(n=!0);var r=[];if(n){r.push(e);for(var o=e+1;o<t;++o)o<=2*e?(r.push(o),r.push(o-(e+1))):r.push(o)}else{var i=[],a=[];for(o=1;o<t;++o)o>=2*e+1||o%2==1?a.push(o):i.push(o);r.push.apply(r,i),r.push(0),r.push.apply(r,a)}return r}function Gr(t,e,n,r){void 0===r&&(r=!0);var o=[];r?o.push(t[0]/n):o.push(t[0]*n);for(var i=1;i<t.length;++i)i<=e.length?r?o.push(e[i-1]*t[i]):o.push(t[i]/e[i-1]):o.push(t[i]);return o}function Hr(t,e){for(var n=[0],r=0;r<e;++r)n.push(t[r][0]);return n}function jr(t,e,n){for(var r=t.slice(0,1),o=0;o<n;++o)r.push(t[o+1]-e[o][0]-e[o][1]);return r}function qr(t,e){if(t.rank<1)throw new Error("tf.gatherND() expects the input to be rank 1 or higher, but the rank was "+t.rank+".");if(e.rank<1)throw new Error("tf.gatherND() expects the indices to be rank 1 or higher, but the rank was "+e.rank+".");if("int32"!==e.dtype)throw new Error("tf.gatherND() expects the indices to be int32 type, but the dtype was "+e.dtype+".");if(e.shape[e.rank-1]>t.rank)throw new Error("index innermost dimension length must be <= tensor rank; saw: "+e.shape[e.rank-1]+" vs. "+t.rank);if(0===t.size)throw new Error("Requested more than 0 entries, but input is empty. Input shape: "+t.shape+".");for(var n=e.shape,r=n[n.length-1],o=1,i=0;i<n.length-1;++i)o*=n[i];var a=t.shape,s=n.slice();s.pop();var u=1;for(i=r;i<t.rank;++i)u*=a[i],s.push(a[i]);var c=et(t.shape).map((function(t){return t/u})).concat([1]).slice(0,r);return[s,o,u,c]}var Kr=Object.freeze({prepareAndValidate:qr});function Xr(t){return t<=30?t:tt(t,Math.floor(Math.sqrt(t)))}function Yr(t,e,n){var r=e.rank>1?e.shape[e.rank-1]:1,o=e.rank>1?e.rank-1:1,i="Must have updates.shape = indices.shape[:batchDim] + shape[sliceDim:], got updates.shape: "+n.shape+", indices.shape: "+e.shape+", shape: "+t+", sliceDim: "+r+", and batchDim: "+o+".";if(n.rank<o)throw new Error(i+" update.rank < "+o+". ");if(t.length<r+(n.rank-o))throw new Error(i+" Output shape length < "+(r+(n.rank-o)));if(n.rank!==o+t.length-r)throw new Error(i+" update.rank != "+(o+t.length-r));for(var a=0;a<o;++a)if(n.shape[a]!==e.shape[a])throw new Error(i+" updates.shape["+a+"] ("+n.shape[a]+") != indices.shape["+a+"] ("+e.shape[a]+").");for(a=0;a<n.rank-o;++a)if(n.shape[a+o]!==t[a+r])throw new Error(i+" updates.shape["+(a+o)+"] ("+n.shape[a+o]+") != shape["+(a+o)+"] ("+t[a+o]+")")}function $r(t,e,n){if(e.rank<1)throw new Error("tf.scatterND() expects the indices to be rank 1 or higher, but the rank was "+e.rank+".");if(t.rank<1)throw new Error("tf.scatterND() expects the updates to be rank 1 or higher, but the rank was "+t.rank+".");if("int32"!==e.dtype)throw new Error("The dtype of 'indices' should be int32, but got dtype: "+e.dtype);if(n.length<1)throw new Error("Output rank must be greater or equal to 1, but got shape: "+n);if(0===n.length){if(0===e.size)throw new Error("Indices specified for empty output. indices shape: "+e.shape);if(0===t.size)throw new Error("Updates specified for empty output. updates shape: "+t.shape)}Yr(n,e,t)}function Jr(t,e,n){for(var r=e.shape.length,o=r>1?e.shape[r-1]:1,i=n.length,a=1,s=o;s<i;++s)a*=n[s];var u=o<1?1:o;return{sliceRank:o,numUpdates:T(e.shape)/u,sliceSize:a,strides:et(n.slice(0,o)).concat([1]),outputSize:T(n)}}var Qr=Object.freeze({validateUpdateShape:Yr,validateInput:$r,calculateShapes:Jr});function Zr(t,e,n){S(t.rank===e.length,(function(){return"Error in slice"+t.rank+"D: Length of begin "+e+" must match the rank of the array ("+t.rank+")."})),S(t.rank===n.length,(function(){return"Error in slice"+t.rank+"D: Length of size "+n+" must match the rank of the array ("+t.rank+")."}));for(var r=function(r){S(e[r]+n[r]<=t.shape[r],(function(){return"Error in slice"+t.rank+"D: begin["+r+"] + size["+r+"] ("+(e[r]+n[r])+") would overflow input.shape["+r+"] ("+t.shape[r]+")"}))},o=0;o<t.rank;++o)r(o)}function to(t){for(var e=[],n=0;t>0;)1&t&&e.push(n),t/=2,n++;return e}function eo(t,e,n){for(var r=[],o=0;o<t.length;o++)r[o]=Math.ceil((e[o]-t[o])/n[o]);return r}function no(t,e,n,r,o){var i=e[o],a=n[o]||1;(t&1<<o||null==i)&&(i=a>0?Number.MIN_SAFE_INTEGER:Number.MAX_SAFE_INTEGER);var s=r[o];return i<0&&(i+=s),_(0,i,s-1)}function ro(t,e,n,r,o){var i=e[o],a=n[o]||1;(t&1<<o||null==i)&&(i=a>0?Number.MAX_SAFE_INTEGER:Number.MIN_SAFE_INTEGER);var s=r[o];return i<0&&(i+=s),a>0?_(0,i,s):_(-1,i,s-1)}function oo(t,e,n){for(var r=n.length,o=0;o<n.length;o++)if(n[o]>1){r=o;break}for(o=r+1;o<n.length;o++)if(e[o]>0||n[o]!==t[o])return!1;return!0}function io(t,e){for(var n=t.length>0?t[t.length-1]:1,r=0;r<t.length-1;r++)n+=t[r]*e[r];return n}var ao=Object.freeze({assertParamsValid:Zr,maskToAxes:to,computeOutShape:eo,startForAxis:no,stopForAxis:ro,isSliceContinous:oo,computeFlatOffset:io});function so(t){return S(Z(t),(function(){return"The f passed in grad(f) must be a function"})),function(e,n){var r=vn(e,"x","tf.grad",null),o=null!=n?vn(n,"dy","tf.grad"):null;return Wt.tidy((function(){var e=Wt.gradients((function(){return t(r)}),[r],o),n=e.value,i=e.grads;return null!=o&&k(n.shape,o.shape,"The shape of dy passed in grad(f)(x, dy) must match the shape returned by f(x)"),po(i),i[0]}))}}function uo(t){return S(Z(t),(function(){return"The f passed in grads(f) must be a function"})),function(e,n){S(Array.isArray(e),(function(){return"The args passed in grads(f)(args) must be an array of `Tensor`s or `TensorLike`s"}));var r=mn(e,"args","tf.grads",null),o=null!=n?vn(n,"dy","tf.grads"):null;return Wt.tidy((function(){var e=Wt.gradients((function(){return t.apply(void 0,r)}),r,o),n=e.value,i=e.grads;return null!=o&&k(n.shape,o.shape,"The shape of dy passed in grads(f)([x1,...], dy) must match the shape returned by f([x1,...])"),po(i),i}))}}function co(t){return S(Z(t),(function(){return"The f passed in valueAndGrad(f) must be a function"})),function(e,n){S(e instanceof Ct,(function(){return"The x passed in valueAndGrad(f)(x) must be a tensor"})),S(null==n||n instanceof Ct,(function(){return"The dy passed in valueAndGrad(f)(x, dy) must be a tensor"}));var r=Wt.gradients((function(){return t(e)}),[e],n),o=r.grads,i=r.value;return po(o),{grad:o[0],value:i}}}function lo(t){return S(Z(t),(function(){return"The f passed in valueAndGrads(f) must be a function"})),function(e,n){S(Array.isArray(e)&&e.every((function(t){return t instanceof Ct})),(function(){return"The args passed in valueAndGrads(f)(args) must be array of tensors"})),S(null==n||n instanceof Ct,(function(){return"The dy passed in valueAndGrads(f)(args, dy) must be a tensor"}));var r=Wt.gradients((function(){return t.apply(void 0,e)}),e,n);return null!=n&&k(r.value.shape,n.shape,"The shape of dy passed in valueAndGrads(f)([x1,...], dy) must match the shape returned by f([x1,...])"),po(r.grads),r}}function ho(t,e){S(Z(t),(function(){return"The f passed in variableGrads(f) must be a function"})),S(null==e||Array.isArray(e)&&e.every((function(t){return t instanceof kt})),(function(){return"The varList passed in variableGrads(f, varList) must be an array of variables"}));var n=null!=e;if(!n)for(var r in e=[],Wt.registeredVariables)e.push(Wt.registeredVariables[r]);var o=n?e.filter((function(t){return!t.trainable})):null,i=e.length;S((e=e.filter((function(t){return t.trainable}))).length>0,(function(){return"variableGrads() expects at least one of the input variables to be trainable, but none of the "+i+" variables is trainable."}));var a=Wt.gradients(t,e,null,!0),s=a.value,u=a.grads;S(u.some((function(t){return null!=t})),(function(){return"Cannot find a connection between any variable and the result of the loss function y=f(x). Please make sure the operations that use variables are inside the function f passed to minimize()."})),S(0===s.rank,(function(){return"The f passed in variableGrads(f) must return a scalar, but it returned a rank-"+s.rank+" tensor"}));var c={};return e.forEach((function(t,e){null!=u[e]&&(c[t.name]=u[e])})),null!=o&&o.forEach((function(t){return c[t.name]=null})),{value:s,grads:c}}function fo(t){return Wt.customGrad(t)}function po(t){if(t.filter((function(t){return null==t})).length>0)throw new Error("Cannot compute gradient of y=f(x) with respect to x. Make sure that\n    the f you passed encloses all operations that lead from x to y.")}var vo=Sn({softmax_:function(t,e){void 0===e&&(e=-1);var n=vn(t,"logits","softmax","float32");if(-1===e&&(e=n.rank-1),e!==n.rank-1)throw Error("Softmax along a non-last dimension is not yet supported. Logits was rank "+n.rank+" and dim was "+e);return Wt.runKernelFunc((function(t,r){var o=t.softmax(n,e);return r([o]),o}),{logits:n},(function(t,n){var r=n[0],o=t.mul(r);return{logits:function(){return o.sub(o.sum([e],!0).mul(r))}}}),"Softmax",{dim:e},[],[!0])}}),mo=Sn({logSoftmax_:function(t,e){void 0===e&&(e=-1);var n=vn(t,"logits","logSoftmax");if(-1===e&&(e=n.rank-1),e!==n.rank-1)throw Error("Log Softmax along a non-last dimension is not yet supported. Logits was rank "+n.rank+" and axis was "+e);return fo((function(t,n){var r=t.max(e,!0),o=t.sub(r),i=o.toFloat().sub(o.exp().sum(e,!0).log());return n([i]),{value:i,gradFunc:function(t,n){var r=n[0].exp();return t.sub(t.sum(e,!0).mul(r))}}}))(n)}}),go=function(){function t(t,e){this.backend=t,this.dataMover=e,this.data=new WeakMap,this.dataIdsCount=0}return t.prototype.get=function(t){return this.data.has(t)||this.dataMover.moveData(this.backend,t),this.data.get(t)},t.prototype.set=function(t,e){this.dataIdsCount++,this.data.set(t,e)},t.prototype.has=function(t){return this.data.has(t)},t.prototype.delete=function(t){return this.dataIdsCount--,this.data.delete(t)},t.prototype.numDataIds=function(){return this.dataIdsCount},t}(),yo=function(){function t(){}return t.prototype.time=function(t){return xo("time")},t.prototype.read=function(t){return xo("read")},t.prototype.readSync=function(t){return xo("readSync")},t.prototype.numDataIds=function(){return xo("numDataIds")},t.prototype.disposeData=function(t){return xo("disposeData")},t.prototype.write=function(t,e,n){return xo("write")},t.prototype.move=function(t,e,n,r){return xo("move")},t.prototype.memory=function(){return xo("memory")},t.prototype.floatPrecision=function(){return xo("floatPrecision")},t.prototype.epsilon=function(){return 32===this.floatPrecision()?1e-7:1e-4},t.prototype.batchMatMul=function(t,e,n,r){return xo("batchMatMul")},t.prototype.fusedBatchMatMul=function(t){return t.a,t.b,t.transposeA,t.transposeB,t.bias,t.activation,t.preluActivationWeights,xo("fusedBatchMatMul")},t.prototype.slice=function(t,e,n){return xo("slice")},t.prototype.stridedSlice=function(t,e,n,r){return xo("stridedSlice")},t.prototype.unstack=function(t,e){return xo("unstack")},t.prototype.reverse=function(t,e){return xo("reverse")},t.prototype.concat=function(t,e){return xo("concat")},t.prototype.neg=function(t){return xo("neg")},t.prototype.add=function(t,e){return xo("add")},t.prototype.addN=function(t){return xo("addN")},t.prototype.subtract=function(t,e){return xo("subtract")},t.prototype.multiply=function(t,e){return xo("multiply")},t.prototype.realDivide=function(t,e){return xo("realDivide")},t.prototype.floorDiv=function(t,e){return xo("floorDiv")},t.prototype.sum=function(t,e){return xo("sum")},t.prototype.prod=function(t,e){return xo("prod")},t.prototype.unsortedSegmentSum=function(t,e,n){return xo("unsortedSegmentSum")},t.prototype.argMin=function(t,e){return xo("argMin")},t.prototype.argMax=function(t,e){return xo("argMax")},t.prototype.equal=function(t,e){return xo("equal")},t.prototype.notEqual=function(t,e){return xo("notEqual")},t.prototype.less=function(t,e){return xo("less")},t.prototype.lessEqual=function(t,e){return xo("lessEqual")},t.prototype.greater=function(t,e){return xo("greater")},t.prototype.greaterEqual=function(t,e){return xo("greaterEqual")},t.prototype.logicalNot=function(t){return xo("logicalNot")},t.prototype.logicalAnd=function(t,e){return xo("logicalAnd")},t.prototype.logicalOr=function(t,e){return xo("logicalOr")},t.prototype.where=function(t){return xo("where")},t.prototype.select=function(t,e,n){return xo("select")},t.prototype.topk=function(t,e,n){return xo("topk")},t.prototype.min=function(t,e){return xo("min")},t.prototype.minimum=function(t,e){return xo("minimum")},t.prototype.mod=function(t,e){return xo("mod")},t.prototype.max=function(t,e){return xo("max")},t.prototype.maximum=function(t,e){return xo("maximum")},t.prototype.all=function(t,e){return xo("all")},t.prototype.any=function(t,e){return xo("any")},t.prototype.squaredDifference=function(t,e){return xo("squaredDifference")},t.prototype.ceil=function(t){return xo("ceil")},t.prototype.floor=function(t){return xo("floor")},t.prototype.round=function(t){return xo("round")},t.prototype.sign=function(t){return xo("sign")},t.prototype.isNaN=function(t){return xo("isNaN")},t.prototype.isInf=function(t){return xo("isInf")},t.prototype.isFinite=function(t){return xo("isFinite")},t.prototype.pow=function(t,e){return xo("pow")},t.prototype.exp=function(t){return xo("exp")},t.prototype.expm1=function(t){return xo("expm1")},t.prototype.softmax=function(t,e){return xo("softmax")},t.prototype.log=function(t){return xo("log")},t.prototype.log1p=function(t){return xo("log1p")},t.prototype.sqrt=function(t){return xo("sqrt")},t.prototype.rsqrt=function(t){return xo("rsqrt")},t.prototype.square=function(t){return xo("square")},t.prototype.reciprocal=function(t){return xo("reciprocal")},t.prototype.relu=function(t){return xo("relu")},t.prototype.relu6=function(t){return xo("relu6")},t.prototype.prelu=function(t,e){return xo("prelu")},t.prototype.elu=function(t){return xo("elu")},t.prototype.eluDer=function(t,e){return xo("eluDer")},t.prototype.selu=function(t){return xo("selu")},t.prototype.int=function(t){return xo("int")},t.prototype.clip=function(t,e,n){return xo("clip")},t.prototype.abs=function(t){return xo("abs")},t.prototype.complexAbs=function(t){return xo("complexAbs")},t.prototype.sigmoid=function(t){return xo("sigmoid")},t.prototype.softplus=function(t){return xo("softplus")},t.prototype.sin=function(t){return xo("sin")},t.prototype.cos=function(t){return xo("cos")},t.prototype.tan=function(t){return xo("tan")},t.prototype.asin=function(t){return xo("asin")},t.prototype.acos=function(t){return xo("acos")},t.prototype.atan=function(t){return xo("atan")},t.prototype.atan2=function(t,e){return xo("atan2")},t.prototype.sinh=function(t){return xo("sinh")},t.prototype.cosh=function(t){return xo("cosh")},t.prototype.tanh=function(t){return xo("tanh")},t.prototype.asinh=function(t){return xo("asinh")},t.prototype.acosh=function(t){return xo("acosh")},t.prototype.atanh=function(t){return xo("atanh")},t.prototype.erf=function(t){return xo("erf")},t.prototype.step=function(t,e){return xo("step")},t.prototype.fusedConv2d=function(t){return t.input,t.filter,t.convInfo,t.bias,t.activation,t.preluActivationWeights,xo("fusedConv2d")},t.prototype.conv2d=function(t,e,n){return xo("conv2d")},t.prototype.conv2dDerInput=function(t,e,n){return xo("conv2dDerInput")},t.prototype.conv2dDerFilter=function(t,e,n){return xo("conv2dDerFilter")},t.prototype.fusedDepthwiseConv2D=function(t){return t.input,t.filter,t.convInfo,t.bias,t.activation,t.preluActivationWeights,xo("fusedDepthwiseConv2D")},t.prototype.depthwiseConv2D=function(t,e,n){return xo("depthwiseConv2D")},t.prototype.depthwiseConv2DDerInput=function(t,e,n){return xo("depthwiseConv2DDerInput")},t.prototype.depthwiseConv2DDerFilter=function(t,e,n){return xo("depthwiseConv2DDerFilter")},t.prototype.conv3d=function(t,e,n){return xo("conv3d")},t.prototype.conv3dDerInput=function(t,e,n){return xo("conv3dDerInput")},t.prototype.conv3dDerFilter=function(t,e,n){return xo("conv3dDerFilter")},t.prototype.maxPool=function(t,e){return xo("maxPool")},t.prototype.maxPoolBackprop=function(t,e,n,r){return xo("maxPoolBackprop")},t.prototype.avgPool=function(t,e){return xo("avgPool")},t.prototype.avgPoolBackprop=function(t,e,n){return xo("avgPoolBackprop")},t.prototype.avgPool3d=function(t,e){return xo("avgPool3d")},t.prototype.avgPool3dBackprop=function(t,e,n){return xo("avgPool3dBackprop")},t.prototype.maxPool3d=function(t,e){return xo("maxPool3d")},t.prototype.maxPool3dBackprop=function(t,e,n,r){return xo("maxPool3dBackprop")},t.prototype.reshape=function(t,e){return xo("reshape")},t.prototype.cast=function(t,e){return xo("cast")},t.prototype.tile=function(t,e){return xo("tile")},t.prototype.pad=function(t,e,n){return xo("pad")},t.prototype.transpose=function(t,e){return xo("transpose")},t.prototype.gather=function(t,e,n){return xo("gather")},t.prototype.gatherND=function(t,e){return xo("gatherND")},t.prototype.scatterND=function(t,e,n){return xo("scatterND")},t.prototype.batchToSpaceND=function(t,e,n){return xo("batchToSpaceND")},t.prototype.spaceToBatchND=function(t,e,n){return xo("spaceToBatchND")},t.prototype.resizeBilinear=function(t,e,n,r){return xo("resizeBilinear")},t.prototype.resizeBilinearBackprop=function(t,e,n){return xo("resizeBilinearBackprop")},t.prototype.resizeNearestNeighbor=function(t,e,n,r){return xo("resizeNearestNeighbor")},t.prototype.resizeNearestNeighborBackprop=function(t,e,n){return xo("resizeNearestNeighborBackprop")},t.prototype.batchNormalization=function(t,e,n,r,o,i){return xo("batchNormalization")},t.prototype.localResponseNormalization4D=function(t,e,n,r,o){return xo("localResponseNormalization4D")},t.prototype.LRNGrad=function(t,e,n,r,o,i,a){return xo("LRNGrad")},t.prototype.multinomial=function(t,e,n,r){return xo("multinomial")},t.prototype.oneHot=function(t,e,n,r){return xo("oneHot")},t.prototype.cumsum=function(t,e,n,r){return xo("cumsum")},t.prototype.nonMaxSuppression=function(t,e,n,r,o){return xo("nonMaxSuppression")},t.prototype.fft=function(t){return xo("fft")},t.prototype.ifft=function(t){return xo("ifft")},t.prototype.complex=function(t,e){return xo("complex")},t.prototype.real=function(t){return xo("real")},t.prototype.imag=function(t){return xo("imag")},t.prototype.cropAndResize=function(t,e,n,r,o,i){return xo("cropAndResize")},t.prototype.depthToSpace=function(t,e,n){return xo("depthToSpace")},t.prototype.split=function(t,e,n){return xo("split")},t.prototype.sparseToDense=function(t,e,n,r){return xo("sparseToDense")},t.prototype.diag=function(t){return xo("diag")},t.prototype.fill=function(t,e,n){return xo("fill")},t.prototype.onesLike=function(t){return xo("onesLike")},t.prototype.zerosLike=function(t){return xo("zerosLike")},t.prototype.linspace=function(t,e,n){return xo("linspace")},t.prototype.dispose=function(){return xo("dispose")},t}();function xo(t){throw new Error("'"+t+"' not yet implemented or not found in the registry. Did you forget to import the kernel?")}function bo(t,e){for(var n=t.length,r=[],o=0;o<n;o++){var i=n-1-o,a=t[i]||1;(e[e.length-1-o]||1)>1&&1===a&&r.unshift(i)}return r}function wo(t,e){for(var n=[],r=0;r<e.length;r++){var o=t[t.length-r-1],i=e.length-r-1,a=e[i];(null==o||1===o&&a>1)&&n.unshift(i)}return n}function Co(t,e){for(var n=[],r=Math.max(t.length,e.length),o=0;o<r;o++){var i=t[t.length-o-1];null==i&&(i=1);var a=e[e.length-o-1];if(null==a&&(a=1),1===i)n.unshift(a);else if(1===a)n.unshift(i);else{if(i!==a)throw Error("Operands could not be broadcast together with shapes "+t+" and "+e+".");n.unshift(i)}}return n}function Eo(t,e,n,r,o,i,a){void 0===a&&(a="channelsLast");var s,u=ko(e),c=u[0],l=u[1];if("channelsLast"===a)s=[c,l,t[3],t[3]];else{if("channelsFirst"!==a)throw new Error("Unknown dataFormat "+a);s=[c,l,t[1],t[1]]}return Io(t,s,n,r,o,i,!1,a)}function _o(t,e,n,r,o,i,a){void 0===a&&(a="NDHWC");var s,u,c=Do(e),l=c[0],h=c[1],f=c[2];if("NDHWC"===a)u="channelsLast",s=[l,h,f,t[4],t[4]];else{if("NCDHW"!==a)throw new Error("Unknown dataFormat "+a);u="channelsFirst",s=[l,h,f,t[1],t[1]]}return Ro(t,s,n,r,o,!1,u,i)}function Io(t,e,n,r,o,i,a,s){void 0===a&&(a=!1),void 0===s&&(s="channelsLast");var u=[-1,-1,-1,-1],c=u[0],l=u[1],h=u[2],f=u[3];if("channelsLast"===s)c=t[0],l=t[1],h=t[2],f=t[3];else{if("channelsFirst"!==s)throw new Error("Unknown dataFormat "+s);c=t[0],f=t[1],l=t[2],h=t[3]}var p,d=e[0],v=e[1],m=e[3],g=ko(n),y=g[0],x=g[1],b=ko(r),w=b[0],C=b[1],E=Ao(d,w),_=Ao(v,C),I=function(t,e,n,r,o,i,a,s){var u,c,l;if("number"==typeof t){u={top:t,bottom:t,left:t,right:t,type:0===t?"VALID":"NUMBER"};var h=function(t,e,n,r,o){null==r&&(r=So(t,e,n));var i=t[1],a=To((t[0]-e+2*r)/n+1,o);S(N(a),(function(){return"The output # of rows ("+a+") must be an integer. Change the stride and/or zero pad parameters"}));var s=To((i-e+2*r)/n+1,o);return S(N(s),(function(){return"The output # of columns ("+s+") must be an integer. Change the stride and/or zero pad parameters"})),[a,s]}([e,n],i,r,t,s);c=h[0],l=h[1]}else if("same"===t){c=Math.ceil(e/r),l=Math.ceil(n/o);var f=Math.max(0,(c-1)*r+i-e),p=Math.max(0,(l-1)*o+a-n),d=Math.floor(f/2),v=f-d,m=Math.floor(p/2);u={top:d,bottom:v,left:m,right:p-m,type:"SAME"}}else{if("valid"!==t)throw Error("Unknown padding parameter: "+t);u={top:0,bottom:0,left:0,right:0,type:"VALID"},c=Math.ceil((e-i+1)/r),l=Math.ceil((n-a+1)/o)}return{padInfo:u,outHeight:c,outWidth:l}}(o,l,h,y,x,E,_,i),R=I.padInfo,k=I.outHeight,D=I.outWidth,A=a?m*f:m;return"channelsFirst"===s?p=[c,A,k,D]:"channelsLast"===s&&(p=[c,k,D,A]),{batchSize:c,dataFormat:s,inHeight:l,inWidth:h,inChannels:f,outHeight:k,outWidth:D,outChannels:A,padInfo:R,strideHeight:y,strideWidth:x,filterHeight:d,filterWidth:v,effectiveFilterHeight:E,effectiveFilterWidth:_,dilationHeight:w,dilationWidth:C,inShape:t,outShape:p,filterShape:e}}function Ro(t,e,n,r,o,i,a,s){void 0===i&&(i=!1),void 0===a&&(a="channelsLast");var u=[-1,-1,-1,-1,-1],c=u[0],l=u[1],h=u[2],f=u[3],p=u[4];if("channelsLast"===a)c=t[0],l=t[1],h=t[2],f=t[3],p=t[4];else{if("channelsFirst"!==a)throw new Error("Unknown dataFormat "+a);c=t[0],p=t[1],l=t[2],h=t[3],f=t[4]}var d,v=e[0],m=e[1],g=e[2],y=e[4],x=Do(n),b=x[0],w=x[1],C=x[2],E=Do(r),_=E[0],I=E[1],R=E[2],k=Ao(v,_),D=Ao(m,I),A=Ao(g,R),T=function(t,e,n,r,o,i,a,s,u,c,l){var h,f,p,d;if("number"==typeof t){h={top:t,bottom:t,left:t,right:t,front:t,back:t,type:0===t?"VALID":"NUMBER"};var v=function(t,e,n,r,o,i){null==o&&(o=So(t,e,r));var a=t[1],s=t[2],u=To((t[0]-e+2*o)/r+1,i);S(N(u),(function(){return"The output # of depths ("+u+") must be an integer. Change the stride and/or zero pad parameters"}));var c=To((a-e+2*o)/r+1,i);S(N(c),(function(){return"The output # of rows ("+c+") must be an integer. Change the stride and/or zero pad parameters"}));var l=To((s-e+2*o)/r+1,i);return S(N(l),(function(){return"The output # of columns ("+l+") must be an integer. Change the stride and/or zero pad parameters"})),[u,c,l,1]}([e,n,r,1],s,0,o,t,l);f=v[0],p=v[1],d=v[2]}else if("same"===t){var m=((f=Math.ceil(e/o))-1)*o+s-e,g=((p=Math.ceil(n/i))-1)*i+u-n,y=((d=Math.ceil(r/a))-1)*a+c-r,x=Math.floor(m/2),b=m-x,w=Math.floor(g/2),C=g-w,E=Math.floor(y/2);h={top:w,bottom:C,left:E,right:y-E,front:x,back:b,type:"SAME"}}else{if("valid"!==t)throw Error("Unknown padding parameter: "+t);h={top:0,bottom:0,left:0,right:0,front:0,back:0,type:"VALID"},f=Math.ceil((e-s+1)/o),p=Math.ceil((n-u+1)/i),d=Math.ceil((r-c+1)/a)}return{padInfo:h,outDepth:f,outHeight:p,outWidth:d}}(o,l,h,f,b,w,C,k,D,A,s),F=T.padInfo,M=T.outDepth,O=T.outHeight,P=T.outWidth,B=i?y*p:y;return"channelsFirst"===a?d=[c,B,M,O,P]:"channelsLast"===a&&(d=[c,M,O,P,B]),{batchSize:c,dataFormat:a,inDepth:l,inHeight:h,inWidth:f,inChannels:p,outDepth:M,outHeight:O,outWidth:P,outChannels:B,padInfo:F,strideDepth:b,strideHeight:w,strideWidth:C,filterDepth:v,filterHeight:m,filterWidth:g,effectiveFilterDepth:k,effectiveFilterHeight:D,effectiveFilterWidth:A,dilationDepth:_,dilationHeight:I,dilationWidth:R,inShape:t,outShape:d,filterShape:e}}function So(t,e,n,r){void 0===r&&(r=1);var o=Ao(e,r);return Math.floor((t[0]*(n-1)-n+o)/2)}function ko(t){return"number"==typeof t?[t,t,t]:2===t.length?[t[0],t[1],1]:t}function Do(t){return"number"==typeof t?[t,t,t]:t}function Ao(t,e){return e<=1?t:t+(t-1)*(e-1)}function To(t,e){if(!e)return t;switch(e){case"round":return Math.round(t);case"ceil":return Math.ceil(t);case"floor":return Math.floor(t);default:throw new Error("Unknown roundingMode "+e)}}function Fo(t){var e=ko(t),n=e[0],r=e[1],o=e[2];return 1===n&&1===r&&1===o}function No(t,e){return Fo(t)||Fo(e)}function Mo(t){if("NHWC"===t)return"channelsLast";if("NCHW"===t)return"channelsFirst";throw new Error("Unknown dataFormat "+t)}function Oo(t,e,n){if("complex64"===e){if("complex64"===t.dtype)return t.clone();var r=Vn(t.shape),o=t.toFloat(),i=n.complex(o,r);return r.dispose(),o.dispose(),i}if(!j(t.dtype,e))return Wt.makeTensorFromDataId(t.dataId,t.shape,e);if("complex64"===t.dtype){var a=n.real(t);return i=a.cast(e),a.dispose(),i}if("int32"===e)return n.int(t);if("bool"===e){var s=Nn(0,t.dtype);return i=n.notEqual(t,s),s.dispose(),i}throw new Error("Error in Cast: failed to cast "+t.dtype+" to "+e)}function Po(t,e){return Wt.makeTensorFromDataId(t.dataId,e,t.dtype)}function Bo(t,e,n){var r=(e-t)/(n-1),o=it(n,"float32");o[0]=t;for(var i=1;i<o.length;i++)o[i]=o[i-1]+r;return Mn(o,"float32")}var Lo=Object.freeze({castTensor:Oo,reshapeTensor:Po,linspaceImpl:Bo,upcastType:At,axesAreInnerMostDims:gn,combineLocations:yn,computeOutAndReduceShapes:xn,expandShapeToKeepDim:bn,assertAxesAreInnerMostDims:wn,getAxesPermutation:Cn,getUndoAxesPermutation:En,getInnerMostAxes:_n,getBroadcastDims:bo,getReductionAxes:wo,assertAndGetBroadcastShape:Co,assertParamsConsistent:In,computeOutShape:Rn,computePool2DInfo:Eo,computePool3DInfo:_o,computeConv2DInfo:Io,computeConv3DInfo:Ro,computeDefaultPad:So,tupleValuesAreOne:Fo,eitherStridesOrDilationsAreOne:No,convertConv2DDataFormat:Mo,PARALLELIZE_THRESHOLD:30,computeOptimalWindowSize:Xr});function Wo(t,e){if(t.length!==e.length)throw new Error("Cannot merge real and imag arrays of different lengths. real:"+t.length+", imag: "+e.length+".");for(var n=new Float32Array(2*t.length),r=0;r<n.length;r+=2)n[r]=t[r/2],n[r+1]=e[r/2];return n}function zo(t,e){return{real:t[2*e],imag:t[2*e+1]}}function Uo(t,e,n,r){t[2*r]=e,t[2*r+1]=n}function Vo(t,e,n){var r=(n?2:-2)*Math.PI*(t/e);return{real:Math.cos(r),imag:Math.sin(r)}}function Go(t,e,n){var r=function(t,e,n){return function(t,e,n){for(var r=0,o=t.length,i=0,a=!1;r<o;){var s=n(e,t[i=r+(o-r>>>1)]);s>0?r=i+1:(o=i,a=!s)}return a?r:-r-1}(t,e,n||Ho)}(t,e,n),o=r<0?-(r+1):r;t.splice(o,0,e)}function Ho(t,e){return t>e?1:t<e?-1:0}function jo(t,e,n,r,o){return Ko(t,e,n,r,o,0).selectedIndices}function qo(t,e,n,r,o,i){var a=Ko(t,e,n,r,o,i,!0);return a.numValidOutputs.dispose(),{selectedIndices:a.selectedIndices,selectedScores:a.selectedScores}}function Ko(t,e,n,r,o,i,a,s){void 0===a&&(a=!1),void 0===s&&(s=!1);for(var u=Array.from(e).map((function(t,e){return{score:t,boxIndex:e,suppressBeginIndex:0}})).filter((function(t){return t.score>o})).sort($o),c=i>0?-.5/i:0,l=[],h=[];l.length<n&&u.length>0;){var f=u.pop(),p=f.score,d=f.boxIndex,v=f.suppressBeginIndex;if(p<o)break;for(var m=!1,g=l.length-1;g>=v;--g){var y=Xo(t,d,l[g]);if(y>=r){m=!0;break}if(f.score=f.score*Yo(r,c,y),f.score<=o)break}f.suppressBeginIndex=l.length,m||(f.score===p?(l.push(d),h.push(f.score)):f.score>o&&Go(u,f,$o))}var x=l.length;return s&&(l.fill(0,x),h.fill(0,x)),{selectedIndices:Mn(l,"int32"),selectedScores:Mn(h,"float32"),numValidOutputs:Nn(x,"int32")}}function Xo(t,e,n){var r=t.subarray(4*e,4*e+4),o=t.subarray(4*n,4*n+4),i=Math.min(r[0],r[2]),a=Math.min(r[1],r[3]),s=Math.max(r[0],r[2]),u=Math.max(r[1],r[3]),c=Math.min(o[0],o[2]),l=Math.min(o[1],o[3]),h=Math.max(o[0],o[2]),f=Math.max(o[1],o[3]),p=(s-i)*(u-a),d=(h-c)*(f-l);if(p<=0||d<=0)return 0;var v=Math.max(i,c),m=Math.max(a,l),g=Math.min(s,h),y=Math.min(u,f),x=Math.max(g-v,0)*Math.max(y-m,0);return x/(p+d-x)}function Yo(t,e,n){var r=Math.exp(e*n*n);return n<=t?r:0}function $o(t,e){return t.score-e.score||t.score===e.score&&e.boxIndex-t.boxIndex}function Jo(t,e,n){var r=new Array(t.rank).fill(0),o=t.shape.slice();return e.map((function(e){o[n]=e;var i=t.slice(r,o);return r[n]+=e,i}))}function Qo(t,e){for(var n=new Array(t.rank),r=0;r<n.length;r++)n[r]=t.shape[r]*e[r];var o=fr(n,t.dtype);for(r=0;r<o.values.length;++r){for(var i=o.indexToLoc(r),a=new Array(t.rank),s=0;s<a.length;s++)a[s]=i[s]%t.shape[s];var u=t.locToIndex(a);o.values[r]=t.values[u]}return o.toTensor()}function Zo(t,e,n,r,o){for(var i=e[e.length-1],a=[t.length/i,i],s=a[0],u=a[1],c=U(n,s*r),l=U("int32",s*r),h=0;h<s;h++){for(var f=h*u,p=t.subarray(f,f+u),d=[],v=0;v<p.length;v++)d.push({value:p[v],index:v});d.sort((function(t,e){return e.value-t.value}));var m=h*r,g=c.subarray(m,m+r),y=l.subarray(m,m+r);for(v=0;v<r;v++)g[v]=d[v].value,y[v]=d[v].index}var x=e.slice();return x[x.length-1]=r,[Tn(c,x,n),Tn(l,x,"int32")]}function ti(t,e){for(var n=[],r=0;r<e.length;r++)e[r]&&n.push(r);var o=fr(t,"int32"),i=fr([n.length,t.length],"int32");for(r=0;r<n.length;r++){var a=o.indexToLoc(n[r]),s=r*t.length;i.values.set(a,s)}return i.toTensor()}var ei=function(t,e){this.outputShape=[],this.outputShape=t,this.variableNames=e.map((function(t,e){return"T"+e}));var n=[];this.variableNames.forEach((function(t){n.push("float v"+t+" = get"+t+"AtOutCoords();")}));var r=this.variableNames.map((function(t){return"v"+t})).join(" + ");this.userCode="\n      void main() {\n        "+n.join("\n        ")+"\n\n        float result = "+r+";\n        setOutput(result);\n      }\n    "},ni=function(t,e){this.outputShape=[],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t,this.variableNames=e.map((function(t,e){return"T"+e}));var n=[];this.variableNames.forEach((function(t){n.push("vec4 v"+t+" = get"+t+"AtOutCoords();")}));var r=this.variableNames.map((function(t){return"v"+t})).join(" + ");this.userCode="\n      void main() {\n        "+n.join("\n        ")+"\n\n        vec4 result = "+r+";\n        setOutput(result);\n      }\n    "},ri=function(t,e,n){this.variableNames=["A"];var r=t.windowSize,o=t.batchSize,i=t.inSize,a=Math.ceil(i/r);n||this.variableNames.push("bestIndicesA"),this.outputShape=[o,a];var s="max"===e?">":"<",u=n?"inOffset + i;":"round(getBestIndicesA(batch, inOffset + i));";this.userCode="\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * "+r+";\n\n        int bestIndex = inOffset;\n        float bestValue = getA(batch, bestIndex);\n\n        for (int i = 0; i < "+r+"; i++) {\n          int inIdx = "+u+";\n          float candidate = getA(batch, inIdx);\n          if (candidate "+s+" bestValue) {\n            bestValue = candidate;\n            bestIndex = inIdx;\n          }\n        }\n        setOutput(float(bestIndex));\n      }\n    "};function oi(t,e){return["x","y","z","w","u","v"].slice(0,e).map((function(e){return t+"."+e}))}function ii(t,e){return 1===e?[t]:oi(t,e)}function ai(){var t,e,n,r,o,i,a,s,u,c;return 2===h().getNumber("WEBGL_VERSION")?(t="#version 300 es",e="in",n="out",r="in",o="texture",i="outputColor",a="out vec4 outputColor;",s="\n      bool isnan_custom(float val) {\n        return (val > 0.0 || val < 0.0) ? false : val != 0.0;\n      }\n\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan_custom(val.x),\n          isnan_custom(val.y), isnan_custom(val.z), isnan_custom(val.w));\n      }\n\n      #define isnan(value) isnan_custom(value)\n    ",u="",c="\n      #define round(value) newRound(value)\n      int newRound(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 newRound(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    "):(t="",e="attribute",n="varying",r="varying",o="texture2D",i="gl_FragColor",a="",s="\n      #define isnan(value) isnan_custom(value)\n      bool isnan_custom(float val) {\n        return (val > 0. || val < 1. || val == 0.) ? false : true;\n      }\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan(val.x), isnan(val.y), isnan(val.z), isnan(val.w));\n      }\n    ",u="\n      uniform float INFINITY;\n\n      bool isinf(float val) {\n        return abs(val) == INFINITY;\n      }\n      bvec4 isinf(vec4 val) {\n        return equal(abs(val), vec4(INFINITY));\n      }\n    ",c="\n      int round(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 round(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    "),{version:t,attribute:e,varyingVs:n,varyingFs:r,texture2D:o,output:i,defineOutput:a,defineSpecialNaN:s,defineSpecialInf:u,defineRound:c}}function si(t,e,n){void 0===n&&(n="index");var r=et(e);return r.map((function(e,o){return"int "+t[o]+" = "+n+" / "+e+"; "+(o===r.length-1?"int "+t[o+1]+" = "+n+" - "+t[o]+" * "+e:"index -= "+t[o]+" * "+e)+";"})).join("")}function ui(t){var e=et(t).map((function(t){return t.toString()}));return"\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * "+e[0]+" + coords.y * "+e[1]+" + coords.z;\n  }\n"}var ci="\n  const float FLOAT_MAX = 1.70141184e38;\n  const float FLOAT_MIN = 1.17549435e-38;\n\n  lowp vec4 encode_float(highp float v) {\n    if (isnan(v)) {\n      return vec4(255, 255, 255, 255);\n    }\n\n    highp float av = abs(v);\n\n    if(av < FLOAT_MIN) {\n      return vec4(0.0, 0.0, 0.0, 0.0);\n    } else if(v > FLOAT_MAX) {\n      return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;\n    } else if(v < -FLOAT_MAX) {\n      return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;\n    }\n\n    highp vec4 c = vec4(0,0,0,0);\n\n    highp float e = floor(log2(av));\n    highp float m = exp2(fract(log2(av))) - 1.0;\n\n    c[2] = floor(128.0 * m);\n    m -= c[2] / 128.0;\n    c[1] = floor(32768.0 * m);\n    m -= c[1] / 32768.0;\n    c[0] = floor(8388608.0 * m);\n\n    highp float ebias = e + 127.0;\n    c[3] = floor(ebias / 2.0);\n    ebias -= c[3] * 2.0;\n    c[2] += floor(ebias) * 128.0;\n\n    c[3] += 128.0 * step(0.0, -v);\n\n    return c / 255.0;\n  }\n";function li(t,e,n,r){var o=[];t.forEach((function(t){var e=T(t.shapeInfo.logicalShape);t.shapeInfo.isUniform?o.push("uniform float "+t.name+(e>1?"["+e+"]":"")+";"):(o.push("uniform sampler2D "+t.name+";"),o.push("uniform int offset"+t.name+";"))}));var i,a,s=o.join("\n"),u=t.map((function(t){return function(t,e,n){void 0===n&&(n=!1);var r="";r+=n?fi(t):hi(t);var o=t.shapeInfo.logicalShape,i=e.logicalShape;return o.length<=i.length&&(r+=n?function(t,e){var n,r,o=t.name,i=o.charAt(0).toUpperCase()+o.slice(1),a="get"+i+"AtOutCoords",s=t.shapeInfo.logicalShape.length,u=e.logicalShape.length,c=bo(t.shapeInfo.logicalShape,e.logicalShape),l=xi(u),h=u-s,f=["x","y","z","w","u","v"];n=0===s?"":u<2&&c.length>=1?"coords = 0;":c.map((function(t){return"coords."+f[t+h]+" = 0;"})).join("\n"),r=u<2&&s>0?"coords":t.shapeInfo.logicalShape.map((function(t,e){return"coords."+f[e+h]})).join(", ");var p="return outputValue;",d=1===T(t.shapeInfo.logicalShape),v=1===T(e.logicalShape);if(1!==s||d||v){if(d&&!v)p=1===u?"\n        return vec4(outputValue.x, outputValue.x, 0., 0.);\n      ":"\n        return vec4(outputValue.x);\n      ";else if(c.length){var m=s-2,g=s-1;c.indexOf(m)>-1&&c.indexOf(g)>-1?p="return vec4(outputValue.x);":c.indexOf(m)>-1?p="return vec4(outputValue.x, outputValue.y, outputValue.x, outputValue.y);":c.indexOf(g)>-1&&(p="return vec4(outputValue.xx, outputValue.zz);")}}else p="\n      return vec4(outputValue.xy, outputValue.xy);\n    ";return"\n    vec4 "+a+"() {\n      "+l+" coords = getOutputCoords();\n      "+n+"\n      vec4 outputValue = get"+i+"("+r+");\n      "+p+"\n    }\n  "}(t,e):function(t,e){var n=t.name,r=n.charAt(0).toUpperCase()+n.slice(1),o="get"+r+"AtOutCoords",i=e.texShape,a=t.shapeInfo.texShape,s=t.shapeInfo.logicalShape.length,u=e.logicalShape.length;if(!t.shapeInfo.isUniform&&s===u&&null==t.shapeInfo.flatOffset&&F(a,i))return"\n      float "+o+"() {\n        return sampleTexture("+n+", resultUV);\n      }\n    ";var c,l,h=xi(u),f=bo(t.shapeInfo.logicalShape,e.logicalShape),p=u-s,d=["x","y","z","w","u","v"];return c=0===s?"":u<2&&f.length>=1?"coords = 0;":f.map((function(t){return"coords."+d[t+p]+" = 0;"})).join("\n"),l=u<2&&s>0?"coords":t.shapeInfo.logicalShape.map((function(t,e){return"coords."+d[e+p]})).join(", "),"\n    float "+o+"() {\n      "+h+" coords = getOutputCoords();\n      "+c+"\n      return get"+r+"("+l+");\n    }\n  "}(t,e)),r}(t,e,r)})).join("\n"),c=e.texShape,l=ai(),h=function(t){return"\n    float sampleTexture(sampler2D textureSampler, vec2 uv) {\n      return "+t.texture2D+"(textureSampler, uv).r;\n    }\n  "}(l),f=function(t){return t.version+"\n    precision highp float;\n    precision highp int;\n    precision highp sampler2D;\n    "+t.varyingFs+" vec2 resultUV;\n    "+t.defineOutput+"\n    const vec2 halfCR = vec2(0.5, 0.5);\n\n    struct ivec5\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n    };\n\n    struct ivec6\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n      int v;\n    };\n\n    uniform float NAN;\n    "+t.defineSpecialNaN+"\n    "+t.defineSpecialInf+"\n    "+t.defineRound+"\n\n    int imod(int x, int y) {\n      return x - y * (x / y);\n    }\n\n    int idiv(int a, int b, float sign) {\n      int res = a / b;\n      int mod = imod(a, b);\n      if (sign < 0. && mod != 0) {\n        res -= 1;\n      }\n      return res;\n    }\n\n    //Based on the work of Dave Hoskins\n    //https://www.shadertoy.com/view/4djSRW\n    #define HASHSCALE1 443.8975\n    float random(float seed){\n      vec2 p = resultUV * seed;\n      vec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);\n      p3 += dot(p3, p3.yzx + 19.19);\n      return fract((p3.x + p3.y) * p3.z);\n    }\n\n    "+pi+"\n    "+di+"\n    "+vi+"\n  "}(l);return e.isPacked?(i=function(t,e){switch(t.length){case 0:return"\n    int getOutputCoords() {\n      return 0;\n    }\n  ";case 1:return function(t,e){var n=[Math.ceil(e[0]/2),Math.ceil(e[1]/2)];return 1===n[0]?"\n      int getOutputCoords() {\n        return 2 * int(resultUV.x * "+n[1]+".0);\n      }\n    ":1===n[1]?"\n      int getOutputCoords() {\n        return 2 * int(resultUV.y * "+n[0]+".0);\n      }\n    ":"\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2("+n[0]+", "+n[1]+"));\n      return 2 * (resTexRC.x * "+n[1]+" + resTexRC.y);\n    }\n  "}(0,e);case 2:return function(t,e){var n=[Math.ceil(e[0]/2),Math.ceil(e[1]/2)];if(F(t,e))return"\n      ivec2 getOutputCoords() {\n        return 2 * ivec2(resultUV.yx * vec2("+n[0]+", "+n[1]+"));\n      }\n    ";var r=Math.ceil(t[1]/2);return"\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2("+n[0]+", "+n[1]+"));\n\n      int index = resTexRC.x * "+n[1]+" + resTexRC.y;\n      int r = 2 * (index / "+r+");\n      int c = imod(index, "+r+") * 2;\n\n      return ivec2(r, c);\n    }\n  "}(t,e);case 3:return n=t,r=e,o=[Math.ceil(r[0]/2),Math.ceil(r[1]/2)],a=(i=Math.ceil(n[2]/2))*Math.ceil(n[1]/2),"\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2("+o[0]+", "+o[1]+"));\n      int index = resTexRC.x * "+o[1]+" + resTexRC.y;\n\n      int b = index / "+a+";\n      index -= b * "+a+";\n\n      int r = 2 * (index / "+i+");\n      int c = imod(index, "+i+") * 2;\n\n      return ivec3(b, r, c);\n    }\n  ";default:return function(t,e){for(var n=[Math.ceil(e[0]/2),Math.ceil(e[1]/2)],r=Math.ceil(t[t.length-1]/2),o=r*Math.ceil(t[t.length-2]/2),i=o,a="",s="b, r, c",u=2;u<t.length-1;u++)a="\n      int b"+u+" = index / "+(i*=t[t.length-u-1])+";\n      index -= b"+u+" * "+i+";\n    "+a,s="b"+u+", "+s;return"\n    ivec"+t.length+" getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2("+n[0]+", "+n[1]+"));\n      int index = resTexRC.x * "+n[1]+" + resTexRC.y;\n\n      "+a+"\n\n      int b = index / "+o+";\n      index -= b * "+o+";\n\n      int r = 2 * (index / "+r+");\n      int c = imod(index, "+r+") * 2;\n\n      return ivec"+t.length+"("+s+");\n    }\n  "}(t,e)}var n,r,o,i,a}(e.logicalShape,c),a=function(t){return"\n    void setOutput(vec4 val) {\n      "+t.output+" = val;\n    }\n  "}(l)):(i=function(t,e){switch(t.length){case 0:return"\n    int getOutputCoords() {\n      return 0;\n    }\n  ";case 1:return function(t,e){return 1===e[0]?"\n      int getOutputCoords() {\n        return int(resultUV.x * "+e[1]+".0);\n      }\n    ":1===e[1]?"\n      int getOutputCoords() {\n        return int(resultUV.y * "+e[0]+".0);\n      }\n    ":"\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2("+e[0]+", "+e[1]+"));\n      return resTexRC.x * "+e[1]+" + resTexRC.y;\n    }\n  "}(0,e);case 2:return function(t,e){return F(t,e)?"\n      ivec2 getOutputCoords() {\n        return ivec2(resultUV.yx * vec2("+e[0]+", "+e[1]+"));\n      }\n    ":1===t[1]?"\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2("+e[0]+", "+e[1]+"));\n        int index = resTexRC.x * "+e[1]+" + resTexRC.y;\n        return ivec2(index, 0);\n      }\n    ":1===t[0]?"\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2("+e[0]+", "+e[1]+"));\n        int index = resTexRC.x * "+e[1]+" + resTexRC.y;\n        return ivec2(0, index);\n      }\n    ":"\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2("+e[0]+", "+e[1]+"));\n      int index = resTexRC.x * "+e[1]+" + resTexRC.y;\n      int r = index / "+t[1]+";\n      int c = index - r * "+t[1]+";\n      return ivec2(r, c);\n    }\n  "}(t,e);case 3:return n=e,r=si(["r","c","d"],t),"\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2("+n[0]+", "+n[1]+"));\n      int index = resTexRC.x * "+n[1]+" + resTexRC.y;\n      "+r+"\n      return ivec3(r, c, d);\n    }\n  ";case 4:return function(t,e){var n=si(["r","c","d","d2"],t);return"\n    ivec4 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2("+e[0]+", "+e[1]+"));\n      int index = resTexRC.x * "+e[1]+" + resTexRC.y;\n      "+n+"\n      return ivec4(r, c, d, d2);\n    }\n  "}(t,e);case 5:return function(t,e){var n=si(["r","c","d","d2","d3"],t);return"\n    ivec5 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx * vec2("+e[0]+",\n                             "+e[1]+"));\n\n      int index = resTexRC.x * "+e[1]+" + resTexRC.y;\n\n      "+n+"\n\n      ivec5 outShape = ivec5(r, c, d, d2, d3);\n      return outShape;\n    }\n  "}(t,e);case 6:return function(t,e){var n=si(["r","c","d","d2","d3","d4"],t);return"\n    ivec6 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2("+e[0]+", "+e[1]+"));\n      int index = resTexRC.x * "+e[1]+" + resTexRC.y;\n\n      "+n+"\n\n      ivec6 result = ivec6(r, c, d, d2, d3, d4);\n      return result;\n    }\n  "}(t,e);default:throw new Error(t.length+"-D output sampling is not yet supported")}var n,r}(e.logicalShape,c),a=function(t){return"\n    void setOutput(float val) {\n      "+t.output+" = vec4(val, 0, 0, 0);\n    }\n  "}(l)),r&&(f+=mi),[f,h,a,s,i,u,n].join("\n")}function hi(t){var e=t.shapeInfo.logicalShape;switch(e.length){case 0:return function(t){var e=t.name,n="get"+e.charAt(0).toUpperCase()+e.slice(1);if(t.shapeInfo.isUniform)return"float "+n+"() {return "+e+";}";var r=t.shapeInfo.texShape,o=r[0],i=r[1];if(1===o&&1===i)return"\n      float "+n+"() {\n        return sampleTexture("+e+", halfCR);\n      }\n    ";var a=t.shapeInfo.texShape;return"\n    float "+n+"() {\n      vec2 uv = uvFromFlat("+a[0]+", "+a[1]+", "+gi(e)+");\n      return sampleTexture("+e+", uv);\n    }\n  "}(t);case 1:return function(t){var e=t.name,n="get"+e.charAt(0).toUpperCase()+e.slice(1);if(t.shapeInfo.isUniform)return"\n      float "+n+"(int index) {\n        "+yi(t)+"\n      }\n    ";var r=t.shapeInfo.texShape,o=r[0],i=r[1];if(1===i&&1===o)return"\n      float "+n+"(int index) {\n        return sampleTexture("+e+", halfCR);\n      }\n    ";var a=gi(e);return 1===i?"\n      float "+n+"(int index) {\n        vec2 uv = vec2(0.5, (float(index + "+a+") + 0.5) / "+o+".0);\n        return sampleTexture("+e+", uv);\n      }\n    ":1===o?"\n      float "+n+"(int index) {\n        vec2 uv = vec2((float(index + "+a+") + 0.5) / "+i+".0, 0.5);\n        return sampleTexture("+e+", uv);\n      }\n    ":"\n    float "+n+"(int index) {\n      vec2 uv = uvFromFlat("+o+", "+i+", index + "+a+");\n      return sampleTexture("+e+", uv);\n    }\n  "}(t);case 2:return function(t){var e=t.shapeInfo.logicalShape,n=t.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1),o=t.shapeInfo.texShape;if(null!=o&&F(e,o)){var i=o[0];return"\n    float "+r+"(int row, int col) {\n      vec2 uv = (vec2(col, row) + halfCR) / vec2("+o[1]+".0, "+i+".0);\n      return sampleTexture("+n+", uv);\n    }\n  "}var a=z(e),s=a.newShape,u=a.keptDims,c=s;if(c.length<e.length)return"\n      "+hi(bi(t,c))+"\n      float "+r+"(int row, int col) {\n        return "+r+"("+wi(["row","col"],u)+");\n      }\n    ";if(t.shapeInfo.isUniform)return"\n      float "+r+"(int row, int col) {\n        int index = round(dot(vec2(row, col), vec2("+e[1]+", 1)));\n        "+yi(t)+"\n      }\n    ";var l=o[0],h=o[1],f=gi(n);return 1===h?"\n    float "+r+"(int row, int col) {\n      float index = dot(vec3(row, col, "+f+"), vec3("+e[1]+", 1, 1));\n      vec2 uv = vec2(0.5, (index + 0.5) / "+l+".0);\n      return sampleTexture("+n+", uv);\n    }\n  ":1===l?"\n    float "+r+"(int row, int col) {\n      float index = dot(vec3(row, col, "+f+"), vec3("+e[1]+", 1, 1));\n      vec2 uv = vec2((index + 0.5) / "+h+".0, 0.5);\n      return sampleTexture("+n+", uv);\n    }\n  ":"\n  float "+r+"(int row, int col) {\n    // Explicitly use integer operations as dot() only works on floats.\n    int index = row * "+e[1]+" + col + "+f+";\n    vec2 uv = uvFromFlat("+l+", "+h+", index);\n    return sampleTexture("+n+", uv);\n  }\n"}(t);case 3:return function(t){var e=t.shapeInfo.logicalShape,n=t.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1),o=e[1]*e[2],i=e[2],a=z(e),s=a.newShape,u=a.keptDims,c=s;if(c.length<e.length)return"\n        "+hi(bi(t,c))+"\n        float "+r+"(int row, int col, int depth) {\n          return "+r+"("+wi(["row","col","depth"],u)+");\n        }\n      ";if(t.shapeInfo.isUniform)return"\n      float "+r+"(int row, int col, int depth) {\n        int index = round(dot(vec3(row, col, depth),\n                          vec3("+o+", "+i+", 1)));\n        "+yi(t)+"\n      }\n    ";var l=t.shapeInfo.texShape,h=l[0],f=l[1],p=t.shapeInfo.flatOffset;return f===o&&null==p?"\n        float "+r+"(int row, int col, int depth) {\n          float texR = float(row);\n          float texC = dot(vec2(col, depth), vec2("+i+", 1));\n          vec2 uv = (vec2(texC, texR) + halfCR) /\n                     vec2("+f+".0, "+h+".0);\n          return sampleTexture("+n+", uv);\n        }\n      ":f===i&&null==p?"\n    float "+r+"(int row, int col, int depth) {\n      float texR = dot(vec2(row, col), vec2("+e[1]+", 1));\n      float texC = float(depth);\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2("+f+".0, "+h+".0);\n      return sampleTexture("+n+", uv);\n    }\n  ":"\n      float "+r+"(int row, int col, int depth) {\n        // Explicitly use integer operations as dot() only works on floats.\n        int index = row * "+o+" + col * "+i+" + depth + "+gi(n)+";\n        vec2 uv = uvFromFlat("+h+", "+f+", index);\n        return sampleTexture("+n+", uv);\n      }\n  "}(t);case 4:return function(t){var e=t.shapeInfo.logicalShape,n=t.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1),o=e[3],i=e[2]*o,a=e[1]*i,s=z(e),u=s.newShape,c=s.keptDims;if(u.length<e.length)return"\n      "+hi(bi(t,u))+"\n      float "+r+"(int row, int col, int depth, int depth2) {\n        return "+r+"("+wi(["row","col","depth","depth2"],c)+");\n      }\n    ";if(t.shapeInfo.isUniform)return"\n      float "+r+"(int row, int col, int depth, int depth2) {\n        int index = round(dot(vec4(row, col, depth, depth2),\n                          vec4("+a+", "+i+", "+o+", 1)));\n        "+yi(t)+"\n      }\n    ";var l=t.shapeInfo.flatOffset,h=t.shapeInfo.texShape,f=h[0],p=h[1];return p===a&&null==l?"\n      float "+r+"(int row, int col, int depth, int depth2) {\n        float texR = float(row);\n        float texC =\n            dot(vec3(col, depth, depth2),\n                vec3("+i+", "+o+", 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2("+p+".0, "+f+".0);\n        return sampleTexture("+n+", uv);\n      }\n    ":p===o&&null==l?"\n      float "+r+"(int row, int col, int depth, int depth2) {\n        float texR = dot(vec3(row, col, depth),\n                         vec3("+e[1]*e[2]+", "+e[2]+", 1));\n        float texC = float(depth2);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2("+p+".0, "+f+".0);\n        return sampleTexture("+n+", uv);\n      }\n    ":"\n    float "+r+"(int row, int col, int depth, int depth2) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * "+a+" + col * "+i+" +\n          depth * "+o+" + depth2;\n      vec2 uv = uvFromFlat("+f+", "+p+", index + "+gi(n)+");\n      return sampleTexture("+n+", uv);\n    }\n  "}(t);case 5:return function(t){var e=t.shapeInfo.logicalShape,n=t.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1),o=e[4],i=e[3]*o,a=e[2]*i,s=e[1]*a,u=z(e),c=u.newShape,l=u.keptDims;if(c.length<e.length)return"\n      "+hi(bi(t,c))+"\n      float "+r+"(int row, int col, int depth, int depth2, int depth3) {\n        return "+r+"("+wi(["row","col","depth","depth2","depth3"],l)+");\n      }\n    ";if(t.shapeInfo.isUniform)return"\n      float "+r+"(int row, int col, int depth, int depth2, int depth3) {\n        float index = dot(\n          vec4(row, col, depth, depth2),\n          vec4("+s+", "+a+", "+i+", "+o+")) +\n          depth3;\n        "+yi(t)+"\n      }\n    ";var h=t.shapeInfo.flatOffset,f=t.shapeInfo.texShape,p=f[0],d=f[1];return d===s&&null==h?"\n      float "+r+"(int row, int col, int depth, int depth2, int depth3) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n                         vec4("+a+", "+i+", "+o+", 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2("+d+".0, "+p+".0);\n        return sampleTexture("+n+", uv);\n      }\n    ":d===o&&null==h?"\n      float "+r+"(int row, int col, int depth, int depth2, int depth3) {\n        float texR = dot(\n          vec4(row, col, depth, depth2),\n          vec4("+e[1]*e[2]*e[3]+",\n               "+e[2]*e[3]+", "+e[3]+", 1));\n        int texC = depth3;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2("+d+".0, "+p+".0);\n        return sampleTexture("+n+", uv);\n      }\n    ":"\n    float "+r+"(int row, int col, int depth, int depth2, int depth3) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * "+s+" + col * "+a+" + depth * "+i+" +\n          depth2 * "+o+" + depth3 + "+gi(n)+";\n      vec2 uv = uvFromFlat("+p+", "+d+", index);\n      return sampleTexture("+n+", uv);\n    }\n  "}(t);case 6:return function(t){var e=t.shapeInfo.logicalShape,n=t.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1),o=z(e),i=o.newShape,a=o.keptDims;if(i.length<e.length)return"\n      "+hi(bi(t,i))+"\n      float "+r+"(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        return "+r+"("+wi(["row","col","depth","depth2","depth3","depth4"],a)+");\n      }\n    ";var s=e[5],u=e[4]*s,c=e[3]*u,l=e[2]*c,h=e[1]*l;if(t.shapeInfo.isUniform)return"\n      float "+r+"(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n        int index = round(dot(\n          vec4(row, col, depth, depth2),\n          vec4("+h+", "+l+", "+c+", "+u+")) +\n          dot(\n            vec2(depth3, depth4),\n            vec2("+s+", 1)));\n        "+yi(t)+"\n      }\n    ";var f=t.shapeInfo.flatOffset,p=t.shapeInfo.texShape,d=p[0],v=p[1];return v===h&&null==f?"\n      float "+r+"(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n          vec4("+l+", "+c+", "+u+", "+s+")) +\n               float(depth4);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2("+v+".0, "+d+".0);\n        return sampleTexture("+n+", uv);\n      }\n    ":v===s&&null==f?"\n      float "+r+"(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        float texR = dot(vec4(row, col, depth, depth2),\n          vec4("+e[1]*e[2]*e[3]*e[4]+",\n               "+e[2]*e[3]*e[4]+",\n               "+e[3]*e[4]+",\n               "+e[4]+")) + float(depth3);\n        int texC = depth4;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2("+v+".0, "+d+".0);\n        return sampleTexture("+n+", uv);\n      }\n    ":"\n    float "+r+"(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * "+h+" + col * "+l+" + depth * "+c+" +\n          depth2 * "+u+" + depth3 * "+s+" + depth4 + "+gi(n)+";\n      vec2 uv = uvFromFlat("+d+", "+v+", index);\n      return sampleTexture("+n+", uv);\n    }\n  "}(t);default:throw new Error(e.length+"-D input sampling is not yet supported")}}function fi(t){var e;switch(t.shapeInfo.logicalShape.length){case 0:return"\n    vec4 get"+(e=t.name).charAt(0).toUpperCase()+e.slice(1)+"() {\n      return "+ai().texture2D+"("+e+", halfCR);\n    }\n  ";case 1:return function(t){var e=t.name,n="get"+e.charAt(0).toUpperCase()+e.slice(1),r=t.shapeInfo.texShape,o=[Math.ceil(r[0]/2),Math.ceil(r[1]/2)],i=ai();return"\n    vec4 "+n+"(int index) {\n      vec2 uv = packedUVfrom1D(\n        "+o[0]+", "+o[1]+", index);\n      return "+i.texture2D+"("+e+", uv);\n    }\n  "}(t);case 2:return function(t){var e=t.shapeInfo.logicalShape,n=t.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1),o=t.shapeInfo.texShape,i=o[0],a=o[1],s=ai();if(null!=o&&F(e,o))return"\n      vec4 "+r+"(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2("+a+".0, "+i+".0);\n\n        return "+s.texture2D+"("+n+", uv);\n      }\n    ";var u=[Math.ceil(o[0]/2),Math.ceil(o[1]/2)];return"\n    vec4 "+r+"(int row, int col) {\n      vec2 uv = packedUVfrom2D("+Math.ceil(e[1]/2)+", "+u[0]+", "+u[1]+", row, col);\n      return "+s.texture2D+"("+n+", uv);\n    }\n  "}(t);case 3:return function(t){var e=t.shapeInfo.logicalShape,n=t.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1),o=t.shapeInfo.texShape,i=[Math.ceil(o[0]/2),Math.ceil(o[1]/2)];if(1===e[0])return"\n        "+fi(bi(t,e.slice(1)))+"\n        vec4 "+r+"(int b, int row, int col) {\n          return "+r+"("+wi(["b","row","col"],[1,2])+");\n        }\n      ";var a=i[0],s=i[1],u=Math.ceil(e[2]/2);return"\n    vec4 "+r+"(int b, int row, int col) {\n      vec2 uv = packedUVfrom3D(\n        "+a+", "+s+", "+u*Math.ceil(e[1]/2)+", "+u+", b, row, col);\n      return "+ai().texture2D+"("+n+", uv);\n    }\n  "}(t);default:return function(t){for(var e=t.shapeInfo.logicalShape,n=e.length,r=t.name,o="get"+r.charAt(0).toUpperCase()+r.slice(1),i=t.shapeInfo.texShape,a=[Math.ceil(i[0]/2),Math.ceil(i[1]/2)],s=a[0],u=a[1],c=Math.ceil(e[n-1]/2),l=c*Math.ceil(e[n-2]/2),h="int b, int row, int col",f="b * "+l+" + (row / 2) * "+c+" + (col / 2)",p=2;p<n-1;p++)h="int b"+p+", "+h,f="b"+p+" * "+(l*=e[n-p-1])+" + "+f;return"\n    vec4 "+o+"("+h+") {\n      int index = "+f+";\n      int texR = index / "+u+";\n      int texC = index - texR * "+u+";\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2("+u+", "+s+");\n      return "+ai().texture2D+"("+r+", uv);\n    }\n  "}(t)}}var pi="\nvec2 uvFromFlat(int texNumR, int texNumC, int index) {\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\nvec2 packedUVfrom1D(int texNumR, int texNumC, int index) {\n  int texelIndex = index / 2;\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",di="\nvec2 packedUVfrom2D(int texelsInLogicalRow, int texNumR,\n  int texNumC, int row, int col) {\n  int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",vi="\nvec2 packedUVfrom3D(int texNumR, int texNumC,\n    int texelsInBatch, int texelsInLogicalRow, int b,\n    int row, int col) {\n  int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",mi="\n  float getChannel(vec4 frag, vec2 innerDims) {\n    vec2 modCoord = mod(innerDims, 2.);\n    return modCoord.x == 0. ?\n      (modCoord.y == 0. ? frag.r : frag.g) :\n      (modCoord.y == 0. ? frag.b : frag.a);\n  }\n  float getChannel(vec4 frag, int dim) {\n    float modCoord = mod(float(dim), 2.);\n    return modCoord == 0. ? frag.r : frag.g;\n  }\n";function gi(t){return"offset"+t}function yi(t){var e=t.name,n=T(t.shapeInfo.logicalShape);return n<2?"return "+e+";":"\n    for (int i = 0; i < "+n+"; i++) {\n      if (i == index) {\n        return "+e+"[i];\n      }\n    }\n  "}function xi(t){if(t<=1)return"int";if(2===t)return"ivec2";if(3===t)return"ivec3";if(4===t)return"ivec4";if(5===t)return"ivec5";if(6===t)return"ivec6";throw Error("GPU for rank "+t+" is not yet supported")}function bi(t,e){var n=JSON.parse(JSON.stringify(t));return n.shapeInfo.logicalShape=e,n}function wi(t,e){return e.map((function(e){return t[e]})).join(", ")}var Ci=function(t,e,n,r){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,S(t.length>2,(function(){return"Packed arg"+(n.charAt(0).toUpperCase()+n.slice(1))+" supports only inputs with rank above 2."}));var o=t[t.length-1],i=Math.ceil(o/e);this.outputShape=t.slice(0,-1),i>1&&this.outputShape.push(i),r||this.variableNames.push("bestIndicesA");var a,s,u=this.outputShape,c=u.length,l=xi(c),h=ii("coords",c);if(1===i){var f=xi(s=c+1);a="\n        "+f+" sourceLocR = "+f+"("+h.join()+", 0);\n        ++"+h[c-1]+";\n        "+f+" sourceLocG = "+f+"("+h.join()+", 0);\n        ++"+h[c-2]+";\n        "+f+" sourceLocA = "+f+"("+h.join()+", 0);\n        --"+h[c-1]+";\n        "+f+" sourceLocB = "+f+"("+h.join()+", 0);\n        --"+h[c-2]+";"}else s=c,a="\n        "+l+" sourceLocR = coords;\n        ++"+h[c-1]+";\n        "+l+" sourceLocG = coords;\n        ++"+h[c-2]+";\n        "+l+" sourceLocA = coords;\n        --"+h[c-1]+";\n        "+l+" sourceLocB = coords;\n        --"+h[c-2]+";";var p=["x","y","z","w","u","v"].slice(0,s),d="."+p[s-1],v=p.map((function(t){return"int "+t})),m=ii("sourceLocR",s-1).concat("inIdx.r"),g=ii("sourceLocG",s-1).concat("inIdx.g"),y=ii("sourceLocB",s-1).concat("inIdx.b"),x=ii("sourceLocA",s-1).concat("inIdx.a"),b="max"===n?"greaterThan":"lessThan",w=r?"":"\n          inIdx = round(vec4(getBestIndicesAChannel("+m.join()+"),\n                             getBestIndicesAChannel("+g.join()+"),\n                             getBestIndicesAChannel("+y.join()+"),\n                             getBestIndicesAChannel("+x.join()+")));",C="vec4(\n            getAChannel("+m.join()+"),\n            hasNextCol ? getAChannel("+g.join()+") : 0.,\n            hasNextRow ? getAChannel("+y.join()+") : 0.,\n            hasNextRow && hasNextCol ? getAChannel("+x.join()+") : 0.)",E=r?"":"\n      float getBestIndicesAChannel("+v.join()+") {\n        return getChannel(getBestIndicesA("+p.join()+"),\n                                          vec2("+p.slice(-2).join()+"));\n      }";this.userCode="\n      float getAChannel("+v.join()+") {\n        return getChannel(getA("+p.join()+"),\n                               vec2("+p.slice(-2).join()+"));\n      }\n      "+E+"\n      void main() {\n        "+l+" coords = getOutputCoords();\n        bool hasNextCol = "+h[c-1]+" < "+(u[c-1]-1)+";\n        bool hasNextRow = "+h[c-2]+" < "+(u[c-2]-1)+";\n        "+a+"\n        ivec4 srcIdx = ivec4(sourceLocR"+d+", sourceLocG"+d+",\n          sourceLocB"+d+", sourceLocA"+d+") * "+e+";\n        ivec4 inIdx = srcIdx;\n        vec4 bestIndex = vec4(inIdx);\n        vec4 bestValue = "+C+";\n\n        for (int i = 0; i < "+e+"; i++) {\n          inIdx = srcIdx;\n          "+w+"\n          vec4 candidate = "+C+";\n          bvec4 nan = isnan(candidate);\n          bvec4 replace = bvec4(\n            vec4("+b+"(candidate, bestValue)) * (vec4(1.0) - vec4(nan)));\n\n          bestValue = vec4(replace.x  ? candidate.x : bestValue.x,\n                           replace.y  ? candidate.y : bestValue.y,\n                           replace.z  ? candidate.z : bestValue.z,\n                           replace.w  ? candidate.w : bestValue.w);\n          bestIndex = mix(bestIndex, vec4(inIdx), vec4(replace));\n          srcIdx++;\n        }\n        setOutput(bestIndex);\n      }\n    "},Ei=function(t){this.variableNames=["dy"],this.outputShape=t.inShape;var e=t.filterHeight,n=t.filterWidth,r=t.strideHeight,o=t.strideWidth,i=t.dilationHeight,a=t.dilationWidth,s=t.effectiveFilterHeight,u=t.effectiveFilterWidth,c=s-1-t.padInfo.top,l=u-1-t.padInfo.left,h=1/(e*n);this.userCode="\n      const ivec2 pads = ivec2("+c+", "+l+");\n      const float avgMultiplier = float("+h+");\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < "+s+";\n            wR += "+i+") {\n          float dyR = float(dyRCorner + wR) / "+r+".0;\n\n          if (dyR < 0.0 || dyR >= "+t.outHeight+".0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < "+u+";\n            wC+= "+a+") {\n            float dyC = float(dyCCorner + wC) / "+o+".0;\n\n            if (dyC < 0.0 || dyC >= "+t.outWidth+".0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n\n            dotProd += dyValue * avgMultiplier;\n          }\n        }\n        setOutput(dotProd);\n      }\n    "},_i=function(t){this.variableNames=["dy"],this.outputShape=t.inShape;var e=t.filterDepth,n=t.filterHeight,r=t.filterWidth,o=t.strideDepth,i=t.strideHeight,a=t.strideWidth,s=t.dilationDepth,u=t.dilationHeight,c=t.dilationWidth,l=t.effectiveFilterDepth,h=t.effectiveFilterHeight,f=t.effectiveFilterWidth,p=l-1-t.padInfo.front,d=h-1-t.padInfo.top,v=f-1-t.padInfo.left,m=1/(e*n*r);this.userCode="\n      const ivec3 pads = ivec3("+p+", "+d+", "+v+");\n      const float avgMultiplier = float("+m+");\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, d) with pos mask(:, :, :, ch) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < "+l+";\n            wD += "+s+") {\n          float dyD = float(dyDCorner + wD) / "+o+".0;\n\n          if (dyD < 0.0 || dyD >= "+t.outDepth+".0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < "+h+";\n              wR += "+u+") {\n            float dyR = float(dyRCorner + wR) / "+i+".0;\n\n            if (dyR < 0.0 || dyR >= "+t.outHeight+".0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < "+f+";\n                wC += "+c+") {\n              float dyC = float(dyCCorner + wC) / "+a+".0;\n\n              if (dyC < 0.0 || dyC >= "+t.outWidth+".0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n\n              dotProd += dyValue * avgMultiplier;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    "},Ii=function(t,e,n,r,o,i){this.outputShape=[],this.variableNames=["x","mean","variance"],Co(t,e),Co(t,n);var a="0.0";null!=r&&(Co(t,r),this.variableNames.push("offset"),a="getOffsetAtOutCoords()");var s="1.0";null!=o&&(Co(t,o),this.variableNames.push("scale"),s="getScaleAtOutCoords()"),this.outputShape=t,this.userCode="\n      void main() {\n        float x = getXAtOutCoords();\n        float mean = getMeanAtOutCoords();\n        float variance = getVarianceAtOutCoords();\n        float offset = "+a+";\n        float scale = "+s+";\n        float inv = scale * inversesqrt(variance + float("+i+"));\n        setOutput(dot(vec3(x, -mean, offset), vec3(inv, inv, 1)));\n      }\n    "},Ri=function(t,e,n,r,o,i){this.packedInputs=!0,this.packedOutput=!0,this.variableNames=["x","mean","variance"],Co(t,e),Co(t,n);var a="vec4(0.0)";null!=r&&(Co(t,r),this.variableNames.push("offset"),a="getOffsetAtOutCoords()");var s="vec4(1.0)";null!=o&&(Co(t,o),this.variableNames.push("scale"),s="getScaleAtOutCoords()"),this.outputShape=t,this.userCode="\n      void main() {\n        vec4 offset = "+a+";\n        vec4 scale = "+s+";\n\n        vec4 x = getXAtOutCoords();\n        vec4 mean = getMeanAtOutCoords();\n        vec4 variance = getVarianceAtOutCoords();\n\n        vec4 inv = scale * inversesqrt(variance + vec4("+i+"));\n\n        setOutput((x - mean) * inv + offset);\n      }\n    "},Si=function(t,e,n){this.variableNames=["AReal","AImag","BReal","BImag"],this.outputShape=Co(e,n),this.userCode="\n      float binaryOpComplex(\n          float areal, float aimag, float breal, float bimag) {\n        "+t+"\n      }\n\n      void main() {\n        float areal = getARealAtOutCoords();\n        float aimag = getAImagAtOutCoords();\n        float breal = getBRealAtOutCoords();\n        float bimag = getBImagAtOutCoords();\n        setOutput(binaryOpComplex(areal, aimag, breal, bimag));\n      }\n    "},ki="return a + b;",Di="return a - b;",Ai="return a * b;",Ti="return (a < 0.) ? b * a : a;",Fi=function(t,e,n){this.variableNames=["A","B"],this.outputShape=Co(e,n),this.userCode="\n      float binaryOperation(float a, float b) {\n        "+t+"\n      }\n\n      void main() {\n        float a = getAAtOutCoords();\n        float b = getBAtOutCoords();\n        setOutput(binaryOperation(a, b));\n      }\n    "},Ni="\n  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));\n  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);\n",Mi=function(t,e,n,r){void 0===r&&(r=!1),this.variableNames=["A","B"],this.supportsBroadcasting=!0,this.packedInputs=!0,this.packedOutput=!0,this.outputShape=Co(e,n);var o=this.outputShape.length,i="";if(r)if(0===o||1===T(this.outputShape))i="\n          result.y = 0.;\n          result.z = 0.;\n          result.w = 0.;\n        ";else if(i="\n          "+xi(o)+" coords = getOutputCoords();\n        ",1===o)i+="\n            result.y = (coords + 1) >= "+this.outputShape[0]+" ? 0. : result.y;\n            result.z = 0.;\n            result.w = 0.;\n          ";else{var a=ii("coords",o);i+="\n            bool nextRowOutOfBounds =\n              ("+a[o-2]+" + 1) >= "+this.outputShape[o-2]+";\n            bool nextColOutOfBounds =\n              ("+a[o-1]+" + 1) >= "+this.outputShape[o-1]+";\n            result.y = nextColOutOfBounds ? 0. : result.y;\n            result.z = nextRowOutOfBounds ? 0. : result.z;\n            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;\n          "}this.userCode="\n      vec4 binaryOperation(vec4 a, vec4 b) {\n        "+t+"\n      }\n\n      void main() {\n        vec4 a = getAAtOutCoords();\n        vec4 b = getBAtOutCoords();\n\n        vec4 result = binaryOperation(a, b);\n        "+i+"\n\n        setOutput(result);\n      }\n    "},Oi=function(){function t(t){this.variableNames=["A"],this.outputShape=t,this.userCode="\n      uniform float minVal;\n      uniform float maxVal;\n\n      void main() {\n        float value = getAAtOutCoords();\n        if (isnan(value)) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, minVal, maxVal));\n      }\n    "}return t.prototype.getCustomSetupFunc=function(t,e){var n=this;return function(r,o){null==n.minLoc&&(n.minLoc=r.getUniformLocationNoThrow(o,"minVal"),n.maxLoc=r.getUniformLocationNoThrow(o,"maxVal")),r.gl.uniform1f(n.minLoc,t),r.gl.uniform1f(n.maxLoc,e)}},t}(),Pi=function(){function t(t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t,this.userCode="\n      uniform float minVal;\n      uniform float maxVal;\n\n      void main() {\n        vec4 value = getAAtOutCoords();\n\n        if (any(isnan(value))) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, vec4(minVal), vec4(maxVal)));\n      }\n    "}return t.prototype.getCustomSetupFunc=function(t,e){var n=this;return function(r,o){null==n.minLoc&&(n.minLoc=r.getUniformLocationNoThrow(o,"minVal"),n.maxLoc=r.getUniformLocationNoThrow(o,"maxVal")),r.gl.uniform1f(n.minLoc,t),r.gl.uniform1f(n.maxLoc,e)}},t}(),Bi=function(t){this.variableNames=["real","imag"],this.outputShape=t,this.userCode="\n      void main() {\n        float re = abs(getRealAtOutCoords());\n        float im = abs(getImagAtOutCoords());\n        float mx = max(re, im);\n\n        // sadly the length function in glsl is not underflow-safe\n        // (at least not on Intel GPUs). So the safe solution is\n        // to ensure underflow-safety in all cases.\n        setOutput(\n          mx == 0.0 ? 0.0 : mx * length(vec2(1, min(re, im)/mx))\n        );\n      }\n    "},Li=function(t){this.outputShape=[],this.outputShape=Rn(t,1),this.variableNames=t.map((function(t,e){return"T"+e}));var e=new Array(t.length-1);e[0]=t[0][1];for(var n=1;n<e.length;n++)e[n]=e[n-1]+t[n][1];var r=["if (yC < "+e[0]+") setOutput(getT0(yR, yC));"];for(n=1;n<e.length;n++){var o=e[n-1];r.push("else if (yC < "+e[n]+") setOutput(getT"+n+"(yR, yC-"+o+"));")}var i=e.length,a=e[e.length-1];r.push("else setOutput(getT"+i+"(yR, yC-"+a+"));"),this.userCode="\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int yR = coords.x;\n        int yC = coords.y;\n\n        "+r.join("\n        ")+"\n      }\n    "},Wi=function(t,e){this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[],this.outputShape=Rn(t,e);var n=this.outputShape,r=n.length,o=xi(r),i=ii("coords",r),a=["x","y","z","w","u","v"].slice(0,r);this.variableNames=t.map((function(t,e){return"T"+e}));var s=new Array(t.length-1);s[0]=t[0][e];for(var u=1;u<s.length;u++)s[u]=s[u-1]+t[u][e];var c=a[e],l=a.slice(-2),h=a.join(),f="if ("+c+" < "+s[0]+") {\n        return getChannel(\n            getT0("+h+"), vec2("+l.join()+"));\n        }";for(u=1;u<s.length;u++){var p=s[u-1];f+="\n        if ("+c+" < "+s[u]+"  && "+c+" >= "+s[u-1]+") {\n          return getChannel(\n            getT"+u+"("+zi(a,c,p)+"),\n            vec2("+zi(l,c,p)+"));\n        }"}var d=s.length,v=s[s.length-1];f+="\n        return getChannel(\n          getT"+d+"("+zi(a,c,v)+"),\n          vec2("+zi(l,c,v)+"));",this.userCode="\n      float getValue("+a.map((function(t){return"int "+t}))+") {\n        "+f+"\n      }\n\n      void main() {\n        "+o+" coords = getOutputCoords();\n        vec4 result = vec4(getValue("+i+"), 0., 0., 0.);\n\n        "+i[r-1]+" = "+i[r-1]+" + 1;\n        if ("+i[r-1]+" < "+n[r-1]+") {\n          result.g = getValue("+i+");\n        }\n\n        "+i[r-2]+" = "+i[r-2]+" + 1;\n        if ("+i[r-2]+" < "+n[r-2]+") {\n          result.a = getValue("+i+");\n        }\n\n        "+i[r-1]+" = "+i[r-1]+" - 1;\n        if ("+i[r-2]+" < "+n[r-2]+" &&\n            "+i[r-1]+" < "+n[r-1]+") {\n          result.b = getValue("+i+");\n        }\n        setOutput(result);\n      }\n    "};function zi(t,e,n){var r=t.indexOf(e);return t.map((function(t,e){return e===r?t+" - "+n:t})).join()}var Ui=function(t){this.variableNames=["x","dy"],this.outputShape=t.filterShape;var e=t.strideHeight,n=t.strideWidth,r=t.padInfo.top,o=t.padInfo.left,i="channelsLast"===t.dataFormat;this.userCode="\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int d2 = coords.w;\n\n        // Convolve x(?, ?, d1) with dy(:, :, d2) to get dw(wR, wC, d1, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int b = 0; b < "+t.batchSize+"; b++) {\n          for (int yR = 0; yR < "+t.outHeight+"; yR++) {\n            int xR = wR + yR * "+e+" - "+r+";\n\n            if (xR < 0 || xR >= "+t.inHeight+") {\n              continue;\n            }\n\n            for (int yC = 0; yC < "+t.outWidth+"; yC++) {\n              int xC = wC + yC * "+n+" - "+o+";\n\n              if (xC < 0 || xC >= "+t.inWidth+") {\n                continue;\n              }\n\n              if ("+i+") {\n                float dyValue = getDy(b, yR, yC, d2);\n                float xValue = getX(b, xR, xC, d1);\n                dotProd += (xValue * dyValue);\n              } else {\n                float dyValue = getDy(b, d2, yR, yC);\n                float xValue = getX(b, d1, xR, xC);\n                dotProd += (xValue * dyValue);\n              }\n\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    "},Vi=function(t){this.variableNames=["dy","W"],this.outputShape=t.inShape;var e=t.filterHeight,n=t.filterWidth,r=t.strideHeight,o=t.strideWidth,i="channelsLast"===t.dataFormat,a=e-1-t.padInfo.top,s=n-1-t.padInfo.left,u=i?1:2,c=i?2:3,l=i?3:1;this.userCode="\n      const ivec2 pads = ivec2("+a+", "+s+");\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords["+l+"];\n\n        ivec2 dyCorner = ivec2(coords["+u+"], coords["+c+"]) - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < "+e+"; wR++) {\n          float dyR = float(dyRCorner + wR) / "+r+".0;\n\n          if (dyR < 0.0 || dyR >= "+t.outHeight+".0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = "+e+" - 1 - wR;\n\n          for (int wC = 0; wC < "+n+"; wC++) {\n            float dyC = float(dyCCorner + wC) / "+o+".0;\n\n            if (dyC < 0.0 || dyC >= "+t.outWidth+".0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = "+n+" - 1 - wC;\n\n            for (int d2 = 0; d2 < "+t.outChannels+"; d2++) {\n\n              if ("+i+") {\n                float xValue = getDy(batch, idyR, idyC, d2);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              } else {\n                float xValue = getDy(batch, d2, idyR, idyC);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    "},Gi=function(t){this.variableNames=["x","dy"],this.outputShape=t.filterShape;var e=t.strideDepth,n=t.strideHeight,r=t.strideWidth,o=t.padInfo.front,i=t.padInfo.top,a=t.padInfo.left;this.userCode="\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int wF = coords.x;\n        int wR = coords.y;\n        int wC = coords.z;\n        int d1 = coords.w;\n        int d2 = coords.u;\n\n        float dotProd = 0.0;\n\n        for (int b = 0; b < "+t.batchSize+"; b++) {\n          for (int yF = 0; yF < "+t.outDepth+"; yF++) {\n            int xF = wF + yF * "+e+" - "+o+";\n\n            if (xF < 0 || xF >= "+t.inDepth+") {\n              continue;\n            }\n\n            for (int yR = 0; yR < "+t.outHeight+"; yR++) {\n              int xR = wR + yR * "+n+" - "+i+";\n\n              if (xR < 0 || xR >= "+t.inHeight+") {\n                continue;\n              }\n\n              for (int yC = 0; yC < "+t.outWidth+"; yC++) {\n                int xC = wC + yC * "+r+" - "+a+";\n\n                if (xC < 0 || xC >= "+t.inWidth+") {\n                  continue;\n                }\n\n                float dyValue = getDy(b, yF, yR, yC, d2);\n                float xValue = getX(b, xF, xR, xC, d1);\n                dotProd += (xValue * dyValue);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    "},Hi=function(t){this.variableNames=["dy","W"],this.outputShape=t.inShape;var e=t.filterDepth,n=t.filterHeight,r=t.filterWidth,o=t.strideDepth,i=t.strideHeight,a=t.strideWidth,s=e-1-t.padInfo.front,u=n-1-t.padInfo.top,c=r-1-t.padInfo.left;this.userCode="\n      const ivec3 pads = ivec3("+s+", "+u+", "+c+");\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d1 = coords.u;\n\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyFCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        float dotProd = 0.0;\n        for (int wF = 0; wF < "+e+"; wF++) {\n          float dyF = float(dyFCorner + wF) / "+o+".0;\n\n          if (dyF < 0.0 || dyF >= "+t.outDepth+".0 || fract(dyF) > 0.0) {\n            continue;\n          }\n          int idyF = int(dyF);\n\n          int wFPerm = "+e+" - 1 - wF;\n\n          for (int wR = 0; wR < "+n+"; wR++) {\n            float dyR = float(dyRCorner + wR) / "+i+".0;\n\n            if (dyR < 0.0 || dyR >= "+t.outHeight+".0 ||\n              fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            int wRPerm = "+n+" - 1 - wR;\n\n            for (int wC = 0; wC < "+r+"; wC++) {\n              float dyC = float(dyCCorner + wC) / "+a+".0;\n\n              if (dyC < 0.0 || dyC >= "+t.outWidth+".0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              int wCPerm = "+r+" - 1 - wC;\n\n              for (int d2 = 0; d2 < "+t.outChannels+"; d2++) {\n                float xValue = getDy(batch, idyF, idyR, idyC, d2);\n                float wValue = getW(wFPerm, wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    "},ji=function(t){this.variableNames=["x","dy"],this.outputShape=t.filterShape;var e=t.strideHeight,n=t.strideWidth,r=t.padInfo.top,o=t.padInfo.left,i=t.outChannels/t.inChannels;this.userCode="\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int dm = coords.w;\n        int d2 = d1 * "+i+" + dm;\n\n        float dotProd = 0.0;\n\n        // TO DO: Vec4 over the batch size\n        for (int b = 0; b < "+t.batchSize+"; b++) {\n          for (int yR = 0; yR < "+t.outHeight+"; yR++) {\n            int xR = wR + yR * "+e+" - "+r+";\n\n            if (xR < 0 || xR >= "+t.inHeight+") {\n              continue;\n            }\n\n            for (int yC = 0; yC < "+t.outWidth+"; yC++) {\n              int xC = wC + yC * "+n+" - "+o+";\n\n              if (xC < 0 || xC >= "+t.inWidth+") {\n                continue;\n              }\n\n              float dyValue = getDy(b, yR, yC, d2);\n              float xValue = getX(b, xR, xC, d1);\n              dotProd += (xValue * dyValue);\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    "},qi=function(t){this.variableNames=["dy","W"],this.outputShape=t.inShape;var e=t.filterHeight,n=t.filterWidth,r=t.strideHeight,o=t.strideWidth,i=e-1-t.padInfo.top,a=n-1-t.padInfo.left,s=t.outChannels/t.inChannels;this.userCode="\n      const ivec2 pads = ivec2("+i+", "+a+");\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[3];\n        ivec2 dyCorner = coords.yz - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        float dotProd = 0.0;\n\n        for (int wR = 0; wR < "+e+"; wR++) {\n          float dyR = float(dyRCorner + wR) / "+r+".0;\n\n          if (dyR < 0.0 || dyR >= "+t.outHeight+".0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = "+e+" - 1 - wR;\n\n          for (int wC = 0; wC < "+n+"; wC++) {\n            float dyC = float(dyCCorner + wC) / "+o+".0;\n\n            if (dyC < 0.0 || dyC >= "+t.outWidth+".0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = "+n+" - 1 - wC;\n\n            // TO DO: Vec4 over the channelMul\n            for (int dm = 0; dm < "+s+"; dm++) {\n              int d2 = d1 * "+s+" + dm;\n              float xValue = getDy(batch, idyR, idyC, d2);\n              float wValue = getW(wRPerm, wCPerm, d1, dm);\n              dotProd += xValue * wValue;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    "},Ki=function(t,e,n,r){void 0===e&&(e=!1),void 0===n&&(n=null),void 0===r&&(r=!1),this.variableNames=["x","W"],this.outputShape=t.outShape;var o=t.padInfo.top,i=t.padInfo.left,a=t.strideHeight,s=t.strideWidth,u=t.dilationHeight,c=t.dilationWidth,l=t.filterHeight,h=t.filterWidth,f=4*Math.floor(t.inChannels/4),p=t.inChannels%4,d="channelsLast"===t.dataFormat,v=d?1:2,m=d?2:3,g=d?3:1,y="",x="";n&&(y=r?"float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          "+n+"\n        }":"\n          float activation(float x) {\n            "+n+"\n          }\n        ",x="result = activation(result);");var b=e?"result += getBiasAtOutCoords();":"";e&&this.variableNames.push("bias"),r&&this.variableNames.push("preluActivationWeights"),this.userCode="\n      "+y+"\n\n      const ivec2 strides = ivec2("+a+", "+s+");\n      const ivec2 pads = ivec2("+o+", "+i+");\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d2 = coords["+g+"];\n\n        ivec2 xRCCorner =\n            ivec2(coords["+v+"], coords["+m+"]) * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, d2) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < "+l+"; wR++) {\n          int xR = xRCorner + wR * "+u+";\n\n          if (xR < 0 || xR >= "+t.inHeight+") {\n            continue;\n          }\n\n          for (int wC = 0; wC < "+h+"; wC++) {\n            int xC = xCCorner + wC * "+c+";\n\n            if (xC < 0 || xC >= "+t.inWidth+") {\n              continue;\n            }\n\n            for (int d1 = 0; d1 < "+f+"; d1 += 4) {\n              vec4 wValues = vec4(\n                getW(wR, wC, d1, d2),\n                getW(wR, wC, d1 + 1, d2),\n                getW(wR, wC, d1 + 2, d2),\n                getW(wR, wC, d1 + 3, d2)\n              );\n\n              if ("+d+") {\n                vec4 xValues = vec4(\n                  getX(batch, xR, xC, d1),\n                  getX(batch, xR, xC, d1 + 1),\n                  getX(batch, xR, xC, d1 + 2),\n                  getX(batch, xR, xC, d1 + 3)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec4 xValues = vec4(\n                  getX(batch, d1, xR, xC),\n                  getX(batch, d1 + 1, xR, xC),\n                  getX(batch, d1 + 2, xR, xC),\n                  getX(batch, d1 + 3, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n\n            if ("+(1===p)+") {\n\n              if ("+d+") {\n                dotProd +=\n                    getX(batch, xR, xC, "+f+") *\n                    getW(wR, wC, "+f+", d2);\n              } else {\n                dotProd +=\n                    getX(batch, "+f+", xR, xC) *\n                    getW(wR, wC, "+f+", d2);\n              }\n\n            } else if ("+(2===p)+") {\n              vec2 wValues = vec2(\n                getW(wR, wC, "+f+", d2),\n                getW(wR, wC, "+f+" + 1, d2)\n              );\n\n              if ("+d+") {\n                vec2 xValues = vec2(\n                  getX(batch, xR, xC, "+f+"),\n                  getX(batch, xR, xC, "+f+" + 1)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec2 xValues = vec2(\n                  getX(batch, "+f+", xR, xC),\n                  getX(batch, "+f+" + 1, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            } else if ("+(3===p)+") {\n              vec3 wValues = vec3(\n                getW(wR, wC, "+f+", d2),\n                getW(wR, wC, "+f+" + 1, d2),\n                getW(wR, wC, "+f+" + 2, d2)\n              );\n\n              if ("+d+") {\n                vec3 xValues = vec3(\n                  getX(batch, xR, xC, "+f+"),\n                  getX(batch, xR, xC, "+f+" + 1),\n                  getX(batch, xR, xC, "+f+" + 2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec3 xValues = vec3(\n                  getX(batch, "+f+", xR, xC),\n                  getX(batch, "+f+" + 1, xR, xC),\n                  getX(batch, "+f+" + 2, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            }\n          }\n        }\n\n        float result = dotProd;\n        "+b+"\n        "+x+"\n        setOutput(result);\n      }\n    "},Xi=function(t){this.variableNames=["x","W"],this.outputShape=t.outShape;var e=t.padInfo.front,n=t.padInfo.top,r=t.padInfo.left,o=t.strideDepth,i=t.strideHeight,a=t.strideWidth,s=t.dilationDepth,u=t.dilationHeight,c=t.dilationWidth,l=t.filterDepth,h=t.filterHeight,f=t.filterWidth,p=4*Math.floor(t.inChannels/4),d=t.inChannels%4;this.userCode="\n      const ivec3 strides = ivec3("+o+", "+i+", "+a+");\n      const ivec3 pads = ivec3("+e+", "+n+", "+r+");\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d2 = coords.u;\n\n        ivec3 xFRCCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xFCorner = xFRCCorner.x;\n        int xRCorner = xFRCCorner.y;\n        int xCCorner = xFRCCorner.z;\n\n        // Convolve x(?, ?, ?, d1) with w(:, :, :, d1, d2) to get\n        // y(yF, yR, yC, d2). ? = to be determined. : = across all\n        // values in that axis.\n        float dotProd = 0.0;\n        for (int wF = 0; wF < "+l+"; wF++) {\n          int xF = xFCorner + wF * "+s+";\n\n          if (xF < 0 || xF >= "+t.inDepth+") {\n            continue;\n          }\n\n          for (int wR = 0; wR < "+h+"; wR++) {\n            int xR = xRCorner + wR * "+u+";\n\n            if (xR < 0 || xR >= "+t.inHeight+") {\n              continue;\n            }\n\n            for (int wC = 0; wC < "+f+"; wC++) {\n              int xC = xCCorner + wC * "+c+";\n\n              if (xC < 0 || xC >= "+t.inWidth+") {\n                continue;\n              }\n\n              for (int d1 = 0; d1 < "+p+"; d1 += 4) {\n                vec4 xValues = vec4(\n                  getX(batch, xF, xR, xC, d1),\n                  getX(batch, xF, xR, xC, d1 + 1),\n                  getX(batch, xF, xR, xC, d1 + 2),\n                  getX(batch, xF, xR, xC, d1 + 3)\n                );\n                vec4 wValues = vec4(\n                  getW(wF, wR, wC, d1, d2),\n                  getW(wF, wR, wC, d1 + 1, d2),\n                  getW(wF, wR, wC, d1 + 2, d2),\n                  getW(wF, wR, wC, d1 + 3, d2)\n                );\n\n                dotProd += dot(xValues, wValues);\n              }\n\n              if ("+(1===d)+") {\n                dotProd +=\n                  getX(batch, xF, xR, xC, "+p+") *\n                  getW(wF, wR, wC, "+p+", d2);\n              } else if ("+(2===d)+") {\n                vec2 xValues = vec2(\n                  getX(batch, xF, xR, xC, "+p+"),\n                  getX(batch, xF, xR, xC, "+p+" + 1)\n                );\n                vec2 wValues = vec2(\n                  getW(wF, wR, wC, "+p+", d2),\n                  getW(wF, wR, wC, "+p+" + 1, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else if ("+(3===d)+") {\n                vec3 xValues = vec3(\n                  getX(batch, xF, xR, xC, "+p+"),\n                  getX(batch, xF, xR, xC, "+p+" + 1),\n                  getX(batch, xF, xR, xC, "+p+" + 2)\n                );\n                vec3 wValues = vec3(\n                  getW(wF, wR, wC, "+p+", d2),\n                  getW(wF, wR, wC, "+p+" + 1, d2),\n                  getW(wF, wR, wC, "+p+" + 2, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    "},Yi=function(t,e,n,r){void 0===e&&(e=!1),void 0===n&&(n=null),void 0===r&&(r=!1),this.variableNames=["x","W"],this.outputShape=t.outShape;var o=t.inHeight,i=t.inWidth,a=t.padInfo.top,s=t.padInfo.left,u=t.strideHeight,c=t.strideWidth,l=t.dilationHeight,h=t.dilationWidth,f=t.filterHeight,p=t.filterWidth,d=t.outChannels/t.inChannels,v="",m="";n&&(v=r?"float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          "+n+"\n        }":"\n          float activation(float x) {\n            "+n+"\n          }\n        ",m="result = activation(result);");var g=e?"result += getBiasAtOutCoords();":"";e&&this.variableNames.push("bias"),r&&this.variableNames.push("preluActivationWeights"),this.userCode="\n      "+v+"\n\n      const ivec2 strides = ivec2("+u+", "+c+");\n      const ivec2 pads = ivec2("+a+", "+s+");\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2 / "+d+";\n        int q = d2 - d1 * "+d+";\n\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, q) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        // TO DO(dsmilkov): Flatten the two for loops and vec4 the operations.\n        for (int wR = 0; wR < "+f+"; wR++) {\n          int xR = xRCorner + wR * "+l+";\n\n          if (xR < 0 || xR >= "+o+") {\n            continue;\n          }\n\n          for (int wC = 0; wC < "+p+"; wC++) {\n            int xC = xCCorner + wC * "+h+";\n\n            if (xC < 0 || xC >= "+i+") {\n              continue;\n            }\n\n            float xVal = getX(batch, xR, xC, d1);\n            float wVal = getW(wR, wC, d1, q);\n            dotProd += xVal * wVal;\n          }\n        }\n\n        float result = dotProd;\n        "+g+"\n        "+m+"\n        setOutput(result);\n      }\n    "},$i=function(t,e,n,r){void 0===e&&(e=!1),void 0===n&&(n=null),void 0===r&&(r=!1),this.variableNames=["x","W"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t.outShape;for(var o=t.inHeight,i=t.inWidth,a=t.padInfo.top,s=t.padInfo.left,u=t.strideHeight,c=t.strideWidth,l=t.dilationHeight,h=t.dilationWidth,f=t.filterHeight,p=t.filterWidth,d=p,v="int xR; int xC; int xCOffset;",m=0;m<f;m++)for(var g=0;g<p;g++)v+="\n          vec4 xTexelR"+m+"C"+2*g+" = vec4(0.);\n          vec4 wR"+m+"C"+g+" = vec4(0.);\n          vec4 xR"+m+"C"+g+" = vec4(0.);";for(m=0;m<f;m++)for(var y=0;y<d;y++){if(v+="\n          xR = xRCorner + "+m*l+";\n          xC = xCCorner + "+(g=2*y)*h+";\n        ",1===c){if(g<p&&(v+=s%2==1?"\n                xCOffset = xC + 1;\n                if(xR >= 0 && xR < "+o+" && xCOffset >= 0 && xCOffset < "+i+") {\n                  xTexelR"+m+"C"+g+" = getX(batch, xR, xCOffset, d1);\n\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if(xCOffset + 1 >= "+i+") {\n                    xTexelR"+m+"C"+g+".zw = vec2(0.);\n                  }\n                } else {\n                  xTexelR"+m+"C"+g+" = vec4(0.);\n                }\n\n                xCOffset = xC + 1 - 2;\n                if(xR >= 0 && xR < "+o+" && xCOffset >= 0 && xCOffset < "+i+") {\n                  vec4 previous = getX(batch, xR, xCOffset, d1);\n\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if(xCOffset + 1 >= "+i+") {\n                    previous.zw = vec2(0.);\n                  }\n\n                  xR"+m+"C"+g+" = vec4(previous.zw, xTexelR"+m+"C"+g+".xy);\n                } else {\n                  xR"+m+"C"+g+" = vec4(0, 0, xTexelR"+m+"C"+g+".xy);\n                }\n              ":"\n                if(xR >= 0 && xR < "+o+" && xC >= 0 && xC < "+i+") {\n                  xTexelR"+m+"C"+g+" = getX(batch, xR, xC, d1);\n                } else {\n                  xTexelR"+m+"C"+g+" = vec4(0.);\n                }\n\n                xR"+m+"C"+g+" = xTexelR"+m+"C"+g+";\n              ",g+1<p)){var x=s%2==0?I(h):h;h%2==0&&s%2==1||h%2!=0&&s%2!=1?(v+="\n                  xCOffset = xC + "+s%2+" + "+x+";\n\n                  if(xR >= 0 && xR < "+o+" &&\n                    xCOffset >= 0 && xCOffset < "+i+") {\n                    xTexelR"+m+"C"+(g+2)+" = getX(batch, xR, xCOffset, d1);\n                  }\n                ",h>1&&(v+="\n                    xCOffset -= 2;\n                    if(xR >= 0 && xR < "+o+" &&\n                      xCOffset >= 0 && xCOffset < "+i+") {\n                      xTexelR"+m+"C"+g+" = getX(batch, xR, xCOffset, d1);\n                    } else {\n                      xTexelR"+m+"C"+g+" = vec4(0.);\n                    }\n                  "),v+="\n                  xR"+m+"C"+(g+1)+" = vec4(\n                    xTexelR"+m+"C"+g+".zw, xTexelR"+m+"C"+(g+2)+".xy);\n                "):v+="\n                  xCOffset = xC + "+x+";\n\n                  if(xR >= 0 && xR < "+o+" &&\n                    xCOffset >= 0 && xCOffset < "+i+") {\n                    xTexelR"+m+"C"+(g+2)+" = getX(batch, xR, xCOffset, d1);\n                  }\n\n                  xR"+m+"C"+(g+1)+" = xTexelR"+m+"C"+(g+2)+";\n                "}}else g<p&&(v+="\n              if(xR >= 0 && xR < "+o+") {\n            ",s%2==1?(v+="\n                xCOffset = xC + 1 - "+c+";\n                if(xCOffset >= 0 && xCOffset < "+i+") {\n                  xTexelR"+m+"C"+g+" = getX(batch, xR, xCOffset, d1);\n                } else {\n                  xTexelR"+m+"C"+g+" = vec4(0.);\n                }\n\n                if(xC + 1 >= 0 && xC + 1 < "+i+") {\n                  xTexelR"+m+"C"+(g+2)+" = getX(batch, xR, xC + 1, d1);\n                } else {\n                  xTexelR"+m+"C"+(g+2)+" = vec4(0.);\n                }\n\n                xR"+m+"C"+g+" = vec4(\n                  xTexelR"+m+"C"+g+".zw, xTexelR"+m+"C"+(g+2)+".zw);\n              ",g+1<p&&(v+="\n                  vec4 final = vec4(0.);\n                  xCOffset = xC + 1 + "+c+";\n                  if(xCOffset >= 0 && xCOffset < "+i+") {\n                    final = getX(batch, xR, xCOffset, d1);\n                  }\n                  xR"+m+"C"+(g+1)+" = vec4(xTexelR"+m+"C"+(g+2)+".xy, final.xy);\n                ")):(v+="\n                if(xC >= 0 && xC < "+i+") {\n                  xTexelR"+m+"C"+g+" = getX(batch, xR, xC, d1);\n                } else {\n                  xTexelR"+m+"C"+g+" = vec4(0.);\n                }\n\n                xCOffset = xC + "+c+";\n                if(xCOffset >= 0 && xCOffset < "+i+") {\n                  xTexelR"+m+"C"+(g+2)+" = getX(batch, xR, xCOffset, d1);\n                } else {\n                  xTexelR"+m+"C"+(g+2)+" = vec4(0.);\n                }\n\n                xR"+m+"C"+g+" = vec4(\n                  xTexelR"+m+"C"+g+".xy, xTexelR"+m+"C"+(g+2)+".xy);\n              ",g+1<p&&(v+="\n                  xR"+m+"C"+(g+1)+" = vec4(\n                    xTexelR"+m+"C"+g+".zw, xTexelR"+m+"C"+(g+2)+".zw);\n                ")),v+="}");g<p&&(v+="\n            vec4 wTexelR"+m+"C"+g+" = getW("+m+", "+g+", d1, q);\n            wR"+m+"C"+g+" = vec4(wTexelR"+m+"C"+g+".xz, wTexelR"+m+"C"+g+".xz);\n          ",g+1<p&&(v+="\n              vec4 wTexelR"+m+"C"+(g+1)+" = getW("+m+", "+(g+1)+", d1, q);\n              wR"+m+"C"+(g+1)+" =\n                vec4(wTexelR"+m+"C"+(g+1)+".xz, wTexelR"+m+"C"+(g+1)+".xz);"))}for(m=0;m<f;m++)for(g=0;g<p;g++)v+="dotProd += xR"+m+"C"+g+" * wR"+m+"C"+g+";";var b="",w="";n&&(b=r?"vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          "+n+"\n        }":"vec4 activation(vec4 x) {\n          "+n+"\n        }",w="result = activation(result);");var C=e?"result += getBiasAtOutCoords();":"";e&&this.variableNames.push("bias"),r&&this.variableNames.push("preluActivationWeights"),this.userCode="\n      "+b+"\n\n      const ivec2 strides = ivec2("+u+", "+c+");\n      const ivec2 pads = ivec2("+a+", "+s+");\n\n      void main() {\n\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2;\n        int q = 0;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        vec4 dotProd = vec4(0.);\n\n        "+v+"\n\n        vec4 result = dotProd;\n        "+C+"\n        "+w+"\n        setOutput(result);\n      }\n    "},Ji=function(t,e,n,r,o){this.variableNames=["Image","Boxes","BoxInd"],this.outputShape=[];var i=t[0],a=t[1],s=t[2],u=t[3],c=e[0],l=n[0],h=n[1];this.outputShape=[c,l,h,u];var f="bilinear"===r?1:0,p=[a-1+".0",s-1+".0"],d=p[0],v=p[1],m=l>1?[""+(a-1)/(l-1),"(y2-y1) * height_ratio","y1*"+d+" + float(y)*(height_scale)"]:["0.0","0.0","0.5 * (y1+y2) * "+d],g=m[0],y=m[1],x=m[2],b=h>1?[""+(s-1)/(h-1),"(x2-x1) * width_ratio","x1*"+v+" + float(x)*(width_scale)"]:["0.0","0.0","0.5 * (x1+x2) * "+v],w=b[0],C=b[1],E=b[2];this.userCode="\n      const float height_ratio = float("+g+");\n      const float width_ratio = float("+w+");\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int y = coords[1];\n        int x = coords[2];\n        int d = coords[3];\n\n        // get box vals\n        float y1 = getBoxes(b,0);\n        float x1 = getBoxes(b,1);\n        float y2 = getBoxes(b,2);\n        float x2 = getBoxes(b,3);\n\n        // get image in batch index\n        int bInd = round(getBoxInd(b));\n        if(bInd < 0 || bInd >= "+i+") {\n          return;\n        }\n\n        float height_scale = "+y+";\n        float width_scale = "+C+";\n\n        float in_y = "+x+";\n        if( in_y < 0.0 || in_y > "+d+" ) {\n          setOutput(float("+o+"));\n          return;\n        }\n        float in_x = "+E+";\n        if( in_x < 0.0 || in_x > "+v+" ) {\n          setOutput(float("+o+"));\n          return;\n        }\n\n        vec2 sourceFracIndexCR = vec2(in_x,in_y);\n        if("+f+" == 1) {\n          // Compute the four integer indices.\n          ivec2 sourceFloorCR = ivec2(sourceFracIndexCR);\n          ivec2 sourceCeilCR = ivec2(ceil(sourceFracIndexCR));\n\n          float topLeft = getImage(b, sourceFloorCR.y, sourceFloorCR.x, d);\n          float bottomLeft = getImage(b, sourceCeilCR.y, sourceFloorCR.x, d);\n          float topRight = getImage(b, sourceFloorCR.y, sourceCeilCR.x, d);\n          float bottomRight = getImage(b, sourceCeilCR.y, sourceCeilCR.x, d);\n\n          vec2 fracCR = sourceFracIndexCR - vec2(sourceFloorCR);\n\n          float top = topLeft + (topRight - topLeft) * fracCR.x;\n          float bottom = bottomLeft + (bottomRight - bottomLeft) * fracCR.x;\n          float newValue = top + (bottom - top) * fracCR.y;\n          setOutput(newValue);\n        } else {\n          // Compute the coordinators of nearest neighbor point.\n          ivec2 sourceNearestCR = ivec2(floor(\n            sourceFracIndexCR + vec2(0.5,0.5)));\n          float newValue = getImage(b, sourceNearestCR.y, sourceNearestCR.x, d);\n          setOutput(newValue);\n        }\n      }\n    "},Qi=function(t,e,n){this.variableNames=["x"],this.outputShape=t;var r=t.length,o=t[t.length-1],i=n?"<":">";this.userCode="\n      int getIndex(int i) {\n        "+(n?"return "+o+" -i - 1;":"return i;")+"\n      }\n\n      void main() {\n        "+xi(r)+" coords = getOutputCoords();\n        int end = "+Zi(r,"coords")+";\n        float val = 0.0;\n        for (int i = "+o+" - 1; i >= 0; i -= 1) {\n          int idx = getIndex(i);\n          if (idx "+i+" end) {\n            continue;\n          }\n          if (idx == end && "+e+") {\n            continue;\n          }\n          "+Zi(r,"coords")+" = idx;\n          val += getX("+function(t,e){if(1===t)return""+e;if(2===t)return e+".x, "+e+".y";if(3===t)return e+".x, "+e+".y, "+e+".z";if(4===t)return e+".x, "+e+".y, "+e+".z, "+e+".w";throw Error("Cumulative sum for rank "+t+" is not yet supported")}(r,"coords")+");\n        }\n        setOutput(val);\n      }\n    "};function Zi(t,e){if(1===t)return""+e;if(2===t)return e+".y";if(3===t)return e+".z";if(4===t)return e+".w";throw Error("Cumulative sum for rank "+t+" is not yet supported")}var ta=function(t){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.outPackingScheme=Vt.DENSE;var e=$t(t),n=ai();this.outputShape=t,this.userCode="\n      ivec3 outCoordsFromFlatIndex(int index) {\n        "+si(["r","c","d"],t)+"\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n          vec2("+e[0]+", "+e[1]+"));\n        int index = 4 * (resTexRC.x * "+e[1]+" + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getA(rc.x, rc.y, rc.z);\n        }\n\n        "+n.output+" = result;\n      }\n    "},ea=function(t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outPackingScheme=Vt.DENSE;var e=$t(t),n=ai();this.outputShape=t,this.userCode="\n      ivec3 outCoordsFromFlatIndex(int index) {\n        "+si(["r","c","d"],t)+"\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n          vec2("+e[0]+", "+e[1]+"));\n        int index = 4 * (resTexRC.x * "+e[1]+" + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getChannel(getA(rc.x, rc.y, rc.z), vec2(rc.y, rc.z));\n        }\n\n        "+n.output+" = result;\n      }\n    "},na=function(){function t(t,e,n){this.variableNames=["x"],this.outputShape=[],this.outputShape=t,this.blockSize=e,this.dataFormat=n,this.userCode="\n    void main() {\n      ivec4 coords = getOutputCoords();\n      int b = coords[0];\n      int h = "+this.getHeightCoordString()+";\n      int w = "+this.getWidthCoordString()+";\n      int d = "+this.getDepthCoordString()+";\n\n      int in_h = h / "+e+";\n      int offset_h = imod(h, "+e+");\n      int in_w = w / "+e+";\n      int offset_w = imod(w, "+e+");\n      int offset_d = (offset_h * "+e+" + offset_w) *\n        "+this.getOutputDepthSize()+";\n      int in_d = d + offset_d;\n\n      float result = "+this.getInputSamplingString()+";\n      setOutput(result);\n    }\n  "}return t.prototype.getHeightCoordString=function(){return"NHWC"===this.dataFormat?"coords[1]":"coords[2]"},t.prototype.getWidthCoordString=function(){return"NHWC"===this.dataFormat?"coords[2]":"coords[3]"},t.prototype.getDepthCoordString=function(){return"NHWC"===this.dataFormat?"coords[3]":"coords[1]"},t.prototype.getOutputDepthSize=function(){return"NHWC"===this.dataFormat?this.outputShape[3]:this.outputShape[1]},t.prototype.getInputSamplingString=function(){return"NHWC"===this.dataFormat?"getX(b, in_h, in_w, in_d)":"getX(b, in_d, in_h, in_w)"},t}(),ra=function(t){this.variableNames=["X"],this.outputShape=[t,t],this.userCode="\n      void main() {\n          ivec2 coords = getOutputCoords();\n          float val = coords[0] == coords[1] ? getX(coords[0]) : 0.0;\n          setOutput(val);\n      }\n    "},oa=function(t){this.variableNames=["A"],this.outTexUsage=Gt.DOWNLOAD;var e=ai();this.outputShape=t,this.userCode="\n      "+ci+"\n\n      void main() {\n        float x = getAAtOutCoords();\n        "+e.output+" = encode_float(x);\n      }\n    "},ia=function(t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!1,this.outTexUsage=Gt.DOWNLOAD;var e=ai();this.outputShape=t,this.userCode="\n      "+ci+"\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n        float x = getChannel(getAAtOutCoords(), vec2(coords.y, coords.z));\n        "+e.output+" = encode_float(x);\n      }\n    "},aa=function(t,e,n){void 0===n&&(n=!1),this.variableNames=["A"];var r=ai(),o=e[0],i=e[1];this.outputShape=t;var a="result";n&&(a="floor(result * 255. + 0.5)"),this.userCode="\n      "+ui(t)+"\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n\n        int flatIndex = getFlatIndex(coords);\n        int offset = imod(flatIndex, 4);\n\n        flatIndex = idiv(flatIndex, 4, 1.);\n        \n        int r = flatIndex / "+i+";\n        int c = imod(flatIndex, "+i+");\n        vec2 uv = (vec2(c, r) + halfCR) / vec2("+i+".0, "+o+".0);\n        vec4 values = "+r.texture2D+"(A, uv);\n\n        float result;\n\n        if(offset == 0) {\n          result = values[0];\n        } else if(offset == 1) {\n          result = values[1];\n        } else if(offset == 2) {\n          result = values[2];\n        } else {\n          result = values[3];\n        }\n\n        "+r.output+" = vec4("+a+", 0., 0., 0.);\n      }\n    "},sa=function(t,e,n){void 0===n&&(n=!1),this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0;var r=ai(),o=e[0],i=e[1];this.outputShape=t;var a="",s="result";n&&(s="floor(result * 255. + 0.5)");for(var u=0;u<=1;u++)for(var c=0;c<=1;c++){var l=2*u+c;a+="\n          localCoords = coords;\n          if(localCoords[2] + "+c+" < "+t[2]+") {\n            localCoords[2] += "+c+";\n            if(localCoords[1] + "+u+" < "+t[1]+") {\n              localCoords[1] += "+u+";\n\n              flatIndex = getFlatIndex(localCoords);\n              offset = imod(flatIndex, 4);\n\n              flatIndex = idiv(flatIndex, 4, 1.);\n\n              r = flatIndex / "+i+";\n              c = imod(flatIndex, "+i+");\n              uv = (vec2(c, r) + halfCR) / vec2("+i+".0, "+o+".0);\n              values = "+r.texture2D+"(A, uv);\n\n              if(offset == 0) {\n                result["+l+"] = values[0];\n              } else if(offset == 1) {\n                result["+l+"] = values[1];\n              } else if(offset == 2) {\n                result["+l+"] = values[2];\n              } else {\n                result["+l+"] = values[3];\n              }\n            }\n          }\n        "}this.userCode="\n      "+ui(t)+"\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n\n        vec4 result = vec4(0.);\n        int flatIndex, r, c, offset;\n        ivec3 localCoords;\n        vec2 uv;\n        vec4 values;\n\n        "+a+"\n\n        "+r.output+" = "+s+";\n      }\n    "},ua=function(t,e,n){this.variableNames=["real","imag"];var r=e[1];this.outputShape=e;var o=n?"2.0 * "+Math.PI:"-2.0 * "+Math.PI,i=n?r+".0":"1.0";this.userCode="\n      const float exponentMultiplier = "+o+";\n\n      float unaryOpComplex(float real, float expR, float imag, float expI) {\n        "+t+"\n      }\n\n      float mulMatDFT(int batch, int index) {\n        float indexRatio = float(index) / float("+r+");\n        float exponentMultiplierTimesIndexRatio =\n            exponentMultiplier * indexRatio;\n\n        float result = 0.0;\n\n        for (int i = 0; i < "+r+"; i++) {\n          // x = (-2|2 * PI / N) * index * i;\n          float x = exponentMultiplierTimesIndexRatio * float(i);\n          float expR = cos(x);\n          float expI = sin(x);\n          float real = getReal(batch, i);\n          float imag = getImag(batch, i);\n\n          result +=\n              unaryOpComplex(real, expR, imag, expI) / "+i+";\n        }\n\n        return result;\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        setOutput(mulMatDFT(coords[0], coords[1]));\n      }\n    "},ca=function(){function t(t,e){this.outputShape=[],this.variableNames=["x"],this.outputShape=t,this.userCode="\n      uniform float value;\n      void main() {\n        // Input can be obtained from uniform value.\n        setOutput(value);\n      }\n    "}return t.prototype.getCustomSetupFunc=function(t){var e=this;return function(n,r){null==e.valueLoc&&(e.valueLoc=n.getUniformLocationNoThrow(r,"value")),n.gl.uniform1f(e.valueLoc,t)}},t}(),la=function(t,e,n){this.variableNames=["A","indices"];var r=t.slice();r[n]=e,this.outputShape=r,this.rank=r.length;var o=xi(this.rank),i=function(t,e){var n=t.length;if(n>4)throw Error("Gather for rank "+n+" is not yet supported");if(1===n)return"int(getIndices(resRC))";for(var r=["resRC.x","resRC.y","resRC.z","resRC.w"],o=[],i=0;i<t.length;i++)i===e?o.push("int(getIndices("+r[i]+"))"):o.push(""+r[i]);return o.join()}(t,n);this.userCode="\n      void main() {\n        "+o+" resRC = getOutputCoords();\n        setOutput(getA("+i+"));\n      }\n    "},ha=function(t,e,n){this.sliceDim=t,this.strides=e,this.variableNames=["x","indices"],this.outputShape=n;var r=xi(e.length),o=xi(n.length),i=this.sliceDim>1?"strides[j]":"strides";this.userCode="\n        "+r+" strides = "+r+"("+this.strides+");\n         void main() {\n          "+o+" coords = getOutputCoords();\n          int flattenIndex = 0;\n          for (int j = 0; j < "+this.sliceDim+"; j++) {\n            int index = round(getIndices(coords[0], j));\n            flattenIndex += index * "+i+";\n          }\n          setOutput(getX(flattenIndex, coords[1]));\n        }\n      "};function fa(t,e){var n=ai();return re(t,e,n.version+"\n    precision highp float;\n    "+n.attribute+" vec3 clipSpacePos;\n    "+n.attribute+" vec2 uv;\n    "+n.varyingVs+" vec2 resultUV;\n\n    void main() {\n      gl_Position = vec4(clipSpacePos, 1);\n      resultUV = uv;\n    }")}function pa(t,e){return he(t,e,new Float32Array([-1,1,0,0,1,-1,-1,0,0,0,1,1,0,1,1,1,-1,0,1,0]))}function da(t,e){return fe(t,e,new Uint16Array([0,1,2,2,1,3]))}function va(t,e,n,r,o,i,a){de(n,r);var s=pe(t,e),u=t.TEXTURE_2D;return Zt(t,e,(function(){return t.bindTexture(u,s)})),Zt(t,e,(function(){return t.texParameteri(u,t.TEXTURE_WRAP_S,t.CLAMP_TO_EDGE)})),Zt(t,e,(function(){return t.texParameteri(u,t.TEXTURE_WRAP_T,t.CLAMP_TO_EDGE)})),Zt(t,e,(function(){return t.texParameteri(u,t.TEXTURE_MIN_FILTER,t.NEAREST)})),Zt(t,e,(function(){return t.texParameteri(u,t.TEXTURE_MAG_FILTER,t.NEAREST)})),Zt(t,e,(function(){return t.texImage2D(u,0,o,n,r,0,i,a,null)})),Zt(t,e,(function(){return t.bindTexture(t.TEXTURE_2D,null)})),s}function ma(t,e,n,r,o){var i=Yt(n,r);return va(t,e,i[0],i[1],o.internalFormatFloat,o.textureFormatFloat,t.FLOAT)}function ga(t,e,n,r,o){var i=Yt(n,r);return va(t,e,i[0],i[1],o.internalFormatHalfFloat,o.textureFormatFloat,o.textureTypeHalfFloat)}function ya(t,e,n,r,o){var i=Yt(n,r);return va(t,e,i[0],i[1],t.RGBA,t.RGBA,t.UNSIGNED_BYTE)}function xa(t,e,n,r,o){var i=Jt(n,r);return va(t,e,i[0],i[1],o.internalFormatPackedFloat,t.RGBA,t.FLOAT)}function ba(t,e,n,r,o){var i=Jt(n,r);return va(t,e,i[0],i[1],o.internalFormatPackedHalfFloat,t.RGBA,o.textureTypeHalfFloat)}function wa(t,e,n,r){return Zt(t,e,(function(){return t.bindBuffer(t.ARRAY_BUFFER,r)})),me(t,e,n,"clipSpacePos",r,3,20,0)&&me(t,e,n,"uv",r,2,20,12)}function Ca(t,e,n,r,o,i,a){var s,u,c;Zt(t,e,(function(){return t.bindTexture(t.TEXTURE_2D,n)})),i instanceof Uint8Array?(s=new Uint8Array(r*o*4),u=t.UNSIGNED_BYTE,c=t.RGBA):(s=new Float32Array(r*o*4),u=t.FLOAT,c=a.internalFormatPackedFloat),s.set(i),Zt(t,e,(function(){return t.texImage2D(t.TEXTURE_2D,0,c,r,o,0,t.RGBA,u,s)})),Zt(t,e,(function(){return t.bindTexture(t.TEXTURE_2D,null)}))}function Ea(t,e,n,r){Zt(t,e,(function(){return t.bindTexture(t.TEXTURE_2D,n)})),r.data instanceof Uint8Array?Zt(t,e,(function(){return t.texImage2D(t.TEXTURE_2D,0,t.RGBA,r.width,r.height,0,t.RGBA,t.UNSIGNED_BYTE,r.data)})):Zt(t,e,(function(){return t.texImage2D(t.TEXTURE_2D,0,t.RGBA,t.RGBA,t.UNSIGNED_BYTE,r)})),Zt(t,e,(function(){return t.bindTexture(t.TEXTURE_2D,null)}))}function _a(t,e,n,r,o){var i=t.createBuffer();Zt(t,e,(function(){return t.bindBuffer(t.PIXEL_PACK_BUFFER,i)}));var a=16*n*r;return Zt(t,e,(function(){return t.bufferData(t.PIXEL_PACK_BUFFER,a,t.STREAM_READ)})),Zt(t,e,(function(){return t.readPixels(0,0,r,n,t.RGBA,t.FLOAT,0)})),Zt(t,e,(function(){return t.bindBuffer(t.PIXEL_PACK_BUFFER,null)})),i}function Ia(t,e,n){var r=t,o=new Float32Array(n);return r.bindBuffer(r.PIXEL_PACK_BUFFER,e),r.getBufferSubData(r.PIXEL_PACK_BUFFER,0,o),r.bindBuffer(r.PIXEL_PACK_BUFFER,null),o}function Ra(t,e,n,r,o){var i=Yt(n,r),a=i[0],s=i[1],u=new Uint8Array(n*r*4);return Zt(t,e,(function(){return t.readPixels(0,0,a,s,o.downloadTextureFormat,t.UNSIGNED_BYTE,u)})),new Float32Array(u.buffer)}function Sa(t,e,n,r,o,i,a,s){var u=t,c=new Float32Array(function(t,e){var n=Jt(t,e);return n[0]*n[1]*4}(i,a));return u.bindBuffer(u.PIXEL_PACK_BUFFER,e),u.getBufferSubData(u.PIXEL_PACK_BUFFER,0,c),u.bindBuffer(u.PIXEL_PACK_BUFFER,null),c}function ka(t,e,n,r){var o=new Float32Array(n*r*4);return Zt(t,e,(function(){return t.readPixels(0,0,r,n,t.RGBA,t.FLOAT,o)})),o}var Da=Object.freeze({createVertexShader:fa,createVertexBuffer:pa,createIndexBuffer:da,createFloat32MatrixTexture:ma,createFloat16MatrixTexture:ga,createUnsignedBytesMatrixTexture:ya,createPackedMatrixTexture:xa,createFloat16PackedMatrixTexture:ba,bindVertexProgramAttributeStreams:wa,uploadDenseMatrixToTexture:Ca,uploadPixelDataToTexture:Ea,createBufferFromOutputTexture:_a,downloadFloat32MatrixFromBuffer:Ia,downloadByteEncodedFloatMatrixFromOutputTexture:Ra,downloadPackedMatrixFromBuffer:Sa,downloadMatrixFromPackedOutputTexture:ka}),Aa=function(){function t(t){this.outputTexture=null,this.program=null,this.disposed=!1,this.vertexAttrsAreBound=!1,this.itemsToPoll=[];var e=h().getNumber("WEBGL_VERSION");null!=t?(this.gl=t,Kt(e,t)):this.gl=Xt(e);var n="WEBGL_color_buffer_float";if(1===h().getNumber("WEBGL_VERSION")){if(this.textureFloatExtension=ne(this.gl,this.debug,"OES_texture_float"),Pe(this.gl,"OES_texture_half_float"))this.textureHalfFloatExtension=ne(this.gl,this.debug,"OES_texture_half_float");else if(h().get("WEBGL_FORCE_F16_TEXTURES"))throw new Error("GL context does not support half float textures, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.");if(this.colorBufferFloatExtension=this.gl.getExtension(n),Pe(this.gl,"EXT_color_buffer_half_float"))this.colorBufferHalfFloatExtension=ne(this.gl,this.debug,"EXT_color_buffer_half_float");else if(h().get("WEBGL_FORCE_F16_TEXTURES"))throw new Error("GL context does not support color renderable half floats, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.")}else if(n="EXT_color_buffer_float",Pe(this.gl,n))this.colorBufferFloatExtension=this.gl.getExtension(n);else{if(!Pe(this.gl,"EXT_color_buffer_half_float"))throw new Error("GL context does not support color renderable floats");this.colorBufferHalfFloatExtension=this.gl.getExtension("EXT_color_buffer_half_float")}this.vertexBuffer=pa(this.gl,this.debug),this.indexBuffer=da(this.gl,this.debug),this.framebuffer=ve(this.gl,this.debug),this.textureConfig=Qt(this.gl,this.textureHalfFloatExtension)}return Object.defineProperty(t.prototype,"debug",{get:function(){return h().getBool("DEBUG")},enumerable:!0,configurable:!0}),t.prototype.dispose=function(){var t=this;if(!this.disposed){null!=this.program&&console.warn("Disposing a GPGPUContext that still has a bound WebGLProgram. This is probably a resource leak, delete the program with GPGPUContext.deleteProgram before disposing."),null!=this.outputTexture&&console.warn("Disposing a GPGPUContext that still has a bound output matrix texture.  This is probably a resource leak, delete the output matrix texture with GPGPUContext.deleteMatrixTexture before disposing.");var e=this.gl;Zt(e,this.debug,(function(){return e.finish()})),Zt(e,this.debug,(function(){return e.bindFramebuffer(e.FRAMEBUFFER,null)})),Zt(e,this.debug,(function(){return e.deleteFramebuffer(t.framebuffer)})),Zt(e,this.debug,(function(){return e.bindBuffer(e.ARRAY_BUFFER,null)})),Zt(e,this.debug,(function(){return e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,null)})),Zt(e,this.debug,(function(){return e.deleteBuffer(t.indexBuffer)})),this.disposed=!0}},t.prototype.createFloat32MatrixTexture=function(t,e){return this.throwIfDisposed(),ma(this.gl,this.debug,t,e,this.textureConfig)},t.prototype.createFloat16MatrixTexture=function(t,e){return this.throwIfDisposed(),ga(this.gl,this.debug,t,e,this.textureConfig)},t.prototype.createUnsignedBytesMatrixTexture=function(t,e){return this.throwIfDisposed(),ya(this.gl,this.debug,t,e,this.textureConfig)},t.prototype.uploadPixelDataToTexture=function(t,e){this.throwIfDisposed(),Ea(this.gl,this.debug,t,e)},t.prototype.uploadDenseMatrixToTexture=function(t,e,n,r){this.throwIfDisposed(),Ca(this.gl,this.debug,t,e,n,r,this.textureConfig)},t.prototype.createFloat16PackedMatrixTexture=function(t,e){return this.throwIfDisposed(),ba(this.gl,this.debug,t,e,this.textureConfig)},t.prototype.createPackedMatrixTexture=function(t,e){return this.throwIfDisposed(),xa(this.gl,this.debug,t,e,this.textureConfig)},t.prototype.deleteMatrixTexture=function(t){var e=this;this.throwIfDisposed(),this.outputTexture===t&&(Ce(this.gl,this.debug,this.framebuffer),this.outputTexture=null),Zt(this.gl,this.debug,(function(){return e.gl.deleteTexture(t)}))},t.prototype.downloadByteEncodedFloatMatrixFromOutputTexture=function(t,e,n){var r=this;return this.downloadMatrixDriver(t,(function(){return Ra(r.gl,r.debug,e,n,r.textureConfig)}))},t.prototype.downloadPackedMatrixFromBuffer=function(t,e,n,r,o,i){return Sa(this.gl,t,0,0,0,o,i,this.textureConfig)},t.prototype.downloadFloat32MatrixFromBuffer=function(t,e){return Ia(this.gl,t,e)},t.prototype.createBufferFromTexture=function(t,e,n){this.bindTextureToFrameBuffer(t);var r=_a(this.gl,this.debug,e,n,this.textureConfig);return this.unbindTextureToFrameBuffer(),r},t.prototype.createAndWaitForFence=function(){var t=this.createFence(this.gl);return this.pollFence(t)},t.prototype.createFence=function(t){var e,n,r=this;if(h().getBool("WEBGL_FENCE_API_ENABLED")){var o=t,i=o.fenceSync(o.SYNC_GPU_COMMANDS_COMPLETE,0);t.flush(),n=function(){var t=o.clientWaitSync(i,0,0);return t===o.ALREADY_SIGNALED||t===o.CONDITION_SATISFIED},e=i}else h().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0?(e=this.beginQuery(),this.endQuery(),n=function(){return r.isQueryAvailable(e,h().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))}):n=function(){return!0};return{query:e,isFencePassed:n}},t.prototype.downloadMatrixFromPackedTexture=function(t,e,n){var r=this;return this.downloadMatrixDriver(t,(function(){return ka(r.gl,r.debug,e,n)}))},t.prototype.createProgram=function(t){this.throwIfDisposed();var e=this.gl,n=oe(e,this.debug,t),r=fa(e,this.debug),o=ue(e,this.debug);return Zt(e,this.debug,(function(){return e.attachShader(o,r)})),Zt(e,this.debug,(function(){return e.attachShader(o,n)})),ce(e,this.debug,o),this.debug&&le(e,this.debug,o),this.vertexAttrsAreBound||(this.setProgram(o),this.vertexAttrsAreBound=wa(e,this.debug,this.program,this.vertexBuffer)),o},t.prototype.deleteProgram=function(t){var e=this;this.throwIfDisposed(),t===this.program&&(this.program=null),null!=t&&Zt(this.gl,this.debug,(function(){return e.gl.deleteProgram(t)}))},t.prototype.setProgram=function(t){var e=this;this.throwIfDisposed(),this.program=t,null!=this.program&&this.debug&&le(this.gl,this.debug,this.program),Zt(this.gl,this.debug,(function(){return e.gl.useProgram(t)}))},t.prototype.getUniformLocation=function(t,e,n){return void 0===n&&(n=!0),this.throwIfDisposed(),n?ye(this.gl,this.debug,t,e):xe(this.gl,t,e)},t.prototype.getAttributeLocation=function(t,e){var n=this;return this.throwIfDisposed(),Zt(this.gl,this.debug,(function(){return n.gl.getAttribLocation(t,e)}))},t.prototype.getUniformLocationNoThrow=function(t,e){return this.throwIfDisposed(),this.gl.getUniformLocation(t,e)},t.prototype.setInputMatrixTexture=function(t,e,n){this.throwIfDisposed(),this.throwIfNoProgram(),be(this.gl,this.debug,this.program,t,e,n)},t.prototype.setOutputMatrixTexture=function(t,e,n){this.setOutputMatrixTextureDriver(t,n,e)},t.prototype.setOutputPackedMatrixTexture=function(t,e,n){this.throwIfDisposed();var r=Jt(e,n),o=r[0],i=r[1];this.setOutputMatrixTextureDriver(t,o,i)},t.prototype.setOutputMatrixWriteRegion=function(t,e,n,r){this.setOutputMatrixWriteRegionDriver(n,t,r,e)},t.prototype.setOutputPackedMatrixWriteRegion=function(t,e,n,r){throw new Error("setOutputPackedMatrixWriteRegion not implemented.")},t.prototype.debugValidate=function(){null!=this.program&&le(this.gl,this.debug,this.program),Ee(this.gl)},t.prototype.executeProgram=function(){this.throwIfDisposed(),this.throwIfNoProgram();var t=this.gl;this.debug&&this.debugValidate(),Zt(t,this.debug,(function(){return t.drawElements(t.TRIANGLES,6,t.UNSIGNED_SHORT,0)}))},t.prototype.blockUntilAllProgramsCompleted=function(){var t=this;this.throwIfDisposed(),Zt(this.gl,this.debug,(function(){return t.gl.finish()}))},t.prototype.getQueryTimerExtension=function(){return null==this.disjointQueryTimerExtension&&(this.disjointQueryTimerExtension=ne(this.gl,this.debug,2===h().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")?"EXT_disjoint_timer_query_webgl2":"EXT_disjoint_timer_query")),this.disjointQueryTimerExtension},t.prototype.getQueryTimerExtensionWebGL2=function(){return this.getQueryTimerExtension()},t.prototype.getQueryTimerExtensionWebGL1=function(){return this.getQueryTimerExtension()},t.prototype.beginQuery=function(){if(2===h().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")){var t=this.gl,e=this.getQueryTimerExtensionWebGL2(),n=t.createQuery();return t.beginQuery(e.TIME_ELAPSED_EXT,n),n}var r=this.getQueryTimerExtensionWebGL1(),o=r.createQueryEXT();return r.beginQueryEXT(r.TIME_ELAPSED_EXT,o),o},t.prototype.endQuery=function(){if(2!==h().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")){var t=this.getQueryTimerExtensionWebGL1();t.endQueryEXT(t.TIME_ELAPSED_EXT)}else{var e=this.gl,n=this.getQueryTimerExtensionWebGL2();e.endQuery(n.TIME_ELAPSED_EXT)}},t.prototype.waitForQueryAndGetTime=function(t){return u(this,void 0,void 0,(function(){var e=this;return c(this,(function(n){switch(n.label){case 0:return[4,B((function(){return e.disposed||e.isQueryAvailable(t,h().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))}))];case 1:return n.sent(),[2,this.getQueryTime(t,h().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))]}}))}))},t.prototype.getQueryTime=function(t,e){if(0===e)return null;if(2===e){var n=this.gl;return n.getQueryParameter(t,n.QUERY_RESULT)/1e6}var r=this.getQueryTimerExtensionWebGL1();return r.getQueryObjectEXT(t,r.QUERY_RESULT_EXT)/1e6},t.prototype.isQueryAvailable=function(t,e){if(0===e)return!0;if(2===e){var n=this.gl,r=this.getQueryTimerExtensionWebGL2(),o=n.getQueryParameter(t,n.QUERY_RESULT_AVAILABLE);return null==this.disjoint&&(this.disjoint=this.gl.getParameter(r.GPU_DISJOINT_EXT)),o&&!this.disjoint}return o=(r=this.getQueryTimerExtensionWebGL1()).getQueryObjectEXT(t,r.QUERY_RESULT_AVAILABLE_EXT),null==this.disjoint&&(this.disjoint=this.gl.getParameter(r.GPU_DISJOINT_EXT)),o&&!this.disjoint},t.prototype.pollFence=function(t){var e=this;return new Promise((function(n){e.addItemToPoll((function(){return t.isFencePassed()}),(function(){return n()}))}))},t.prototype.pollItems=function(){for(var t=function(t){for(var e=0;e<t.length&&t[e]();++e);return e-1}(this.itemsToPoll.map((function(t){return t.isDoneFn}))),e=0;e<=t;++e)(0,this.itemsToPoll[e].resolveFn)();this.itemsToPoll=this.itemsToPoll.slice(t+1)},t.prototype.addItemToPoll=function(t,e){var n=this;this.itemsToPoll.push({isDoneFn:t,resolveFn:e}),this.itemsToPoll.length>1||B((function(){return n.pollItems(),0===n.itemsToPoll.length}))},t.prototype.bindTextureToFrameBuffer=function(t){this.throwIfDisposed(),we(this.gl,this.debug,t,this.framebuffer),this.debug&&Ee(this.gl)},t.prototype.unbindTextureToFrameBuffer=function(){null!=this.outputTexture?(we(this.gl,this.debug,this.outputTexture,this.framebuffer),this.debug&&Ee(this.gl)):Ce(this.gl,this.debug,this.framebuffer)},t.prototype.downloadMatrixDriver=function(t,e){this.bindTextureToFrameBuffer(t);var n=e();return this.unbindTextureToFrameBuffer(),n},t.prototype.setOutputMatrixTextureDriver=function(t,e,n){this.throwIfDisposed();var r=this.gl;we(r,this.debug,t,this.framebuffer),this.debug&&Ee(r),this.outputTexture=t,Zt(r,this.debug,(function(){return r.viewport(0,0,e,n)})),Zt(r,this.debug,(function(){return r.scissor(0,0,e,n)}))},t.prototype.setOutputMatrixWriteRegionDriver=function(t,e,n,r){var o=this;this.throwIfDisposed(),Zt(this.gl,this.debug,(function(){return o.gl.scissor(t,e,n,r)}))},t.prototype.throwIfDisposed=function(){if(this.disposed)throw new Error("Attempted to use disposed GPGPUContext.")},t.prototype.throwIfNoProgram=function(){if(null==this.program)throw new Error("No GPU program is currently set.")},t}();function Ta(t,e){if(t.length!==e.length)throw Error("Binary was compiled with "+t.length+" inputs, but was executed with "+e.length+" inputs");t.forEach((function(t,n){var r=t.logicalShape,o=e[n],i=o.shape;if(!F(r,i))throw Error("Binary was compiled with different shapes than the current args. Shapes "+r+" and "+i+" must match");if(!t.isUniform||!o.isUniform){var a=t.texShape,s=o.isUniform?null:o.texData.texShape;if(!F(a,s))throw Error("Binary was compiled with different texture shapes than the current args. Shape "+a+" and "+s+" must match")}}))}var Fa=function(t,e,n){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t;for(var r=n.filterWidth,o=n.inChannels,i=n.strideWidth,a=n.strideHeight,s=n.padInfo,u=n.outWidth,c=n.dilationWidth,l=n.dilationHeight,h=n.dataFormat,f=s.left,p=s.top,d=o*r,v=ai(),m="channelsLast"===h,g=m?0:1,y=m?1:2,x="",b=0;b<=1;b++)for(var w=0;w<=1;w++)x+="\n          blockIndex = rc.y + "+w+";\n          pos = rc.x + "+b+";\n\n          if(blockIndex < "+t[1]+" && pos < "+t[0]+") {\n            offsetY = int(blockIndex / ("+u+")) * "+a+" - "+p+";\n            d0 = offsetY + "+l+" * (pos / "+d+");\n\n            if(d0 < "+e[g]+" && d0 >= 0) {\n\n              offsetX = int(mod(float(blockIndex), "+u+".) * "+i+". - "+f+".);\n              d1 = offsetX + "+c+" * (int(mod(float(pos), "+d+".) / "+o+".));\n\n              if(d1 < "+e[y]+" && d1 >= 0) {\n\n                ch = int(mod(float(pos), "+o+".));\n\n                if ("+m+") {\n                  innerDims = vec2(d1, ch);\n                  result["+(2*b+w)+"] = getChannel(\n                    getA(d0, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                } else {\n                  innerDims = vec2(d0, d1);\n                  result["+(2*b+w)+"] = getChannel(\n                    getA(ch, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                }\n              }\n            }\n          }\n        ";this.userCode="\n      void main() {\n        ivec2 rc = getOutputCoords();\n\n        vec4 result = vec4(0);\n\n        int blockIndex, pos, offsetY, d0, offsetX, d1, ch;\n        vec2 innerDims;\n\n        "+x+"\n\n        "+v.output+" = result;\n      }\n    "},Na=function(t,e,n,r,o){this.variableNames=["x"],this.outputShape=[];var i,a=e,s=t[3]-1;this.outputShape=t;var u="float("+n+") + float("+r+") * sum";i=.5===o?"inversesqrt("+u+")":1===o?"1.0/("+u+")":"exp(log("+u+") * float(-"+o+"));",this.userCode="\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n        int d = coords[3];\n        float x = getX(b, r, c, d);\n        float sum = 0.0;\n        for (int j = -"+a+"; j <= "+a+"; j++) {\n          int idx = d + j;\n          if (idx >= 0 && idx <=  "+s+") {\n            float z = getX(b, r, c, idx);\n            sum += z * z;\n          }\n        }\n        float val = x * "+i+";\n        setOutput(val);\n      }\n    "},Ma=function(t,e,n,r,o){this.variableNames=["inputImage","outputImage","dy"],this.outputShape=[],this.outputShape=t,this.depth=t[3],this.depthRadius=e,this.bias=n,this.alpha=r,this.beta=o,this.userCode="\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n\n        float result = 0.0;\n        for (int d = 0; d < "+this.depth+"; ++d) {\n          int depthBegin = int(max(0.0, float(d - "+e+")));\n          int depthEnd = int(min(float("+this.depth+"),\n              float(d + "+e+" + 1)));\n\n          const int MIN_DEPTH_BEGIN = 0;\n          const int MAX_DEPTH_END = "+this.depth+";\n\n          float norm = 0.0;\n          for (int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k) {\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd) {\n              norm += getInputImage(b, r, c, k) * getInputImage(b, r, c, k);\n            }\n            else {\n              break;\n            }\n          }\n\n          norm = float("+r+") * norm + float("+n+");\n\n          for(int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k){\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd){\n              float dyi = -2.0 * float("+r+")\n                * float("+o+")\n                * getInputImage(b ,r ,c, k) * getOutputImage(b, r, c, d)\n                / norm;\n              if (k == d) {\n                dyi += pow(norm, -1.0 * "+o+");\n              }\n              if (k == coords[3]) {\n                dyi *= getDy(b, r, c, d);\n                result += dyi;\n              }\n            }\n            else {\n              break;\n            }\n          }\n      }\n      setOutput(result);\n      }\n    "},Oa=function(t,e,n,r,o){this.variableNames=["x"],this.outputShape=[],this.packedInputs=!0,this.packedOutput=!0;var i,a=e,s=t[3]-1;this.outputShape=t;var u="float("+n+") + float("+r+") * sum";i=.5===o?"inversesqrt("+u+")":1===o?"1.0/("+u+")":"exp(log("+u+") * float(-"+o+"));",this.userCode="\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords.x;\n        int r = coords.y;\n        int c = coords.z;\n        int d = coords.w;\n\n        bool hasNextCol = d < "+this.outputShape[3]+";\n        bool hasNextRow = c < "+this.outputShape[2]+";\n\n        vec4 sum = vec4(0.);\n        vec4 xFragAtOutputCoords = getX(b, r, c, d);\n\n        vec4 xAtOutputCoords = vec4(\n          getChannel(xFragAtOutputCoords, vec2(c, d)),\n          hasNextCol ?\n            getChannel(xFragAtOutputCoords, vec2(c, d + 1)) : 0.0,\n          hasNextRow ?\n            getChannel(xFragAtOutputCoords , vec2(c + 1, d)) : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getChannel(xFragAtOutputCoords, vec2(c + 1, d + 1)) : 0.0\n        );\n\n        int firstChannel = d - "+a+";\n        vec2 cache = vec2(0.);\n        if(firstChannel >= 0){\n          vec4 firstChannelFrag = getX(b, r, c, firstChannel);\n          cache.x = getChannel(firstChannelFrag, vec2(c, firstChannel));\n            if(hasNextRow){\n              cache.y = getChannel(firstChannelFrag, vec2(c + 1, firstChannel));\n            }\n        }\n\n        ivec2 depth = ivec2(d, d + 1);\n        for (int j = - "+a+"; j <= "+a+"; j++) {\n          ivec2 idx = depth + j;\n          bvec2 aboveLowerBound = greaterThanEqual(idx, ivec2(0));\n          bvec2 belowUpperBound = lessThanEqual(idx, ivec2("+s+"));\n\n          bool depthInRange = aboveLowerBound.x && belowUpperBound.x;\n          bool depthPlusOneInRange = aboveLowerBound.y && belowUpperBound.y;\n\n          if(depthInRange || depthPlusOneInRange){\n            vec4 z = vec4(0.);\n            vec4 xFragAtCurrentDepth;\n            z.xz = cache.xy;\n            if(depthPlusOneInRange && hasNextCol){\n              xFragAtCurrentDepth = idx.y != d ?\n                getX(b, r, c, idx.y) : xFragAtOutputCoords;\n              z.y = getChannel(xFragAtCurrentDepth, vec2(c, idx.y));\n              if(hasNextRow){\n                z.w = getChannel(xFragAtCurrentDepth, vec2(c + 1, idx.y));\n              }\n            }\n            cache.xy = z.yw;\n            sum += z * z;\n          }\n        }\n        vec4 result = xAtOutputCoords * "+i+";\n        setOutput(result);\n      }\n    "},Pa=function(t){this.variableNames=["dy","maxPos"],this.outputShape=t.inShape;var e=t.strideHeight,n=t.strideWidth,r=t.dilationHeight,o=t.effectiveFilterHeight,i=t.effectiveFilterWidth,a=o-1-t.padInfo.top,s=i-1-t.padInfo.left,u=o*i-1;this.userCode="\n      const ivec2 pads = ivec2("+a+", "+s+");\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < "+o+";\n          wR += "+r+") {\n          float dyR = float(dyRCorner + wR) / "+e+".0;\n\n          if (dyR < 0.0 || dyR >= "+t.outHeight+".0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < "+i+"; wC++) {\n            float dyC = float(dyCCorner + wC) / "+n+".0;\n\n            if (dyC < 0.0 || dyC >= "+t.outWidth+".0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n            int maxPosValue = "+u+" - int(getMaxPos(b, idyR, idyC, d));\n\n            // Get the current value, check it against the value from the\n            // position matrix.\n            int curPosValue = wR * "+i+" + wC;\n            float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n            dotProd += dyValue * mask;\n          }\n        }\n        setOutput(dotProd);\n      }\n    "},Ba=function(t){this.variableNames=["dy","maxPos"],this.outputShape=t.inShape;var e=t.strideDepth,n=t.strideHeight,r=t.strideWidth,o=t.dilationDepth,i=t.dilationHeight,a=t.dilationWidth,s=t.effectiveFilterDepth,u=t.effectiveFilterHeight,c=t.effectiveFilterWidth,l=s-1-t.padInfo.front,h=u-1-t.padInfo.top,f=c-1-t.padInfo.left,p=s*u*c-1;this.userCode="\n      const ivec3 pads = ivec3("+l+", "+h+", "+f+");\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, ch) with pos mask(:, :, :, d) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < "+s+";\n           wD += "+o+") {\n          float dyD = float(dyDCorner + wD) / "+e+".0;\n\n          if (dyD < 0.0 || dyD >= "+t.outDepth+".0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < "+u+";\n              wR += "+i+") {\n            float dyR = float(dyRCorner + wR) / "+n+".0;\n\n            if (dyR < 0.0 || dyR >= "+t.outHeight+".0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < "+c+";\n                wC += "+a+") {\n              float dyC = float(dyCCorner + wC) / "+r+".0;\n\n              if (dyC < 0.0 || dyC >= "+t.outWidth+".0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n              int maxPosValue = "+p+" -\n                  int(getMaxPos(batch, idyD, idyR, idyC, ch));\n\n              // Get the current value, check it against the value from the\n              // position matrix.\n              int curPosValue =\n                  wD * "+u+" * "+c+" +\n                  wR * "+c+" + wC;\n              float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n              dotProd += dyValue * mask;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    "},La=function(t,e,n,r,o,i,a){void 0===n&&(n=!1),void 0===r&&(r=!1),void 0===o&&(o=!1),void 0===i&&(i=null),void 0===a&&(a=!1),this.variableNames=["matrixA","matrixB"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e;var s=n?t[1]:t[2],u=Math.ceil(s/2),c=n?"i * 2, rc.y":"rc.y, i * 2",l=r?"rc.z, i * 2":"i * 2, rc.z",h=n?["a.xxyy","a.zzww"]:["a.xxzz","a.yyww"],f=r?["b.xzxz","b.ywyw"]:["b.xyxy","b.zwzw"],p="",d="";i&&(p=a?"vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          "+i+"\n        }":"vec4 activation(vec4 x) {\n          "+i+"\n        }",d="result = activation(result);");var v=o?"result += getBiasAtOutCoords();":"";o&&this.variableNames.push("bias"),a&&this.variableNames.push("preluActivationWeights"),this.userCode="\n      "+p+"\n\n      const float sharedDimension = "+u+".0;\n\n      vec4 dot2x2ARowBCol(ivec3 rc) {\n        vec4 result = vec4(0);\n        for (int i = 0; i < "+u+"; i++) {\n          vec4 a = getMatrixA(rc.x, "+c+");\n          vec4 b = getMatrixB(rc.x, "+l+");\n\n          // These swizzled products need to be separately added.\n          // See: https://github.com/tensorflow/tfjs/issues/1735\n          result += ("+h[0]+" * "+f[0]+");\n          result += ("+h[1]+" * "+f[1]+");\n        }\n        return result;\n      }\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n        vec4 result = dot2x2ARowBCol(rc);\n\n        "+v+"\n\n        "+d+"\n\n        setOutput(result);\n      }\n    "},Wa=function(){function t(t,e,n){this.variableNames=["probs"],this.outputShape=[t,n],this.userCode="\n      uniform float seed;\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n\n        float r = random(seed);\n        float cdf = 0.0;\n\n        for (int i = 0; i < "+(e-1)+"; i++) {\n          cdf += getProbs(batch, i);\n\n          if (r < cdf) {\n            setOutput(float(i));\n            return;\n          }\n        }\n\n        // If no other event happened, last event happened.\n        setOutput(float("+(e-1)+"));\n      }\n    "}return t.prototype.getCustomSetupFunc=function(t){var e=this;return function(n,r){null==e.seedLoc&&(e.seedLoc=n.getUniformLocation(r,"seed")),n.gl.uniform1f(e.seedLoc,t)}},t}(),za=function(t,e,n,r){this.variableNames=["indices"],this.outputShape=[t,e],this.userCode="\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int index = round(getIndices(coords.x));\n        setOutput(mix(float("+r+"), float("+n+"),\n                      float(index == coords.y)));\n      }\n    "},Ua=function(t){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.outputShape=t;var e=t.length;if(0===e)this.userCode="\n        void main() {\n          setOutput(vec4(getA(), 0., 0., 0.));\n        }\n      ";else{var n=ii("rc",e),r=xi(e),o=function(t,e,n){if(1===t)return"rc > "+e[0];for(var r="",o=t-2;o<t;o++)r+=n[o]+" >= "+e[o],o<t-1&&(r+="||");return r}(e,t,n),i=function(t,e,n,r){if(1===t)return"";var o=r.slice(-2);return"\n    int r = "+o[0]+";\n    int c = "+o[1]+";\n    int rp1 = r + 1;\n    int cp1 = c + 1;\n\n    bool cEdge = cp1 >= "+e+";\n    bool rEdge = rp1 >= "+n+";\n  "}(e,t[t.length-1],t[t.length-2],n),a=function(t,e){var n=t.length,r=function(t,e){for(var n=[],r=0;r<=1;r++)for(var o=0;o<=1;o++){for(var i=(0===r?"r":"rp1")+", "+(0===o?"c":"cp1"),a=2;a<t;a++)i=e[e.length-1-a]+","+i;n.push(i)}return n}(n,e);return 1===n?"getA(rc),\n            rc + 1 >= "+t[0]+" ? 0. : getA(rc + 1),\n            0, 0":"getA("+r[0]+"),\n          cEdge ? 0. : getA("+r[1]+"),\n          rEdge ? 0. : getA("+r[2]+"),\n          rEdge || cEdge ? 0. : getA("+r[3]+")"}(t,n);this.userCode="\n        void main() {\n          "+r+" rc = getOutputCoords();\n\n          if("+o+") {\n            setOutput(vec4(0));\n          } else {\n            "+i+"\n\n            setOutput(vec4("+a+"));\n          }\n        }\n      "}},Va=function(t,e,n){this.variableNames=["x"],this.outputShape=e.map((function(e,n){return e[0]+t[n]+e[1]}));var r=t.length,o=xi(r),i=e.map((function(t){return t[0]})).join(","),a=e.map((function(e,n){return e[0]+t[n]})).join(","),s=["coords[0]","coords[1]","coords[2]","coords[3]"].slice(0,r);this.userCode=1!==r?"\n      "+o+" start = "+o+"("+i+");\n      "+o+" end = "+o+"("+a+");\n\n      void main() {\n        "+o+" outC = getOutputCoords();\n        if (any(lessThan(outC, start)) || any(greaterThanEqual(outC, end))) {\n          setOutput(float("+n+"));\n        } else {\n          "+o+" coords = outC - start;\n          setOutput(getX("+s+"));\n        }\n      }\n    ":"\n        int start = "+i+";\n        int end = "+a+";\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start || outC >= end) {\n            setOutput(float("+n+"));\n          } else {\n            setOutput(getX(outC - start));\n          }\n        }\n      "},Ga=function(t,e,n){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e.map((function(e,n){return e[0]+t[n]+e[1]}));for(var r=t.length,o=xi(r),i=e.map((function(t){return t[0]})).join(","),a=e.map((function(e,n){return e[0]+t[n]})).join(","),s=ii("rc",r),u=ii("source",r),c=s[r-1]+" < "+this.outputShape[r-1],l=1===r?"source":"vec2("+u.slice(-2).join()+")",h=[o+" rc = outputLoc;",s[r-1]+" += 1;\n       if("+c+") {\n      ",1===r?"":"}\n       rc = outputLoc;\n       "+s[r-2]+" += 1;\n       if("+s[r-2]+" < "+this.outputShape[r-2]+") {",1===r?"":"  "+s[r-1]+" += 1;\n         if("+c+") {"],f=1===r?"rc < start || rc >= end":"any(lessThan(rc, start)) || any(greaterThanEqual(rc, end))",p="",d=0,v=1===r?2:4;d<v;d++)p+="\n        "+h[d]+"\n        if ("+f+") {\n          result["+d+"] = float("+n+");\n        } else {\n          "+o+" source = rc - start;\n          result["+d+"] = getChannel(getX("+u.join()+"), "+l+");\n        }\n      ";p+=1===r?"} ":"}}",this.userCode="\n      const "+o+" start = "+o+"("+i+");\n      const "+o+" end = "+o+"("+a+");\n\n      void main() {\n        "+o+" outputLoc = getOutputCoords();\n        vec4 result = vec4(0.);\n        "+p+"\n        setOutput(result);\n      }\n    "},Ha=function(t,e,n){if(this.variableNames=["x"],"avg"===e&&n)throw new Error("Cannot compute positions for average pool.");var r=t.filterWidth,o=t.strideHeight,i=t.strideWidth,a=t.dilationHeight,s=t.dilationWidth,u=t.effectiveFilterHeight,c=t.effectiveFilterWidth,l=t.padInfo.top,h=t.padInfo.left;this.outputShape=t.outShape;var f="avg"===e,p="0.0";if(f||(p="-1.0 / 1e-20"),n)this.userCode="\n        const ivec2 strides = ivec2("+o+", "+i+");\n        const ivec2 pads = ivec2("+l+", "+h+");\n\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int batch = coords[0];\n          int d = coords[3];\n\n          ivec2 xRCCorner = coords.yz * strides - pads;\n          int xRCorner = xRCCorner.x;\n          int xCCorner = xRCCorner.y;\n\n          // max/min x(?, ?, d) to get y(yR, yC, d).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n          float avgValue = 0.0;\n\n          for (int wR = 0; wR < "+u+";\n              wR += "+a+") {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= "+t.inHeight+") {\n              continue;\n            }\n\n            for (int wC = 0; wC < "+c+";\n                wC += "+s+") {\n              int xC = xCCorner + wC;\n\n              if (xC < 0 || xC >= "+t.inWidth+") {\n                continue;\n              }\n\n              float value = getX(batch, xR, xC, d);\n\n              // If a min / max value has already been found, use it. If not,\n              // use the current value.\n              float currMinMaxValue = mix(\n                  value, minMaxValue, minMaxValueFound);\n              if (value >= currMinMaxValue) {\n                minMaxValue = value;\n                minMaxValueFound = 1.0;\n                minMaxPosition = wR * "+c+" + wC;\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      ";else{var d=e+"("+e+"("+e+"(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])";"avg"===e&&(d="avgValue / count");var v=4*Math.floor(r/4),m=r%4,g="\n      if ("+f+") {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = max(values, minMaxValue);\n      }\n    ";this.userCode="\n      const ivec2 strides = ivec2("+o+", "+i+");\n      const ivec2 pads = ivec2("+l+", "+h+");\n      const float initializationValue = "+p+";\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xR, int xC, int d) {\n        if (xC < 0 || xC >= "+t.inWidth+") {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xR, xC, d);\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d = coords[3];\n\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // max/min x(?, ?, d) to get y(yR, yC, d).\n        // ? = to be determined\n        vec4 minMaxValue = vec4("+p+");\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wR = 0; wR < "+u+";\n            wR += "+a+") {\n          int xR = xRCorner + wR;\n\n          if (xR < 0 || xR >= "+t.inHeight+") {\n            continue;\n          }\n\n          for (int wC = 0; wC < "+v+"; wC += 4) {\n            int xC = xCCorner + wC * "+s+";\n\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + "+s+", d),\n              getValue(batch, xR, xC + 2 * "+s+", d),\n              getValue(batch, xR, xC + 3 * "+s+", d)\n            );\n\n            "+g+"\n          }\n\n          int xC = xCCorner + "+v+";\n          if ("+(1===m)+") {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              initializationValue,\n              initializationValue,\n              initializationValue\n            );\n\n            "+g+"\n          } else if ("+(2===m)+") {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + "+s+", d),\n              initializationValue,\n              initializationValue\n            );\n\n            "+g+"\n          } else if ("+(3===m)+") {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + "+s+", d),\n              getValue(batch, xR, xC + 2 * "+s+", d),\n              initializationValue\n            );\n\n            "+g+"\n          }\n        }\n        setOutput("+d+");\n      }\n    "}},ja=function(t,e,n){if(this.variableNames=["x"],"avg"===e&&n)throw new Error("Cannot compute positions for average pool.");var r=t.filterWidth,o=t.strideDepth,i=t.strideHeight,a=t.strideWidth,s=t.dilationDepth,u=t.dilationHeight,c=t.dilationWidth,l=t.effectiveFilterDepth,h=t.effectiveFilterHeight,f=t.effectiveFilterWidth,p=t.padInfo.front,d=t.padInfo.top,v=t.padInfo.left;this.outputShape=t.outShape;var m="avg"===e,g="0.0";if(m||(g="-1.0 / 1e-20"),n)this.userCode="\n        const ivec3 strides =\n            ivec3("+o+", "+i+", "+a+");\n        const ivec3 pads = ivec3("+p+", "+d+", "+v+");\n\n        void main() {\n          ivec5 coords = getOutputCoords();\n          int batch = coords.x;\n          int ch = coords.u;\n\n          ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n          int xDCorner = xCorner.x;\n          int xRCorner = xCorner.y;\n          int xCCorner = xCorner.z;\n\n          // max/min x(?, ?, ?, ch) to get y(yD, yR, yC, ch).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n\n          for (int wD = 0; wD < "+l+";\n              wD += "+s+") {\n            int xD = xDCorner + wD;\n\n            if (xD < 0 || xD >= "+t.inDepth+") {\n              continue;\n            }\n\n            for (int wR = 0; wR < "+h+";\n                wR += "+u+") {\n              int xR = xRCorner + wR;\n\n              if (xR < 0 || xR >= "+t.inHeight+") {\n                continue;\n              }\n\n              for (int wC = 0; wC < "+f+";\n                  wC += "+c+") {\n                int xC = xCCorner + wC;\n\n                if (xC < 0 || xC >= "+t.inWidth+") {\n                  continue;\n                }\n\n                float value = getX(batch, xD, xR, xC, ch);\n\n                // If a min / max value has already been found, use it. If not,\n                // use the current value.\n                float currMinMaxValue = mix(\n                    value, minMaxValue, minMaxValueFound);\n                if (value >= currMinMaxValue) {\n                  minMaxValue = value;\n                  minMaxValueFound = 1.0;\n                  minMaxPosition =\n                      wD * "+h+" * "+f+" +\n                      wR * "+f+" + wC;;\n                }\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      ";else{var y=e+"("+e+"("+e+"(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])";"avg"===e&&(y="avgValue / count");var x=4*Math.floor(r/4),b=r%4,w="\n      if ("+m+") {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = max(values, minMaxValue);\n      }\n    ";this.userCode="\n      const ivec3 strides =\n        ivec3("+o+", "+i+", "+a+");\n      const ivec3 pads = ivec3("+p+", "+d+", "+v+");\n      const float initializationValue = "+g+";\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xD, int xR, int xC, int ch) {\n        if (xC < 0 || xC >= "+t.inWidth+") {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xD, xR, xC, ch);\n      }\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xDCorner = xCorner.x;\n        int xRCorner = xCorner.y;\n        int xCCorner = xCorner.z;\n\n        // max/min x(?, ?, ?, d) to get y(yD, yR, yC, ch).\n        // ? = to be determined\n        vec4 minMaxValue = vec4("+g+");\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wD = 0; wD < "+l+";\n            wD += "+s+") {\n          int xD = xDCorner + wD;\n\n          if (xD < 0 || xD >= "+t.inDepth+") {\n            continue;\n          }\n\n          for (int wR = 0; wR < "+h+";\n            wR += "+u+") {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= "+t.inHeight+") {\n              continue;\n            }\n\n            for (int wC = 0; wC < "+x+"; wC += 4) {\n              int xC = xCCorner + wC * "+c+";\n\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + "+c+", ch),\n                getValue(batch, xD, xR, xC + 2 * "+c+", ch),\n                getValue(batch, xD, xR, xC + 3 * "+c+", ch)\n              );\n\n              "+w+"\n            }\n\n            int xC = xCCorner + "+x+";\n            if ("+(1===b)+") {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                initializationValue,\n                initializationValue,\n                initializationValue\n              );\n\n              "+w+"\n            } else if ("+(2===b)+") {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + "+c+", ch),\n                initializationValue,\n                initializationValue\n              );\n\n              "+w+"\n            } else if ("+(3===b)+") {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + "+c+", ch),\n                getValue(batch, xD, xR, xC + 2 * "+c+", ch),\n                initializationValue\n              );\n\n              "+w+"\n            }\n          }\n          setOutput("+y+");\n        }\n      }\n    "}},qa=function(t,e){this.variableNames=["x"];var n=t.windowSize,r=t.batchSize,o=t.inSize,i=Math.ceil(o/n);this.outputShape=[r,i];var a="0.0",s="";"prod"===e?a="1.0":"min"===e?(a="1.0 / 1e-20",s="min"):"max"===e&&(a="-1.0 / 1e-20",s="max");var u=e+"("+e+"("+e+"(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])";"sum"===e?u="sumValue":"prod"===e?u="prodValue":"all"===e?u="allValue":"any"===e&&(u="anyValue");var c=4*Math.floor(n/4),l=n%4,h="\n      if ("+("sum"===e)+") {\n        sumValue += dot(values, ones);\n      } else if ("+("prod"===e)+") {\n        vec2 tmp = vec2(values[0], values[1]) * vec2(values[2], values[3]);\n        prodValue *= tmp[0] * tmp[1];\n      } else {\n        minMaxValue = "+s+"(values, minMaxValue);\n      }\n    ",f="vec4";"all"===e?(a="1.0",h="\n        bool reducedAllValue = all(values);\n        float floatedReducedAllValue = float(reducedAllValue);\n        allValue = float(allValue >= 1.0 && floatedReducedAllValue >= 1.0);\n      ",f="bvec4"):"any"===e&&(a="0.0",h="\n        bool reducedAnyValue = any(values);\n        float floatedReducedAnyValue = float(reducedAnyValue);\n        anyValue = float(anyValue >= 1.0 || floatedReducedAnyValue >= 1.0);\n      ",f="bvec4");var p="";o%n>0&&(p="\n        if (inIdx < 0 || inIdx >= "+o+") {\n          return initializationValue;\n        }\n      "),this.userCode="\n      const float initializationValue = "+a+";\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        "+p+"\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * "+n+";\n\n        vec4 minMaxValue = vec4("+a+");\n        float prodValue = 1.0;\n        float sumValue = 0.0;\n        float allValue = 1.0;\n        float anyValue = 0.0;\n\n        for (int i = 0; i < "+c+"; i += 4) {\n          int inIdx = inOffset + i;\n          "+f+" values = "+f+"(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          "+h+"\n        }\n\n        int inIdx = inOffset + "+c+";\n        if ("+(1===l)+") {\n          "+f+" values = "+f+"(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          "+h+"\n        } else if ("+(2===l)+") {\n          "+f+" values = "+f+"(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          "+h+"\n        } else if ("+(3===l)+") {\n          "+f+" values = "+f+"(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          "+h+"\n        }\n        setOutput("+u+");\n      }\n    "},Ka=function(t,e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t;for(var n="",r=0;r<4;r++){var o="thisRC = rc;";r%2==1&&(o+="thisRC.z += 1;"),r>1&&(o+="thisRC.y += 1;"),n+="\n        "+o+"\n        "+(r>0?"if(thisRC.y < rows && thisRC.z < cols){":"")+"\n          int flatIndex = getFlatIndex(thisRC);\n\n          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flatIndex);\n          vec2 inputRCInnerDims = vec2(float(inputRC.y),float(inputRC.z));\n\n          result["+r+"] =\n            getChannel(getA(inputRC.x, inputRC.y, inputRC.z), inputRCInnerDims);\n        "+(r>0?"}":"")+"\n      "}this.userCode="\n      \n    ivec3 inputCoordsFromReshapedOutCoords(int index) {\n      "+si(["r","c","d"],e)+"\n      return ivec3(r, c, d);\n    }\n  \n      "+ui(t)+"\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n\n        vec4 result = vec4(0.);\n\n        ivec3 thisRC;\n        int rows = "+t[1]+";\n        int cols = "+t[2]+";\n\n        "+n+"\n\n        setOutput(result);\n      }\n    "},Xa=function(t,e,n){this.variableNames=["dy"],this.outputShape=[],this.outputShape=e.shape;var r=e.shape,o=r[1],i=r[2],a=t.shape,s=a[1],u=a[2],c=[n&&s>1?o-1:o,n&&u>1?i-1:i],l=[n&&s>1?s-1:s,n&&u>1?u-1:u],h=c[0]/l[0],f=c[1]/l[1],p=1/h,d=1/f,v=2*Math.ceil(p)+2,m=2*Math.ceil(d)+2;this.userCode="\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float("+h+");\n        const float widthScale = float("+f+");\n\n        const float invHeightScale = float("+p+");\n        const float invWidthScale = float("+d+");\n\n        const int winHeight = int("+v+");\n        const int winWidth = int("+m+");\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(startRLerp - float(winHeight / 2));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(startCLerp - float(winWidth / 2));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= "+s+") {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= "+u+") {\n              continue;\n            }\n\n            float dxR = float(dyR) * heightScale;\n            int topDxRIndex = int(floor(dxR));\n            int bottomDxRIndex = int(min(ceil(dxR), "+(o-1)+".0));\n            float dxRLerp = dxR - float(topDxRIndex);\n            float inverseDxRLerp = 1.0 - dxRLerp;\n\n            float dxC = float(dyC) * widthScale;\n            int leftDxCIndex = int(floor(dxC));\n            int rightDxCIndex = int(min(ceil(dxC), "+(i-1)+".0));\n            float dxCLerp = dxC - float(leftDxCIndex);\n            float inverseDxCLerp = 1.0 - dxCLerp;\n\n            if (r == topDxRIndex && c == leftDxCIndex) {\n              // topLeft\n              accumulator +=\n                getDy(b, dyR, dyC, d) * inverseDxRLerp * inverseDxCLerp;\n            }\n\n            if (r == topDxRIndex && c == rightDxCIndex) {\n              // topRight\n              accumulator += getDy(b, dyR, dyC, d) * inverseDxRLerp * dxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == leftDxCIndex) {\n              // bottomLeft\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * inverseDxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == rightDxCIndex) {\n              // bottomRight\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * dxCLerp;\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    "},Ya=function(t,e,n,r){this.variableNames=["A"],this.outputShape=[];var o=t[0],i=t[1],a=t[2],s=t[3];this.outputShape=[o,e,n,s];var u=[r&&e>1?i-1:i,r&&n>1?a-1:a],c=[r&&e>1?e-1:e,r&&n>1?n-1:n];this.userCode="\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          "+u[0]/c[0]+",\n          "+u[1]/c[1]+");\n      const vec2 inputShapeRC = vec2("+i+".0, "+a+".0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = vec2(yRC) * effectiveInputOverOutputRatioRC;\n\n        // Compute the four integer indices.\n        ivec2 sourceFloorRC = ivec2(sourceFracIndexRC);\n        ivec2 sourceCeilRC = ivec2(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        float topLeft = getA(b, sourceFloorRC.x, sourceFloorRC.y, d);\n        float bottomLeft = getA(b, sourceCeilRC.x, sourceFloorRC.y, d);\n        float topRight = getA(b, sourceFloorRC.x, sourceCeilRC.y, d);\n        float bottomRight = getA(b, sourceCeilRC.x, sourceCeilRC.y, d);\n\n        vec2 fracRC = sourceFracIndexRC - vec2(sourceFloorRC);\n\n        float top = topLeft + (topRight - topLeft) * fracRC.y;\n        float bottom = bottomLeft + (bottomRight - bottomLeft) * fracRC.y;\n        float newValue = top + (bottom - top) * fracRC.x;\n\n        setOutput(newValue);\n      }\n    "},$a=function(t,e,n,r){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[];var o=t[0],i=t[1],a=t[2],s=t[3];this.outputShape=[o,e,n,s];var u=[r&&e>1?i-1:i,r&&n>1?a-1:a],c=[r&&e>1?e-1:e,r&&n>1?n-1:n];this.userCode="\n      const vec3 effectiveInputOverOutputRatioRC = vec3(\n          "+u[0]/c[0]+",\n          "+u[1]/c[1]+",\n          "+u[1]/c[1]+");\n      const vec3 inputShapeRC = vec3("+i+".0, "+a+".0,\n                                     "+a+".0);\n\n      float getAValue(int b, int r, int c, int d) {\n        return getChannel(getA(b, r, c, d), vec2(c, d));\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        // Calculate values for next column in yRC.z.\n        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);\n\n        // Fractional source index.\n        vec3 sourceFracIndexRC = vec3(yRC) * effectiveInputOverOutputRatioRC;\n\n        // Compute the four integer indices.\n        ivec3 sourceFloorRC = ivec3(sourceFracIndexRC);\n        ivec3 sourceCeilRC = ivec3(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        // Should we calculate next column and row elements in 2x2 packed cell.\n        bool hasNextCol = d < "+(s-1)+";\n        bool hasNextRow = coords.z < "+(n-1)+";\n\n        // In parallel, construct four corners for all four components in\n        // packed 2x2 cell.\n        vec4 topLeft = vec4(\n          getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 bottomLeft = vec4(\n          getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 topRight = vec4(\n          getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec4 bottomRight = vec4(\n          getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec3 fracRC = sourceFracIndexRC - vec3(sourceFloorRC);\n\n        vec4 top = mix(topLeft, topRight, fracRC.yyzz);\n        vec4 bottom = mix(bottomLeft, bottomRight, fracRC.yyzz);\n        vec4 newValue = mix(top, bottom, fracRC.x);\n\n        setOutput(newValue);\n      }\n    "},Ja=function(t,e,n){this.variableNames=["dy"],this.outputShape=[],this.outputShape=e.shape;var r=e.shape,o=r[1],i=r[2],a=t.shape,s=a[1],u=a[2],c=[n&&s>1?o-1:o,n&&u>1?i-1:i],l=[n&&s>1?s-1:s,n&&u>1?u-1:u],h=c[0]/l[0],f=c[1]/l[1],p=1/h,d=1/f,v=2*Math.ceil(p)+2,m=2*Math.ceil(d)+2;this.userCode="\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float("+h+");\n        const float widthScale = float("+f+");\n\n        const float invHeightScale = float("+p+");\n        const float invWidthScale = float("+d+");\n\n        const int winHeight = int("+v+");\n        const int winWidth = int("+m+");\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(floor(startRLerp - float(winHeight / 2)));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(floor(startCLerp - float(winWidth / 2)));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= "+s+") {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= "+u+") {\n              continue;\n            }\n\n            float sourceFracRow =\n              float("+c[0]+") *\n                (float(dyR) / float("+l[0]+"));\n\n            float sourceFracCol =\n                float("+c[1]+") *\n                  (float(dyC) / float("+l[1]+"));\n\n            int sourceNearestRow = int(min(\n                float(int("+o+") - 1),\n                "+n+" ? float(round(sourceFracRow)) :\n                                  float(floor(sourceFracRow))));\n\n            int sourceNearestCol = int(min(\n                float(int("+i+") - 1),\n                "+n+" ? float(round(sourceFracCol)) :\n                                  float(floor(sourceFracCol))));\n\n            if (r == sourceNearestRow && c == sourceNearestCol) {\n              accumulator += getDy(b, dyR, dyC, d);\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    "},Qa=function(t,e,n,r){this.variableNames=["A"],this.outputShape=[];var o=t[0],i=t[1],a=t[2],s=t[3];this.outputShape=[o,e,n,s];var u=[r&&e>1?i-1:i,r&&n>1?a-1:a],c=[r&&e>1?e-1:e,r&&n>1?n-1:n],l=r?"0.5":"0.0";this.userCode="\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          "+u[0]/c[0]+",\n          "+u[1]/c[1]+");\n      const vec2 inputShapeRC = vec2("+i+".0, "+a+".0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = vec2(yRC) * effectiveInputOverOutputRatioRC;\n\n        // Compute the coordinators of nearest neighbor point.\n        ivec2 sourceNearestRC = ivec2(\n          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + "+l+")));\n\n        float newValue = getA(b, sourceNearestRC.x, sourceNearestRC.y, d);\n\n        setOutput(newValue);\n      }\n    "},Za=function(t,e){this.variableNames=["x"];var n=t.length;if(n>4)throw new Error("WebGL backend: Reverse of rank-"+n+" tensor is not yet supported");if(this.outputShape=t,1!==n){var r=t.map((function(n,r){return function(n){return-1!==e.indexOf(n)&&1!==t[n]?t[n]+" - coords["+n+"] - 1":"coords["+n+"]"}(r)})).join(","),o=xi(n);this.userCode="\n      void main() {\n        "+o+" coords = getOutputCoords();\n        setOutput(getX("+r+"));\n      }\n    "}else this.userCode="\n        void main() {\n          int coord = getOutputCoords();\n          setOutput(getX("+t[0]+" - coord - 1));\n        }\n      "},ts=function(t,e){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0;var n=t.length;if(n>4)throw new Error("WebGL backend: Reverse of rank-"+n+" tensor is not yet supported");this.outputShape=t;var r=ii("rc",n),o=r[n-1]+" + 1 < "+this.outputShape[n-1],i=r[n-2]+" + 1 < "+this.outputShape[n-2],a=xi(n);function s(n){var r=t.map((function(r,o){return function(n,r){return-1!==e.indexOf(n)&&1!==t[n]?t[n]+" - "+r[n]+" - 1":""+r[n]}(o,n)}));return"getChannel(getX("+r.join(",")+"), vec2("+r.slice(-2).join(",")+"))"}this.userCode=1===n?"\n        void main(){\n          int rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = getChannel(getX("+t[0]+" - rc - 1),\n            "+t[0]+" - rc - 1);\n          if("+o+"){\n              result.g = getChannel(getX("+t[0]+" - (rc  + 1) - 1),\n                "+t[0]+" - (rc  + 1) - 1);\n          }\n          setOutput(result);\n        }\n      ":"\n        void main() {\n          "+a+" rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = "+function(t){return s(t)}(r.slice())+";\n          if("+o+"){\n            result.g = "+function(t){return t[n-1]="("+t[n-1]+" + 1)",s(t)}(r.slice())+";\n          }\n          if("+i+") {\n            result.b = "+function(t){return t[n-2]="("+t[n-2]+" + 1)",s(t)}(r.slice())+";\n            if("+o+") {\n              result.a = "+function(t){return t[n-1]="("+t[n-1]+" + 1)",t[n-2]="("+t[n-2]+" + 1)",s(t)}(r.slice())+";\n            }\n          }\n          setOutput(result);\n        }\n    "},es=function(t,e,n,r,o,i,a){void 0===a&&(a=!0),this.variableNames=["updates","indices","defaultValue"],this.outputShape=i;var s=xi(o.length),u=xi(i.length),c="";1===n?c="i":2===n&&(c="i, j");var l="getIndices("+c+")",h="";1===r?h="i":2===r&&(h="i, coords[1]");var f="getUpdates("+h+")",p=e>1?"strides[j]":"strides";this.userCode="\n        "+s+" strides = "+s+"("+o+");\n\n        void main() {\n          "+u+" coords = getOutputCoords();\n          float sum = 0.0;\n          bool found = false;\n          for (int i = 0; i < "+t+"; i++) {\n            int flattenedIndex = 0;\n            for (int j = 0; j < "+e+"; j++) {\n              int index = round("+l+");\n              flattenedIndex += index * "+p+";\n            }\n            if (flattenedIndex == coords[0]) {\n              sum += "+f+";\n              found = true;\n            }\n          }\n          setOutput(mix(getDefaultValue(), sum, float(found)));\n        }\n      "},ns=function(t,e){this.variableNames=["x","segmentIds"];var n=t.windowSize,r=t.batchSize,o=t.inSize,i=t.numSegments,a=i*Math.ceil(o/n);this.outputShape=[r,a];var s=4*Math.floor(n/4),u=n%4,c="\n        sumValue += dot(values, segFilter);\n    ",l="";o%n>0&&(l="\n        if (inIdx < 0 || inIdx >= "+o+") {\n          return initializationValue;\n        }\n      ");var h="";o%n>0&&(h="\n        if (inIdx < 0 || inIdx >= "+o+") {\n          return -1.0;\n        }\n      "),this.userCode="\n      const float initializationValue = 0.0;\n\n      float getValue(int batch, int inIdx) {\n        "+l+"\n        return getX(batch, inIdx);\n      }\n\n      float getSegmentIdAtIndex(int inIdx) {\n        "+h+"\n        return getSegmentIds(inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = int(floor(float(outIdx) / float(\n          "+i+")) * float("+n+"));\n        int currentSeg = int(mod(float(outIdx), float("+i+")));\n\n        float sumValue = 0.0;\n\n        for (int i = 0; i < "+s+"; i += 4) {\n          int inIdx = inOffset + i;\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 3)) == currentSeg ? 1 : 0\n          );\n\n          "+c+"\n        }\n\n        int inIdx = inOffset + "+s+";\n        if ("+(1===u)+") {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          int inIdxSeg = int(getSegmentIdAtIndex(inIdx));\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            0,\n            0,\n            0\n          );\n\n          "+c+"\n        } else if ("+(2===u)+") {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n              0,\n              0\n          );\n\n          "+c+"\n        } else if ("+(3===u)+") {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            0\n          );\n\n          "+c+"\n        }\n        setOutput(sumValue);\n      }\n    "},rs=function(t,e,n){var r,o;if(this.variableNames=["c","a","b"],this.outputShape=e,n>4)throw Error("Where for rank "+n+" is not yet supported");if(1===n)o="resRC",r="resRC";else{for(var i=["resRC.x","resRC.y","resRC.z","resRC.w"],a=[],s=[],u=0;u<e.length;u++)s.push(""+i[u]),u<t&&a.push(""+i[u]);r=a.join(),o=s.join()}var c=xi(n);this.userCode="\n      void main() {\n        "+c+" resRC = getOutputCoords();\n        float cVal = getC("+r+");\n        if (cVal >= 1.0) {\n          setOutput(getA("+o+"));\n        } else {\n          setOutput(getB("+o+"));\n        }\n      }\n    "},os=function(){function t(t){this.variableNames=["source"],this.outputShape=t,this.rank=t.length;var e,n=xi(this.rank),r="uniform int start["+this.rank+"];",o=function(t){if(1===t)return"sourceLoc";if(t<=6)return is.slice(0,t).map((function(t){return"sourceLoc."+t})).join(",");throw Error("Slicing for rank "+t+" is not yet supported")}(this.rank);e="\n        "+n+" sourceLoc;\n        "+n+" coords = getOutputCoords();\n        "+t.map((function(t,e){return"sourceLoc."+is[e]+" = start["+e+"] + coords."+is[e]+";"})).join("\n")+"\n      ",this.userCode="\n      "+r+"\n      void main() {\n        "+e+"\n        setOutput(getSource("+o+"));\n      }\n    "}return t.prototype.getCustomSetupFunc=function(t){var e=this;if(t.length!==this.rank)throw Error("The rank ("+this.rank+") of the program must match the length of start ("+t.length+")");return function(n,r){null==e.startLoc&&(e.startLoc=n.getUniformLocationNoThrow(r,"start"),null==e.startLoc)||n.gl.uniform1iv(e.startLoc,t)}},t}(),is=["x","y","z","w","u","v"],as=function(){function t(t){this.variableNames=["source"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t,this.rank=t.length;var e=xi(this.rank),n=ii("coords",this.rank),r=ii("sourceLoc",this.rank),o=1===this.rank?"sourceLoc":"vec2("+r.slice(-2).join()+")",i="getChannel(getSource("+r.join()+"), "+o+")",a="\n      result.x = "+i+";\n      if (++"+n[this.rank-1]+" < "+t[this.rank-1]+") {\n        ++"+r[this.rank-1]+";\n        result.y = "+i+";\n        --"+r[this.rank-1]+";\n      }\n    ",s=1===this.rank?"":"\n      --"+n[this.rank-1]+";\n      if (++"+n[this.rank-2]+" < "+t[this.rank-2]+") {\n        ++"+r[this.rank-2]+";\n        result.z = "+i+";\n        if (++"+n[this.rank-1]+" < "+t[this.rank-1]+") {\n          ++"+r[this.rank-1]+";\n          result.w = "+i+";\n        }\n      }\n    ",u=this.rank<=4?"sourceLoc = coords +\n            "+e+"("+t.map((function(t,e){return"start["+e+"]"})).join()+");":t.map((function(t,e){return r[e]+" = "+n[e]+" + start["+e+"];"})).join("\n");this.userCode="\n      uniform int start["+this.rank+"];\n      void main() {\n        "+e+" coords = getOutputCoords();\n        "+e+" sourceLoc;\n        "+u+"\n        vec4 result = vec4(0.);\n        "+a+"\n        "+s+"\n        setOutput(result);\n      }\n    "}return t.prototype.getCustomSetupFunc=function(t){var e=this;if(t.length!==this.rank)throw Error("The rank ("+this.rank+") of the program must match the length of start ("+t.length+")");return function(n,r){null==e.startLoc&&(e.startLoc=n.getUniformLocationNoThrow(r,"start"),null==e.startLoc)||n.gl.uniform1iv(e.startLoc,t)}},t}(),ss=function(t,e,n){this.variableNames=["x"],this.outputShape=n;var r=n.length,o=xi(n.length),i=xi(n.length),a="";if(1===r)a="coords * strides + begin";else{var s=0;a=n.map((function(t,e){return s++,1===n.length?"coords * strides["+e+"] + begin["+e+"]":"coords["+(s-1)+"] * strides["+e+"] + begin["+e+"]"})).join(",")}this.userCode="\n      "+o+" begin = "+o+"("+t+");\n      "+o+" strides = "+o+"("+e+");\n\n      void main() {\n        "+i+" coords = getOutputCoords();\n        setOutput(getX("+a+"));\n      }\n    "},us=function(){function t(t){this.gpgpu=t,this.numUsedTextures=0,this.numFreeTextures=0,this.freeTextures={},this.logEnabled=!1,this.usedTextures={}}return t.prototype.acquireTexture=function(t,e,n){var r,o=cs(e,n),i=ls(t,o,n);if(i in this.freeTextures||(this.freeTextures[i]=[]),i in this.usedTextures||(this.usedTextures[i]=[]),this.freeTextures[i].length>0){this.numFreeTextures--,this.numUsedTextures++,this.log();var a=this.freeTextures[i].shift();return this.usedTextures[i].push(a),a}return this.numUsedTextures++,this.log(),o===Ht.PACKED_2X2_FLOAT32?r=this.gpgpu.createPackedMatrixTexture(t[0],t[1]):o===Ht.PACKED_2X2_FLOAT16?r=this.gpgpu.createFloat16PackedMatrixTexture(t[0],t[1]):o===Ht.UNPACKED_FLOAT32?r=this.gpgpu.createFloat32MatrixTexture(t[0],t[1]):o===Ht.UNPACKED_FLOAT16?r=this.gpgpu.createFloat16MatrixTexture(t[0],t[1]):o===Ht.PACKED_4X1_UNSIGNED_BYTE&&(r=this.gpgpu.createUnsignedBytesMatrixTexture(t[0],t[1])),this.usedTextures[i].push(r),r},t.prototype.releaseTexture=function(t,e,n,r){if(null!=this.freeTextures){var o=ls(e,cs(n,r),r);o in this.freeTextures||(this.freeTextures[o]=[]),this.freeTextures[o].push(t),this.numFreeTextures++,this.numUsedTextures--;var i=this.usedTextures[o],a=i.indexOf(t);if(a<0)throw new Error("Cannot release a texture that was never provided by this texture manager");i.splice(a,1),this.log()}},t.prototype.log=function(){if(this.logEnabled){var t=this.numFreeTextures+this.numUsedTextures;console.log("Free/Used",this.numFreeTextures+" / "+this.numUsedTextures,"("+t+")")}},t.prototype.getNumUsedTextures=function(){return this.numUsedTextures},t.prototype.getNumFreeTextures=function(){return this.numFreeTextures},t.prototype.dispose=function(){var t=this;if(null!=this.freeTextures){for(var e in this.freeTextures)this.freeTextures[e].forEach((function(e){t.gpgpu.deleteMatrixTexture(e)}));for(var e in this.usedTextures)this.usedTextures[e].forEach((function(e){t.gpgpu.deleteMatrixTexture(e)}));this.freeTextures=null,this.usedTextures=null,this.numUsedTextures=0,this.numFreeTextures=0}},t}();function cs(t,e){if(t===Gt.UPLOAD)return Ht.PACKED_2X2_FLOAT32;if(t===Gt.RENDER||null==t)return function(t){return h().getBool("WEBGL_RENDER_FLOAT32_ENABLED")?t?Ht.PACKED_2X2_FLOAT32:Ht.UNPACKED_FLOAT32:t?Ht.PACKED_2X2_FLOAT16:Ht.UNPACKED_FLOAT16}(e);if(t===Gt.DOWNLOAD||t===Gt.PIXELS)return Ht.PACKED_4X1_UNSIGNED_BYTE;throw new Error("Unknown logical texture type "+t)}function ls(t,e,n){return t[0]+"_"+t[1]+"_"+e+"_"+n}var hs=function(t,e){this.variableNames=["A"];for(var n=new Array(t.length),r=0;r<n.length;r++)n[r]=t[r]*e[r];this.outputShape=n,this.rank=n.length;var o=xi(this.rank),i=function(t){var e=t.length;if(e>5)throw Error("Tile for rank "+e+" is not yet supported");if(1===e)return"imod(resRC, "+t[0]+")";for(var n=["resRC.x","resRC.y","resRC.z","resRC.w","resRC.u"],r=[],o=0;o<t.length;o++)r.push("imod("+n[o]+", "+t[o]+")");return r.join()}(t);this.userCode="\n      void main() {\n        "+o+" resRC = getOutputCoords();\n        setOutput(getA("+i+"));\n      }\n    "},fs=function(t,e){this.variableNames=["A"];for(var n=new Array(t.length),r=0;r<n.length;r++)n[r]=t[e[r]];this.outputShape=n,this.rank=n.length;var o=xi(this.rank),i=function(t){var e=t.length;if(e>6)throw Error("Transpose for rank "+e+" is not yet supported");for(var n=["resRC.x","resRC.y","resRC.z","resRC.w","resRC.u","resRC.v"],r=new Array(e),o=0;o<t.length;o++)r[t[o]]=n[o];return r.join()}(e);this.userCode="\n    void main() {\n      "+o+" resRC = getOutputCoords();\n      setOutput(getA("+i+"));\n    }\n    "},ps=function(t,e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0;for(var n=new Array(t.length),r=0;r<n.length;r++)n[r]=t[e[r]];if(this.outputShape=n,this.rank=n.length,this.rank>6)throw Error("Packed transpose for rank "+this.rank+" is not yet supported.");var o=xi(this.rank),i=oi("rc",this.rank),a=new Array(this.rank);for(r=0;r<e.length;r++)a[e[r]]=i[r];var s="vec2("+a.slice(-2).join()+")",u="++"+i[this.rank-1]+" < "+n[this.rank-1],c="getChannel(getA("+a.join()+"), "+s+")";this.userCode="\n    void main() {\n      "+o+" rc = getOutputCoords();\n      vec4 result = vec4(0.);\n      result[0] = "+c+";\n      if("+u+") {\n        result[1] = "+c+";\n      }\n      --"+i[this.rank-1]+";\n      if(++"+i[this.rank-2]+" < "+n[this.rank-2]+") {\n        result[2] = "+c+";\n        if("+u+") {\n          result[3] = "+c+";\n        }\n      }\n      setOutput(result);\n    }\n    "},ds=1.7580993408473768,vs=1.0507009873554805,ms=function(t,e){this.variableNames=["A"],this.outputShape=t,this.userCode="\n      float unaryOperation(float x) {\n        "+e+"\n      }\n\n      void main() {\n        float x = getAAtOutCoords();\n        float y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    "},gs="if (isnan(x)) return x;",ys="return abs(x);",xs=gs+"\n  return (x < 0.0) ? 0.0 : x;\n",bs=gs+"\n  return (x < 0.0) ? 0.0 : min(6.0, x);\n",ws="return (x >= 0.0) ? x : (exp(x) - 1.0);",Cs="\n  // Stable and Attracting Fixed Point (0, 1) for Normalized Weights.\n  // see: https://arxiv.org/abs/1706.02515\n  float scaleAlpha = "+ds+";\n  float scale = "+vs+";\n  return (x >= 0.0) ? scale * x : scaleAlpha * (exp(x) - 1.0);\n",Es="return -x;",_s="return ceil(x);",Is="return floor(x);",Rs="return exp(x);",Ss="return exp(x) - 1.0;",ks=gs+"\n  return sin(x);\n",Ds=gs+"\n  return cos(x);\n",As=gs+"\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return asin(x);\n",Ts=gs+"\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return acos(x);\n",Fs=gs+"\n  return atan(x);\n",Ns=gs+"return log(x + sqrt(x * x + 1.0));",Ms=gs+"\n  if (x < 1.0) return NAN;\n  return log(x + sqrt(x * x - 1.0));",Os=gs+"\n  if ((x < -1.0) || (x > 1.0)) return NAN;\n  return (log(1.0 + x) - log(1.0 - x)) / 2.0;",Ps="return x;",Bs="\n  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n",Ls="\n  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n",Ws="\n  vec4 result;\n\n  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);\n  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);\n  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);\n  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);\n\n  return result;\n",zs=function(t,e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t,this.userCode="\n      vec4 unaryOperation(vec4 x) {\n        "+e+"\n      }\n\n      void main() {\n        vec4 x = getAAtOutCoords();\n        vec4 y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    "},Us=function(t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!1,this.outputShape=t;var e=t.length,n=ii("rc",e),r=xi(e),o=function(t,e){if(1===t)return"rc";for(var n="",r=0;r<t;r++)n+=e[r],r<t-1&&(n+=",");return n}(e,n),i=n.slice(-2),a=e<=1?"rc":"vec2("+i.join(",")+")";this.userCode="\n      void main() {\n        "+r+" rc = getOutputCoords();\n        vec4 packedInput = getA("+o+");\n\n        setOutput(getChannel(packedInput, "+a+"));\n      }\n    "},Vs={};function Gs(t,e){if(void 0===e&&(e=!1),"linear"===t)return"return x;";if("relu"===t)return e?Bs:xs;if("elu"===t)return e?Ws:ws;if("relu6"===t)return e?Ls:bs;if("prelu"===t)return e?Ni:Ti;throw new Error("Activation "+t+" has not been implemented for the WebGL backend.")}var Hs=function(t){function e(e){var n,r=t.call(this)||this;if(r.pendingRead=new WeakMap,r.pendingDisposal=new WeakSet,r.dataRefCount=new WeakMap,r.numBytesInGPU=0,r.uploadWaitMs=0,r.downloadWaitMs=0,r.warnedAboutMemory=!1,r.pendingDeletes=0,r.disposed=!1,!h().getBool("HAS_WEBGL"))throw new Error("WebGL is not supported on this device");if(null==e){var o=Xt(h().getNumber("WEBGL_VERSION"));r.binaryCache=((n=h().getNumber("WEBGL_VERSION"))in Vs||(Vs[n]={}),Vs[n]),r.gpgpu=new Aa(o),r.canvas=o.canvas,r.gpgpuCreatedLocally=!0}else r.gpgpu=e,r.binaryCache={},r.gpgpuCreatedLocally=!1,r.canvas=e.gl.canvas;return r.textureManager=new us(r.gpgpu),r.numMBBeforeWarning=null==h().global.screen?1024:h().global.screen.height*h().global.screen.width*window.devicePixelRatio*600/1024/1024,r.texData=new go(r,Wt),r}return s(e,t),e.prototype.numDataIds=function(){return this.texData.numDataIds()+(this.cpuBackend?this.cpuBackend.numDataIds():0)-this.pendingDeletes},e.prototype.write=function(t,e,n){if(h().getBool("DEBUG")&&this.checkNumericalProblems(t),"complex64"===n&&null!=t)throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");var r={};return this.texData.set(r,{shape:e,dtype:n,values:t,usage:Gt.UPLOAD}),r},e.prototype.move=function(t,e,n,r){if(h().getBool("DEBUG")&&this.checkNumericalProblems(e),"complex64"===r)throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");this.texData.set(t,{shape:n,dtype:r,values:e,usage:Gt.UPLOAD})},e.prototype.readSync=function(t){var e=this.texData.get(t),n=e.values,r=e.dtype,o=e.complexTensors,i=e.slice,a=e.shape,s=e.isPacked;if(null!=i){var u;u=s?new zs(a,Ps):new ms(a,Ps);var c=this.runWebGLProgram(u,[{dataId:t,shape:a,dtype:r}],r),l=this.readSync(c.dataId);return this.disposeData(c.dataId),l}if(null!=n)return this.convertAndCacheOnCPU(t);if("string"===r)return n;var h,f,p=null!=this.activeTimers;return p&&(h=at()),f="complex64"===r?Wo(o.real.dataSync(),o.imag.dataSync()):this.getValuesFromTexture(t),p&&(this.downloadWaitMs+=at()-h),this.convertAndCacheOnCPU(t,f)},e.prototype.read=function(t){return u(this,void 0,void 0,(function(){var e,n,r,o,i,a,s,u,l,f,p,d,v,m,g,y,x,b,w,C,E,_;return c(this,(function(c){switch(c.label){case 0:if(this.pendingRead.has(t))return e=this.pendingRead.get(t),[2,new Promise((function(t){return e.push(t)}))];if(n=this.texData.get(t),r=n.values,o=n.shape,i=n.slice,a=n.dtype,s=n.complexTensors,u=n.isPacked,null!=i)return l=u?new zs(o,Ps):new ms(o,Ps),f=this.runWebGLProgram(l,[{dataId:t,shape:o,dtype:a}],a),p=this.read(f.dataId),this.disposeData(f.dataId),[2,p];if(null!=r)return[2,this.convertAndCacheOnCPU(t)];if(!h().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")&&2===h().getNumber("WEBGL_VERSION"))throw new Error("tensor.data() with WEBGL_DOWNLOAD_FLOAT_ENABLED=false and WEBGL_VERSION=2 not yet supported.");return d=null,"complex64"!==a&&h().get("WEBGL_BUFFER_SUPPORTED")&&(v=this.decode(t),m=this.texData.get(v.dataId),d=(_=this.gpgpu).createBufferFromTexture.apply(_,[m.texture].concat($t(o)))),this.pendingRead.set(t,[]),"complex64"===a?[3,2]:[4,this.gpgpu.createAndWaitForFence()];case 1:c.sent(),c.label=2;case 2:return"complex64"!==a?[3,4]:[4,Promise.all([s.real.data(),s.imag.data()])];case 3:return y=c.sent(),x=y[0],b=y[1],g=Wo(x,b),[3,5];case 4:null==d?g=this.getValuesFromTexture(t):(w=T(o),g=this.gpgpu.downloadFloat32MatrixFromBuffer(d,w)),c.label=5;case 5:return null!=v&&this.disposeData(v.dataId),C=this.convertAndCacheOnCPU(t,g),E=this.pendingRead.get(t),this.pendingRead.delete(t),E.forEach((function(t){return t(C)})),this.pendingDisposal.has(t)&&(this.pendingDisposal.delete(t),this.disposeData(t),this.pendingDeletes--),[2,C]}}))}))},e.prototype.checkNumericalProblems=function(t){if(null!=t)for(var e=0;e<t.length;e++){var n=t[e];if(!te(n)){if(h().getBool("WEBGL_RENDER_FLOAT32_CAPABLE"))throw Error("The value "+n+" cannot be represented with your current settings. Consider enabling float32 rendering: 'tf.env().set('WEBGL_RENDER_FLOAT32_ENABLED', true);'");throw Error("The value "+n+" cannot be represented on this device.")}}},e.prototype.getValuesFromTexture=function(t){var e,n=this.texData.get(t),r=n.shape,o=n.dtype,i=n.isPacked,a=T(r);if(h().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")){var s=this.decode(t),u=this.texData.get(s.dataId),c=(e=this.gpgpu).downloadMatrixFromPackedTexture.apply(e,[u.texture].concat($t(r))).subarray(0,a);return this.disposeData(s.dataId),c}var l=h().getBool("WEBGL_PACK")&&!0===i,f=l?De(r):r,p=l?new ia(f):new oa(f),d=this.runWebGLProgram(p,[{shape:f,dtype:o,dataId:t}],"float32"),v=this.texData.get(d.dataId),m=this.gpgpu.downloadByteEncodedFloatMatrixFromOutputTexture(v.texture,v.texShape[0],v.texShape[1]).subarray(0,a);return this.disposeData(d.dataId),m},e.prototype.time=function(t){return u(this,void 0,void 0,(function(){var e,n,r,o,i,a,s;return c(this,(function(u){switch(u.label){case 0:return e=this.activeTimers,n=[],r=!1,null==this.programTimersStack?(this.programTimersStack=n,r=!0):this.activeTimers.push(n),this.activeTimers=n,t(),o=A(this.activeTimers.map((function(t){return t.query}))).filter((function(t){return null!=t})),i=A(this.activeTimers.map((function(t){return t.name}))).filter((function(t){return null!=t})),this.activeTimers=e,r&&(this.programTimersStack=null),a={uploadWaitMs:this.uploadWaitMs,downloadWaitMs:this.downloadWaitMs,kernelMs:null,wallMs:null},h().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?[4,Promise.all(o)]:[3,2];case 1:return s=u.sent(),a.kernelMs=R(s),a.getExtraProfileInfo=function(){return s.map((function(t,e){return{name:i[e],ms:t}})).map((function(t){return t.name+": "+t.ms})).join(", ")},[3,3];case 2:a.kernelMs={error:"WebGL query timers are not supported in this environment."},u.label=3;case 3:return this.uploadWaitMs=0,this.downloadWaitMs=0,[2,a]}}))}))},e.prototype.memory=function(){return{unreliable:!1,numBytesInGPU:this.numBytesInGPU}},e.prototype.startTimer=function(){return h().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?this.gpgpu.beginQuery():{startMs:at(),endMs:null}},e.prototype.endTimer=function(t){return h().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?(this.gpgpu.endQuery(),t):(t.endMs=at(),t)},e.prototype.getQueryTime=function(t){return u(this,void 0,void 0,(function(){var e;return c(this,(function(n){return h().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?[2,this.gpgpu.waitForQueryAndGetTime(t)]:[2,(e=t).endMs-e.startMs]}))}))},e.prototype.disposeData=function(t){if(!this.pendingDisposal.has(t)){if(this.pendingRead.has(t))return this.pendingDisposal.add(t),void this.pendingDeletes++;if(this.texData.has(t)){this.releaseGPUData(t);var e=this.texData.get(t).complexTensors;null!=e&&(e.real.dispose(),e.imag.dispose()),this.texData.delete(t)}}},e.prototype.releaseGPUData=function(t){var e=this.texData.get(t),n=e.texture,r=e.dtype,o=e.texShape,i=e.usage,a=e.isPacked,s=e.slice,u=s&&s.origDataId||t,c=this.dataRefCount.get(u);c>1?this.dataRefCount.set(u,c-1):(this.dataRefCount.delete(u),null!=n&&(this.numBytesInGPU-=this.computeBytes(o,r),this.textureManager.releaseTexture(n,o,i,a)));var l=this.texData.get(t);l.texture=null,l.texShape=null,l.isPacked=!1,l.slice=null},e.prototype.getTexture=function(t){return this.uploadToGPU(t),this.texData.get(t).texture},e.prototype.getDataInfo=function(t){return this.texData.get(t)},e.prototype.getCPUBackend=function(){return h().getBool("WEBGL_CPU_FORWARD")?(null==this.cpuBackend&&(this.cpuBackend=Wt.findBackend("cpu")),this.cpuBackend):null},e.prototype.shouldExecuteOnCPU=function(t,e){var n=this;return void 0===e&&(e=128),null!=this.getCPUBackend()&&t.every((function(t){return null==n.texData.get(t.dataId).texture&&t.size<e}))},e.prototype.getGPGPUContext=function(){return this.gpgpu},e.prototype.complex=function(t,e){var n=this.makeOutput(t.shape,"complex64");return this.texData.get(n.dataId).complexTensors={real:Wt.keep(t.clone()),imag:Wt.keep(e.clone())},n},e.prototype.real=function(t){return this.texData.get(t.dataId).complexTensors.real.clone()},e.prototype.imag=function(t){return this.texData.get(t.dataId).complexTensors.imag.clone()},e.prototype.slice=function(t,e,n){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.slice(t,e,n);if(0===T(n))return Tn([],n,t.dtype);var r=this.texData.get(t.dataId).isPacked,o=oo(t.shape,e,n);if(r||!o){var i=h().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new as(n):new os(n),a=i.getCustomSetupFunc(e);return this.compileAndRun(i,[t],null,a)}return this.uploadToGPU(t.dataId),this.shallowSlice(t,e,n)},e.prototype.shallowSlice=function(t,e,n){var r=this.texData.get(t.dataId),o=this.makeOutput(n,t.dtype),i=this.texData.get(o.dataId);Object.assign(i,r),i.shape=n,i.dtype=t.dtype;var a=io(e,t.strides);r.slice&&(a+=r.slice.flatOffset),i.slice={flatOffset:a,origDataId:r.slice&&r.slice.origDataId||t.dataId};var s=this.dataRefCount.get(i.slice.origDataId)||1;return this.dataRefCount.set(i.slice.origDataId,s+1),o},e.prototype.stridedSlice=function(t,e,n,r){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.stridedSlice(t,e,n,r);var o=eo(e,n,r);if(o.some((function(t){return 0===t})))return Tn([],o);var i=new ss(e,r,o);return this.compileAndRun(i,[t])},e.prototype.reverse=function(t,e){var n=h().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new ts(t.shape,e):new Za(t.shape,e);return this.compileAndRun(n,[t])},e.prototype.concat=function(t,e){if("complex64"===t[0].dtype){var n=t.map((function(t){return Dn(t)})),r=t.map((function(t){return An(t)}));return kn(this.concat(n,e),this.concat(r,e))}if(this.shouldExecuteOnCPU(t))return this.cpuBackend.concat(t,e);if(1===t.length)return t[0];if(t.length>h().getNumber("WEBGL_MAX_TEXTURES_IN_SHADER")){var o=Math.floor(t.length/2),i=this.concat(t.slice(0,o),e),a=this.concat(t.slice(o),e);return this.concat([i,a],e)}if(h().getBool("WEBGL_PACK_ARRAY_OPERATIONS")&&t[0].rank>1){var s=new Wi(t.map((function(t){return t.shape})),e);return this.compileAndRun(s,t)}var u=Rn(t.map((function(t){return t.shape})),e),c=t.map((function(t){return t.as2D(-1,T(t.shape.slice(e)))})),l=new Li(c.map((function(t){return t.shape})));return this.compileAndRun(l,c).reshape(u)},e.prototype.neg=function(t){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.neg(t);if(h().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(t,Es,t.dtype);var e=new ms(t.shape,Es);return this.compileAndRun(e,[t])},e.prototype.batchMatMul=function(t,e,n,r){var o=n?t.shape[2]:t.shape[1],i=r?e.shape[1]:e.shape[2],a=n?t.shape[1]:t.shape[2],s=t.shape[0];if((1===o||1===i)&&a>1e3){n&&(t=t.transpose([0,2,1])),r&&(e=e.transpose([0,2,1]));var u=1===i?t:t.as3D(s,a,1),c=1===i?2:1,l=1===i?e.as3D(s,1,a):e;return this.multiply(u,l).sum(c,!0)}var h=At(t.dtype,e.dtype),f=new La(t.shape,[s,o,i],n,r);return this.compileAndRun(f,[t,e],h)},e.prototype.fusedBatchMatMul=function(t){var e=t.a,n=t.b,r=t.transposeA,o=t.transposeB,i=t.bias,a=t.activation,s=t.preluActivationWeights,u=r?e.shape[2]:e.shape[1],c=o?n.shape[1]:n.shape[2],l=e.shape[0],h=At(e.dtype,n.dtype),f=null!=i,p=null!=s,d=a?Gs(a,!0):null,v=new La(e.shape,[l,u,c],r,o,f,d,p),m=[e,n];return i&&m.push(i),s&&m.push(s),this.compileAndRun(v,m,h)},e.prototype.multiply=function(t,e){if("complex64"===t.dtype){var n=this.texData.get(t.dataId),r=this.texData.get(e.dataId),o=new Si("return areal * breal - aimag * bimag;",t.shape,e.shape),i=new Si("return areal * bimag + aimag * breal;",t.shape,e.shape),a=[this.makeComplexComponentTensorInfo(t,n.complexTensors.real),this.makeComplexComponentTensorInfo(t,n.complexTensors.imag),this.makeComplexComponentTensorInfo(e,r.complexTensors.real),this.makeComplexComponentTensorInfo(e,r.complexTensors.imag)],s=this.compileAndRun(o,a),u=this.compileAndRun(i,a),c=this.complex(s,u);return s.dispose(),u.dispose(),c}if(this.shouldExecuteOnCPU([t,e]))return this.cpuBackend.multiply(t,e);if(h().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,e,Ai,t.dtype);var l=new Fi(Ai,t.shape,e.shape);return this.compileAndRun(l,[t,e],t.dtype)},e.prototype.batchNormalization=function(t,e,n,r,o,i){var a=[t,e,n],s=null;null!=i&&(s=i.shape,a.push(i));var u=null;if(null!=o&&(u=o.shape,a.push(o)),h().getBool("WEBGL_PACK_NORMALIZATION")){var c=new Ri(t.shape,e.shape,n.shape,s,u,r);return this.compileAndRun(c,a)}var l=new Ii(t.shape,e.shape,n.shape,s,u,r);return this.compileAndRun(l,a)},e.prototype.localResponseNormalization4D=function(t,e,n,r,o){var i=h().getBool("WEBGL_PACK_NORMALIZATION")?new Oa(t.shape,e,n,r,o):new Na(t.shape,e,n,r,o);return this.compileAndRun(i,[t])},e.prototype.LRNGrad=function(t,e,n,r,o,i,a){var s=new Ma(e.shape,r,o,i,a);return this.compileAndRun(s,[e,n,t])},e.prototype.tile=function(t,e){if("string"===t.dtype){var n=this.readSync(t.dataId).map((function(t){return ct(t)}));return Qo(fr(t.shape,t.dtype,n),e)}var r=new hs(t.shape,e);return this.compileAndRun(r,[t])},e.prototype.pad=function(t,e,n){var r=h().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new Ga(t.shape,e,n):new Va(t.shape,e,n);return this.compileAndRun(r,[t])},e.prototype.transpose=function(t,e){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.transpose(t,e);var n=h().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new ps(t.shape,e):new fs(t.shape,e);return this.compileAndRun(n,[t])},e.prototype.gather=function(t,e,n){if(this.shouldExecuteOnCPU([t,e]))return this.cpuBackend.gather(t,e,n);var r=new la(t.shape,e.size,n);return this.compileAndRun(r,[t,e])},e.prototype.batchToSpaceND=function(t,e,n){S(t.rank<=4,(function(){return"batchToSpaceND for rank > 4 with a WebGL backend not implemented yet"}));var r=e.reduce((function(t,e){return t*e})),o=Ur(t.shape,e,r),i=Vr(o.length,e.length),a=Gr(t.shape,e,r),s=Hr(n,e.length),u=jr(a,n,e.length);return t.reshape(o).transpose(i).reshape(a).slice(s,u)},e.prototype.spaceToBatchND=function(t,e,n){S(t.rank<=4,(function(){return"spaceToBatchND for rank > 4 with a WebGL backend not implemented yet"}));var r=e.reduce((function(t,e){return t*e})),o=[[0,0]];o.push.apply(o,n);for(var i=1+e.length;i<t.shape.length;++i)o.push([0,0]);var a=t.pad(o),s=Ur(a.shape,e,r,!1),u=Vr(s.length,e.length,!1),c=Gr(a.shape,e,r,!1);return a.reshape(s).transpose(u).reshape(c)},e.prototype.reduce=function(t,e,n){var r=t.shape[0],o=t.shape[1],i=Xr(o),a=new qa({windowSize:i,inSize:o,batchSize:r},e),s=this.compileAndRun(a,[t],n);return 1===s.shape[1]?s:this.reduce(s,e,n)},e.prototype.argReduce=function(t,e,n){void 0===n&&(n=null);var r=t.shape[0],o=t.shape[1];null!=n&&(r=n.shape[0],o=n.shape[1]);var i=Xr(o),a=new ri({windowSize:i,inSize:o,batchSize:r},e,null==n),s=[t];null!=n&&s.push(n);var u=this.compileAndRun(a,s,"int32");return 1===u.shape[1]?u:this.argReduce(t,e,u)},e.prototype.argReducePacked=function(t,e,n){void 0===n&&(n=null);var r=null!=n?n.shape:t.shape,o=Xr(r[r.length-1]),i=new Ci(r,o,e,null==n),a=null==n?[t]:[t,n],s=this.compileAndRun(i,a,"int32");return s.rank===t.rank?this.argReducePacked(t,e,s):s},e.prototype.sum=function(t,e){wn("sum",e,t.rank);var n=xn(t.shape,e),r=n[0],o=T(n[1]),i=t.as2D(-1,o),a=Tt(t.dtype);return this.reduce(i,"sum",a).reshape(r)},e.prototype.prod=function(t,e){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.prod(t,e);var n=xn(t.shape,e),r=n[0],o=T(n[1]),i=t.as2D(-1,o),a=Tt(t.dtype);return this.reduce(i,"prod",a).reshape(r)},e.prototype.unsortedSegmentSum=function(t,e,n){var r=0,o=Cn([r],t.rank),i=t;null!=o&&(i=t.transpose(o),r=_n(1,t.rank)[0]);var a=function(t,e,n){for(var r=[],o=t.length,i=0;i<o;i++)i!==e?r.push(t[i]):r.push(n);return r}(i.shape,r,n),s=T([i.shape[r]]),u=i.as2D(-1,s),c=Tt(t.dtype),l=this.segOpCompute(u,"unsortedSegmentSum",e,c,n).reshape(a);return null!=o&&(l=l.transpose(En(o))),l},e.prototype.segOpCompute=function(t,e,n,r,o){var i=t.shape[0],a=t.shape[1],s=function(t,e){var n,r=!1;for(t<=30?(n=t,r=!0):n=tt(t,Math.floor(Math.sqrt(t)));!r;)n>e||n===t?r=!0:n=tt(t,n+1);return n}(a,o),u=new ns({windowSize:s,inSize:a,batchSize:i,numSegments:o},e),c=this.compileAndRun(u,[t,n],r);return c.shape[1]===o?c:(n=jn(0,o).tile([a/s]),this.segOpCompute(c,e,n,r,o))},e.prototype.argMinMaxReduce=function(t,e,n){var r=[e];if(wn("arg"+n.charAt(0).toUpperCase()+n.slice(1),r,t.rank),!h().getBool("WEBGL_PACK_REDUCE")||t.rank<=2){var o=xn(t.shape,r),i=o[0],a=T(o[1]),s=t.as2D(-1,a);return this.argReduce(s,n).reshape(i)}return this.argReducePacked(t,n)},e.prototype.argMin=function(t,e){return this.argMinMaxReduce(t,e,"min")},e.prototype.argMax=function(t,e){return this.argMinMaxReduce(t,e,"max")},e.prototype.cumsum=function(t,e,n,r){if(e!==t.rank-1)throw new Error("WebGL cumsum shader expects an inner-most axis="+(t.rank-1)+" but got axis="+e);var o=new Qi(t.shape,n,r);return this.compileAndRun(o,[t])},e.prototype.equal=function(t,e){if(h().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,e,"\n  return vec4(equal(a, b));\n","bool");var n=new Fi("return float(a == b);",t.shape,e.shape);return this.compileAndRun(n,[t,e],"bool")},e.prototype.notEqual=function(t,e){if(h().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,e,"\n  return vec4(notEqual(a, b));\n","bool");var n=new Fi("return float(a != b);",t.shape,e.shape);return this.compileAndRun(n,[t,e],"bool")},e.prototype.less=function(t,e){if(this.shouldExecuteOnCPU([t,e]))return this.cpuBackend.less(t,e);if(h().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,e,"\n  return vec4(lessThan(a, b));\n","bool");var n=new Fi("return float(a < b);",t.shape,e.shape);return this.compileAndRun(n,[t,e],"bool")},e.prototype.lessEqual=function(t,e){if(h().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,e,"\n  return vec4(lessThanEqual(a, b));\n","bool");var n=new Fi("return float(a <= b);",t.shape,e.shape);return this.compileAndRun(n,[t,e],"bool")},e.prototype.greater=function(t,e){if(this.shouldExecuteOnCPU([t,e]))return this.cpuBackend.greater(t,e);if(h().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,e,"\n  return vec4(greaterThan(a, b));\n","bool");var n=new Fi("return float(a > b);",t.shape,e.shape);return this.compileAndRun(n,[t,e],"bool")},e.prototype.greaterEqual=function(t,e){if(h().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,e,"\n  return vec4(greaterThanEqual(a, b));\n","bool");var n=new Fi("return float(a >= b);",t.shape,e.shape);return this.compileAndRun(n,[t,e],"bool")},e.prototype.logicalNot=function(t){var e=new ms(t.shape,"return float(!(x >= 1.0));");return this.compileAndRun(e,[t])},e.prototype.logicalAnd=function(t,e){if(h().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,e,"\n  return vec4(\n    vec4(greaterThanEqual(a, vec4(1.0))) *\n    vec4(greaterThanEqual(b, vec4(1.0))));\n","bool");var n=new Fi("return float(a >= 1.0 && b >= 1.0);",t.shape,e.shape);return this.compileAndRun(n,[t,e],"bool")},e.prototype.logicalOr=function(t,e){if(h().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,e,"\n  return min(\n    vec4(greaterThanEqual(a, vec4(1.0))) +\n    vec4(greaterThanEqual(b, vec4(1.0))),\n    vec4(1.0));\n","bool");var n=new Fi("return float(a >= 1.0 || b >= 1.0);",t.shape,e.shape);return this.compileAndRun(n,[t,e],"bool")},e.prototype.select=function(t,e,n){var r=new rs(t.rank,e.shape,e.rank);return this.compileAndRun(r,[t,e,n],At(e.dtype,n.dtype))},e.prototype.where=function(t){fn("tf.where() in webgl locks the UI thread. Call tf.whereAsync() instead");var e=t.dataSync();return ti(t.shape,e)},e.prototype.topk=function(t,e,n){return Zo(t.dataSync(),t.shape,t.dtype,e)},e.prototype.min=function(t,e){wn("min",e,t.rank);var n=xn(t.shape,e),r=n[0],o=T(n[1]),i=t.as2D(-1,o);return this.reduce(i,"min",i.dtype).reshape(r)},e.prototype.minimum=function(t,e){if(this.shouldExecuteOnCPU([t,e]))return this.cpuBackend.minimum(t,e);var n=h().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new Mi("\n  vec4 result = vec4(min(a, b));\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n",t.shape,e.shape):new Fi("\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n\n  return min(a, b);\n",t.shape,e.shape);return this.compileAndRun(n,[t,e])},e.prototype.mod=function(t,e){var n=h().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new Mi("\n  vec4 result = mod(a, b);\n  vec4 isNaN = vec4(equal(b, vec4(0.0)));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n",t.shape,e.shape):new Fi("if (b == 0.0) return NAN;\n  return mod(a, b);",t.shape,e.shape);return this.compileAndRun(n,[t,e])},e.prototype.max=function(t,e){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.max(t,e);wn("max",e,t.rank);var n=xn(t.shape,e),r=n[0],o=T(n[1]),i=t.as2D(-1,o);return this.reduce(i,"max",i.dtype).reshape(r)},e.prototype.maximum=function(t,e){if(this.shouldExecuteOnCPU([t,e]))return this.cpuBackend.maximum(t,e);var n=h().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new Mi("\n  vec4 result = vec4(max(a, b));\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n",t.shape,e.shape):new Fi("\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n\n  return max(a, b);\n",t.shape,e.shape);return this.compileAndRun(n,[t,e])},e.prototype.all=function(t,e){wn("all",e,t.rank);var n=xn(t.shape,e),r=n[0],o=T(n[1]),i=t.as2D(-1,o);return this.reduce(i,"all",i.dtype).reshape(r)},e.prototype.any=function(t,e){wn("any",e,t.rank);var n=xn(t.shape,e),r=n[0],o=T(n[1]),i=t.as2D(-1,o);return this.reduce(i,"any",i.dtype).reshape(r)},e.prototype.realDivide=function(t,e){if(h().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,e,"\n  // vec4 one = vec4(equal(a, b));\n  // return one + (vec4(1.0) - one) * a / b;\n  vec4 result = a / b;\n  if(a.x == b.x) {\n    result.x = 1.;\n  }\n  if(a.y == b.y) {\n    result.y = 1.;\n  }\n  if(a.z == b.z) {\n    result.z = 1.;\n  }\n  if(a.w == b.w) {\n    result.w = 1.;\n  }\n\n  return result;\n","float32",!0);var n=new Fi("\nif (a == b) {\n  return 1.0;\n};\nreturn a / b;",t.shape,e.shape);return this.compileAndRun(n,[t,e],"float32")},e.prototype.floorDiv=function(t,e){if(h().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,e,"\n  ivec4 ia = round(a);\n  ivec4 ib = round(b);\n  bvec4 cond = notEqual(ib, ivec4(0));\n  ivec4 result = ivec4(0);\n  vec4 s = sign(a) * sign(b);\n\n  // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n  if (cond[0]) {\n    result[0] = idiv(ia[0], ib[0], s[0]);\n  }\n  if (cond[1]) {\n    result[1] = idiv(ia[1], ib[1], s[1]);\n  }\n  if (cond[2]) {\n    result[2] = idiv(ia[2], ib[2], s[2]);\n  }\n  if (cond[3]) {\n    result[3] = idiv(ia[3], ib[3], s[3]);\n  }\n  return vec4(result);\n","int32");var n=new Fi("\n  float s = sign(a) * sign(b);\n  int ia = round(a);\n  int ib = round(b);\n  if (ib != 0) {\n    // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n    return float(idiv(ia, ib, s));\n  } else {\n    return NAN;\n  }\n",t.shape,e.shape);return this.compileAndRun(n,[t,e],"int32")},e.prototype.add=function(t,e){if("complex64"===t.dtype&&"complex64"===e.dtype)return this.complexSeparableBinaryOp(t,e,ki);if(this.shouldExecuteOnCPU([t,e]))return this.cpuBackend.add(t,e);var n=At(t.dtype,e.dtype);if(h().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,e,ki,n);var r=new Fi(ki,t.shape,e.shape);return this.compileAndRun(r,[t,e],n)},e.prototype.packedUnaryOp=function(t,e,n){var r=new zs(t.shape,e);return this.compileAndRun(r,[t],n)},e.prototype.packedBinaryOp=function(t,e,n,r,o){void 0===o&&(o=!1);var i=new Mi(n,t.shape,e.shape,o);return this.compileAndRun(i,[t,e],r)},e.prototype.complexSeparableBinaryOp=function(t,e,n){var r=this,o=this.texData.get(t.dataId),i=this.texData.get(e.dataId),a=[[o.complexTensors.real,i.complexTensors.real],[o.complexTensors.imag,i.complexTensors.imag]].map((function(o){var i=o[0],a=o[1],s=r.makeComplexComponentTensorInfo(t,i),u=r.makeComplexComponentTensorInfo(e,a),c=new Fi(n,t.shape,e.shape);return r.compileAndRun(c,[s,u],At(i.dtype,a.dtype))})),s=a[0],u=a[1],c=this.complex(s,u);return s.dispose(),u.dispose(),c},e.prototype.makeComplexComponentTensorInfo=function(t,e){return{dataId:e.dataId,dtype:e.dtype,shape:t.shape}},e.prototype.addN=function(t){if(1===t.length)return t[0];if(t.length>h().get("WEBGL_MAX_TEXTURES_IN_SHADER")){var e=Math.floor(t.length/2),n=this.addN(t.slice(0,e)),r=this.addN(t.slice(e));return this.addN([n,r])}var o=t.map((function(t){return t.dtype})).reduce((function(t,e){return At(t,e)})),i=t.map((function(t){return t.shape})),a=h().getBool("WEBGL_PACK")?new ni(t[0].shape,i):new ei(t[0].shape,i);return this.compileAndRun(a,t,o)},e.prototype.subtract=function(t,e){if("complex64"===t.dtype&&"complex64"===e.dtype)return this.complexSeparableBinaryOp(t,e,Di);if(this.shouldExecuteOnCPU([t,e]))return this.cpuBackend.subtract(t,e);var n=At(t.dtype,e.dtype);if(h().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,e,Di,t.dtype);var r=new Fi(Di,t.shape,e.shape);return this.compileAndRun(r,[t,e],n)},e.prototype.pow=function(t,e){var n=h().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new Mi("\n  // isModRound1 has 1 for components with round(mod(b, 2.0)) == 1, 0 otherwise.\n  vec4 isModRound1 = vec4(equal(round(mod(b, 2.0)), ivec4(1)));\n  vec4 multiplier = sign(a) * isModRound1 + (vec4(1.0) - isModRound1);\n  vec4 result = multiplier * pow(abs(a), b);\n\n  // Ensure that a^0 = 1, including 0^0 = 1 as this correspond to TF and JS\n  bvec4 isExpZero = equal(b, vec4(0.0));\n  result.r = isExpZero.r ? 1.0 : result.r;\n  result.g = isExpZero.g ? 1.0 : result.g;\n  result.b = isExpZero.b ? 1.0 : result.b;\n  result.a = isExpZero.a ? 1.0 : result.a;\n\n  vec4 isNaN = vec4(lessThan(a, vec4(0.0))) * vec4(lessThan(floor(b), b));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n",t.shape,e.shape):new Fi("\nif(a < 0.0 && floor(b) < b){\n  return NAN;\n}\nif (b == 0.0) {\n  return 1.0;\n}\nreturn (round(mod(b, 2.0)) != 1) ?\n    pow(abs(a), b) : sign(a) * pow(abs(a), b);\n",t.shape,e.shape),r=At(t.dtype,e.dtype);return this.compileAndRun(n,[t,e],r)},e.prototype.ceil=function(t){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.ceil(t);if(h().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(t,_s,t.dtype);var e=new ms(t.shape,_s);return this.compileAndRun(e,[t])},e.prototype.floor=function(t){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.floor(t);if(h().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(t,Is,t.dtype);var e=new ms(t.shape,Is);return this.compileAndRun(e,[t])},e.prototype.sign=function(t){var e=new ms(t.shape,"\n  if (isnan(x)) { return 0.0; }\n  return sign(x);\n");return this.compileAndRun(e,[t])},e.prototype.isNaN=function(t){var e=new ms(t.shape,"return float(isnan(x));");return this.compileAndRun(e,[t],"bool")},e.prototype.isInf=function(t){var e=new ms(t.shape,"return float(isinf(x));");return this.compileAndRun(e,[t],"bool")},e.prototype.isFinite=function(t){var e=new ms(t.shape,"return float(!isnan(x) && !isinf(x));");return this.compileAndRun(e,[t],"bool")},e.prototype.round=function(t){var e=new ms(t.shape,"\n  // OpenGL ES does not support round function.\n  // The algorithm is based on banker's rounding.\n  float base = floor(x);\n  if ((x - base) < 0.5) {\n    return floor(x);\n  } else if ((x - base) > 0.5) {\n    return ceil(x);\n  } else {\n    if (mod(base, 2.0) == 0.0) {\n      return base;\n    } else {\n      return base + 1.0;\n    }\n  }\n");return this.compileAndRun(e,[t])},e.prototype.exp=function(t){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.exp(t);if(h().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(t,Rs,t.dtype);var e=new ms(t.shape,Rs);return this.compileAndRun(e,[t])},e.prototype.expm1=function(t){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.expm1(t);if(h().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(t,Ss,t.dtype);var e=new ms(t.shape,Ss);return this.compileAndRun(e,[t])},e.prototype.softmax=function(t,e){var n=W([e],t.shape),r=this.max(t,n),o=bn(r.shape,n),i=this.subtract(t,r.reshape(o)),a=this.exp(i),s=this.sum(a,n).reshape(o);return this.realDivide(a,s)},e.prototype.log=function(t){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.log(t);if(h().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(t,"\n  vec4 result = log(x);\n  vec4 isNaN = vec4(lessThan(x, vec4(0.0)));\n  result.r = isNaN.r == 1.0 ? NAN : result.r;\n  result.g = isNaN.g == 1.0 ? NAN : result.g;\n  result.b = isNaN.b == 1.0 ? NAN : result.b;\n  result.a = isNaN.a == 1.0 ? NAN : result.a;\n\n  return result;\n",t.dtype);var e=new ms(t.shape,"if (x < 0.0) return NAN;\n  return log(x);");return this.compileAndRun(e,[t])},e.prototype.log1p=function(t){var e=new ms(t.shape,"return log(1.0 + x);");return this.compileAndRun(e,[t])},e.prototype.sqrt=function(t){var e=new ms(t.shape,"return sqrt(x);");return this.compileAndRun(e,[t])},e.prototype.rsqrt=function(t){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.rsqrt(t);var e=new ms(t.shape,"return inversesqrt(x);");return this.compileAndRun(e,[t])},e.prototype.reciprocal=function(t){var e=new ms(t.shape,"return 1.0 / x;");return this.compileAndRun(e,[t])},e.prototype.relu=function(t){var e;return e=h().getBool("WEBGL_PACK")?new zs(t.shape,Bs):new ms(t.shape,xs),this.compileAndRun(e,[t])},e.prototype.relu6=function(t){var e;return e=h().getBool("WEBGL_PACK")?new zs(t.shape,Ls):new ms(t.shape,bs),this.compileAndRun(e,[t])},e.prototype.prelu=function(t,e){var n=h().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new Mi(Ni,t.shape,e.shape):new Fi(Ti,t.shape,e.shape);return this.compileAndRun(n,[t,e])},e.prototype.elu=function(t){if(h().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(t,Ws,t.dtype);var e=new ms(t.shape,ws);return this.compileAndRun(e,[t])},e.prototype.eluDer=function(t,e){var n=h().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new Mi("\n  vec4 bGTEZero = vec4(greaterThanEqual(b, vec4(0.)));\n  return (bGTEZero * a) + ((vec4(1.0) - bGTEZero) * (a * (b + vec4(1.0))));\n",t.shape,e.shape):new Fi("return (b >= 1.0) ? a : a * (b + 1.0);",t.shape,e.shape);return this.compileAndRun(n,[t,e])},e.prototype.selu=function(t){var e=new ms(t.shape,Cs);return this.compileAndRun(e,[t])},e.prototype.int=function(t){var e=new ms(t.shape,"return float(int(x));");return this.compileAndRun(e,[t],"int32")},e.prototype.clip=function(t,e,n){var r,o=(r=h().getBool("WEBGL_PACK_CLIP")?new Pi(t.shape):new Oi(t.shape)).getCustomSetupFunc(e,n);return this.compileAndRun(r,[t],null,o)},e.prototype.abs=function(t){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.abs(t);if(h().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(t,ys,t.dtype);var e=new ms(t.shape,ys);return this.compileAndRun(e,[t])},e.prototype.complexAbs=function(t){var e=this.texData.get(t.dataId),n=new Bi(t.shape),r=[this.makeComplexComponentTensorInfo(t,e.complexTensors.real),this.makeComplexComponentTensorInfo(t,e.complexTensors.imag)];return this.compileAndRun(n,r)},e.prototype.sigmoid=function(t){var e=new ms(t.shape,"return 1.0 / (1.0 + exp(-1.0 * x));");return this.compileAndRun(e,[t])},e.prototype.softplus=function(t){var e=new ms(t.shape,"\n  float epsilon = 1.1920928955078125e-7;\n  float threshold = log(epsilon) + 2.0;\n\n  bool too_large = x > -threshold;\n  bool too_small = x < threshold;\n\n  float result;\n  float exp_x = exp(x);\n\n  if (too_large){\n    result = x;\n  }\n  else if (too_small){\n    result = exp_x;\n  }\n  else{\n    result = log(exp_x + 1.0);\n  }\n  return result;\n");return this.compileAndRun(e,[t])},e.prototype.sin=function(t){var e=new ms(t.shape,ks);return this.compileAndRun(e,[t])},e.prototype.cos=function(t){var e=new ms(t.shape,Ds);return this.compileAndRun(e,[t])},e.prototype.tan=function(t){var e=new ms(t.shape,"return tan(x);");return this.compileAndRun(e,[t])},e.prototype.asin=function(t){var e=new ms(t.shape,As);return this.compileAndRun(e,[t])},e.prototype.acos=function(t){var e=new ms(t.shape,Ts);return this.compileAndRun(e,[t])},e.prototype.atan=function(t){var e=new ms(t.shape,Fs);return this.compileAndRun(e,[t])},e.prototype.atan2=function(t,e){var n=h().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new Mi("\n  vec4 result = atan(a, b);\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n",t.shape,e.shape):new Fi("\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n\n  return atan(a, b);\n",t.shape,e.shape);return this.compileAndRun(n,[t,e])},e.prototype.sinh=function(t){var e=new ms(t.shape,"\n  float e2x = exp(x);\n  return (e2x - 1.0 / e2x) / 2.0;\n");return this.compileAndRun(e,[t])},e.prototype.cosh=function(t){var e=new ms(t.shape,"\n  float e2x = exp(-x);\n  return (e2x + 1.0 / e2x) / 2.0;\n");return this.compileAndRun(e,[t])},e.prototype.tanh=function(t){var e=new ms(t.shape,"\n  float e2x = exp(-2.0 * abs(x));\n  return sign(x) * (1.0 - e2x) / (1.0 + e2x);\n");return this.compileAndRun(e,[t])},e.prototype.asinh=function(t){var e=new ms(t.shape,Ns);return this.compileAndRun(e,[t])},e.prototype.acosh=function(t){var e=new ms(t.shape,Ms);return this.compileAndRun(e,[t])},e.prototype.atanh=function(t){var e=new ms(t.shape,Os);return this.compileAndRun(e,[t])},e.prototype.erf=function(t){var e=new ms(t.shape,'\n  // Error function is calculated approximately with elementary function.\n  // See "Handbook of Mathematical Functions with Formulas,\n  // Graphs, and Mathematical Tables", Abramowitz and Stegun.\n  float p = 0.3275911;\n  float a1 = 0.254829592;\n  float a2 = -0.284496736;\n  float a3 = 1.421413741;\n  float a4 = -1.453152027;\n  float a5 = 1.061405429;\n\n  float sign = sign(x);\n  x = abs(x);\n  float t = 1.0 / (1.0 + p * x);\n  return sign * (1.0 - (((((a5*t + a4)*t) + a3)*t + a2)*t + a1)*t*exp(-x*x));\n');return this.compileAndRun(e,[t])},e.prototype.step=function(t,e){var n=new ms(t.shape,function(t){return void 0===t&&(t=0),gs+"\n    return x > 0.0 ? 1.0 : float("+t+");\n  "}(e));return this.compileAndRun(n,[t])},e.prototype.conv2dByMatMul=function(t,e,n,r,o,i){var a=t.shape,s=this.texData.get(t.dataId),u=n.inChannels,c=a[0]*a[1]*a[2],l=n.outChannels,f="channelsLast"===n.dataFormat,p=(1===c||1===l)&&u>1e3,d=a[2]%2!=0&&!!s.isPacked;if(p||!h().getBool("WEBGL_LAZILY_UNPACK")||!h().getBool("WEBGL_PACK_BINARY_OPERATIONS")||!d){var v=f?a[0]*a[1]*a[2]:a[0]*a[2]*a[3],m=this.reshape(t,[1,v,n.inChannels]),g=this.reshape(e,[1,n.inChannels,n.outChannels]);return this.reshape(this.fusedBatchMatMul({a:m,b:g,transposeA:!1,transposeB:!1,bias:r,activation:o,preluActivationWeights:i}),n.outShape)}var y=f?a[0]*a[1]*(a[2]+1):a[0]*a[2]*(a[3]+1),x={dataId:t.dataId,shape:[1,y,n.inChannels],dtype:t.dtype},b=s.shape;s.shape=s.shape.slice(),s.shape[s.shape.length-2]++,S(Fe(s.shape,x.shape),(function(){return"packed reshape "+s.shape+" to "+x.shape+" isn't free"}));var w=this.reshape(e,[1,n.inChannels,n.outChannels]),C=this.fusedBatchMatMul({a:x,b:w,transposeA:!1,transposeB:!1,bias:r,activation:o,preluActivationWeights:i}),E=this.texData.get(C.dataId);return S(E.isPacked,(function(){return"batchMatMul result is expected to be packed"})),s.shape=b,E.shape=n.outShape,Wt.makeTensorFromDataId(C.dataId,n.outShape,C.dtype)},e.prototype.conv2dWithIm2Row=function(t,e,n,r,o,i){var a=n.filterWidth,s=n.filterHeight,u=n.inChannels,c=n.outWidth,l=n.outHeight,h="channelsLast"===n.dataFormat,f=a*s*u,p=l*c,d=[f,p],v=t.squeeze([0]),m=e.reshape([1,f,-1]),g=new Fa(d,v.shape,n),y=this.compileAndRun(g,[v]).reshape([1,d[0],d[1]]),x=null!=r,b=null!=i,w=o?Gs(o,!0):null,C=new La(y.shape,[1,p,n.outChannels],!0,!1,x,w,b),E=[y,m];r&&E.push(r),b&&E.push(i);var _=this.compileAndRun(C,E);return h?_.reshape([1,l,c,n.outChannels]):_.reshape([1,n.outChannels,l,c])},e.prototype.fusedConv2d=function(t){var e=t.input,n=t.filter,r=t.convInfo,o=t.bias,i=t.activation,a=t.preluActivationWeights;if(1===r.filterHeight&&1===r.filterWidth&&1===r.dilationHeight&&1===r.dilationWidth&&1===r.strideHeight&&1===r.strideWidth&&("SAME"===r.padInfo.type||"VALID"===r.padInfo.type))return this.conv2dByMatMul(e,n,r,o,i,a);if(h().getBool("WEBGL_CONV_IM2COL")&&1===e.shape[0])return this.conv2dWithIm2Row(e,n,r,o,i,a);var s=null!=o,u=null!=a,c=i?Gs(i,!1):null,l=new Ki(r,s,c,u),f=[e,n];return o&&f.push(o),a&&f.push(a),this.compileAndRun(l,f)},e.prototype.conv2d=function(t,e,n){if(1===n.filterHeight&&1===n.filterWidth&&1===n.dilationHeight&&1===n.dilationWidth&&1===n.strideHeight&&1===n.strideWidth&&("SAME"===n.padInfo.type||"VALID"===n.padInfo.type))return this.conv2dByMatMul(t,e,n);if(h().getBool("WEBGL_CONV_IM2COL")&&1===t.shape[0])return this.conv2dWithIm2Row(t,e,n);var r=new Ki(n);return this.compileAndRun(r,[t,e])},e.prototype.conv2dDerInput=function(t,e,n){var r=new Vi(n);return this.compileAndRun(r,[t,e])},e.prototype.conv2dDerFilter=function(t,e,n){var r=new Ui(n);return this.compileAndRun(r,[t,e])},e.prototype.fusedDepthwiseConv2D=function(t){var e,n=t.input,r=t.filter,o=t.convInfo,i=t.bias,a=t.activation,s=t.preluActivationWeights,u=h().getBool("WEBGL_PACK_DEPTHWISECONV")&&o.strideWidth<=2&&o.outChannels/o.inChannels==1,c=a?Gs(a,u):null,l=[n,r],f=null!=i,p=null!=s;return f&&l.push(i),p&&l.push(s),u?(e=new $i(o,f,c,p),this.compileAndRun(e,l)):(e=new Yi(o,f,c,p),this.compileAndRun(e,l))},e.prototype.depthwiseConv2D=function(t,e,n){var r;return h().getBool("WEBGL_PACK_DEPTHWISECONV")&&n.strideWidth<=2&&n.outChannels/n.inChannels==1?(r=new $i(n),this.compileAndRun(r,[t,e])):(r=new Yi(n),this.compileAndRun(r,[t,e]))},e.prototype.depthwiseConv2DDerInput=function(t,e,n){var r=new qi(n);return this.compileAndRun(r,[t,e])},e.prototype.depthwiseConv2DDerFilter=function(t,e,n){var r=new ji(n);return this.compileAndRun(r,[t,e])},e.prototype.conv3d=function(t,e,n){var r=new Xi(n);return this.compileAndRun(r,[t,e])},e.prototype.conv3dDerInput=function(t,e,n){var r=new Hi(n);return this.compileAndRun(r,[t,e])},e.prototype.conv3dDerFilter=function(t,e,n){var r=new Gi(n);return this.compileAndRun(r,[t,e])},e.prototype.maxPool=function(t,e){var n=new Ha(e,"max",!1);return this.compileAndRun(n,[t])},e.prototype.avgPool=function(t,e){var n=new Ha(e,"avg",!1);return this.compileAndRun(n,[t],"float32")},e.prototype.maxPoolBackprop=function(t,e,n,r){var o=new Ha(r,"max",!0),i=this.compileAndRun(o,[e]),a=new Pa(r),s=this.compileAndRun(a,[t,i],e.dtype);return i.dispose(),s},e.prototype.avgPoolBackprop=function(t,e,n){var r=new Ei(n);return this.compileAndRun(r,[t],e.dtype)},e.prototype.cast=function(t,e){return Oo(t,e,this)},e.prototype.unstack=function(t,e){for(var n=t.shape[e],r=new Array(t.rank-1),o=0,i=0;i<t.rank;i++)i!==e&&(r[o++]=t.shape[i]);var a=new Array(t.rank).fill(0),s=t.shape.slice();s[e]=1;var u=new Array(n);for(i=0;i<u.length;i++)a[e]=i,u[i]=this.slice(t,a,s).reshape(r);return u},e.prototype.avgPool3d=function(t,e){var n=new ja(e,"avg",!1);return this.compileAndRun(n,[t],"float32")},e.prototype.avgPool3dBackprop=function(t,e,n){var r=new _i(n);return this.compileAndRun(r,[t],e.dtype)},e.prototype.maxPool3d=function(t,e){var n=new ja(e,"max",!1);return this.compileAndRun(n,[t],"float32")},e.prototype.maxPool3dBackprop=function(t,e,n,r){var o=new ja(r,"max",!0),i=this.compileAndRun(o,[e]),a=new Ba(r),s=this.compileAndRun(a,[t,i],e.dtype);return i.dispose(),s},e.prototype.reshape=function(t,e){var n=this.texData.get(t.dataId);if(n.isPacked&&!Fe(t.shape,e)&&(null===n.texture||!Fe(n.shape,e))){var r=this.packedReshape(t,e);return Wt.makeTensorFromDataId(r.dataId,r.shape,r.dtype)}return Po(t,e)},e.prototype.resizeBilinear=function(t,e,n,r){var o=h().getBool("WEBGL_PACK_IMAGE_OPERATIONS")?new $a(t.shape,e,n,r):new Ya(t.shape,e,n,r);return this.compileAndRun(o,[t],"float32")},e.prototype.resizeBilinearBackprop=function(t,e,n){var r=new Xa(t,e,n);return this.compileAndRun(r,[t])},e.prototype.resizeNearestNeighbor=function(t,e,n,r){var o=new Qa(t.shape,e,n,r);return this.compileAndRun(o,[t])},e.prototype.resizeNearestNeighborBackprop=function(t,e,n){var r=new Ja(t,e,n);return this.compileAndRun(r,[t])},e.prototype.multinomial=function(t,e,n,r){var o=e?t:vo(t),i=o.shape[0],a=o.shape[1],s=new Wa(i,a,n),u=s.getCustomSetupFunc(r);return this.compileAndRun(s,[o],"int32",u)},e.prototype.oneHot=function(t,e,n,r){var o=new za(t.size,e,n,r);return this.compileAndRun(o,[t])},e.prototype.diag=function(t){var e=new ra(t.size);return this.compileAndRun(e,[t])},e.prototype.nonMaxSuppression=function(t,e,n,r,o){return fn("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead"),jo(t.dataSync(),e.dataSync(),n,r,o)},e.prototype.cropAndResize=function(t,e,n,r,o,i){var a=new Ji(t.shape,e.shape,r,o,i);return this.compileAndRun(a,[t,e,n],"float32")},e.prototype.depthToSpace=function(t,e,n){S(e>1,(function(){return"blockSize should be > 1 for depthToSpace, but was: "+e}));var r=t.shape[0],o="NHWC"===n?t.shape[1]:t.shape[2],i="NHWC"===n?t.shape[2]:t.shape[3],a="NHWC"===n?t.shape[3]:t.shape[1],s=o*e,u=i*e,c=a/(e*e),l=new na("NHWC"===n?[r,s,u,c]:[r,c,s,u],e,n);return this.compileAndRun(l,[t])},e.prototype.split=function(t,e,n){return Jo(t,e,n)},e.prototype.scatterND=function(t,e,n){var r=Jr(0,t,n),o=r.sliceRank,i=r.numUpdates,a=r.sliceSize,s=r.strides,u=r.outputSize,c=[u/a,a],l=t.reshape([i,o]),h=e.reshape([i,a]);if(0===u)return Po(Tn([]),n);var f=Nn(0),p=new es(i,o,l.rank,h.rank,s,c);return this.compileAndRun(p,[h,l,f]).reshape(n)},e.prototype.sparseToDense=function(t,e,n,r){var o=Jr(0,t,n),i=o.sliceRank,a=o.numUpdates,s=o.strides,u=o.outputSize,c=new es(a,i,t.rank,e.rank,s,[u,1],!1);return this.compileAndRun(c,[e,t,r]).reshape(n)},e.prototype.fft=function(t){return this.fftImpl(t,!1)},e.prototype.ifft=function(t){return this.fftImpl(t,!0)},e.prototype.fftImpl=function(t,e){var n=this.texData.get(t.dataId),r=new ua("return real * expR - imag * expI;",t.shape,e),o=new ua("return real * expI + imag * expR;",t.shape,e),i=[this.makeComplexComponentTensorInfo(t,n.complexTensors.real),this.makeComplexComponentTensorInfo(t,n.complexTensors.imag)],a=this.compileAndRun(r,i),s=this.compileAndRun(o,i),u=this.complex(a,s).as2D(t.shape[0],t.shape[1]);return a.dispose(),s.dispose(),u},e.prototype.gatherND=function(t,e){var n=e.shape,r=n[n.length-1],o=qr(t,e),i=o[0],a=o[1],s=o[2],u=o[3],c=e.reshape([a,r]),l=t.reshape([t.size/s,s]),h=new ha(r,u,[a,s]);return this.compileAndRun(h,[l,c]).reshape(i)},e.prototype.fill=function(t,e,n){if("string"===(n=n||Q(e))){var r=V(n,T(t));return r.fill(e),Wt.makeTensor(r,t,n,this)}var o=new ca(t,e),i=o.getCustomSetupFunc(e);return this.compileAndRun(o,[],n,i)},e.prototype.onesLike=function(t){if("string"===t.dtype)throw new Error("onesLike is not supported under string dtype");return this.fill(t.shape,1,t.dtype)},e.prototype.zerosLike=function(t){return this.fill(t.shape,"string"===t.dtype?"":0,t.dtype)},e.prototype.linspace=function(t,e,n){return Bo(t,e,n)},e.prototype.makeTensorInfo=function(t,e){var n=this.write(null,t,e);return this.texData.get(n).usage=null,{dataId:n,shape:t,dtype:e}},e.prototype.makeOutput=function(t,e){var n=this.makeTensorInfo(t,e).dataId;return Wt.makeTensorFromDataId(n,t,e,this)},e.prototype.unpackTensor=function(t){var e=new Us(t.shape);return this.runWebGLProgram(e,[t],t.dtype)},e.prototype.packTensor=function(t){var e=new Ua(t.shape);return this.runWebGLProgram(e,[t],t.dtype,null,!0)},e.prototype.packedReshape=function(t,e){var n=[Se(t.shape)].concat(ke(t.shape)),r={dtype:t.dtype,shape:n,dataId:t.dataId},o=[Se(e)].concat(ke(e)),i=new Ka(o,n),a=this.runWebGLProgram(i,[r],t.dtype,null,!0);return{dataId:a.dataId,shape:e,dtype:a.dtype}},e.prototype.decode=function(t){var e,n=this.texData.get(t),r=n.isPacked,o=n.shape,i=n.dtype,a=De(o);return e=r?new ea(a):new ta(a),{dtype:i,shape:o,dataId:this.runWebGLProgram(e,[{shape:a,dtype:i,dataId:t}],i,null,!0).dataId}},e.prototype.runWebGLProgram=function(t,e,n,r,o){var i=this;void 0===o&&(o=!1);var a=this.makeTensorInfo(t.outputShape,n),s=this.texData.get(a.dataId);if(t.packedOutput&&(s.isPacked=!0),t.outPackingScheme===Vt.DENSE){var u=$t(t.outputShape);s.texShape=u.map((function(t){return 2*t}))}if(null!=t.outTexUsage&&(s.usage=t.outTexUsage),0===T(a.shape))return s.values=U(a.dtype,0),a;var c=[],l=e.map((function(e){if("complex64"===e.dtype)throw new Error("GPGPUProgram does not support complex64 input. For complex64 dtypes, please separate the program into real and imaginary parts.");var n=i.texData.get(e.dataId);if(null==n.texture){if(!t.packedInputs&&T(e.shape)<=h().getNumber("WEBGL_SIZE_UPLOAD_UNIFORM"))return{shape:e.shape,texData:null,isUniform:!0,uniformValues:n.values};t.packedInputs&&(n.isPacked=!0,n.shape=e.shape)}else if(!!n.isPacked!=!!t.packedInputs)e=n.isPacked?i.unpackTensor(e):i.packTensor(e),c.push(e),n=i.texData.get(e.dataId);else if(n.isPacked&&!Fe(n.shape,e.shape)){var r=e,o=e.shape;e.shape=n.shape,e=i.packedReshape(e,o),c.push(e),n=i.texData.get(e.dataId),r.shape=o}return i.uploadToGPU(e.dataId),{shape:e.shape,texData:n,isUniform:!1}}));this.uploadToGPU(a.dataId);var f,p={shape:a.shape,texData:s,isUniform:!1},d=function(t,e,n){var r="";e.concat(n).forEach((function(t){var e=null!=t.texData&&null!=t.texData.slice&&t.texData.slice.flatOffset>0,n=t.isUniform?"uniform":t.texData.texShape;r+=t.shape+"_"+n+"_"+e}));var o=t.userCode;return t.constructor.name+"_"+r+"_"+o}(t,l,p),v=this.getAndSaveBinary(d,(function(){return function(t,e,n,r){var o=e.userCode,i=n.map((function(t,n){var r={logicalShape:t.shape,texShape:t.isUniform?null:t.texData.texShape,isUniform:t.isUniform,isPacked:!t.isUniform&&t.texData.isPacked,flatOffset:null};return null!=t.texData&&null!=t.texData.slice&&t.texData.slice.flatOffset>0&&(r.flatOffset=t.texData.slice.flatOffset),{name:e.variableNames[n],shapeInfo:r}})),a=i.map((function(t){return t.shapeInfo})),s={logicalShape:r.shape,texShape:r.texData.texShape,isUniform:!1,isPacked:r.texData.isPacked,flatOffset:null},u=li(i,s,o,e.packedInputs),c=t.createProgram(u),l=null,f=t.getUniformLocation(c,"NAN",!1);1===h().getNumber("WEBGL_VERSION")&&(l=t.getUniformLocation(c,"INFINITY",!1));for(var p={},d=0;d<e.variableNames.length;d++){var v=e.variableNames[d];p[v]=t.getUniformLocation(c,v,!1),p["offset"+v]=t.getUniformLocation(c,"offset"+v,!1)}return{program:e,source:u,webGLProgram:c,uniformLocations:p,inShapeInfos:a,outShapeInfo:s,infLoc:l,nanLoc:f}}(i.gpgpu,t,l,p)})),m=null!=this.activeTimers;if(m&&(f=this.startTimer()),function(t,e,n,r,o){Ta(e.inShapeInfos,n),Ta([e.outShapeInfo],[r]);var i=r.texData.texture,a=r.texData.texShape;r.texData.isPacked?t.setOutputPackedMatrixTexture(i,a[0],a[1]):t.setOutputMatrixTexture(i,a[0],a[1]),t.setProgram(e.webGLProgram),1===h().getNumber("WEBGL_VERSION")&&null!==e.infLoc&&t.gl.uniform1f(e.infLoc,1/0),null!==e.nanLoc&&t.gl.uniform1f(e.nanLoc,NaN),n.forEach((function(n,r){var o=e.program.variableNames[r],i=e.uniformLocations[o],a=e.uniformLocations["offset"+o];if(null!=i)if(n.isUniform)if(T(n.shape)<2)t.gl.uniform1f(i,n.uniformValues[0]);else{var s=n.uniformValues;s instanceof Float32Array||(s=new Float32Array(s)),t.gl.uniform1fv(i,s)}else null!=n.texData.slice&&null!=a&&t.gl.uniform1i(a,n.texData.slice.flatOffset),t.setInputMatrixTexture(n.texData.texture,i,r)})),null!=o&&o(t,e.webGLProgram),t.executeProgram()}(this.gpgpu,v,l,p,r),c.forEach((function(t){return i.disposeData(t.dataId)})),m&&(f=this.endTimer(f),this.activeTimers.push({name:t.constructor.name,query:this.getQueryTime(f)})),!h().getBool("WEBGL_LAZILY_UNPACK")&&s.isPacked&&!1===o){var g=this.unpackTensor(a);return this.disposeData(a.dataId),g}return a},e.prototype.compileAndRun=function(t,e,n,r,o){void 0===o&&(o=!1),n=n||e[0].dtype;var i=this.runWebGLProgram(t,e,n,r,o);return Wt.makeTensorFromDataId(i.dataId,i.shape,i.dtype)},e.prototype.getAndSaveBinary=function(t,e){return t in this.binaryCache||(this.binaryCache[t]=e()),this.binaryCache[t]},e.prototype.getTextureManager=function(){return this.textureManager},e.prototype.dispose=function(){var t=this;this.disposed||(h().getBool("IS_TEST")||Object.keys(this.binaryCache).forEach((function(e){t.gpgpu.deleteProgram(t.binaryCache[e].webGLProgram),delete t.binaryCache[e]})),this.textureManager.dispose(),null!=this.canvas&&"undefined"!=typeof HTMLCanvasElement&&this.canvas instanceof HTMLCanvasElement?this.canvas.remove():this.canvas=null,this.gpgpuCreatedLocally&&(this.gpgpu.program=null,this.gpgpu.dispose()),this.disposed=!0)},e.prototype.floatPrecision=function(){var t=this;return null==this.floatPrecisionValue&&(this.floatPrecisionValue=Qe((function(){if(!h().get("WEBGL_RENDER_FLOAT32_ENABLED")){var e=h().getBool("DEBUG");h().set("DEBUG",!1);var n=t.abs(Nn(1e-8)).dataSync()[0];if(h().set("DEBUG",e),n>0)return 32}return 16}))),this.floatPrecisionValue},e.prototype.epsilon=function(){return 32===this.floatPrecision()?1e-7:1e-4},e.prototype.uploadToGPU=function(t){var e,n=this.texData.get(t),r=n.shape,o=n.dtype,i=n.values,a=n.texture,s=n.usage,u=n.isPacked;if(null==a){var c,l=null!=this.activeTimers;l&&(c=at());var h=n.texShape;if(null==h&&(h=Ae(r,u),n.texShape=h),null!=i){var f=De(r),p=void 0,d=h[1],v=h[0],m=i instanceof Uint8Array;u?(d=(e=Jt(h[0],h[1]))[0],v=e[1],p=new sa(f,[v,d],m)):p=new aa(f,[v,d],m);var g=this.makeTensorInfo([v,d],o);this.texData.get(g.dataId).usage=m?Gt.PIXELS:Gt.UPLOAD,this.gpgpu.uploadDenseMatrixToTexture(this.getTexture(g.dataId),d,v,i);var y=this.runWebGLProgram(p,[g],o,null,!0),x=this.texData.get(y.dataId);n.texture=x.texture,n.texShape=x.texShape,n.isPacked=x.isPacked,n.usage=x.usage,this.disposeData(g.dataId),this.texData.delete(y.dataId),n.values=null,l&&(this.uploadWaitMs+=at()-c)}else{var b=this.acquireTexture(h,s,o,u);n.texture=b}}},e.prototype.convertAndCacheOnCPU=function(t,e){var n=this.texData.get(t),r=n.dtype;return this.releaseGPUData(t),null!=e&&(n.values=function(t,e){if("float32"===e||"complex64"===e)return t;if("int32"===e||"bool"===e){for(var n="int32"===e?new Int32Array(t.length):new Uint8Array(t.length),r=0;r<n.length;++r)n[r]=Math.round(t[r]);return n}throw new Error("Unknown dtype "+e)}(e,r)),n.values},e.prototype.acquireTexture=function(t,e,n,r){if(this.numBytesInGPU+=this.computeBytes(t,n),!this.warnedAboutMemory&&this.numBytesInGPU>1024*this.numMBBeforeWarning*1024){var o=(this.numBytesInGPU/1024/1024).toFixed(2);this.warnedAboutMemory=!0,console.warn("High memory usage in GPU: "+o+" MB, most likely due to a memory leak")}return this.textureManager.acquireTexture(t,e,r)},e.prototype.computeBytes=function(t,e){return t[0]*t[1]*K(e)},e}(yo);zt()&&Wt.registerBackend("webgl",(function(){return new Hs}),2);var js=Sn({square_:function(t){var e=vn(t,"x","square"),n=[e];return Wt.runKernelFunc((function(t,n){return n([e]),t.square(e)}),{x:e},null,"Square",{},n,[])}}),qs="SquaredDifference",Ks=Sn({squaredDifference_:function(t,e){var n,r=vn(t,"a","squaredDifference"),o=vn(e,"b","squaredDifference");n=Ft(r,o),r=n[0],o=n[1],Co(r.shape,o.shape);var i={a:r,b:o},a=[r,o];return Wt.runKernelFunc((function(t,e){var n=t.squaredDifference(r,o);return e([r,o]),n}),i,(function(t,e){var n=e[0],r=e[1],o=Nn(2);return{a:function(){return t.mul(n.sub(r).mul(o))},b:function(){return t.mul(r.sub(n).mul(o))}}}),qs,{},a,[])}}),Xs=Sn({abs_:function(t){var e=vn(t,"x","abs");return"complex64"===e.dtype?Wt.runKernelFunc((function(t){return t.complexAbs(e)}),{$x:e}):Wt.runKernelFunc((function(t,n){var r=t.abs(e);return n([e]),r}),{x:e},(function(t,e){var n=e[0];return{x:function(){return t.mul(n.toFloat().step(-1))}}}),"Abs")}}),Ys=Sn({acos_:function(t){var e=vn(t,"x","acos");return Wt.runKernelFunc((function(t,n){var r=t.acos(e);return n([e]),r}),{$x:e},(function(t,e){var n=e[0];return{$x:function(){return t.divStrict(Nn(1).sub(n.toFloat().square()).sqrt()).neg()}}}))}}),$s=Sn({acosh_:function(t){var e=vn(t,"x","acosh");return Wt.runKernelFunc((function(t,n){var r=t.acosh(e);return n([e]),r}),{$x:e},(function(t,e){var n=e[0];return{$x:function(){return t.divStrict(n.toFloat().square().sub(1).sqrt())}}}))}}),Js=Sn({asin_:function(t){var e=vn(t,"x","asin");return Wt.runKernelFunc((function(t,n){var r=t.asin(e);return n([e]),r}),{$x:e},(function(t,e){var n=e[0];return{$x:function(){return t.divStrict(Nn(1).sub(n.toFloat().square()).sqrt())}}}))}}),Qs=Sn({asinh_:function(t){var e=vn(t,"x","asinh");return Wt.runKernelFunc((function(t,n){var r=t.asinh(e);return n([e]),r}),{$x:e},(function(t,e){var n=e[0];return{$x:function(){return t.divStrict(Nn(1).add(n.toFloat().square()).sqrt())}}}))}}),Zs=Sn({atan_:function(t){var e=vn(t,"x","atan");return Wt.runKernelFunc((function(t,n){var r=t.atan(e);return n([e]),r}),{$x:e},(function(t,e){var n=e[0];return{$x:function(){return t.div(n.toFloat().square().add(1))}}}))}}),tu=Sn({atanh_:function(t){var e=vn(t,"x","atanh");return Wt.runKernelFunc((function(t,n){var r=t.atanh(e);return n([e]),r}),{$x:e},(function(t,e){var n=e[0];return{$x:function(){return t.div(Nn(1).sub(n.toFloat().square()))}}}))}}),eu=Sn({ceil_:function(t){var e=vn(t,"x","ceil");return Wt.runKernelFunc((function(t){return t.ceil(e)}),{$x:e},(function(t){return{$x:function(){return Kn(t)}}}))}}),nu=Sn({clipByValue_:function(t,e,n){var r=vn(t,"x","clipByValue");S(e<=n,(function(){return"Error in clip: min ("+e+") must be less than or equal to max ("+n+")."}));var o=[r],i={min:e,max:n};return Wt.runKernelFunc((function(t,o){var i=t.clip(r,e,n);return o([r]),i}),{x:r},(function(t,r){var o=r[0];return{x:function(){return t.where(o.greaterEqual(e).logicalAnd(o.lessEqual(n)),Kn(t))}}}),"ClipByValue",i,o)}}),ru=Sn({cos_:function(t){var e=vn(t,"x","cos"),n=[e];return Wt.runKernelFunc((function(t,n){var r=t.cos(e);return n([e]),r}),{x:e},(function(t,e){var n=e[0];return{x:function(){return n.toFloat().sin().neg().mul(t)}}}),"Cos",{},n)}}),ou=Sn({cosh_:function(t){var e=vn(t,"x","cosh");return Wt.runKernelFunc((function(t,n){var r=t.cosh(e);return n([e]),r}),{$x:e},(function(t,e){var n=e[0];return{$x:function(){return n.toFloat().sinh().mulStrict(t)}}}))}}),iu=Sn({erf_:function(t){var e=vn(t,"x","erf");return S("int32"===e.dtype||"float32"===e.dtype,(function(){return"Input dtype must be `int32` or `float32`."})),"int32"===e.dtype&&(e=e.toFloat()),Wt.runKernelFunc((function(t,n){var r=t.erf(e);return n([e]),r}),{$x:e},(function(t,e){var n=e[0];return{$x:function(){return t.mul(n.square().neg().exp().mul(2/Math.sqrt(Math.PI)))}}}))}}),au=Sn({exp_:function(t){var e=vn(t,"x","exp");return Wt.runKernelFunc((function(t,n){var r=t.exp(e);return n([r]),r}),{x:e},(function(t,e){return{x:function(){return t.mulStrict(e[0])}}}),"Exp",{},[],[!0])}}),su=Sn({expm1_:function(t){var e=vn(t,"x","expm1");return Wt.runKernelFunc((function(t,n){var r=t.expm1(e);return n([e]),r}),{$x:e},(function(t,e){var n=e[0];return{$x:function(){return t.mul(n.exp())}}}))}}),uu=Sn({floor_:function(t){var e=vn(t,"x","floor");return Wt.runKernelFunc((function(t){return t.floor(e)}),{$x:e},(function(t){return{$x:function(){return Kn(t)}}}))}}),cu=Sn({log_:function(t){var e=vn(t,"x","log"),n=[e];return Wt.runKernelFunc((function(t,n){var r=t.log(e);return n([e]),r}),{x:e},(function(t,e){var n=e[0];return{x:function(){return t.div(n.toFloat())}}}),"Log",{},n)}}),lu=Sn({log1p_:function(t){var e=vn(t,"x","log1p");return Wt.runKernelFunc((function(t,n){var r=t.log1p(e);return n([e]),r}),{$x:e},(function(t,e){var n=e[0];return{$x:function(){return t.div(n.add(1))}}}))}}),hu=Sn({logSigmoid_:function(t){var e=vn(t,"x","logSigmoid");return Wt.runKernelFunc((function(t,n){var r=t.softplus(e.neg()).neg();return n([e]),r}),{$x:e},(function(t,e){var n=e[0];return{$x:function(){return t.mul(n.neg().sigmoid())}}}))}}),fu=Sn({neg_:function(t){var e=vn(t,"x","neg"),n=[e];return Wt.runKernelFunc((function(t){return t.neg(e)}),{x:e},(function(t){return{x:function(){return t.neg()}}}),"Neg",{},n)}}),pu=Sn({reciprocal_:function(t){var e=vn(t,"x","reciprocal");return Wt.runKernelFunc((function(t,n){var r=t.reciprocal(e);return n([e]),r}),{$x:e},(function(t,e){var n=e[0];return{$x:function(){return t.div(n.square().neg())}}}))}}),du=Sn({round_:function(t){var e=vn(t,"x","round");return Wt.runKernelFunc((function(t){return t.round(e)}),{$x:e},(function(t){return{$x:function(){return Kn(t)}}}))}}),vu=Sn({rsqrt_:function(t){var e=vn(t,"x","rsqrt"),n=[e];return Wt.runKernelFunc((function(t,n){var r=t.rsqrt(e);return n([e]),r}),{x:e},(function(t,e){var n=e[0];return{x:function(){return t.div(n.pow(1.5).mul(2)).neg()}}}),"Rsqrt",{},n)}}),mu=Sn({sigmoid_:function(t){var e=vn(t,"x","sigmoid");return Wt.runKernelFunc((function(t,n){var r=t.sigmoid(e);return n([r]),r}),{x:e},(function(t,e){var n=e[0];return{x:function(){return t.mul(n.mul(Nn(1).sub(n)))}}}),"Sigmoid")}}),gu=Sn({sign_:function(t){var e=vn(t,"x","sign");return Wt.runKernelFunc((function(t){return t.sign(e)}),{$x:e},(function(t){return{$x:function(){return Kn(t)}}}))}}),yu=Sn({isNaN_:function(t){var e=vn(t,"x","isNaN");return Wt.runKernelFunc((function(t){return t.isNaN(e)}),{$x:e},(function(t){return{$x:function(){return Kn(t)}}}))}}),xu=Sn({isInf_:function(t){var e=vn(t,"x","isInf");return Wt.runKernelFunc((function(t){return t.isInf(e)}),{$x:e},(function(t){return{$x:function(){return Kn(t)}}}))}}),bu=Sn({isFinite_:function(t){var e=vn(t,"x","isFinite");return Wt.runKernelFunc((function(t){return t.isFinite(e)}),{$x:e},(function(t){return{$x:function(){return Kn(t)}}}))}}),wu=Sn({sin_:function(t){var e=vn(t,"x","sin"),n=[e];return Wt.runKernelFunc((function(t,n){var r=t.sin(e);return n([e]),r}),{x:e},(function(t,e){var n=e[0];return{x:function(){return n.toFloat().cos().mul(t)}}}),"Sin",{},n)}}),Cu=Sn({sinh_:function(t){var e=vn(t,"x","sinh");return Wt.runKernelFunc((function(t,n){var r=t.sinh(e);return n([e]),r}),{$x:e},(function(t,e){var n=e[0];return{$x:function(){return n.toFloat().cosh().mulStrict(t)}}}))}}),Eu=Sn({softplus_:function(t){var e=vn(t,"x","softplus");return Wt.runKernelFunc((function(t,n){var r=t.softplus(e);return n([e]),r}),{$x:e},(function(t,e){var n=e[0];return{$x:function(){return t.mul(n.sigmoid())}}}))}}),_u=Sn({sqrt_:function(t){var e=vn(t,"x","sqrt");return Wt.runKernelFunc((function(t,n){var r=t.sqrt(e);return n([e]),r}),{$x:e},(function(t,e){var n=e[0];return{$x:function(){return t.div(n.toFloat().sqrt().mul(2))}}}))}}),Iu=Sn({step_:function(t,e){void 0===e&&(e=0);var n=vn(t,"x","step");return Wt.runKernelFunc((function(t){return t.step(n,e)}),{$x:n},(function(t){return{$x:function(){return Kn(t)}}}))}}),Ru=Sn({tan_:function(t){var e=vn(t,"x","tan");return Wt.runKernelFunc((function(t,n){var r=t.tan(e);return n([e]),r}),{$x:e},(function(t,e){var n=e[0];return{$x:function(){return t.div(n.cos().square())}}}))}}),Su=Sn({tanh_:function(t){var e=vn(t,"x","tanh");return Wt.runKernelFunc((function(t,n){var r=t.tanh(e);return n([r]),r}),{x:e},(function(t,e){var n=e[0];return{x:function(){return Nn(1).sub(n.square()).mulStrict(t)}}}),"Tanh",{},null,[!0])}});function ku(t,e,n,r,o,i){var a,s,u=vn(t,"x","batchNorm"),c=vn(e,"mean","batchNorm"),l=vn(n,"variance","batchNorm");return null!=o&&(a=vn(o,"scale","batchNorm")),null!=r&&(s=vn(r,"offset","batchNorm")),S(2===u.rank,(function(){return"Error in batchNorm3D: x must be rank 3 but got rank "+u.rank+"."})),S(2===c.rank||1===c.rank,(function(){return"Error in batchNorm2D: mean must be rank 2 or rank 1 but got rank "+c.rank+"."})),S(2===l.rank||1===l.rank,(function(){return"Error in batchNorm2D: variance must be rank 2 or rank 1 but got rank "+l.rank+"."})),null!=a&&S(2===a.rank||1===a.rank,(function(){return"Error in batchNorm2D: scale must be rank 2 or rank 1 but got rank "+a.rank+"."})),null!=s&&S(2===s.rank||1===s.rank,(function(){return"Error in batchNorm2D: offset must be rank 2 or rank 1 but got rank "+s.rank+"."})),Tu(u,c,l,s,a,i)}function Du(t,e,n,r,o,i){var a,s,u=vn(t,"x","batchNorm"),c=vn(e,"mean","batchNorm"),l=vn(n,"variance","batchNorm");return null!=o&&(a=vn(o,"scale","batchNorm")),null!=r&&(s=vn(r,"offset","batchNorm")),S(3===u.rank,(function(){return"Error in batchNorm3D: x must be rank 3 but got rank "+u.rank+"."})),S(3===c.rank||1===c.rank,(function(){return"Error in batchNorm3D: mean must be rank 3 or rank 1 but got rank "+c.rank+"."})),S(3===l.rank||1===l.rank,(function(){return"Error in batchNorm3D: variance must be rank 3 or rank 1 but got rank "+l.rank+"."})),null!=a&&S(3===a.rank||1===a.rank,(function(){return"Error in batchNorm3D: scale must be rank 3 or rank 1 but got rank "+a.rank+"."})),null!=s&&S(3===s.rank||1===s.rank,(function(){return"Error in batchNorm3D: offset must be rank 3 or rank 1 but got rank "+s.rank+"."})),Tu(u,c,l,s,a,i)}function Au(t,e,n,r,o,i){var a,s,u=vn(t,"x","batchNorm"),c=vn(e,"mean","batchNorm"),l=vn(n,"variance","batchNorm");return null!=o&&(a=vn(o,"scale","batchNorm")),null!=r&&(s=vn(r,"offset","batchNorm")),S(4===u.rank,(function(){return"Error in batchNorm4D: x must be rank 4 but got rank "+u.rank+"."})),S(4===c.rank||1===c.rank,(function(){return"Error in batchNorm4D: mean must be rank 4 or rank 1 but got rank "+c.rank+"."})),S(4===l.rank||1===l.rank,(function(){return"Error in batchNorm4D: variance must be rank 4 or rank 1 but got rank "+l.rank+"."})),null!=a&&S(4===a.rank||1===a.rank,(function(){return"Error in batchNorm4D: scale must be rank 4 or rank 1 but got rank "+a.rank+"."})),null!=s&&S(4===s.rank||1===s.rank,(function(){return"Error in batchNorm4D: offset must be rank 4 or rank 1 but got rank "+s.rank+"."})),Tu(u,c,l,s,a,i)}function Tu(t,e,n,r,o,i){null==i&&(i=.001);var a,s,u,c=vn(t,"x","batchNorm"),l=vn(e,"mean","batchNorm"),h=vn(n,"variance","batchNorm");null!=o&&(a=vn(o,"scale","batchNorm")),null!=r&&(s=vn(r,"offset","batchNorm")),S(l.rank===h.rank,(function(){return"Batch normalization gradient requires mean and variance to have equal ranks."})),S(null==s||l.rank===s.rank,(function(){return"Batch normalization gradient requires mean and offset to have equal ranks."})),S(null==a||l.rank===a.rank,(function(){return"Batch normalization gradient requires mean and scale to have equal ranks."})),u=0===c.rank||1===c.rank?c.as4D(1,1,1,c.size):2===c.rank?c.as4D(1,1,c.shape[0],c.shape[1]):3===c.rank?c.as4D(1,c.shape[0],c.shape[1],c.shape[2]):c;var f=[c,l,h,a];return Wt.runKernelFunc((function(t,e){var n=t.batchNormalization(u,Fu(l),Fu(h),i,Fu(a),Fu(s));return e([c,l,h,a]),n}),{x:c,mean:l,variance:h,scale:a,offset:s},(function(t,e){var n=e,r=n[0],o=n[1],a=n[2],s=n[3],c=null==s?Nn(1):s,l=wo(o.shape,u.shape),h=[];if(1===o.rank){for(var f=0;f<u.shape.length-1;++f)h.push(u.shape[f]);h.push(1)}var p=r.sub(o),d=t.mul(c),v=vu(a.add(Nn(i))),m=v.mul(v).mul(v).mul(Nn(-.5));return{x:function(){return 1===o.rank?t.mul(Br(v.as4D(1,1,1,o.shape[0]),h)).mul(c).reshape(r.shape):t.mul(v).mul(c).reshape(r.shape)},mean:function(){var t=v.mul(Nn(-1)).mul(d);return 1===o.rank&&(t=t.sum(l)),t.reshape(o.shape)},variance:function(){var t=m.mul(p).mul(d);return 1===o.rank&&(t=t.sum(l)),t.reshape(o.shape)},scale:function(){var e=p.mul(v),n=t.mul(e);return 1===o.rank&&(n=n.sum(l)),n.reshape(o.shape)},offset:function(){var e=t;return 1===o.rank&&(e=e.sum(l)),e.reshape(o.shape)}}}),"BatchNormalization",{varianceEpsilon:i},f).reshape(c.shape)}function Fu(t){return null==t?null:0===t.rank?t.as1D():1===t.rank?t:2===t.rank?t.as4D(1,1,t.shape[0],t.shape[1]):3===t.rank?t.as4D(1,t.shape[0],t.shape[1],t.shape[2]):t}function Nu(){Ke("tf.batchNormalization() is going away. Use tf.batchNorm() instead, and note the positional argument change of scale, offset, and varianceEpsilon")}var Mu=Sn({batchNormalization2d_:function(t,e,n,r,o,i){return void 0===r&&(r=.001),Nu(),ku(t,e,n,i,o,r)}}),Ou=Sn({batchNormalization3d_:function(t,e,n,r,o,i){return void 0===r&&(r=.001),Nu(),Du(t,e,n,i,o,r)}}),Pu=Sn({batchNormalization4d_:function(t,e,n,r,o,i){return void 0===r&&(r=.001),Nu(),Au(t,e,n,i,o,r)}}),Bu=Sn({batchNormalization_:function(t,e,n,r,o,i){return void 0===r&&(r=.001),Nu(),Tu(t,e,n,i,o,r)}}),Lu=Sn({batchNorm_:Tu}),Wu=Sn({batchNorm2d_:ku}),zu=Sn({batchNorm3d_:Du}),Uu=Sn({batchNorm4d_:Au}),Vu=Sn({logicalAnd_:function(t,e){var n=vn(t,"a","logicalAnd","bool"),r=vn(e,"b","logicalAnd","bool");return Co(n.shape,r.shape),Wt.runKernelFunc((function(t){return t.logicalAnd(n,r)}),{a:n,b:r},null,"LogicalAnd")}}),Gu=Sn({logicalNot_:function(t){var e=vn(t,"x","logicalNot","bool");return Wt.runKernelFunc((function(t){return t.logicalNot(e)}),{$x:e})}}),Hu=Sn({logicalOr_:function(t,e){var n=vn(t,"a","logicalOr","bool"),r=vn(e,"b","logicalOr","bool");return Co(n.shape,r.shape),Wt.runKernelFunc((function(t){return t.logicalOr(n,r)}),{$a:n,$b:r})}}),ju=Sn({logicalXor_:function(t,e){var n=vn(t,"a","logicalXor","bool"),r=vn(e,"b","logicalXor","bool");return Co(n.shape,r.shape),Hu(t,e).logicalAnd(Vu(t,e).logicalNot())}}),qu=Sn({where_:function(t,e,n){var r=vn(e,"a","where"),o=vn(n,"b","where"),i=vn(t,"condition","where","bool");return k(r.shape,o.shape,"Error in where: "),1===i.rank?S(i.shape[0]===r.shape[0],(function(){return"The first dimension of `a` must match the size of `condition`."})):k(i.shape,o.shape,"Error in where: "),Wt.runKernelFunc((function(t,e){var n=t.select(i,r,o);return e([i]),n}),{$condition:i,$a:r,$b:o},(function(t,e){var n=e[0];return{$condition:function(){return Kn(n).toFloat()},$a:function(){return t.mul(n.cast(t.dtype))},$b:function(){return t.mul(n.logicalNot().cast(t.dtype))}}}))}}),Ku=function(t){return u(this,void 0,void 0,(function(){var e,n,r;return c(this,(function(o){switch(o.label){case 0:return[4,(e=vn(t,"condition","whereAsync","bool")).data()];case 1:return n=o.sent(),r=ti(e.shape,n),t!==e&&e.dispose(),[2,r]}}))}))},Xu=Sn({add_:function(t,e){var n,r=vn(t,"a","add"),o=vn(e,"b","add");n=Ft(r,o),r=n[0],o=n[1];var i=Co(r.shape,o.shape);return Wt.runKernelFunc((function(t){return t.add(r,o)}),{a:r,b:o},(function(t){return{a:function(){var e=t,n=wo(r.shape,i);return n.length>0&&(e=e.sum(n)),e.reshape(r.shape)},b:function(){var e=t,n=wo(o.shape,i);return n.length>0&&(e=e.sum(n)),e.reshape(o.shape)}}}),"Add")}}),Yu=Sn({addN_:function(t){S(Array.isArray(t),(function(){return"The argument passed to tf.addN() must be a list of tensors"})),S(t.length>=1,(function(){return"Must pass at least one tensor to tf.addN(), but got "+t.length}));var e=t.map((function(t,e){return vn(t,"tensors"+e,"addN")})),n=e[0];e.forEach((function(t){if(t.dtype!==n.dtype)throw new Error("All tensors passed to tf.addN() must have the same dtype")})),e.forEach((function(t){if(!F(t.shape,n.shape))throw new Error("All tensors passed to tf.addN() must have the same shape")}));var r=e;return Wt.runKernelFunc((function(t){return t.addN(e)}),r,(function(t){var n={};return e.forEach((function(e,r){n[r]=function(){return t.clone()}})),n}),"AddN")}}),$u=Sn({addStrict_:function(t,e){var n=vn(t,"a","addStrict"),r=vn(e,"b","addStrict");return k(n.shape,r.shape,"Error in addStrict: "),n.add(r)}}),Ju=Sn({atan2_:function(t,e){var n,r=vn(t,"a","atan2"),o=vn(e,"b","atan2");n=Ft(r,o),r=n[0],o=n[1];var i=Co(r.shape,o.shape);return Wt.runKernelFunc((function(t,e){var n=t.atan2(r,o);return e([r,o]),n}),{$a:r,$b:o},(function(t,e){var n=e[0],r=e[1];return{$a:function(){var e=Xu(n.square(),r.square()),o=t.mul(r.div(e)),a=wo(n.shape,i);return a.length>0&&(o=o.sum(a)),o.reshape(n.shape)},$b:function(){var e=Xu(n.square(),r.square()),o=fu(t.mul(n.div(e))),a=wo(r.shape,i);return a.length>0&&(o=o.sum(a)),o.reshape(r.shape)}}}))}}),Qu=Sn({div_:function(t,e){var n,r=vn(t,"a","div"),o=vn(e,"b","div");if(n=Ft(r,o),r=n[0],o=n[1],"int32"===r.dtype&&"int32"===o.dtype)return ec(r,o);var i=Co(r.shape,o.shape);return Wt.runKernelFunc((function(t,e){var n=t.realDivide(r,o);return e([r,o]),n}),{a:r,b:o},(function(t,e){var n=e[0],r=e[1];return{a:function(){var e=t.div(r.toFloat()),o=wo(n.shape,i);return o.length>0?e.sum(o).reshape(n.shape):e},b:function(){var e=t.mul(n.toFloat()),o=wo(r.shape,i);o.length>0&&(e=e.sum(o).reshape(r.shape));var a=r.square();return e.div(a.toFloat()).neg()}}}),"Div")}}),Zu=Sn({divNoNan_:function(t,e){var n,r=vn(t,"a","div"),o=vn(e,"b","div");r=(n=Ft(r,o))[0],o=n[1];var i=Qu(r,o),a=Kn(i),s=o.equal(a);return qu(s,a,i)}}),tc=Sn({divStrict_:function(t,e){var n=vn(t,"a","div"),r=vn(e,"b","div");return k(n.shape,r.shape,"Error in divideStrict: "),n.div(r)}}),ec=Sn({floorDiv_:function(t,e){var n,r=vn(t,"a","floorDiv"),o=vn(e,"b","floorDiv");n=Ft(r,o),r=n[0],o=n[1];var i=Co(r.shape,o.shape);return Wt.runKernelFunc((function(t,e){var n=t.floorDiv(r,o);return e([r,o]),n}),{a:r,b:o},(function(t,e){var n=e[0],r=e[1];return{a:function(){var e=t.div(r.toFloat()),o=wo(n.shape,i);return o.length>0?e.sum(o).reshape(n.shape):e},b:function(){var e=t.mul(n.toFloat()),o=wo(r.shape,i);o.length>0&&(e=e.sum(o).reshape(r.shape));var a=r.square();return e.div(a.toFloat()).neg()}}}),"FloorDiv")}}),nc=Sn({maximum_:function(t,e){var n,r=vn(t,"a","maximum"),o=vn(e,"b","maximum");return n=Ft(r,o),r=n[0],o=n[1],"bool"===r.dtype&&(r=r.toInt(),o=o.toInt()),Co(r.shape,o.shape),Wt.runKernelFunc((function(t,e){var n=t.maximum(r,o);return e([r,o]),n}),{a:r,b:o},(function(t,e){var n=e[0],r=e[1];return{a:function(){return t.mul(n.greaterEqual(r).toFloat())},b:function(){return t.mul(n.less(r).toFloat())}}}),"Maximum")}}),rc=Sn({maximumStrict_:function(t,e){var n=vn(t,"a","maximumStrict"),r=vn(e,"b","maximumStrict");return k(n.shape,r.shape,"Error in maximumStrict: "),n.maximum(r)}}),oc=Sn({minimum_:function(t,e){var n,r=vn(t,"a","minimum"),o=vn(e,"b","minimum");return n=Ft(r,o),r=n[0],o=n[1],"bool"===r.dtype&&(r=r.toInt(),o=o.toInt()),Co(r.shape,o.shape),Wt.runKernelFunc((function(t,e){var n=t.minimum(r,o);return e([r,o]),n}),{a:r,b:o},(function(t,e){var n=e[0],r=e[1];return{a:function(){return t.mul(n.lessEqual(r).toFloat())},b:function(){return t.mul(n.greater(r).toFloat())}}}),"Minimum")}}),ic=Sn({minimumStrict_:function(t,e){var n=vn(t,"a","minimumStrict"),r=vn(e,"b","minimumStrict");return k(n.shape,r.shape,"Error in minimumStrict: "),n.minimum(r)}}),ac=Sn({mod_:function(t,e){var n,r=vn(t,"a","mod"),o=vn(e,"b","mod");n=Ft(r,o),r=n[0],o=n[1];var i=Co(r.shape,o.shape);return Wt.runKernelFunc((function(t,e){var n=t.mod(r,o);return e([r,o]),n}),{$a:r,$b:o},(function(t,e){var n=e[0],r=e[1];return{$a:function(){var e=wo(n.shape,i);return e.length>0?t.sum(e).reshape(n.shape):t},$b:function(){var e=t.mul(n.div(r).floor().neg()),o=wo(r.shape,i);return o.length>0?e.sum(o).reshape(r.shape):e}}}))}}),sc=Sn({modStrict_:function(t,e){var n=vn(t,"a","modStrict"),r=vn(e,"b","modStrict");return k(n.shape,r.shape,"Error in modStrict: "),n.mod(r)}}),uc=Sn({mul_:function(t,e){var n,r=vn(t,"a","mul"),o=vn(e,"b","mul");n=Ft(r,o),r=n[0],o=n[1];var i=Co(r.shape,o.shape);return Wt.runKernelFunc((function(t,e){var n=t.multiply(r,o);return e([r,o]),n}),{a:r,b:o},(function(t,e){var n=e[0],r=e[1];return{a:function(){var e=t.mul(r.toFloat()),o=wo(n.shape,i);return o.length>0?e.sum(o).reshape(n.shape):e},b:function(){var e=t.mul(n.toFloat()),o=wo(r.shape,i);return o.length>0?e.sum(o).reshape(r.shape):e}}}),"Mul")}}),cc=Sn({mulStrict_:function(t,e){var n=vn(t,"a","mul"),r=vn(e,"b","mul");return k(n.shape,r.shape,"Error in multiplyStrict: "),n.mul(r)}}),lc=Sn({pow_:function(t,e){var n,r=vn(t,"base","pow"),o=vn(e,"exp","pow");n=Ft(r,o),r=n[0],o=n[1];var i=Co(r.shape,o.shape),a=[r,o];return Wt.runKernelFunc((function(t,e){var n=t.pow(r,o);return e([r,o,n]),n}),{a:r,b:o},(function(t,e){var n=e[0],r=e[1],o=e[2];return{a:function(){var e=r.toFloat(),o=t.mul(e.mul(n.pow(e.sub(Nn(1))))),a=wo(n.shape,i);return a.length>0&&(o=o.sum(a)),o.reshape(n.shape)},b:function(){var e=n.greater(0),a=n.log().where(e,Kn(n)),s=t.mul(o.mul(a)),u=wo(r.shape,i);return u.length>0&&(s=s.sum(u)),s.reshape(r.shape)}}}),"Pow",{},a,[!0])}}),hc=Sn({powStrict_:function(t,e){return k(t.shape,e.shape,"Error in powStrict: "),t.pow(e)}}),fc=Sn({squaredDifferenceStrict_:function(t,e){var n=vn(t,"a","squaredDifferenceStrict"),r=vn(e,"b","squaredDifferenceStrict");return k(n.shape,r.shape,"Error in squaredDifferenceStrict: "),n.squaredDifference(r)}}),pc=Sn({sub_:function(t,e){var n,r=vn(t,"a","sub"),o=vn(e,"b","sub");n=Ft(r,o),r=n[0],o=n[1];var i=Co(r.shape,o.shape);return Wt.runKernelFunc((function(t){return t.subtract(r,o)}),{a:r,b:o},(function(t){return{a:function(){var e=t,n=wo(r.shape,i);return n.length>0&&(e=e.sum(n)),e.reshape(r.shape)},b:function(){var e=t,n=wo(o.shape,i);return n.length>0&&(e=e.sum(n)),e.neg().reshape(o.shape)}}}),"Sub")}}),dc=Sn({subStrict_:function(t,e){var n=vn(t,"a","subStrict"),r=vn(e,"b","subStrict");return k(n.shape,r.shape,"Error in subStrict: "),n.sub(r)}}),vc=Sn({equal_:function(t,e){var n,r=vn(t,"a","equal"),o=vn(e,"b","equal");return n=Ft(r,o),r=n[0],o=n[1],Co(r.shape,o.shape),Wt.runKernelFunc((function(t){return t.equal(r,o)}),{$a:r,$b:o})}}),mc=Sn({equalStrict_:function(t,e){var n=vn(t,"a","equalStrict"),r=vn(e,"b","equalStrict");return k(n.shape,r.shape,"Error in equalStrict: "),n.equal(r)}}),gc=Sn({greater_:function(t,e){var n,r=vn(t,"a","greater"),o=vn(e,"b","greater");return n=Ft(r,o),r=n[0],o=n[1],Co(r.shape,o.shape),Wt.runKernelFunc((function(t){return t.greater(r,o)}),{a:r,b:o},null,"Greater")}}),yc=Sn({greaterEqual_:function(t,e){var n,r=vn(t,"a","greaterEqual"),o=vn(e,"b","greaterEqual");return n=Ft(r,o),r=n[0],o=n[1],Co(r.shape,o.shape),Wt.runKernelFunc((function(t,e){var n=t.greaterEqual(r,o);return e([r,o]),n}),{a:r,b:o},(function(t,e){var n=e[0],r=e[1];return{a:function(){return Kn(n)},b:function(){return Kn(r)}}}),"GreaterEqual")}}),xc=Sn({greaterEqualStrict_:function(t,e){var n=vn(t,"a","greaterEqualStrict"),r=vn(e,"b","greaterEqualStrict");return k(n.shape,r.shape,"Error in greaterEqualStrict: "),n.greaterEqual(r)}}),bc=Sn({greaterStrict_:function(t,e){var n=vn(t,"a","greaterStrict"),r=vn(e,"b","greaterStrict");return k(n.shape,r.shape,"Error in greaterStrict: "),n.greater(r)}}),wc=Sn({less_:function(t,e){var n,r=vn(t,"a","less"),o=vn(e,"b","less");return n=Ft(r,o),r=n[0],o=n[1],Co(r.shape,o.shape),Wt.runKernelFunc((function(t){return t.less(r,o)}),{a:r,b:o},null,"Less")}}),Cc=Sn({lessEqual_:function(t,e){var n,r=vn(t,"a","lessEqual"),o=vn(e,"b","lessEqual");return n=Ft(r,o),r=n[0],o=n[1],Co(r.shape,o.shape),Wt.runKernelFunc((function(t,e){var n=t.lessEqual(r,o);return e([r,o]),n}),{a:r,b:o},null,"LessEqual")}}),Ec=Sn({lessEqualStrict_:function(t,e){var n=vn(t,"a","lessEqualStrict"),r=vn(e,"b","lessEqualStrict");return k(n.shape,r.shape,"Error in lessEqualStrict: "),n.lessEqual(r)}}),_c=Sn({lessStrict_:function(t,e){var n=vn(t,"a","lessStrict"),r=vn(e,"b","lessStrict");return k(n.shape,r.shape,"Error in lessStrict: "),n.less(r)}}),Ic=Sn({notEqual_:function(t,e){var n,r=vn(t,"a","notEqual"),o=vn(e,"b","notEqual");return n=Ft(r,o),r=n[0],o=n[1],Co(r.shape,o.shape),Wt.runKernelFunc((function(t){return t.notEqual(r,o)}),{a:r,b:o},null,"NotEqual")}}),Rc=Sn({notEqualStrict_:function(t,e){var n=vn(t,"a","notEqualStrict"),r=vn(e,"b","notEqualStrict");return k(n.shape,r.shape,"Error in notEqualStrict: "),n.notEqual(r)}});function Sc(t,e){for(var n=[],r=t;r<e;++r)n.push(r);return n}function kc(t){for(var e=[],n=0;n<t.length;++n)for(var r=0;r<t[n].length;++r)e.push(t[n][r]);return e}var Dc=Sn({gather_:function(t,e,n){void 0===n&&(n=0);var r=vn(t,"x","gather"),o=vn(e,"indices","gather","int32");n=W(n,r.shape)[0];var i=function(t,e,n){for(var r=t.shape[n],o=[],i=1,a=1,s=0;s<n;s++)o.push(t.shape[s]),i*=t.shape[s];for(s=0;s<e.rank;s++)o.push(e.shape[s]);for(s=n+1;s<t.rank;s++)o.push(t.shape[s]),a*=t.shape[s];return{batchSize:i,sliceSize:a,dimSize:r,outputShape:o}}(r,o,n);return Wt.runKernelFunc((function(t,e){var i=t.gather(r,o.flatten(),n);return e([o]),i}),{x:r,indices:o},(function(t,e){var o=e[0];return{x:function(){var e=r.shape,i=o.size,a=e.slice(0,n),s=a.length,u=e.slice(n,e.length).slice(1),c=u.length,l=Sc(0,s),h=Sc(s+1,s+1+c),f=kc([a,[i],u]),p=t.reshape(f),d=o.reshape([i]),v=kc([[s],l,h]),m=p.transpose(v),g=Ac(m,d,r.shape[n]),y=En(v);return g.transpose(y)},indices:function(){return o}}}),"Gather",{axis:n}).reshape(i.outputShape)}}),Ac=Sn({unsortedSegmentSum_:function(t,e,n){var r=vn(t,"x","unsortedSegmentSum"),o=vn(e,"segmentIds","unsortedSegmentSum","int32");return S(N(n),(function(){return"numSegments must be of dtype int"})),Wt.runKernelFunc((function(t,e){var i=t.unsortedSegmentSum(r,o,n);return e([o]),i}),{$x:r},(function(t,e){var n=e[0];return{$x:function(){return function(t,e){for(var n=nc(e,Kn(e)),r=Dc(t,n),o=yc(e,Nn(0,"int32")),i=r.rank-o.rank,a=0;a<i;++a)o=br(o,a+1);o=Vu(o,Un(r.shape,"bool"));var s=Kn(r);return qu(o,r,s)}(t,n)}}}))}}),Tc=function(t,e,n){return u(this,void 0,void 0,(function(){var r,o,i,a,s,u,l,h,f,p,d,v,m;return c(this,(function(c){switch(c.label){case 0:for(r=vn(t,"tensor","boolMask"),o=vn(e,"mask","boolMask","bool"),i=null==n?0:n,a=o.rank,s=r.shape,S(a>0,(function(){return"mask cannot be scalar"})),k(s.slice(i,i+a),o.shape,"mask's shape must match the first K dimensions of tensor's shape,"),u=1,l=i;l<i+a;l++)u*=s[l];return h=s.slice(0,i).concat([u],s.slice(i+a)),f=r.reshape(h),p=o.reshape([-1]),[4,Ku(p)];case 1:return d=c.sent(),v=d.squeeze([1]),m=Dc(f,v,i),t!==r&&r.dispose(),e!==o&&o.dispose(),v.dispose(),f.dispose(),p.dispose(),d.dispose(),[2,m]}}))}))};function Fc(t,e,n,r,o,i,a){void 0===i&&(i="NHWC"),S(t.length===e.rank,(function(){return"Length of inShape ("+t.length+") and rank of dy ("+e.rank+") must match"}));var s=t,u=e,c=!1;3===e.rank&&(c=!0,u=e.as4D(1,e.shape[0],e.shape[1],e.shape[2]),s=[1,t[0],t[1],t[2]]),S(4===s.length,(function(){return"Error in conv2dDerInput: inShape must be length 4, but got length "+s.length+"."})),S(4===u.rank,(function(){return"Error in conv2dDerInput: dy must be rank 4, but got rank "+u.rank})),S(4===n.rank,(function(){return"Error in conv2dDerInput: filter must be rank 4, but got rank "+n.rank}));var l="NHWC"===i?s[3]:s[1],h="NHWC"===i?u.shape[3]:u.shape[1];S(l===n.shape[2],(function(){return"Error in conv2dDerInput: depth of input ("+l+") must match input depth for filter "+n.shape[2]+"."})),S(h===n.shape[3],(function(){return"Error in conv2dDerInput: depth of output ("+h+") must match output depth for filter "+n.shape[3]+"."})),null!=a&&S(N(o),(function(){return"Error in conv2dDerInput: pad must be an integer when using, dimRoundingMode "+a+" but got pad "+o+"."}));var f=Mo(i),p=Io(s,n.shape,r,1,o,a,!1,f),d=Wt.runKernelFunc((function(t,e){var r=t.conv2dDerInput(u,n,p);return e([n,u]),r}),{dy4D:u,filter:n},(function(t,e){var n=e[0],s=e[1];return{dy4D:function(){return Pc(t,n,r,o,i,1,a)},filter:function(){return Lc(t,s,n.shape,r,o,i,a)}}}));return c?d.as3D(d.shape[1],d.shape[2],d.shape[3]):d}function Nc(t){var e=function(t){return"number"==typeof t?[t,t,t]:2===t.length?[t[0],t[1],1]:t}(t),n=e[0],r=e[1],o=e[2];return 1===n&&1===r&&1===o}function Mc(t,e,n,r,o){S(t.length===e.rank,(function(){return"Length of inShape ("+t.length+") and rank of dy ("+e.rank+") must match"}));var i=t,a=e,s=!1;4===e.rank&&(s=!0,a=e.as5D(1,e.shape[0],e.shape[1],e.shape[2],e.shape[3]),i=[1,t[0],t[1],t[2],t[3]]);var u=i[4],c=a.shape[4];S(5===i.length,(function(){return"Error in conv3dDerInput: inShape must be length 5, but got length "+i.length+"."})),S(5===a.rank,(function(){return"Error in conv3dDerInput: dy must be rank 5, but got rank "+a.rank})),S(5===n.rank,(function(){return"Error in conv3dDerInput: filter must be rank 5, but got rank "+n.rank})),S(u===n.shape[3],(function(){return"Error in conv3dDerInput: depth of input ("+u+") must match input depth for filter "+n.shape[3]+"."})),S(c===n.shape[4],(function(){return"Error in conv3dDerInput: depth of output ("+c+") must match output depth for filter "+n.shape[4]+"."}));var l=Ro(i,n.shape,r,1,o),h=Wt.runKernelFunc((function(t){return t.conv3dDerInput(a,n,l)}),{dy5D:a});return s?h.as4D(h.shape[1],h.shape[2],h.shape[3],h.shape[4]):h}var Oc=Sn({conv1d_:function(t,e,n,r,o,i,a){void 0===o&&(o="NWC"),void 0===i&&(i=1);var s=vn(t,"x","conv1d"),u=vn(e,"filter","conv1d"),c=s,l=!1;2===s.rank&&(l=!0,c=s.as3D(1,s.shape[0],s.shape[1])),S(3===c.rank,(function(){return"Error in conv1d: input must be rank 3, but got rank "+c.rank+"."})),S(3===u.rank,(function(){return"Error in conv1d: filter must be rank 3, but got rank "+u.rank+"."})),null!=a&&S(N(r),(function(){return"Error in conv1d: pad must be an integer when using, dimRoundingMode "+a+" but got pad "+r+"."})),S(c.shape[2]===u.shape[1],(function(){return"Error in conv1d: depth of input ("+c.shape[2]+") must match input depth for filter "+u.shape[1]+"."})),S(No(n,i),(function(){return"Error in conv1D: Either stride or dilation must be 1. Got stride "+n+" and dilation '"+i+"'"})),S("NWC"===o,(function(){return"Error in conv1d: got dataFormat of "+o+" but only NWC is currently supported."}));var h=u.as4D(1,u.shape[0],u.shape[1],u.shape[2]),f=c.as4D(c.shape[0],1,c.shape[1],c.shape[2]),p=Pc(f,h,[1,n],r,"NHWC",[1,i],a);return l?p.as2D(p.shape[2],p.shape[3]):p.as3D(p.shape[0],p.shape[2],p.shape[3])}}),Pc=Sn({conv2d_:function(t,e,n,r,o,i,a){void 0===o&&(o="NHWC"),void 0===i&&(i=[1,1]);var s=vn(t,"x","conv2d"),u=vn(e,"filter","conv2d"),c=s,l=!1;3===s.rank&&(l=!0,c=s.as4D(1,s.shape[0],s.shape[1],s.shape[2])),S(4===c.rank,(function(){return"Error in conv2d: input must be rank 4, but got rank "+c.rank+"."})),S(4===u.rank,(function(){return"Error in conv2d: filter must be rank 4, but got rank "+u.rank+"."})),null!=a&&S(N(r),(function(){return"Error in conv2d: pad must be an integer when using, dimRoundingMode "+a+" but got pad "+r+"."}));var h="NHWC"===o?c.shape[3]:c.shape[1];S(h===u.shape[2],(function(){return"Error in conv2d: depth of input ("+h+") must match input depth for filter "+u.shape[2]+"."})),S(No(n,i),(function(){return"Error in conv2D: Either strides or dilations must be 1. Got strides "+n+" and dilations '"+i+"'"}));var f=Mo(o),p=Io(c.shape,u.shape,n,i,r,a,!1,f),d=[u,c],v=Wt.runKernelFunc((function(t,e){var n=t.conv2d(c,u,p);return e([u,c]),n}),{x:c,filter:u},(function(t,e){var a=e,s=a[0],u=a[1];return S(Fo(i),(function(){return"Error in gradient of conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '"+i+"'"})),{x:function(){return Wc(u.shape,t,s,n,r,o)},filter:function(){return Lc(u,t,s.shape,n,r,o)}}}),"Conv2D",p,d);return l?v.as3D(v.shape[1],v.shape[2],v.shape[3]):v}}),Bc=Sn({conv3d_:function(t,e,n,r,o,i){void 0===o&&(o="NDHWC"),void 0===i&&(i=[1,1,1]);var a=vn(t,"x","conv3d"),s=vn(e,"filter","conv3d"),u=a,c=!1;4===a.rank&&(c=!0,u=a.as5D(1,a.shape[0],a.shape[1],a.shape[2],a.shape[3])),S(5===u.rank,(function(){return"Error in conv3d: input must be rank 5, but got rank "+u.rank+"."})),S(5===s.rank,(function(){return"Error in conv3d: filter must be rank 5, but got rank "+s.rank+"."})),S(u.shape[4]===s.shape[3],(function(){return"Error in conv3d: depth of input ("+u.shape[4]+") must match input depth for filter "+s.shape[3]+"."})),S(function(t,e){return Nc(t)||Nc(e)}(n,i),(function(){return"Error in conv3D: Either strides or dilations must be 1. Got strides "+n+" and dilations '"+i+"'"})),S("NDHWC"===o,(function(){return"Error in conv3d: got dataFormat of "+o+" but only NDHWC is currently supported."}));var l=Ro(u.shape,s.shape,n,i,r),h=Wt.runKernelFunc((function(t,e){var n=t.conv3d(u,s,l);return e([u,s]),n}),{x:u,$filter:s},(function(t,e){S(Nc(i),(function(){return"Error in gradient of conv3D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '"+i+"'"}));var o=e[0],a=e[1];return{x:function(){return Mc(o.shape,t,a,n,r)},$filter:function(){return function(t,e,n,r,o){var i=t;4===t.rank&&(i=t.as5D(1,t.shape[0],t.shape[1],t.shape[2],t.shape[3]));var a=e;4===a.rank&&(a=e.as5D(1,e.shape[0],e.shape[1],e.shape[2],e.shape[3])),S(5===i.rank,(function(){return"Error in conv3dDerFilter: input must be rank 5, but got shape "+i.shape+"."})),S(5===a.rank,(function(){return"Error in conv3dDerFilter: dy must be rank 5, but got shape "+a.shape+"."})),S(5===n.length,(function(){return"Error in conv3dDerFilter: filterShape must be length 5, but got "+n+"."})),S(i.shape[4]===n[3],(function(){return"Error in conv3dDerFilter: depth of input "+i.shape[4]+") must match input depth in filter ("+n[3]+"."})),S(a.shape[4]===n[4],(function(){return"Error in conv3dDerFilter: depth of dy ("+a.shape[4]+") must match output depth for filter ("+n[4]+")."}));var s=Ro(i.shape,n,r,1,o);return Wt.runKernelFunc((function(t){return t.conv3dDerFilter(i,a,s)}),{x5D:i,dy5D:a})}(o,t,a.shape,n,r)}}}));return c?h.as4D(h.shape[1],h.shape[2],h.shape[3],h.shape[4]):h}}),Lc=Sn({conv2dDerFilter_:function(t,e,n,r,o,i,a){void 0===i&&(i="NHWC");var s=t;3===t.rank&&(s=t.as4D(1,t.shape[0],t.shape[1],t.shape[2]));var u=e;3===u.rank&&(u=e.as4D(1,e.shape[0],e.shape[1],e.shape[2])),S(4===s.rank,(function(){return"Error in conv2dDerFilter: input must be rank 4, but got shape "+s.shape+"."})),S(4===u.rank,(function(){return"Error in conv2dDerFilter: dy must be rank 4, but got shape "+u.shape+"."})),S(4===n.length,(function(){return"Error in conv2dDerFilter: filterShape must be length 4, but got "+n+"."}));var c="NHWC"===i?s.shape[3]:s.shape[1],l="NHWC"===i?u.shape[3]:u.shape[1];S(c===n[2],(function(){return"Error in conv2dDerFilter: depth of input "+c+") must match input depth in filter ("+n[2]+"."})),S(l===n[3],(function(){return"Error in conv2dDerFilter: depth of dy ("+l+") must match output depth for filter ("+n[3]+")."})),null!=a&&S(N(o),(function(){return"Error in conv2dDerFilter: pad must be an integer when using, dimRoundingMode "+a+" but got pad "+o+"."}));var h=Mo(i),f=Io(s.shape,n,r,1,o,a,!1,h);return Wt.runKernelFunc((function(t){return t.conv2dDerFilter(s,u,f)}),{x4D:s,dy4D:u})}}),Wc=Sn({conv2dDerInput_:Fc}),zc=Sn({depthwiseConv2d_:function(t,e,n,r,o,i,a){void 0===o&&(o="NHWC"),void 0===i&&(i=[1,1]);var s=vn(t,"x","depthwiseConv2d"),u=vn(e,"filter","depthwiseConv2d"),c=s,l=!1;3===s.rank&&(l=!0,c=s.as4D(1,s.shape[0],s.shape[1],s.shape[2])),S(4===c.rank,(function(){return"Error in depthwiseConv2d: input must be rank 4, but got rank "+c.rank+"."})),S(4===u.rank,(function(){return"Error in depthwiseConv2d: filter must be rank 4, but got rank "+u.rank+"."})),S(c.shape[3]===u.shape[2],(function(){return"Error in depthwiseConv2d: number of input channels ("+c.shape[3]+") must match the inChannels dimension in filter "+u.shape[2]+"."})),null==i&&(i=[1,1]),S(No(n,i),(function(){return"Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides "+n+" and dilations '"+i+"'"})),null!=a&&S(N(r),(function(){return"Error in depthwiseConv2d: pad must be an integer when using, dimRoundingMode "+a+" but got pad "+r+"."}));var h=Io(c.shape,u.shape,n,i,r,a,!0),f=[c,u],p=Wt.runKernelFunc((function(t,e){var n=t.depthwiseConv2D(c,u,h);return e([c,u]),n}),{x:c,filter:u},(function(t,e){S(Fo(i),(function(){return"Error in gradient of depthwiseConv2d: dilation rates greater than 1 are not yet supported. Got dilations '"+i+"'"}));var n=e[0],r=e[1];return{x:function(){return Uc(n.shape,t,r,h)},filter:function(){return Vc(n,t,r.shape,h)}}}),"DepthwiseConv2dNative",h,f);return l?p.as3D(p.shape[1],p.shape[2],p.shape[3]):p}}),Uc=Sn({depthwiseConv2dDerInput_:function(t,e,n,r){var o=e,i=!1;3===e.rank&&(i=!0,o=e.as4D(1,e.shape[0],e.shape[1],e.shape[2]));var a=Wt.runKernelFunc((function(t){return t.depthwiseConv2DDerInput(o,n,r)}),{dy4D:o});return i?a.as3D(a.shape[1],a.shape[2],a.shape[3]):a}}),Vc=Sn({depthwiseConv2dDerFilter_:function(t,e,n,r){var o=t;3===t.rank&&(o=t.as4D(1,t.shape[0],t.shape[1],t.shape[2]));var i=e;return 3===i.rank&&(i=e.as4D(1,e.shape[0],e.shape[1],e.shape[2])),Wt.runKernelFunc((function(t){return t.depthwiseConv2DDerFilter(o,i,r)}),{x4D:o,dy4D:i})}}),Gc=Sn({separableConv2d_:function(t,e,n,r,o,i,a){void 0===i&&(i=[1,1]),void 0===a&&(a="NHWC");var s=vn(t,"x","separableConv2d"),u=vn(e,"depthwiseFilter","separableConv2d"),c=vn(n,"pointwiseFilter","separableConv2d"),l=s,h=!1;if(3===s.rank&&(h=!0,l=s.as4D(1,s.shape[0],s.shape[1],s.shape[2])),"NCHW"===a)throw new Error("separableConv2d currently does not support dataFormat NCHW; only NHWC is supported");S(4===l.rank,(function(){return"Error in separableConv2d: input must be rank 4, but got rank "+l.rank+"."})),S(4===u.rank,(function(){return"Error in separableConv2d: depthwise filter must be rank 4, but got rank "+u.rank+"."})),S(4===c.rank,(function(){return"Error in separableConv2d: pointwise filter must be rank 4, but got rank "+u.rank+"."})),S(1===c.shape[0],(function(){return"Error in separableConv2d: the first dimension of pointwise filter  must be 1, but got "+c.shape[0]+"."})),S(1===c.shape[1],(function(){return"Error in separableConv2d: the second dimension of pointwise filter must be 1, but got "+c.shape[1]+"."}));var f=u.shape[2],p=u.shape[3];S(c.shape[2]===f*p,(function(){return"Error in separableConv2d: the third dimension of pointwise filter must be "+f*p+", but got "+c.shape[2]+"."}));var d=zc(l,u,r,o,a,i),v=Pc(d,c,1,"valid",a);return h?v.as3D(v.shape[1],v.shape[2],v.shape[3]):v}}),Hc=Sn({conv2dTranspose_:function(t,e,n,r,o,i){return Fc(n,vn(t,"x","conv2dTranspose"),vn(e,"filter","conv2dTranspose"),r,o,"NHWC",i)}}),jc=Sn({conv3dTranspose_:function(t,e,n,r,o){return Mc(n,vn(t,"x","conv3dTranspose"),vn(e,"filter","conv3dTranspose"),r,o)}}),qc=Sn({matMul_:function(t,e,n,r){var o;void 0===n&&(n=!1),void 0===r&&(r=!1);var i=vn(t,"a","matMul"),a=vn(e,"b","matMul");o=Ft(i,a),i=o[0],a=o[1];var s=n?i.shape[i.rank-2]:i.shape[i.rank-1],u=r?a.shape[a.rank-1]:a.shape[a.rank-2],c=n?i.shape[i.rank-1]:i.shape[i.rank-2],l=r?a.shape[a.rank-2]:a.shape[a.rank-1],h=i.shape.slice(0,-2),f=a.shape.slice(0,-2),p=T(h),d=T(f);S(i.rank>=2&&a.rank>=2&&i.rank===a.rank,(function(){return"Error in matMul: inputs must have the same rank of at least 2, got ranks "+i.rank+" and "+a.rank+"."})),S(F(h,f),(function(){return"Error in matMul: outer dimensions ("+h+") and ("+f+") of Tensors with shapes "+i.shape+" and "+a.shape+" must match."})),S(s===u,(function(){return"Error in matMul: inner shapes ("+s+") and ("+u+") of Tensors with shapes "+i.shape+" and "+a.shape+" and transposeA="+n+" and transposeB="+r+" must match."}));var v=i.shape.slice(0,-2).concat([c,l]),m=n?i.as3D(p,s,c):i.as3D(p,c,s),g=r?a.as3D(d,l,u):a.as3D(d,u,l),y={transposeA:n,transposeB:r};return Wt.runKernelFunc((function(t,e){var o=t.batchMatMul(m,g,n,r);return e([m,g]),o}),{a:m,b:g},(function(t,e){var o=e,i=o[0],a=o[1];return n||r?!n&&r?{a:function(){return t.matMul(a,!1,!1)},b:function(){return t.matMul(i,!0,!1)}}:n&&!r?{a:function(){return a.matMul(t,!1,!0)},b:function(){return i.matMul(t,!1,!1)}}:{a:function(){return a.matMul(t,!0,!0)},b:function(){return t.matMul(i,!0,!0)}}:{a:function(){return t.matMul(a,!1,!0)},b:function(){return i.matMul(t,!0,!1)}}}),"BatchMatMul",y).reshape(v)}}),Kc=Sn({dot_:function(t,e){var n=vn(t,"t1","dot"),r=vn(e,"t2","dot");S(!(1!==n.rank&&2!==n.rank||1!==r.rank&&2!==r.rank),(function(){return"Error in dot: inputs must all be rank 1 or 2, but got ranks "+n.rank+" and "+r.rank+"."}));var o=1===n.rank?n.size:n.shape[1],i=1===r.rank?r.size:r.shape[0];return S(o===i,(function(){return"Error in dot: inner dimensions of inputs must match, but got "+o+" and "+i+"."})),1===n.rank&&1===r.rank?n.as2D(1,-1).matMul(r.as2D(-1,1)).asScalar():1===n.rank&&2===r.rank?n.as2D(1,-1).matMul(r.as2D(r.shape[0],r.shape[1])).as1D():2===n.rank&&1===r.rank?n.matMul(r.as2D(-1,1)).as1D():n.matMul(r.as2D(r.shape[0],r.shape[1]))}}),Xc=Sn({outerProduct_:function(t,e){var n=vn(t,"v1","outerProduct"),r=vn(e,"v2","outerProduct");return S(1===n.rank&&1===r.rank,(function(){return"Error in outerProduct: inputs must be rank 1, but got ranks "+n.rank+" and "+r.rank+"."})),n.as2D(-1,1).matMul(r.as2D(1,-1))}}),Yc=Sn({reverse_:function(t,e){var n=vn(t,"x","reverse");if(0===n.rank)return n.clone();var r=W(e,n.shape);return Wt.runKernelFunc((function(t){return t.reverse(n,r)}),{$x:n},(function(t){return{$x:function(){return t.reverse(r)}}})).reshapeAs(n)}}),$c=Sn({reverse1d_:function(t){var e=vn(t,"x","reverse");return S(1===e.rank,(function(){return"Error in reverse1D: x must be rank 1 but got rank "+e.rank+"."})),Yc(e,0)}}),Jc=Sn({reverse2d_:function(t,e){var n=vn(t,"x","reverse");return S(2===n.rank,(function(){return"Error in reverse2D: x must be rank 2 but got rank "+n.rank+"."})),Yc(n,e)}}),Qc=Sn({reverse3d_:function(t,e){var n=vn(t,"x","reverse");return S(3===n.rank,(function(){return"Error in reverse3D: x must be rank 3 but got rank "+n.rank+"."})),Yc(n,e)}}),Zc=Sn({reverse4d_:function(t,e){var n=vn(t,"x","reverse");return S(4===n.rank,(function(){return"Error in reverse4D: x must be rank 4 but got rank "+n.rank+"."})),Yc(n,e)}});function tl(t,e,n,r,o,i){var a=vn(t,"x","maxPool"),s=a,u=!1;3===a.rank&&(u=!0,s=a.as4D(1,a.shape[0],a.shape[1],a.shape[2])),null==r&&(r=[1,1]),S(4===s.rank,(function(){return"Error in maxPool: input must be rank 4 but got rank "+s.rank+"."})),S(No(n,r),(function(){return"Error in maxPool: Either strides or dilations must be 1. Got strides "+n+" and dilations '"+r+"'"})),null!=i&&S(N(o),(function(){return"Error in maxPool: pad must be an integer when using, dimRoundingMode "+i+" but got pad "+o+"."}));var c=Eo(s.shape,e,n,r,o,i);if(1===c.filterWidth&&1===c.filterHeight&&F(c.inShape,c.outShape))return a.clone();var l=[s],h=Wt.runKernelFunc((function(t,e){var n=t.maxPool(s,c);return e([s,n]),n}),{x:s},(function(t,i){var a=i[0],s=i[1];return{x:function(){return function(t,e,n,r,o,i,a,s){var u=vn(t,"dy","maxPoolBackprop"),c=vn(e,"input","maxPoolBackprop"),l=vn(n,"output","maxPoolBackprop");S(c.rank===u.rank,(function(){return"Rank of input ("+c.rank+") does not match rank of dy ("+u.rank+")"})),null==i&&(i=[1,1]),S(No(o,i),(function(){return"Error in maxPoolBackProp: Either strides or dilations must be 1. Got strides "+o+" and dilations '"+i+"'"})),S(4===u.rank,(function(){return"Error in maxPoolBackprop: dy must be rank 4 but got rank "+u.rank+"."})),S(4===c.rank,(function(){return"Error in maxPoolBackprop: input must be rank 4 but got rank "+c.rank+"."}));var h=Eo(c.shape,r,o,i,a,void 0);return Wt.runKernelFunc((function(t){return t.maxPoolBackprop(u,c,l,h)}),{$dy:u,$input:c})}(t,a,s,e,n,r,o)}}}),"MaxPool",c,l);return u?h.as3D(h.shape[1],h.shape[2],h.shape[3]):h}function el(t,e,n,r,o,i){var a=vn(t,"x","avgPool","float32");null==r&&(r=[1,1]),S(No(n,r),(function(){return"Error in avgPool: Either strides or dilations must be 1. Got strides "+n+" and dilations '"+r+"'"}));var s=a,u=!1;3===a.rank&&(u=!0,s=a.as4D(1,a.shape[0],a.shape[1],a.shape[2])),S(4===s.rank,(function(){return"Error in avgPool: x must be rank 4 but got rank "+s.rank+"."})),null!=i&&S(N(o),(function(){return"Error in avgPool: pad must be an integer when using, dimRoundingMode "+i+" but got pad "+o+"."}));var c=Eo(s.shape,e,n,r,o,i);if(1===c.filterWidth&&1===c.filterHeight&&F(c.inShape,c.outShape))return a.clone();var l=Wt.runKernelFunc((function(t){return t.avgPool(s,c)}),{x:s},(function(t){return{x:function(){return function(t,e,n,r,o,i){var a=vn(t,"dy","avgPoolBackprop"),s=vn(e,"input","avgPoolBackprop");S(s.rank===a.rank,(function(){return"Rank of input ("+s.rank+") does not match rank of dy ("+a.rank+")"})),null==o&&(o=[1,1]),S(No(r,o),(function(){return"Error in avgPoolBackprop: Either strides or dilations must be 1. Got strides "+r+" and dilations '"+o+"'"}));var u=s,c=a,l=!1;3===s.rank&&(l=!0,u=s.as4D(1,s.shape[0],s.shape[1],s.shape[2]),c=a.as4D(1,a.shape[0],a.shape[1],a.shape[2])),S(4===c.rank,(function(){return"Error in avgPoolBackprop: dy must be rank 4 but got rank "+c.rank+"."})),S(4===u.rank,(function(){return"Error in avgPoolBackprop: input must be rank 4 but got rank "+u.rank+"."}));var h=Eo(u.shape,n,r,o,i),f=Wt.runKernelFunc((function(t){return t.avgPoolBackprop(c,u,h)}),{dy4D:c,input4D:u});return l?f.as3D(f.shape[1],f.shape[2],f.shape[3]):f}(t,s,e,n,r,o)}}}),"AvgPool",c);return l=l.cast(a.dtype),u?l.as3D(l.shape[1],l.shape[2],l.shape[3]):l}var nl=Sn({maxPool_:function(t,e,n,r,o){return tl(t,e,n,1,r,o)}}),rl=Sn({avgPool_:function(t,e,n,r,o){return el(t,e,n,1,r,o)}}),ol=Sn({pool_:function(t,e,n,r,o,i){null==o&&(o=[1,1]),null==i&&(i=1),0===r&&(r="valid");var a=vn(t,"x","maxPool"),s=a,u=!1;3===a.rank&&(u=!0,s=a.as4D(1,a.shape[0],a.shape[1],a.shape[2])),S(No(i,o),(function(){return"Error in pool: Either strides or dilations must be 1. Got strides "+i+" and dilations '"+o+"'"}));var c,l=Eo(s.shape,e,i,o,r),h=[l.dilationHeight,l.dilationWidth];c="same"===r?function(t,e){var n=t.map((function(t,n){return t+(t-1)*(e[n]-1)})).map((function(t){return t-1})),r=n.map((function(t){return Math.floor(t/2)})),o=n.map((function(t,e){return t-r[e]}));return n.map((function(t,e){return[r[e],o[e]]}))}([l.filterHeight,l.filterWidth],h):[[0,0],[0,0]];var f=1===h[0]&&1===h[1],p=function(t,e,n){var r=n.map((function(t){return t[0]})),o=n.map((function(t){return t[1]})),i=t.concat(r,o),a=e.map((function(t,e){return(t-i[e]%t)%t})),s=o.map((function(t,e){return t+a[e]}));return[e.map((function(t,e){return[r[e],s[e]]})),e.map((function(t,e){return[0,a[e]]}))]}([l.inHeight,l.inWidth],h,c),d=p[0],v=p[1],m=f?r:"valid",g=f?s:Mr(s,h,d),y=("avg"===n?function(){return el(g,e,i,1,m)}:function(){return tl(g,e,i,1,m)})(),x=f?y:dr(y,h,v);return u?x.as3D(x.shape[1],x.shape[2],x.shape[3]):x}}),il=Sn({maxPool3d_:function(t,e,n,r,o,i,a){void 0===i&&(i="NDHWC");var s=vn(t,"x","maxPool3d"),u=s,c=!1;4===s.rank&&(c=!0,u=s.as5D(1,s.shape[0],s.shape[1],s.shape[2],s.shape[3])),null==a&&(a=[1,1,1]),S(5===u.rank,(function(){return"Error in maxPool3d: x must be rank 5 but got rank "+u.rank+"."})),S("NDHWC"===i,(function(){return"Error in maxPool3d: Only NDHWC is currently supported, but got dataFormat of "+i})),S(No(n,a),(function(){return"Error in maxPool3d: Either strides or dilations must be 1. Got strides "+n+" and dilations '"+a+"'"})),null!=o&&S(N(r),(function(){return"Error in maxPool3d: pad must be an integer when using, dimRoundingMode "+o+" but got pad "+r+"."}));var l=_o(u.shape,e,n,a,r,o,i),h=Wt.runKernelFunc((function(t,e){var n=t.maxPool3d(u,l);return e([u,n]),n}),{x:u},(function(t,i){var s=i[0],u=i[1];return{x:function(){return function(t,e,n,r,o,i,a,s){var u=vn(t,"dy","maxPool3dBackprop"),c=vn(e,"input","maxPool3dBackprop"),l=vn(n,"output","maxPool3dBackprop"),h=u,f=c,p=l,d=!1;4===c.rank&&(d=!0,h=u.as5D(1,u.shape[0],u.shape[1],u.shape[2],u.shape[3]),f=c.as5D(1,c.shape[0],c.shape[1],c.shape[2],c.shape[3]),p=l.as5D(1,l.shape[0],l.shape[1],l.shape[2],l.shape[3])),S(5===h.rank,(function(){return"Error in maxPool3dBackprop: dy must be rank 5 but got rank "+h.rank+"."})),S(5===f.rank,(function(){return"Error in maxPool3dBackprop: input must be rank 5 but got rank "+f.rank+"."})),S(5===p.rank,(function(){return"Error in maxPool3dBackprop: output must be rank 5 but got rank "+p.rank+"."})),null==i&&(i=[1,1,1]),S(No(o,i),(function(){return"Error in maxPool3dBackprop: Either strides or dilations must be 1. Got strides "+o+" and dilations '"+i+"'"})),null!=s&&S(N(a),(function(){return"Error in maxPool3dBackprop: pad must be an integer when using, dimRoundingMode "+s+" but got pad "+a+"."}));var v=_o(f.shape,r,o,i,a,s),m=Wt.runKernelFunc((function(t){return t.maxPool3dBackprop(h,f,p,v)}),{dy5D:h,input5D:f});return d?m.as4D(m.shape[1],m.shape[2],m.shape[3],m.shape[4]):m}(t,s,u,e,n,a,r,o)}}}));return c?h.as4D(h.shape[1],h.shape[2],h.shape[3],h.shape[4]):h}}),al=Sn({avgPool3d_:function(t,e,n,r,o,i,a){void 0===i&&(i="NDHWC");var s=vn(t,"x","avgPool3d","float32"),u=s,c=!1;4===s.rank&&(c=!0,u=s.as5D(1,s.shape[0],s.shape[1],s.shape[2],s.shape[3])),null==a&&(a=[1,1,1]),S(5===u.rank,(function(){return"Error in avgPool3d: x must be rank 5 but got rank "+u.rank+"."})),S("NDHWC"===i,(function(){return"Error in avgPool3d: Only NDHWC is currently supported, but got dataFormat of "+i})),S(No(n,a),(function(){return"Error in avgPool3d: Either strides or dilations must be 1. Got strides "+n+" and dilations '"+a+"'"})),null!=o&&S(N(r),(function(){return"Error in avgPool3d: pad must be an integer when using, dimRoundingMode "+o+" but got pad "+r+"."}));var l=_o(u.shape,e,n,a,r,o,i),h=Wt.runKernelFunc((function(t){return t.avgPool3d(u,l)}),{x:u},(function(t){return{x:function(){return function(t,e,n,r,o,i,a){var s=vn(t,"dy","avgPool3dBackprop"),u=vn(e,"input","avgPool3dBackprop"),c=s,l=u,h=!1;4===u.rank&&(h=!0,c=s.as5D(1,s.shape[0],s.shape[1],s.shape[2],s.shape[3]),l=u.as5D(1,u.shape[0],u.shape[1],u.shape[2],u.shape[3])),S(5===c.rank,(function(){return"Error in avgPool3dBackprop: dy must be rank 5 but got rank "+c.rank+"."})),S(5===l.rank,(function(){return"Error in avgPool3dBackprop: input must be rank 5 but got rank "+l.rank+"."})),null==o&&(o=[1,1,1]),S(No(r,o),(function(){return"Error in avgPool3dBackprop: Either strides or dilations must be 1. Got strides "+r+" and dilations '"+o+"'"})),null!=a&&S(N(i),(function(){return"Error in maxPool3dBackprop: pad must be an integer when using, dimRoundingMode "+a+" but got pad "+i+"."}));var f=_o(l.shape,n,r,o,i,a),p=Wt.runKernelFunc((function(t){return t.avgPool3dBackprop(c,l,f)}),{dy5D:c,input5D:l});return h?p.as4D(p.shape[1],p.shape[2],p.shape[3],p.shape[4]):p}(t,u,e,n,a,r,o)}}}));return h=h.cast(u.dtype),c?h.as4D(h.shape[1],h.shape[2],h.shape[3],h.shape[4]):h}}),sl=Sn({slice_:function(t,e,n){var r,o,i=vn(t,"x","slice");if(0===i.rank)throw new Error("Slicing scalar is not possible");(r="number"==typeof e?[e].concat(new Array(i.rank-1).fill(0)):e.length<i.rank?e.concat(new Array(i.rank-e.length).fill(0)):e.slice()).forEach((function(t){S(-1!==t,(function(){return"slice() does not support negative begin indexing."}))})),o=(o=null==n?new Array(i.rank).fill(-1):"number"==typeof n?[n].concat(new Array(i.rank-1).fill(-1)):n.length<i.rank?n.concat(new Array(i.rank-n.length).fill(-1)):n).map((function(t,e){return t>=0?t:(S(-1===t,(function(){return"Negative size values should be exactly -1 but got "+t+" for the slice() size at index "+e+"."})),i.shape[e]-r[e])})),Zr(i,r,o);var a=i.shape,s={begin:r,size:o};return Wt.runKernelFunc((function(t){return t.slice(i,r,o)}),{x:i},(function(t){for(var e=[],n=0;n<t.rank;n++)e.push([r[n],a[n]-r[n]-o[n]]);return{x:function(){return t.pad(e)}}}),"Slice",s)}}),ul=Sn({slice1d_:function(t,e,n){var r=vn(t,"x","slice1d");return S(1===r.rank,(function(){return"slice1d expects a rank-1 tensor, but got a rank-"+r.rank+" tensor"})),sl(r,[e],[n])}}),cl=Sn({slice2d_:function(t,e,n){var r=vn(t,"x","slice2d");return S(2===r.rank,(function(){return"slice2d expects a rank-2 tensor, but got a rank-"+r.rank+" tensor"})),sl(r,e,n)}}),ll=Sn({slice3d_:function(t,e,n){var r=vn(t,"x","slice3d");return S(3===r.rank,(function(){return"slice3d expects a rank-3 tensor, but got a rank-"+r.rank+" tensor"})),sl(r,e,n)}}),hl=Sn({slice4d_:function(t,e,n){var r=vn(t,"x","slice4d");return S(4===r.rank,(function(){return"slice4d expects a rank-4 tensor, but got a rank-"+r.rank+" tensor"})),sl(r,e,n)}});function fl(t,e,n,r,o){return e.rank<n.rank&&(e=e.reshape(bn(e.shape,r))),t.rank<n.rank&&(t=t.reshape(bn(t.shape,r))),{x:function(){var r=t.mul(n.equal(e).cast(t.dtype));return null==o?r:r.transpose(o)}}}var pl=Sn({all_:function(t,e,n){void 0===e&&(e=null),void 0===n&&(n=!1);var r=vn(t,"x","all","bool"),o=W(e,r.shape),i=o,a=Cn(i,r.rank);null!=a&&(r=r.transpose(a),i=_n(i.length,r.rank));var s=Wt.runKernelFunc((function(t){return t.all(r,i)}),{$x:r});if(n){var u=bn(s.shape,o);return s.reshape(u)}return s}}),dl=Sn({any_:function(t,e,n){void 0===e&&(e=null),void 0===n&&(n=!1);var r=vn(t,"x","any","bool"),o=W(e,r.shape),i=o,a=Cn(i,r.rank);null!=a&&(r=r.transpose(a),i=_n(i.length,r.rank));var s=Wt.runKernelFunc((function(t){return t.any(r,i)}),{$x:r});if(n){var u=bn(s.shape,o);return s.reshape(u)}return s}}),vl=Sn({argMax_:function(t,e){void 0===e&&(e=0);var n=vn(t,"x","argMax");null==e&&(e=0);var r=W(e,n.shape),o=Cn(r,n.rank);null!=o&&(n=n.transpose(o),r=_n(r.length,n.rank));var i={axis:r[0]},a=[n];return Wt.runKernelFunc((function(t,e){var o=t.argMax(n,r[0]);return e([n]),o}),{x:n},(function(t,e){var n=e[0];return{x:function(){return Kn(n)}}}),"ArgMax",i,a)}}),ml=Sn({argMin_:function(t,e){void 0===e&&(e=0);var n=vn(t,"x","argMin");null==e&&(e=0);var r=W(e,n.shape),o=Cn(r,n.rank);return null!=o&&(n=n.transpose(o),r=_n(r.length,n.rank)),Wt.runKernelFunc((function(t,e){var o=t.argMin(n,r[0]);return e([n]),o}),{$x:n},(function(t,e){var n=e[0];return{$x:function(){return Kn(n)}}}))}}),gl=Sn({logSumExp_:function(t,e,n){void 0===e&&(e=null),void 0===n&&(n=!1);var r=vn(t,"x","logSumExp"),o=W(e,r.shape),i=r.max(o,!0),a=r.sub(i).exp().sum(o).log(),s=i.reshape(a.shape).add(a);if(n){var u=bn(s.shape,o);return s.reshape(u)}return s}}),yl=Sn({max_:function(t,e,n){void 0===e&&(e=null),void 0===n&&(n=!1);var r=vn(t,"x","max"),o=r,i=W(e,r.shape),a=i,s=Cn(a,r.rank);null!=s&&(r=r.transpose(s),a=_n(a.length,r.rank));var u=[r],c=Wt.runKernelFunc((function(t,e){var n=t.max(r,a);return e([o,n]),n}),{x:r},(function(t,e){return fl(t,e[1],e[0],i,s)}),"Max",{axes:a},u,[!0]);if(n){var l=bn(c.shape,i);c=c.reshape(l)}return c}}),xl=Sn({mean_:function(t,e,n){void 0===e&&(e=null),void 0===n&&(n=!1);var r=vn(t,"x","mean"),o=W(e,r.shape),i=T(xn(r.shape,o)[1]);return fo((function(t){var r=Nn(i);return{value:(r.dtype===t.dtype?t:t.cast(r.dtype)).div(r).sum(e,n),gradFunc:function(e){var n=t.shape.slice();return o.forEach((function(t){n[t]=1})),e.reshape(n).mul(Un(t.shape,"float32")).div(i)}}}))(r)}}),bl=Sn({min_:function(t,e,n){void 0===e&&(e=null),void 0===n&&(n=!1);var r=vn(t,"x","min"),o=r,i=W(e,r.shape),a=i,s=Cn(a,r.rank);null!=s&&(r=r.transpose(s),a=_n(a.length,r.rank));var u=[r],c=Wt.runKernelFunc((function(t,e){var n=t.min(r,a);return e([o,n]),n}),{x:r},(function(t,e){return fl(t,e[1],e[0],i,s)}),"Min",{axes:a},u,[!0]);if(n){var l=bn(c.shape,i);c=c.reshape(l)}return c}}),wl=Sn({moments_:function(t,e,n){void 0===e&&(e=null),void 0===n&&(n=!1);var r=W(e,(t=vn(t,"x","moments")).shape),o=t.mean(r,n),i=o.shape;n||(i=bn(o.shape,r));var a=t.toFloat().sub(o.reshape(i)).square();return{mean:o,variance:a.mean(r,n)}}}),Cl=Sn({sum_:function(t,e,n){void 0===e&&(e=null),void 0===n&&(n=!1);var r=vn(t,"x","sum");"bool"===r.dtype&&(r=r.toInt());var o=W(e,r.shape);return fo((function(t){var e=Cn(o,t.rank),r=o,i=t;null!=e&&(i=t.transpose(e),r=_n(r.length,t.rank));var a=function(e){var n=t.shape.slice();return o.forEach((function(t){n[t]=1})),e.reshape(n).mul(Un(t.shape,"float32"))},s={axes:r},u=Wt.runKernelFunc((function(t){return t.sum(i,r)}),{x:i},(function(t){return{x:function(){return a(t)}}}),"Sum",s);if(n){var c=bn(u.shape,o);u=u.reshape(c)}return{value:u,gradFunc:a}}))(r)}}),El=Sn({prod_:function(t,e,n){void 0===e&&(e=null),void 0===n&&(n=!1);var r=vn(t,"x","prod");"bool"===r.dtype&&(r=r.toInt());var o=W(e,r.shape),i=Cn(o,r.rank),a=o,s=r;null!=i&&(s=r.transpose(i),a=_n(a.length,r.rank));var u=Wt.runKernelFunc((function(t){return t.prod(s,a)}),{permutedX:s});if(n){var c=bn(u.shape,o);u=u.reshape(c)}return u}}),_l=Sn({elu_:function(t){var e=vn(t,"x","elu");return Wt.runKernelFunc((function(t,n){var r=t.elu(e);return n([r]),r}),{$x:e},(function(t,e){var n=e[0];return{$x:function(){return Wt.runKernelFunc((function(e){return e.eluDer(t,n)}),{dy:t,y:n})}}}))}}),Il=Sn({leakyRelu_:function(t,e){void 0===e&&(e=.2);var n=vn(t,"x","leakyRelu");return nc(Nn(e).mul(n),n)}}),Rl=Sn({prelu_:function(t,e){var n=vn(t,"x","prelu"),r=vn(e,"alpha","prelu");return Wt.runKernelFunc((function(t,e){var o=t.prelu(n,r);return e([n,r]),o}),{x:n,alpha:r},(function(t,e){var n=e[0],r=e[1],o=n.greater(0);return{x:function(){return qu(o,t,t.mul(r))},alpha:function(){var e=qu(o,Kn(t),t.mul(n)),i=wo(r.shape,t.shape);return i.length>0&&(e=e.sum(i)),e.reshape(r.shape)}}}),"Prelu")}}),Sl=Sn({relu_:function(t){var e=vn(t,"x","relu");return"bool"===e.dtype?e.toInt():Wt.runKernelFunc((function(t,n){var r=t.relu(e);return n([e]),r}),{x:e},(function(t,e){var n=e[0];return{x:function(){return t.mulStrict(n.step().toFloat())}}}),"Relu")}}),kl=Sn({relu6_:function(t){var e=vn(t,"x","relu6");return"bool"===e.dtype?e.toInt():Wt.runKernelFunc((function(t,n){var r=t.relu6(e);return n([e]),r}),{x:e},(function(t,e){var n=e[0],r=n.lessEqual(6).mul(n.step());return{x:function(){return t.mulStrict(r.toFloat())}}}),"Relu6")}}),Dl=Sn({selu_:function(t){var e=vn(t,"x","selu");return Wt.runKernelFunc((function(t,n){var r=t.selu(e);return n([e]),r}),{$x:e},(function(t,e){var n=e[0];return{$x:function(){var e=n.greater(Nn(0)),r=Nn(ds),o=Nn(vs),i=t.mul(o),a=t.mul(r).mul(n.toFloat().exp());return qu(e,i,a)}}}))}}),Al=Sn({transpose_:function(t,e){var n=vn(t,"x","transpose");if(null==e&&(e=n.shape.map((function(t,e){return e})).reverse()),S(n.rank===e.length,(function(){return"Error in transpose: rank of input "+n.rank+" must match length of perm "+e+"."})),e.forEach((function(t){S(t>=0&&t<n.rank,(function(){return"All entries in 'perm' must be between 0 and "+(n.rank-1)+" but got "+e}))})),n.rank<=1)return n.clone();var r={perm:e};return Wt.runKernelFunc((function(t){return t.transpose(n,e)}),{x:n},(function(t){var n=En(e);return{x:function(){return t.transpose(n)}}}),"Transpose",r)}}),Tl=Sn({localResponseNormalization_:function(t,e,n,r,o){void 0===e&&(e=5),void 0===n&&(n=1),void 0===r&&(r=1),void 0===o&&(o=.5);var i=vn(t,"x","localResponseNormalization");S(4===i.rank||3===i.rank,(function(){return"Error in localResponseNormalization: x must be rank 3 or 4 but got\n               rank "+i.rank+"."})),S(N(e),(function(){return"Error in localResponseNormalization: depthRadius must be an integer but got depthRadius "+e+"."}));var a=i,s=!1;3===i.rank&&(s=!0,a=i.as4D(1,i.shape[0],i.shape[1],i.shape[2]));var u=Wt.runKernelFunc((function(t,i){var s=t.localResponseNormalization4D(a,e,n,r,o);return i([a,s]),s}),{x4D:a},(function(t,i){var a=i[0],s=i[1];return{x4D:function(){return Wt.runKernelFunc((function(i){return i.LRNGrad(t,a,s,e,n,r,o)}),{})}}}));return s?u.as3D(u.shape[1],u.shape[2],u.shape[3]):u}}),Fl=Sn({norm_:function(t,e,n,r){void 0===e&&(e="euclidean"),void 0===n&&(n=null),void 0===r&&(r=!1);var o=function t(e,n,r){if(void 0===r&&(r=null),0===e.rank)return e.abs();if(1!==e.rank&&null===r)return t(e.reshape([-1]),n,r);if(1===e.rank||"number"==typeof r||Array.isArray(r)&&1===r.length){if(1===n)return e.abs().sum(r);if(n===1/0)return e.abs().max(r);if(n===-1/0)return e.abs().min(r);if("euclidean"===n||2===n)return e.abs().pow(Nn(2,"int32")).sum(r).sqrt();throw new Error("Error in norm: invalid ord value: "+n)}if(Array.isArray(r)&&2===r.length){if(1===n)return e.abs().sum(r[0]).max(r[1]-1);if(n===1/0)return e.abs().sum(r[1]).max(r[0]);if(n===-1/0)return e.abs().sum(r[1]).min(r[0]);if("fro"===n||"euclidean"===n)return e.square().sum(r).sqrt();throw new Error("Error in norm: invalid ord value: "+n)}throw new Error("Error in norm: invalid axis: "+r)}(t=vn(t,"x","norm"),e,n),i=o.shape;if(r){var a=W(n,t.shape);i=bn(o.shape,a)}return o.reshape(i)}}),Nl=Sn({basicLSTMCell_:function(t,e,n,r,o,i){var a=vn(t,"forgetBias","basicLSTMCell"),s=vn(e,"lstmKernel","basicLSTMCell"),u=vn(n,"lstmBias","basicLSTMCell"),c=vn(r,"data","basicLSTMCell"),l=vn(o,"c","basicLSTMCell"),h=vn(i,"h","basicLSTMCell"),f=c.concat(h,1).matMul(s).add(u),p=f.shape[0],d=f.shape[1]/4,v=[p,d],m=f.slice([0,0],v),g=f.slice([0,d],v),y=f.slice([0,2*d],v),x=f.slice([0,3*d],v),b=m.sigmoid().mulStrict(g.tanh()).addStrict(l.mulStrict(a.add(y).sigmoid())),w=b.tanh().mulStrict(x.sigmoid());return[b,w]}}),Ml=Sn({multiRNNCell_:function(t,e,n,r){for(var o=vn(e,"data","multiRNNCell"),i=mn(n,"c","multiRNNCell"),a=mn(r,"h","multiRNNCell"),s=o,u=[],c=0;c<t.length;c++){var l=t[c](s,i[c],a[c]);u.push(l[0]),u.push(l[1]),s=l[1]}var h=[],f=[];for(c=0;c<u.length;c+=2)h.push(u[c]),f.push(u[c+1]);return[h,f]}}),Ol=Sn({movingAverage_:function(t,e,n,r,o){void 0===o&&(o=!0);var i=vn(t,"v","movingAverage"),a=vn(e,"x","movingAverage"),s=vn(n,"decay","movingAverage");Nt(i,a),S(F(i.shape,a.shape),(function(){return"Shape mismatch in v and x"}));var u=Nn(1),c=u.sub(s),l=a.sub(i).mul(c);if(o){S(null!=r,(function(){return"When using zeroDebias: true, step is required."}));var h=vn(r,"step","movingAverage");l=l.div(u.sub(lc(s,h)))}return i.add(l)}}),Pl=Sn({stridedSlice_:function(t,e,n,r,o,i,a,s,u){if(void 0===o&&(o=0),void 0===i&&(i=0),void 0===a&&(a=0),void 0===s&&(s=0),void 0===u&&(u=0),null==r&&(r=new Array(e.length)),0!==a)throw new Error("ellipsis mask is not yet supported");var c=vn(t,"x","stridedSlice"),l=to(s),h=c.shape.slice();l.forEach((function(t){e[t]=0,n[t]=1,h.splice(t,0,1)})),c=c.reshape(h);for(var f=0;f<c.rank;f++)e[f]=no(o,e,r,c.shape,f),n[f]=ro(i,n,r,c.shape,f),r[f]=r[f]||1;var p=to(u);p.forEach((function(t){n[t]=e[t]+1,r[t]=1}));var d=eo(e,n,r),v=d.filter((function(t,e){return-1===p.indexOf(e)}));return r.every((function(t){return 1===t}))?sl(c,e,d).reshape(v):Wt.runKernelFunc((function(t){return t.stridedSlice(c,e,n,r)}),{$x:c}).reshape(v)}}),Bl=Sn({topk_:function(t,e,n){void 0===e&&(e=1),void 0===n&&(n=!0);var r=vn(t,"x","topk");if(0===r.rank)throw new Error("topk() expects the input to be of rank 1 or higher");var o=r.shape[r.shape.length-1];if(e>o)throw new Error("'k' passed to topk() must be <= the last dimension ("+o+") but got "+e);var i=Wt.runKernelFunc((function(t){return t.topk(r,e,n)}),{$x:r});return{values:i[0],indices:i[1]}}}),Ll=Sn({scatterND_:function(t,e,n){var r=vn(t,"indices","scatterND","int32"),o=vn(e,"updates","scatterND");return $r(o,r,n),Wt.runKernelFunc((function(t){return t.scatterND(r,o,n)}),{indices:r,updates:o},null,"ScatterNd",{shape:n})}}),Wl=Sn({fft_:function(t){S("complex64"===t.dtype,(function(){return"The dtype for tf.spectral.fft() must be complex64 but got "+t.dtype+"."}));var e=t.shape[t.shape.length-1],n=t.size/e,r=t.as2D(n,e);return Wt.runKernelFunc((function(t){return t.fft(r)}),{input:t}).reshape(t.shape)}}),zl=Sn({ifft_:function(t){S("complex64"===t.dtype,(function(){return"The dtype for tf.spectral.ifft() must be complex64 but got "+t.dtype+"."}));var e=t.shape[t.shape.length-1],n=t.size/e,r=t.as2D(n,e);return Wt.runKernelFunc((function(t){return t.ifft(r)}),{input:t}).reshape(t.shape)}}),Ul=Sn({rfft_:function(t,e){S("float32"===t.dtype,(function(){return"The dtype for rfft() must be real value but got "+t.dtype}));var n,r=t.shape[t.shape.length-1],o=t.size/r;if(null!=e&&e<r){var i=t.shape.map((function(t){return 0})),a=t.shape.map((function(t){return t}));a[t.shape.length-1]=e,n=t.slice(i,a),r=e}else if(null!=e&&e>r){var s=t.shape.map((function(t){return t}));s[t.shape.length-1]=e-r,n=t.concat(Vn(s),t.shape.length-1),r=e}else n=t;var u=n.zerosLike(),c=kn(n,u).as2D(o,r),l=Wl(c),h=Math.floor(r/2)+1,f=Dn(l),p=An(l),d=f.split([h,r-h],f.shape.length-1),v=p.split([h,r-h],p.shape.length-1),m=n.shape.slice();return m[n.shape.length-1]=h,kn(d[0],v[0]).reshape(m)}}),Vl=Sn({irfft_:function(t){var e=t.shape[t.shape.length-1],n=t.size/e;if(e<=2){var r=t.as2D(n,e),o=zl(r);return Dn(o)}var i=[n,2*(e-1)],a=Dn(t).as2D(n,e),s=An(t).as2D(n,e),u=a.slice([0,1],[n,e-2]).reverse(1),c=s.slice([0,1],[n,e-2]).reverse(1).mul(Nn(-1)),l=a.concat(u,1),h=s.concat(c,1);return r=kn(l,h).as2D(i[0],i[1]),o=zl(r),Dn(o)}}),Gl=Object.freeze({fft:Wl,ifft:zl,rfft:Ul,irfft:Vl}),Hl=Sn({sparseToDense_:function(t,e,n,r){void 0===r&&(r=0);var o=vn(t,"sparseIndices","sparseToDense","int32"),i=vn(e,"sparseValues","sparseToDense"),a=vn(r,"defaultValue","sparseToDense",i.dtype);return function(t,e,n,r){if("int32"!==t.dtype)throw new Error("tf.sparseToDense() expects the indices to be int32 type, but the dtype was "+t.dtype+".");if(t.rank>2)throw new Error("sparseIndices should be a scalar, vector, or matrix, but got shape "+t.shape+".");var o=t.rank>0?t.shape[0]:1,i=t.rank>1?t.shape[1]:1;if(n.length!==i)throw new Error("outputShape has incorrect number of elements:, "+n.length+", should be: "+i+".");var a=e.size;if(0!==e.rank&&(1!==e.rank||a!==o))throw new Error("sparseValues has incorrect shape "+e.shape+", should be [] or ["+o+"]");if(e.dtype!==r.dtype)throw new Error("sparseValues.dtype must match defaultValues.dtype")}(o,i,n,a),Wt.runKernelFunc((function(t){return t.sparseToDense(o,i,n,a)}),{$sparseIndices:o,$sparseValues:i,$defaultValue:a})}}),jl=Sn({gatherND_:function(t,e){var n=vn(e,"indices","gatherND","int32"),r=vn(t,"x","gatherND");return Wt.runKernelFunc((function(t){return t.gatherND(r,n)}),{x:r,indices:n},null,"GatherNd")}}),ql=Sn({diag_:function(t){var e=vn(t,"x","diag").flatten(),n=t.shape.concat(t.shape);return Wt.runKernelFunc((function(t){return t.diag(e)}),{$x:e}).reshape(n)}}),Kl=Sn({dropout_:function(t,e,n,r){var o=vn(t,"x","dropout");if(S("float32"===o.dtype,(function(){return"x has to be a floating point tensor since it's going to be scaled, but got a "+o.dtype+" tensor instead."})),S(e>=0&&e<1,(function(){return"rate must be a float in the range [0, 1), but got "+e+"."})),0===e)return t instanceof Ct?o.clone():o;var i=function(t,e){if(null==e)return t.shape.slice();if(F(t.shape,e))return e;if(t.shape.length===e.length){for(var n=[],r=0;r<t.shape.length;r++)null==e[r]&&null!=t.shape[r]?n.push(t.shape[r]):n.push(e[r]);return n}return e}(o,n),a=1-e,s=Fr(i,0,1,"float32",r).add(a).floor().div(a);return o.mul(s)}});function Xl(t,e,n){for(var r=1-t%2,o=new Float32Array(t),i=0;i<t;++i){var a=2*Math.PI*i/(t+r-1);o[i]=e-n*Math.cos(a)}return Mn(o,"float32")}var Yl,$l=Sn({hannWindow_:function(t){return Xl(t,.5,.5)}}),Jl=Sn({hammingWindow_:function(t){return Xl(t,.54,.46)}}),Ql=Sn({frame_:function(t,e,n,r,o){void 0===r&&(r=!1),void 0===o&&(o=0);for(var i=0,a=[];i+e<=t.size;)a.push(sl(t,i,e)),i+=n;if(r)for(;i<t.size;){var s=i+e-t.size,u=Xn([sl(t,i,e-s),Gn([s],o)]);a.push(u),i+=n}return 0===a.length?On([],[0,e]):Xn(a).as2D(a.length,e)}}),Zl=Sn({stft_:function(t,e,n,r,o){var i;void 0===o&&(o=$l),null==r&&(i=e,r=Math.floor(Math.pow(2,Math.ceil(Math.log(i)/Math.log(2)))));for(var a=Ql(t,e,n),s=uc(a,o(e)),u=[],c=0;c<a.shape[0];c++)u.push(Ul(s.slice([c,0],[1,e]),r));return Xn(u)}}),th=Object.freeze({hannWindow:$l,hammingWindow:Jl,frame:Ql,stft:Zl}),eh=function(t,e,n){return void 0===n&&(n=1),u(this,void 0,void 0,(function(){var r,o,i,a,s,u,l,h,f,p,d,v,m,g;return c(this,(function(c){switch(c.label){case 0:return r=vn(t,"predictions","inTopK"),o=vn(e,"targets","inTopK"),S(r.rank>1,(function(){return"inTopK() expects the predictions to be of rank 2 or higher, but got "+r.rank})),S(r.rank-1===o.rank,(function(){return"predictions rank should be 1 larger than targets rank, but got predictions rank "+r.rank+" and targets rank "+o.rank})),k(r.shape.slice(0,r.shape.length-1),o.shape,"predictions's shape should be align with the targets' shape, except the last dimension."),i=r.shape[r.shape.length-1],S(n>0&&n<=i,(function(){return"'k' passed to inTopK() must be > 0 && <= the predictions last dimension ("+i+"), but got "+n})),[4,r.data()];case 1:return a=c.sent(),[4,o.data()];case 2:for(s=c.sent(),u=[a.length/i,i],h=u[1],f=U("bool",l=u[0]),p=0;p<l;p++){for(d=p*h,v=a.subarray(d,d+h),m=[],g=0;g<v.length;g++)m.push({value:v[g],index:g});for(m.sort((function(t,e){return e.value-t.value})),f[p]=0,g=0;g<n;g++)if(m[g].index===s[p]){f[p]=1;break}}return t!==r&&r.dispose(),e!==o&&o.dispose(),[2,Tn(f,o.shape,"bool")]}}))}))};!function(t){t[t.NONE=0]="NONE",t[t.MEAN=1]="MEAN",t[t.SUM=2]="SUM",t[t.SUM_BY_NONZERO_WEIGHTS=3]="SUM_BY_NONZERO_WEIGHTS"}(Yl||(Yl={}));var nh=Sn({absoluteDifference_:function(t,e,n,r){void 0===r&&(r=Yl.SUM_BY_NONZERO_WEIGHTS);var o=vn(t,"labels","absoluteDifference"),i=vn(e,"predictions","absoluteDifference"),a=null;null!=n&&(a=vn(n,"weights","absoluteDifference")),k(o.shape,i.shape,"Error in absoluteDifference: ");var s=o.sub(i).abs();return rh(s,a,r)}}),rh=Sn({computeWeightedLoss_:function(t,e,n){void 0===n&&(n=Yl.SUM_BY_NONZERO_WEIGHTS);var r=vn(t,"losses","computeWeightedLoss"),o=null;null!=e&&(o=vn(e,"weights","computeWeightedLoss"));var i=null==o?r:r.mul(o);if(n===Yl.NONE)return i;if(n===Yl.SUM)return i.sum();if(n===Yl.MEAN){if(null==o)return i.mean();var a=r.size/o.size,s=i.sum().div(o.sum());return a>1?s.div(Nn(a)):s}if(n===Yl.SUM_BY_NONZERO_WEIGHTS){if(null==o)return i.sum().div(Nn(r.size));var u=o.mul(Un(r.shape)).notEqual(Nn(0)).sum().toFloat();return i.sum().div(u)}throw Error("Unknown reduction: "+n)}}),oh=Sn({cosineDistance_:function(t,e,n,r,o){void 0===o&&(o=Yl.SUM_BY_NONZERO_WEIGHTS);var i=vn(t,"labels","cosineDistance"),a=vn(e,"predictions","cosineDistance"),s=null;null!=r&&(s=vn(r,"weights","cosineDistance")),k(i.shape,a.shape,"Error in cosineDistance: ");var u=Nn(1).sub(i.mul(a).sum(n,!0));return rh(u,s,o)}}),ih=Sn({hingeLoss_:function(t,e,n,r){void 0===r&&(r=Yl.SUM_BY_NONZERO_WEIGHTS);var o=vn(t,"labels","hingeLoss"),i=vn(e,"predictions","hingeLoss"),a=null;null!=n&&(a=vn(n,"weights","hingeLoss")),k(o.shape,i.shape,"Error in hingeLoss: ");var s=Nn(1);o=Nn(2).mul(o).sub(s);var u=s.sub(o.mul(i)).relu();return rh(u,a,r)}}),ah=Sn({huberLoss_:function(t,e,n,r,o){void 0===r&&(r=1),void 0===o&&(o=Yl.SUM_BY_NONZERO_WEIGHTS);var i=vn(t,"labels","huberLoss"),a=vn(e,"predictions","huberLoss"),s=null;null!=n&&(s=vn(n,"weights","huberLoss")),k(i.shape,a.shape,"Error in huberLoss: ");var u=Nn(r),c=a.sub(i).abs(),l=oc(c,u),h=c.sub(l),f=Nn(.5).mul(l.square()).add(u.mul(h));return rh(f,s,o)}}),sh=Sn({logLoss_:function(t,e,n,r,o){void 0===r&&(r=1e-7),void 0===o&&(o=Yl.SUM_BY_NONZERO_WEIGHTS);var i=vn(t,"labels","logLoss"),a=vn(e,"predictions","logLoss"),s=null;null!=n&&(s=vn(n,"weights","logLoss")),k(i.shape,a.shape,"Error in logLoss: ");var u=Nn(1),c=Nn(r),l=i.mul(a.add(c).log()).neg().sub(u.sub(i).mul(u.sub(a).add(c).log()));return rh(l,s,o)}}),uh=Sn({meanSquaredError_:function(t,e,n,r){void 0===r&&(r=Yl.SUM_BY_NONZERO_WEIGHTS);var o=vn(t,"labels","meanSquaredError"),i=vn(e,"predictions","meanSquaredError"),a=null;null!=n&&(a=vn(n,"weights","meanSquaredError")),k(o.shape,i.shape,"Error in meanSquaredError: ");var s=o.squaredDifference(i);return rh(s,a,r)}}),ch=Sn({sigmoidCrossEntropy_:function(t,e,n,r,o){void 0===r&&(r=0),void 0===o&&(o=Yl.SUM_BY_NONZERO_WEIGHTS);var i=vn(t,"multiClassLabels","sigmoidCrossEntropy"),a=vn(e,"logits","sigmoidCrossEntropy"),s=null;if(null!=n&&(s=vn(n,"weights","sigmoidCrossEntropy")),k(i.shape,a.shape,"Error in sigmoidCrossEntropy: "),r>0){var u=Nn(r),c=Nn(1),l=Nn(.5);i=i.mul(c.sub(u)).add(l.mul(u))}var h=function(t,e){var n=vn(t,"labels","sigmoidCrossEntropyWithLogits"),r=vn(e,"logits","sigmoidCrossEntropyWithLogits");k(n.shape,r.shape,"Error in sigmoidCrossEntropyWithLogits: ");var o=r.relu(),i=r.mul(n),a=r.abs().neg().exp().log1p();return o.sub(i).add(a)}(i,a);return rh(h,s,o)}}),lh=Sn({softmaxCrossEntropy_:function(t,e,n,r,o){void 0===r&&(r=0),void 0===o&&(o=Yl.SUM_BY_NONZERO_WEIGHTS);var i=vn(t,"onehotLabels","softmaxCrossEntropy"),a=vn(e,"logits","softmaxCrossEntropy"),s=null;if(null!=n&&(s=vn(n,"weights","softmaxCrossEntropy")),k(i.shape,a.shape,"Error in softmaxCrossEntropy: "),r>0){var u=Nn(r),c=Nn(1),l=Nn(i.shape[1]);i=i.mul(c.sub(u)).add(u.div(l))}var h=function(t,e,n){if(void 0===n&&(n=-1),-1===n&&(n=e.rank-1),n!==e.rank-1)throw Error("Softmax cross entropy along a non-last dimension is not yet supported. Labels / logits was rank "+e.rank+" and dim was "+n);return fo((function(t,e,r){var o=e.logSumExp([n],!0),i=e.toFloat().sub(o);return r([t,i]),{value:i.mul(t).neg().sum([n]),gradFunc:function(t,e){var r=e[0],o=e[1],i=bn(t.shape,[n]);return[t.reshape(i).mul(r.toFloat().sub(o.exp())),t.reshape(i).mul(o.exp().sub(r.toFloat()))]}}}))(t,e)}(i,a);return rh(h,s,o)}}),hh=Object.freeze({get Reduction(){return Yl},absoluteDifference:nh,computeWeightedLoss:rh,cosineDistance:oh,hingeLoss:ih,huberLoss:ah,logLoss:sh,meanSquaredError:uh,sigmoidCrossEntropy:ch,softmaxCrossEntropy:lh});function fh(t,e){return void 0===e&&(e=!1),Wt.tidy((function(){if(2!==t.shape.length)throw new Error("qr2d() requires a 2D Tensor, but got a "+t.shape.length+"D Tensor.");for(var n=t.shape[0],r=t.shape[1],o=wr(n),i=t.clone(),a=On([[1]],[1,1]),s=a.clone(),u=n>=r?r:n,c=function(t){var e,u=i,c=s,l=o;e=Wt.tidy((function(){var e=i.slice([t,t],[n-t,1]),u=e.norm(),c=i.slice([t,t],[1,1]),l=On([[-1]]).where(c.greater(0),On([[1]])),h=c.sub(l.mul(u)),f=e.div(h);s=1===f.shape[0]?a.clone():a.concat(f.slice([1,0],[f.shape[0]-1,f.shape[1]]),0);var p=l.matMul(h).div(u).neg(),d=i.slice([t,0],[n-t,r]),v=p.mul(s);if(0===t)i=d.sub(v.matMul(s.transpose().matMul(d)));else{var m=d.sub(v.matMul(s.transpose().matMul(d)));i=i.slice([0,0],[t,r]).concat(m,0)}var g=o.slice([0,t],[n,o.shape[1]-t]);if(0===t)o=g.sub(g.matMul(s).matMul(v.transpose()));else{var y=g.sub(g.matMul(s).matMul(v.transpose()));o=o.slice([0,0],[n,t]).concat(y,1)}return[s,i,o]})),s=e[0],i=e[1],o=e[2],Ze([u,c,l])},l=0;l<u;++l)c(l);return!e&&n>r&&(o=o.slice([0,0],[n,r]),i=i.slice([0,0],[r,r])),[o,i]}))}var ph=Sn({bandPart_:function(t,e,n){if(e%1!=0)throw new Error("bandPart(): numLower must be an integer, got "+e+".");if(n%1!=0)throw new Error("bandPart(): numUpper must be an integer, got "+n+".");var r=vn(t,"a","bandPart");if(r.rank<2)throw new Error("bandPart(): Rank must be at least 2, got "+r.rank+".");var o=r.shape,i=r.shape.slice(-2),a=i[0],s=i[1];if(!(e<=a))throw new Error("bandPart(): numLower ("+e+") must not be greater than the number of rows ("+a+").");if(!(n<=s))throw new Error("bandPart(): numUpper ("+n+") must not be greater than the number of columns ("+s+").");e<0&&(e=a),n<0&&(n=s);var u=jn(0,a,1,"int32").reshape([-1,1]),c=jn(0,s,1,"int32"),l=pc(u,c),h=Vu(l.lessEqual(Nn(+e,"int32")),l.greaterEqual(Nn(-n,"int32"))),f=Vn([a,s],r.dtype);return Pr(Wr(r.reshape([-1,a,s])).map((function(t){return qu(h,t,f)}))).reshape(o)}}),dh=Sn({gramSchmidt_:function(t){var e;if(Array.isArray(t)){e=!1,S(null!=t&&t.length>0,(function(){return"Gram-Schmidt process: input must not be null, undefined, or empty"}));for(var n=t[0].shape[0],r=function(e){S(t[e].shape[0]===n,(function(){return"Gram-Schmidt: Non-unique lengths found in the input vectors: ("+t[e].shape[0]+" vs. "+n+")"}))},o=1;o<t.length;++o)r(o)}else e=!0,t=Zn(t,t.shape[0],0).map((function(t){return Or(t,[0])}));S(t.length<=t[0].shape[0],(function(){return"Gram-Schmidt: Number of vectors ("+t.length+") exceeds number of dimensions ("+t[0].shape[0]+")."}));var i=[],a=t,s=function(t){i.push(Wt.tidy((function(){var e=a[t];if(t>0)for(var n=0;n<t;++n){var r=Cl(i[n].mulStrict(e)).mul(i[n]);e=e.sub(r)}return e.div(Fl(e,"euclidean"))})))};for(o=0;o<t.length;++o)s(o);return e?Pr(i,0):i}}),vh=Sn({qr_:function(t,e){if(void 0===e&&(e=!1),t.rank<2)throw new Error("qr() requires input tensor to have a rank >= 2, but got rank "+t.rank);if(2===t.rank)return fh(t,e);var n=t.shape.slice(0,t.shape.length-2).reduce((function(t,e){return t*e})),r=Wr(t.reshape([n,t.shape[t.shape.length-2],t.shape[t.shape.length-1]]),0),o=[],i=[];return r.forEach((function(t){var n=fh(t,e),r=n[0],a=n[1];o.push(r),i.push(a)})),[Pr(o,0).reshape(t.shape),Pr(i,0).reshape(t.shape)]}}),mh=Object.freeze({bandPart:ph,gramSchmidt:dh,qr:vh});function gh(t,e,n,r,o,i){null==r&&(r=.5),null==o&&(o=Number.NEGATIVE_INFINITY),null==i&&(i=0);var a=t.shape[0];return n=Math.min(n,a),S(0<=r&&r<=1,(function(){return"iouThreshold must be in [0, 1], but was '"+r+"'"})),S(2===t.rank,(function(){return"boxes must be a 2D tensor, but was of rank '"+t.rank+"'"})),S(4===t.shape[1],(function(){return"boxes must have 4 columns, but 2nd dimension was "+t.shape[1]})),S(1===e.rank,(function(){return"scores must be a 1D tensor"})),S(e.shape[0]===a,(function(){return"scores has incompatible shape with boxes. Expected "+a+", but was "+e.shape[0]})),S(0<=i&&i<=1,(function(){return"softNmsSigma must be in [0, 1], but was '"+i+"'"})),{maxOutputSize:n,iouThreshold:r,scoreThreshold:o,softNmsSigma:i}}var yh=Sn({resizeBilinear_:function(t,e,n){void 0===n&&(n=!1);var r=vn(t,"images","resizeBilinear");S(3===r.rank||4===r.rank,(function(){return"Error in resizeBilinear: x must be rank 3 or 4, but got rank "+r.rank+"."})),S(2===e.length,(function(){return"Error in resizeBilinear: new shape must 2D, but got shape "+e+"."}));var o=r,i=!1;3===r.rank&&(i=!0,o=r.as4D(1,r.shape[0],r.shape[1],r.shape[2]));var a=e[0],s=e[1],u=Wt.runKernelFunc((function(t,e){return e([o]),t.resizeBilinear(o,a,s,n)}),{x:o},(function(t,e){return{x:function(){return Wt.runKernelFunc((function(r){return r.resizeBilinearBackprop(t,e[0],n)}),{})}}}),"ResizeBilinear",{alignCorners:n,newHeight:a,newWidth:s});return i?u.as3D(u.shape[1],u.shape[2],u.shape[3]):u}}),xh=Sn({resizeNearestNeighbor_:function(t,e,n){void 0===n&&(n=!1);var r=vn(t,"images","resizeNearestNeighbor");S(3===r.rank||4===r.rank,(function(){return"Error in resizeNearestNeighbor: x must be rank 3 or 4, but got rank "+r.rank+"."})),S(2===e.length,(function(){return"Error in resizeNearestNeighbor: new shape must 2D, but got shape "+e+"."})),S("float32"===r.dtype||"int32"===r.dtype,(function(){return"`images` must have `int32` or `float32` as dtype"}));var o=r,i=!1;3===r.rank&&(i=!0,o=r.as4D(1,r.shape[0],r.shape[1],r.shape[2]));var a=e[0],s=e[1],u=Wt.runKernelFunc((function(t,e){return e([o]),t.resizeNearestNeighbor(o,a,s,n)}),{batchImages:o},(function(t,e){return{batchImages:function(){return Wt.runKernelFunc((function(r){return r.resizeNearestNeighborBackprop(t,e[0],n)}),{})}}}));return i?u.as3D(u.shape[1],u.shape[2],u.shape[3]):u}}),bh=Sn({nonMaxSuppression_:function(t,e,n,r,o){void 0===r&&(r=.5),void 0===o&&(o=Number.NEGATIVE_INFINITY);var i=vn(t,"boxes","nonMaxSuppression"),a=vn(e,"scores","nonMaxSuppression"),s=gh(i,a,n,r,o);n=s.maxOutputSize,r=s.iouThreshold,o=s.scoreThreshold;var u={maxOutputSize:n,iouThreshold:r,scoreThreshold:o};return Wt.runKernelFunc((function(t){return t.nonMaxSuppression(i,a,n,r,o)}),{boxes:i,scores:a},null,"NonMaxSuppressionV3",u)}}),wh=Sn({nonMaxSuppressionWithScore_:function(t,e,n,r,o,i){void 0===r&&(r=.5),void 0===o&&(o=Number.NEGATIVE_INFINITY),void 0===i&&(i=0);var a=vn(t,"boxes","nonMaxSuppression"),s=vn(e,"scores","nonMaxSuppression"),u=gh(a,s,n,r,o,i),c={maxOutputSize:n=u.maxOutputSize,iouThreshold:r=u.iouThreshold,scoreThreshold:o=u.scoreThreshold,softNmsSigma:i=u.softNmsSigma},l=Wt.runKernel("NonMaxSuppressionV5",{boxes:a,scores:s},c);return{selectedIndices:l[0],selectedScores:l[1]}}}),Ch=Sn({cropAndResize_:function(t,e,n,r,o,i){var a=vn(t,"image","cropAndResize"),s=vn(e,"boxes","cropAndResize","float32"),u=vn(n,"boxInd","cropAndResize","int32");o=o||"bilinear",i=i||0;var c=s.shape[0];return S(4===a.rank,(function(){return"Error in cropAndResize: image must be rank 4,but got rank "+a.rank+"."})),S(2===s.rank&&4===s.shape[1],(function(){return"Error in cropAndResize: boxes must be have size ["+c+",4] but had shape "+s.shape+"."})),S(1===u.rank&&u.shape[0]===c,(function(){return"Error in cropAndResize: boxInd must be have size ["+c+"] but had shape "+s.shape+"."})),S(2===r.length,(function(){return"Error in cropAndResize: cropSize must be of length 2, but got length "+r.length+"."})),S(r[0]>=1&&r[1]>=1,(function(){return"cropSize must be atleast [1,1], but was "+r})),S("bilinear"===o||"nearest"===o,(function(){return"method must be bilinear or nearest, but was "+o})),Wt.runKernelFunc((function(t,e){return t.cropAndResize(a,s,u,r,o,i)}),{images:a,boxes:s,boxInd:u},null,"CropAndResize",{method:o,extrapolationValue:i,cropSize:r})}}),Eh=Object.freeze({resizeBilinear:yh,resizeNearestNeighbor:xh,nonMaxSuppression:bh,nonMaxSuppressionAsync:function(t,e,n,r,o){return void 0===r&&(r=.5),void 0===o&&(o=Number.NEGATIVE_INFINITY),u(this,void 0,void 0,(function(){var i,a,s,u,l,h,f;return c(this,(function(c){switch(c.label){case 0:return i=vn(t,"boxes","nonMaxSuppressionAsync"),a=vn(e,"scores","nonMaxSuppressionAsync"),s=gh(i,a,n,r,o),n=s.maxOutputSize,r=s.iouThreshold,o=s.scoreThreshold,[4,Promise.all([i.data(),a.data()])];case 1:return u=c.sent(),l=u[0],h=u[1],f=jo(l,h,n,r,o),i!==t&&i.dispose(),a!==e&&a.dispose(),[2,f]}}))}))},nonMaxSuppressionWithScore:wh,nonMaxSuppressionWithScoreAsync:function(t,e,n,r,o,i){return void 0===r&&(r=.5),void 0===o&&(o=Number.NEGATIVE_INFINITY),void 0===i&&(i=0),u(this,void 0,void 0,(function(){var a,s,u,l,h,f,p;return c(this,(function(c){switch(c.label){case 0:return a=vn(t,"boxes","nonMaxSuppressionAsync"),s=vn(e,"scores","nonMaxSuppressionAsync"),u=gh(a,s,n,r,o,i),n=u.maxOutputSize,r=u.iouThreshold,o=u.scoreThreshold,i=u.softNmsSigma,[4,Promise.all([a.data(),s.data()])];case 1:return l=c.sent(),h=l[0],f=l[1],p=qo(h,f,n,r,o,i),a!==t&&a.dispose(),s!==e&&s.dispose(),[2,p]}}))}))},cropAndResize:Ch}),_h=function(t,e){return!(t>0)||"linear"===e},Ih=function(t,e,n){if(null==n||"linear"===n)return t;if("relu"===n)return t.mul(e.step());throw new Error("Gradient for activation "+n+" has not been implemented yet.")},Rh=function(t,e){var n=e,r=wo(t.shape,e.shape);return r.length>0&&(n=n.sum(r)),n.reshape(t.shape)},Sh=function(t,e,n){if("linear"===e)return t;if("relu"===e)return Sl(t);if("elu"===e)return _l(t);if("relu6"===e)return kl(t);if("prelu"===e)return Rl(t,n);throw new Error("Unknown fused activation "+e+".")},kh=Sn({fusedMatMul_:function(t){var e,n=t.a,r=t.b,o=t.transposeA,i=void 0!==o&&o,a=t.transposeB,s=void 0!==a&&a,u=t.bias,c=t.activation,l=void 0===c?"linear":c,h=t.preluActivationWeights;if(!1===_h(Wt.state.gradientDepth,l)){var f=qc(n,r,i,s);return null!=u&&(f=Xu(f,u)),Sh(f,l,h)}var p=vn(n,"a","fused matMul"),d=vn(r,"b","fused matMul");e=Ft(p,d),p=e[0],d=e[1];var v=i?p.shape[p.rank-2]:p.shape[p.rank-1],m=s?d.shape[d.rank-1]:d.shape[d.rank-2],g=i?p.shape[p.rank-1]:p.shape[p.rank-2],y=s?d.shape[d.rank-2]:d.shape[d.rank-1],x=p.shape.slice(0,-2),b=d.shape.slice(0,-2),w=T(x),C=T(b);S(p.rank>=2&&d.rank>=2&&p.rank===d.rank,(function(){return"Error in fused matMul: inputs must have the same rank of at least 2, got ranks "+p.rank+" and "+d.rank+"."})),S(F(x,b),(function(){return"Error in fused matMul: outer dimensions ("+x+") and ("+b+") of Tensors with shapes "+p.shape+" and "+d.shape+" must match."})),S(v===m,(function(){return"Error in fused matMul: inner shapes ("+v+") and ("+m+") of Tensors with shapes "+p.shape+" and "+d.shape+" and transposeA="+i+" and transposeB="+s+" must match."}));var E,_,I=p.shape.slice(0,-2).concat([g,y]),R=i?p.as3D(w,v,g):p.as3D(w,g,v),k=s?d.as3D(C,y,m):d.as3D(C,m,y);null!=u&&Co(I,(E=Ft(E=vn(u,"bias","fused matMul"),p)[0]).shape),null!=h&&(_=vn(h,"prelu weights","fused matMul"));var D={a:R,b:k};null!=u&&(D.bias=E),null!=h&&(D.preluActivationWeights=_);var A=[R,k];return Wt.runKernelFunc((function(t,e){var n=t.fusedBatchMatMul({a:R,b:k,transposeA:i,transposeB:s,bias:E,activation:l,preluActivationWeights:_});return e([R,k,n]),n}),D,(function(t,e){var n=e[0],r=e[1],o=e[2],a=Ih(t,o,l),c={};return null!=u&&(c={bias:function(){return Rh(E,a)}}),i||s?!i&&s?Object.assign({a:function(){return a.matMul(r,!1,!1)},b:function(){return a.matMul(n,!0,!1)}},c):i&&!s?Object.assign({a:function(){return r.matMul(a,!1,!0)},b:function(){return n.matMul(a,!1,!1)}},c):Object.assign({a:function(){return r.matMul(a,!0,!0)},b:function(){return a.matMul(n,!0,!0)}},c):Object.assign({a:function(){return a.matMul(r,!1,!0)},b:function(){return n.matMul(a,!0,!1)}},c)}),"_FusedMatMul",{transposeA:i,transposeB:s,activation:l},A,[!0]).reshape(I)}}),Dh=Sn({fusedConv2d_:function(t){var e=t.x,n=t.filter,r=t.strides,o=t.pad,i=t.dataFormat,a=void 0===i?"NHWC":i,s=t.dilations,u=void 0===s?[1,1]:s,c=t.dimRoundingMode,l=t.bias,h=t.activation,f=void 0===h?"linear":h,p=t.preluActivationWeights;if(f=f||"linear",!1===_h(Wt.state.gradientDepth,f)){var d=Pc(e,n,r,o,a,u,c);return null!=l&&(d=Xu(d,l)),Sh(d,f,p)}var v=vn(e,"x","conv2d"),m=vn(n,"filter","conv2d"),g=v,y=!1;3===v.rank&&(y=!0,g=v.as4D(1,v.shape[0],v.shape[1],v.shape[2])),S(4===g.rank,(function(){return"Error in fused conv2d: input must be rank 4, but got rank "+g.rank+"."})),S(4===m.rank,(function(){return"Error in fused conv2d: filter must be rank 4, but got rank "+m.rank+"."})),null!=c&&S(N(o),(function(){return"Error in fused conv2d: pad must be an integer when using, dimRoundingMode "+c+" but got pad "+o+"."})),S(g.shape[3]===m.shape[2],(function(){return"Error in conv2d: depth of input ("+g.shape[3]+") must match input depth for filter "+m.shape[2]+"."})),S(No(r,u),(function(){return"Error in conv2D: Either strides or dilations must be 1. Got strides "+r+" and dilations '"+u+"'"})),S("NHWC"===a,(function(){return"Error in conv2d: got dataFormat of "+a+" but only NHWC is currently supported."}));var x,b,w=Io(g.shape,m.shape,r,u,o,c);null!=l&&(x=Ft(x=vn(l,"bias","fused conv2d"),v)[0],Co(w.outShape,x.shape)),null!=p&&(b=vn(p,"prelu weights","fused conv2d"));var C={x:g,filter:m};null!=l&&(C.bias=x),null!=p&&(C.preluActivationWeights=b);var E=[m,g],_=Wt.runKernelFunc((function(t,e){var n=t.fusedConv2d({input:g,filter:m,convInfo:w,bias:x,activation:f,preluActivationWeights:b});return e([m,g,n]),n}),C,(function(t,e){var n=e,i=n[0],a=n[1],s=n[2],c=Ih(t,s,f);S(Fo(u),(function(){return"Error in gradient of fused conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '"+u+"'"}));var h={};return null!=l&&(h={bias:function(){return Rh(x,c)}}),Object.assign({x:function(){return Wc(a.shape,c,i,r,o)},filter:function(){return Lc(a,c,i.shape,r,o)}},h)}),"FusedConv2D",{convInfo:w,activation:f},E,[!0]);return y?_.as3D(_.shape[1],_.shape[2],_.shape[3]):_}}),Ah=Sn({fusedDepthwiseConv2d_:function(t){var e=t.x,n=t.filter,r=t.strides,o=t.pad,i=t.dataFormat,a=void 0===i?"NHWC":i,s=t.dilations,u=void 0===s?[1,1]:s,c=t.dimRoundingMode,l=t.bias,h=t.activation,f=void 0===h?"linear":h,p=t.preluActivationWeights;if(!1===_h(Wt.state.gradientDepth,f)){var d=zc(e,n,r,o,a,u,c);return null!=l&&(d=Xu(d,l)),Sh(d,f,p)}var v=vn(e,"x","depthwiseConv2d"),m=vn(n,"filter","depthwiseConv2d"),g=v,y=!1;3===v.rank&&(y=!0,g=v.as4D(1,v.shape[0],v.shape[1],v.shape[2])),S(4===g.rank,(function(){return"Error in fused depthwiseConv2d: input must be rank 4, but got rank "+g.rank+"."})),S(4===m.rank,(function(){return"Error in fused depthwiseConv2d: filter must be rank 4, but got rank "+m.rank+"."})),S(g.shape[3]===m.shape[2],(function(){return"Error in fused depthwiseConv2d: number of input channels ("+g.shape[3]+") must match the inChannels dimension in filter "+m.shape[2]+"."})),null==u&&(u=[1,1]),S(No(r,u),(function(){return"Error in fused depthwiseConv2d: Either strides or dilations must be 1. Got strides "+r+" and dilations '"+u+"'"})),null!=c&&S(N(o),(function(){return"Error in fused depthwiseConv2d: pad must be an integer when using dimRoundingMode "+c+" but got pad "+o+"."}));var x,b,w=Io(g.shape,m.shape,r,u,o,c,!0);null!=l&&(x=Ft(x=vn(l,"bias","fused conv2d"),v)[0],Co(w.outShape,x.shape)),null!=p&&(b=vn(p,"prelu weights","fused depthwiseConv2d"));var C={x:g,filter:m};null!=l&&(C.bias=x),null!=p&&(C.preluActivationWeights=b);var E=[m,g],_=Wt.runKernelFunc((function(t,e){var n=t.fusedDepthwiseConv2D({input:g,filter:m,convInfo:w,bias:x,activation:f,preluActivationWeights:b});return e([m,g,n]),n}),C,(function(t,e){S(Fo(u),(function(){return"Error in gradient of fused depthwiseConv2d: dilation rates greater than 1 are not yet supported. Got dilations '"+u+"'"}));var n=e[0],r=e[1],o=e[2],i=Ih(t,o,f),a={};return null!=l&&(a={bias:function(){return Rh(x,i)}}),Object.assign({x:function(){return Uc(r.shape,i,n,w)},filter:function(){return Vc(r,i,n.shape,w)}},a)}),"FusedDepthwiseConv2D",{convInfo:w,activation:f},E,[!0]);return y?_.as3D(_.shape[1],_.shape[2],_.shape[3]):_}}),Th=Object.freeze({matMul:kh,conv2d:Dh,depthwiseConv2d:Ah}),Fh=Object.freeze({image:Eh,linalg:mh,losses:hh,spectral:Gl,fused:Th,signal:th,square:js,squaredDifference:Ks,conv1d:Oc,conv2d:Pc,conv3d:Bc,depthwiseConv2d:zc,separableConv2d:Gc,conv2dTranspose:Hc,conv3dTranspose:jc,op:Sn,batchNormalization2d:Mu,batchNormalization3d:Ou,batchNormalization4d:Pu,batchNormalization:Bu,batchNorm:Lu,batchNorm2d:Wu,batchNorm3d:zu,batchNorm4d:Uu,booleanMaskAsync:Tc,complex:kn,real:Dn,imag:An,concat:Xn,concat1d:Yn,concat2d:$n,concat3d:Jn,concat4d:Qn,split:Zn,matMul:qc,dot:Kc,outerProduct:Xc,reverse:Yc,reverse1d:$c,reverse2d:Jc,reverse3d:Qc,reverse4d:Zc,maxPool:nl,avgPool:rl,pool:ol,maxPool3d:il,avgPool3d:al,slice:sl,slice1d:ul,slice2d:cl,slice3d:ll,slice4d:hl,abs:Xs,acos:Ys,acosh:$s,asin:Js,asinh:Qs,atan:Zs,atanh:tu,ceil:eu,clipByValue:nu,cos:ru,cosh:ou,erf:iu,exp:au,expm1:su,floor:uu,log:cu,log1p:lu,logSigmoid:hu,neg:fu,reciprocal:pu,round:du,rsqrt:vu,sigmoid:mu,sign:gu,isNaN:yu,isInf:xu,isFinite:bu,sin:wu,sinh:Cu,softplus:Eu,sqrt:_u,step:Iu,tan:Ru,tanh:Su,all:pl,any:dl,argMax:vl,argMin:ml,logSumExp:gl,max:yl,mean:xl,min:bl,moments:wl,sum:Cl,prod:El,equal:vc,equalStrict:mc,greater:gc,greaterEqual:yc,greaterEqualStrict:xc,greaterStrict:bc,less:wc,lessEqual:Cc,lessEqualStrict:Ec,lessStrict:_c,notEqual:Ic,notEqualStrict:Rc,add:Xu,addN:Yu,addStrict:$u,atan2:Ju,div:Qu,divNoNan:Zu,divStrict:tc,floorDiv:ec,maximum:nc,maximumStrict:rc,minimum:oc,minimumStrict:ic,mod:ac,modStrict:sc,mul:uc,mulStrict:cc,pow:lc,powStrict:hc,squaredDifferenceStrict:fc,sub:pc,subStrict:dc,elu:_l,leakyRelu:Il,prelu:Rl,relu:Sl,relu6:kl,selu:Dl,logicalAnd:Vu,logicalNot:Gu,logicalOr:Hu,logicalXor:ju,where:qu,whereAsync:Ku,buffer:fr,print:pr,batchToSpaceND:dr,broadcastTo:vr,cast:mr,clone:gr,cumsum:yr,depthToSpace:xr,expandDims:br,eye:wr,multinomial:Cr,oneHot:Er,pad:_r,pad1d:Ir,pad2d:Rr,pad3d:Sr,pad4d:kr,rand:Dr,randomNormal:Ar,randomGamma:Tr,randomUniform:Fr,reshape:Nr,spaceToBatchND:Mr,squeeze:Or,stack:Pr,tile:Br,truncatedNormal:Lr,unstack:Wr,setdiff1dAsync:zr,fill:Gn,linspace:Hn,ones:Un,range:jn,scalar:Nn,tensor:Tn,tensor1d:Mn,tensor2d:On,tensor3d:Pn,tensor4d:Bn,tensor5d:Ln,tensor6d:Wn,variable:zn,zeros:Vn,onesLike:qn,zerosLike:Kn,transpose:Al,softmax:vo,logSoftmax:mo,localResponseNormalization:Tl,norm:Fl,gather:Dc,unsortedSegmentSum:Ac,basicLSTMCell:Nl,multiRNNCell:Ml,movingAverage:Ol,stridedSlice:Pl,topk:Bl,scatterND:Ll,fft:Wl,ifft:zl,rfft:Ul,irfft:Vl,sparseToDense:Hl,gatherND:jl,diag:ql,dropout:Kl,hannWindow:$l,hammingWindow:Jl,frame:Ql,stft:Zl,inTopKAsync:eh});function Nh(t,e){Array.isArray(t)||(t=[t]),t.forEach((function(t){null!=t&&S("complex64"!==t.dtype,(function(){return e+" does not support complex64 tensors."}))}))}function Mh(t,e,n,r){if("linear"===n)return t.linear(e);if("relu"===n)return t.relu(e);if("elu"===n)return t.elu(e);if("relu6"===n)return t.relu6(e);if("prelu"===n)return t.prelu(e,r);throw new Error("Activation "+n+" has not been implemented for the CPU backend.")}var Oh=function(t){function e(){var e=t.call(this)||this;return e.blockSize=48,e.firstUse=!0,e.data=new go(e,Wt),e}return s(e,t),e.prototype.write=function(t,e,n){this.firstUse&&(this.firstUse=!1,h().get("IS_NODE")&&fn("\n============================\nHi there 👋. Looks like you are running TensorFlow.js in Node.js. To speed things up dramatically, install our node backend, which binds to TensorFlow C++, by running npm i @tensorflow/tfjs-node, or npm i @tensorflow/tfjs-node-gpu if you have CUDA. Then call require('@tensorflow/tfjs-node'); (-gpu suffix for CUDA) at the start of your program. Visit https://github.com/tensorflow/tfjs-node for more details.\n============================"));var r={};return this.data.set(r,{values:t,dtype:n}),r},e.prototype.move=function(t,e,n,r){this.data.set(t,{values:e,dtype:r})},e.prototype.numDataIds=function(){return this.data.numDataIds()},e.prototype.read=function(t){return u(this,void 0,void 0,(function(){return c(this,(function(e){return[2,this.readSync(t)]}))}))},e.prototype.readSync=function(t){var e=this.data.get(t),n=e.dtype,r=e.complexTensors;return"complex64"===n?Wo(this.readSync(r.real.dataId),this.readSync(r.imag.dataId)):this.data.get(t).values},e.prototype.bufferSync=function(t){var e=this.readSync(t.dataId),n=e;if("string"===t.dtype)try{n=e.map((function(t){return ct(t)}))}catch(t){throw new Error("Failed to decode encoded string bytes into utf-8")}return fr(t.shape,t.dtype,n)},e.prototype.makeOutput=function(t,e,n){var r=this.write(t,e,n);return Wt.makeTensorFromDataId(r,e,n,this)},e.prototype.disposeData=function(t){if(this.data.has(t)){var e=this.data.get(t).complexTensors;null!=e&&(e.real.dispose(),e.imag.dispose()),this.data.delete(t)}},e.prototype.time=function(t){return u(this,void 0,void 0,(function(){var e;return c(this,(function(n){return e=at(),t(),[2,{kernelMs:at()-e}]}))}))},e.prototype.memory=function(){return{unreliable:!0,reasons:["The reported memory is an upper bound. Due to automatic garbage collection, the true allocated memory may be less."]}},e.prototype.complex=function(t,e){var n=this.makeOutput(null,t.shape,"complex64");return this.data.get(n.dataId).complexTensors={real:Wt.keep(t.clone()),imag:Wt.keep(e.clone())},n},e.prototype.real=function(t){return this.data.get(t.dataId).complexTensors.real.clone()},e.prototype.imag=function(t){return this.data.get(t.dataId).complexTensors.imag.clone()},e.prototype.slice=function(t,e,n){if(Nh(t,"slice"),oo(t.shape,e,n)){var r=io(e,t.strides),o=T(n);return Tn(this.readSync(t.dataId).subarray(r,r+o),n,t.dtype)}for(var i=fr(n,t.dtype),a=this.bufferSync(t),s=0;s<i.size;++s){var u=i.indexToLoc(s).map((function(t,n){return t+e[n]}));i.values[s]=a.get.apply(a,u)}return i.toTensor()},e.prototype.stridedSlice=function(t,e,n,r){Nh(t,"stridedSlice");var o=eo(e,n,r);if(o.some((function(t){return 0===t})))return Tn([],o);for(var i=fr(o,t.dtype),a=this.bufferSync(t),s=0;s<i.size;s++){for(var u=i.indexToLoc(s),c=new Array(u.length),l=0;l<c.length;l++)c[l]=u[l]*r[l]+e[l];i.set.apply(i,[a.get.apply(a,c)].concat(u))}return i.toTensor()},e.prototype.diag=function(t){for(var e=this.readSync(t.dataId),n=fr([t.size,t.size],t.dtype),r=n.values,o=0;o<e.length;o++)r[o*t.size+o]=e[o];return n.toTensor()},e.prototype.unstack=function(t,e){for(var n=t.shape[e],r=new Array(t.rank-1),o=0,i=0;i<t.rank;i++)i!==e&&(r[o++]=t.shape[i]);var a=new Array(t.rank).fill(0),s=t.shape.slice();s[e]=1;var u=new Array(n);for(i=0;i<u.length;i++)a[e]=i,u[i]=this.slice(t,a,s).reshape(r);return u},e.prototype.reverse=function(t,e){Nh(t,"reverse");for(var n=fr(t.shape,t.dtype),r=this.bufferSync(t),o=function(o){var i=n.indexToLoc(o),a=i.slice();e.forEach((function(e){return a[e]=t.shape[e]-1-a[e]})),n.set.apply(n,[r.get.apply(r,a)].concat(i))},i=0;i<n.size;i++)o(i);return n.toTensor()},e.prototype.concat=function(t,e){var n=this;if("complex64"===t[0].dtype){var r=t.map((function(t){return Dn(t)})),o=t.map((function(t){return An(t)}));return kn(this.concat(r,e),this.concat(o,e))}var i=t.map((function(t){var n=T(t.shape.slice(e));return t.as2D(-1,n)})),a=Rn(i.map((function(t){return t.shape})),1),s=fr(a,t[0].dtype).values;if(1===i[0].shape[0]){var u=0;i.forEach((function(t){s.set(n.readSync(t.dataId),u),u+=t.size}))}else{var c=0;i.forEach((function(t){for(var e=n.readSync(t.dataId),r=0,o=0;o<t.shape[0];++o)for(var i=o*a[1]+c,u=0;u<t.shape[1];++u)s[i+u]=e[r++];c+=t.shape[1]}))}var l=Rn(t.map((function(t){return t.shape})),e);return Tn(s,l,t[0].dtype)},e.prototype.neg=function(t){return Nh(t,"neg"),this.multiply(Nn(-1),t)},e.prototype.add=function(t,e){return"complex64"===t.dtype||"complex64"===e.dtype?this.broadcastedBinaryComplexOp(t.cast("complex64"),e.cast("complex64"),(function(t,e,n,r){return{real:t+n,imag:e+r}})):this.broadcastedBinaryOp(t,e,At(t.dtype,e.dtype),(function(t,e){return t+e}))},e.prototype.addN=function(t){var e=this;Nh(t,"addN");for(var n=t.map((function(t){return e.readSync(t.dataId)})),r=fr(t[0].shape,t[0].dtype),o=r.values,i=0;i<t.length;i++)for(var a=n[i],s=0;s<o.length;s++)o[s]+=a[s];return r.toTensor()},e.prototype.softmax=function(t,e){var n=W([e],t.shape),r=this.max(t,n),o=bn(r.shape,n),i=this.subtract(t,r.reshape(o)),a=this.exp(i),s=this.sum(a,n).reshape(o);return this.realDivide(a,s)},e.prototype.subtract=function(t,e){return"complex64"===t.dtype||"complex64"===e.dtype?this.broadcastedBinaryComplexOp(t.cast("complex64"),e.cast("complex64"),(function(t,e,n,r){return{real:t-n,imag:e-r}})):this.broadcastedBinaryOp(t,e,At(t.dtype,e.dtype),(function(t,e){return t-e}))},e.prototype.pow=function(t,e){return Nh([t,e],"pow"),this.broadcastedBinaryOp(t,e,t.dtype,(function(t,e){return Math.pow(t,e)}))},e.prototype.batchMatMul=function(t,e,n,r){Nh([t,e],"matMul");for(var o=n?t.shape[1]:t.shape[2],i=n?t.shape[2]:t.shape[1],a=r?e.shape[1]:e.shape[2],s=t.shape[0],u=this.readSync(t.dataId),c=this.readSync(e.dataId),l=n?[t.strides[0],1,t.strides[1]]:[t.strides[0],t.strides[1],1],h=l[0],f=l[1],p=l[2],d=r?[1,e.strides[1],e.strides[0]]:[e.strides[1],1,e.strides[0]],v=d[0],m=d[1],g=d[2],y=i*a,x=fr([s,i,a],t.dtype),b=x.values,w=this.blockSize,C=0;C<s;C++)for(var E=0;E<i;E+=w)for(var _=0;_<a;_+=w)for(var I=0;I<o;I+=w)for(var R=Math.min(E+w,i),S=Math.min(_+w,a),k=Math.min(I+w,o),D=E;D<R;D++)for(var A=_;A<S;A++){for(var T=0,F=I;F<k;F++)T+=u[C*h+D*f+F*p]*c[F*v+A*m+C*g];b[C*y+(D*a+A)]+=T}return x.toTensor()},e.prototype.fusedBatchMatMul=function(t){var e=t.a,n=t.b,r=t.transposeA,o=t.transposeB,i=t.bias,a=t.activation,s=t.preluActivationWeights,u=this.batchMatMul(e,n,r,o);return i&&(u=this.add(u,i)),a&&(u=Mh(this,u,a,s)),u},e.prototype.multiply=function(t,e){return"complex64"===t.dtype||"complex64"===e.dtype?this.broadcastedBinaryComplexOp(t.cast("complex64"),e.cast("complex64"),(function(t,e,n,r){return{real:t*n-e*r,imag:t*r+e*n}})):this.broadcastedBinaryOp(t,e,At(t.dtype,e.dtype),(function(t,e){return t*e}))},e.prototype.realDivide=function(t,e){return Nh([t,e],"realDivide"),this.broadcastedBinaryOp(t,e,"float32",(function(t,e){return t/e}))},e.prototype.floorDiv=function(t,e){return Nh([t,e],"floorDiv"),this.broadcastedBinaryOp(t,e,"int32",(function(t,e){return Math.floor(t/e)}))},e.prototype.sum=function(t,e){Nh(t,"sum"),wn("sum",e,t.rank);for(var n=xn(t.shape,e),r=n[0],o=n[1],i=Vn(r,At(t.dtype,"int32")),a=T(o),s=this.readSync(i.dataId),u=this.readSync(t.dataId),c=0;c<s.length;++c){for(var l=c*a,h=0,f=0;f<a;++f)h+=u[l+f];s[c]=h}return i},e.prototype.prod=function(t,e){Nh(t,"sum");for(var n=xn(t.shape,e),r=n[0],o=n[1],i=Vn(r,At(t.dtype,"int32")),a=T(o),s=this.readSync(i.dataId),u=this.readSync(t.dataId),c=0;c<s.length;++c){for(var l=c*a,h=1,f=0;f<a;++f)h*=u[l+f];s[c]=h}return i},e.prototype.unsortedSegmentSum=function(t,e,n){Nh(t,"unsortedSegmentSum");for(var r=[],o=t.rank-e.rank,i=0;i<o;++i)e=e.expandDims(i+1);for(i=0;i<n;++i){var a=Nn(i,"int32"),s=vc(a,e).asType("float32").mul(t).sum(0);r.push(s)}return Pr(r)},e.prototype.argMin=function(t,e){Nh(t,"argMin");var n=[e];wn("argMin",n,t.rank);for(var r=xn(t.shape,n),o=r[0],i=r[1],a=Vn(o,"int32"),s=T(i),u=this.readSync(a.dataId),c=this.readSync(t.dataId),l=0;l<u.length;++l){for(var h=l*s,f=c[h],p=0,d=0;d<s;++d){var v=c[h+d];v<f&&(f=v,p=d)}u[l]=p}return a},e.prototype.argMax=function(t,e){Nh(t,"argMax");var n=[e];wn("argMax",n,t.rank);for(var r=xn(t.shape,n),o=r[0],i=r[1],a=Vn(o,"int32"),s=T(i),u=this.readSync(a.dataId),c=this.readSync(t.dataId),l=0;l<u.length;++l){for(var h=l*s,f=c[h],p=0,d=0;d<s;++d){var v=c[h+d];v>f&&(f=v,p=d)}u[l]=p}return a},e.prototype.cumsum=function(t,e,n,r){if(Nh(t,"cumsum"),e!==t.rank-1)throw new Error("backend.cumsum in CPU expects an inner-most axis="+(t.rank-1)+" but got axis="+e);for(var o=At(t.dtype,"int32"),i=Vn(t.shape,o),a=this.readSync(i.dataId),s=this.readSync(t.dataId),u=t.shape[t.rank-1],c=r?function(t,e){return t+u-e-1}:function(t,e){return t+e},l=0;l<s.length;l+=u)for(var h=0;h<u;h++){var f=c(l,h);if(0===h)a[f]=n?0:s[f];else{var p=c(l,h-1);a[f]=n?s[p]+a[p]:s[f]+a[p]}}return i},e.prototype.equal=function(t,e){return Nh([t,e],"equal"),this.broadcastedBinaryOp(t,e,"bool",(function(t,e){return t===e?1:0}))},e.prototype.notEqual=function(t,e){return Nh([t,e],"notEqual"),this.broadcastedBinaryOp(t,e,"bool",(function(t,e){return t!==e?1:0}))},e.prototype.less=function(t,e){return Nh([t,e],"less"),this.broadcastedBinaryOp(t,e,"bool",(function(t,e){return t<e?1:0}))},e.prototype.lessEqual=function(t,e){return Nh([t,e],"lessEqual"),this.broadcastedBinaryOp(t,e,"bool",(function(t,e){return t<=e?1:0}))},e.prototype.greater=function(t,e){return Nh([t,e],"greater"),this.broadcastedBinaryOp(t,e,"bool",(function(t,e){return t>e?1:0}))},e.prototype.greaterEqual=function(t,e){return Nh([t,e],"greaterEqual"),this.broadcastedBinaryOp(t,e,"bool",(function(t,e){return t>=e?1:0}))},e.prototype.logicalNot=function(t){Nh(t,"logicalNot");for(var e=this.readSync(t.dataId),n=new Uint8Array(e.length),r=0;r<e.length;++r)n[r]=e[r]?0:1;return this.makeOutput(n,t.shape,"bool")},e.prototype.logicalAnd=function(t,e){return Nh([t,e],"logicalAnd"),this.broadcastedBinaryOp(t,e,"bool",(function(t,e){return t&&e}))},e.prototype.logicalOr=function(t,e){return Nh([t,e],"logicalOr"),this.broadcastedBinaryOp(t,e,"bool",(function(t,e){return t||e}))},e.prototype.select=function(t,e,n){Nh([t,e,n],"select");for(var r=this.readSync(t.dataId),o=this.readSync(e.dataId),i=this.readSync(n.dataId),a=Vn(e.shape,At(e.dtype,n.dtype)),s=this.readSync(a.dataId),u=0,c=0===t.rank||t.rank>1||1===e.rank?1:T(e.shape.slice(1)),l=0;l<r.length;l++)for(var h=0;h<c;h++)1===r[l]?s[u++]=o[l]:s[u++]=i[l];return a},e.prototype.where=function(t){Nh([t],"where");var e=this.readSync(t.dataId);return ti(t.shape,e)},e.prototype.topk=function(t,e,n){return Nh(t,"topk"),Zo(this.readSync(t.dataId),t.shape,t.dtype,e)},e.prototype.min=function(t,e){Nh(t,"min"),wn("min",e,t.rank);for(var n=xn(t.shape,e),r=n[0],o=n[1],i=Vn(r,t.dtype),a=T(o),s=this.readSync(i.dataId),u=this.readSync(t.dataId),c=0;c<s.length;++c){for(var l=c*a,h=u[l],f=0;f<a;++f){var p=u[l+f];p<h&&(h=p)}s[c]=h}return i},e.prototype.minimum=function(t,e){return Nh([t,e],"minimum"),this.broadcastedBinaryOp(t,e,t.dtype,(function(t,e){return Math.min(t,e)}))},e.prototype.mod=function(t,e){return Nh([t,e],"mod"),this.broadcastedBinaryOp(t,e,t.dtype,(function(t,e){var n=t%e;return t<0&&e<0||t>=0&&e>=0?n:(n+e)%e}))},e.prototype.max=function(t,e){Nh(t,"max"),wn("max",e,t.rank);for(var n=xn(t.shape,e),r=n[0],o=n[1],i=Vn(r,t.dtype),a=T(o),s=this.readSync(i.dataId),u=this.readSync(t.dataId),c=0;c<s.length;++c){for(var l=c*a,h=u[l],f=0;f<a;++f){var p=u[l+f];p>h&&(h=p)}s[c]=h}return i},e.prototype.maximum=function(t,e){return Nh([t,e],"maximum"),this.broadcastedBinaryOp(t,e,t.dtype,(function(t,e){return Math.max(t,e)}))},e.prototype.all=function(t,e){Nh(t,"all"),wn("all",e,t.rank);for(var n=xn(t.shape,e),r=n[0],o=n[1],i=Vn(r,t.dtype),a=T(o),s=this.readSync(i.dataId),u=this.readSync(t.dataId),c=0;c<s.length;++c){for(var l=c*a,h=u[l],f=0;f<a;++f){var p=u[l+f];h=h&&p}s[c]=h}return i},e.prototype.any=function(t,e){Nh(t,"any"),wn("any",e,t.rank);for(var n=xn(t.shape,e),r=n[0],o=n[1],i=Vn(r,t.dtype),a=T(o),s=this.readSync(i.dataId),u=this.readSync(t.dataId),c=0;c<s.length;++c){for(var l=c*a,h=u[l],f=0;f<a;++f){var p=u[l+f];h=h||p}s[c]=h}return i},e.prototype.squaredDifference=function(t,e){return Nh([t,e],"squaredDifference"),this.broadcastedBinaryOp(t,e,t.dtype,(function(t,e){var n=t-e;return n*n}))},e.prototype.ceil=function(t){Nh(t,"ceil");for(var e=this.readSync(t.dataId),n=new Float32Array(e.length),r=0;r<e.length;++r)n[r]=Math.ceil(e[r]);return this.makeOutput(n,t.shape,"float32")},e.prototype.floor=function(t){Nh(t,"floor");for(var e=this.readSync(t.dataId),n=new Float32Array(e.length),r=0;r<e.length;++r)n[r]=Math.floor(e[r]);return this.makeOutput(n,t.shape,"float32")},e.prototype.sign=function(t){Nh(t,"x");for(var e=this.readSync(t.dataId),n=new Float32Array(e.length),r=0;r<e.length;++r)e[r]<0?n[r]=-1:e[r]>0?n[r]=1:n[r]=0;return this.makeOutput(n,t.shape,"float32")},e.prototype.isNaN=function(t){Nh(t,"x");for(var e=this.readSync(t.dataId),n=new Uint8Array(e.length),r=0;r<e.length;++r)Number.isNaN(e[r])&&(n[r]=1);return this.makeOutput(n,t.shape,"bool")},e.prototype.isInf=function(t){Nh(t,"x");for(var e=this.readSync(t.dataId),n=new Uint8Array(e.length),r=0;r<e.length;++r)Math.abs(e[r])===1/0&&(n[r]=1);return this.makeOutput(n,t.shape,"bool")},e.prototype.isFinite=function(t){Nh(t,"x");for(var e=this.readSync(t.dataId),n=new Uint8Array(e.length),r=0;r<e.length;++r)Number.isFinite(e[r])&&(n[r]=1);return this.makeOutput(n,t.shape,"bool")},e.prototype.round=function(t){Nh(t,"round");for(var e=this.readSync(t.dataId),n=new Float32Array(e.length),r=0;r<e.length;++r){var o=Math.floor(e[r]);e[r]-o<.5?n[r]=Math.floor(e[r]):e[r]-o>.5?n[r]=Math.ceil(e[r]):n[r]=o%2==0?o:o+1}return this.makeOutput(n,t.shape,"float32")},e.prototype.exp=function(t){Nh(t,"exp");for(var e=this.readSync(t.dataId),n=new Float32Array(e.length),r=0;r<e.length;++r)n[r]=Math.exp(e[r]);return this.makeOutput(n,t.shape,"float32")},e.prototype.expm1=function(t){Nh(t,"expm1");for(var e=this.readSync(t.dataId),n=new Float32Array(e.length),r=0;r<e.length;++r)n[r]=Math.expm1(e[r]);return this.makeOutput(n,t.shape,"float32")},e.prototype.log=function(t){Nh(t,"log");for(var e=this.readSync(t.dataId),n=new Float32Array(e.length),r=0;r<e.length;++r){var o=e[r];n[r]=Math.log(o)}return this.makeOutput(n,t.shape,"float32")},e.prototype.log1p=function(t){Nh(t,"log1p");for(var e=this.readSync(t.dataId),n=new Float32Array(e.length),r=0;r<e.length;++r){var o=e[r];n[r]=Math.log1p(o)}return this.makeOutput(n,t.shape,"float32")},e.prototype.sqrt=function(t){Nh(t,"sqrt");for(var e=this.readSync(t.dataId),n=new Float32Array(e.length),r=0;r<e.length;++r){var o=e[r];n[r]=Math.sqrt(o)}return this.makeOutput(n,t.shape,"float32")},e.prototype.rsqrt=function(t){Nh(t,"rsqrt");for(var e=this.readSync(t.dataId),n=new Float32Array(e.length),r=0;r<e.length;++r){var o=e[r];n[r]=1/Math.sqrt(o)}return this.makeOutput(n,t.shape,"float32")},e.prototype.reciprocal=function(t){Nh(t,"reciprocal");for(var e=this.readSync(t.dataId),n=new Float32Array(e.length),r=0;r<e.length;++r)n[r]=1/e[r];return this.makeOutput(n,t.shape,"float32")},e.prototype.linear=function(t){return t},e.prototype.relu=function(t){Nh(t,"relu");for(var e=Vn(t.shape,t.dtype),n=this.readSync(e.dataId),r=this.readSync(t.dataId),o=0;o<r.length;++o)n[o]=Math.max(0,r[o]);return e},e.prototype.relu6=function(t){Nh(t,"relu");for(var e=Vn(t.shape,t.dtype),n=this.readSync(e.dataId),r=this.readSync(t.dataId),o=0;o<r.length;++o)n[o]=Math.min(Math.max(0,r[o]),6);return e},e.prototype.prelu=function(t,e){return Nh([t,e],"prelu"),this.broadcastedBinaryOp(t,e,t.dtype,(function(t,e){return t<0?e*t:t}))},e.prototype.elu=function(t){Nh(t,"elu");for(var e=new Float32Array(t.size),n=this.readSync(t.dataId),r=0;r<n.length;++r){var o=n[r];e[r]=o>=0?o:Math.exp(o)-1}return this.makeOutput(e,t.shape,"float32")},e.prototype.eluDer=function(t,e){Nh([t,e],"eluDer");for(var n=new Float32Array(e.size),r=this.readSync(e.dataId),o=this.readSync(t.dataId),i=0;i<r.length;++i){var a=r[i];n[i]=a>=1?o[i]:o[i]*(a+1)}return this.makeOutput(n,e.shape,"float32")},e.prototype.selu=function(t){Nh(t,"selu");for(var e=ds,n=vs,r=new Float32Array(t.size),o=this.readSync(t.dataId),i=0;i<o.length;++i){var a=o[i];r[i]=a>=0?n*a:e*(Math.exp(a)-1)}return this.makeOutput(r,t.shape,"float32")},e.prototype.clip=function(t,e,n){Nh(t,"clip");for(var r=new Float32Array(t.size),o=this.readSync(t.dataId),i=0;i<o.length;++i){var a=o[i];r[i]=a>n?n:a<e?e:a}return this.makeOutput(r,t.shape,"float32")},e.prototype.abs=function(t){for(var e=new Float32Array(t.size),n=this.readSync(t.dataId),r=0;r<n.length;++r)e[r]=Math.abs(n[r]);return this.makeOutput(e,t.shape,"float32")},e.prototype.complexAbs=function(t){for(var e=new Float32Array(t.size),n=this.readSync(t.dataId),r=0;r<t.size;++r){var o=n[2*r],i=n[2*r+1];e[r]=Math.hypot(o,i)}return this.makeOutput(e,t.shape,"float32")},e.prototype.int=function(t){Nh(t,"int");for(var e=new Int32Array(t.size),n=this.readSync(t.dataId),r=0;r<n.length;++r)e[r]=n[r];return this.makeOutput(e,t.shape,"int32")},e.prototype.sigmoid=function(t){Nh(t,"sigmoid");for(var e=new Float32Array(t.size),n=this.readSync(t.dataId),r=0;r<n.length;++r)e[r]=1/(1+Math.exp(-n[r]));return this.makeOutput(e,t.shape,"float32")},e.prototype.softplus=function(t){Nh(t,"softplus");for(var e=Math.log(1.1920928955078125e-7)+2,n=new Float32Array(t.size),r=this.readSync(t.dataId),o=0;o<r.length;++o){var i,a=r[o]>-e,s=r[o]<e,u=Math.exp(r[o]);i=s?u:a?r[o]:Math.log(1+u),n[o]=i}return this.makeOutput(n,t.shape,"float32")},e.prototype.sin=function(t){Nh(t,"sin");for(var e=new Float32Array(t.size),n=this.readSync(t.dataId),r=0;r<n.length;++r)e[r]=Math.sin(n[r]);return this.makeOutput(e,t.shape,"float32")},e.prototype.cos=function(t){Nh(t,"cos");for(var e=new Float32Array(t.size),n=this.readSync(t.dataId),r=0;r<n.length;++r)e[r]=Math.cos(n[r]);return this.makeOutput(e,t.shape,"float32")},e.prototype.tan=function(t){Nh(t,"tan");for(var e=new Float32Array(t.size),n=this.readSync(t.dataId),r=0;r<n.length;++r)e[r]=Math.tan(n[r]);return this.makeOutput(e,t.shape,"float32")},e.prototype.asin=function(t){Nh(t,"asin");for(var e=new Float32Array(t.size),n=this.readSync(t.dataId),r=0;r<n.length;++r)e[r]=Math.asin(n[r]);return this.makeOutput(e,t.shape,"float32")},e.prototype.acos=function(t){Nh(t,"acos");for(var e=new Float32Array(t.size),n=this.readSync(t.dataId),r=0;r<n.length;++r)e[r]=Math.acos(n[r]);return this.makeOutput(e,t.shape,"float32")},e.prototype.atan=function(t){Nh(t,"atan");for(var e=new Float32Array(t.size),n=this.readSync(t.dataId),r=0;r<n.length;++r)e[r]=Math.atan(n[r]);return this.makeOutput(e,t.shape,"float32")},e.prototype.atan2=function(t,e){return Nh([t,e],"atan2"),this.broadcastedBinaryOp(t,e,t.dtype,(function(t,e){return Math.atan2(t,e)}))},e.prototype.sinh=function(t){Nh(t,"sinh");for(var e=new Float32Array(t.size),n=this.readSync(t.dataId),r=0;r<n.length;++r)e[r]=Math.sinh(n[r]);return this.makeOutput(e,t.shape,"float32")},e.prototype.cosh=function(t){Nh(t,"cosh");for(var e=new Float32Array(t.size),n=this.readSync(t.dataId),r=0;r<n.length;++r)e[r]=Math.cosh(n[r]);return this.makeOutput(e,t.shape,"float32")},e.prototype.tanh=function(t){Nh(t,"tanh");for(var e=new Float32Array(t.size),n=this.readSync(t.dataId),r=0;r<n.length;++r)e[r]=M(n[r]);return this.makeOutput(e,t.shape,"float32")},e.prototype.asinh=function(t){Nh(t,"asinh");for(var e=new Float32Array(t.size),n=this.readSync(t.dataId),r=0;r<n.length;++r)e[r]=Math.asinh(n[r]);return this.makeOutput(e,t.shape,"float32")},e.prototype.acosh=function(t){Nh(t,"acosh");for(var e=new Float32Array(t.size),n=this.readSync(t.dataId),r=0;r<n.length;++r)e[r]=Math.acosh(n[r]);return this.makeOutput(e,t.shape,"float32")},e.prototype.atanh=function(t){Nh(t,"atanh");for(var e=new Float32Array(t.size),n=this.readSync(t.dataId),r=0;r<n.length;++r)e[r]=Math.atanh(n[r]);return this.makeOutput(e,t.shape,"float32")},e.prototype.erf=function(t){Nh(t,"erf");for(var e=new Float32Array(t.size),n=this.readSync(t.dataId),r=0;r<n.length;++r){var o=Math.sign(n[r]),i=Math.abs(n[r]),a=1/(1+.3275911*i);e[r]=o*(1-((((1.061405429*a-1.453152027)*a+1.421413741)*a-.284496736)*a+.254829592)*a*Math.exp(-i*i))}return this.makeOutput(e,t.shape,"float32")},e.prototype.step=function(t,e){void 0===e&&(e=0),Nh(t,"step");for(var n=new Float32Array(t.size),r=this.readSync(t.dataId),o=0;o<r.length;++o){var i=r[o];isNaN(i)?n[o]=NaN:n[o]=i>0?1:e}return this.makeOutput(n,t.shape,"float32")},e.prototype.fusedConv2d=function(t){var e=t.input,n=t.filter,r=t.convInfo,o=t.bias,i=t.activation,a=t.preluActivationWeights,s=this.conv2d(e,n,r);return o&&(s=this.add(s,o)),i&&(s=Mh(this,s,i,a)),s},e.prototype.conv2d=function(t,e,n){Nh([t,e],"conv2d");for(var r=n.filterHeight,o=n.filterWidth,i=n.dilationHeight,a=n.dilationWidth,s=n.padInfo.left,u=n.padInfo.top,c="channelsLast"===n.dataFormat,l=fr(n.outShape,t.dtype),h=t.strides[0],f=c?t.strides[1]:t.strides[2],p=c?t.strides[2]:1,d=c?1:t.strides[1],v=l.strides[0],m=c?l.strides[1]:l.strides[2],g=c?l.strides[2]:1,y=c?1:l.strides[1],x=this.readSync(t.dataId),b=this.readSync(e.dataId),w=l.values,C=0;C<n.batchSize;++C)for(var E=C*h,_=C*v,I=0;I<n.outHeight;++I)for(var R=_+I*m,S=I*n.strideHeight-u,k=0;k<r;k++){var D=S+k*i;if(!(D<0||D>=n.inHeight))for(var A=k*e.strides[0],T=E+D*f,F=0;F<n.outWidth;++F)for(var N=R+F*g,M=F*n.strideWidth-s,O=0;O<o;O++){var P=M+O*a;if(!(P<0||P>=n.inWidth))for(var B=T+P*p,L=A+O*e.strides[1],W=0;W<n.inChannels;++W){for(var z=x[B+W*d],U=0;U<n.outChannels;++U)w[N+U*y]+=z*b[L+U];L+=n.outChannels}}}return l.toTensor()},e.prototype.conv3d=function(t,e,n){for(var r=n.filterDepth,o=n.filterHeight,i=n.filterWidth,a=n.dilationDepth,s=n.dilationHeight,u=n.dilationWidth,c=n.padInfo.front,l=n.padInfo.left,h=n.padInfo.top,f=fr(n.outShape,t.dtype),p=this.readSync(t.dataId),d=this.readSync(e.dataId),v=f.values,m=0;m<n.batchSize;++m)for(var g=m*t.strides[0],y=m*f.strides[0],x=0;x<n.outDepth;++x)for(var b=y+x*f.strides[1],w=x*n.strideDepth-c,C=0;C<r;C++){var E=w+C*a;if(!(E<0||E>=n.inDepth))for(var _=C*e.strides[0],I=g+E*t.strides[1],R=0;R<n.outHeight;++R)for(var S=b+R*f.strides[2],k=R*n.strideHeight-h,D=0;D<o;D++){var A=k+D*s;if(!(A<0||A>=n.inHeight))for(var T=_+D*e.strides[1],F=I+A*t.strides[2],N=0;N<n.outWidth;++N)for(var M=S+N*n.outChannels,O=N*n.strideWidth-l,P=0;P<i;P++){var B=O+P*u;if(!(B<0||B>=n.inWidth))for(var L=T+P*e.strides[2],W=F+B*n.inChannels,z=L,U=0;U<n.inChannels;++U){for(var V=p[W+U],G=0;G<n.outChannels;++G)v[M+G]+=V*d[z+G];z+=n.outChannels}}}}return f.toTensor()},e.prototype.conv2dDerInput=function(t,e,n){Nh([t,e],"conv2dDerInput");for(var r=fr(n.inShape,"float32"),o=r.values,i=this.readSync(t.dataId),a=this.readSync(e.dataId),s=e.strides,u=s[0],c=s[1],l=s[2],h=n.batchSize,f=n.filterHeight,p=n.filterWidth,d=n.inChannels,v=n.inHeight,m=n.inWidth,g=n.outChannels,y=n.outHeight,x=n.outWidth,b=n.strideHeight,w=n.strideWidth,C=n.dataFormat,E=f-1-n.padInfo.top,_=p-1-n.padInfo.left,I="channelsLast"===C,R=r.strides[0],S=I?r.strides[1]:r.strides[2],k=I?r.strides[2]:1,D=I?1:r.strides[1],A=t.strides[0],T=I?t.strides[1]:t.strides[2],F=I?t.strides[2]:1,N=I?1:t.strides[1],M=0;M<h;++M)for(var O=0;O<d;++O)for(var P=0;P<v;++P)for(var B=P-E,L=Math.max(0,Math.ceil(B/b)),W=Math.min(y,(f+B)/b),z=0;z<m;++z){for(var U=z-_,V=Math.max(0,Math.ceil(U/w)),G=Math.min(x,(p+U)/w),H=0,j=L;j<W;++j)for(var q=j*b-B,K=V;K<G;++K)for(var X=A*M+T*j+F*K,Y=u*(f-1-q)+c*(p-1-(K*w-U))+l*O,$=0;$<g;++$)H+=i[X+N*$]*a[Y+$];o[R*M+S*P+k*z+D*O]=H}return r.toTensor()},e.prototype.conv3dDerInput=function(t,e,n){for(var r=fr(n.inShape,"float32"),o=r.values,i=r.strides,a=i[0],s=i[1],u=i[2],c=i[3],l=this.readSync(t.dataId),h=t.strides,f=h[0],p=h[1],d=h[2],v=h[3],m=this.readSync(e.dataId),g=e.strides,y=g[0],x=g[1],b=g[2],w=g[3],C=n.batchSize,E=n.filterDepth,_=n.filterHeight,I=n.filterWidth,R=n.inChannels,S=n.inDepth,k=n.inHeight,D=n.inWidth,A=n.outChannels,T=n.outDepth,F=n.outHeight,N=n.outWidth,M=n.strideDepth,O=n.strideHeight,P=n.strideWidth,B=E-1-n.padInfo.front,L=_-1-n.padInfo.top,W=I-1-n.padInfo.left,z=0;z<C;++z)for(var U=0;U<R;++U)for(var V=0;V<S;++V)for(var G=V-B,H=Math.max(0,Math.ceil(G/M)),j=Math.min(T,(E+G)/M),q=0;q<k;++q)for(var K=q-L,X=Math.max(0,Math.ceil(K/O)),Y=Math.min(F,(_+K)/O),$=0;$<D;++$){for(var J=$-W,Q=Math.max(0,Math.ceil(J/P)),Z=Math.min(N,(I+J)/P),tt=0,et=H;et<j;++et)for(var nt=et*M-G,rt=X;rt<Y;++rt)for(var ot=rt*O-K,it=Q;it<Z;++it)for(var at=f*z+p*et+d*rt+v*it,st=y*(E-1-nt)+x*(_-1-ot)+b*(I-1-(it*P-J))+w*U,ut=0;ut<A;++ut)tt+=l[at+ut]*m[st+ut];o[a*z+s*V+u*q+c*$+U]=tt}return r.toTensor()},e.prototype.conv2dDerFilter=function(t,e,n){Nh([t,e],"conv2dDerFilter");for(var r=n.strideHeight,o=n.strideWidth,i=n.filterHeight,a=n.filterWidth,s="channelsLast"===n.dataFormat,u=fr(n.filterShape,"float32"),c=n.padInfo.left,l=n.padInfo.top,h=this.bufferSync(t),f=this.bufferSync(e),p=0;p<i;++p)for(var d=Math.max(0,Math.ceil((l-p)/r)),v=Math.min(n.outHeight,(n.inHeight+l-p)/r),m=0;m<a;++m)for(var g=Math.max(0,Math.ceil((c-m)/o)),y=Math.min(n.outWidth,(n.inWidth+c-m)/o),x=0;x<n.inChannels;++x)for(var b=0;b<n.outChannels;++b){for(var w=0,C=0;C<n.batchSize;++C)for(var E=d;E<v;++E)for(var _=p+E*r-l,I=g;I<y;++I){var R=m+I*o-c;w+=s?h.get(C,_,R,x)*f.get(C,E,I,b):h.get(C,x,_,R)*f.get(C,b,E,I)}u.set(w,p,m,x,b)}return u.toTensor()},e.prototype.conv3dDerFilter=function(t,e,n){for(var r=n.strideDepth,o=n.strideHeight,i=n.strideWidth,a=n.filterDepth,s=n.filterHeight,u=n.filterWidth,c=fr(n.filterShape,"float32"),l=c.values,h=c.strides,f=h[0],p=h[1],d=h[2],v=h[3],m=this.readSync(e.dataId),g=e.strides,y=g[0],x=g[1],b=g[2],w=g[3],C=this.readSync(t.dataId),E=t.strides,_=E[0],I=E[1],R=E[2],S=E[3],k=n.padInfo.front,D=n.padInfo.left,A=n.padInfo.top,T=0;T<a;++T)for(var F=Math.max(0,Math.ceil((k-T)/r)),N=Math.min(n.outDepth,(n.inDepth+k-T)/r),M=T*f,O=0;O<s;++O)for(var P=Math.max(0,Math.ceil((A-O)/o)),B=Math.min(n.outHeight,(n.inHeight+A-O)/o),L=O*p+M,W=0;W<u;++W)for(var z=Math.max(0,Math.ceil((D-W)/i)),U=Math.min(n.outWidth,(n.inWidth+D-W)/i),V=W*d+L,G=0;G<n.inChannels;++G)for(var H=G*v+V,j=0;j<n.outChannels;++j){for(var q=0,K=0;K<n.batchSize;++K)for(var X=K*_,Y=K*y,$=F;$<N;++$)for(var J=(T+$*r-k)*I+X,Q=$*x+Y,Z=P;Z<B;++Z)for(var tt=(O+Z*o-A)*R+J,et=Z*b+Q,nt=z;nt<U;++nt){var rt=nt*w+et;q+=C[(W+nt*i-D)*S+tt+G]*m[rt+j]}l[H+j]=q}return c.toTensor()},e.prototype.fusedDepthwiseConv2D=function(t){var e=t.input,n=t.filter,r=t.convInfo,o=t.bias,i=t.activation,a=t.preluActivationWeights,s=this.depthwiseConv2D(e,n,r);return o&&(s=this.add(s,o)),i&&(s=Mh(this,s,i,a)),s},e.prototype.depthwiseConv2D=function(t,e,n){Nh([t,e],"depthwiseConv2D");for(var r=n.filterHeight,o=n.filterWidth,i=n.dilationHeight,a=n.dilationWidth,s=n.padInfo.left,u=n.padInfo.top,c=n.outChannels/n.inChannels,l=fr(n.outShape,t.dtype),h=this.readSync(t.dataId),f=this.readSync(e.dataId),p=l.values,d=0;d<n.batchSize;++d)for(var v=d*t.strides[0],m=d*l.strides[0],g=0;g<n.outHeight;++g)for(var y=m+g*l.strides[1],x=g*n.strideHeight-s,b=0;b<r;++b){var w=x+b*i;if(!(w<0||w>=n.inHeight))for(var C=b*e.strides[0],E=v+w*t.strides[1],_=0;_<n.outWidth;++_)for(var I=y+_*l.strides[2],R=_*n.strideWidth-u,S=0;S<o;++S){var k=R+S*a;if(!(k<0||k>=n.inWidth))for(var D=C+S*e.strides[1],A=E+k*n.inChannels,T=I,F=D,N=0;N<n.inChannels;++N){for(var M=h[A+N],O=0;O<c;++O)p[T+O]+=M*f[F+O];T+=c,F+=c}}}return l.toTensor()},e.prototype.depthwiseConv2DDerInput=function(t,e,n){Nh([t,e],"depthwiseConv2DDerInput");for(var r=fr(n.inShape,"float32"),o=r.values,i=r.strides,a=i[0],s=i[1],u=i[2],c=this.readSync(t.dataId),l=t.strides,h=l[0],f=l[1],p=l[2],d=this.readSync(e.dataId),v=e.strides,m=v[0],g=v[1],y=v[2],x=n.batchSize,b=n.filterHeight,w=n.filterWidth,C=n.inChannels,E=n.inHeight,_=n.inWidth,I=n.outChannels,R=n.outHeight,S=n.outWidth,k=n.strideHeight,D=n.strideWidth,A=b-1-n.padInfo.top,T=w-1-n.padInfo.left,F=I/C,N=0;N<x;++N)for(var M=0;M<C;++M)for(var O=0;O<E;++O)for(var P=O-A,B=Math.max(0,Math.ceil(P/k)),L=Math.min(R,(b+P)/k),W=0;W<_;++W){for(var z=W-T,U=Math.max(0,Math.ceil(z/D)),V=Math.min(S,(w+z)/D),G=0,H=B;H<L;++H)for(var j=H*k-P,q=U;q<V;++q)for(var K=h*N+f*H+p*q,X=m*(b-1-j)+g*(w-1-(q*D-z))+y*M,Y=0;Y<F;++Y)G+=c[K+(M*F+Y)]*d[X+Y];o[a*N+s*O+u*W+M]=G}return r.toTensor()},e.prototype.depthwiseConv2DDerFilter=function(t,e,n){Nh([t,e],"depthwiseConv2DDerFilter");for(var r=n.strideHeight,o=n.strideWidth,i=n.filterHeight,a=n.filterWidth,s=fr(n.filterShape,"float32"),u=n.padInfo.left,c=n.padInfo.top,l=n.outChannels/n.inChannels,h=this.bufferSync(t),f=this.bufferSync(e),p=0;p<i;++p)for(var d=Math.max(0,Math.ceil((c-p)/r)),v=Math.min(n.outHeight,(n.inHeight+c-p)/r),m=0;m<a;++m)for(var g=Math.max(0,Math.ceil((u-m)/o)),y=Math.min(n.outWidth,(n.inWidth+u-m)/o),x=0;x<n.outChannels;++x){for(var b=Math.trunc(x/l),w=x%l,C=0,E=0;E<n.batchSize;++E)for(var _=d;_<v;++_)for(var I=p+_*r-c,R=g;R<y;++R){var S=m+R*o-u;C+=h.get(E,I,S,b)*f.get(E,_,R,x)}s.set(C,p,m,b,w)}return s.toTensor()},e.prototype.tile=function(t,e){return Nh(t,"tile"),Qo(this.bufferSync(t),e)},e.prototype.pad=function(t,e,n){Nh(t,"pad");var r=e.map((function(e,n){return e[0]+t.shape[n]+e[1]})),o=e.map((function(t){return t[0]})),i=this.bufferSync(t),a=fr(r,t.dtype);0!==n&&a.values.fill(n);for(var s=0;s<t.size;s++){var u=i.indexToLoc(s),c=u.map((function(t,e){return t+o[e]}));a.set.apply(a,[i.get.apply(i,u)].concat(c))}return a.toTensor()},e.prototype.transpose=function(t,e){Nh(t,"transpose");for(var n=new Array(t.rank),r=0;r<n.length;r++)n[r]=t.shape[e[r]];var o=this.readSync(t.dataId),i=fr(n,t.dtype),a=this.bufferSync(t);for(r=0;r<t.size;++r){for(var s=a.indexToLoc(r),u=new Array(s.length),c=0;c<u.length;c++)u[c]=s[e[c]];var l=i.locToIndex(u);i.values[l]=o[r]}return i.toTensor()},e.prototype.gather=function(t,e,n){Nh([t,e],"gather");var r=t.shape.slice(),o=this.readSync(e.dataId);r[n]=o.length;for(var i=fr(r,t.dtype),a=this.bufferSync(t),s=0;s<i.size;++s){var u=i.indexToLoc(s),c=u.slice();c[n]=o[u[n]];var l=a.locToIndex(c);i.values[s]=a.values[l]}return i.toTensor()},e.prototype.batchToSpaceND=function(t,e,n){Nh([t],"batchToSpaceND");var r=e.reduce((function(t,e){return t*e})),o=Ur(t.shape,e,r),i=Vr(o.length,e.length),a=Gr(t.shape,e,r),s=Hr(n,e.length),u=jr(a,n,e.length);return t.reshape(o).transpose(i).reshape(a).slice(s,u)},e.prototype.spaceToBatchND=function(t,e,n){Nh([t],"spaceToBatchND");var r=e.reduce((function(t,e){return t*e})),o=[[0,0]];o.push.apply(o,n);for(var i=1+e.length;i<t.shape.length;++i)o.push([0,0]);var a=t.pad(o),s=Ur(a.shape,e,r,!1),u=Vr(s.length,e.length,!1),c=Gr(a.shape,e,r,!1);return a.reshape(s).transpose(u).reshape(c)},e.prototype.pool=function(t,e,n){Nh(t,"pool");for(var r=e.strideHeight,o=e.strideWidth,i=e.dilationHeight,a=e.dilationWidth,s=e.effectiveFilterHeight,u=e.effectiveFilterWidth,c=e.padInfo.top,l=e.padInfo.left,h="max"===n?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY,f=this.readSync(t.dataId),p=fr(e.outShape,t.dtype),d=p.values,v=e.outShape[1]*e.outShape[2]*e.outShape[3],m=e.outShape[2]*e.outShape[3],g=e.outShape[3],y=0;y<e.batchSize;++y)for(var x=y*v,b=y*t.strides[0],w=0;w<e.inChannels;++w)for(var C=0;C<e.outHeight;++C)for(var E=C*r-c,_=Math.max(0,E),I=Math.min(e.inHeight,s+E),R=x+C*m,S=0;S<e.outWidth;++S){for(var k=S*o-l,D=Math.max(0,k),A=Math.min(e.inWidth,u+k),T=h,F=0,N=0,M=_;M<I;M+=i){for(var O=b+M*t.strides[1],P=D;P<A;P+=a){var B=f[O+P*t.strides[2]+w];"max"===n&&B>T?T=B:"avg"===n&&(F+=B,N++)}if(isNaN(T))break}d[R+S*g+w]="avg"===n?F/N:T}return p.toTensor()},e.prototype.maxPool=function(t,e){return this.pool(t,e,"max")},e.prototype.maxPoolPositions=function(t,e){for(var n=fr(e.outShape,"int32"),r=e.strideHeight,o=e.strideWidth,i=e.dilationHeight,a=e.dilationWidth,s=e.effectiveFilterHeight,u=e.effectiveFilterWidth,c=e.padInfo.top,l=e.padInfo.left,h=this.bufferSync(t),f=0;f<e.batchSize;++f)for(var p=0;p<e.inChannels;++p)for(var d=0;d<e.outHeight;++d){for(var v=d*r-c,m=v;m<0;)m+=i;for(var g=Math.min(e.inHeight,s+v),y=0;y<e.outWidth;++y){for(var x=y*o-l,b=x;b<0;)b+=a;for(var w=Math.min(e.inWidth,u+x),C=Number.NEGATIVE_INFINITY,E=-1,_=m;_<g;_+=i)for(var I=_-v,R=b;R<w;R+=a){var S=R-x,k=h.get(f,_,R,p);k>C&&(C=k,E=I*u+S)}n.set(E,f,d,y,p)}}return n.toTensor()},e.prototype.maxPoolBackprop=function(t,e,n,r){Nh([e,n],"maxPoolBackprop");for(var o=this.maxPoolPositions(e,r),i=r.strideHeight,a=r.strideWidth,s=r.dilationHeight,u=r.dilationWidth,c=r.effectiveFilterHeight,l=r.effectiveFilterWidth,h=l-1-r.padInfo.left,f=c-1-r.padInfo.top,p=fr(e.shape,"float32"),d=this.bufferSync(o),v=this.bufferSync(t),m=0;m<r.batchSize;++m)for(var g=0;g<r.inChannels;++g)for(var y=0;y<r.inHeight;++y)for(var x=0;x<r.inWidth;++x){for(var b=y-f,w=x-h,C=0,E=0;E<c;E+=s){var _=(b+E)/i;if(!(_<0||_>=r.outHeight||Math.floor(_)!==_))for(var I=0;I<l;I+=u){var R=(w+I)/a;if(!(R<0||R>=r.outWidth||Math.floor(R)!==R)){var S=c*l-1-d.get(m,_,R,g)===E*l+I?1:0;0!==S&&(C+=v.get(m,_,R,g)*S)}}}p.set(C,m,y,x,g)}return p.toTensor()},e.prototype.avgPoolBackprop=function(t,e,n){Nh([t,e],"avgPoolBackprop");for(var r=n.strideHeight,o=n.strideWidth,i=n.filterHeight,a=n.filterWidth,s=n.dilationHeight,u=n.dilationWidth,c=n.effectiveFilterHeight,l=n.effectiveFilterWidth,h=l-1-n.padInfo.left,f=c-1-n.padInfo.top,p=fr(e.shape,"float32"),d=1/(i*a),v=this.bufferSync(t),m=0;m<n.batchSize;++m)for(var g=0;g<n.inChannels;++g)for(var y=0;y<n.inHeight;++y)for(var x=0;x<n.inWidth;++x){for(var b=y-f,w=x-h,C=0,E=0;E<c;E+=s){var _=(b+E)/r;if(!(_<0||_>=n.outHeight||Math.floor(_)!==_))for(var I=0;I<l;I+=u){var R=(w+I)/o;R<0||R>=n.outWidth||Math.floor(R)!==R||(C+=v.get(m,_,R,g))}}p.set(C*d,m,y,x,g)}return p.toTensor()},e.prototype.pool3d=function(t,e,n){Nh(t,"pool3d");for(var r=e.strideDepth,o=e.strideHeight,i=e.strideWidth,a=e.dilationDepth,s=e.dilationHeight,u=e.dilationWidth,c=e.effectiveFilterDepth,l=e.effectiveFilterHeight,h=e.effectiveFilterWidth,f=e.padInfo.front,p=e.padInfo.top,d=e.padInfo.left,v="max"===n?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY,m=this.readSync(t.dataId),g=fr(e.outShape,t.dtype),y=g.values,x=e.outShape[1]*e.outShape[2]*e.outShape[3]*e.outShape[4],b=e.outShape[2]*e.outShape[3]*e.outShape[4],w=e.outShape[3]*e.outShape[4],C=e.outShape[4],E=0;E<e.batchSize;++E)for(var _=E*x,I=E*t.strides[0],R=0;R<e.inChannels;++R)for(var S=0;S<e.outDepth;++S){for(var k=S*r-f,D=k;D<0;)D+=a;for(var A=Math.min(e.inDepth,c+k),T=_+S*b,F=0;F<e.outHeight;++F){for(var N=F*o-p,M=N;M<0;)M+=s;for(var O=Math.min(e.inHeight,l+N),P=T+F*w,B=0;B<e.outWidth;++B){for(var L=B*i-d,W=L;W<0;)W+=u;for(var z=Math.min(e.inWidth,h+L),U=P+B*C,V=v,G=0,H=0,j=D;j<A;j+=a){for(var q=I+j*t.strides[1],K=M;K<O;K+=s){for(var X=q+K*t.strides[2],Y=W;Y<z;Y+=u){var $=m[X+Y*t.strides[3]+R];if("max"===n&&$>V?V=$:"avg"===n&&(G+=$,H++),isNaN(V))break}if(isNaN(V))break}if(isNaN(V))break}y[U+R]="avg"===n?G/H:V}}}return g.toTensor()},e.prototype.avgPool3d=function(t,e){return Nh(t,"avgPool3d"),this.pool3d(t,e,"avg").toFloat()},e.prototype.avgPool3dBackprop=function(t,e,n){Nh([t,e],"avgPool3dBackprop");for(var r=n.strideDepth,o=n.strideHeight,i=n.strideWidth,a=n.filterDepth,s=n.filterHeight,u=n.filterWidth,c=n.dilationDepth,l=n.dilationHeight,h=n.dilationWidth,f=n.effectiveFilterDepth,p=n.effectiveFilterHeight,d=n.effectiveFilterWidth,v=f-1-n.padInfo.front,m=d-1-n.padInfo.left,g=p-1-n.padInfo.top,y=fr(e.shape,"float32"),x=1/(a*s*u),b=this.bufferSync(t),w=0;w<n.batchSize;++w)for(var C=0;C<n.inChannels;++C)for(var E=0;E<n.inDepth;++E)for(var _=0;_<n.inHeight;++_)for(var I=0;I<n.inWidth;++I){for(var R=E-v,S=_-g,k=I-m,D=0,A=0;A<f;A+=c){var T=(R+A)/r;if(!(T<0||T>=n.outDepth||Math.floor(T)!==T))for(var F=0;F<p;F+=l){var N=(S+F)/o;if(!(N<0||N>=n.outHeight||Math.floor(N)!==N))for(var M=0;M<d;M+=h){var O=(k+M)/i;O<0||O>=n.outWidth||Math.floor(O)!==O||(D+=b.get(w,T,N,O,C))}}}y.set(D*x,w,E,_,I,C)}return y.toTensor()},e.prototype.maxPool3d=function(t,e){return Nh(t,"maxPool3d"),this.pool3d(t,e,"max").toFloat()},e.prototype.maxPool3dPositions=function(t,e){for(var n=fr(e.outShape,"int32"),r=e.strideDepth,o=e.strideHeight,i=e.strideWidth,a=e.dilationDepth,s=e.dilationHeight,u=e.dilationWidth,c=e.effectiveFilterDepth,l=e.effectiveFilterHeight,h=e.effectiveFilterWidth,f=e.padInfo.front,p=e.padInfo.top,d=e.padInfo.left,v=this.bufferSync(t),m=0;m<e.batchSize;++m)for(var g=0;g<e.inChannels;++g)for(var y=0;y<e.outDepth;++y){for(var x=y*r-f,b=x;b<0;)b+=a;for(var w=Math.min(e.inDepth,c+x),C=0;C<e.outHeight;++C){for(var E=C*o-p,_=E;_<0;)_+=s;for(var I=Math.min(e.inHeight,l+E),R=0;R<e.outWidth;++R){for(var S=R*i-d,k=S;k<0;)k+=u;for(var D=Math.min(e.inWidth,h+S),A=Number.NEGATIVE_INFINITY,T=-1,F=b;F<w;F+=a)for(var N=F-x,M=_;M<I;M+=s)for(var O=M-E,P=k;P<D;P+=u){var B=P-S,L=v.get(m,F,M,P,g);L>=A&&(A=L,T=N*l*h+O*l+B)}n.set(T,m,y,C,R,g)}}}return n.toTensor()},e.prototype.maxPool3dBackprop=function(t,e,n,r){Nh([e,n],"maxPool3dBackprop");for(var o=this.maxPool3dPositions(e,r),i=r.strideDepth,a=r.strideHeight,s=r.strideWidth,u=r.dilationDepth,c=r.dilationHeight,l=r.dilationWidth,h=r.effectiveFilterDepth,f=r.effectiveFilterHeight,p=r.effectiveFilterWidth,d=h-1-r.padInfo.front,v=p-1-r.padInfo.left,m=f-1-r.padInfo.top,g=fr(e.shape,"float32"),y=this.bufferSync(o),x=this.bufferSync(t),b=0;b<r.batchSize;++b)for(var w=0;w<r.inChannels;++w)for(var C=0;C<r.inDepth;++C)for(var E=0;E<r.inHeight;++E)for(var _=0;_<r.inWidth;++_){for(var I=C-d,R=E-m,S=_-v,k=0,D=0;D<h;D+=u){var A=(I+D)/i;if(!(A<0||A>=r.outDepth||Math.floor(A)!==A))for(var T=0;T<f;T+=c){var F=(R+T)/a;if(!(F<0||F>=r.outHeight||Math.floor(F)!==F))for(var N=0;N<p;N+=l){var M=(S+N)/s;if(!(M<0||M>=r.outWidth||Math.floor(M)!==M)){var O=h*f*p-1-y.get(b,A,F,M,w)===D*f*p+T*p+N?1:0;0!==O&&(k+=x.get(b,A,F,M,w)*O)}}}}g.set(k,b,C,E,_,w)}return g.toTensor()},e.prototype.cast=function(t,e){return Oo(t,e,this)},e.prototype.reshape=function(t,e){return Po(t,e)},e.prototype.avgPool=function(t,e){return Nh(t,"avgPool"),this.pool(t,e,"avg").toFloat()},e.prototype.resizeBilinear=function(t,e,n,r){Nh(t,"resizeBilinear");for(var o=t.shape,i=o[0],a=o[1],s=o[2],u=o[3],c=this.readSync(t.dataId),l=new Float32Array(T([i,e,n,u])),h=[r&&e>1?a-1:a,r&&n>1?s-1:s],f=[r&&e>1?e-1:e,r&&n>1?n-1:n],p=0,d=h[0]/f[0],v=h[1]/f[1],m=0;m<i;m++)for(var g=0;g<e;g++)for(var y=d*g,x=Math.floor(y),b=y-x,w=Math.min(a-1,Math.ceil(y)),C=m*t.strides[0]+x*t.strides[1],E=m*t.strides[0]+w*t.strides[1],_=0;_<n;_++)for(var I=v*_,R=Math.floor(I),S=I-R,k=Math.min(s-1,Math.ceil(I)),D=C+R*t.strides[2],A=E+R*t.strides[2],F=C+k*t.strides[2],N=E+k*t.strides[2],M=0;M<u;M++){var O=c[D+M],P=c[A+M],B=O+(c[F+M]-O)*S,L=B+(P+(c[N+M]-P)*S-B)*b;l[p++]=L}return Tn(l,[i,e,n,u])},e.prototype.resizeBilinearBackprop=function(t,e,n){Nh([t,e],"resizeBilinearBackprop");for(var r=e.shape,o=r[0],i=r[1],a=r[2],s=r[3],u=t.shape,c=u[1],l=u[2],h=new Float32Array(o*i*a*s),f=[n&&c>1?i-1:i,n&&l>1?a-1:a],p=[n&&c>1?c-1:c,n&&l>1?l-1:l],d=f[0]/p[0],v=f[1]/p[1],m=this.readSync(t.dataId),g=0,y=0;y<o;y++)for(var x=y*e.strides[0],b=0;b<c;b++)for(var w=b*d,C=Math.floor(w),E=Math.min(Math.ceil(w),i-1),_=x+C*e.strides[1],I=x+E*e.strides[1],R=w-C,S=1-R,k=0;k<l;k++)for(var D=k*v,A=Math.floor(D),T=Math.min(Math.ceil(D),a-1),F=D-A,N=1-F,M=_+A*e.strides[2],O=_+T*e.strides[2],P=I+A*e.strides[2],B=I+T*e.strides[2],L=S*N,W=S*F,z=R*N,U=R*F,V=0;V<s;V++){var G=m[g++];h[M+V]+=G*L,h[O+V]+=G*W,h[P+V]+=G*z,h[B+V]+=G*U}return Bn(h,[o,a,i,s],e.dtype)},e.prototype.resizeNearestNeighbor=function(t,e,n,r){Nh(t,"resizeNearestNeighbor");for(var o=t.shape,i=o[0],a=o[1],s=o[2],u=o[3],c=this.readSync(t.dataId),l=new Float32Array(i*e*n*u),h=[r&&e>1?a-1:a,r&&n>1?s-1:s],f=[r&&e>1?e-1:e,r&&n>1?n-1:n],p=h[0]/f[0],d=h[1]/f[1],v=0,m=0;m<i;m++)for(var g=m*t.strides[0],y=0;y<e;y++)for(var x=p*y,b=g+Math.min(a-1,r?Math.round(x):Math.floor(x))*t.strides[1],w=0;w<n;w++)for(var C=d*w,E=b+Math.min(s-1,r?Math.round(C):Math.floor(C))*t.strides[2],_=0;_<u;_++){var I=c[E+_];l[v++]=I}return Tn(l,[i,e,n,u],t.dtype)},e.prototype.resizeNearestNeighborBackprop=function(t,e,n){Nh([t,e],"resizeNearestNeighborBackprop");for(var r=e.shape,o=r[0],i=r[1],a=r[2],s=r[3],u=t.shape,c=u[1],l=u[2],h=new Float32Array(o*i*a*s),f=this.readSync(t.dataId),p=[n&&c>1?i-1:i,n&&l>1?a-1:a],d=[n&&c>1?c-1:c,n&&l>1?l-1:l],v=p[0]/d[0],m=p[1]/d[1],g=1/v,y=1/m,x=2*Math.ceil(g)+2,b=2*Math.ceil(y)+2,w=0;w<o;w++)for(var C=w*e.strides[0],E=0;E<i;E++)for(var _=C+E*e.strides[1],I=Math.floor(E*g),R=Math.floor(I-x/2),S=0;S<a;S++)for(var k=_+S*e.strides[2],D=Math.floor(S*y),A=Math.floor(D-b/2),T=0;T<s;T++){for(var F=0,N=0;N<x;N++){var M=N+R;if(!(M<0||M>=c)){var O=C+M*t.strides[1],P=M*v;if(E===Math.min(i-1,n?Math.round(P):Math.floor(P)))for(var B=0;B<b;B++){var L=B+A;if(!(L<0||L>=l)){var W=O+L*t.strides[2],z=L*m;S===Math.min(a-1,n?Math.round(z):Math.floor(z))&&(F+=f[W+T])}}}}h[k+T]=F}return Bn(h,e.shape,e.dtype)},e.prototype.batchNormalization=function(t,e,n,r,o,i){Nh([t,e,n,o,i],"batchNorm");for(var a=this.readSync(t.dataId),s=this.readSync(e.dataId),u=this.readSync(n.dataId),c=o?this.readSync(o.dataId):new Float32Array([1]),l=i?this.readSync(i.dataId):new Float32Array([0]),h=new Float32Array(a.length),f=l.length,p=c.length,d=u.length,v=s.length,m=0,g=0,y=0,x=0,b=0;b<a.length;++b)h[b]=l[m++]+(a[b]-s[g++])*c[y++]/Math.sqrt(u[x++]+r),m>=f&&(m=0),g>=v&&(g=0),y>=p&&(y=0),x>=d&&(x=0);return Bn(h,t.shape)},e.prototype.localResponseNormalization4D=function(t,e,n,r,o){Nh(t,"localResponseNormalization4D");var i=t.shape[3],a=i-1,s=this.readSync(t.dataId),u=t.size,c=new Float32Array(u);function l(t){for(var n=t%i,r=t-n+Math.max(0,n-e),o=t-n+Math.min(n+e,a),u=0;r<=o;r++){var c=s[r];u+=c*c}return u}for(var h=0;h<u;h++){var f=l(h),p=s[h]*Math.pow(n+r*f,-o);c[h]=p}return Bn(c,t.shape)},e.prototype.LRNGrad=function(t,e,n,r,o,i,a){Nh(t,"LRNGrad");for(var s=t.shape[3],u=this.readSync(t.dataId),c=this.readSync(e.dataId),l=this.readSync(n.dataId),h=new Float32Array(t.size),f=t.size,p=0;p<f;p++){for(var d=p%s,v=p-d+Math.max(0,d-r),m=p-d+Math.min(s,d+r+1),g=0,y=v;y<m;y++)g+=Math.pow(c[y],2);for(g=i*g+o,y=v;y<m;y++){var x=-2*i*a*c[y]*l[p]/g;p===y&&(x+=Math.pow(g,-a)),x*=u[p],h[y]+=x}}return Bn(h,t.shape)},e.prototype.multinomial=function(t,e,n,r){Nh(t,"multinomial");for(var o=e?t:vo(t),i=o.shape[0],a=o.shape[1],s=Vn([i,n],"int32"),u=this.readSync(s.dataId),c=this.readSync(o.dataId),l=0;l<i;++l){var h=l*a,f=new Float32Array(a-1);f[0]=c[h];for(var p=1;p<f.length;++p)f[p]=f[p-1]+c[h+p];for(var d=ur(r.toString()),v=l*n,m=0;m<n;++m){var g=d();u[v+m]=f.length;for(var y=0;y<f.length;y++)if(g<f[y]){u[v+m]=y;break}}}return s},e.prototype.oneHot=function(t,e,n,r){Nh(t,"oneHot");var o=new Float32Array(t.size*e);o.fill(r);for(var i=this.readSync(t.dataId),a=0;a<t.size;++a)i[a]>=0&&i[a]<e&&(o[a*e+i[a]]=n);return On(o,[t.size,e],"int32")},e.prototype.nonMaxSuppression=function(t,e,n,r,o){return Nh(t,"nonMaxSuppression"),jo(this.readSync(t.dataId),this.readSync(e.dataId),n,r,o)},e.prototype.fft=function(t){return this.fftBatch(t,!1)},e.prototype.ifft=function(t){return this.fftBatch(t,!0)},e.prototype.fftBatch=function(t,e){for(var n=t.shape[0],r=t.shape[1],o=fr(t.shape,"float32"),i=fr(t.shape,"float32"),a=Dn(t).as2D(n,r),s=An(t).as2D(n,r),u=0;u<n;u++)for(var c=a.slice([u,0],[1,r]),l=s.slice([u,0],[1,r]),h=kn(c,l),f=this.readSync(this.fftImpl(h,e).dataId),p=0;p<r;p++){var d=zo(f,p);o.values[u*r+p]=d.real,i.values[u*r+p]=d.imag}return kn(o.toTensor(),i.toTensor()).as2D(n,r)},e.prototype.fftImpl=function(t,e){var n=t.as1D(),r=n.size;if(this.isExponentOf2(r)){var o=this.fftRadix2(n,r,e).as2D(t.shape[0],t.shape[1]);return e&&(o=kn(Dn(o).div(Nn(r)),An(o).div(Nn(r)))),o}var i=this.readSync(t.dataId),a=function(t){for(var e=new Float32Array(t.length/2),n=new Float32Array(t.length/2),r=0;r<t.length;r+=2)e[r/2]=t[r],n[r/2]=t[r+1];return{real:e,imag:n}}(this.fourierTransformByMatmul(i,r,e));return kn(a.real,a.imag).as2D(t.shape[0],t.shape[1])},e.prototype.isExponentOf2=function(t){return!(t&t-1)},e.prototype.fftRadix2=function(t,e,n){if(1===e)return t;var r=this.readSync(t.dataId),o=e/2,i=function(t){for(var e=Math.ceil(t.length/4),n=new Float32Array(e),r=new Float32Array(e),o=0;o<t.length;o+=4)n[Math.floor(o/4)]=t[o],r[Math.floor(o/4)]=t[o+1];return{real:n,imag:r}}(r),a=kn(i.real,i.imag).as1D(),s=function(t){for(var e=Math.floor(t.length/4),n=new Float32Array(e),r=new Float32Array(e),o=2;o<t.length;o+=4)n[Math.floor(o/4)]=t[o],r[Math.floor(o/4)]=t[o+1];return{real:n,imag:r}}(r),u=kn(s.real,s.imag).as1D();a=this.fftRadix2(a,o,n),u=this.fftRadix2(u,o,n);var c=function(t,e){for(var n=new Float32Array(t/2),r=new Float32Array(t/2),o=0;o<Math.ceil(t/2);o++){var i=(e?2:-2)*Math.PI*(o/t);n[o]=Math.cos(i),r[o]=Math.sin(i)}return{real:n,imag:r}}(e,n),l=kn(c.real,c.imag).mul(u),h=a.add(l),f=a.sub(l),p=Dn(h).concat(Dn(f)),d=An(h).concat(An(f));return kn(p,d).as1D()},e.prototype.fourierTransformByMatmul=function(t,e,n){for(var r=new Float32Array(2*e),o=0;o<e;o++){for(var i=0,a=0,s=0;s<e;s++){var u=Vo(o*s,e,n),c=zo(t,s);i+=c.real*u.real-c.imag*u.imag,a+=c.real*u.imag+c.imag*u.real}n&&(i/=e,a/=e),Uo(r,i,a,o)}return r},e.prototype.depthToSpace=function(t,e,n){S("NHWC"===n,(function(){return"Only NHWC dataFormat supported on CPU for depthToSpace. Got "+n})),S(e>1,(function(){return"blockSize should be > 1 for depthToSpace, but was: "+e}));for(var r=t.shape[0],o=t.shape[1],i=t.shape[2],a=t.shape[3],s=o*e,u=i*e,c=a/(e*e),l=this.readSync(t.dataId),h=new Float32Array(r*s*u*c),f=0,p=0;p<r;++p)for(var d=0;d<s;++d)for(var v=Math.floor(d/e),m=d%e,g=0;g<u;++g)for(var y=Math.floor(g/e),x=(m*e+g%e)*c,b=0;b<c;++b){var w=b+x+a*(y+i*(v+o*p));h[f++]=l[w]}return Bn(h,[r,s,u,c])},e.prototype.broadcastedBinaryOp=function(t,e,n,r){var o=Co(t.shape,e.shape),i=fr(o,n),a=this.readSync(t.dataId),s=this.readSync(e.dataId),u=bo(t.shape,o),c=bo(e.shape,o),l=i.values;if(u.length+c.length===0)for(var h=0;h<l.length;++h)l[h]=r(a[h%a.length],s[h%s.length]);else{var f=this.bufferSync(t),p=this.bufferSync(e),d=function(n){var o=i.indexToLoc(n),h=o.slice(-t.rank);u.forEach((function(t){return h[t]=0}));var d=f.locToIndex(h),v=o.slice(-e.rank);c.forEach((function(t){return v[t]=0}));var m=p.locToIndex(v);l[n]=r(a[d],s[m])};for(h=0;h<l.length;++h)d(h)}return i.toTensor()},e.prototype.broadcastedBinaryComplexOp=function(t,e,n){var r=Co(t.shape,e.shape),o=fr(r,"float32"),i=fr(r,"float32"),a=this.readSync(t.dataId),s=this.readSync(e.dataId),u=bo(t.shape,r),c=bo(e.shape,r),l=o.values,h=i.values;if(u.length+c.length===0)for(var f=0;f<l.length;f++){var p=f%a.length,d=f%s.length,v=n(a[2*p],a[2*p+1],s[2*d],s[2*d+1]);l[f]=v.real,h[f]=v.imag}else{var m=this.bufferSync(this.data.get(t.dataId).complexTensors.real),g=this.bufferSync(this.data.get(e.dataId).complexTensors.real),y=function(r){var i=o.indexToLoc(r),f=i.slice(-t.rank);u.forEach((function(t){return f[t]=0}));var p=m.locToIndex(f),d=i.slice(-e.rank);c.forEach((function(t){return d[t]=0}));var v=g.locToIndex(d),y=n(a[2*p],a[2*p+1],s[2*v],s[2*v+1]);l[r]=y.real,h[r]=y.imag};for(f=0;f<l.length;f++)y(f)}return this.complex(o.toTensor(),i.toTensor())},e.prototype.split=function(t,e,n){return Jo(t,e,n)},e.prototype.dispose=function(){},e.prototype.floatPrecision=function(){return 32},e.prototype.epsilon=function(){return 1e-7},e.prototype.cropAndResize=function(t,e,n,r,o,i){for(var a=t.shape,s=a[0],u=a[1],c=a[2],l=a[3],h=e.shape[0],f=r[0],p=r[1],d=fr([h,f,p,l],"float32"),v=this.readSync(e.dataId),m=this.readSync(n.dataId),g=this.readSync(t.dataId),y=t.strides,x=d.strides,b=0;b<h;b++){var w=4*b,C=v[w],E=v[w+1],_=v[w+2],I=v[w+3],R=m[b];if(!(R>=s))for(var S=f>1?(_-C)*(u-1)/(f-1):0,k=p>1?(I-E)*(c-1)/(p-1):0,D=0;D<f;D++){var A=f>1?C*(u-1)+D*S:.5*(C+_)*(u-1);if(A<0||A>u-1)for(var T=0;T<p;T++)for(var F=0;F<l;F++){var N=F+T*x[2]+D*x[1]+b*x[0];d.values[N]=i}else if("bilinear"===o){var M=Math.floor(A),O=Math.ceil(A),P=A-M;for(T=0;T<p;T++)if((j=p>1?E*(c-1)+T*k:.5*(E+I)*(c-1))<0||j>c-1)for(F=0;F<l;F++)N=F+T*x[2]+D*x[1]+b*x[0],d.values[N]=i;else{var B=Math.floor(j),L=Math.ceil(j),W=j-B;for(F=0;F<l;F++){var z=g[N=F+B*y[2]+M*y[1]+R*y[0]],U=g[N=F+L*y[2]+M*y[1]+R*y[0]],V=g[N=F+B*y[2]+O*y[1]+R*y[0]],G=z+(U-z)*W,H=V+(g[N=F+L*y[2]+O*y[1]+R*y[0]]-V)*W;N=F+T*x[2]+D*x[1]+b*x[0],d.values[N]=G+(H-G)*P}}}else for(T=0;T<p;++T){var j;if((j=p>1?E*(c-1)+T*k:.5*(E+I)*(c-1))<0||j>c-1)for(F=0;F<l;F++)N=F+T*x[2]+D*x[1]+b*x[0],d.values[N]=i;else{var q=Math.round(j),K=Math.round(A);for(F=0;F<l;F++){var X=F+q*y[2]+K*y[1]+R*y[0],Y=F+T*x[2]+D*x[1]+b*x[0];d.values[Y]=g[X]}}}}}return d.toTensor()},e.prototype.sparseToDense=function(t,e,n,r){var o=Jr(0,t,n),i=o.sliceRank,a=o.numUpdates,s=o.sliceSize,u=o.strides,c=o.outputSize;return this.scatter(t,e,n,c,s,a,i,u,r,!1)},e.prototype.gatherND=function(t,e){var n=e.shape,r=n[n.length-1],o=qr(t,e),i=o[0],a=o[1],s=o[2],u=o[3];if(0===a)return Tn([],i,t.dtype);for(var c=new yt([a,s],t.dtype),l=this.readSync(e.dataId),h=this.readSync(t.dataId),f=0;f<a;f++){for(var p=[],d=0,v=0;v<r;v++){var m=l[f*r+v];d+=m*u[v],p.push(m)}if(d<0||d>=t.size/s)throw new Error("Invalid indices: "+p+" does not index into "+t.shape);for(var g=0;g<s;g++)c.values[f*s+g]=h[d*s+g]}return c.toTensor().reshape(i)},e.prototype.scatterND=function(t,e,n){var r=Jr(0,t,n),o=r.sliceRank,i=r.numUpdates,a=r.sliceSize,s=r.strides,u=r.outputSize,c=Nn(0);return this.scatter(t,e,n,u,a,i,o,s,c,!0)},e.prototype.fill=function(t,e,n){var r=V(n=n||Q(e),T(t));return r.fill(e),Wt.makeTensor(r,t,n,this)},e.prototype.onesLike=function(t){if("string"===t.dtype)throw new Error("onesLike is not supported for string tensors");return this.fill(t.shape,1,t.dtype)},e.prototype.zerosLike=function(t){var e=V(t.dtype,T(t.shape));return this.makeOutput(e,t.shape,t.dtype)},e.prototype.linspace=function(t,e,n){return Bo(t,e,n)},e.prototype.scatter=function(t,e,n,r,o,i,a,s,u,c){var l=[r/o,o],h=this.readSync(t.dataId),f=this.readSync(e.dataId);if(0===r)return Tn([],n,e.dtype);var p=new yt(l,e.dtype);p.values.fill(this.readSync(u.dataId)[0]);for(var d=0;d<i;d++){for(var v=[],m=0,g=0;g<a;g++){var y=h[d*a+g];v.push(y),m+=y*s[g]}if(m<0||m>=r/o)throw new Error("Invalid indices: "+v+" does not index into "+n);for(var x=0;x<o;x++)c?p.values[m*o+x]+=f[d*o+x]:p.values[m*o+x]=0===e.rank?f[0]:f[d*o+x]}return p.toTensor().reshape(n)},e}(yo);Wt.registerBackend("cpu",(function(){return new Oh}),1);for(var Ph=0,Bh=[{kernelName:"NonMaxSuppressionV5",backendName:"cpu",kernelFunc:function(t){var e=t.inputs,n=t.backend,r=t.attrs,o=e,i=o.boxes,a=o.scores,s=r,u=s.maxOutputSize,c=s.iouThreshold,l=s.scoreThreshold,h=s.softNmsSigma,f=n;Nh(i,"NonMaxSuppressionWithScore");var p=qo(f.data.get(i.dataId).values,f.data.get(a.dataId).values,u,c,l,h);return[p.selectedIndices,p.selectedScores]}},{kernelName:"Square",backendName:"cpu",kernelFunc:function(t){var e=t.inputs,n=t.backend,r=e.x,o=n;Nh(r,"square");for(var i=o.data.get(r.dataId).values,a=new Float32Array(i.length),s=0;s<i.length;++s){var u=i[s];a[s]=u*u}return{dataId:o.write(a,r.shape,r.dtype),shape:r.shape,dtype:r.dtype}}},{kernelName:qs,backendName:"cpu",kernelFunc:function(t){var e=t.inputs,n=t.backend,r=e,o=r.a,i=r.b,a=n;Nh([o,i],qs);var s=a.data.get(o.dataId).values,u=a.data.get(i.dataId).values,c=function(t,e,n,r,o,i){var a=Co(t,e),s=a.length,u=et(a),c=U(o,T(a)),l=t.length,h=e.length,f=et(t),p=et(e),d=bo(t,a),v=bo(e,a);if(d.length+v.length===0)for(var m=0;m<c.length;++m)c[m]=i(n[m%n.length],r[m%r.length]);else{var g=function(t){var e=ht(t,s,u),o=e.slice(-l);d.forEach((function(t){return o[t]=0}));var a=lt(o,l,f),m=e.slice(-h);v.forEach((function(t){return m[t]=0}));var g=lt(m,h,p);c[t]=i(n[a],r[g])};for(m=0;m<c.length;++m)g(m)}return[c,a]}(o.shape,i.shape,s,u,o.dtype,(function(t,e){var n=t-e;return n*n})),l=c[0],h=c[1];return{dataId:a.write(l,h,o.dtype),shape:h,dtype:o.dtype}}}];Ph<Bh.length;Ph++)y(Bh[Ph]);for(var Lh,Wh=function(t){this.variableNames=["A"];var e=ai(),n=t[0],r=t[1];this.outputShape=t,this.userCode="\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n        vec2 uv = (vec2(texC, texR) + halfCR) / vec2("+r+".0, "+n+".0);\n\n        vec4 values = "+e.texture2D+"(A, uv);\n        float value;\n        if (depth == 0) {\n          value = values.r;\n        } else if (depth == 1) {\n          value = values.g;\n        } else if (depth == 2) {\n          value = values.b;\n        } else if (depth == 3) {\n          value = values.a;\n        }\n\n        setOutput(floor(value * 255.0 + 0.5));\n      }\n    "},zh=function(t){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0;var e=ai(),n=t[0],r=t[1];this.outputShape=t,this.userCode="\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n\n        vec4 result = vec4(0.);\n\n        for(int row=0; row<=1; row++) {\n          for(int col=0; col<=1; col++) {\n            texC = coords[1] + row;\n            depth = coords[2] + col;\n\n            vec2 uv = (vec2(texC, texR) + halfCR) /\n                       vec2("+r+".0, "+n+".0);\n            vec4 values = "+e.texture2D+"(A, uv);\n            float value;\n            if (depth == 0) {\n              value = values.r;\n            } else if (depth == 1) {\n              value = values.g;\n            } else if (depth == 2) {\n              value = values.b;\n            } else if (depth == 3) {\n              value = values.a;\n            }\n\n            result[row * 2 + col] = floor(value * 255.0 + 0.5);\n          }\n        }\n\n        "+e.output+" = result;\n      }\n    "},Uh=0,Vh=[{kernelName:"FromPixels",backendName:"webgl",kernelFunc:function(t){var e=t.inputs,n=t.backend,r=t.attrs,o=e.pixels,i=r.numChannels,a="undefined"!=typeof HTMLVideoElement&&o instanceof HTMLVideoElement,s="undefined"!=typeof HTMLImageElement&&o instanceof HTMLImageElement,u=a?[o.videoWidth,o.videoHeight]:[o.width,o.height],c=u[0],l=u[1],f=[l,c],p=[l,c,i];(s||a)&&(null==Lh&&(Lh=document.createElement("canvas").getContext("2d")),Lh.canvas.width=c,Lh.canvas.height=l,Lh.drawImage(o,0,0,c,l),o=Lh.canvas);var d=n.makeTensorInfo(f,"int32");n.texData.get(d.dataId).usage=Gt.PIXELS,n.gpgpu.uploadPixelDataToTexture(n.getTexture(d.dataId),o);var v=h().getBool("WEBGL_PACK")?new zh(p):new Wh(p),m=n.runWebGLProgram(v,[d],"int32");return n.disposeData(d.dataId),m}},{kernelName:"NonMaxSuppressionV5",backendName:"webgl",kernelFunc:function(t){var e=t.inputs,n=t.backend,r=t.attrs;fn("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");var o=e,i=o.boxes,a=o.scores,s=r,u=s.maxOutputSize,c=s.iouThreshold,l=s.scoreThreshold,h=s.softNmsSigma,f=n,p=qo(f.readSync(i.dataId),f.readSync(a.dataId),u,c,l,h);return[p.selectedIndices,p.selectedScores]}},{kernelName:"Square",backendName:"webgl",kernelFunc:function(t){var e=t.inputs,n=t.backend,r=e.x,o=n,i=new ms(r.shape,"return x * x;");return o.runWebGLProgram(i,[r],r.dtype)}},{kernelName:qs,backendName:"webgl",kernelFunc:function(t){var e=t.inputs,n=t.backend,r=e,o=r.a,i=r.b,a=n,s=h().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new Mi("return (a - b) * (a - b);",o.shape,i.shape):new Fi("return (a - b) * (a - b);",o.shape,i.shape);return a.compileAndRun(s,[o,i])}}];Uh<Vh.length;Uh++)y(Vh[Uh]);for(var Gh=0,Hh=[{kernelName:"Square",gradFunc:function(t,e){var n=e[0];return{x:function(){return t.mul(n.toFloat().mul(2))}}}},{kernelName:qs,gradFunc:function(t,e){var n=e[0],r=e[1],o=Nn(2);return{a:function(){return uc(t,uc(o,pc(n,r)))},b:function(){return uc(t,uc(o,pc(r,n)))}}}}];Gh<Hh.length;Gh++)x(Hh[Gh]);var jh=function(){function t(){}return t.prototype.fetch=function(t,e){return fetch(t,e)},t.prototype.now=function(){return performance.now()},t.prototype.encode=function(t,e){if("utf-8"!==e&&"utf8"!==e)throw new Error("Browser's encoder only supports utf-8, but got "+e);return null==this.textEncoder&&(this.textEncoder=new TextEncoder),this.textEncoder.encode(t)},t.prototype.decode=function(t,e){return new TextDecoder(e).decode(t)},t}();h().get("IS_BROWSER")&&h().setPlatform("browser",new jh);var qh,Kh=function(){function t(){this.util=n(645),this.textEncoder=new this.util.TextEncoder}return t.prototype.fetch=function(t,e){return null!=h().global.fetch?h().global.fetch(t,e):(null==qh&&(qh=n(202)),qh(t,e))},t.prototype.now=function(){var t=process.hrtime();return 1e3*t[0]+t[1]/1e6},t.prototype.encode=function(t,e){if("utf-8"!==e&&"utf8"!==e)throw new Error("Node built-in encoder only supports utf-8, but got "+e);return this.textEncoder.encode(t)},t.prototype.decode=function(t,e){return 0===t.length?"":new this.util.TextDecoder(e).decode(t)},t}();h().get("IS_NODE")&&h().setPlatform("node",new Kh);var Xh={float32:4,int32:4,uint16:2,uint8:1,bool:1},Yh=4;function $h(t,e){for(var n={},r=0,o=function(e){var o=e.name,i=e.dtype,a=e.shape,s=T(a),u=void 0;if("quantization"in e){var c=e.quantization;if("uint8"!==c.dtype&&"uint16"!==c.dtype)throw new Error("Weight "+e.name+" has unknown quantization dtype "+c.dtype+". Supported quantization dtypes are: 'uint8' and 'uint16'.");var l=Xh[c.dtype],h=t.slice(r,r+s*l),f="uint8"===c.dtype?new Uint8Array(h):new Uint16Array(h);if("float32"===i)u=Float32Array.from(f,(function(t){return t*c.scale+c.min}));else{if("int32"!==i)throw new Error("Unsupported dtype in weight '"+o+"': "+i);u=Int32Array.from(f,(function(t){return Math.round(t*c.scale+c.min)}))}r+=s*l}else if("string"===i){var p=T(e.shape);u=[];for(var d=0;d<p;d++){var v=new Uint32Array(t.slice(r,r+Yh))[0];r+=Yh;var m=new Uint8Array(t.slice(r,r+v));u.push(m),r+=v}}else{var g=Xh[i];if(h=t.slice(r,r+s*g),"float32"===i)u=new Float32Array(h);else if("int32"===i)u=new Int32Array(h);else{if("bool"!==i)throw new Error("Unsupported dtype in weight '"+o+"': "+i);u=new Uint8Array(h)}r+=s*g}n[o]=Tn(u,a,i)},i=0,a=e;i<a.length;i++)o(a[i]);return n}function Jh(t){if(null===t)throw new Error("Invalid input value: "+JSON.stringify(t));var e=0,n=[];t.forEach((function(t){if(e+=t.byteLength,n.push(t.byteLength===t.buffer.byteLength?t:new t.constructor(t)),!(t instanceof Float32Array||t instanceof Int32Array||t instanceof Uint8Array))throw new Error("Unsupported TypedArray subtype: "+t.constructor.name)}));var r=new Uint8Array(e),o=0;return n.forEach((function(t){r.set(new Uint8Array(t.buffer),o),o+=t.byteLength})),r.buffer}var Qh="undefined"!=typeof Buffer&&("undefined"==typeof Blob||"undefined"==typeof atob||"undefined"==typeof btoa);function Zh(t){return Qh?Buffer.byteLength(t):new Blob([t]).size}function tf(t){var e=0;t.forEach((function(t){e+=t.byteLength}));var n=new Uint8Array(e),r=0;return t.forEach((function(t){n.set(new Uint8Array(t),r),r+=t.byteLength})),n.buffer}function ef(t){for(t=t.trim();t.endsWith("/");)t=t.slice(0,t.length-1);var e=t.split("/");return e[e.length-1]}function nf(t){if(t.modelTopology instanceof ArrayBuffer)throw new Error("Expected JSON model topology, received ArrayBuffer.");return{dateSaved:new Date,modelTopologyType:"JSON",modelTopologyBytes:null==t.modelTopology?0:Zh(JSON.stringify(t.modelTopology)),weightSpecsBytes:null==t.weightSpecs?0:Zh(JSON.stringify(t.weightSpecs)),weightDataBytes:null==t.weightData?0:t.weightData.byteLength}}var rf=function(){function t(){this.saveRouters=[],this.loadRouters=[]}return t.getInstance=function(){return null==t.instance&&(t.instance=new t),t.instance},t.registerSaveRouter=function(e){t.getInstance().saveRouters.push(e)},t.registerLoadRouter=function(e){t.getInstance().loadRouters.push(e)},t.getSaveHandlers=function(e){return t.getHandlers(e,"save")},t.getLoadHandlers=function(e,n){return t.getHandlers(e,"load",n)},t.getHandlers=function(e,n,r){var o=[];return("load"===n?t.getInstance().loadRouters:t.getInstance().saveRouters).forEach((function(t){var n=t(e,r);null!==n&&o.push(n)})),o},t}(),of="://",af=function(){function t(){this.managers={}}return t.getInstance=function(){return null==t.instance&&(t.instance=new t),t.instance},t.registerManager=function(e,n){S(null!=e,(function(){return"scheme must not be undefined or null."})),e.endsWith(of)&&(e=e.slice(0,e.indexOf(of))),S(e.length>0,(function(){return"scheme must not be an empty string."}));var r=t.getInstance();S(null==r.managers[e],(function(){return"A model store manager is already registered for scheme '"+e+"'."})),r.managers[e]=n},t.getManager=function(t){var e=this.getInstance().managers[t];if(null==e)throw new Error("Cannot find model manager for scheme '"+t+"'");return e},t.getSchemes=function(){return Object.keys(this.getInstance().managers)},t}();function sf(t){if(-1===t.indexOf(of))throw new Error("The url string provided does not contain a scheme. Supported schemes are: "+af.getSchemes().join(","));return{scheme:t.split(of)[0],path:t.split(of)[1]}}function uf(t,e,n){return void 0===n&&(n=!1),u(this,void 0,void 0,(function(){var r,o,i,a,s,u,l,h,f;return c(this,(function(c){switch(c.label){case 0:return S(t!==e,(function(){return"Old path and new path are the same: '"+t+"'"})),S((r=rf.getLoadHandlers(t)).length>0,(function(){return"Copying failed because no load handler is found for source URL "+t+"."})),S(r.length<2,(function(){return"Copying failed because more than one ("+r.length+") load handlers for source URL "+t+"."})),o=r[0],S((i=rf.getSaveHandlers(e)).length>0,(function(){return"Copying failed because no save handler is found for destination URL "+e+"."})),S(i.length<2,(function(){return"Copying failed because more than one ("+r.length+") save handlers for destination URL "+e+"."})),a=i[0],s=sf(t).scheme,u=sf(t).path,l=s===sf(t).scheme,[4,o.load()];case 1:return h=c.sent(),n&&l?[4,af.getManager(s).removeModel(u)]:[3,3];case 2:c.sent(),c.label=3;case 3:return[4,a.save(h)];case 4:return f=c.sent(),!n||l?[3,6]:[4,af.getManager(s).removeModel(u)];case 5:c.sent(),c.label=6;case 6:return[2,f.modelArtifactsInfo]}}))}))}var cf="models_store",lf="model_info_store";function hf(){if(!h().getBool("IS_BROWSER"))throw new Error("Failed to obtain IndexedDB factory because the current environmentis not a web browser.");var t=window||self,e=t.indexedDB||t.mozIndexedDB||t.webkitIndexedDB||t.msIndexedDB||t.shimIndexedDB;if(null==e)throw new Error("The current browser does not appear to support IndexedDB.");return e}function ff(t){var e=t.result;e.createObjectStore(cf,{keyPath:"modelPath"}),e.createObjectStore(lf,{keyPath:"modelPath"})}var pf=function(){function t(t){if(this.indexedDB=hf(),null==t||!t)throw new Error("For IndexedDB, modelPath must not be null, undefined or empty.");this.modelPath=t}return t.prototype.save=function(t){return u(this,void 0,void 0,(function(){return c(this,(function(e){if(t.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");return[2,this.databaseAction(this.modelPath,t)]}))}))},t.prototype.load=function(){return u(this,void 0,void 0,(function(){return c(this,(function(t){return[2,this.databaseAction(this.modelPath)]}))}))},t.prototype.databaseAction=function(t,e){var n=this;return new Promise((function(t,r){var o=n.indexedDB.open("tensorflowjs",1);o.onupgradeneeded=function(){return ff(o)},o.onsuccess=function(){var i=o.result;if(null==e){var a=i.transaction(cf,"readonly"),s=a.objectStore(cf).get(n.modelPath);s.onsuccess=function(){if(null==s.result)return i.close(),r(new Error("Cannot find model with path '"+n.modelPath+"' in IndexedDB."));t(s.result.modelArtifacts)},s.onerror=function(t){return i.close(),r(s.error)},a.oncomplete=function(){return i.close()}}else{var u,c=nf(e),l=i.transaction(lf,"readwrite"),h=l.objectStore(lf),f=h.put({modelPath:n.modelPath,modelArtifactsInfo:c});f.onsuccess=function(){var o=(u=i.transaction(cf,"readwrite")).objectStore(cf).put({modelPath:n.modelPath,modelArtifacts:e,modelArtifactsInfo:c});o.onsuccess=function(){return t({modelArtifactsInfo:c})},o.onerror=function(t){var e=(h=l.objectStore(lf)).delete(n.modelPath);e.onsuccess=function(){return i.close(),r(o.error)},e.onerror=function(t){return i.close(),r(o.error)}}},f.onerror=function(t){return i.close(),r(f.error)},l.oncomplete=function(){null==u?i.close():u.oncomplete=function(){return i.close()}}}},o.onerror=function(t){return r(o.error)}}))},t.URL_SCHEME="indexeddb://",t}(),df=function(t){return h().getBool("IS_BROWSER")&&!Array.isArray(t)&&t.startsWith(pf.URL_SCHEME)?(e=t.slice(pf.URL_SCHEME.length),new pf(e)):null;var e};rf.registerSaveRouter(df),rf.registerLoadRouter(df);var vf=function(){function t(){this.indexedDB=hf()}return t.prototype.listModels=function(){return u(this,void 0,void 0,(function(){var t=this;return c(this,(function(e){return[2,new Promise((function(e,n){var r=t.indexedDB.open("tensorflowjs",1);r.onupgradeneeded=function(){return ff(r)},r.onsuccess=function(){var t=r.result,o=t.transaction(lf,"readonly"),i=o.objectStore(lf).getAll();i.onsuccess=function(){for(var t={},n=0,r=i.result;n<r.length;n++){var o=r[n];t[o.modelPath]=o.modelArtifactsInfo}e(t)},i.onerror=function(e){return t.close(),n(i.error)},o.oncomplete=function(){return t.close()}},r.onerror=function(t){return n(r.error)}}))]}))}))},t.prototype.removeModel=function(t){return u(this,void 0,void 0,(function(){var e=this;return c(this,(function(n){var r;return t=(r=t).startsWith(pf.URL_SCHEME)?r.slice(pf.URL_SCHEME.length):r,[2,new Promise((function(n,r){var o=e.indexedDB.open("tensorflowjs",1);o.onupgradeneeded=function(){return ff(o)},o.onsuccess=function(){var e,i=o.result,a=i.transaction(lf,"readwrite"),s=a.objectStore(lf),u=s.get(t);u.onsuccess=function(){if(null==u.result)return i.close(),r(new Error("Cannot find model with path '"+t+"' in IndexedDB."));var o=s.delete(t),a=function(){var o=(e=i.transaction(cf,"readwrite")).objectStore(cf).delete(t);o.onsuccess=function(){return n(u.result.modelArtifactsInfo)},o.onerror=function(t){return r(u.error)}};o.onsuccess=a,o.onerror=function(t){return a(),i.close(),r(u.error)}},u.onerror=function(t){return i.close(),r(u.error)},a.oncomplete=function(){null==e?i.close():e.oncomplete=function(){return i.close()}}},o.onerror=function(t){return r(o.error)}}))]}))}))},t}();if(h().getBool("IS_BROWSER"))try{af.registerManager(pf.URL_SCHEME,new vf)}catch(a){}var mf="/",gf="tensorflowjs_models",yf="info",xf="model_topology",bf="weight_specs",wf="weight_data",Cf="model_metadata";function Ef(t){return{info:[gf,t,yf].join(mf),topology:[gf,t,xf].join(mf),weightSpecs:[gf,t,bf].join(mf),weightData:[gf,t,wf].join(mf),modelMetadata:[gf,t,Cf].join(mf)}}function _f(t){var e=t.split(mf);if(e.length<3)throw new Error("Invalid key format: "+t);return e.slice(1,e.length-1).join(mf)}var If=function(){function t(t){if(!h().getBool("IS_BROWSER")||"undefined"==typeof window||void 0===window.localStorage)throw new Error("The current environment does not support local storage.");if(this.LS=window.localStorage,null==t||!t)throw new Error("For local storage, modelPath must not be null, undefined or empty.");this.modelPath=t,this.keys=Ef(this.modelPath)}return t.prototype.save=function(t){return u(this,void 0,void 0,(function(){var e,n,r;return c(this,(function(o){if(t.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");e=JSON.stringify(t.modelTopology),n=JSON.stringify(t.weightSpecs),r=nf(t);try{return this.LS.setItem(this.keys.info,JSON.stringify(r)),this.LS.setItem(this.keys.topology,e),this.LS.setItem(this.keys.weightSpecs,n),this.LS.setItem(this.keys.weightData,function(t){if(Qh)return Buffer.from(t).toString("base64");for(var e=new Uint8Array(t),n="",r=0,o=e.length;r<o;r++)n+=String.fromCharCode(e[r]);return btoa(n)}(t.weightData)),this.LS.setItem(this.keys.modelMetadata,JSON.stringify({format:t.format,generatedBy:t.generatedBy,convertedBy:t.convertedBy,userDefinedMetadata:t.userDefinedMetadata})),[2,{modelArtifactsInfo:r}]}catch(t){throw this.LS.removeItem(this.keys.info),this.LS.removeItem(this.keys.topology),this.LS.removeItem(this.keys.weightSpecs),this.LS.removeItem(this.keys.weightData),this.LS.removeItem(this.keys.modelMetadata),new Error("Failed to save model '"+this.modelPath+"' to local storage: size quota being exceeded is a possible cause of this failure: modelTopologyBytes="+r.modelTopologyBytes+", weightSpecsBytes="+r.weightSpecsBytes+", weightDataBytes="+r.weightDataBytes+".")}return[2]}))}))},t.prototype.load=function(){return u(this,void 0,void 0,(function(){var t,e,n,r,o,i,a;return c(this,(function(s){if(null==(t=JSON.parse(this.LS.getItem(this.keys.info))))throw new Error("In local storage, there is no model with name '"+this.modelPath+"'");if("JSON"!==t.modelTopologyType)throw new Error("BrowserLocalStorage does not support loading non-JSON model topology yet.");if(e={},null==(n=JSON.parse(this.LS.getItem(this.keys.topology))))throw new Error("In local storage, the topology of model '"+this.modelPath+"' is missing.");if(e.modelTopology=n,null==(r=JSON.parse(this.LS.getItem(this.keys.weightSpecs))))throw new Error("In local storage, the weight specs of model '"+this.modelPath+"' are missing.");if(e.weightSpecs=r,null!=(o=this.LS.getItem(this.keys.modelMetadata))&&(i=JSON.parse(o),e.format=i.format,e.generatedBy=i.generatedBy,e.convertedBy=i.convertedBy,e.userDefinedMetadata=i.userDefinedMetadata),null==(a=this.LS.getItem(this.keys.weightData)))throw new Error("In local storage, the binary weight values of model '"+this.modelPath+"' are missing.");return e.weightData=function(t){if(Qh){var e=Buffer.from(t,"base64");return e.buffer.slice(e.byteOffset,e.byteOffset+e.byteLength)}for(var n=atob(t),r=new Uint8Array(n.length),o=0;o<n.length;++o)r.set([n.charCodeAt(o)],o);return r.buffer}(a),[2,e]}))}))},t.URL_SCHEME="localstorage://",t}(),Rf=function(t){return h().getBool("IS_BROWSER")&&!Array.isArray(t)&&t.startsWith(If.URL_SCHEME)?(e=t.slice(If.URL_SCHEME.length),new If(e)):null;var e};rf.registerSaveRouter(Rf),rf.registerLoadRouter(Rf);var Sf=function(){function t(){S(h().getBool("IS_BROWSER"),(function(){return"Current environment is not a web browser"})),S("undefined"==typeof window||void 0!==window.localStorage,(function(){return"Current browser does not appear to support localStorage"})),this.LS=window.localStorage}return t.prototype.listModels=function(){return u(this,void 0,void 0,(function(){var t,e,n,r,o,i;return c(this,(function(a){for(t={},e=gf+mf,n=mf+yf,r=0;r<this.LS.length;++r)(o=this.LS.key(r)).startsWith(e)&&o.endsWith(n)&&(i=_f(o),t[i]=JSON.parse(this.LS.getItem(o)));return[2,t]}))}))},t.prototype.removeModel=function(t){return u(this,void 0,void 0,(function(){var e,n;return c(this,(function(r){var o;if(t=(o=t).startsWith(If.URL_SCHEME)?o.slice(If.URL_SCHEME.length):o,e=Ef(t),null==this.LS.getItem(e.info))throw new Error("Cannot find model at path '"+t+"'");return n=JSON.parse(this.LS.getItem(e.info)),this.LS.removeItem(e.info),this.LS.removeItem(e.topology),this.LS.removeItem(e.weightSpecs),this.LS.removeItem(e.weightData),[2,n]}))}))},t}();if(h().getBool("IS_BROWSER"))try{af.registerManager(If.URL_SCHEME,new Sf)}catch(a){}function kf(t){return new Promise((function(t){return setTimeout(t)})).then(t)}var Df=function(){function t(e){if(!h().getBool("IS_BROWSER"))throw new Error("browserDownloads() cannot proceed because the current environment is not a browser.");e.startsWith(t.URL_SCHEME)&&(e=e.slice(t.URL_SCHEME.length)),null!=e&&0!==e.length||(e="model"),this.modelTopologyFileName=e+".json",this.weightDataFileName=e+".weights.bin"}return t.prototype.save=function(t){return u(this,void 0,void 0,(function(){var e,n,r,o,i,a;return c(this,(function(s){switch(s.label){case 0:if("undefined"==typeof document)throw new Error("Browser downloads are not supported in this environment since `document` is not present");if(e=window.URL.createObjectURL(new Blob([t.weightData],{type:"application/octet-stream"})),!(t.modelTopology instanceof ArrayBuffer))return[3,1];throw new Error("BrowserDownloads.save() does not support saving model topology in binary formats yet.");case 1:return n=[{paths:["./"+this.weightDataFileName],weights:t.weightSpecs}],r={modelTopology:t.modelTopology,format:t.format,generatedBy:t.generatedBy,convertedBy:t.convertedBy,weightsManifest:n},o=window.URL.createObjectURL(new Blob([JSON.stringify(r)],{type:"application/json"})),(i=null==this.jsonAnchor?document.createElement("a"):this.jsonAnchor).download=this.modelTopologyFileName,i.href=o,[4,kf((function(){return i.dispatchEvent(new MouseEvent("click"))}))];case 2:return s.sent(),null==t.weightData?[3,4]:((a=null==this.weightDataAnchor?document.createElement("a"):this.weightDataAnchor).download=this.weightDataFileName,a.href=e,[4,kf((function(){return a.dispatchEvent(new MouseEvent("click"))}))]);case 3:s.sent(),s.label=4;case 4:return[2,{modelArtifactsInfo:nf(t)}]}}))}))},t.URL_SCHEME="downloads://",t}(),Af=function(){function t(t){if(null==t||t.length<1)throw new Error("When calling browserFiles, at least 1 file is required, but received "+t);this.files=t}return t.prototype.load=function(){return u(this,void 0,void 0,(function(){var t,e,n=this;return c(this,(function(r){return t=this.files[0],e=this.files.slice(1),[2,new Promise((function(r,o){var i=new FileReader;i.onload=function(i){var a=JSON.parse(i.target.result),s=a.modelTopology;if(null!=s){0===e.length&&r({modelTopology:s});var u=a.weightsManifest;if(null!=u){var c;try{c=n.checkManifestAndWeightFiles(u,e)}catch(t){return void o(t)}var l=[],h=[],f=[];u.forEach((function(t){t.paths.forEach((function(t){h.push(t),f.push(null)})),l.push.apply(l,t.weights)})),u.forEach((function(t){t.paths.forEach((function(t){var e=new FileReader;e.onload=function(e){var n=e.target.result,o=h.indexOf(t);f[o]=n,-1===f.indexOf(null)&&r({modelTopology:s,weightSpecs:l,weightData:tf(f),format:a.format,generatedBy:a.generatedBy,convertedBy:a.convertedBy,userDefinedMetadata:a.userDefinedMetadata})},e.onerror=function(e){return o("Failed to weights data from file of path '"+t+"'.")},e.readAsArrayBuffer(c[t])}))}))}else o(new Error("weightManifest field is missing from file "+t.name))}else o(new Error("modelTopology field is missing from file "+t.name))},i.onerror=function(e){return o("Failed to read model topology and weights manifest JSON from file '"+t.name+"'. BrowserFiles supports loading Keras-style tf.Model artifacts only.")},i.readAsText(t)}))]}))}))},t.prototype.checkManifestAndWeightFiles=function(t,e){for(var n=[],r=e.map((function(t){return ef(t.name)})),o={},i=0,a=t;i<a.length;i++)a[i].paths.forEach((function(t){var i=ef(t);if(-1!==n.indexOf(i))throw new Error("Duplicate file basename found in weights manifest: '"+i+"'");if(n.push(i),-1===r.indexOf(i))throw new Error("Weight file with basename '"+i+"' is not provided.");o[t]=e[r.indexOf(i)]}));if(n.length!==e.length)throw new Error("Mismatch in the number of files in weights manifest ("+n.length+") and the number of weight files provided ("+e.length+").");return o},t}();function Tf(t,e,n,r){!function(t){S(null!=t&&Array.isArray(t)&&t.length>0,(function(){return"promises must be a none empty array"}))}(t),function(t,e){S(t>=0&&t<=1,(function(){return"Progress fraction must be in range [0, 1], but got startFraction "+t})),S(e>=0&&e<=1,(function(){return"Progress fraction must be in range [0, 1], but got endFraction "+e})),S(e>=t,(function(){return"startFraction must be no more than endFraction, but got startFraction "+t+" and endFraction "+e}))}(n=null==n?0:n,r=null==r?1:r);var o=0;return Promise.all(t.map((function(i){return i.then((function(i){var a=n+ ++o/t.length*(r-n);return e(a),i})),i})))}function Ff(t,e){return u(this,void 0,void 0,(function(){var n,r,o,i,a,s,u,l,f;return c(this,(function(c){switch(c.label){case 0:return null==e&&(e={}),n=null==e.fetchFunc?h().platform.fetch:e.fetchFunc,r=t.map((function(t){return n(t,e.requestInit,{isBinary:!0})})),o=0,i=.5,null!=e.onProgress?[3,2]:[4,Promise.all(r)];case 1:return a=c.sent(),[3,4];case 2:return[4,Tf(r,e.onProgress,o,i)];case 3:a=c.sent(),c.label=4;case 4:return s=a.map((function(t){return t.arrayBuffer()})),u=.5,l=1,null!=e.onProgress?[3,6]:[4,Promise.all(s)];case 5:return f=c.sent(),[3,8];case 6:return[4,Tf(s,e.onProgress,u,l)];case 7:f=c.sent(),c.label=8;case 8:return[2,f]}}))}))}function Nf(t){var e=this;return function(n,r,o){return void 0===r&&(r=""),u(e,void 0,void 0,(function(){var e,i,a,s,u,l,h,f,p,d;return c(this,(function(c){switch(c.label){case 0:if(e=n.map((function(){return!1})),i={},a=null!=o?o.map((function(){return!1})):[],s=[],n.forEach((function(t,n){var r=0;t.weights.forEach((function(t){var u="quantization"in t?t.quantization.dtype:t.dtype,c=Xh[u]*T(t.shape),l=function(){e[n]=!0,null==i[n]&&(i[n]=[]),i[n].push({manifestEntry:t,groupOffset:r,sizeBytes:c})};null!=o?o.forEach((function(e,n){e===t.name&&(l(),a[n]=!0)})):l(),s.push(t.name),r+=c}))})),!a.every((function(t){return t})))throw u=o.filter((function(t,e){return!a[e]})),new Error("Could not find weights in manifest with names: "+u.join(", ")+". \nManifest JSON has weights with names: "+s.join(", ")+".");return l=e.reduce((function(t,e,n){return e&&t.push(n),t}),[]),h=[],l.forEach((function(t){n[t].paths.forEach((function(t){var e=r+(r.endsWith("/")?"":"/")+t;h.push(e)}))})),[4,t(h)];case 1:return f=c.sent(),p={},d=0,l.forEach((function(t){for(var e=n[t].paths.length,r=0,o=0;o<e;o++)r+=f[d+o].byteLength;for(var a=new ArrayBuffer(r),s=new Uint8Array(a),u=0,c=0;c<e;c++){var l=new Uint8Array(f[d+c]);s.set(l,u),u+=l.byteLength}i[t].forEach((function(t){var e=$h(a.slice(t.groupOffset,t.groupOffset+t.sizeBytes),[t.manifestEntry]);for(var n in e)p[n]=e[n]})),d+=e})),[2,p]}}))}))}}rf.registerSaveRouter((function(t){return h().getBool("IS_BROWSER")&&!Array.isArray(t)&&t.startsWith(Df.URL_SCHEME)?function(t){return void 0===t&&(t="model"),new Df(t)}(t.slice(Df.URL_SCHEME.length)):null}));var Mf=function(){function t(t,e){if(this.DEFAULT_METHOD="POST",null==e&&(e={}),this.weightPathPrefix=e.weightPathPrefix,this.onProgress=e.onProgress,null!=e.fetchFunc?(S("function"==typeof e.fetchFunc,(function(){return"Must pass a function that matches the signature of `fetch` (see https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API)"})),this.fetch=e.fetchFunc):this.fetch=h().platform.fetch,S(null!=t&&t.length>0,(function(){return"URL path for http must not be null, undefined or empty."})),Array.isArray(t)&&S(2===t.length,(function(){return"URL paths for http must have a length of 2, (actual length is "+t.length+")."})),this.path=t,null!=e.requestInit&&null!=e.requestInit.body)throw new Error("requestInit is expected to have no pre-existing body, but has one.");this.requestInit=e.requestInit||{}}return t.prototype.save=function(t){return u(this,void 0,void 0,(function(){var e,n,r,o;return c(this,(function(i){switch(i.label){case 0:if(t.modelTopology instanceof ArrayBuffer)throw new Error("BrowserHTTPRequest.save() does not support saving model topology in binary formats yet.");return(e=Object.assign({method:this.DEFAULT_METHOD},this.requestInit)).body=new FormData,n=[{paths:["./model.weights.bin"],weights:t.weightSpecs}],r={modelTopology:t.modelTopology,format:t.format,generatedBy:t.generatedBy,convertedBy:t.convertedBy,userDefinedMetadata:t.userDefinedMetadata,weightsManifest:n},e.body.append("model.json",new Blob([JSON.stringify(r)],{type:"application/json"}),"model.json"),null!=t.weightData&&e.body.append("model.weights.bin",new Blob([t.weightData],{type:"application/octet-stream"}),"model.weights.bin"),[4,this.fetch(this.path,e)];case 1:if((o=i.sent()).ok)return[2,{modelArtifactsInfo:nf(t),responses:[o]}];throw new Error("BrowserHTTPRequest.save() failed due to HTTP response status "+o.status+".")}}))}))},t.prototype.load=function(){return u(this,void 0,void 0,(function(){var t,e,n,r,o,i,a,s,u,l,h,f;return c(this,(function(c){switch(c.label){case 0:return[4,this.fetch(this.path,this.requestInit)];case 1:if(!(t=c.sent()).ok)throw new Error("Request to "+this.path+" failed with status code "+t.status+". Please verify this URL points to the model JSON of the model to load.");c.label=2;case 2:return c.trys.push([2,4,,5]),[4,t.json()];case 3:return e=c.sent(),[3,5];case 4:throw c.sent(),n="Failed to parse model JSON of response from "+this.path+".",this.path.endsWith(".pb")?n+=" Your path contains a .pb file extension. Support for .pb models have been removed in TensorFlow.js 1.0 in favor of .json models. You can re-convert your Python TensorFlow model using the TensorFlow.js 1.0 conversion scripts or you can convert your.pb models with the 'pb2json'NPM script in the tensorflow/tfjs-converter repository.":n+=" Please make sure the server is serving valid JSON for this request.",new Error(n);case 5:if(r=e.modelTopology,o=e.weightsManifest,i=e.generatedBy,a=e.convertedBy,s=e.format,u=e.userDefinedMetadata,null==r&&null==o)throw new Error("The JSON from HTTP path "+this.path+" contains neither model topology or manifest for weights.");return null==o?[3,7]:[4,this.loadWeights(o)];case 6:f=c.sent(),l=f[0],h=f[1],c.label=7;case 7:return[2,{modelTopology:r,weightSpecs:l,weightData:h,userDefinedMetadata:u,generatedBy:i,convertedBy:a,format:s}]}}))}))},t.prototype.loadWeights=function(t){return u(this,void 0,void 0,(function(){var e,n,r,o,i,a,s,u,l,h,f;return c(this,(function(c){switch(c.label){case 0:for(e=Array.isArray(this.path)?this.path[1]:this.path,n=function(t){var e=t.lastIndexOf("/"),n=t.lastIndexOf("?");return[t.substring(0,e)+"/",n>e?t.substring(n):""]}(e),r=n[0],o=n[1],i=this.weightPathPrefix||r,a=[],s=0,u=t;s<u.length;s++)l=u[s],a.push.apply(a,l.weights);return h=[],t.forEach((function(t){t.paths.forEach((function(t){h.push(i+t+o)}))})),[4,Ff(h,{requestInit:this.requestInit,fetchFunc:this.fetch,onProgress:this.onProgress})];case 1:return f=c.sent(),[2,[a,tf(f)]]}}))}))},t.URL_SCHEME_REGEX=/^https?:\/\//,t}();function Of(t){return null!=t.match(Mf.URL_SCHEME_REGEX)}var Pf=function(t,e){return"undefined"==typeof fetch?null:(Array.isArray(t)?t.every((function(t){return Of(t)})):Of(t))?Bf(t,{onProgress:e}):null};function Bf(t,e){return new Mf(t,e)}rf.registerSaveRouter(Pf),rf.registerLoadRouter(Pf);var Lf,Wf=function(){function t(t){this.modelArtifacts=t}return t.prototype.load=function(){return u(this,void 0,void 0,(function(){return c(this,(function(t){return[2,this.modelArtifacts]}))}))},t}(),zf=function(){function t(t){this.saveHandler=t}return t.prototype.save=function(t){return u(this,void 0,void 0,(function(){return c(this,(function(e){return[2,this.saveHandler(t)]}))}))},t}(),Uf=Object.freeze({browserFiles:function(t){return new Af(t)},browserHTTPRequest:function(t,e){return Bf(t,e)},concatenateArrayBuffers:tf,decodeWeights:$h,encodeWeights:function(t,e){return u(this,void 0,void 0,(function(){var n,r,o,i,a,s=this;return c(this,(function(l){switch(l.label){case 0:for(n=[],r=[],o=Array.isArray(t)?t.map((function(t){return t.name})):Object.keys(t),i=function(i){var a=o[i],l=Array.isArray(t)?t[i].tensor:t[a];if("float32"!==l.dtype&&"int32"!==l.dtype&&"bool"!==l.dtype&&"string"!==l.dtype)throw new Error("Unsupported dtype in weight '"+a+"': "+l.dtype);var h={name:a,shape:l.shape,dtype:l.dtype};if("string"===l.dtype){var f=new Promise((function(t){return u(s,void 0,void 0,(function(){var e,n,r,o,i,a,s;return c(this,(function(u){switch(u.label){case 0:return[4,l.bytes()];case 1:for(e=u.sent(),n=e.reduce((function(t,e){return t+e.length}),0)+Yh*e.length,r=new Uint8Array(n),o=0,i=0;i<e.length;i++)a=e[i],s=new Uint8Array(new Uint32Array([a.length]).buffer),r.set(s,o),o+=Yh,r.set(a,o),o+=a.length;return t(r),[2]}}))}))}));r.push(f)}else r.push(l.data());null!=e&&(h.group=e),n.push(h)},a=0;a<o.length;++a)i(a);return[4,Promise.all(r)];case 1:return[2,{data:Jh(l.sent()),specs:n}]}}))}))},fromMemory:function(t,e,n,r){return 1===arguments.length?null!=t.modelTopology||null!=t.weightSpecs?new Wf(t):(console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."),new Wf({modelTopology:t})):(console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."),new Wf({modelTopology:t,weightSpecs:e,weightData:n,trainingConfig:r}))},getLoadHandlers:function(t,e){return rf.getLoadHandlers(t,e)},getModelArtifactsInfoForJSON:nf,getSaveHandlers:function(t){return rf.getSaveHandlers(t)},http:Bf,isHTTPScheme:Of,loadWeights:function(t,e,n,r){return void 0===e&&(e=""),u(this,void 0,void 0,(function(){return c(this,(function(o){return[2,Nf((function(t){return Ff(t,{requestInit:r})}))(t,e,n)]}))}))},registerLoadRouter:function(t){return rf.registerLoadRouter(t)},registerSaveRouter:function(t){return rf.registerSaveRouter(t)},weightsLoaderFactory:Nf,withSaveHandler:function(t){return new zf(t)},copyModel:function(t,e){return u(this,void 0,void 0,(function(){return c(this,(function(n){return[2,uf(t,e,!1)]}))}))},listModels:function(){return u(this,void 0,void 0,(function(){var t,e,n,r,o,i,a;return c(this,(function(s){switch(s.label){case 0:t=af.getSchemes(),e={},n=0,r=t,s.label=1;case 1:return n<r.length?(o=r[n],[4,af.getManager(o).listModels()]):[3,4];case 2:for(a in i=s.sent())e[o+of+a]=i[a];s.label=3;case 3:return n++,[3,1];case 4:return[2,e]}}))}))},moveModel:function(t,e){return u(this,void 0,void 0,(function(){return c(this,(function(n){return[2,uf(t,e,!0)]}))}))},removeModel:function(t){return u(this,void 0,void 0,(function(){var e;return c(this,(function(n){return e=sf(t),[2,af.getManager(e.scheme).removeModel(e.path)]}))}))}}),Vf=Sn({confusionMatrix_:function(t,e,n){var r=vn(t,"labels","confusionMatrix"),o=vn(e,"predictions","confusionMatrix");S(null==n||n>0&&Number.isInteger(n),(function(){return"If provided, numClasses must be a positive integer, but got "+n})),S(1===r.rank,(function(){return"Expected the rank of labels to be 1, but got "+r.rank})),S(1===o.rank,(function(){return"Expected the rank of predictions to be 1, but got "+o.rank})),S(r.shape[0]===o.shape[0],(function(){return"Mismatch in the number of examples: "+r.shape[0]+" vs. "+o.shape[0]+". Labels and predictions should have the same number of elements."})),S(n>0&&Number.isInteger(n),(function(){return"numClasses is required to be a positive integer, but got "+n}));var i=Er(r.asType("int32"),n),a=Er(o.asType("int32"),n);return i.transpose().matMul(a).asType("int32")}}),Gf=Object.freeze({confusionMatrix:Vf}),Hf=Sn({fromPixels_:function(t,e){if(void 0===e&&(e=3),e>4)throw new Error("Cannot construct Tensor with more than 4 channels from pixels.");if(null==t)throw new Error("pixels passed to tf.browser.fromPixels() can not be null");var n=!1,r=!1,o=!1,i=!1,a=!1;if(t.data instanceof Uint8Array)n=!0;else if("undefined"!=typeof ImageData&&t instanceof ImageData)r=!0;else if("undefined"!=typeof HTMLVideoElement&&t instanceof HTMLVideoElement)o=!0;else if("undefined"!=typeof HTMLImageElement&&t instanceof HTMLImageElement)i=!0;else{if(null==t.getContext)throw new Error("pixels passed to tf.browser.fromPixels() must be either an HTMLVideoElement, HTMLImageElement, HTMLCanvasElement, ImageData in browser, or OffscreenCanvas, ImageData in webworker or {data: Uint32Array, width: number, height: number}, but was "+t.constructor.name);a=!0}if(o&&o&&t.readyState<2)throw new Error("The video element has not loaded data yet. Please wait for `loadeddata` event on the <video> element.");if(null!=v("FromPixels",Wt.backendName))return Wt.runKernel("FromPixels",{pixels:t},{numChannels:e});var s,u,c=o?[t.videoWidth,t.videoHeight]:[t.width,t.height],l=c[0],h=c[1];if(a?s=t.getContext("2d").getImageData(0,0,l,h).data:r||n?s=t.data:(i||o)&&(null==Lf&&(Lf=document.createElement("canvas").getContext("2d")),Lf.canvas.width=l,Lf.canvas.height=h,Lf.drawImage(t,0,0,l,h),s=Lf.getImageData(0,0,l,h).data),4===e)u=new Int32Array(s);else{var f=l*h;u=new Int32Array(f*e);for(var p=0;p<f;p++)for(var d=0;d<e;++d)u[p*e+d]=s[4*p+d]}return Pn(u,[h,l,e],"int32")}}),jf=Object.freeze({toPixels:function(t,e){return u(this,void 0,void 0,(function(){var n,r,o,i,a,s,u,l,h,f,p,d,v,m,g,y,x,b,w,C,E,_,I;return c(this,(function(c){switch(c.label){case 0:if(n=vn(t,"img","toPixels"),t instanceof Ct||(n=n.toInt()),2!==n.rank&&3!==n.rank)throw new Error("toPixels only supports rank 2 or 3 tensors, got rank "+n.rank+".");if(r=n.shape.slice(0,2),o=r[0],i=r[1],(a=2===n.rank?1:n.shape[2])>4||2===a)throw new Error("toPixels only supports depth of size 1, 3 or 4 but got "+a);return[4,n.data()];case 1:return s=c.sent(),u=n.min(),l=n.max(),[4,Promise.all([u.data(),l.data()])];case 2:if(h=c.sent(),f=h[0],p=h[1],d=f[0],v=p[0],u.dispose(),l.dispose(),"float32"===n.dtype){if(d<0||v>1)throw new Error("Tensor values for a float32 Tensor must be in the range [0 - 1] but got range ["+d+" - "+v+"].")}else{if("int32"!==n.dtype)throw new Error("Unsupported type for toPixels: "+n.dtype+". Please use float32 or int32 tensors.");if(d<0||v>255)throw new Error("Tensor values for a int32 Tensor must be in the range [0 - 255] but got range ["+d+" - "+v+"].")}for(m="float32"===n.dtype?255:1,g=new Uint8ClampedArray(i*o*4),y=0;y<o*i;++y)x=void 0,b=void 0,w=void 0,C=void 0,1===a?(x=s[y]*m,b=s[y]*m,w=s[y]*m,C=255):3===a?(x=s[3*y]*m,b=s[3*y+1]*m,w=s[3*y+2]*m,C=255):4===a&&(x=s[4*y]*m,b=s[4*y+1]*m,w=s[4*y+2]*m,C=s[4*y+3]*m),g[0+(E=4*y)]=Math.round(x),g[E+1]=Math.round(b),g[E+2]=Math.round(w),g[E+3]=Math.round(C);return null!=e&&(e.width=i,e.height=o,_=e.getContext("2d"),I=new ImageData(g,i,o),_.putImageData(I,0,0)),n!==t&&n.dispose(),[2,g]}}))}))},fromPixels:Hf}),qf=function(){function t(){}return t.prototype.getClassName=function(){return this.constructor.className},t.fromConfig=function(t,e){return new t(e)},t}(),Kf=function(){function t(){this.classNameMap={}}return t.getMap=function(){return null==t.instance&&(t.instance=new t),t.instance},t.register=function(e){t.getMap().classNameMap[e.className]=[e,e.fromConfig]},t}();function Xf(t){S(null!=t.className,(function(){return"Class being registered does not have the static className property defined."})),S("string"==typeof t.className,(function(){return"className is required to be a string, but got type "+typeof t.className})),S(t.className.length>0,(function(){return"Class being registered has an empty-string as its className, which is disallowed."})),Kf.register(t)}var Yf=Object.freeze({Serializable:qf,SerializationMap:Kf,registerClass:Xf});function $f(){return 32===Wt.backend.floatPrecision()?.001:.1}function Jf(t,e,n){var r=!0;if((q(t)||q(e))&&(r=!1),q(t)&&q(e)&&(r=!0),r){var o=t.constructor.name,i=e.constructor.name;if(o!==i)throw new Error("Arrays are of different type. Actual: "+o+". Expected: "+i)}if(Array.isArray(t)&&Array.isArray(e)){var a=pn(t),s=pn(e);if(!F(a,s))throw new Error("Arrays have different shapes. Actual: ["+a+"]. Expected: ["+s+"]")}var u=q(t)?t:A(t),c=q(e)?e:A(e);if(u.length!==c.length)throw new Error("Arrays have different lengths actual: "+u.length+" vs expected: "+c.length+".\nActual:   "+u+".\nExpected: "+c+".");for(var l=0;l<c.length;++l){var h=u[l],f=c[l];if(!n(h,f))throw new Error("Arrays differ: actual["+l+"] = "+h+", expected["+l+"] = "+f+".\nActual:   "+u+".\nExpected: "+c+".")}}function Qf(t,e,n){return!isFinite(t)&&!isFinite(e)||!(isNaN(t)||isNaN(e)||Math.abs(t-e)>n)}var Zf=Object.freeze({TEST_EPSILON_FLOAT16:.1,expectArraysClose:function(t,e,n){return null==n&&(n=$f()),Jf(t,e,(function(t,e){return Qf(t,e,n)}))},testEpsilon:$f,expectPromiseToFail:function(t,e){t().then((function(){return e.fail()}),(function(){return e()}))},expectArraysEqual:function(t,e){var n="string"==typeof e||"number"==typeof e||"boolean"==typeof e?[e]:e;return Y(t)||Y(t[0])||Y(e)||Y(e[0])?Jf(t,n,(function(t,e){return t==e})):Jf(t,e,(function(t,e){return Qf(t,e,0)}))},expectNumbersClose:function(t,e,n){if(null==n&&(n=$f()),!Qf(t,e,n))throw new Error("Numbers differ: actual === "+t+", expected === "+e)},expectValuesInRange:function(t,e,n){for(var r=0;r<t.length;r++)if(t[r]<e||t[r]>n)throw new Error("Value out of range:"+t[r]+" low: "+e+", high: "+n)},expectArrayBuffersEqual:function(t,e){expect(new Float32Array(t)).toEqual(new Float32Array(e))}}),tp="1.7.0",ep=Object.freeze({gpgpu_util:Da,webgl_util:Ve,forceHalfFloat:function(){h().set("WEBGL_FORCE_F16_TEXTURES",!0)},MathBackendWebGL:Hs,setWebGLContext:Kt,GPGPUContext:Aa}),np=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return s(e,t),e.prototype.minimize=function(t,e,n){void 0===e&&(e=!1);var r=this.computeGradients(t,n),o=r.value,i=r.grads;if(null!=n){var a=n.map((function(t){return{name:t.name,tensor:i[t.name]}}));this.applyGradients(a)}else this.applyGradients(i);return Ze(i),e?o:(o.dispose(),null)},Object.defineProperty(e.prototype,"iterations",{get:function(){return null==this.iterations_&&(this.iterations_=0),this.iterations_},enumerable:!0,configurable:!0}),e.prototype.incrementIterations=function(){this.iterations_=this.iterations+1},e.prototype.computeGradients=function(t,e){return ho(t,e)},e.prototype.dispose=function(){null!=this.iterations_&&Ze(this.iterations_)},e.prototype.saveIterations=function(){return u(this,void 0,void 0,(function(){return c(this,(function(t){return null==this.iterations_&&(this.iterations_=0),[2,{name:"iter",tensor:Nn(this.iterations_,"int32")}]}))}))},e.prototype.getWeights=function(){return u(this,void 0,void 0,(function(){return c(this,(function(t){throw new Error("getWeights() is not implemented for this optimizer yet.")}))}))},e.prototype.setWeights=function(t){return u(this,void 0,void 0,(function(){return c(this,(function(t){throw new Error("setWeights() is not implemented for this optimizer class "+this.getClassName())}))}))},e.prototype.extractIterations=function(t){return u(this,void 0,void 0,(function(){var e;return c(this,(function(n){switch(n.label){case 0:return e=this,[4,t[0].tensor.data()];case 1:return e.iterations_=n.sent()[0],[2,t.slice(1)]}}))}))},e}(qf);Object.defineProperty(np,Symbol.hasInstance,{value:function(t){return null!=t.minimize&&null!=t.computeGradients&&null!=t.applyGradients}});var rp=function(t){function e(e,n,r){void 0===r&&(r=null);var o=t.call(this)||this;return o.learningRate=e,o.rho=n,o.epsilon=r,o.accumulatedGrads=[],o.accumulatedUpdates=[],null==r&&(o.epsilon=Wt.backend.epsilon()),o}return s(e,t),e.prototype.applyGradients=function(t){var e=this;(Array.isArray(t)?t.map((function(t){return t.name})):Object.keys(t)).forEach((function(n,r){var o=Wt.registeredVariables[n];null==e.accumulatedGrads[r]&&(e.accumulatedGrads[r]={originalName:n+"/accum_grad",variable:Qe((function(){return Kn(o).variable(!1)}))}),null==e.accumulatedUpdates[r]&&(e.accumulatedUpdates[r]={originalName:n+"/accum_var",variable:Qe((function(){return Kn(o).variable(!1)}))});var i=Array.isArray(t)?t[r].tensor:t[n];if(null!=i){var a=e.accumulatedGrads[r].variable,s=e.accumulatedUpdates[r].variable;Qe((function(){var t=a.mul(e.rho).add(i.square().mul(1-e.rho)),n=s.add(e.epsilon).sqrt().div(a.add(e.epsilon).sqrt()).mul(i),r=s.mul(e.rho).add(n.square().mul(1-e.rho));a.assign(t),s.assign(r);var u=n.mul(-e.learningRate).add(o);o.assign(u)}))}})),this.incrementIterations()},e.prototype.dispose=function(){null!=this.accumulatedUpdates&&(Ze(this.accumulatedGrads.map((function(t){return t.variable}))),Ze(this.accumulatedUpdates.map((function(t){return t.variable}))))},e.prototype.getWeights=function(){return u(this,void 0,void 0,(function(){var t;return c(this,(function(e){switch(e.label){case 0:return t=this.accumulatedGrads.concat(this.accumulatedUpdates),[4,this.saveIterations()];case 1:return[2,[e.sent()].concat(t.map((function(t){return{name:t.originalName,tensor:t.variable}})))]}}))}))},e.prototype.setWeights=function(t){return u(this,void 0,void 0,(function(){var e;return c(this,(function(n){switch(n.label){case 0:return[4,this.extractIterations(t)];case 1:return t=n.sent(),e=t.length/2,this.accumulatedGrads=t.slice(0,e).map((function(t){return{originalName:t.name,variable:t.tensor.variable(!1)}})),this.accumulatedUpdates=t.slice(e,2*e).map((function(t){return{originalName:t.name,variable:t.tensor.variable(!1)}})),[2]}}))}))},e.prototype.getConfig=function(){return{learningRate:this.learningRate,rho:this.rho,epsilon:this.epsilon}},e.fromConfig=function(t,e){return new t(e.learningRate,e.rho,e.epsilon)},e.className="Adadelta",e}(np);Xf(rp);var op=function(t){function e(e,n){void 0===n&&(n=.1);var r=t.call(this)||this;return r.learningRate=e,r.initialAccumulatorValue=n,r.accumulatedGrads=[],r}return s(e,t),e.prototype.applyGradients=function(t){var e=this;(Array.isArray(t)?t.map((function(t){return t.name})):Object.keys(t)).forEach((function(n,r){var o=Wt.registeredVariables[n];null==e.accumulatedGrads[r]&&(e.accumulatedGrads[r]={originalName:n+"/accumulator",variable:Qe((function(){return Gn(o.shape,e.initialAccumulatorValue).variable(!1)}))});var i=Array.isArray(t)?t[r].tensor:t[n];if(null!=i){var a=e.accumulatedGrads[r].variable;Qe((function(){var t=a.add(i.square());a.assign(t);var n=i.div(t.add(Wt.backend.epsilon()).sqrt()).mul(-e.learningRate).add(o);o.assign(n)}))}})),this.incrementIterations()},e.prototype.dispose=function(){null!=this.accumulatedGrads&&Ze(this.accumulatedGrads.map((function(t){return t.variable})))},e.prototype.getWeights=function(){return u(this,void 0,void 0,(function(){return c(this,(function(t){switch(t.label){case 0:return[4,this.saveIterations()];case 1:return[2,[t.sent()].concat(this.accumulatedGrads.map((function(t){return{name:t.originalName,tensor:t.variable}})))]}}))}))},e.prototype.setWeights=function(t){return u(this,void 0,void 0,(function(){return c(this,(function(e){switch(e.label){case 0:return[4,this.extractIterations(t)];case 1:return t=e.sent(),this.accumulatedGrads=t.map((function(t){return{originalName:t.name,variable:t.tensor.variable(!1)}})),[2]}}))}))},e.prototype.getConfig=function(){return{learningRate:this.learningRate,initialAccumulatorValue:this.initialAccumulatorValue}},e.fromConfig=function(t,e){return new t(e.learningRate,e.initialAccumulatorValue)},e.className="Adagrad",e}(np);Xf(op);var ip=function(t){function e(e,n,r,o){void 0===o&&(o=null);var i=t.call(this)||this;return i.learningRate=e,i.beta1=n,i.beta2=r,i.epsilon=o,i.accumulatedFirstMoment=[],i.accumulatedSecondMoment=[],Qe((function(){i.accBeta1=Nn(n).variable(),i.accBeta2=Nn(r).variable()})),null==o&&(i.epsilon=Wt.backend.epsilon()),i}return s(e,t),e.prototype.applyGradients=function(t){var e=this,n=Array.isArray(t)?t.map((function(t){return t.name})):Object.keys(t);Qe((function(){var r=pc(1,e.accBeta1),o=pc(1,e.accBeta2);n.forEach((function(n,i){var a=Wt.registeredVariables[n];null==e.accumulatedFirstMoment[i]&&(e.accumulatedFirstMoment[i]={originalName:n+"/m",variable:Qe((function(){return Kn(a).variable(!1)}))}),null==e.accumulatedSecondMoment[i]&&(e.accumulatedSecondMoment[i]={originalName:n+"/v",variable:Qe((function(){return Kn(a).variable(!1)}))});var s=Array.isArray(t)?t[i].tensor:t[n];if(null!=s){var u=e.accumulatedFirstMoment[i].variable,c=e.accumulatedSecondMoment[i].variable,l=u.mul(e.beta1).add(s.mul(1-e.beta1)),h=c.mul(e.beta2).add(s.square().mul(1-e.beta2)),f=l.div(r),p=h.div(o);u.assign(l),c.assign(h);var d=f.div(p.sqrt().add(e.epsilon)).mul(-e.learningRate).add(a);a.assign(d)}})),e.accBeta1.assign(e.accBeta1.mul(e.beta1)),e.accBeta2.assign(e.accBeta2.mul(e.beta2))})),this.incrementIterations()},e.prototype.dispose=function(){this.accBeta1.dispose(),this.accBeta2.dispose(),null!=this.accumulatedFirstMoment&&Ze(this.accumulatedFirstMoment.map((function(t){return t.variable}))),null!=this.accumulatedSecondMoment&&Ze(this.accumulatedSecondMoment.map((function(t){return t.variable})))},e.prototype.getWeights=function(){return u(this,void 0,void 0,(function(){var t;return c(this,(function(e){switch(e.label){case 0:return t=this.accumulatedFirstMoment.concat(this.accumulatedSecondMoment),[4,this.saveIterations()];case 1:return[2,[e.sent()].concat(t.map((function(t){return{name:t.originalName,tensor:t.variable}})))]}}))}))},e.prototype.setWeights=function(t){return u(this,void 0,void 0,(function(){var e,n=this;return c(this,(function(r){switch(r.label){case 0:return[4,this.extractIterations(t)];case 1:return t=r.sent(),Qe((function(){n.accBeta1.assign(lc(n.beta1,n.iterations_+1)),n.accBeta2.assign(lc(n.beta2,n.iterations_+1))})),e=t.length/2,this.accumulatedFirstMoment=t.slice(0,e).map((function(t){return{originalName:t.name,variable:t.tensor.variable(!1)}})),this.accumulatedSecondMoment=t.slice(e,2*e).map((function(t){return{originalName:t.name,variable:t.tensor.variable(!1)}})),[2]}}))}))},e.prototype.getConfig=function(){return{learningRate:this.learningRate,beta1:this.beta1,beta2:this.beta2,epsilon:this.epsilon}},e.fromConfig=function(t,e){return new t(e.learningRate,e.beta1,e.beta2,e.epsilon)},e.className="Adam",e}(np);Xf(ip);var ap=function(t){function e(e,n,r,o,i){void 0===o&&(o=null),void 0===i&&(i=0);var a=t.call(this)||this;return a.learningRate=e,a.beta1=n,a.beta2=r,a.epsilon=o,a.decay=i,a.accumulatedFirstMoment=[],a.accumulatedWeightedInfNorm=[],Qe((function(){a.iteration=Nn(0).variable(),a.accBeta1=Nn(n).variable()})),null==o&&(a.epsilon=Wt.backend.epsilon()),a}return s(e,t),e.prototype.applyGradients=function(t){var e=this,n=Array.isArray(t)?t.map((function(t){return t.name})):Object.keys(t);Qe((function(){var r=pc(1,e.accBeta1),o=Qu(-e.learningRate,e.iteration.mul(e.decay).add(1));n.forEach((function(n,i){var a=Wt.registeredVariables[n];null==e.accumulatedFirstMoment[i]&&(e.accumulatedFirstMoment[i]={originalName:n+"/m",variable:Kn(a).variable(!1)}),null==e.accumulatedWeightedInfNorm[i]&&(e.accumulatedWeightedInfNorm[i]={originalName:n+"/v",variable:Kn(a).variable(!1)});var s=Array.isArray(t)?t[i].tensor:t[n];if(null!=s){var u=e.accumulatedFirstMoment[i].variable,c=e.accumulatedWeightedInfNorm[i].variable,l=u.mul(e.beta1).add(s.mul(1-e.beta1)),h=c.mul(e.beta2),f=s.abs(),p=h.maximum(f);u.assign(l),c.assign(p);var d=o.div(r).mul(l.div(p.add(e.epsilon))).add(a);a.assign(d)}})),e.iteration.assign(e.iteration.add(1)),e.accBeta1.assign(e.accBeta1.mul(e.beta1))})),this.incrementIterations()},e.prototype.dispose=function(){this.accBeta1.dispose(),this.iteration.dispose(),null!=this.accumulatedFirstMoment&&Ze(this.accumulatedFirstMoment.map((function(t){return t.variable}))),null!=this.accumulatedWeightedInfNorm&&Ze(this.accumulatedWeightedInfNorm.map((function(t){return t.variable})))},e.prototype.getWeights=function(){return u(this,void 0,void 0,(function(){return c(this,(function(t){throw new Error("getWeights() is not implemented for Adamax yet.")}))}))},e.prototype.setWeights=function(t){return u(this,void 0,void 0,(function(){return c(this,(function(t){throw new Error("setWeights() is not implemented for Adamax yet.")}))}))},e.prototype.getConfig=function(){return{learningRate:this.learningRate,beta1:this.beta1,beta2:this.beta2,epsilon:this.epsilon,decay:this.decay}},e.fromConfig=function(t,e){return new t(e.learningRate,e.beta1,e.beta2,e.epsilon,e.decay)},e.className="Adamax",e}(np);Xf(ap);var sp=function(t){function e(e){var n=t.call(this)||this;return n.learningRate=e,n.setLearningRate(e),n}return s(e,t),e.prototype.applyGradients=function(t){var e=this;(Array.isArray(t)?t.map((function(t){return t.name})):Object.keys(t)).forEach((function(n,r){var o=Array.isArray(t)?t[r].tensor:t[n];if(null!=o){var i=Wt.registeredVariables[n];Qe((function(){var t=e.c.mul(o).add(i);i.assign(t)}))}})),this.incrementIterations()},e.prototype.setLearningRate=function(t){this.learningRate=t,null!=this.c&&this.c.dispose(),this.c=tn(Nn(-t))},e.prototype.dispose=function(){this.c.dispose()},e.prototype.getWeights=function(){return u(this,void 0,void 0,(function(){return c(this,(function(t){switch(t.label){case 0:return[4,this.saveIterations()];case 1:return[2,[t.sent()]]}}))}))},e.prototype.setWeights=function(t){return u(this,void 0,void 0,(function(){return c(this,(function(e){switch(e.label){case 0:return[4,this.extractIterations(t)];case 1:if(0!==(t=e.sent()).length)throw new Error("SGD optimizer does not have settable weights.");return[2]}}))}))},e.prototype.getConfig=function(){return{learningRate:this.learningRate}},e.fromConfig=function(t,e){return new t(e.learningRate)},e.className="SGD",e}(np);Xf(sp);var up=function(t){function e(e,n,r){void 0===r&&(r=!1);var o=t.call(this,e)||this;return o.learningRate=e,o.momentum=n,o.useNesterov=r,o.accumulations=[],o.m=Nn(o.momentum),o}return s(e,t),e.prototype.applyGradients=function(t){var e=this;(Array.isArray(t)?t.map((function(t){return t.name})):Object.keys(t)).forEach((function(n,r){var o=Wt.registeredVariables[n];null==e.accumulations[r]&&(e.accumulations[r]={originalName:n+"/momentum",variable:Qe((function(){return Kn(o).variable(!1)}))});var i=e.accumulations[r].variable,a=Array.isArray(t)?t[r].tensor:t[n];null!=a&&Qe((function(){var t,n=e.m.mul(i).add(a);t=e.useNesterov?e.c.mul(a.add(n.mul(e.m))).add(o):e.c.mul(n).add(o),i.assign(n),o.assign(t)}))})),this.incrementIterations()},e.prototype.dispose=function(){this.m.dispose(),null!=this.accumulations&&Ze(this.accumulations.map((function(t){return t.variable})))},e.prototype.setMomentum=function(t){this.momentum=t},e.prototype.getWeights=function(){return u(this,void 0,void 0,(function(){return c(this,(function(t){switch(t.label){case 0:return[4,this.saveIterations()];case 1:return[2,[t.sent()].concat(this.accumulations.map((function(t){return{name:t.originalName,tensor:t.variable}})))]}}))}))},e.prototype.setWeights=function(t){return u(this,void 0,void 0,(function(){return c(this,(function(e){switch(e.label){case 0:return[4,this.extractIterations(t)];case 1:return t=e.sent(),this.accumulations=t.map((function(t){return{originalName:t.name,variable:t.tensor.variable(!1)}})),[2]}}))}))},e.prototype.getConfig=function(){return{learningRate:this.learningRate,momentum:this.momentum,useNesterov:this.useNesterov}},e.fromConfig=function(t,e){return new t(e.learningRate,e.momentum,e.useNesterov)},e.className="Momentum",e}(sp);Xf(up);var cp=function(t){function e(e,n,r,o,i){void 0===n&&(n=.9),void 0===r&&(r=0),void 0===o&&(o=null),void 0===i&&(i=!1);var a=t.call(this)||this;if(a.learningRate=e,a.decay=n,a.momentum=r,a.epsilon=o,a.accumulatedMeanSquares=[],a.accumulatedMoments=[],a.accumulatedMeanGrads=[],a.centered=i,null==o&&(a.epsilon=Wt.backend.epsilon()),null==e)throw new Error("learningRate for RMSPropOptimizer must be defined.");return a}return s(e,t),e.prototype.applyGradients=function(t){var e=this;(Array.isArray(t)?t.map((function(t){return t.name})):Object.keys(t)).forEach((function(n,r){var o=Wt.registeredVariables[n];null==e.accumulatedMeanSquares[r]&&(e.accumulatedMeanSquares[r]={originalName:n+"/rms",variable:Qe((function(){return Kn(o).variable(!1)}))}),null==e.accumulatedMoments[r]&&(e.accumulatedMoments[r]={originalName:n+"/momentum",variable:Qe((function(){return Kn(o).variable(!1)}))}),null==e.accumulatedMeanGrads[r]&&e.centered&&(e.accumulatedMeanGrads[r]={originalName:n+"/mg",variable:Qe((function(){return Kn(o).variable(!1)}))});var i=Array.isArray(t)?t[r].tensor:t[n];if(null!=i){var a=e.accumulatedMeanSquares[r].variable,s=e.accumulatedMoments[r].variable;Qe((function(){var t=a.mul(e.decay).add(i.square().mul(1-e.decay));if(e.centered){var n=e.accumulatedMeanGrads[r].variable,u=n.mul(e.decay).add(i.mul(1-e.decay)),c=s.mul(e.momentum).add(i.mul(e.learningRate).div(t.sub(u.square().add(e.epsilon)).sqrt()));a.assign(t),n.assign(u),s.assign(c);var l=o.sub(c);o.assign(l)}else{var h=a.mul(e.decay).add(i.square().mul(1-e.decay));c=s.mul(e.momentum).add(i.mul(e.learningRate).div(h.add(e.epsilon).sqrt())),a.assign(h),s.assign(c),l=o.sub(c),o.assign(l)}}))}})),this.incrementIterations()},e.prototype.dispose=function(){null!=this.accumulatedMeanSquares&&Ze(this.accumulatedMeanSquares.map((function(t){return t.variable}))),null!=this.accumulatedMeanGrads&&this.centered&&Ze(this.accumulatedMeanGrads.map((function(t){return t.variable}))),null!=this.accumulatedMoments&&Ze(this.accumulatedMoments.map((function(t){return t.variable})))},e.prototype.getWeights=function(){return u(this,void 0,void 0,(function(){var t;return c(this,(function(e){switch(e.label){case 0:return t=this.accumulatedMeanSquares.concat(this.accumulatedMoments),this.centered&&t.push.apply(t,this.accumulatedMeanGrads),[4,this.saveIterations()];case 1:return[2,[e.sent()].concat(t.map((function(t){return{name:t.originalName,tensor:t.variable}})))]}}))}))},e.prototype.setWeights=function(t){return u(this,void 0,void 0,(function(){var e;return c(this,(function(n){switch(n.label){case 0:return[4,this.extractIterations(t)];case 1:return t=n.sent(),e=this.centered?t.length/3:t.length/2,this.accumulatedMeanSquares=t.slice(0,e).map((function(t){return{originalName:t.name,variable:t.tensor.variable(!1)}})),this.accumulatedMoments=t.slice(e,2*e).map((function(t){return{originalName:t.name,variable:t.tensor.variable(!1)}})),this.centered&&(this.accumulatedMeanGrads=t.slice(2*e,3*e).map((function(t){return{originalName:t.name,variable:t.tensor.variable(!1)}}))),[2]}}))}))},e.prototype.getConfig=function(){return{learningRate:this.learningRate,decay:this.decay,momentum:this.momentum,epsilon:this.epsilon,centered:this.centered}},e.fromConfig=function(t,e){return new t(e.learningRate,e.decay,e.momentum,e.epsilon,e.centered)},e.className="RMSProp",e}(np);Xf(cp);var lp=function(){function t(){}return t.sgd=function(t){return new sp(t)},t.momentum=function(t,e,n){return void 0===n&&(n=!1),new up(t,e,n)},t.rmsprop=function(t,e,n,r,o){return void 0===e&&(e=.9),void 0===n&&(n=0),void 0===r&&(r=null),void 0===o&&(o=!1),new cp(t,e,n,r,o)},t.adam=function(t,e,n,r){return void 0===t&&(t=.001),void 0===e&&(e=.9),void 0===n&&(n=.999),void 0===r&&(r=null),new ip(t,e,n,r)},t.adadelta=function(t,e,n){return void 0===t&&(t=.001),void 0===e&&(e=.95),void 0===n&&(n=null),new rp(t,e,n)},t.adamax=function(t,e,n,r,o){return void 0===t&&(t=.002),void 0===e&&(e=.9),void 0===n&&(n=.999),void 0===r&&(r=null),void 0===o&&(o=0),new ap(t,e,n,r,o)},t.adagrad=function(t,e){return void 0===e&&(e=.1),new op(t,e)},t}(),hp={sgd:lp.sgd,momentum:lp.momentum,adadelta:lp.adadelta,adagrad:lp.adagrad,rmsprop:lp.rmsprop,adamax:lp.adamax,adam:lp.adam},fp="undefined"!=typeof requestAnimationFrame?requestAnimationFrame:"undefined"!=typeof setImmediate?setImmediate:function(t){return t()};function pp(){return new Promise((function(t){return fp((function(){return t()}))}))}function dp(t,e,n){if(void 0===n&&(n=!1),t.beginPath(),e.slice(1).forEach((function(n,r){var o=n.x,i=n.y,a=e[r];t.moveTo(a.x,a.y),t.lineTo(o,i)})),n){var r=e[e.length-1],o=e[0];if(!r||!o)return;t.moveTo(r.x,r.y),t.lineTo(o.x,o.y)}t.stroke()}Ct.prototype.squaredDifference=function(t){return Ks(this,t)},bt=Fh;var vp=function(t,e){return vp=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])},vp(t,e)};function mp(t,e){function n(){this.constructor=t}vp(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}var gp=function(){return gp=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var o in e=arguments[n])Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t},gp.apply(this,arguments)};function yp(t,e,n,r){return new(n||(n=Promise))((function(o,i){function a(t){try{u(r.next(t))}catch(t){i(t)}}function s(t){try{u(r.throw(t))}catch(t){i(t)}}function u(t){var e;t.done?o(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(a,s)}u((r=r.apply(t,e||[])).next())}))}function xp(t,e){var n,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,r=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!((o=(o=a.trys).length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=e.call(t,a)}catch(t){i=[6,t],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}}function bp(){for(var t=0,e=0,n=arguments.length;e<n;e++)t+=arguments[e].length;var r=Array(t),o=0;for(e=0;e<n;e++)for(var i=arguments[e],a=0,s=i.length;a<s;a++,o++)r[o]=i[a];return r}var wp=function(){function t(t,e){if(!Mp(t)||!Mp(e))throw new Error("Dimensions.constructor - expected width and height to be valid numbers, instead have "+JSON.stringify({width:t,height:e}));this._width=t,this._height=e}return Object.defineProperty(t.prototype,"width",{get:function(){return this._width},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"height",{get:function(){return this._height},enumerable:!0,configurable:!0}),t.prototype.reverse=function(){return new t(1/this.width,1/this.height)},t}();function Cp(t,e){return t instanceof Ct&&t.shape.length===e}function Ep(t){return Cp(t,1)}function _p(t){return Cp(t,2)}function Ip(t){return Cp(t,3)}function Rp(t){return Cp(t,4)}function Sp(t){return t%1!=0}function kp(t){return t%2==0}function Dp(t,e){void 0===e&&(e=2);var n=Math.pow(10,e);return Math.floor(t*n)/n}function Ap(t){return t&&t.width&&t.height}function Tp(t,e){var n=t.width,r=t.height,o=e/Math.max(r,n);return new wp(Math.round(n*o),Math.round(r*o))}function Fp(t){return t.reduce((function(t,e){return t.add(e)}),new Pp(0,0)).div(new Pp(t.length,t.length))}function Np(t,e,n){return Array(t).fill(0).map((function(t,r){return e+r*n}))}function Mp(t){return!!t&&t!==1/0&&t!==-1/0&&!isNaN(t)||0===t}function Op(t){return Mp(t)&&0<=t&&t<=1}var Pp=function(){function t(t,e){this._x=t,this._y=e}return Object.defineProperty(t.prototype,"x",{get:function(){return this._x},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"y",{get:function(){return this._y},enumerable:!0,configurable:!0}),t.prototype.add=function(e){return new t(this.x+e.x,this.y+e.y)},t.prototype.sub=function(e){return new t(this.x-e.x,this.y-e.y)},t.prototype.mul=function(e){return new t(this.x*e.x,this.y*e.y)},t.prototype.div=function(e){return new t(this.x/e.x,this.y/e.y)},t.prototype.abs=function(){return new t(Math.abs(this.x),Math.abs(this.y))},t.prototype.magnitude=function(){return Math.sqrt(Math.pow(this.x,2)+Math.pow(this.y,2))},t.prototype.floor=function(){return new t(Math.floor(this.x),Math.floor(this.y))},t}(),Bp=function(){function t(e,n){void 0===n&&(n=!0);var r=e||{},o=[r.left,r.top,r.right,r.bottom].every(Mp),i=[r.x,r.y,r.width,r.height].every(Mp);if(!i&&!o)throw new Error("Box.constructor - expected box to be IBoundingBox | IRect, instead have "+JSON.stringify(r));var a=i?[r.x,r.y,r.width,r.height]:[r.left,r.top,r.right-r.left,r.bottom-r.top],s=a[0],u=a[1],c=a[2],l=a[3];t.assertIsValidBox({x:s,y:u,width:c,height:l},"Box.constructor",n),this._x=s,this._y=u,this._width=c,this._height=l}return t.isRect=function(t){return!!t&&[t.x,t.y,t.width,t.height].every(Mp)},t.assertIsValidBox=function(e,n,r){if(void 0===r&&(r=!1),!t.isRect(e))throw new Error(n+" - invalid box: "+JSON.stringify(e)+", expected object with properties x, y, width, height");if(!r&&(e.width<0||e.height<0))throw new Error(n+" - width ("+e.width+") and height ("+e.height+") must be positive numbers")},Object.defineProperty(t.prototype,"x",{get:function(){return this._x},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"y",{get:function(){return this._y},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"width",{get:function(){return this._width},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"height",{get:function(){return this._height},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"left",{get:function(){return this.x},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"top",{get:function(){return this.y},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"right",{get:function(){return this.x+this.width},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"bottom",{get:function(){return this.y+this.height},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"area",{get:function(){return this.width*this.height},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"topLeft",{get:function(){return new Pp(this.left,this.top)},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"topRight",{get:function(){return new Pp(this.right,this.top)},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"bottomLeft",{get:function(){return new Pp(this.left,this.bottom)},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"bottomRight",{get:function(){return new Pp(this.right,this.bottom)},enumerable:!0,configurable:!0}),t.prototype.round=function(){var e=[this.x,this.y,this.width,this.height].map((function(t){return Math.round(t)}));return new t({x:e[0],y:e[1],width:e[2],height:e[3]})},t.prototype.floor=function(){var e=[this.x,this.y,this.width,this.height].map((function(t){return Math.floor(t)}));return new t({x:e[0],y:e[1],width:e[2],height:e[3]})},t.prototype.toSquare=function(){var e=this,n=e.x,r=e.y,o=e.width,i=e.height,a=Math.abs(o-i);return o<i&&(n-=a/2,o+=a),i<o&&(r-=a/2,i+=a),new t({x:n,y:r,width:o,height:i})},t.prototype.rescale=function(e){var n=Ap(e)?e.width:e,r=Ap(e)?e.height:e;return new t({x:this.x*n,y:this.y*r,width:this.width*n,height:this.height*r})},t.prototype.pad=function(e,n){var r=[this.x-e/2,this.y-n/2,this.width+e,this.height+n];return new t({x:r[0],y:r[1],width:r[2],height:r[3]})},t.prototype.clipAtImageBorders=function(e,n){var r=this,o=r.x,i=r.y,a=r.right,s=r.bottom,u=Math.max(o,0),c=Math.max(i,0),l=a-u,h=s-c;return new t({x:u,y:c,width:Math.min(l,e-u),height:Math.min(h,n-c)}).floor()},t.prototype.shift=function(e,n){var r=this.width,o=this.height;return new t({x:this.x+e,y:this.y+n,width:r,height:o})},t.prototype.padAtBorders=function(t,e){var n=this.width+1,r=this.height+1,o=n,i=r,a=this.left,s=this.top,u=this.right,c=this.bottom;return u>e&&(o=-u+e+n,u=e),c>t&&(i=-c+t+r,c=t),a<1&&(i=2-a,a=1),s<1&&(i=2-s,s=1),{dy:1,edy:i,dx:1,edx:o,y:s,ey:c,x:a,ex:u,w:n,h:r}},t.prototype.calibrate=function(e){return new t({left:this.left+e.left*this.width,top:this.top+e.top*this.height,right:this.right+e.right*this.width,bottom:this.bottom+e.bottom*this.height}).toSquare().round()},t}(),Lp=function(t){function e(e,n,r,o,i){return void 0===i&&(i=!1),t.call(this,{left:e,top:n,right:r,bottom:o},i)||this}return mp(e,t),e}(Bp),Wp=function(){function t(t,e,n,r,o){this._imageDims=new wp(o.width,o.height),this._score=t,this._classScore=e,this._className=n,this._box=new Bp(r).rescale(this._imageDims)}return Object.defineProperty(t.prototype,"score",{get:function(){return this._score},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"classScore",{get:function(){return this._classScore},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"className",{get:function(){return this._className},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"box",{get:function(){return this._box},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"imageDims",{get:function(){return this._imageDims},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"imageWidth",{get:function(){return this.imageDims.width},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"imageHeight",{get:function(){return this.imageDims.height},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"relativeBox",{get:function(){return new Bp(this._box).rescale(this.imageDims.reverse())},enumerable:!0,configurable:!0}),t.prototype.forSize=function(e,n){return new t(this.score,this.classScore,this.className,this.relativeBox,{width:e,height:n})},t}(),zp=function(t){function e(e,n,r){return t.call(this,e,e,"",n,r)||this}return mp(e,t),e.prototype.forSize=function(n,r){var o=t.prototype.forSize.call(this,n,r);return new e(o.score,o.relativeBox,o.imageDims)},e}(Wp);function Up(t,e,n){void 0===n&&(n=!0);var r=Math.max(0,Math.min(t.right,e.right)-Math.max(t.left,e.left))*Math.max(0,Math.min(t.bottom,e.bottom)-Math.max(t.top,e.top));return n?r/(t.area+e.area-r):r/Math.min(t.area,e.area)}function Vp(t){var e=t.map((function(t){return t.x})),n=t.map((function(t){return t.y})),r=e.reduce((function(t,e){return e<t?e:t}),1/0),o=n.reduce((function(t,e){return e<t?e:t}),1/0),i=e.reduce((function(t,e){return t<e?e:t}),0),a=n.reduce((function(t,e){return t<e?e:t}),0);return new Lp(r,o,i,a)}function Gp(t,e,n,r){void 0===r&&(r=!0);for(var o=e.map((function(t,e){return{score:t,boxIndex:e}})).sort((function(t,e){return t.score-e.score})).map((function(t){return t.boxIndex})),i=[],a=function(){var e=o.pop();i.push(e);for(var a=o,s=[],u=0;u<a.length;u++){var c=a[u],l=t[e],h=t[c];s.push(Up(l,h,r))}o=o.filter((function(t,e){return s[e]<=n}))};o.length>0;)a();return i}function Hp(t,e){return Qe((function(){var n=e[0],r=e[1],o=e[2],i=Gn(bp(t.shape.slice(0,3),[1]),n),a=Gn(bp(t.shape.slice(0,3),[1]),r),s=Gn(bp(t.shape.slice(0,3),[1]),o),u=Xn([i,a,s],3);return pc(t,u)}))}function jp(t,e){return void 0===e&&(e=!1),Qe((function(){var n=t.shape.slice(1),r=n[0],o=n[1];if(r===o)return t;var i=Math.abs(r-o),a=Math.round(i*(e?.5:1)),s=r>o?2:1,u=function(e){var n=t.shape.slice();return n[s]=e,Gn(n,0)},c=u(a),l=i-c.shape[s],h=[e&&l?u(l):null,t,c].filter((function(t){return!!t})).map((function(t){return t.toFloat()}));return Xn(h,s)}))}function qp(t){for(var e=t.slice(),n=e.length-1;n>0;n--){var r=Math.floor(Math.random()*(n+1)),o=e[n];e[n]=e[r],e[r]=o}return e}function Kp(t){return 1/(1+Math.exp(-t))}function Xp(t){return Math.log(t/(1-t))}var Yp,$p=function(t){function e(e,n,r,o,i){return void 0===i&&(i=!1),t.call(this,{x:e,y:n,width:r,height:o},i)||this}return mp(e,t),e}(Bp),Jp=function(){function t(t,e,n){void 0===n&&(n=new Pp(0,0));var r=e.width,o=e.height;this._imgDims=new wp(r,o),this._shift=n,this._positions=t.map((function(t){return t.mul(new Pp(r,o)).add(n)}))}return Object.defineProperty(t.prototype,"shift",{get:function(){return new Pp(this._shift.x,this._shift.y)},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"imageWidth",{get:function(){return this._imgDims.width},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"imageHeight",{get:function(){return this._imgDims.height},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"positions",{get:function(){return this._positions},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"relativePositions",{get:function(){var t=this;return this._positions.map((function(e){return e.sub(t._shift).div(new Pp(t.imageWidth,t.imageHeight))}))},enumerable:!0,configurable:!0}),t.prototype.forSize=function(t,e){return new this.constructor(this.relativePositions,{width:t,height:e})},t.prototype.shiftBy=function(t,e){return new this.constructor(this.relativePositions,this._imgDims,new Pp(t,e))},t.prototype.shiftByPoint=function(t){return this.shiftBy(t.x,t.y)},t.prototype.align=function(t,e){if(void 0===e&&(e={}),t){var n=t instanceof zp?t.box.floor():new Bp(t);return this.shiftBy(n.x,n.y).align(null,e)}var r=Object.assign({},{useDlibAlignment:!1,minBoxPadding:.2},e),o=r.useDlibAlignment,i=r.minBoxPadding;return o?this.alignDlib():this.alignMinBbox(i)},t.prototype.alignDlib=function(){var t=this.getRefPointsForAlignment(),e=t[0],n=t[1],r=t[2],o=function(t){return r.sub(t).magnitude()},i=(o(e)+o(n))/2,a=Math.floor(i/.45),s=Fp(t),u=Math.floor(Math.max(0,s.x-.5*a)),c=Math.floor(Math.max(0,s.y-.43*a));return new $p(u,c,Math.min(a,this.imageWidth+u),Math.min(a,this.imageHeight+c))},t.prototype.alignMinBbox=function(t){var e=Vp(this.positions);return e.pad(e.width*t,e.height*t)},t.prototype.getRefPointsForAlignment=function(){throw new Error("getRefPointsForAlignment not implemented by base class")},t}(),Qp=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return mp(e,t),e.prototype.getRefPointsForAlignment=function(){var t=this.positions;return[t[0],t[1],Fp([t[3],t[4]])]},e}(Jp),Zp=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return mp(e,t),e.prototype.getJawOutline=function(){return this.positions.slice(0,17)},e.prototype.getLeftEyeBrow=function(){return this.positions.slice(17,22)},e.prototype.getRightEyeBrow=function(){return this.positions.slice(22,27)},e.prototype.getNose=function(){return this.positions.slice(27,36)},e.prototype.getLeftEye=function(){return this.positions.slice(36,42)},e.prototype.getRightEye=function(){return this.positions.slice(42,48)},e.prototype.getMouth=function(){return this.positions.slice(48,68)},e.prototype.getRefPointsForAlignment=function(){return[this.getLeftEye(),this.getRightEye(),this.getMouth()].map(Fp)},e}(Jp),td=function(){function t(t,e){this._label=t,this._distance=e}return Object.defineProperty(t.prototype,"label",{get:function(){return this._label},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"distance",{get:function(){return this._distance},enumerable:!0,configurable:!0}),t.prototype.toString=function(t){return void 0===t&&(t=!0),this.label+(t?" ("+Dp(this.distance)+")":"")},t}(),ed=function(t){function e(e,n){var r=t.call(this,e)||this;return r._label=n,r}return mp(e,t),e.assertIsValidLabeledBox=function(t,e){if(Bp.assertIsValidBox(t,e),!Mp(t.label))throw new Error(e+" - expected property label ("+t.label+") to be a number")},Object.defineProperty(e.prototype,"label",{get:function(){return this._label},enumerable:!0,configurable:!0}),e}(Bp),nd=function(){function t(t,e){if("string"!=typeof t)throw new Error("LabeledFaceDescriptors - constructor expected label to be a string");if(!Array.isArray(e)||e.some((function(t){return!(t instanceof Float32Array)})))throw new Error("LabeledFaceDescriptors - constructor expected descriptors to be an array of Float32Array");this._label=t,this._descriptors=e}return Object.defineProperty(t.prototype,"label",{get:function(){return this._label},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"descriptors",{get:function(){return this._descriptors},enumerable:!0,configurable:!0}),t.prototype.toJSON=function(){return{label:this.label,descriptors:this.descriptors.map((function(t){return Array.from(t)}))}},t.fromJSON=function(e){var n=e.descriptors.map((function(t){return new Float32Array(t)}));return new t(e.label,n)},t}(),rd=function(t){function e(e,n,r,o){var i=t.call(this,e,n)||this;return i._score=r,i._classScore=o,i}return mp(e,t),e.assertIsValidPredictedBox=function(t,e){if(ed.assertIsValidLabeledBox(t,e),!Op(t.score)||!Op(t.classScore))throw new Error(e+" - expected properties score ("+t.score+") and ("+t.classScore+") to be a number between [0, 1]")},Object.defineProperty(e.prototype,"score",{get:function(){return this._score},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"classScore",{get:function(){return this._classScore},enumerable:!0,configurable:!0}),e}(ed);function od(t){return t.detection instanceof zp}function id(t,e){var n={detection:e};return Object.assign({},t,n)}function ad(){var t=window.fetch||function(){throw new Error("fetch - missing fetch implementation for browser environment")};return{Canvas:HTMLCanvasElement,CanvasRenderingContext2D,Image:HTMLImageElement,ImageData,Video:HTMLVideoElement,createCanvasElement:function(){return document.createElement("canvas")},createImageElement:function(){return document.createElement("img")},fetch:t,readFile:function(){throw new Error("readFile - filesystem not available for browser environment")}}}function sd(t){var e="";if(!t)try{t=n(619)}catch(t){e=t.toString()}return{readFile:t?function(e){return new Promise((function(n,r){t.readFile(e,(function(t,e){return t?r(t):n(e)}))}))}:function(){throw new Error("readFile - failed to require fs in nodejs environment with error: "+e)}}}function ud(){var t=n.g.Canvas||n.g.HTMLCanvasElement,e=n.g.Image||n.g.HTMLImageElement,r=n.g.fetch||function(){throw new Error("fetch - missing fetch implementation for nodejs environment")},o=sd();return gp({Canvas:t||function(){},CanvasRenderingContext2D:n.g.CanvasRenderingContext2D||function(){},Image:e||function(){},ImageData:n.g.ImageData||function(){},Video:n.g.HTMLVideoElement||function(){},createCanvasElement:function(){if(t)return new t;throw new Error("createCanvasElement - missing Canvas implementation for nodejs environment")},createImageElement:function(){if(e)return new e;throw new Error("createImageElement - missing Image implementation for nodejs environment")},fetch:r},o)}function cd(){return"object"==typeof window&&"undefined"!=typeof document&&"undefined"!=typeof HTMLImageElement&&"undefined"!=typeof HTMLCanvasElement&&"undefined"!=typeof HTMLVideoElement&&"undefined"!=typeof ImageData&&"undefined"!=typeof CanvasRenderingContext2D}function ld(){return"object"==typeof n.g&&"undefined"!=typeof process&&!!process.version}function hd(t){Yp=t}function fd(){cd()&&hd(ad()),ld()&&hd(ud())}var pd,dd={getEnv:function(){if(!Yp)throw new Error("getEnv - environment is not defined, check isNodejs() and isBrowser()");return Yp},setEnv:hd,initialize:fd,createBrowserEnv:ad,createFileSystem:sd,createNodejsEnv:ud,monkeyPatch:function(t){if(Yp||fd(),!Yp)throw new Error("monkeyPatch - environment is not defined, check isNodejs() and isBrowser()");var e=t.Canvas,n=void 0===e?Yp.Canvas:e,r=t.Image,o=void 0===r?Yp.Image:r;Yp.Canvas=n,Yp.Image=o,Yp.createCanvasElement=t.createCanvasElement||function(){return new n},Yp.createImageElement=t.createImageElement||function(){return new o},Yp.ImageData=t.ImageData||Yp.ImageData,Yp.Video=t.Video||Yp.Video,Yp.fetch=t.fetch||Yp.fetch,Yp.readFile=t.readFile||Yp.readFile},isBrowser:cd,isNodejs:ld};function vd(t){return dd.isNodejs()||"string"!=typeof t?t:document.getElementById(t)}function md(t){var e=dd.getEnv(),n=e.Canvas;if(t instanceof e.CanvasRenderingContext2D)return t;var r=vd(t);if(!(r instanceof n))throw new Error("resolveContext2d - expected canvas to be of instance of Canvas");var o=r.getContext("2d");if(!o)throw new Error("resolveContext2d - canvas 2d context is null");return o}fd(),function(t){t.TOP_LEFT="TOP_LEFT",t.TOP_RIGHT="TOP_RIGHT",t.BOTTOM_LEFT="BOTTOM_LEFT",t.BOTTOM_RIGHT="BOTTOM_RIGHT"}(pd||(pd={}));var gd=function(t){void 0===t&&(t={});var e=t.anchorPosition,n=t.backgroundColor,r=t.fontColor,o=t.fontSize,i=t.fontStyle,a=t.padding;this.anchorPosition=e||pd.TOP_LEFT,this.backgroundColor=n||"rgba(0, 0, 0, 0.5)",this.fontColor=r||"rgba(255, 255, 255, 1)",this.fontSize=o||14,this.fontStyle=i||"Georgia",this.padding=a||4},yd=function(){function t(e,n,r){void 0===r&&(r={}),this.text="string"==typeof e?[e]:e instanceof t?e.text:e,this.anchor=n,this.options=new gd(r)}return t.prototype.measureWidth=function(t){var e=this.options.padding;return this.text.map((function(e){return t.measureText(e).width})).reduce((function(t,e){return t<e?e:t}),0)+2*e},t.prototype.measureHeight=function(){var t=this.options,e=t.fontSize,n=t.padding;return this.text.length*e+2*n},t.prototype.getUpperLeft=function(t,e){var n=this.options.anchorPosition,r=n===pd.BOTTOM_RIGHT||n===pd.TOP_RIGHT,o=n===pd.BOTTOM_LEFT||n===pd.BOTTOM_RIGHT,i=this.measureWidth(t),a=this.measureHeight(),s=r?this.anchor.x-i:this.anchor.x,u=o?this.anchor.y-a:this.anchor.y;if(e){var c=e.width,l=e.height;return{x:Math.max(Math.min(s,c-i),0),y:Math.max(Math.min(u,l-a),0)}}return{x:s,y:u}},t.prototype.draw=function(t){var e=vd(t),n=md(e),r=this.options,o=r.backgroundColor,i=r.fontColor,a=r.fontSize,s=r.fontStyle,u=r.padding;n.font=a+"px "+s;var c=this.measureWidth(n),l=this.measureHeight();n.fillStyle=o;var h=this.getUpperLeft(n,e);n.fillRect(h.x,h.y,c,l),n.fillStyle=i,this.text.forEach((function(t,e){var r=u+h.x,o=u+h.y+(e+1)*a;n.fillText(t,r,o)}))},t}(),xd=function(t){void 0===t&&(t={});var e=t.boxColor,n=t.lineWidth,r=t.label,o=t.drawLabelOptions;this.boxColor=e||"rgba(0, 0, 255, 1)",this.lineWidth=n||2,this.label=r;var i={anchorPosition:pd.BOTTOM_LEFT,backgroundColor:this.boxColor};this.drawLabelOptions=new gd(Object.assign({},i,o))},bd=function(){function t(t,e){void 0===e&&(e={}),this.box=new Bp(t),this.options=new xd(e)}return t.prototype.draw=function(t){var e=md(t),n=this.options,r=n.boxColor,o=n.lineWidth,i=this.box,a=i.x,s=i.y,u=i.width,c=i.height;e.strokeStyle=r,e.lineWidth=o,e.strokeRect(a,s,u,c);var l=this.options.label;l&&new yd([l],{x:a-o/2,y:s},this.options.drawLabelOptions).draw(t)},t}();function wd(t,e){(Array.isArray(e)?e:[e]).forEach((function(e){var n=e instanceof zp?e.score:od(e)?e.detection.score:void 0,r=e instanceof zp?e.box:od(e)?e.detection.box:new Bp(e),o=n?""+Dp(n):void 0;new bd(r,{label:o}).draw(t)}))}function Cd(t){var e=dd.getEnv(),n=e.Image,r=e.Video;return t instanceof n&&t.complete||t instanceof r&&t.readyState>=3}function Ed(t){return new Promise((function(e,n){if(t instanceof dd.getEnv().Canvas||Cd(t))return e();function r(t){t.currentTarget&&(t.currentTarget.removeEventListener("load",r),t.currentTarget.removeEventListener("error",o),e(t))}function o(t){t.currentTarget&&(t.currentTarget.removeEventListener("load",r),t.currentTarget.removeEventListener("error",o),n(t))}t.addEventListener("load",r),t.addEventListener("error",o)}))}function _d(t){return new Promise((function(e,n){if(!(t instanceof Blob))return n("bufferToImage - expected buf to be of type: Blob");var r=new FileReader;r.onload=function(){if("string"!=typeof r.result)return n("bufferToImage - expected reader.result to be a string, in onload");var t=dd.getEnv().createImageElement();t.onload=function(){return e(t)},t.onerror=n,t.src=r.result},r.onerror=n,r.readAsDataURL(t)}))}function Id(t){var e=dd.getEnv(),n=e.Image,r=e.Video;return t instanceof n?new wp(t.naturalWidth,t.naturalHeight):t instanceof r?new wp(t.videoWidth,t.videoHeight):new wp(t.width,t.height)}function Rd(t){var e=t.width,n=t.height,r=(0,dd.getEnv().createCanvasElement)();return r.width=e,r.height=n,r}function Sd(t,e){var n=dd.getEnv().ImageData;if(!(t instanceof n||Cd(t)))throw new Error("createCanvasFromMedia - media has not finished loading yet");var r=e||Id(t),o=r.width,i=r.height,a=Rd({width:o,height:i});return t instanceof n?md(a).putImageData(t,0,0):md(a).drawImage(t,0,0,o,i),a}function kd(t,e){return yp(this,void 0,void 0,(function(){var n,r,o,i,a,s;return xp(this,(function(u){switch(u.label){case 0:return n=e||dd.getEnv().createCanvasElement(),r=t.shape.slice(Rp(t)?1:0),o=r[0],i=r[1],a=r[2],s=Qe((function(){return t.as3D(o,i,a).toInt()})),[4,jf.toPixels(s,n)];case 1:return u.sent(),s.dispose(),[2,n]}}))}))}function Dd(t){var e=dd.getEnv(),n=e.Image,r=e.Canvas,o=e.Video;return t instanceof n||t instanceof r||t instanceof o}function Ad(t,e,n){void 0===n&&(n=!1);var r=dd.getEnv(),o=r.Image,i=r.Canvas;if(!(t instanceof o||t instanceof i))throw new Error("imageToSquare - expected arg0 to be HTMLImageElement | HTMLCanvasElement");var a=Id(t),s=e/Math.max(a.height,a.width),u=s*a.width,c=s*a.height,l=Rd({width:e,height:e}),h=t instanceof i?t:Sd(t),f=Math.abs(u-c)/2,p=n&&u<c?f:0,d=n&&c<u?f:0;return md(l).drawImage(h,p,d,u,c),l}var Td=function(){function t(t,e){var n=this;if(void 0===e&&(e=!1),this._imageTensors=[],this._canvases=[],this._treatAsBatchInput=!1,this._inputDimensions=[],!Array.isArray(t))throw new Error("NetInput.constructor - expected inputs to be an Array of TResolvedNetInput or to be instanceof tf.Tensor4D, instead have "+t);this._treatAsBatchInput=e,this._batchSize=t.length,t.forEach((function(t,e){if(Ip(t))return n._imageTensors[e]=t,void(n._inputDimensions[e]=t.shape);if(Rp(t)){var r=t.shape[0];if(1!==r)throw new Error("NetInput - tf.Tensor4D with batchSize "+r+" passed, but not supported in input array");return n._imageTensors[e]=t,void(n._inputDimensions[e]=t.shape.slice(1))}var o=t instanceof dd.getEnv().Canvas?t:Sd(t);n._canvases[e]=o,n._inputDimensions[e]=[o.height,o.width,3]}))}return Object.defineProperty(t.prototype,"imageTensors",{get:function(){return this._imageTensors},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"canvases",{get:function(){return this._canvases},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"isBatchInput",{get:function(){return this.batchSize>1||this._treatAsBatchInput},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"batchSize",{get:function(){return this._batchSize},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"inputDimensions",{get:function(){return this._inputDimensions},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"inputSize",{get:function(){return this._inputSize},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"reshapedInputDimensions",{get:function(){var t=this;return Np(this.batchSize,0,1).map((function(e,n){return t.getReshapedInputDimensions(n)}))},enumerable:!0,configurable:!0}),t.prototype.getInput=function(t){return this.canvases[t]||this.imageTensors[t]},t.prototype.getInputDimensions=function(t){return this._inputDimensions[t]},t.prototype.getInputHeight=function(t){return this._inputDimensions[t][0]},t.prototype.getInputWidth=function(t){return this._inputDimensions[t][1]},t.prototype.getReshapedInputDimensions=function(t){if("number"!=typeof this.inputSize)throw new Error("getReshapedInputDimensions - inputSize not set, toBatchTensor has not been called yet");return Tp({width:this.getInputWidth(t),height:this.getInputHeight(t)},this.inputSize)},t.prototype.toBatchTensor=function(t,e){var n=this;return void 0===e&&(e=!0),this._inputSize=t,Qe((function(){var r=Np(n.batchSize,0,1).map((function(r){var o=n.getInput(r);if(o instanceof Ct){var i=Rp(o)?o:o.expandDims();return(i=jp(i,e)).shape[1]===t&&i.shape[2]===t||(i=Eh.resizeBilinear(i,[t,t])),i.as3D(t,t,3)}if(o instanceof dd.getEnv().Canvas)return jf.fromPixels(Ad(o,t,e));throw new Error("toBatchTensor - at batchIdx "+r+", expected input to be instanceof tf.Tensor or instanceof HTMLCanvasElement, instead have "+o)})),o=Pr(r.map((function(t){return t.toFloat()}))).as4D(n.batchSize,t,t,3);return o}))},t}();function Fd(t){return yp(this,void 0,void 0,(function(){var e,n,r;return xp(this,(function(o){switch(o.label){case 0:if(t instanceof Td)return[2,t];if(!(e=Array.isArray(t)?t:[t]).length)throw new Error("toNetInput - empty array passed as input");return n=function(e){return Array.isArray(t)?" at input index "+e+":":""},(r=e.map(vd)).forEach((function(t,r){if(!Dd(t)&&!Ip(t)&&!Rp(t)){if("string"==typeof e[r])throw new Error("toNetInput -"+n(r)+" string passed, but could not resolve HTMLElement for element id "+e[r]);throw new Error("toNetInput -"+n(r)+" expected media to be of type HTMLImageElement | HTMLVideoElement | HTMLCanvasElement | tf.Tensor3D, or to be an element id")}if(Rp(t)){var o=t.shape[0];if(1!==o)throw new Error("toNetInput -"+n(r)+" tf.Tensor4D with batchSize "+o+" passed, but not supported in input array")}})),[4,Promise.all(r.map((function(t){return Dd(t)&&Ed(t)})))];case 1:return o.sent(),[2,new Td(r,Array.isArray(t))]}}))}))}function Nd(t,e){return yp(this,void 0,void 0,(function(){var n,r,o,i,a,s;return xp(this,(function(u){switch(u.label){case 0:return n=dd.getEnv().Canvas,r=t,t instanceof n?[3,5]:[4,Fd(t)];case 1:if((o=u.sent()).batchSize>1)throw new Error("extractFaces - batchSize > 1 not supported");return(i=o.getInput(0))instanceof n?(a=i,[3,4]):[3,2];case 2:return[4,kd(i)];case 3:a=u.sent(),u.label=4;case 4:r=a,u.label=5;case 5:return s=md(r),[2,e.map((function(t){return t instanceof zp?t.forSize(r.width,r.height).box.floor():t})).map((function(t){return t.clipAtImageBorders(r.width,r.height)})).map((function(t){var e=t.x,n=t.y,r=t.width,o=t.height,i=Rd({width:r,height:o});return md(i).putImageData(s.getImageData(e,n,r,o),0,0),i}))]}}))}))}function Md(t,e){return yp(this,void 0,void 0,(function(){return xp(this,(function(n){if(!Ip(t)&&!Rp(t))throw new Error("extractFaceTensors - expected image tensor to be 3D or 4D");if(Rp(t)&&t.shape[0]>1)throw new Error("extractFaceTensors - batchSize > 1 not supported");return[2,Qe((function(){var n=t.shape.slice(Rp(t)?1:0),r=n[0],o=n[1],i=n[2],a=e.map((function(t){return t instanceof zp?t.forSize(o,r).box:t})).map((function(t){return t.clipAtImageBorders(o,r)})).map((function(e){var n=e.x,a=e.y,s=e.width,u=e.height;return ll(t.as3D(r,o,i),[a,n,0],[u,s,i])}));return a}))]}))}))}function Od(t,e){return yp(this,void 0,void 0,(function(){var n;return xp(this,(function(r){switch(r.label){case 0:return[4,(0,dd.getEnv().fetch)(t,e)];case 1:if(!((n=r.sent()).status<400))throw new Error("failed to fetch: ("+n.status+") "+n.statusText+", from url: "+n.url);return[2,n]}}))}))}function Pd(t){return yp(this,void 0,void 0,(function(){var e,n;return xp(this,(function(r){switch(r.label){case 0:return[4,Od(t)];case 1:return[4,(e=r.sent()).blob()];case 2:if(!(n=r.sent()).type.startsWith("image/"))throw new Error("fetchImage - expected blob type to be of type image/*, instead have: "+n.type+", for url: "+e.url);return[2,_d(n)]}}))}))}function Bd(t){return yp(this,void 0,void 0,(function(){return xp(this,(function(e){switch(e.label){case 0:return[4,Od(t)];case 1:return[2,e.sent().json()]}}))}))}function Ld(t){return yp(this,void 0,void 0,(function(){var e;return xp(this,(function(n){switch(n.label){case 0:return e=Float32Array.bind,[4,Od(t)];case 1:return[4,n.sent().arrayBuffer()];case 2:return[2,new(e.apply(Float32Array,[void 0,n.sent()]))]}}))}))}function Wd(t,e){var n=e+"-weights_manifest.json";if(!t)return{modelBaseUri:"",manifestUri:n};if("/"===t)return{modelBaseUri:"/",manifestUri:"/"+n};var r=t.startsWith("http://")?"http://":t.startsWith("https://")?"https://":"",o=(t=t.replace(r,"")).split("/").filter((function(t){return t})),i=t.endsWith(".json")?o[o.length-1]:n,a=r+(t.endsWith(".json")?o.slice(0,o.length-1):o).join("/");return{modelBaseUri:a=t.startsWith("/")?"/"+a:a,manifestUri:"/"===a?"/"+i:a+"/"+i}}function zd(t,e){return yp(this,void 0,void 0,(function(){var n,r,o,i;return xp(this,(function(a){switch(a.label){case 0:return n=Wd(t,e),r=n.manifestUri,o=n.modelBaseUri,[4,Bd(r)];case 1:return i=a.sent(),[2,Uf.loadWeights(i,o)]}}))}))}function Ud(t,e,n){void 0===n&&(n=!1);var r=n?Id(e):e,o=r.width,i=r.height;return t.width=o,t.height=i,{width:o,height:i}}var Vd=function(){function t(t){this._name=t,this._params=void 0,this._paramMappings=[]}return Object.defineProperty(t.prototype,"params",{get:function(){return this._params},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"paramMappings",{get:function(){return this._paramMappings},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"isLoaded",{get:function(){return!!this.params},enumerable:!0,configurable:!0}),t.prototype.getParamFromPath=function(t){var e=this.traversePropertyPath(t);return e.obj[e.objProp]},t.prototype.reassignParamFromPath=function(t,e){var n=this.traversePropertyPath(t),r=n.obj,o=n.objProp;r[o].dispose(),r[o]=e},t.prototype.getParamList=function(){var t=this;return this._paramMappings.map((function(e){var n=e.paramPath;return{path:n,tensor:t.getParamFromPath(n)}}))},t.prototype.getTrainableParams=function(){return this.getParamList().filter((function(t){return t.tensor instanceof kt}))},t.prototype.getFrozenParams=function(){return this.getParamList().filter((function(t){return!(t.tensor instanceof kt)}))},t.prototype.variable=function(){var t=this;this.getFrozenParams().forEach((function(e){var n=e.path,r=e.tensor;t.reassignParamFromPath(n,r.variable())}))},t.prototype.freeze=function(){var t=this;this.getTrainableParams().forEach((function(e){var n=e.path,r=e.tensor,o=Tn(r.dataSync());r.dispose(),t.reassignParamFromPath(n,o)}))},t.prototype.dispose=function(t){void 0===t&&(t=!0),this.getParamList().forEach((function(e){if(t&&e.tensor.isDisposed)throw new Error("param tensor has already been disposed for path "+e.path);e.tensor.dispose()})),this._params=void 0},t.prototype.serializeParams=function(){return new Float32Array(this.getParamList().map((function(t){var e=t.tensor;return Array.from(e.dataSync())})).reduce((function(t,e){return t.concat(e)})))},t.prototype.load=function(t){return yp(this,void 0,void 0,(function(){return xp(this,(function(e){switch(e.label){case 0:return t instanceof Float32Array?(this.extractWeights(t),[2]):[4,this.loadFromUri(t)];case 1:return e.sent(),[2]}}))}))},t.prototype.loadFromUri=function(t){return yp(this,void 0,void 0,(function(){var e;return xp(this,(function(n){switch(n.label){case 0:if(t&&"string"!=typeof t)throw new Error(this._name+".loadFromUri - expected model uri");return[4,zd(t,this.getDefaultModelName())];case 1:return e=n.sent(),this.loadFromWeightMap(e),[2]}}))}))},t.prototype.loadFromDisk=function(t){return yp(this,void 0,void 0,(function(){var e,n,r,o,i,a,s,u,c,l;return xp(this,(function(h){switch(h.label){case 0:if(t&&"string"!=typeof t)throw new Error(this._name+".loadFromDisk - expected model file path");return e=dd.getEnv().readFile,n=Wd(t,this.getDefaultModelName()),r=n.manifestUri,o=n.modelBaseUri,i=function(t){return Promise.all(t.map((function(t){return e(t).then((function(t){return t.buffer}))})))},a=Uf.weightsLoaderFactory(i),c=(u=JSON).parse,[4,e(r)];case 1:return s=c.apply(u,[h.sent().toString()]),[4,a(s,o)];case 2:return l=h.sent(),this.loadFromWeightMap(l),[2]}}))}))},t.prototype.loadFromWeightMap=function(t){var e=this.extractParamsFromWeigthMap(t),n=e.paramMappings,r=e.params;this._paramMappings=n,this._params=r},t.prototype.extractWeights=function(t){var e=this.extractParams(t),n=e.paramMappings,r=e.params;this._paramMappings=n,this._params=r},t.prototype.traversePropertyPath=function(t){if(!this.params)throw new Error("traversePropertyPath - model has no loaded params");var e=t.split("/").reduce((function(e,n){if(!e.nextObj.hasOwnProperty(n))throw new Error("traversePropertyPath - object does not have property "+n+", for path "+t);return{obj:e.nextObj,objProp:n,nextObj:e.nextObj[n]}}),{nextObj:this.params}),n=e.obj,r=e.objProp;if(!(n&&r&&n[r]instanceof Ct))throw new Error("traversePropertyPath - parameter is not a tensor, for path "+t);return{obj:n,objProp:r}},t}();function Gd(t,e,n){return Qe((function(){var r=Gc(t,e.depthwise_filter,e.pointwise_filter,n,"same");return Xu(r,e.bias)}))}function Hd(t,e,n){return void 0===n&&(n=!1),Qe((function(){var r=Sl(n?Xu(Pc(t,e.conv0.filters,[2,2],"same"),e.conv0.bias):Gd(t,e.conv0,[2,2])),o=Gd(r,e.conv1,[1,1]),i=Gd(Sl(Xu(r,o)),e.conv2,[1,1]);return Sl(Xu(r,Xu(o,i)))}))}function jd(t,e,n,r){return void 0===n&&(n=!1),void 0===r&&(r=!0),Qe((function(){var o=Sl(n?Xu(Pc(t,e.conv0.filters,r?[2,2]:[1,1],"same"),e.conv0.bias):Gd(t,e.conv0,r?[2,2]:[1,1])),i=Gd(o,e.conv1,[1,1]),a=Gd(Sl(Xu(o,i)),e.conv2,[1,1]),s=Gd(Sl(Xu(o,Xu(i,a))),e.conv3,[1,1]);return Sl(Xu(o,Xu(i,Xu(a,s))))}))}function qd(t,e,n,r){return void 0===n&&(n="same"),void 0===r&&(r=!1),Qe((function(){var o=Xu(Pc(t,e.filters,[1,1],n),e.bias);return r?Sl(o):o}))}function Kd(t,e){Object.keys(t).forEach((function(n){e.some((function(t){return t.originalPath===n}))||t[n].dispose()}))}function Xd(t,e){return function(n,r,o,i){var a=Bn(t(n*r*o*o),[o,o,n,r]),s=Mn(t(r));return e.push({paramPath:i+"/filters"},{paramPath:i+"/bias"}),{filters:a,bias:s}}}function Yd(t,e){return function(n,r,o){var i=On(t(n*r),[n,r]),a=Mn(t(r));return e.push({paramPath:o+"/weights"},{paramPath:o+"/bias"}),{weights:i,bias:a}}}var $d=function(t,e,n){this.depthwise_filter=t,this.pointwise_filter=e,this.bias=n};function Jd(t,e){return function(n,r,o){var i=Bn(t(9*n),[3,3,n,1]),a=Bn(t(n*r),[1,1,n,r]),s=Mn(t(r));return e.push({paramPath:o+"/depthwise_filter"},{paramPath:o+"/pointwise_filter"},{paramPath:o+"/bias"}),new $d(i,a,s)}}function Qd(t){return function(e){var n=t(e+"/depthwise_filter",4),r=t(e+"/pointwise_filter",4),o=t(e+"/bias",1);return new $d(n,r,o)}}function Zd(t,e){return function(n,r,o){var i=t[n];if(!Cp(i,r))throw new Error("expected weightMap["+n+"] to be a Tensor"+r+"D, instead have "+i);return e.push({originalPath:n,paramPath:o||n}),i}}function tv(t){var e=t;return{extractWeights:function(t){var n=e.slice(0,t);return e=e.slice(t),n},getRemainingWeights:function(){return e}}}function ev(t,e){var n=Xd(t,e),r=Jd(t,e);function o(t,e,o,i){return void 0===i&&(i=!1),{conv0:i?n(t,e,3,o+"/conv0"):r(t,e,o+"/conv0"),conv1:r(e,e,o+"/conv1"),conv2:r(e,e,o+"/conv2")}}return{extractDenseBlock3Params:o,extractDenseBlock4Params:function(t,e,n,i){void 0===i&&(i=!1);var a=o(t,e,n,i);return{conv0:a.conv0,conv1:a.conv1,conv2:a.conv2,conv3:r(e,e,n+"/conv3")}}}}function nv(t){return function(e){return{filters:t(e+"/filters",4),bias:t(e+"/bias",1)}}}function rv(t,e){var n=Zd(t,e),r=nv(n),o=Qd(n);return{extractDenseBlock3Params:function(t,e){return void 0===e&&(e=!1),{conv0:e?r(t+"/conv0"):o(t+"/conv0"),conv1:o(t+"/conv1"),conv2:o(t+"/conv2")}},extractDenseBlock4Params:function(t,e){return void 0===e&&(e=!1),{conv0:e?r(t+"/conv0"):o(t+"/conv0"),conv1:o(t+"/conv1"),conv2:o(t+"/conv2"),conv3:o(t+"/conv3")}}}}var ov=function(t){function e(){return t.call(this,"FaceFeatureExtractor")||this}return mp(e,t),e.prototype.forwardInput=function(t){var e=this.params;if(!e)throw new Error("FaceFeatureExtractor - load model before inference");return Qe((function(){var n=jd(Hp(t.toBatchTensor(112,!0),[122.782,117.001,104.298]).div(Nn(255)),e.dense0,!0);return n=jd(n,e.dense1),n=jd(n,e.dense2),n=jd(n,e.dense3),rl(n,[7,7],[2,2],"valid")}))},e.prototype.forward=function(t){return yp(this,void 0,void 0,(function(){var e;return xp(this,(function(n){switch(n.label){case 0:return e=this.forwardInput,[4,Fd(t)];case 1:return[2,e.apply(this,[n.sent()])]}}))}))},e.prototype.getDefaultModelName=function(){return"face_feature_extractor_model"},e.prototype.extractParamsFromWeigthMap=function(t){return function(t){var e=[],n=rv(t,e).extractDenseBlock4Params,r={dense0:n("dense0",!0),dense1:n("dense1"),dense2:n("dense2"),dense3:n("dense3")};return Kd(t,e),{params:r,paramMappings:e}}(t)},e.prototype.extractParams=function(t){return function(t){var e=[],n=tv(t),r=n.extractWeights,o=n.getRemainingWeights,i=ev(r,e).extractDenseBlock4Params,a=i(3,32,"dense0",!0),s=i(32,64,"dense1"),u=i(64,128,"dense2"),c=i(128,256,"dense3");if(0!==o().length)throw new Error("weights remaing after extract: "+o().length);return{paramMappings:e,params:{dense0:a,dense1:s,dense2:u,dense3:c}}}(t)},e}(Vd);function iv(t,e){return Qe((function(){return Xu(qc(t,e.weights),e.bias)}))}function av(t){var e={},n={};return Object.keys(t).forEach((function(r){(r.startsWith("fc")?n:e)[r]=t[r]})),{featureExtractorMap:e,classifierMap:n}}var sv=function(t){function e(e,n){var r=t.call(this,e)||this;return r._faceFeatureExtractor=n,r}return mp(e,t),Object.defineProperty(e.prototype,"faceFeatureExtractor",{get:function(){return this._faceFeatureExtractor},enumerable:!0,configurable:!0}),e.prototype.runNet=function(t){var e=this,n=this.params;if(!n)throw new Error(this._name+" - load model before inference");return Qe((function(){var r=t instanceof Td?e.faceFeatureExtractor.forwardInput(t):t;return iv(r.as2D(r.shape[0],-1),n.fc)}))},e.prototype.dispose=function(e){void 0===e&&(e=!0),this.faceFeatureExtractor.dispose(e),t.prototype.dispose.call(this,e)},e.prototype.loadClassifierParams=function(t){var e=this.extractClassifierParams(t),n=e.params,r=e.paramMappings;this._params=n,this._paramMappings=r},e.prototype.extractClassifierParams=function(t){return function(t,e,n){var r=[],o=tv(t),i=o.extractWeights,a=o.getRemainingWeights,s=Yd(i,r)(e,n,"fc");if(0!==a().length)throw new Error("weights remaing after extract: "+a().length);return{paramMappings:r,params:{fc:s}}}(t,this.getClassifierChannelsIn(),this.getClassifierChannelsOut())},e.prototype.extractParamsFromWeigthMap=function(t){var e=av(t),n=e.featureExtractorMap,r=e.classifierMap;return this.faceFeatureExtractor.loadFromWeightMap(n),function(t){var e=[],n=Zd(t,e),r={fc:("fc",{weights:n("fc/weights",2),bias:n("fc/bias",1)})};return Kd(t,e),{params:r,paramMappings:e}}(r)},e.prototype.extractParams=function(t){var e=this.getClassifierChannelsIn(),n=this.getClassifierChannelsOut(),r=n*e+n,o=t.slice(0,t.length-r),i=t.slice(t.length-r);return this.faceFeatureExtractor.extractWeights(o),this.extractClassifierParams(i)},e}(Vd),uv=["neutral","happy","sad","angry","fearful","disgusted","surprised"],cv=function(){function t(t){var e=this;if(7!==t.length)throw new Error("FaceExpressions.constructor - expected probabilities.length to be 7, have: "+t.length);uv.forEach((function(n,r){e[n]=t[r]}))}return t.prototype.asSortedArray=function(){var t=this;return uv.map((function(e){return{expression:e,probability:t[e]}})).sort((function(t,e){return e.probability-t.probability}))},t}(),lv=function(t){function e(e){return void 0===e&&(e=new ov),t.call(this,"FaceExpressionNet",e)||this}return mp(e,t),e.prototype.forwardInput=function(t){var e=this;return Qe((function(){return vo(e.runNet(t))}))},e.prototype.forward=function(t){return yp(this,void 0,void 0,(function(){var e;return xp(this,(function(n){switch(n.label){case 0:return e=this.forwardInput,[4,Fd(t)];case 1:return[2,e.apply(this,[n.sent()])]}}))}))},e.prototype.predictExpressions=function(t){return yp(this,void 0,void 0,(function(){var e,n,r,o,i=this;return xp(this,(function(a){switch(a.label){case 0:return[4,Fd(t)];case 1:return e=a.sent(),[4,this.forwardInput(e)];case 2:return n=a.sent(),[4,Promise.all(Wr(n).map((function(t){return yp(i,void 0,void 0,(function(){var e;return xp(this,(function(n){switch(n.label){case 0:return[4,t.data()];case 1:return e=n.sent(),t.dispose(),[2,e]}}))}))})))];case 3:return r=a.sent(),n.dispose(),o=r.map((function(t){return new cv(t)})),[2,e.isBatchInput?o:o[0]]}}))}))},e.prototype.getDefaultModelName=function(){return"face_expression_model"},e.prototype.getClassifierChannelsIn=function(){return 256},e.prototype.getClassifierChannelsOut=function(){return 7},e}(sv);function hv(t){return t.expressions instanceof cv}function fv(t,e){var n={expressions:e};return Object.assign({},t,n)}function pv(t,e,n,r){void 0===n&&(n=.1),(Array.isArray(e)?e:[e]).forEach((function(e){var o=e instanceof cv?e:hv(e)?e.expressions:void 0;if(!o)throw new Error("drawFaceExpressions - expected faceExpressions to be FaceExpressions | WithFaceExpressions<{}> or array thereof");var i=o.asSortedArray().filter((function(t){return t.probability>n})),a=od(e)?e.detection.box.bottomLeft:r||new Pp(0,0),s=new yd(i.map((function(t){return t.expression+" ("+Dp(t.probability)+")"})),a);s.draw(t)}))}function dv(t){return od(t)&&t.landmarks instanceof Jp&&t.unshiftedLandmarks instanceof Jp&&t.alignedRect instanceof zp}function vv(t,e){var n=t.detection.box,r=e.shiftBy(n.x,n.y),o=r.align(),i=t.detection.imageDims,a={landmarks:r,unshiftedLandmarks:e,alignedRect:new zp(t.detection.score,o.rescale(i.reverse()),i)};return Object.assign({},t,a)}var mv=function(t){void 0===t&&(t={});var e=t.drawLines,n=void 0===e||e,r=t.drawPoints,o=void 0===r||r,i=t.lineWidth,a=t.lineColor,s=t.pointSize,u=t.pointColor;this.drawLines=n,this.drawPoints=o,this.lineWidth=i||1,this.pointSize=s||2,this.lineColor=a||"rgba(0, 255, 255, 1)",this.pointColor=u||"rgba(255, 0, 255, 1)"},gv=function(){function t(t,e){void 0===e&&(e={}),this.faceLandmarks=t,this.options=new mv(e)}return t.prototype.draw=function(t){var e=md(t),n=this.options,r=n.drawLines,o=n.drawPoints,i=n.lineWidth,a=n.lineColor,s=n.pointSize,u=n.pointColor;r&&this.faceLandmarks instanceof Zp&&(e.strokeStyle=a,e.lineWidth=i,dp(e,this.faceLandmarks.getJawOutline()),dp(e,this.faceLandmarks.getLeftEyeBrow()),dp(e,this.faceLandmarks.getRightEyeBrow()),dp(e,this.faceLandmarks.getNose()),dp(e,this.faceLandmarks.getLeftEye(),!0),dp(e,this.faceLandmarks.getRightEye(),!0),dp(e,this.faceLandmarks.getMouth(),!0)),o&&(e.strokeStyle=u,e.fillStyle=u,this.faceLandmarks.positions.forEach((function(t){e.beginPath(),e.arc(t.x,t.y,s,0,2*Math.PI),e.fill()})))},t}();function yv(t,e){(Array.isArray(e)?e:[e]).forEach((function(e){var n=e instanceof Jp?e:dv(e)?e.landmarks:void 0;if(!n)throw new Error("drawFaceLandmarks - expected faceExpressions to be FaceLandmarks | WithFaceLandmarks<WithFaceDetection<{}>> or array thereof");new gv(n).draw(t)}))}function xv(t,e,n){return Xu(Pc(t,e.filters,n,"same"),e.bias)}function bv(t,e,n){void 0===n&&(n=!0);var r=n?Sl(t):t;return r=Gd(r,e.separable_conv0,[1,1]),r=Gd(Sl(r),e.separable_conv1,[1,1]),r=nl(r,[3,3],[2,2],"same"),Xu(r,xv(t,e.expansion_conv,[2,2]))}var wv,Cv=function(t){function e(e){var n=t.call(this,"TinyXception")||this;return n._numMainBlocks=e,n}return mp(e,t),e.prototype.forwardInput=function(t){var e=this,n=this.params;if(!n)throw new Error("TinyXception - load model before inference");return Qe((function(){var r=Hp(t.toBatchTensor(112,!0),[122.782,117.001,104.298]).div(Nn(256)),o=Sl(xv(r,n.entry_flow.conv_in,[2,2]));return o=bv(o,n.entry_flow.reduction_block_0,!1),o=bv(o,n.entry_flow.reduction_block_1),Np(e._numMainBlocks,0,1).forEach((function(t){o=function(t,e){var n=Gd(Sl(t),e.separable_conv0,[1,1]);return n=Gd(Sl(n),e.separable_conv1,[1,1]),n=Gd(Sl(n),e.separable_conv2,[1,1]),Xu(n,t)}(o,n.middle_flow["main_block_"+t])})),o=bv(o,n.exit_flow.reduction_block),o=Sl(Gd(o,n.exit_flow.separable_conv,[1,1]))}))},e.prototype.forward=function(t){return yp(this,void 0,void 0,(function(){var e;return xp(this,(function(n){switch(n.label){case 0:return e=this.forwardInput,[4,Fd(t)];case 1:return[2,e.apply(this,[n.sent()])]}}))}))},e.prototype.getDefaultModelName=function(){return"tiny_xception_model"},e.prototype.extractParamsFromWeigthMap=function(t){return function(t,e){var n=[],r=function(t,e){var n=Zd(t,e),r=nv(n),o=Qd(n);return{extractConvParams:r,extractSeparableConvParams:o,extractReductionBlockParams:function(t){return{separable_conv0:o(t+"/separable_conv0"),separable_conv1:o(t+"/separable_conv1"),expansion_conv:r(t+"/expansion_conv")}},extractMainBlockParams:function(t){return{separable_conv0:o(t+"/separable_conv0"),separable_conv1:o(t+"/separable_conv1"),separable_conv2:o(t+"/separable_conv2")}}}}(t,n),o=r.extractConvParams,i=r.extractSeparableConvParams,a=r.extractReductionBlockParams,s=r.extractMainBlockParams,u={conv_in:o("entry_flow/conv_in"),reduction_block_0:a("entry_flow/reduction_block_0"),reduction_block_1:a("entry_flow/reduction_block_1")},c={};Np(e,0,1).forEach((function(t){c["main_block_"+t]=s("middle_flow/main_block_"+t)}));var l={reduction_block:a("exit_flow/reduction_block"),separable_conv:i("exit_flow/separable_conv")};return Kd(t,n),{params:{entry_flow:u,middle_flow:c,exit_flow:l},paramMappings:n}}(t,this._numMainBlocks)},e.prototype.extractParams=function(t){return function(t,e){var n=[],r=tv(t),o=r.extractWeights,i=r.getRemainingWeights,a=function(t,e){var n=Xd(t,e),r=Jd(t,e);return{extractConvParams:n,extractSeparableConvParams:r,extractReductionBlockParams:function(t,e,o){return{separable_conv0:r(t,e,o+"/separable_conv0"),separable_conv1:r(e,e,o+"/separable_conv1"),expansion_conv:n(t,e,1,o+"/expansion_conv")}},extractMainBlockParams:function(t,e){return{separable_conv0:r(t,t,e+"/separable_conv0"),separable_conv1:r(t,t,e+"/separable_conv1"),separable_conv2:r(t,t,e+"/separable_conv2")}}}}(o,n),s=a.extractConvParams,u=a.extractSeparableConvParams,c=a.extractReductionBlockParams,l=a.extractMainBlockParams,h={conv_in:s(3,32,3,"entry_flow/conv_in"),reduction_block_0:c(32,64,"entry_flow/reduction_block_0"),reduction_block_1:c(64,128,"entry_flow/reduction_block_1")},f={};Np(e,0,1).forEach((function(t){f["main_block_"+t]=l(128,"middle_flow/main_block_"+t)}));var p={reduction_block:c(128,256,"exit_flow/reduction_block"),separable_conv:u(256,512,"exit_flow/separable_conv")};if(0!==i().length)throw new Error("weights remaing after extract: "+i().length);return{paramMappings:n,params:{entry_flow:h,middle_flow:f,exit_flow:p}}}(t,this._numMainBlocks)},e}(Vd);!function(t){t.FEMALE="female",t.MALE="male"}(wv||(wv={}));var Ev=function(t){function e(e){void 0===e&&(e=new Cv(2));var n=t.call(this,"AgeGenderNet")||this;return n._faceFeatureExtractor=e,n}return mp(e,t),Object.defineProperty(e.prototype,"faceFeatureExtractor",{get:function(){return this._faceFeatureExtractor},enumerable:!0,configurable:!0}),e.prototype.runNet=function(t){var e=this,n=this.params;if(!n)throw new Error(this._name+" - load model before inference");return Qe((function(){var r=t instanceof Td?e.faceFeatureExtractor.forwardInput(t):t,o=rl(r,[7,7],[2,2],"valid").as2D(r.shape[0],-1);return{age:iv(o,n.fc.age).as1D(),gender:iv(o,n.fc.gender)}}))},e.prototype.forwardInput=function(t){var e=this;return Qe((function(){var n=e.runNet(t),r=n.age,o=n.gender;return{age:r,gender:vo(o)}}))},e.prototype.forward=function(t){return yp(this,void 0,void 0,(function(){var e;return xp(this,(function(n){switch(n.label){case 0:return e=this.forwardInput,[4,Fd(t)];case 1:return[2,e.apply(this,[n.sent()])]}}))}))},e.prototype.predictAgeAndGender=function(t){return yp(this,void 0,void 0,(function(){var e,n,r,o,i,a,s=this;return xp(this,(function(u){switch(u.label){case 0:return[4,Fd(t)];case 1:return e=u.sent(),[4,this.forwardInput(e)];case 2:return n=u.sent(),r=Wr(n.age),o=Wr(n.gender),i=r.map((function(t,e){return{ageTensor:t,genderTensor:o[e]}})),[4,Promise.all(i.map((function(t){var e=t.ageTensor,n=t.genderTensor;return yp(s,void 0,void 0,(function(){var t,r,o,i,a;return xp(this,(function(s){switch(s.label){case 0:return[4,e.data()];case 1:return t=s.sent()[0],[4,n.data()];case 2:return r=s.sent()[0],i=(o=r>.5)?wv.MALE:wv.FEMALE,a=o?r:1-r,e.dispose(),n.dispose(),[2,{age:t,gender:i,genderProbability:a}]}}))}))})))];case 3:return a=u.sent(),n.age.dispose(),n.gender.dispose(),[2,e.isBatchInput?a:a[0]]}}))}))},e.prototype.getDefaultModelName=function(){return"age_gender_model"},e.prototype.dispose=function(e){void 0===e&&(e=!0),this.faceFeatureExtractor.dispose(e),t.prototype.dispose.call(this,e)},e.prototype.loadClassifierParams=function(t){var e=this.extractClassifierParams(t),n=e.params,r=e.paramMappings;this._params=n,this._paramMappings=r},e.prototype.extractClassifierParams=function(t){return function(t){var e=[],n=tv(t),r=n.extractWeights,o=n.getRemainingWeights,i=Yd(r,e),a=i(512,1,"fc/age"),s=i(512,2,"fc/gender");if(0!==o().length)throw new Error("weights remaing after extract: "+o().length);return{paramMappings:e,params:{fc:{age:a,gender:s}}}}(t)},e.prototype.extractParamsFromWeigthMap=function(t){var e=av(t),n=e.featureExtractorMap,r=e.classifierMap;return this.faceFeatureExtractor.loadFromWeightMap(n),function(t){var e=[],n=Zd(t,e);function r(t){return{weights:n(t+"/weights",2),bias:n(t+"/bias",1)}}var o={fc:{age:r("fc/age"),gender:r("fc/gender")}};return Kd(t,e),{params:o,paramMappings:e}}(r)},e.prototype.extractParams=function(t){var e=t.slice(0,t.length-1539),n=t.slice(t.length-1539);return this.faceFeatureExtractor.extractWeights(e),this.extractClassifierParams(n)},e}(Vd),_v=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return mp(e,t),e.prototype.postProcess=function(t,e,n){var r=n.map((function(t){var n=t.width,r=t.height,o=e/Math.max(r,n);return{width:n*o,height:r*o}})),o=r.length;return Qe((function(){var n=function(t,e){return Pr([Gn([68],t),Gn([68],e)],1).as2D(1,136).as1D()},i=function(t,e){var n=r[t],o=n.width,i=n.height;return e(o,i)?Math.abs(o-i)/2:0},a=t.mul(Gn([o,136],e)).sub(Pr(Array.from(Array(o),(function(t,e){return n(function(t){return i(t,(function(t,e){return t<e}))}(e),function(t){return i(t,(function(t,e){return e<t}))}(e))})))).div(Pr(Array.from(Array(o),(function(t,e){return n(r[e].width,r[e].height)}))));return a}))},e.prototype.forwardInput=function(t){var e=this;return Qe((function(){var n=e.runNet(t);return e.postProcess(n,t.inputSize,t.inputDimensions.map((function(t){return{height:t[0],width:t[1]}})))}))},e.prototype.forward=function(t){return yp(this,void 0,void 0,(function(){var e;return xp(this,(function(n){switch(n.label){case 0:return e=this.forwardInput,[4,Fd(t)];case 1:return[2,e.apply(this,[n.sent()])]}}))}))},e.prototype.detectLandmarks=function(t){return yp(this,void 0,void 0,(function(){var e,n,r,o=this;return xp(this,(function(i){switch(i.label){case 0:return[4,Fd(t)];case 1:return e=i.sent(),n=Qe((function(){return Wr(o.forwardInput(e))})),[4,Promise.all(n.map((function(t,n){return yp(o,void 0,void 0,(function(){var r,o,i,a,s;return xp(this,(function(u){switch(u.label){case 0:return i=(o=Array).from,[4,t.data()];case 1:return r=i.apply(o,[u.sent()]),a=r.filter((function(t,e){return kp(e)})),s=r.filter((function(t,e){return!kp(e)})),[2,new Zp(Array(68).fill(0).map((function(t,e){return new Pp(a[e],s[e])})),{height:e.getInputHeight(n),width:e.getInputWidth(n)})]}}))}))})))];case 2:return r=i.sent(),n.forEach((function(t){return t.dispose()})),[2,e.isBatchInput?r:r[0]]}}))}))},e.prototype.getClassifierChannelsOut=function(){return 136},e}(sv),Iv=function(t){function e(e){return void 0===e&&(e=new ov),t.call(this,"FaceLandmark68Net",e)||this}return mp(e,t),e.prototype.getDefaultModelName=function(){return"face_landmark_68_model"},e.prototype.getClassifierChannelsIn=function(){return 256},e}(_v),Rv=function(t){function e(){return t.call(this,"TinyFaceFeatureExtractor")||this}return mp(e,t),e.prototype.forwardInput=function(t){var e=this.params;if(!e)throw new Error("TinyFaceFeatureExtractor - load model before inference");return Qe((function(){var n=Hd(Hp(t.toBatchTensor(112,!0),[122.782,117.001,104.298]).div(Nn(255)),e.dense0,!0);return n=Hd(n,e.dense1),n=Hd(n,e.dense2),rl(n,[14,14],[2,2],"valid")}))},e.prototype.forward=function(t){return yp(this,void 0,void 0,(function(){var e;return xp(this,(function(n){switch(n.label){case 0:return e=this.forwardInput,[4,Fd(t)];case 1:return[2,e.apply(this,[n.sent()])]}}))}))},e.prototype.getDefaultModelName=function(){return"face_feature_extractor_tiny_model"},e.prototype.extractParamsFromWeigthMap=function(t){return function(t){var e=[],n=rv(t,e).extractDenseBlock3Params,r={dense0:n("dense0",!0),dense1:n("dense1"),dense2:n("dense2")};return Kd(t,e),{params:r,paramMappings:e}}(t)},e.prototype.extractParams=function(t){return function(t){var e=[],n=tv(t),r=n.extractWeights,o=n.getRemainingWeights,i=ev(r,e).extractDenseBlock3Params,a=i(3,32,"dense0",!0),s=i(32,64,"dense1"),u=i(64,128,"dense2");if(0!==o().length)throw new Error("weights remaing after extract: "+o().length);return{paramMappings:e,params:{dense0:a,dense1:s,dense2:u}}}(t)},e}(Vd),Sv=function(t){function e(e){return void 0===e&&(e=new Rv),t.call(this,"FaceLandmark68TinyNet",e)||this}return mp(e,t),e.prototype.getDefaultModelName=function(){return"face_landmark_68_tiny_model"},e.prototype.getClassifierChannelsIn=function(){return 128},e}(_v),kv=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return mp(e,t),e}(Iv);function Dv(t,e,n,r,o){void 0===o&&(o="same");var i=e.conv,a=i.filters,s=i.bias,u=Pc(t,a,n,o);return u=function(t,e){return Xu(uc(t,e.weights),e.biases)}(u=Xu(u,s),e.scale),r?Sl(u):u}function Av(t,e){return Dv(t,e,[1,1],!1)}function Tv(t,e){return Dv(t,e,[2,2],!0,"valid")}function Fv(t,e){function n(n,r,o,i){var a=function(n,r,o,i){var a=function(e,n,r){var o=t(e),i=o.length/(n*r*r);if(Sp(i))throw new Error("depth has to be an integer: "+i+", weights.length: "+o.length+", numFilters: "+n+", filterSize: "+r);return Qe((function(){return Al(Bn(o,[n,i,r,r]),[2,3,1,0])}))}(n,r,o),s=Mn(t(r));return e.push({paramPath:i+"/filters"},{paramPath:i+"/bias"}),{filters:a,bias:s}}(n,r,o,i+"/conv"),s=function(n,r){var o=Mn(t(n)),i=Mn(t(n));return e.push({paramPath:r+"/weights"},{paramPath:r+"/biases"}),{weights:o,biases:i}}(r,i+"/scale");return{conv:a,scale:s}}return{extractConvLayerParams:n,extractResidualLayerParams:function(t,e,r,o,i){return void 0===i&&(i=!1),{conv1:n((i?.5:1)*t,e,r,o+"/conv1"),conv2:n(t,e,r,o+"/conv2")}}}}function Nv(t,e){var n=function(t,e){return Dv(t,e,[1,1],!0)}(t,e.conv1);return n=Av(n,e.conv2),n=Xu(n,t),Sl(n)}function Mv(t,e){var n=Tv(t,e.conv1);n=Av(n,e.conv2);var r=rl(t,2,2,"valid"),o=Vn(r.shape),i=r.shape[3]!==n.shape[3];if(r.shape[1]!==n.shape[1]||r.shape[2]!==n.shape[2]){var a=bp(n.shape);a[1]=1;var s=Vn(a),u=bp((n=Xn([n,s],1)).shape);u[2]=1;var c=Vn(u);n=Xn([n,c],2)}return r=i?Xn([r,o],3):r,n=Xu(r,n),Sl(n)}var Ov=function(t){function e(){return t.call(this,"FaceRecognitionNet")||this}return mp(e,t),e.prototype.forwardInput=function(t){var e=this.params;if(!e)throw new Error("FaceRecognitionNet - load model before inference");return Qe((function(){var n=Tv(Hp(t.toBatchTensor(150,!0).toFloat(),[122.782,117.001,104.298]).div(Nn(256)),e.conv32_down);n=Nv(n=nl(n,3,2,"valid"),e.conv32_1),n=Nv(n,e.conv32_2),n=Nv(n,e.conv32_3),n=Nv(n=Mv(n,e.conv64_down),e.conv64_1),n=Nv(n,e.conv64_2),n=Nv(n,e.conv64_3),n=Nv(n=Mv(n,e.conv128_down),e.conv128_1),n=Nv(n,e.conv128_2),n=Nv(n=Mv(n,e.conv256_down),e.conv256_1);var r=(n=Mv(n=Nv(n,e.conv256_2),e.conv256_down_out)).mean([1,2]);return qc(r,e.fc)}))},e.prototype.forward=function(t){return yp(this,void 0,void 0,(function(){var e;return xp(this,(function(n){switch(n.label){case 0:return e=this.forwardInput,[4,Fd(t)];case 1:return[2,e.apply(this,[n.sent()])]}}))}))},e.prototype.computeFaceDescriptor=function(t){return yp(this,void 0,void 0,(function(){var e,n,r,o=this;return xp(this,(function(i){switch(i.label){case 0:return[4,Fd(t)];case 1:return e=i.sent(),n=Qe((function(){return Wr(o.forwardInput(e))})),[4,Promise.all(n.map((function(t){return t.data()})))];case 2:return r=i.sent(),n.forEach((function(t){return t.dispose()})),[2,e.isBatchInput?r:r[0]]}}))}))},e.prototype.getDefaultModelName=function(){return"face_recognition_model"},e.prototype.extractParamsFromWeigthMap=function(t){return function(t){var e=[],n=function(t,e){var n=Zd(t,e);function r(t){var e=n(t+"/conv/filters",4),r=n(t+"/conv/bias",1),o=function(t){return{weights:n(t+"/scale/weights",1),biases:n(t+"/scale/biases",1)}}(t);return{conv:{filters:e,bias:r},scale:o}}return{extractConvLayerParams:r,extractResidualLayerParams:function(t){return{conv1:r(t+"/conv1"),conv2:r(t+"/conv2")}}}}(t,e),r=n.extractConvLayerParams,o=n.extractResidualLayerParams,i=r("conv32_down"),a=o("conv32_1"),s=o("conv32_2"),u=o("conv32_3"),c=o("conv64_down"),l=o("conv64_1"),h=o("conv64_2"),f=o("conv64_3"),p=o("conv128_down"),d=o("conv128_1"),v=o("conv128_2"),m=o("conv256_down"),g=o("conv256_1"),y=o("conv256_2"),x=o("conv256_down_out"),b=t.fc;if(e.push({originalPath:"fc",paramPath:"fc"}),!_p(b))throw new Error("expected weightMap[fc] to be a Tensor2D, instead have "+b);var w={conv32_down:i,conv32_1:a,conv32_2:s,conv32_3:u,conv64_down:c,conv64_1:l,conv64_2:h,conv64_3:f,conv128_down:p,conv128_1:d,conv128_2:v,conv256_down:m,conv256_1:g,conv256_2:y,conv256_down_out:x,fc:b};return Kd(t,e),{params:w,paramMappings:e}}(t)},e.prototype.extractParams=function(t){return function(t){var e=tv(t),n=e.extractWeights,r=e.getRemainingWeights,o=[],i=Fv(n,o),a=i.extractConvLayerParams,s=i.extractResidualLayerParams,u=a(4704,32,7,"conv32_down"),c=s(9216,32,3,"conv32_1"),l=s(9216,32,3,"conv32_2"),h=s(9216,32,3,"conv32_3"),f=s(36864,64,3,"conv64_down",!0),p=s(36864,64,3,"conv64_1"),d=s(36864,64,3,"conv64_2"),v=s(36864,64,3,"conv64_3"),m=s(147456,128,3,"conv128_down",!0),g=s(147456,128,3,"conv128_1"),y=s(147456,128,3,"conv128_2"),x=s(589824,256,3,"conv256_down",!0),b=s(589824,256,3,"conv256_1"),w=s(589824,256,3,"conv256_2"),C=s(589824,256,3,"conv256_down_out"),E=Qe((function(){return Al(On(n(32768),[128,256]),[1,0])}));if(o.push({paramPath:"fc"}),0!==r().length)throw new Error("weights remaing after extract: "+r().length);return{params:{conv32_down:u,conv32_1:c,conv32_2:l,conv32_3:h,conv64_down:f,conv64_1:p,conv64_2:d,conv64_3:v,conv128_down:m,conv128_1:g,conv128_2:y,conv256_down:x,conv256_1:b,conv256_2:w,conv256_down_out:C,fc:E},paramMappings:o}}(t)},e}(Vd);function Pv(t){var e=new Ov;return e.extractWeights(t),e}function Bv(t,e){var n={descriptor:e};return Object.assign({},t,n)}function Lv(t){return"number"==typeof t.age}function Wv(t,e){var n={age:e};return Object.assign({},t,n)}function zv(t){return(t.gender===wv.MALE||t.gender===wv.FEMALE)&&Op(t.genderProbability)}function Uv(t,e,n){var r={gender:e,genderProbability:n};return Object.assign({},t,r)}var Vv=function(){function t(t){var e=void 0===t?{}:t,n=e.minFaceSize,r=e.scaleFactor,o=e.maxNumScales,i=e.scoreThresholds,a=e.scaleSteps;if(this._name="MtcnnOptions",this._minFaceSize=n||20,this._scaleFactor=r||.709,this._maxNumScales=o||10,this._scoreThresholds=i||[.6,.7,.7],this._scaleSteps=a,"number"!=typeof this._minFaceSize||this._minFaceSize<0)throw new Error(this._name+" - expected minFaceSize to be a number > 0");if("number"!=typeof this._scaleFactor||this._scaleFactor<=0||this._scaleFactor>=1)throw new Error(this._name+" - expected scaleFactor to be a number between 0 and 1");if("number"!=typeof this._maxNumScales||this._maxNumScales<0)throw new Error(this._name+" - expected maxNumScales to be a number > 0");if(!Array.isArray(this._scoreThresholds)||3!==this._scoreThresholds.length||this._scoreThresholds.some((function(t){return"number"!=typeof t})))throw new Error(this._name+" - expected scoreThresholds to be an array of numbers of length 3");if(this._scaleSteps&&(!Array.isArray(this._scaleSteps)||this._scaleSteps.some((function(t){return"number"!=typeof t}))))throw new Error(this._name+" - expected scaleSteps to be an array of numbers")}return Object.defineProperty(t.prototype,"minFaceSize",{get:function(){return this._minFaceSize},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"scaleFactor",{get:function(){return this._scaleFactor},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"maxNumScales",{get:function(){return this._maxNumScales},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"scoreThresholds",{get:function(){return this._scoreThresholds},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"scaleSteps",{get:function(){return this._scaleSteps},enumerable:!0,configurable:!0}),t}();function Gv(t,e,n){return Qe((function(){var r=Pc(t,e.filters,n,"same");return r=Xu(r,e.batch_norm_offset),nu(r,0,6)}))}function Hv(t,e,n){var r=t.arraySync(),o=Math.min(r[e][0],r[e][2]),i=Math.min(r[e][1],r[e][3]),a=Math.max(r[e][0],r[e][2]),s=Math.max(r[e][1],r[e][3]),u=Math.min(r[n][0],r[n][2]),c=Math.min(r[n][1],r[n][3]),l=Math.max(r[n][0],r[n][2]),h=Math.max(r[n][1],r[n][3]),f=(a-o)*(s-i),p=(l-u)*(h-c);if(f<=0||p<=0)return 0;var d=Math.max(o,u),v=Math.max(i,c),m=Math.min(a,l),g=Math.min(s,h),y=Math.max(m-d,0)*Math.max(g-v,0);return y/(f+p-y)}function jv(t,e){return Qe((function(){var n=t.shape[0];return{boxPredictionEncoding:Nr(qd(t,e.box_encoding_predictor),[n,-1,1,4]),classPrediction:Nr(qd(t,e.class_predictor),[n,-1,3])}}))}var qv=function(){function t(t){var e=void 0===t?{}:t,n=e.minConfidence,r=e.maxResults;if(this._name="SsdMobilenetv1Options",this._minConfidence=n||.5,this._maxResults=r||100,"number"!=typeof this._minConfidence||this._minConfidence<=0||this._minConfidence>=1)throw new Error(this._name+" - expected minConfidence to be a number between 0 and 1");if("number"!=typeof this._maxResults)throw new Error(this._name+" - expected maxResults to be a number")}return Object.defineProperty(t.prototype,"minConfidence",{get:function(){return this._minConfidence},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"maxResults",{get:function(){return this._maxResults},enumerable:!0,configurable:!0}),t}(),Kv=function(t){function e(){return t.call(this,"SsdMobilenetv1")||this}return mp(e,t),e.prototype.forwardInput=function(t){var e=this.params;if(!e)throw new Error("SsdMobilenetv1 - load model before inference");return Qe((function(){var n=t.toBatchTensor(512,!1).toFloat(),r=function(t,e){return Qe((function(){var n=null,r=Gv(t,e.conv_0,[2,2]);if([e.conv_1,e.conv_2,e.conv_3,e.conv_4,e.conv_5,e.conv_6,e.conv_7,e.conv_8,e.conv_9,e.conv_10,e.conv_11,e.conv_12,e.conv_13].forEach((function(t,e){var o=e+1,i=function(t){return[2,4,6,12].some((function(e){return e===t}))?[2,2]:[1,1]}(o);r=function(t,e,n){return Qe((function(){var r=zc(t,e.filters,n,"same");return r=Lu(r,e.batch_norm_mean,e.batch_norm_variance,e.batch_norm_offset,e.batch_norm_scale,.0010000000474974513),nu(r,0,6)}))}(r,t.depthwise_conv,i),r=Gv(r,t.pointwise_conv,[1,1]),11===o&&(n=r)})),null===n)throw new Error("mobileNetV1 - output of conv layer 11 is null");return{out:r,conv11:n}}))}(pc(uc(n,Nn(.007843137718737125)),Nn(1)),e.mobilenetv1),o=function(t,e,n){return Qe((function(){var r=Gv(t,n.conv_0,[1,1]),o=Gv(r,n.conv_1,[2,2]),i=Gv(o,n.conv_2,[1,1]),a=Gv(i,n.conv_3,[2,2]),s=Gv(a,n.conv_4,[1,1]),u=Gv(s,n.conv_5,[2,2]),c=Gv(u,n.conv_6,[1,1]),l=Gv(c,n.conv_7,[2,2]),h=jv(e,n.box_predictor_0),f=jv(t,n.box_predictor_1),p=jv(o,n.box_predictor_2),d=jv(a,n.box_predictor_3),v=jv(u,n.box_predictor_4),m=jv(l,n.box_predictor_5);return{boxPredictions:Xn([h.boxPredictionEncoding,f.boxPredictionEncoding,p.boxPredictionEncoding,d.boxPredictionEncoding,v.boxPredictionEncoding,m.boxPredictionEncoding],1),classPredictions:Xn([h.classPrediction,f.classPrediction,p.classPrediction,d.classPrediction,v.classPrediction,m.classPrediction],1)}}))}(r.out,r.conv11,e.prediction_layer);return function(t,e,n){return Qe((function(){var r=t.shape[0],o=function(t,e){var n=function(t){var e=Wr(Al(t,[1,0])),n=[pc(e[2],e[0]),pc(e[3],e[1])];return{sizes:n,centers:[Xu(e[0],Qu(n[0],Nn(2))),Xu(e[1],Qu(n[1],Nn(2)))]}}(t),r=n.sizes,o=n.centers,i=Wr(Al(e,[1,0])),a=Qu(uc(au(Qu(i[2],Nn(5))),r[0]),Nn(2)),s=Xu(uc(Qu(i[0],Nn(10)),r[0]),o[0]),u=Qu(uc(au(Qu(i[3],Nn(5))),r[1]),Nn(2)),c=Xu(uc(Qu(i[1],Nn(10)),r[1]),o[1]);return Al(Pr([pc(s,a),pc(c,u),Xu(s,a),Xu(c,u)]),[1,0])}(Nr(Br(n.extra_dim,[r,1,1]),[-1,4]),Nr(t,[-1,4]));o=Nr(o,[r,o.shape[0]/r,4]);var i=mu(sl(e,[0,0,1],[-1,-1,-1])),a=sl(i,[0,0,0],[-1,-1,1]);return a=Nr(a,[r,a.shape[1]]),{boxes:Wr(o),scores:Wr(a)}}))}(o.boxPredictions,o.classPredictions,e.output_layer)}))},e.prototype.forward=function(t){return yp(this,void 0,void 0,(function(){var e;return xp(this,(function(n){switch(n.label){case 0:return e=this.forwardInput,[4,Fd(t)];case 1:return[2,e.apply(this,[n.sent()])]}}))}))},e.prototype.locateFaces=function(t,e){return void 0===e&&(e={}),yp(this,void 0,void 0,(function(){var n,r,o,i,a,s,u,c,l,h,f,p,d,v,m,g,y,x,b,w;return xp(this,(function(C){switch(C.label){case 0:return n=new qv(e),r=n.maxResults,o=n.minConfidence,[4,Fd(t)];case 1:for(i=C.sent(),a=this.forwardInput(i),s=a.boxes,u=a.scores,c=s[0],l=u[0],h=1;h<s.length;h++)s[h].dispose(),u[h].dispose();return d=(p=Array).from,[4,l.data()];case 2:return f=d.apply(p,[C.sent()]),v=function(t,e,n,r,o){var i=t.shape[0],a=Math.min(n,i),s=e.map((function(t,e){return{score:t,boxIndex:e}})).filter((function(t){return t.score>o})).sort((function(t,e){return e.score-t.score})),u=function(t){return t<=.5?1:0},c=[];return s.forEach((function(e){if(!(c.length>=a)){for(var n=e.score,r=c.length-1;r>=0;--r){var i=Hv(t,e.boxIndex,c[r]);if(0!==i&&(e.score*=u(i),e.score<=o))break}n===e.score&&c.push(e.boxIndex)}})),c}(c,f,r,0,o),m=i.getReshapedInputDimensions(0),g=i.inputSize,y=g/m.width,x=g/m.height,b=c.arraySync(),w=v.map((function(t){var e=[Math.max(0,b[t][0]),Math.min(1,b[t][2])].map((function(t){return t*x})),n=e[0],r=e[1],o=[Math.max(0,b[t][1]),Math.min(1,b[t][3])].map((function(t){return t*y})),a=o[0],s=o[1];return new zp(f[t],new $p(a,n,s-a,r-n),{height:i.getInputHeight(0),width:i.getInputWidth(0)})})),c.dispose(),l.dispose(),[2,w]}}))}))},e.prototype.getDefaultModelName=function(){return"ssd_mobilenetv1_model"},e.prototype.extractParamsFromWeigthMap=function(t){return function(t){var e=[],n=function(t,e){var n=Zd(t,e);function r(t,e,r){return{filters:n(t+"/Conv2d_"+e+"_pointwise/weights",4,r+"/filters"),batch_norm_offset:n(t+"/Conv2d_"+e+"_pointwise/convolution_bn_offset",1,r+"/batch_norm_offset")}}function o(t){var e="mobilenetv1/conv_"+t,o="MobilenetV1/Conv2d_"+t+"_depthwise",i=e+"/depthwise_conv",a=e+"/pointwise_conv";return{depthwise_conv:{filters:n(o+"/depthwise_weights",4,i+"/filters"),batch_norm_scale:n(o+"/BatchNorm/gamma",1,i+"/batch_norm_scale"),batch_norm_offset:n(o+"/BatchNorm/beta",1,i+"/batch_norm_offset"),batch_norm_mean:n(o+"/BatchNorm/moving_mean",1,i+"/batch_norm_mean"),batch_norm_variance:n(o+"/BatchNorm/moving_variance",1,i+"/batch_norm_variance")},pointwise_conv:r("MobilenetV1",t,a)}}function i(t,e){return{filters:n(t+"/weights",4,e+"/filters"),bias:n(t+"/biases",1,e+"/bias")}}function a(t){return{box_encoding_predictor:i("Prediction/BoxPredictor_"+t+"/BoxEncodingPredictor","prediction_layer/box_predictor_"+t+"/box_encoding_predictor"),class_predictor:i("Prediction/BoxPredictor_"+t+"/ClassPredictor","prediction_layer/box_predictor_"+t+"/class_predictor")}}return{extractMobilenetV1Params:function(){return{conv_0:r("MobilenetV1",0,"mobilenetv1/conv_0"),conv_1:o(1),conv_2:o(2),conv_3:o(3),conv_4:o(4),conv_5:o(5),conv_6:o(6),conv_7:o(7),conv_8:o(8),conv_9:o(9),conv_10:o(10),conv_11:o(11),conv_12:o(12),conv_13:o(13)}},extractPredictionLayerParams:function(){return{conv_0:r("Prediction",0,"prediction_layer/conv_0"),conv_1:r("Prediction",1,"prediction_layer/conv_1"),conv_2:r("Prediction",2,"prediction_layer/conv_2"),conv_3:r("Prediction",3,"prediction_layer/conv_3"),conv_4:r("Prediction",4,"prediction_layer/conv_4"),conv_5:r("Prediction",5,"prediction_layer/conv_5"),conv_6:r("Prediction",6,"prediction_layer/conv_6"),conv_7:r("Prediction",7,"prediction_layer/conv_7"),box_predictor_0:a(0),box_predictor_1:a(1),box_predictor_2:a(2),box_predictor_3:a(3),box_predictor_4:a(4),box_predictor_5:a(5)}}}}(t,e),r=n.extractMobilenetV1Params,o=n.extractPredictionLayerParams,i=t["Output/extra_dim"];if(e.push({originalPath:"Output/extra_dim",paramPath:"output_layer/extra_dim"}),!Ip(i))throw new Error("expected weightMap['Output/extra_dim'] to be a Tensor3D, instead have "+i);var a={mobilenetv1:r(),prediction_layer:o(),output_layer:{extra_dim:i}};return Kd(t,e),{params:a,paramMappings:e}}(t)},e.prototype.extractParams=function(t){return function(t){var e=[],n=tv(t),r=n.extractWeights,o=n.getRemainingWeights,i=function(t,e){function n(n,r,o,i,a){var s=Bn(t(n*r*o*o),[o,o,n,r]),u=Mn(t(r));return e.push({paramPath:i+"/filters"},{paramPath:i+"/"+(a?"batch_norm_offset":"bias")}),{filters:s,bias:u}}function r(t,e,r,o){var i=n(t,e,r,o,!0);return{filters:i.filters,batch_norm_offset:i.bias}}function o(n,o,i){var a=function(n,r){var o=Bn(t(9*n),[3,3,n,1]),i=Mn(t(n)),a=Mn(t(n)),s=Mn(t(n)),u=Mn(t(n));return e.push({paramPath:r+"/filters"},{paramPath:r+"/batch_norm_scale"},{paramPath:r+"/batch_norm_offset"},{paramPath:r+"/batch_norm_mean"},{paramPath:r+"/batch_norm_variance"}),{filters:o,batch_norm_scale:i,batch_norm_offset:a,batch_norm_mean:s,batch_norm_variance:u}}(n,i+"/depthwise_conv");return{depthwise_conv:a,pointwise_conv:r(n,o,1,i+"/pointwise_conv")}}return{extractMobilenetV1Params:function(){return{conv_0:r(3,32,3,"mobilenetv1/conv_0"),conv_1:o(32,64,"mobilenetv1/conv_1"),conv_2:o(64,128,"mobilenetv1/conv_2"),conv_3:o(128,128,"mobilenetv1/conv_3"),conv_4:o(128,256,"mobilenetv1/conv_4"),conv_5:o(256,256,"mobilenetv1/conv_5"),conv_6:o(256,512,"mobilenetv1/conv_6"),conv_7:o(512,512,"mobilenetv1/conv_7"),conv_8:o(512,512,"mobilenetv1/conv_8"),conv_9:o(512,512,"mobilenetv1/conv_9"),conv_10:o(512,512,"mobilenetv1/conv_10"),conv_11:o(512,512,"mobilenetv1/conv_11"),conv_12:o(512,1024,"mobilenetv1/conv_12"),conv_13:o(1024,1024,"mobilenetv1/conv_13")}},extractPredictionLayerParams:function(){return{conv_0:r(1024,256,1,"prediction_layer/conv_0"),conv_1:r(256,512,3,"prediction_layer/conv_1"),conv_2:r(512,128,1,"prediction_layer/conv_2"),conv_3:r(128,256,3,"prediction_layer/conv_3"),conv_4:r(256,128,1,"prediction_layer/conv_4"),conv_5:r(128,256,3,"prediction_layer/conv_5"),conv_6:r(256,64,1,"prediction_layer/conv_6"),conv_7:r(64,128,3,"prediction_layer/conv_7"),box_predictor_0:{box_encoding_predictor:n(512,12,1,"prediction_layer/box_predictor_0/box_encoding_predictor"),class_predictor:n(512,9,1,"prediction_layer/box_predictor_0/class_predictor")},box_predictor_1:{box_encoding_predictor:n(1024,24,1,"prediction_layer/box_predictor_1/box_encoding_predictor"),class_predictor:n(1024,18,1,"prediction_layer/box_predictor_1/class_predictor")},box_predictor_2:{box_encoding_predictor:n(512,24,1,"prediction_layer/box_predictor_2/box_encoding_predictor"),class_predictor:n(512,18,1,"prediction_layer/box_predictor_2/class_predictor")},box_predictor_3:{box_encoding_predictor:n(256,24,1,"prediction_layer/box_predictor_3/box_encoding_predictor"),class_predictor:n(256,18,1,"prediction_layer/box_predictor_3/class_predictor")},box_predictor_4:{box_encoding_predictor:n(256,24,1,"prediction_layer/box_predictor_4/box_encoding_predictor"),class_predictor:n(256,18,1,"prediction_layer/box_predictor_4/class_predictor")},box_predictor_5:{box_encoding_predictor:n(128,24,1,"prediction_layer/box_predictor_5/box_encoding_predictor"),class_predictor:n(128,18,1,"prediction_layer/box_predictor_5/class_predictor")}}}}}(r,e),a=i.extractMobilenetV1Params,s=i.extractPredictionLayerParams,u=a(),c=s(),l={extra_dim:Pn(r(20472),[1,5118,4])};if(e.push({paramPath:"output_layer/extra_dim"}),0!==o().length)throw new Error("weights remaing after extract: "+o().length);return{params:{mobilenetv1:u,prediction_layer:c,output_layer:l},paramMappings:e}}(t)},e}(Vd);function Xv(t){var e=new Kv;return e.extractWeights(t),e}function Yv(t){return Xv(t)}var $v,Jv=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return mp(e,t),e}(Kv),Qv=[new Pp(.738768,.874946),new Pp(2.42204,2.65704),new Pp(4.30971,7.04493),new Pp(10.246,4.59428),new Pp(12.6868,11.8741)],Zv=[new Pp(1.603231,2.094468),new Pp(6.041143,7.080126),new Pp(2.882459,3.518061),new Pp(4.266906,5.178857),new Pp(9.041765,10.66308)],tm=[117.001,114.697,97.404],em=function(t){return"number"==typeof t};function nm(t){if(!t)throw new Error("invalid config: "+t);if("boolean"!=typeof t.withSeparableConvs)throw new Error("config.withSeparableConvs has to be a boolean, have: "+t.withSeparableConvs);if(!em(t.iouThreshold)||t.iouThreshold<0||t.iouThreshold>1)throw new Error("config.iouThreshold has to be a number between [0, 1], have: "+t.iouThreshold);if(!Array.isArray(t.classes)||!t.classes.length||!t.classes.every((function(t){return"string"==typeof t})))throw new Error("config.classes has to be an array class names: string[], have: "+JSON.stringify(t.classes));if(!Array.isArray(t.anchors)||!t.anchors.length||!t.anchors.map((function(t){return t||{}})).every((function(t){return em(t.x)&&em(t.y)})))throw new Error("config.anchors has to be an array of { x: number, y: number }, have: "+JSON.stringify(t.anchors));if(t.meanRgb&&(!Array.isArray(t.meanRgb)||3!==t.meanRgb.length||!t.meanRgb.every(em)))throw new Error("config.meanRgb has to be an array of shape [number, number, number], have: "+JSON.stringify(t.meanRgb))}function rm(t){return Qe((function(){var e=uc(t,Nn(.10000000149011612));return Xu(Sl(pc(t,e)),e)}))}function om(t,e){return Qe((function(){var n=_r(t,[[0,0],[1,1],[1,1],[0,0]]);return n=Pc(n,e.conv.filters,[1,1],"valid"),n=pc(n,e.bn.sub),n=uc(n,e.bn.truediv),rm(n=Xu(n,e.conv.bias))}))}function im(t,e){return Qe((function(){var n=_r(t,[[0,0],[1,1],[1,1],[0,0]]);return n=Gc(n,e.depthwise_filter,e.pointwise_filter,[1,1],"valid"),rm(n=Xu(n,e.bias))}))}!function(t){t[t.XS=224]="XS",t[t.SM=320]="SM",t[t.MD=416]="MD",t[t.LG=608]="LG"}($v||($v={}));var am=function(){function t(t){var e=void 0===t?{}:t,n=e.inputSize,r=e.scoreThreshold;if(this._name="TinyYolov2Options",this._inputSize=n||416,this._scoreThreshold=r||.5,"number"!=typeof this._inputSize||this._inputSize%32!=0)throw new Error(this._name+" - expected inputSize to be a number divisible by 32");if("number"!=typeof this._scoreThreshold||this._scoreThreshold<=0||this._scoreThreshold>=1)throw new Error(this._name+" - expected scoreThreshold to be a number between 0 and 1")}return Object.defineProperty(t.prototype,"inputSize",{get:function(){return this._inputSize},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"scoreThreshold",{get:function(){return this._scoreThreshold},enumerable:!0,configurable:!0}),t}(),sm=function(t){function e(e){var n=t.call(this,"TinyYolov2")||this;return nm(e),n._config=e,n}return mp(e,t),Object.defineProperty(e.prototype,"config",{get:function(){return this._config},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"withClassScores",{get:function(){return this.config.withClassScores||this.config.classes.length>1},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"boxEncodingSize",{get:function(){return 5+(this.withClassScores?this.config.classes.length:0)},enumerable:!0,configurable:!0}),e.prototype.runTinyYolov2=function(t,e){var n=om(t,e.conv0);return n=om(n=nl(n,[2,2],[2,2],"same"),e.conv1),n=om(n=nl(n,[2,2],[2,2],"same"),e.conv2),n=om(n=nl(n,[2,2],[2,2],"same"),e.conv3),n=om(n=nl(n,[2,2],[2,2],"same"),e.conv4),n=om(n=nl(n,[2,2],[2,2],"same"),e.conv5),n=om(n=nl(n,[2,2],[1,1],"same"),e.conv6),qd(n=om(n,e.conv7),e.conv8,"valid",!1)},e.prototype.runMobilenet=function(t,e){var n=this.config.isFirstLayerConv2d?rm(qd(t,e.conv0,"valid",!1)):im(t,e.conv0);return n=im(n=nl(n,[2,2],[2,2],"same"),e.conv1),n=im(n=nl(n,[2,2],[2,2],"same"),e.conv2),n=im(n=nl(n,[2,2],[2,2],"same"),e.conv3),n=im(n=nl(n,[2,2],[2,2],"same"),e.conv4),n=im(n=nl(n,[2,2],[2,2],"same"),e.conv5),n=nl(n,[2,2],[1,1],"same"),n=e.conv6?im(n,e.conv6):n,qd(n=e.conv7?im(n,e.conv7):n,e.conv8,"valid",!1)},e.prototype.forwardInput=function(t,e){var n=this,r=this.params;if(!r)throw new Error("TinyYolov2 - load model before inference");return Qe((function(){var o=t.toBatchTensor(e,!1).toFloat();return o=(o=n.config.meanRgb?Hp(o,n.config.meanRgb):o).div(Nn(256)),n.config.withSeparableConvs?n.runMobilenet(o,r):n.runTinyYolov2(o,r)}))},e.prototype.forward=function(t,e){return yp(this,void 0,void 0,(function(){var n;return xp(this,(function(r){switch(r.label){case 0:return n=this.forwardInput,[4,Fd(t)];case 1:return[4,n.apply(this,[r.sent(),e])];case 2:return[2,r.sent()]}}))}))},e.prototype.detect=function(t,e){return void 0===e&&(e={}),yp(this,void 0,void 0,(function(){var n,r,o,i,a,s,u,c,l,h,f,p,d=this;return xp(this,(function(v){switch(v.label){case 0:return n=new am(e),r=n.inputSize,o=n.scoreThreshold,[4,Fd(t)];case 1:return i=v.sent(),[4,this.forwardInput(i,r)];case 2:return a=v.sent(),s=Qe((function(){return Wr(a)[0].expandDims()})),u={width:i.getInputWidth(0),height:i.getInputHeight(0)},[4,this.extractBoxes(s,i.getReshapedInputDimensions(0),o)];case 3:return c=v.sent(),a.dispose(),s.dispose(),l=c.map((function(t){return t.box})),h=c.map((function(t){return t.score})),f=c.map((function(t){return t.classScore})),p=c.map((function(t){return d.config.classes[t.label]})),[2,Gp(l.map((function(t){return t.rescale(r)})),h,this.config.iouThreshold,!0).map((function(t){return new Wp(h[t],f[t],p[t],l[t],u)}))]}}))}))},e.prototype.getDefaultModelName=function(){return""},e.prototype.extractParamsFromWeigthMap=function(t){return function(t,e){var n,r=[],o=function(t,e){var n=Zd(t,e);function r(t){return{filters:n(t+"/filters",4),bias:n(t+"/bias",1)}}return{extractConvParams:r,extractConvWithBatchNormParams:function(t){var e=r(t+"/conv"),o=function(t){return{sub:n(t+"/sub",1),truediv:n(t+"/truediv",1)}}(t+"/bn");return{conv:e,bn:o}},extractSeparableConvParams:Qd(n)}}(t,r),i=o.extractConvParams,a=o.extractConvWithBatchNormParams,s=o.extractSeparableConvParams;if(e.withSeparableConvs){var u=e.filterSizes&&e.filterSizes.length||9;n={conv0:e.isFirstLayerConv2d?i("conv0"):s("conv0"),conv1:s("conv1"),conv2:s("conv2"),conv3:s("conv3"),conv4:s("conv4"),conv5:s("conv5"),conv6:u>7?s("conv6"):void 0,conv7:u>8?s("conv7"):void 0,conv8:i("conv8")}}else n={conv0:a("conv0"),conv1:a("conv1"),conv2:a("conv2"),conv3:a("conv3"),conv4:a("conv4"),conv5:a("conv5"),conv6:a("conv6"),conv7:a("conv7"),conv8:i("conv8")};return Kd(t,r),{params:n,paramMappings:r}}(t,this.config)},e.prototype.extractParams=function(t){var n=this.config.filterSizes||e.DEFAULT_FILTER_SIZES,r=n?n.length:void 0;if(7!==r&&8!==r&&9!==r)throw new Error("TinyYolov2 - expected 7 | 8 | 9 convolutional filters, but found "+r+" filterSizes in config");return function(t,e,n,r){var o,i=tv(t),a=i.extractWeights,s=i.getRemainingWeights,u=[],c=function(t,e){var n=Xd(t,e),r=Jd(t,e);return{extractConvParams:n,extractConvWithBatchNormParams:function(r,o,i){var a=n(r,o,3,i+"/conv"),s=function(n,r){var o=Mn(t(n)),i=Mn(t(n));return e.push({paramPath:r+"/sub"},{paramPath:r+"/truediv"}),{sub:o,truediv:i}}(o,i+"/bn");return{conv:a,bn:s}},extractSeparableConvParams:r}}(a,u),l=c.extractConvParams,h=c.extractConvWithBatchNormParams,f=c.extractSeparableConvParams;if(e.withSeparableConvs){var p=r[0],d=r[1],v=r[2],m=r[3],g=r[4],y=r[5],x=r[6],b=r[7],w=r[8];o={conv0:e.isFirstLayerConv2d?l(p,d,3,"conv0"):f(p,d,"conv0"),conv1:f(d,v,"conv1"),conv2:f(v,m,"conv2"),conv3:f(m,g,"conv3"),conv4:f(g,y,"conv4"),conv5:f(y,x,"conv5"),conv6:b?f(x,b,"conv6"):void 0,conv7:w?f(b,w,"conv7"):void 0,conv8:l(w||b||x,5*n,1,"conv8")}}else p=r[0],d=r[1],v=r[2],m=r[3],g=r[4],y=r[5],x=r[6],b=r[7],w=r[8],o={conv0:h(p,d,"conv0"),conv1:h(d,v,"conv1"),conv2:h(v,m,"conv2"),conv3:h(m,g,"conv3"),conv4:h(g,y,"conv4"),conv5:h(y,x,"conv5"),conv6:h(x,b,"conv6"),conv7:h(b,w,"conv7"),conv8:l(w,5*n,1,"conv8")};if(0!==s().length)throw new Error("weights remaing after extract: "+s().length);return{params:o,paramMappings:u}}(t,this.config,this.boxEncodingSize,n)},e.prototype.extractBoxes=function(t,e,n){return yp(this,void 0,void 0,(function(){var r,o,i,a,s,u,c,l,h,f,p,d,v,m,g,y,x,b,w,C,E,_,I,R,S,k,D,A,T,F=this;return xp(this,(function(N){switch(N.label){case 0:return r=e.width,o=e.height,i=Math.max(r,o),a=i/r,s=i/o,u=t.shape[1],c=this.config.anchors.length,l=Qe((function(){var e=t.reshape([u,u,c,F.boxEncodingSize]);return[e.slice([0,0,0,0],[u,u,c,4]),e.slice([0,0,0,4],[u,u,c,1]),F.withClassScores?vo(e.slice([0,0,0,5],[u,u,c,F.config.classes.length]),3):Nn(0)]})),h=l[0],f=l[1],p=l[2],d=[],[4,f.array()];case 1:return v=N.sent(),[4,h.array()];case 2:m=N.sent(),g=0,N.label=3;case 3:if(!(g<u))return[3,12];y=0,N.label=4;case 4:if(!(y<u))return[3,11];x=0,N.label=5;case 5:return x<c?(b=Kp(v[g][y][x][0]),!n||b>n?(w=(y+Kp(m[g][y][x][0]))/u*a,C=(g+Kp(m[g][y][x][1]))/u*s,E=Math.exp(m[g][y][x][2])*this.config.anchors[x].x/u*a,_=Math.exp(m[g][y][x][3])*this.config.anchors[x].y/u*s,I=w-E/2,R=C-_/2,S={row:g,col:y,anchor:x},this.withClassScores?[4,this.extractPredictedClass(p,S)]:[3,7]):[3,9]):[3,10];case 6:return T=N.sent(),[3,8];case 7:T={classScore:1,label:0},N.label=8;case 8:D=(k=T).classScore,A=k.label,d.push(gp({box:new Lp(I,R,I+E,R+_),score:b,classScore:b*D,label:A},S)),N.label=9;case 9:return x++,[3,5];case 10:return y++,[3,4];case 11:return g++,[3,3];case 12:return h.dispose(),f.dispose(),p.dispose(),[2,d]}}))}))},e.prototype.extractPredictedClass=function(t,e){return yp(this,void 0,void 0,(function(){var n,r,o,i;return xp(this,(function(a){switch(a.label){case 0:return n=e.row,r=e.col,o=e.anchor,[4,t.array()];case 1:return i=a.sent(),[2,Array(this.config.classes.length).fill(0).map((function(t,e){return i[n][r][o][e]})).map((function(t,e){return{classScore:t,label:e}})).reduce((function(t,e){return t.classScore>e.classScore?t:e}))]}}))}))},e.DEFAULT_FILTER_SIZES=[3,16,32,64,128,256,512,1024,1024],e}(Vd),um=function(t){function e(e){void 0===e&&(e=!0);var n=Object.assign({},{withSeparableConvs:e,iouThreshold:.4,classes:["face"]},e?{anchors:Zv,meanRgb:tm}:{anchors:Qv,withClassScores:!0});return t.call(this,n)||this}return mp(e,t),Object.defineProperty(e.prototype,"withSeparableConvs",{get:function(){return this.config.withSeparableConvs},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"anchors",{get:function(){return this.config.anchors},enumerable:!0,configurable:!0}),e.prototype.locateFaces=function(t,e){return yp(this,void 0,void 0,(function(){return xp(this,(function(n){switch(n.label){case 0:return[4,this.detect(t,e)];case 1:return[2,n.sent().map((function(t){return new zp(t.score,t.relativeBox,{width:t.imageWidth,height:t.imageHeight})}))]}}))}))},e.prototype.getDefaultModelName=function(){return this.withSeparableConvs?"tiny_yolov2_separable_conv_model":"tiny_yolov2_model"},e.prototype.extractParamsFromWeigthMap=function(e){return t.prototype.extractParamsFromWeigthMap.call(this,e)},e}(sm);function cm(t,e){void 0===e&&(e=!0);var n=new um(e);return n.extractWeights(t),n}var lm=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e._name="TinyFaceDetectorOptions",e}return mp(e,t),e}(am),hm=function(){function t(){}return t.prototype.then=function(t){return yp(this,void 0,void 0,(function(){var e;return xp(this,(function(n){switch(n.label){case 0:return e=t,[4,this.run()];case 1:return[2,e.apply(void 0,[n.sent()])]}}))}))},t.prototype.run=function(){return yp(this,void 0,void 0,(function(){return xp(this,(function(t){throw new Error("ComposableTask - run is not implemented")}))}))},t}();function fm(t,e,n,r,o){return void 0===o&&(o=function(t){return t.alignedRect}),yp(this,void 0,void 0,(function(){var i,a,s,u,c;return xp(this,(function(l){switch(l.label){case 0:return i=t.map((function(t){return dv(t)?o(t):t.detection})),(s=r)?[3,5]:e instanceof Ct?[4,Md(e,i)]:[3,2];case 1:return u=l.sent(),[3,4];case 2:return[4,Nd(e,i)];case 3:u=l.sent(),l.label=4;case 4:s=u,l.label=5;case 5:return[4,n(a=s)];case 6:return c=l.sent(),a.forEach((function(t){return t instanceof Ct&&t.dispose()})),[2,c]}}))}))}function pm(t,e,n,r,o){return yp(this,void 0,void 0,(function(){var i=this;return xp(this,(function(a){return[2,fm([t],e,(function(t){return yp(i,void 0,void 0,(function(){return xp(this,(function(e){return[2,n(t[0])]}))}))}),r,o)]}))}))}function dm(t,e){var n=e[0],r=e[1];return{height:Math.floor(n*t),width:Math.floor(r*t)}}var vm=function(t){function e(e,n,r,o){return t.call(this,{left:e,top:n,right:r,bottom:o},!0)||this}return mp(e,t),e}(Bp);function mm(t){return Qe((function(){return uc(pc(t,Nn(127.5)),Nn(.0078125))}))}function gm(t,e){return Qe((function(){return Xu(Sl(t),uc(e,fu(Sl(fu(t)))))}))}function ym(t,e,n){return void 0===n&&(n=!1),Qe((function(){var r=qd(t,e.conv1,"valid");return r=gm(r,e.prelu1_alpha),r=gm(r=qd(r=nl(r,n?[2,2]:[3,3],[2,2],"same"),e.conv2,"valid"),e.prelu2_alpha),gm(r=qd(r=n?r:nl(r,[3,3],[2,2],"valid"),e.conv3,"valid"),e.prelu3_alpha)}))}function xm(t,e,n,r,o){o.stage1=[];var i=e.map((function(e){return Qe((function(){var n={scale:e},o=function(t,e){return Qe((function(){var n=dm(e,t.shape.slice(1)),r=n.height,o=n.width,i=mm(Eh.resizeBilinear(t,[r,o]));return Al(i,[0,2,1,3])}))}(t,e),i=Date.now(),a=function(t,e){return Qe((function(){var n=ym(t,e,!0),r=qd(n,e.conv4_1,"valid"),o=br(yl(r,3),3);return{prob:vo(pc(r,o),3),regions:qd(n,e.conv4_2,"valid")}}))}(o,r),s=a.prob,u=a.regions;return n.pnet=Date.now()-i,{scoresTensor:Wr(Wr(s,3)[1])[0],regionsTensor:Wr(u)[0],scale:e,statsForScale:n}}))})),a=i.map((function(t){var e=t.scoresTensor,r=t.regionsTensor,i=t.scale,a=t.statsForScale,s=function(t,e,n,r){for(var o=[],i=t.arraySync(),a=0;a<t.shape[0];a++)for(var s=0;s<t.shape[1];s++)i[a][s]>=r&&o.push(new Pp(s,a));return o.map((function(t){var r=new Lp(Math.round((2*t.y+1)/n),Math.round((2*t.x+1)/n),Math.round((2*t.y+12)/n),Math.round((2*t.x+12)/n)),o=i[t.y][t.x],a=e.arraySync();return{cell:r,score:o,region:new vm(a[t.y][t.x][0],a[t.y][t.x][1],a[t.y][t.x][2],a[t.y][t.x][3])}}))}(e,r,i,n);if(e.dispose(),r.dispose(),!s.length)return o.stage1.push(a),[];var u=Date.now(),c=Gp(s.map((function(t){return t.cell})),s.map((function(t){return t.score})),.5);return a.nms=Date.now()-u,a.numBoxes=c.length,o.stage1.push(a),c.map((function(t){return s[t]}))})),s=a.reduce((function(t,e){return t.concat(e)}),[]),u=[],c=[];if(s.length>0){var l=Date.now(),h=Gp(s.map((function(t){return t.cell})),s.map((function(t){return t.score})),.7);o.stage1_nms=Date.now()-l,c=h.map((function(t){return s[t].score})),u=h.map((function(t){return s[t]})).map((function(t){var e=t.cell,n=t.region;return new Lp(e.left+n.left*e.width,e.top+n.top*e.height,e.right+n.right*e.width,e.bottom+n.bottom*e.height).toSquare().round()}))}return{boxes:u,scores:c}}function bm(t,e,n){var r=n.width,o=n.height;return yp(this,void 0,void 0,(function(){var n,i,a,s=this;return xp(this,(function(u){switch(u.label){case 0:return n=md(t),[4,Promise.all(e.map((function(e){return yp(s,void 0,void 0,(function(){var r,o,i,a,s,u,c,l;return xp(this,(function(h){return r=e.padAtBorders(t.height,t.width),o=r.y,i=r.ey,a=r.x,s=r.ex,u=a-1,c=o-1,l=n.getImageData(u,c,s-u,i-c),[2,dd.isNodejs()?Sd(l):createImageBitmap(l)]}))}))})))];case 1:return i=u.sent(),a=[],i.forEach((function(t){var e=md(Rd({width:r,height:o}));e.drawImage(t,0,0,r,o);for(var n=e.getImageData(0,0,r,o).data,i=[],s=0;s<n.length;s+=4)i.push(n[s+2]),i.push(n[s+1]),i.push(n[s]);a.push(i)})),[2,a.map((function(t){return Qe((function(){return mm(Al(Bn(t,[1,r,o,3]),[0,2,1,3]).toFloat())}))}))]}}))}))}function wm(t,e,n,r,o){return yp(this,void 0,void 0,(function(){var i,a,s,u,c,l,h,f,p,d,v,m,g,y;return xp(this,(function(x){switch(x.label){case 0:return i=Date.now(),[4,bm(t,e,{width:24,height:24})];case 1:return a=x.sent(),o.stage2_extractImagePatches=Date.now()-i,i=Date.now(),s=a.map((function(t){var e=function(t,e){return Qe((function(){var n=ym(t,e),r=gm(iv(Nr(n,[n.shape[0],e.fc1.weights.shape[0]]),e.fc1),e.prelu4_alpha),o=iv(r,e.fc2_1),i=br(yl(o,1),1),a=vo(pc(o,i),1),s=iv(r,e.fc2_2);return{scores:Wr(a,1)[1],regions:s}}))}(t,r);return t.dispose(),e})),o.stage2_rnet=Date.now()-i,u=s.length>1?Xn(s.map((function(t){return t.scores}))):s[0].scores,h=(l=Array).from,[4,u.data()];case 2:return c=h.apply(l,[x.sent()]),u.dispose(),f=c.map((function(t,e){return{score:t,idx:e}})).filter((function(t){return t.score>n})).map((function(t){return t.idx})),p=f.map((function(t){return e[t]})),d=f.map((function(t){return c[t]})),v=[],m=[],p.length>0&&(i=Date.now(),g=Gp(p,d,.7),o.stage2_nms=Date.now()-i,y=g.map((function(t){var e=s[f[t]].regions.arraySync();return new vm(e[0][0],e[0][1],e[0][2],e[0][3])})),m=g.map((function(t){return d[t]})),v=g.map((function(t,e){return p[t].calibrate(y[e])}))),s.forEach((function(t){t.regions.dispose(),t.scores.dispose()})),[2,{boxes:v,scores:m}]}}))}))}function Cm(t,e,n,r,o){return yp(this,void 0,void 0,(function(){var i,a,s,u,c,l,h,f,p,d,v,m,g,y,x;return xp(this,(function(b){switch(b.label){case 0:return i=Date.now(),[4,bm(t,e,{width:48,height:48})];case 1:return a=b.sent(),o.stage3_extractImagePatches=Date.now()-i,i=Date.now(),s=a.map((function(t){var e=function(t,e){return Qe((function(){var n=ym(t,e);n=gm(n=qd(n=nl(n,[2,2],[2,2],"same"),e.conv4,"valid"),e.prelu4_alpha);var r=gm(iv(Nr(n,[n.shape[0],e.fc1.weights.shape[0]]),e.fc1),e.prelu5_alpha),o=iv(r,e.fc2_1),i=br(yl(o,1),1),a=vo(pc(o,i),1),s=iv(r,e.fc2_2),u=iv(r,e.fc2_3);return{scores:Wr(a,1)[1],regions:s,points:u}}))}(t,r);return t.dispose(),e})),o.stage3_onet=Date.now()-i,u=s.length>1?Xn(s.map((function(t){return t.scores}))):s[0].scores,h=(l=Array).from,[4,u.data()];case 2:return c=h.apply(l,[b.sent()]),u.dispose(),f=c.map((function(t,e){return{score:t,idx:e}})).filter((function(t){return t.score>n})).map((function(t){return t.idx})),p=f.map((function(t){var e=s[t].regions.arraySync();return new vm(e[0][0],e[0][1],e[0][2],e[0][3])})),d=f.map((function(t,n){return e[t].calibrate(p[n])})),v=f.map((function(t){return c[t]})),m=[],g=[],y=[],d.length>0&&(i=Date.now(),x=Gp(d,v,.7,!1),o.stage3_nms=Date.now()-i,m=x.map((function(t){return d[t]})),g=x.map((function(t){return v[t]})),y=x.map((function(t,e){return Array(5).fill(0).map((function(n,r){var o=s[t].points.arraySync();return new Pp(o[0][r]*(m[e].width+1)+m[e].left,o[0][r+5]*(m[e].height+1)+m[e].top)}))}))),s.forEach((function(t){t.regions.dispose(),t.scores.dispose(),t.points.dispose()})),[2,{boxes:m,scores:g,points:y}]}}))}))}var Em=function(t){function e(){return t.call(this,"Mtcnn")||this}return mp(e,t),e.prototype.load=function(e){return yp(this,void 0,void 0,(function(){return xp(this,(function(n){return console.warn("mtcnn is deprecated and will be removed soon"),[2,t.prototype.load.call(this,e)]}))}))},e.prototype.loadFromDisk=function(e){return yp(this,void 0,void 0,(function(){return xp(this,(function(n){return console.warn("mtcnn is deprecated and will be removed soon"),[2,t.prototype.loadFromDisk.call(this,e)]}))}))},e.prototype.forwardInput=function(t,e){return void 0===e&&(e={}),yp(this,void 0,void 0,(function(){var n,r,o,i,a,s,u,c,l,h,f,p,d,v,m,g,y,x,b,w,C;return xp(this,(function(E){switch(E.label){case 0:if(!(n=this.params))throw new Error("Mtcnn - load model before inference");if(!(r=t.canvases[0]))throw new Error("Mtcnn - inputCanvas is not defined, note that passing tensors into Mtcnn.forwardInput is not supported yet.");return o={},i=Date.now(),a=Qe((function(){return t=br(jf.fromPixels(r)).toFloat(),Qe((function(){return Pr(Wr(t,3).reverse(),3)}));var t})),s=function(t){return a.dispose(),o.total=Date.now()-i,t},u=a.shape.slice(1),c=u[0],l=u[1],h=new Vv(e),f=h.minFaceSize,p=h.scaleFactor,d=h.maxNumScales,v=h.scoreThresholds,m=h.scaleSteps,g=(m||function(t,e,n){for(var r=n[0],o=n[1],i=12/t,a=[],s=Math.min(r,o)*i,u=0;s>=12;)a.push(i*Math.pow(e,u)),s*=e,u+=1;return a}(f,p,[c,l])).filter((function(t){var e=dm(t,[c,l]);return Math.min(e.width,e.height)>12})).slice(0,d),o.scales=g,o.pyramid=g.map((function(t){return dm(t,[c,l])})),y=Date.now(),[4,xm(a,g,v[0],n.pnet,o)];case 1:return x=E.sent(),o.total_stage1=Date.now()-y,x.boxes.length?(o.stage2_numInputBoxes=x.boxes.length,y=Date.now(),[4,wm(r,x.boxes,v[1],n.rnet,o)]):[2,s({results:[],stats:o})];case 2:return b=E.sent(),o.total_stage2=Date.now()-y,b.boxes.length?(o.stage3_numInputBoxes=b.boxes.length,y=Date.now(),[4,Cm(r,b.boxes,v[2],n.onet,o)]):[2,s({results:[],stats:o})];case 3:return w=E.sent(),o.total_stage3=Date.now()-y,C=w.boxes.map((function(t,e){return vv(id({},new zp(w.scores[e],new $p(t.left/l,t.top/c,t.width/l,t.height/c),{height:c,width:l})),new Qp(w.points[e].map((function(e){return e.sub(new Pp(t.left,t.top)).div(new Pp(t.width,t.height))})),{width:t.width,height:t.height}))})),[2,s({results:C,stats:o})]}}))}))},e.prototype.forward=function(t,e){return void 0===e&&(e={}),yp(this,void 0,void 0,(function(){var n;return xp(this,(function(r){switch(r.label){case 0:return n=this.forwardInput,[4,Fd(t)];case 1:return[4,n.apply(this,[r.sent(),e])];case 2:return[2,r.sent().results]}}))}))},e.prototype.forwardWithStats=function(t,e){return void 0===e&&(e={}),yp(this,void 0,void 0,(function(){var n;return xp(this,(function(r){switch(r.label){case 0:return n=this.forwardInput,[4,Fd(t)];case 1:return[2,n.apply(this,[r.sent(),e])]}}))}))},e.prototype.getDefaultModelName=function(){return"mtcnn_model"},e.prototype.extractParamsFromWeigthMap=function(t){return function(t){var e=[],n=function(t,e){var n=Zd(t,e);function r(t){return{filters:n(t+"/weights",4,t+"/filters"),bias:n(t+"/bias",1)}}function o(t){return{weights:n(t+"/weights",2),bias:n(t+"/bias",1)}}function i(t){return n(t,1)}function a(t){return{conv1:r(t+"/conv1"),prelu1_alpha:i(t+"/prelu1_alpha"),conv2:r(t+"/conv2"),prelu2_alpha:i(t+"/prelu2_alpha"),conv3:r(t+"/conv3"),prelu3_alpha:i(t+"/prelu3_alpha")}}return{extractPNetParams:function(){var t=a("pnet"),e=r("pnet/conv4_1"),n=r("pnet/conv4_2");return gp(gp({},t),{conv4_1:e,conv4_2:n})},extractRNetParams:function(){var t=a("rnet"),e=o("rnet/fc1"),n=i("rnet/prelu4_alpha"),r=o("rnet/fc2_1"),s=o("rnet/fc2_2");return gp(gp({},t),{fc1:e,prelu4_alpha:n,fc2_1:r,fc2_2:s})},extractONetParams:function(){var t=a("onet"),e=r("onet/conv4"),n=i("onet/prelu4_alpha"),s=o("onet/fc1"),u=i("onet/prelu5_alpha"),c=o("onet/fc2_1"),l=o("onet/fc2_2"),h=o("onet/fc2_3");return gp(gp({},t),{conv4:e,prelu4_alpha:n,fc1:s,prelu5_alpha:u,fc2_1:c,fc2_2:l,fc2_3:h})}}}(t,e),r=n.extractPNetParams,o=n.extractRNetParams,i=n.extractONetParams,a=r(),s=o(),u=i();return Kd(t,e),{params:{pnet:a,rnet:s,onet:u},paramMappings:e}}(t)},e.prototype.extractParams=function(t){return function(t){var e=tv(t),n=e.extractWeights,r=e.getRemainingWeights,o=[],i=function(t,e){var n=Xd(t,e),r=Yd(t,e);function o(n,r){var o=Mn(t(n));return e.push({paramPath:r}),o}function i(t,e,r){return void 0===r&&(r=!1),{conv1:n(t[0],t[1],3,e+"/conv1"),prelu1_alpha:o(t[1],e+"/prelu1_alpha"),conv2:n(t[1],t[2],3,e+"/conv2"),prelu2_alpha:o(t[2],e+"/prelu2_alpha"),conv3:n(t[2],t[3],r?2:3,e+"/conv3"),prelu3_alpha:o(t[3],e+"/prelu3_alpha")}}return{extractPNetParams:function(){var t=i([3,10,16,32],"pnet"),e=n(32,2,1,"pnet/conv4_1"),r=n(32,4,1,"pnet/conv4_2");return gp(gp({},t),{conv4_1:e,conv4_2:r})},extractRNetParams:function(){var t=i([3,28,48,64],"rnet",!0),e=r(576,128,"rnet/fc1"),n=o(128,"rnet/prelu4_alpha"),a=r(128,2,"rnet/fc2_1"),s=r(128,4,"rnet/fc2_2");return gp(gp({},t),{fc1:e,prelu4_alpha:n,fc2_1:a,fc2_2:s})},extractONetParams:function(){var t=i([3,32,64,64],"onet"),e=n(64,128,2,"onet/conv4"),a=o(128,"onet/prelu4_alpha"),s=r(1152,256,"onet/fc1"),u=o(256,"onet/prelu5_alpha"),c=r(256,2,"onet/fc2_1"),l=r(256,4,"onet/fc2_2"),h=r(256,10,"onet/fc2_3");return gp(gp({},t),{conv4:e,prelu4_alpha:a,fc1:s,prelu5_alpha:u,fc2_1:c,fc2_2:l,fc2_3:h})}}}(n,o),a=i.extractPNetParams,s=i.extractRNetParams,u=i.extractONetParams,c=a(),l=s(),h=u();if(0!==r().length)throw new Error("weights remaing after extract: "+r().length);return{params:{pnet:c,rnet:l,onet:h},paramMappings:o}}(t)},e}(Vd),_m=[new Pp(1.603231,2.094468),new Pp(6.041143,7.080126),new Pp(2.882459,3.518061),new Pp(4.266906,5.178857),new Pp(9.041765,10.66308)],Im=[117.001,114.697,97.404],Rm=function(t){function e(){var e={withSeparableConvs:!0,iouThreshold:.4,classes:["face"],anchors:_m,meanRgb:Im,isFirstLayerConv2d:!0,filterSizes:[3,16,32,64,128,256,512]};return t.call(this,e)||this}return mp(e,t),Object.defineProperty(e.prototype,"anchors",{get:function(){return this.config.anchors},enumerable:!0,configurable:!0}),e.prototype.locateFaces=function(t,e){return yp(this,void 0,void 0,(function(){return xp(this,(function(n){switch(n.label){case 0:return[4,this.detect(t,e)];case 1:return[2,n.sent().map((function(t){return new zp(t.score,t.relativeBox,{width:t.imageWidth,height:t.imageHeight})}))]}}))}))},e.prototype.getDefaultModelName=function(){return"tiny_face_detector_model"},e.prototype.extractParamsFromWeigthMap=function(e){return t.prototype.extractParamsFromWeigthMap.call(this,e)},e}(sm),Sm={ssdMobilenetv1:new Kv,tinyFaceDetector:new Rm,tinyYolov2:new um,mtcnn:new Em,faceLandmark68Net:new Iv,faceLandmark68TinyNet:new Sv,faceRecognitionNet:new Ov,faceExpressionNet:new lv,ageGenderNet:new Ev},km=function(t,e){return Sm.ssdMobilenetv1.locateFaces(t,e)},Dm=function(t,e){return Sm.tinyFaceDetector.locateFaces(t,e)},Am=function(t,e){return Sm.tinyYolov2.locateFaces(t,e)},Tm=function(t,e){return Sm.mtcnn.forward(t,e)},Fm=function(t){return Sm.faceLandmark68Net.detectLandmarks(t)},Nm=function(t){return Sm.faceLandmark68TinyNet.detectLandmarks(t)},Mm=function(t){return Sm.faceRecognitionNet.computeFaceDescriptor(t)},Om=function(t){return Sm.faceExpressionNet.predictExpressions(t)},Pm=function(t){return Sm.ageGenderNet.predictAgeAndGender(t)},Bm=function(t){return Sm.ssdMobilenetv1.load(t)},Lm=function(t){return Sm.tinyFaceDetector.load(t)},Wm=function(t){return Sm.mtcnn.load(t)},zm=function(t){return Sm.tinyYolov2.load(t)},Um=function(t){return Sm.faceLandmark68Net.load(t)},Vm=function(t){return Sm.faceLandmark68TinyNet.load(t)},Gm=function(t){return Sm.faceRecognitionNet.load(t)},Hm=function(t){return Sm.faceExpressionNet.load(t)},jm=function(t){return Sm.ageGenderNet.load(t)},qm=Bm,Km=km,Xm=Fm,Ym=function(t){function e(e,n,r){var o=t.call(this)||this;return o.parentTask=e,o.input=n,o.extractedFaces=r,o}return mp(e,t),e}(hm),$m=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return mp(e,t),e.prototype.run=function(){return yp(this,void 0,void 0,(function(){var t,e,n=this;return xp(this,(function(r){switch(r.label){case 0:return[4,this.parentTask];case 1:return[4,fm(t=r.sent(),this.input,(function(t){return yp(n,void 0,void 0,(function(){return xp(this,(function(e){switch(e.label){case 0:return[4,Promise.all(t.map((function(t){return Sm.faceExpressionNet.predictExpressions(t)})))];case 1:return[2,e.sent()]}}))}))}),this.extractedFaces)];case 2:return e=r.sent(),[2,t.map((function(t,n){return fv(t,e[n])}))]}}))}))},e.prototype.withAgeAndGender=function(){return new eg(this,this.input)},e}(Ym),Jm=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return mp(e,t),e.prototype.run=function(){return yp(this,void 0,void 0,(function(){var t,e;return xp(this,(function(n){switch(n.label){case 0:return[4,this.parentTask];case 1:return(t=n.sent())?[4,pm(t,this.input,(function(t){return Sm.faceExpressionNet.predictExpressions(t)}),this.extractedFaces)]:[2];case 2:return e=n.sent(),[2,fv(t,e)]}}))}))},e.prototype.withAgeAndGender=function(){return new ng(this,this.input)},e}(Ym),Qm=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return mp(e,t),e.prototype.withAgeAndGender=function(){return new rg(this,this.input)},e.prototype.withFaceDescriptors=function(){return new ag(this,this.input)},e}($m),Zm=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return mp(e,t),e.prototype.withAgeAndGender=function(){return new og(this,this.input)},e.prototype.withFaceDescriptor=function(){return new sg(this,this.input)},e}(Jm),tg=function(t){function e(e,n,r){var o=t.call(this)||this;return o.parentTask=e,o.input=n,o.extractedFaces=r,o}return mp(e,t),e}(hm),eg=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return mp(e,t),e.prototype.run=function(){return yp(this,void 0,void 0,(function(){var t,e,n=this;return xp(this,(function(r){switch(r.label){case 0:return[4,this.parentTask];case 1:return[4,fm(t=r.sent(),this.input,(function(t){return yp(n,void 0,void 0,(function(){return xp(this,(function(e){switch(e.label){case 0:return[4,Promise.all(t.map((function(t){return Sm.ageGenderNet.predictAgeAndGender(t)})))];case 1:return[2,e.sent()]}}))}))}),this.extractedFaces)];case 2:return e=r.sent(),[2,t.map((function(t,n){var r=e[n],o=r.age;return Wv(Uv(t,r.gender,r.genderProbability),o)}))]}}))}))},e.prototype.withFaceExpressions=function(){return new $m(this,this.input)},e}(tg),ng=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return mp(e,t),e.prototype.run=function(){return yp(this,void 0,void 0,(function(){var t,e,n,r,o;return xp(this,(function(i){switch(i.label){case 0:return[4,this.parentTask];case 1:return(t=i.sent())?[4,pm(t,this.input,(function(t){return Sm.ageGenderNet.predictAgeAndGender(t)}),this.extractedFaces)]:[2];case 2:return e=i.sent(),n=e.age,r=e.gender,o=e.genderProbability,[2,Wv(Uv(t,r,o),n)]}}))}))},e.prototype.withFaceExpressions=function(){return new Jm(this,this.input)},e}(tg),rg=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return mp(e,t),e.prototype.withFaceExpressions=function(){return new Qm(this,this.input)},e.prototype.withFaceDescriptors=function(){return new ag(this,this.input)},e}(eg),og=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return mp(e,t),e.prototype.withFaceExpressions=function(){return new Zm(this,this.input)},e.prototype.withFaceDescriptor=function(){return new sg(this,this.input)},e}(ng),ig=function(t){function e(e,n){var r=t.call(this)||this;return r.parentTask=e,r.input=n,r}return mp(e,t),e}(hm),ag=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return mp(e,t),e.prototype.run=function(){return yp(this,void 0,void 0,(function(){var t;return xp(this,(function(e){switch(e.label){case 0:return[4,this.parentTask];case 1:return[4,fm(t=e.sent(),this.input,(function(t){return Promise.all(t.map((function(t){return Sm.faceRecognitionNet.computeFaceDescriptor(t)})))}),null,(function(t){return t.landmarks.align(null,{useDlibAlignment:!0})}))];case 2:return[2,e.sent().map((function(e,n){return Bv(t[n],e)}))]}}))}))},e.prototype.withFaceExpressions=function(){return new Qm(this,this.input)},e.prototype.withAgeAndGender=function(){return new rg(this,this.input)},e}(ig),sg=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return mp(e,t),e.prototype.run=function(){return yp(this,void 0,void 0,(function(){var t,e;return xp(this,(function(n){switch(n.label){case 0:return[4,this.parentTask];case 1:return(t=n.sent())?[4,pm(t,this.input,(function(t){return Sm.faceRecognitionNet.computeFaceDescriptor(t)}),null,(function(t){return t.landmarks.align(null,{useDlibAlignment:!0})}))]:[2];case 2:return e=n.sent(),[2,Bv(t,e)]}}))}))},e.prototype.withFaceExpressions=function(){return new Zm(this,this.input)},e.prototype.withAgeAndGender=function(){return new og(this,this.input)},e}(ig),ug=function(t){function e(e,n,r){var o=t.call(this)||this;return o.parentTask=e,o.input=n,o.useTinyLandmarkNet=r,o}return mp(e,t),Object.defineProperty(e.prototype,"landmarkNet",{get:function(){return this.useTinyLandmarkNet?Sm.faceLandmark68TinyNet:Sm.faceLandmark68Net},enumerable:!0,configurable:!0}),e}(hm),cg=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return mp(e,t),e.prototype.run=function(){return yp(this,void 0,void 0,(function(){var t,e,n,r,o,i=this;return xp(this,(function(a){switch(a.label){case 0:return[4,this.parentTask];case 1:return t=a.sent(),e=t.map((function(t){return t.detection})),this.input instanceof Ct?[4,Md(this.input,e)]:[3,3];case 2:return r=a.sent(),[3,5];case 3:return[4,Nd(this.input,e)];case 4:r=a.sent(),a.label=5;case 5:return n=r,[4,Promise.all(n.map((function(t){return i.landmarkNet.detectLandmarks(t)})))];case 6:return o=a.sent(),n.forEach((function(t){return t instanceof Ct&&t.dispose()})),[2,t.map((function(t,e){return vv(t,o[e])}))]}}))}))},e.prototype.withFaceExpressions=function(){return new Qm(this,this.input)},e.prototype.withAgeAndGender=function(){return new rg(this,this.input)},e.prototype.withFaceDescriptors=function(){return new ag(this,this.input)},e}(ug),lg=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return mp(e,t),e.prototype.run=function(){return yp(this,void 0,void 0,(function(){var t,e,n,r,o;return xp(this,(function(i){switch(i.label){case 0:return[4,this.parentTask];case 1:return(t=i.sent())?(e=t.detection,this.input instanceof Ct?[4,Md(this.input,[e])]:[3,3]):[2];case 2:return r=i.sent(),[3,5];case 3:return[4,Nd(this.input,[e])];case 4:r=i.sent(),i.label=5;case 5:return n=r,[4,this.landmarkNet.detectLandmarks(n[0])];case 6:return o=i.sent(),n.forEach((function(t){return t instanceof Ct&&t.dispose()})),[2,vv(t,o)]}}))}))},e.prototype.withFaceExpressions=function(){return new Zm(this,this.input)},e.prototype.withAgeAndGender=function(){return new og(this,this.input)},e.prototype.withFaceDescriptor=function(){return new sg(this,this.input)},e}(ug),hg=function(t){function e(e,n){void 0===n&&(n=new qv);var r=t.call(this)||this;return r.input=e,r.options=n,r}return mp(e,t),e}(hm),fg=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return mp(e,t),e.prototype.run=function(){return yp(this,void 0,void 0,(function(){var t,e,n,r;return xp(this,(function(o){switch(o.label){case 0:return e=(t=this).input,(n=t.options)instanceof Vv?[4,Sm.mtcnn.forward(e,n)]:[3,2];case 1:return[2,o.sent().map((function(t){return t.detection}))];case 2:if(r=n instanceof lm?function(t){return Sm.tinyFaceDetector.locateFaces(t,n)}:n instanceof qv?function(t){return Sm.ssdMobilenetv1.locateFaces(t,n)}:n instanceof am?function(t){return Sm.tinyYolov2.locateFaces(t,n)}:null,!r)throw new Error("detectFaces - expected options to be instance of TinyFaceDetectorOptions | SsdMobilenetv1Options | MtcnnOptions | TinyYolov2Options");return[2,r(e)]}}))}))},e.prototype.runAndExtendWithFaceDetections=function(){var t=this;return new Promise((function(e){return yp(t,void 0,void 0,(function(){var t;return xp(this,(function(n){switch(n.label){case 0:return[4,this.run()];case 1:return t=n.sent(),[2,e(t.map((function(t){return id({},t)})))]}}))}))}))},e.prototype.withFaceLandmarks=function(t){return void 0===t&&(t=!1),new cg(this.runAndExtendWithFaceDetections(),this.input,t)},e.prototype.withFaceExpressions=function(){return new $m(this.runAndExtendWithFaceDetections(),this.input)},e.prototype.withAgeAndGender=function(){return new eg(this.runAndExtendWithFaceDetections(),this.input)},e}(hg),pg=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return mp(e,t),e.prototype.run=function(){return yp(this,void 0,void 0,(function(){var t,e;return xp(this,(function(n){switch(n.label){case 0:return[4,new fg(this.input,this.options)];case 1:return t=n.sent(),e=t[0],t.forEach((function(t){t.score>e.score&&(e=t)})),[2,e]}}))}))},e.prototype.runAndExtendWithFaceDetection=function(){var t=this;return new Promise((function(e){return yp(t,void 0,void 0,(function(){var t;return xp(this,(function(n){switch(n.label){case 0:return[4,this.run()];case 1:return t=n.sent(),[2,e(t?id({},t):void 0)]}}))}))}))},e.prototype.withFaceLandmarks=function(t){return void 0===t&&(t=!1),new lg(this.runAndExtendWithFaceDetection(),this.input,t)},e.prototype.withFaceExpressions=function(){return new Jm(this.runAndExtendWithFaceDetection(),this.input)},e.prototype.withAgeAndGender=function(){return new ng(this.runAndExtendWithFaceDetection(),this.input)},e}(hg);function dg(t,e){return void 0===e&&(e=new qv),new pg(t,e)}function vg(t,e){return void 0===e&&(e=new qv),new fg(t,e)}function mg(t,e){return yp(this,void 0,void 0,(function(){return xp(this,(function(n){switch(n.label){case 0:return console.warn("allFacesSsdMobilenetv1 is deprecated and will be removed soon, use the high level api instead"),[4,vg(t,new qv(e?{minConfidence:e}:{})).withFaceLandmarks().withFaceDescriptors()];case 1:return[2,n.sent()]}}))}))}function gg(t,e){return void 0===e&&(e={}),yp(this,void 0,void 0,(function(){return xp(this,(function(n){switch(n.label){case 0:return console.warn("allFacesTinyYolov2 is deprecated and will be removed soon, use the high level api instead"),[4,vg(t,new am(e)).withFaceLandmarks().withFaceDescriptors()];case 1:return[2,n.sent()]}}))}))}function yg(t,e){return void 0===e&&(e={}),yp(this,void 0,void 0,(function(){return xp(this,(function(n){switch(n.label){case 0:return console.warn("allFacesMtcnn is deprecated and will be removed soon, use the high level api instead"),[4,vg(t,new Vv(e)).withFaceLandmarks().withFaceDescriptors()];case 1:return[2,n.sent()]}}))}))}var xg=mg;function bg(t,e){if(t.length!==e.length)throw new Error("euclideanDistance: arr1.length !== arr2.length");var n=Array.from(t),r=Array.from(e);return Math.sqrt(n.map((function(t,e){return t-r[e]})).reduce((function(t,e){return t+Math.pow(e,2)}),0))}var wg=function(){function t(t,e){void 0===e&&(e=.6),this._distanceThreshold=e;var n=Array.isArray(t)?t:[t];if(!n.length)throw new Error("FaceRecognizer.constructor - expected atleast one input");var r=1,o=function(){return"person "+r++};this._labeledDescriptors=n.map((function(t){if(t instanceof nd)return t;if(t instanceof Float32Array)return new nd(o(),[t]);if(t.descriptor&&t.descriptor instanceof Float32Array)return new nd(o(),[t.descriptor]);throw new Error("FaceRecognizer.constructor - expected inputs to be of type LabeledFaceDescriptors | WithFaceDescriptor<any> | Float32Array | Array<LabeledFaceDescriptors | WithFaceDescriptor<any> | Float32Array>")}))}return Object.defineProperty(t.prototype,"labeledDescriptors",{get:function(){return this._labeledDescriptors},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"distanceThreshold",{get:function(){return this._distanceThreshold},enumerable:!0,configurable:!0}),t.prototype.computeMeanDistance=function(t,e){return e.map((function(e){return bg(e,t)})).reduce((function(t,e){return t+e}),0)/(e.length||1)},t.prototype.matchDescriptor=function(t){var e=this;return this.labeledDescriptors.map((function(n){var r=n.descriptors,o=n.label;return new td(o,e.computeMeanDistance(t,r))})).reduce((function(t,e){return t.distance<e.distance?t:e}))},t.prototype.findBestMatch=function(t){var e=this.matchDescriptor(t);return e.distance<this.distanceThreshold?e:new td("unknown",e.distance)},t.prototype.toJSON=function(){return{distanceThreshold:this.distanceThreshold,labeledDescriptors:this.labeledDescriptors.map((function(t){return t.toJSON()}))}},t.fromJSON=function(e){var n=e.labeledDescriptors.map((function(t){return nd.fromJSON(t)}));return new t(n,e.distanceThreshold)},t}();function Cg(t){var e=new Em;return e.extractWeights(t),e}function Eg(t){var e=new Rm;return e.extractWeights(t),e}function _g(t,e){var n=new wp(e.width,e.height),r=n.width,o=n.height;if(r<=0||o<=0)throw new Error("resizeResults - invalid dimensions: "+JSON.stringify({width:r,height:o}));if(Array.isArray(t))return t.map((function(t){return _g(t,{width:r,height:o})}));if(dv(t)){var i=t.detection.forSize(r,o),a=t.unshiftedLandmarks.forSize(i.box.width,i.box.height);return vv(id(t,i),a)}return od(t)?id(t,t.detection.forSize(r,o)):t instanceof Jp||t instanceof zp?t.forSize(r,o):t}},504:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Face=void 0;const r=n(8),o=n(991);e.Face=class{constructor(t,e){const n=t._positions;this.left=n[3],this.right=n[15],this.nose=n[33],this.bottom=n[9],this.betweenEyes=n[28],this.direction=new o.FaceDirection(t),this.frame=e}getFacePosiotion(){return Math.sqrt(Math.pow(this.frame.width/2-this.nose.x,2)+Math.pow(this.frame.height/2-this.nose.y,2))}getWidth(){return(0,r.getDistance)(this.left,this.right)}getHeight(){return(0,r.getDistance)(this.betweenEyes,this.bottom)}}},991:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.FaceDirection=void 0;const r=n(8);e.FaceDirection=class{constructor(t){const e=t._positions,n=e[3],o=e[15],i=e[33],a=e[9],s=e[28],u=(0,r.getDistance)(n,o),c=(0,r.getDistance)(s,a);this.distanceLeft=(0,r.getDistance)(n,i)/u,this.distanceTop=(0,r.getDistance)(s,i)/c}isLookStraight(){return this.distanceLeft>.4&&this.distanceLeft<.7&&this.distanceTop>.32&&this.distanceTop<.4}isLookLeft(){return this.distanceLeft>.7}isLookRight(){return this.distanceLeft<.4}isLookUp(){return this.distanceTop<.32}isLookDown(){return this.distanceTop>.4}}},741:function(t,e,n){"use strict";var r=this&&this.__createBinding||(Object.create?function(t,e,n,r){void 0===r&&(r=n);var o=Object.getOwnPropertyDescriptor(e,n);o&&!("get"in o?!e.__esModule:o.writable||o.configurable)||(o={enumerable:!0,get:function(){return e[n]}}),Object.defineProperty(t,r,o)}:function(t,e,n,r){void 0===r&&(r=n),t[r]=e[n]}),o=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),i=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)"default"!==n&&Object.prototype.hasOwnProperty.call(t,n)&&r(e,t,n);return o(e,t),e},a=this&&this.__awaiter||function(t,e,n,r){return new(n||(n=Promise))((function(o,i){function a(t){try{u(r.next(t))}catch(t){i(t)}}function s(t){try{u(r.throw(t))}catch(t){i(t)}}function u(t){var e;t.done?o(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(a,s)}u((r=r.apply(t,e||[])).next())}))};Object.defineProperty(e,"__esModule",{value:!0}),e.Selfie=void 0;const s=i(n(660)),u=n(504),c=n(41);e.Selfie=class{constructor(t){this.faceWidth=170,this.allowedFaceDeviation=45,this.frame={width:720,height:560},this.debug=!1,this.lastFaceFrame={},this.onFrameProcessedCallback=()=>{},this.canvas=null,this.outputCanvas=null,this.video=null,this.isPlayStarted=!1,this.config=t,this.debug=t.debug||window.location.search.includes("selfie-debug")||!1,this.faceWidth=t.faceWidth||this.faceWidth,this.allowedFaceDeviation=t.allowedFaceDeviation||this.allowedFaceDeviation,this.frame=t.frame||this.frame,this.video=t.video,this.onFrameProcessedCallback=t.onFrameProcessed||this.onFrameProcessedCallback}updateCanvas(){const t=this.video;if(!t)return;const e=()=>{this.outputCanvas.getContext("2d").drawImage(this.video,0,0,this.outputCanvas.width,this.outputCanvas.height),t.requestVideoFrameCallback(e)};t.requestVideoFrameCallback(e)}start(){return a(this,void 0,void 0,(function*(){var t,e;const{video:n,videoContainer:r}=this.config;return n.style.width="350px",n.style.height="350px",n.style.position="absolute",this.outputCanvas=document.createElement("canvas"),this.outputCanvas.width=(null===(t=this.video)||void 0===t?void 0:t.videoWidth)||this.frame.width,this.outputCanvas.height=(null===(e=this.video)||void 0===e?void 0:e.videoHeight)||this.frame.height,n.insertAdjacentElement("afterend",this.outputCanvas),n.addEventListener("play",(()=>a(this,void 0,void 0,(function*(){this.canvas=s.createCanvasFromMedia(n),this.canvas.style.position="absolute",n.style.opacity="0",r.append(this.canvas);const t={width:n.width,height:n.height};s.matchDimensions(this.canvas,t),this.updateCanvas(),this.isPlayStarted=!0})))),yield Promise.all([s.nets.tinyFaceDetector.loadFromUri("./weights"),s.nets.faceLandmark68Net.loadFromUri("./weights")]),navigator.mediaDevices.getUserMedia({video:{width:this.frame.width,height:this.frame.height,facingMode:"user"}}).then((t=>{n.srcObject=t})).catch((t=>{throw console.error("Error accessing the camera",t),t}))}))}startProcessingLoop(){return a(this,void 0,void 0,(function*(){var t,e;const{video:n}=this.config;for(;!this.isPlayStarted;)yield new Promise((t=>setTimeout(t,100)));for(;;){yield new Promise((t=>setTimeout(t,100)));try{const o=yield s.detectAllFaces(n,new s.TinyFaceDetectorOptions).withFaceLandmarks(),i=s.resizeResults(o,this.frame);if(o.length>0){const n=new u.Face(o[0].landmarks,this.frame),a=n.getWidth(),l=Math.abs(this.faceWidth-a),h=n.getFacePosiotion(),f=l>this.allowedFaceDeviation||h>2*this.allowedFaceDeviation;null===(e=null===(t=this.canvas)||void 0===t?void 0:t.getContext("2d"))||void 0===e||e.clearRect(0,0,this.canvas.width,this.canvas.height),this.debug&&this.canvas&&s.draw.drawFaceLandmarks(this.canvas,i),this.lastFaceFrame=(r=(0,c.getFaceFrame)(i[0]),{x:Math.round(r.x),y:Math.round(r.y),width:Math.round(r.width),height:Math.round(r.height)}),this.onFrameProcessedCallback({face:n,faceFrame:this.lastFaceFrame,detection:i[0],overlayVisible:f})}}catch(t){console.error(t)}}var r}))}captureImage(){var t,e;if(!this.video)throw new Error("Video not initialized");const n=null===(e=null===(t=this.outputCanvas)||void 0===t?void 0:t.getContext("2d"))||void 0===e?void 0:e.getImageData(0,0,this.video.videoWidth,this.video.videoHeight);return(null==n?void 0:n.data)||new Uint8ClampedArray}}},821:function(t,e,n){"use strict";var r=this&&this.__createBinding||(Object.create?function(t,e,n,r){void 0===r&&(r=n);var o=Object.getOwnPropertyDescriptor(e,n);o&&!("get"in o?!e.__esModule:o.writable||o.configurable)||(o={enumerable:!0,get:function(){return e[n]}}),Object.defineProperty(t,r,o)}:function(t,e,n,r){void 0===r&&(r=n),t[r]=e[n]}),o=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),i=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)"default"!==n&&Object.prototype.hasOwnProperty.call(t,n)&&r(e,t,n);return o(e,t),e};Object.defineProperty(e,"__esModule",{value:!0});const a=n(741),s=i(n(35)),u=i(n(432));window.Selfie=a.Selfie,window.SelfieProcessors=s,window.SelfiePipeline=u},900:function(t,e){"use strict";var n=this&&this.__awaiter||function(t,e,n,r){return new(n||(n=Promise))((function(o,i){function a(t){try{u(r.next(t))}catch(t){i(t)}}function s(t){try{u(r.throw(t))}catch(t){i(t)}}function u(t){var e;t.done?o(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(a,s)}u((r=r.apply(t,e||[])).next())}))};Object.defineProperty(e,"__esModule",{value:!0}),e.Pipeline=void 0,e.Pipeline=class{constructor(){this.stages=[]}addStage(t){return this.stages.push(t),t}process(t){return n(this,void 0,void 0,(function*(){let e=t;for(const t of this.stages)e=yield t.process(e);return e}))}}},996:function(t,e){"use strict";var n=this&&this.__awaiter||function(t,e,n,r){return new(n||(n=Promise))((function(o,i){function a(t){try{u(r.next(t))}catch(t){i(t)}}function s(t){try{u(r.throw(t))}catch(t){i(t)}}function u(t){var e;t.done?o(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(a,s)}u((r=r.apply(t,e||[])).next())}))};Object.defineProperty(e,"__esModule",{value:!0}),e.PipelineBasicStage=void 0,e.PipelineBasicStage=class{constructor(t){this._result=null,this._isProcessed=!1,this.operation=t}process(t){return n(this,void 0,void 0,(function*(){return this._result=yield this.operation(t),this._isProcessed=!0,this._result}))}getResult(){if(!this._isProcessed)throw new Error("Stage has not been processed");return this._result}}},311:function(t,e){"use strict";var n=this&&this.__awaiter||function(t,e,n,r){return new(n||(n=Promise))((function(o,i){function a(t){try{u(r.next(t))}catch(t){i(t)}}function s(t){try{u(r.throw(t))}catch(t){i(t)}}function u(t){var e;t.done?o(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(a,s)}u((r=r.apply(t,e||[])).next())}))};Object.defineProperty(e,"__esModule",{value:!0}),e.PipelineSplitter=void 0,e.PipelineSplitter=class{constructor(){this.stages=[]}addStage(t){return this.stages.push(t),t}process(t){return n(this,void 0,void 0,(function*(){let e=t;for(const n of this.stages)e=yield n.process(t);return e}))}}},620:function(t,e){"use strict";var n=this&&this.__awaiter||function(t,e,n,r){return new(n||(n=Promise))((function(o,i){function a(t){try{u(r.next(t))}catch(t){i(t)}}function s(t){try{u(r.throw(t))}catch(t){i(t)}}function u(t){var e;t.done?o(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(a,s)}u((r=r.apply(t,e||[])).next())}))};Object.defineProperty(e,"__esModule",{value:!0}),e.PipelineStage=void 0,e.PipelineStage=class{constructor(t){this._result=null,this._isProcessed=!1,this.pipeline=t}process(t){return n(this,void 0,void 0,(function*(){return this._result=yield this.pipeline.process(t),this._isProcessed=!0,this._result}))}getResult(){if(!this._isProcessed)throw new Error("Stage has not been processed");return this._result}}},432:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.PipelineSplitter=e.PipelineBasicStage=e.PipelineStage=e.Pipeline=void 0;var r=n(900);Object.defineProperty(e,"Pipeline",{enumerable:!0,get:function(){return r.Pipeline}});var o=n(620);Object.defineProperty(e,"PipelineStage",{enumerable:!0,get:function(){return o.PipelineStage}});var i=n(996);Object.defineProperty(e,"PipelineBasicStage",{enumerable:!0,get:function(){return i.PipelineBasicStage}});var a=n(311);Object.defineProperty(e,"PipelineSplitter",{enumerable:!0,get:function(){return a.PipelineSplitter}})},196:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t,e,n){const r=new Uint8ClampedArray(e.width*e.height*4);let{width:o,height:i,x:a,y:s}=e;for(let e=0;e<i;e++)for(let i=0;i<o;i++){const u=(e+s)*t.width+(i+a),c=e*o+i;r[4*c]=n[4*u],r[4*c+1]=n[4*u+1],r[4*c+2]=n[4*u+2],r[4*c+3]=n[4*u+3]}return r}},35:function(t,e,n){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.resizeFrame=e.toImage=e.laplacian=e.cropFrame=e.variance=void 0;var o=n(624);Object.defineProperty(e,"variance",{enumerable:!0,get:function(){return r(o).default}});var i=n(196);Object.defineProperty(e,"cropFrame",{enumerable:!0,get:function(){return r(i).default}});var a=n(542);Object.defineProperty(e,"laplacian",{enumerable:!0,get:function(){return r(a).default}});var s=n(873);Object.defineProperty(e,"toImage",{enumerable:!0,get:function(){return r(s).default}});var u=n(266);Object.defineProperty(e,"resizeFrame",{enumerable:!0,get:function(){return r(u).default}})},542:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});const n=[0,1,0,1,-4,1,0,1,0];e.default=function(t,e){return new Promise((r=>{const o=new Uint8ClampedArray(e.length);let{width:i,height:a}=t;i=Math.floor(i),a=Math.floor(a);for(let t=1;t<a-1;t++)for(let r=1;r<i-1;r++){let a=0,s=t*i*4+4*r;for(let t=-1;t<=1;t++)for(let r=-1;r<=1;r++){const o=3*(t+1)+(r+1);a+=e[s+4*(t*i+r)]*n[o]*2}a*=3,o[s]=a,o[s+1]=a,o[s+2]=a,o[s+3]=255}r(o)}))}},266:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t,e,n){const r=new Uint8ClampedArray(e.width*e.height*4),o=t.width/e.width,i=t.height/e.height;for(let a=0;a<e.height;a++)for(let s=0;s<e.width;s++){const u=s*o,c=a*i,l=Math.floor(u),h=Math.min(Math.ceil(u),t.width-1),f=Math.floor(c),p=Math.min(Math.ceil(c),t.height-1),d=u-l,v=c-f,m=4*(f*t.width+l),g=4*(f*t.width+h),y=4*(p*t.width+l),x=4*(p*t.width+h);for(let t=0;t<4;t++){const o=n[m+t]*(1-d)+n[g+t]*d,i=n[y+t]*(1-d)+n[x+t]*d;r[4*(a*e.width+s)+t]=o*(1-v)+i*v}}return r}},873:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t,e){const n=document.createElement("canvas");n.width=t.width,n.height=t.height;const r=n.getContext("2d");if(!r)throw new Error("Could not get canvas context");const o=new ImageData(e,t.width,t.height);r.putImageData(o,0,0);const i=n.toDataURL();return n.remove(),i}},624:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t){const e=new Uint8ClampedArray(t.length/4);for(let n=0;n<t.length;n+=4)e[n/4]=t[n];const n=e.reduce(((t,e)=>t+e),0)/e.length,r=[];for(let t=0;t<e.length;t++)r.push(Math.pow(e[t]-n,2));return r.reduce(((t,e)=>t+e),0)/e.length}},8:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.getDistance=void 0,e.getDistance=function(t,e){return Math.sqrt(Math.pow(e.x-t.x,2)+Math.pow(e.y-t.y,2))}},41:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.getFaceFrame=void 0,e.getFaceFrame=t=>({height:t.detection.box.height,width:t.detection.box.width,x:t.detection.box.x,y:t.detection.box.y})},294:()=>{},202:()=>{},645:()=>{},619:()=>{}},e={};function n(r){var o=e[r];if(void 0!==o)return o.exports;var i=e[r]={exports:{}};return t[r].call(i.exports,i,i.exports,n),i.exports}n.d=(t,e)=>{for(var r in e)n.o(e,r)&&!n.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:e[r]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),n.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n(821)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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RTFFLEVDTkQyd0MsRUFBb0IzMUcsRUFBSSxXQUN2QixHQUEwQixpQkFBZjR3QixXQUF5QixPQUFPQSxXQUMzQyxJQUNDLE9BQU8vMEIsTUFBUSxJQUFJa1osU0FBUyxjQUFiLEVBQ2hCLENBQUUsTUFBTzFaLEdBQ1IsR0FBc0IsaUJBQVgyaEIsT0FBcUIsT0FBT0EsTUFDeEMsQ0FDQSxDQVB1QixHQ0F4QjI0RixFQUFvQno1RyxFQUFJLENBQUNvMkUsRUFBSzJqQyxJQUFVMTZHLE9BQU9RLFVBQVVKLGVBQWUwQixLQUFLaTFFLEVBQUsyakMsR0NDbEZOLEVBQW9CLzVHLEVBQUsrMEIsSUFDSCxvQkFBWHp6QixRQUEwQkEsT0FBT2c1RyxhQUMxQzM2RyxPQUFPcUQsZUFBZSt4QixFQUFTenpCLE9BQU9nNUcsWUFBYSxDQUFFeDVHLE1BQU8sV0FFN0RuQixPQUFPcUQsZUFBZSt4QixFQUFTLGFBQWMsQ0FBRWowQixPQUFPLEdBQU8sRUNGcENpNUcsRUFBb0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL0B0ZW5zb3JmbG93L3RmanMtY29yZS9kaXN0L3RmLWNvcmUuZXNtLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvZmFjZS1hcGkuanMvYnVpbGQvZXM2L2RyYXcvZHJhd0NvbnRvdXIuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy90c2xpYi90c2xpYi5lczYuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9mYWNlLWFwaS5qcy9idWlsZC9lczYvY2xhc3Nlcy9EaW1lbnNpb25zLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvZmFjZS1hcGkuanMvYnVpbGQvZXM2L3V0aWxzL2luZGV4LmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvZmFjZS1hcGkuanMvYnVpbGQvZXM2L2NsYXNzZXMvUG9pbnQuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9mYWNlLWFwaS5qcy9idWlsZC9lczYvY2xhc3Nlcy9Cb3guanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9mYWNlLWFwaS5qcy9idWlsZC9lczYvY2xhc3Nlcy9Cb3VuZGluZ0JveC5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2ZhY2UtYXBpLmpzL2J1aWxkL2VzNi9jbGFzc2VzL09iamVjdERldGVjdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2ZhY2UtYXBpLmpzL2J1aWxkL2VzNi9jbGFzc2VzL0ZhY2VEZXRlY3Rpb24uanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9mYWNlLWFwaS5qcy9idWlsZC9lczYvb3BzL2lvdS5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2ZhY2UtYXBpLmpzL2J1aWxkL2VzNi9vcHMvbWluQmJveC5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2ZhY2UtYXBpLmpzL2J1aWxkL2VzNi9vcHMvbm9uTWF4U3VwcHJlc3Npb24uanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9mYWNlLWFwaS5qcy9idWlsZC9lczYvb3BzL25vcm1hbGl6ZS5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2ZhY2UtYXBpLmpzL2J1aWxkL2VzNi9vcHMvcGFkVG9TcXVhcmUuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9mYWNlLWFwaS5qcy9idWlsZC9lczYvb3BzL3NodWZmbGVBcnJheS5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2ZhY2UtYXBpLmpzL2J1aWxkL2VzNi9vcHMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9mYWNlLWFwaS5qcy9idWlsZC9lczYvY2xhc3Nlcy9SZWN0LmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvZmFjZS1hcGkuanMvYnVpbGQvZXM2L2Vudi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2ZhY2UtYXBpLmpzL2J1aWxkL2VzNi9jbGFzc2VzL0ZhY2VMYW5kbWFya3MuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9mYWNlLWFwaS5qcy9idWlsZC9lczYvY2xhc3Nlcy9GYWNlTGFuZG1hcmtzNS5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2ZhY2UtYXBpLmpzL2J1aWxkL2VzNi9jbGFzc2VzL0ZhY2VMYW5kbWFya3M2OC5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2ZhY2UtYXBpLmpzL2J1aWxkL2VzNi9jbGFzc2VzL0ZhY2VNYXRjaC5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2ZhY2UtYXBpLmpzL2J1aWxkL2VzNi9jbGFzc2VzL0xhYmVsZWRCb3guanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9mYWNlLWFwaS5qcy9idWlsZC9lczYvY2xhc3Nlcy9MYWJlbGVkRmFjZURlc2NyaXB0b3JzLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvZmFjZS1hcGkuanMvYnVpbGQvZXM2L2NsYXNzZXMvUHJlZGljdGVkQm94LmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvZmFjZS1hcGkuanMvYnVpbGQvZXM2L2ZhY3Rvcmllcy9XaXRoRmFjZURldGVjdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2ZhY2UtYXBpLmpzL2J1aWxkL2VzNi9lbnYvY3JlYXRlQnJvd3NlckVudi5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2ZhY2UtYXBpLmpzL2J1aWxkL2VzNi9lbnYvY3JlYXRlRmlsZVN5c3RlbS5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2ZhY2UtYXBpLmpzL2J1aWxkL2VzNi9lbnYvY3JlYXRlTm9kZWpzRW52LmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvZmFjZS1hcGkuanMvYnVpbGQvZXM2L2Vudi9pc0Jyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9mYWNlLWFwaS5qcy9idWlsZC9lczYvZW52L2lzTm9kZWpzLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvZmFjZS1hcGkuanMvYnVpbGQvZXM2L2RyYXcvRHJhd1RleHRGaWVsZC5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2ZhY2UtYXBpLmpzL2J1aWxkL2VzNi9kb20vcmVzb2x2ZUlucHV0LmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvZmFjZS1hcGkuanMvYnVpbGQvZXM2L2RvbS9nZXRDb250ZXh0MmRPclRocm93LmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvZmFjZS1hcGkuanMvYnVpbGQvZXM2L2RyYXcvRHJhd0JveC5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2ZhY2UtYXBpLmpzL2J1aWxkL2VzNi9kcmF3L2RyYXdEZXRlY3Rpb25zLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvZmFjZS1hcGkuanMvYnVpbGQvZXM2L2RvbS9pc01lZGlhTG9hZGVkLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvZmFjZS1hcGkuanMvYnVpbGQvZXM2L2RvbS9hd2FpdE1lZGlhTG9hZGVkLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvZmFjZS1hcGkuanMvYnVpbGQvZXM2L2RvbS9idWZmZXJUb0ltYWdlLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvZmFjZS1hcGkuanMvYnVpbGQvZXM2L2RvbS9nZXRNZWRpYURpbWVuc2lvbnMuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9mYWNlLWFwaS5qcy9idWlsZC9lczYvZG9tL2NyZWF0ZUNhbnZhcy5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2ZhY2UtYXBpLmpzL2J1aWxkL2VzNi9kb20vaW1hZ2VUZW5zb3JUb0NhbnZhcy5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2ZhY2UtYXBpLmpzL2J1aWxkL2VzNi9kb20vaXNNZWRpYUVsZW1lbnQuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9mYWNlLWFwaS5qcy9idWlsZC9lczYvZG9tL2ltYWdlVG9TcXVhcmUuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9mYWNlLWFwaS5qcy9idWlsZC9lczYvZG9tL05ldElucHV0LmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvZmFjZS1hcGkuanMvYnVpbGQvZXM2L2RvbS90b05ldElucHV0LmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvZmFjZS1hcGkuanMvYnVpbGQvZXM2L2RvbS9leHRyYWN0RmFjZXMuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9mYWNlLWFwaS5qcy9idWlsZC9lczYvZG9tL2V4dHJhY3RGYWNlVGVuc29ycy5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2ZhY2UtYXBpLmpzL2J1aWxkL2VzNi9kb20vZmV0Y2hPclRocm93LmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvZmFjZS1hcGkuanMvYnVpbGQvZXM2L2RvbS9mZXRjaEltYWdlLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvZmFjZS1hcGkuanMvYnVpbGQvZXM2L2RvbS9mZXRjaEpzb24uanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9mYWNlLWFwaS5qcy9idWlsZC9lczYvZG9tL2ZldGNoTmV0V2VpZ2h0cy5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2ZhY2UtYXBpLmpzL2J1aWxkL2VzNi9jb21tb24vZ2V0TW9kZWxVcmlzLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvZmFjZS1hcGkuanMvYnVpbGQvZXM2L2RvbS9sb2FkV2VpZ2h0TWFwLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvZmFjZS1hcGkuanMvYnVpbGQvZXM2L2RvbS9tYXRjaERpbWVuc2lvbnMuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9mYWNlLWFwaS5qcy9idWlsZC9lczYvTmV1cmFsTmV0d29yay5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2ZhY2UtYXBpLmpzL2J1aWxkL2VzNi9jb21tb24vZGVwdGh3aXNlU2VwYXJhYmxlQ29udi5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2ZhY2UtYXBpLmpzL2J1aWxkL2VzNi9mYWNlRmVhdHVyZUV4dHJhY3Rvci9kZW5zZUJsb2NrLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvZmFjZS1hcGkuanMvYnVpbGQvZXM2L2NvbW1vbi9jb252TGF5ZXIuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9mYWNlLWFwaS5qcy9idWlsZC9lczYvY29tbW9uL2Rpc3Bvc2VVbnVzZWRXZWlnaHRUZW5zb3JzLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvZmFjZS1hcGkuanMvYnVpbGQvZXM2L2NvbW1vbi9leHRyYWN0Q29udlBhcmFtc0ZhY3RvcnkuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9mYWNlLWFwaS5qcy9idWlsZC9lczYvY29tbW9uL2V4dHJhY3RGQ1BhcmFtc0ZhY3RvcnkuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9mYWNlLWFwaS5qcy9idWlsZC9lczYvY29tbW9uL3R5cGVzLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvZmFjZS1hcGkuanMvYnVpbGQvZXM2L2NvbW1vbi9leHRyYWN0U2VwYXJhYmxlQ29udlBhcmFtc0ZhY3RvcnkuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9mYWNlLWFwaS5qcy9idWlsZC9lczYvY29tbW9uL2V4dHJhY3RXZWlnaHRFbnRyeUZhY3RvcnkuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9mYWNlLWFwaS5qcy9idWlsZC9lczYvY29tbW9uL2V4dHJhY3RXZWlnaHRzRmFjdG9yeS5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2ZhY2UtYXBpLmpzL2J1aWxkL2VzNi9mYWNlRmVhdHVyZUV4dHJhY3Rvci9leHRyYWN0b3JzRmFjdG9yeS5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2ZhY2UtYXBpLmpzL2J1aWxkL2VzNi9jb21tb24vbG9hZENvbnZQYXJhbXNGYWN0b3J5LmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvZmFjZS1hcGkuanMvYnVpbGQvZXM2L2ZhY2VGZWF0dXJlRXh0cmFjdG9yL2xvYWRQYXJhbXNGYWN0b3J5LmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvZmFjZS1hcGkuanMvYnVpbGQvZXM2L2ZhY2VGZWF0dXJlRXh0cmFjdG9yL0ZhY2VGZWF0dXJlRXh0cmFjdG9yLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvZmFjZS1hcGkuanMvYnVpbGQvZXM2L2ZhY2VGZWF0dXJlRXh0cmFjdG9yL2V4dHJhY3RQYXJhbXNGcm9tV2VpZ3RoTWFwLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvZmFjZS1hcGkuanMvYnVpbGQvZXM2L2ZhY2VGZWF0dXJlRXh0cmFjdG9yL2V4dHJhY3RQYXJhbXMuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9mYWNlLWFwaS5qcy9idWlsZC9lczYvY29tbW9uL2Z1bGx5Q29ubmVjdGVkTGF5ZXIuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9mYWNlLWFwaS5qcy9idWlsZC9lczYvZmFjZVByb2Nlc3Nvci91dGlsLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvZmFjZS1hcGkuanMvYnVpbGQvZXM2L2ZhY2VQcm9jZXNzb3IvRmFjZVByb2Nlc3Nvci5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2ZhY2UtYXBpLmpzL2J1aWxkL2VzNi9mYWNlUHJvY2Vzc29yL2V4dHJhY3RQYXJhbXMuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9mYWNlLWFwaS5qcy9idWlsZC9lczYvZmFjZVByb2Nlc3Nvci9leHRyYWN0UGFyYW1zRnJvbVdlaWd0aE1hcC5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2ZhY2UtYXBpLmpzL2J1aWxkL2VzNi9mYWNlRXhwcmVzc2lvbk5ldC9GYWNlRXhwcmVzc2lvbnMuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9mYWNlLWFwaS5qcy9idWlsZC9lczYvZmFjZUV4cHJlc3Npb25OZXQvRmFjZUV4cHJlc3Npb25OZXQuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9mYWNlLWFwaS5qcy9idWlsZC9lczYvZmFjdG9yaWVzL1dpdGhGYWNlRXhwcmVzc2lvbnMuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9mYWNlLWFwaS5qcy9idWlsZC9lczYvZHJhdy9kcmF3RmFjZUV4cHJlc3Npb25zLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvZmFjZS1hcGkuanMvYnVpbGQvZXM2L2ZhY3Rvcmllcy9XaXRoRmFjZUxhbmRtYXJrcy5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2ZhY2UtYXBpLmpzL2J1aWxkL2VzNi9kcmF3L0RyYXdGYWNlTGFuZG1hcmtzLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvZmFjZS1hcGkuanMvYnVpbGQvZXM2L3hjZXB0aW9uL1RpbnlYY2VwdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2ZhY2UtYXBpLmpzL2J1aWxkL2VzNi9hZ2VHZW5kZXJOZXQvdHlwZXMuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9mYWNlLWFwaS5qcy9idWlsZC9lczYveGNlcHRpb24vZXh0cmFjdFBhcmFtc0Zyb21XZWlndGhNYXAuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9mYWNlLWFwaS5qcy9idWlsZC9lczYveGNlcHRpb24vZXh0cmFjdFBhcmFtcy5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2ZhY2UtYXBpLmpzL2J1aWxkL2VzNi9hZ2VHZW5kZXJOZXQvQWdlR2VuZGVyTmV0LmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvZmFjZS1hcGkuanMvYnVpbGQvZXM2L2FnZUdlbmRlck5ldC9leHRyYWN0UGFyYW1zLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvZmFjZS1hcGkuanMvYnVpbGQvZXM2L2FnZUdlbmRlck5ldC9leHRyYWN0UGFyYW1zRnJvbVdlaWd0aE1hcC5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2ZhY2UtYXBpLmpzL2J1aWxkL2VzNi9mYWNlTGFuZG1hcmtOZXQvRmFjZUxhbmRtYXJrNjhOZXRCYXNlLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvZmFjZS1hcGkuanMvYnVpbGQvZXM2L2ZhY2VMYW5kbWFya05ldC9GYWNlTGFuZG1hcms2OE5ldC5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2ZhY2UtYXBpLmpzL2J1aWxkL2VzNi9mYWNlRmVhdHVyZUV4dHJhY3Rvci9UaW55RmFjZUZlYXR1cmVFeHRyYWN0b3IuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9mYWNlLWFwaS5qcy9idWlsZC9lczYvZmFjZUZlYXR1cmVFeHRyYWN0b3IvZXh0cmFjdFBhcmFtc0Zyb21XZWlndGhNYXBUaW55LmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvZmFjZS1hcGkuanMvYnVpbGQvZXM2L2ZhY2VGZWF0dXJlRXh0cmFjdG9yL2V4dHJhY3RQYXJhbXNUaW55LmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvZmFjZS1hcGkuanMvYnVpbGQvZXM2L2ZhY2VMYW5kbWFya05ldC9GYWNlTGFuZG1hcms2OFRpbnlOZXQuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9mYWNlLWFwaS5qcy9idWlsZC9lczYvZmFjZUxhbmRtYXJrTmV0L2luZGV4LmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvZmFjZS1hcGkuanMvYnVpbGQvZXM2L2ZhY2VSZWNvZ25pdGlvbk5ldC9jb252TGF5ZXIuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9mYWNlLWFwaS5qcy9idWlsZC9lczYvZmFjZVJlY29nbml0aW9uTmV0L3NjYWxlTGF5ZXIuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9mYWNlLWFwaS5qcy9idWlsZC9lczYvZmFjZVJlY29nbml0aW9uTmV0L2V4dHJhY3RQYXJhbXMuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9mYWNlLWFwaS5qcy9idWlsZC9lczYvZmFjZVJlY29nbml0aW9uTmV0L3Jlc2lkdWFsTGF5ZXIuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9mYWNlLWFwaS5qcy9idWlsZC9lczYvZmFjZVJlY29nbml0aW9uTmV0L0ZhY2VSZWNvZ25pdGlvbk5ldC5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2ZhY2UtYXBpLmpzL2J1aWxkL2VzNi9mYWNlUmVjb2duaXRpb25OZXQvZXh0cmFjdFBhcmFtc0Zyb21XZWlndGhNYXAuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9mYWNlLWFwaS5qcy9idWlsZC9lczYvZmFjZVJlY29nbml0aW9uTmV0L2luZGV4LmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvZmFjZS1hcGkuanMvYnVpbGQvZXM2L2ZhY3Rvcmllcy9XaXRoRmFjZURlc2NyaXB0b3IuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9mYWNlLWFwaS5qcy9idWlsZC9lczYvZmFjdG9yaWVzL1dpdGhBZ2UuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9mYWNlLWFwaS5qcy9idWlsZC9lczYvZmFjdG9yaWVzL1dpdGhHZW5kZXIuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9mYWNlLWFwaS5qcy9idWlsZC9lczYvbXRjbm4vTXRjbm5PcHRpb25zLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvZmFjZS1hcGkuanMvYnVpbGQvZXM2L3NzZE1vYmlsZW5ldHYxL3BvaW50d2lzZUNvbnZMYXllci5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2ZhY2UtYXBpLmpzL2J1aWxkL2VzNi9zc2RNb2JpbGVuZXR2MS9ub25NYXhTdXBwcmVzc2lvbi5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2ZhY2UtYXBpLmpzL2J1aWxkL2VzNi9zc2RNb2JpbGVuZXR2MS9ib3hQcmVkaWN0aW9uTGF5ZXIuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9mYWNlLWFwaS5qcy9idWlsZC9lczYvc3NkTW9iaWxlbmV0djEvU3NkTW9iaWxlbmV0djFPcHRpb25zLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvZmFjZS1hcGkuanMvYnVpbGQvZXM2L3NzZE1vYmlsZW5ldHYxL1NzZE1vYmlsZW5ldHYxLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvZmFjZS1hcGkuanMvYnVpbGQvZXM2L3NzZE1vYmlsZW5ldHYxL21vYmlsZU5ldFYxLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvZmFjZS1hcGkuanMvYnVpbGQvZXM2L3NzZE1vYmlsZW5ldHYxL3ByZWRpY3Rpb25MYXllci5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2ZhY2UtYXBpLmpzL2J1aWxkL2VzNi9zc2RNb2JpbGVuZXR2MS9vdXRwdXRMYXllci5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2ZhY2UtYXBpLmpzL2J1aWxkL2VzNi9zc2RNb2JpbGVuZXR2MS9leHRyYWN0UGFyYW1zRnJvbVdlaWd0aE1hcC5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2ZhY2UtYXBpLmpzL2J1aWxkL2VzNi9zc2RNb2JpbGVuZXR2MS9leHRyYWN0UGFyYW1zLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvZmFjZS1hcGkuanMvYnVpbGQvZXM2L3NzZE1vYmlsZW5ldHYxL2luZGV4LmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvZmFjZS1hcGkuanMvYnVpbGQvZXM2L3RpbnlZb2xvdjIvVGlueVlvbG92Mk9wdGlvbnMuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9mYWNlLWFwaS5qcy9idWlsZC9lczYvdGlueVlvbG92Mi9jb25zdC5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2ZhY2UtYXBpLmpzL2J1aWxkL2VzNi90aW55WW9sb3YyL2NvbmZpZy5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2ZhY2UtYXBpLmpzL2J1aWxkL2VzNi90aW55WW9sb3YyL2xlYWt5LmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvZmFjZS1hcGkuanMvYnVpbGQvZXM2L3RpbnlZb2xvdjIvY29udldpdGhCYXRjaE5vcm0uanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9mYWNlLWFwaS5qcy9idWlsZC9lczYvdGlueVlvbG92Mi9kZXB0aHdpc2VTZXBhcmFibGVDb252LmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvZmFjZS1hcGkuanMvYnVpbGQvZXM2L3RpbnlZb2xvdjIvVGlueVlvbG92MkJhc2UuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9mYWNlLWFwaS5qcy9idWlsZC9lczYvdGlueVlvbG92Mi9leHRyYWN0UGFyYW1zRnJvbVdlaWd0aE1hcC5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2ZhY2UtYXBpLmpzL2J1aWxkL2VzNi90aW55WW9sb3YyL2V4dHJhY3RQYXJhbXMuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9mYWNlLWFwaS5qcy9idWlsZC9lczYvdGlueVlvbG92Mi9UaW55WW9sb3YyLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvZmFjZS1hcGkuanMvYnVpbGQvZXM2L3RpbnlZb2xvdjIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9mYWNlLWFwaS5qcy9idWlsZC9lczYvdGlueUZhY2VEZXRlY3Rvci9UaW55RmFjZURldGVjdG9yT3B0aW9ucy5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2ZhY2UtYXBpLmpzL2J1aWxkL2VzNi9nbG9iYWxBcGkvQ29tcG9zYWJsZVRhc2suanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9mYWNlLWFwaS5qcy9idWlsZC9lczYvZ2xvYmFsQXBpL2V4dHJhY3RGYWNlc0FuZENvbXB1dGVSZXN1bHRzLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvZmFjZS1hcGkuanMvYnVpbGQvZXM2L210Y25uL2dldFNpemVzRm9yU2NhbGUuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9mYWNlLWFwaS5qcy9idWlsZC9lczYvbXRjbm4vTXRjbm5Cb3guanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9mYWNlLWFwaS5qcy9idWlsZC9lczYvbXRjbm4vbm9ybWFsaXplLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvZmFjZS1hcGkuanMvYnVpbGQvZXM2L210Y25uL3ByZWx1LmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvZmFjZS1hcGkuanMvYnVpbGQvZXM2L210Y25uL3NoYXJlZExheWVycy5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2ZhY2UtYXBpLmpzL2J1aWxkL2VzNi9tdGNubi9zdGFnZTEuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9mYWNlLWFwaS5qcy9idWlsZC9lczYvbXRjbm4vUE5ldC5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2ZhY2UtYXBpLmpzL2J1aWxkL2VzNi9tdGNubi9jb25maWcuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9mYWNlLWFwaS5qcy9idWlsZC9lczYvbXRjbm4vZXh0cmFjdEltYWdlUGF0Y2hlcy5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2ZhY2UtYXBpLmpzL2J1aWxkL2VzNi9tdGNubi9zdGFnZTIuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9mYWNlLWFwaS5qcy9idWlsZC9lczYvbXRjbm4vUk5ldC5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2ZhY2UtYXBpLmpzL2J1aWxkL2VzNi9tdGNubi9zdGFnZTMuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9mYWNlLWFwaS5qcy9idWlsZC9lczYvbXRjbm4vT05ldC5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2ZhY2UtYXBpLmpzL2J1aWxkL2VzNi9tdGNubi9NdGNubi5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2ZhY2UtYXBpLmpzL2J1aWxkL2VzNi9tdGNubi9iZ3JUb1JnYlRlbnNvci5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2ZhY2UtYXBpLmpzL2J1aWxkL2VzNi9tdGNubi9weXJhbWlkRG93bi5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2ZhY2UtYXBpLmpzL2J1aWxkL2VzNi9tdGNubi9leHRyYWN0UGFyYW1zRnJvbVdlaWd0aE1hcC5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2ZhY2UtYXBpLmpzL2J1aWxkL2VzNi9tdGNubi9leHRyYWN0UGFyYW1zLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvZmFjZS1hcGkuanMvYnVpbGQvZXM2L3RpbnlGYWNlRGV0ZWN0b3IvY29uc3QuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9mYWNlLWFwaS5qcy9idWlsZC9lczYvdGlueUZhY2VEZXRlY3Rvci9UaW55RmFjZURldGVjdG9yLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvZmFjZS1hcGkuanMvYnVpbGQvZXM2L2dsb2JhbEFwaS9uZXRzLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvZmFjZS1hcGkuanMvYnVpbGQvZXM2L2dsb2JhbEFwaS9QcmVkaWN0RmFjZUV4cHJlc3Npb25zVGFzay5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2ZhY2UtYXBpLmpzL2J1aWxkL2VzNi9nbG9iYWxBcGkvUHJlZGljdEFnZUFuZEdlbmRlclRhc2suanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9mYWNlLWFwaS5qcy9idWlsZC9lczYvZ2xvYmFsQXBpL0NvbXB1dGVGYWNlRGVzY3JpcHRvcnNUYXNrcy5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2ZhY2UtYXBpLmpzL2J1aWxkL2VzNi9nbG9iYWxBcGkvRGV0ZWN0RmFjZUxhbmRtYXJrc1Rhc2tzLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvZmFjZS1hcGkuanMvYnVpbGQvZXM2L2dsb2JhbEFwaS9EZXRlY3RGYWNlc1Rhc2tzLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvZmFjZS1hcGkuanMvYnVpbGQvZXM2L2dsb2JhbEFwaS9kZXRlY3RGYWNlcy5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2ZhY2UtYXBpLmpzL2J1aWxkL2VzNi9nbG9iYWxBcGkvYWxsRmFjZXMuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9mYWNlLWFwaS5qcy9idWlsZC9lczYvZXVjbGlkZWFuRGlzdGFuY2UuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9mYWNlLWFwaS5qcy9idWlsZC9lczYvZ2xvYmFsQXBpL0ZhY2VNYXRjaGVyLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvZmFjZS1hcGkuanMvYnVpbGQvZXM2L210Y25uL2luZGV4LmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvZmFjZS1hcGkuanMvYnVpbGQvZXM2L3RpbnlGYWNlRGV0ZWN0b3IvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9mYWNlLWFwaS5qcy9idWlsZC9lczYvcmVzaXplUmVzdWx0cy5qcyIsIndlYnBhY2s6Ly8vLi9GYWNlLnRzIiwid2VicGFjazovLy8uL0ZhY2VEaXJlY3Rpb24udHMiLCJ3ZWJwYWNrOi8vLy4vU2VsZmllLnRzIiwid2VicGFjazovLy8uL2luZGV4LnRzIiwid2VicGFjazovLy8uL3BpcGVsaW5lL1BpcGVsaW5lLnRzIiwid2VicGFjazovLy8uL3BpcGVsaW5lL1BpcGVsaW5lQmFzaWNTdGFnZS50cyIsIndlYnBhY2s6Ly8vLi9waXBlbGluZS9QaXBlbGluZVNwbGl0dGVyLnRzIiwid2VicGFjazovLy8uL3BpcGVsaW5lL1BpcGVsaW5lU3RhZ2UudHMiLCJ3ZWJwYWNrOi8vLy4vcGlwZWxpbmUvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vLy4vcHJvY2Vzc29ycy9jcm9wRnJhbWUudHMiLCJ3ZWJwYWNrOi8vLy4vcHJvY2Vzc29ycy9pbmRleC50cyIsIndlYnBhY2s6Ly8vLi9wcm9jZXNzb3JzL2xhcGxhY2lhbi50cyIsIndlYnBhY2s6Ly8vLi9wcm9jZXNzb3JzL3Jlc2l6ZUZyYW1lLnRzIiwid2VicGFjazovLy8uL3Byb2Nlc3NvcnMvdG9JbWFnZS50cyIsIndlYnBhY2s6Ly8vLi9wcm9jZXNzb3JzL3ZhcmlhbmNlLnRzIiwid2VicGFjazovLy8uL3V0aWxzL2dldERpc3RhbmNlLnRzIiwid2VicGFjazovLy8uL3V0aWxzL2dldEZhY2VGcmFtZS50cyIsIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vL3dlYnBhY2svcnVudGltZS9kZWZpbmUgcHJvcGVydHkgZ2V0dGVycyIsIndlYnBhY2s6Ly8vd2VicGFjay9ydW50aW1lL2dsb2JhbCIsIndlYnBhY2s6Ly8vd2VicGFjay9ydW50aW1lL2hhc093blByb3BlcnR5IHNob3J0aGFuZCIsIndlYnBhY2s6Ly8vd2VicGFjay9ydW50aW1lL21ha2UgbmFtZXNwYWNlIG9iamVjdCIsIndlYnBhY2s6Ly8vd2VicGFjay9zdGFydHVwIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTEMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKi9cbnZhciB0PWZ1bmN0aW9uKGUsbil7cmV0dXJuKHQ9T2JqZWN0LnNldFByb3RvdHlwZU9mfHx7X19wcm90b19fOltdfWluc3RhbmNlb2YgQXJyYXkmJmZ1bmN0aW9uKHQsZSl7dC5fX3Byb3RvX189ZX18fGZ1bmN0aW9uKHQsZSl7Zm9yKHZhciBuIGluIGUpZS5oYXNPd25Qcm9wZXJ0eShuKSYmKHRbbl09ZVtuXSl9KShlLG4pfTtmdW5jdGlvbiBlKGUsbil7ZnVuY3Rpb24gcigpe3RoaXMuY29uc3RydWN0b3I9ZX10KGUsbiksZS5wcm90b3R5cGU9bnVsbD09PW4/T2JqZWN0LmNyZWF0ZShuKTooci5wcm90b3R5cGU9bi5wcm90b3R5cGUsbmV3IHIpfWZ1bmN0aW9uIG4odCxlLG4scil7cmV0dXJuIG5ldyhufHwobj1Qcm9taXNlKSkoKGZ1bmN0aW9uKG8sYSl7ZnVuY3Rpb24gaSh0KXt0cnl7dShyLm5leHQodCkpfWNhdGNoKHQpe2EodCl9fWZ1bmN0aW9uIHModCl7dHJ5e3Uoci50aHJvdyh0KSl9Y2F0Y2godCl7YSh0KX19ZnVuY3Rpb24gdSh0KXt0LmRvbmU/byh0LnZhbHVlKTpuZXcgbigoZnVuY3Rpb24oZSl7ZSh0LnZhbHVlKX0pKS50aGVuKGkscyl9dSgocj1yLmFwcGx5KHQsZXx8W10pKS5uZXh0KCkpfSkpfWZ1bmN0aW9uIHIodCxlKXt2YXIgbixyLG8sYSxpPXtsYWJlbDowLHNlbnQ6ZnVuY3Rpb24oKXtpZigxJm9bMF0pdGhyb3cgb1sxXTtyZXR1cm4gb1sxXX0sdHJ5czpbXSxvcHM6W119O3JldHVybiBhPXtuZXh0OnMoMCksdGhyb3c6cygxKSxyZXR1cm46cygyKX0sXCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiYoYVtTeW1ib2wuaXRlcmF0b3JdPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXN9KSxhO2Z1bmN0aW9uIHMoYSl7cmV0dXJuIGZ1bmN0aW9uKHMpe3JldHVybiBmdW5jdGlvbihhKXtpZihuKXRocm93IG5ldyBUeXBlRXJyb3IoXCJHZW5lcmF0b3IgaXMgYWxyZWFkeSBleGVjdXRpbmcuXCIpO2Zvcig7aTspdHJ5e2lmKG49MSxyJiYobz0yJmFbMF0/ci5yZXR1cm46YVswXT9yLnRocm93fHwoKG89ci5yZXR1cm4pJiZvLmNhbGwociksMCk6ci5uZXh0KSYmIShvPW8uY2FsbChyLGFbMV0pKS5kb25lKXJldHVybiBvO3N3aXRjaChyPTAsbyYmKGE9WzImYVswXSxvLnZhbHVlXSksYVswXSl7Y2FzZSAwOmNhc2UgMTpvPWE7YnJlYWs7Y2FzZSA0OnJldHVybiBpLmxhYmVsKysse3ZhbHVlOmFbMV0sZG9uZTohMX07Y2FzZSA1OmkubGFiZWwrKyxyPWFbMV0sYT1bMF07Y29udGludWU7Y2FzZSA3OmE9aS5vcHMucG9wKCksaS50cnlzLnBvcCgpO2NvbnRpbnVlO2RlZmF1bHQ6aWYoIShvPShvPWkudHJ5cykubGVuZ3RoPjAmJm9bby5sZW5ndGgtMV0pJiYoNj09PWFbMF18fDI9PT1hWzBdKSl7aT0wO2NvbnRpbnVlfWlmKDM9PT1hWzBdJiYoIW98fGFbMV0+b1swXSYmYVsxXTxvWzNdKSl7aS5sYWJlbD1hWzFdO2JyZWFrfWlmKDY9PT1hWzBdJiZpLmxhYmVsPG9bMV0pe2kubGFiZWw9b1sxXSxvPWE7YnJlYWt9aWYobyYmaS5sYWJlbDxvWzJdKXtpLmxhYmVsPW9bMl0saS5vcHMucHVzaChhKTticmVha31vWzJdJiZpLm9wcy5wb3AoKSxpLnRyeXMucG9wKCk7Y29udGludWV9YT1lLmNhbGwodCxpKX1jYXRjaCh0KXthPVs2LHRdLHI9MH1maW5hbGx5e249bz0wfWlmKDUmYVswXSl0aHJvdyBhWzFdO3JldHVybnt2YWx1ZTphWzBdP2FbMV06dm9pZCAwLGRvbmU6ITB9fShbYSxzXSl9fX12YXIgbz1mdW5jdGlvbigpe2Z1bmN0aW9uIHQodCl7dGhpcy5nbG9iYWw9dCx0aGlzLmZsYWdzPXt9LHRoaXMuZmxhZ1JlZ2lzdHJ5PXt9LHRoaXMudXJsRmxhZ3M9e30sdGhpcy5wb3B1bGF0ZVVSTEZsYWdzKCl9cmV0dXJuIHQucHJvdG90eXBlLnNldFBsYXRmb3JtPWZ1bmN0aW9uKHQsZSl7bnVsbCE9dGhpcy5wbGF0Zm9ybSYmY29uc29sZS53YXJuKFwiUGxhdGZvcm0gXCIrdGhpcy5wbGF0Zm9ybU5hbWUrXCIgaGFzIGFscmVhZHkgYmVlbiBzZXQuIE92ZXJ3cml0aW5nIHRoZSBwbGF0Zm9ybSB3aXRoIFwiK2UrXCIuXCIpLHRoaXMucGxhdGZvcm1OYW1lPXQsdGhpcy5wbGF0Zm9ybT1lfSx0LnByb3RvdHlwZS5yZWdpc3RlckZsYWc9ZnVuY3Rpb24odCxlLG4pe2lmKHRoaXMuZmxhZ1JlZ2lzdHJ5W3RdPXtldmFsdWF0aW9uRm46ZSxzZXRIb29rOm59LG51bGwhPXRoaXMudXJsRmxhZ3NbdF0pe3ZhciByPXRoaXMudXJsRmxhZ3NbdF07Y29uc29sZS53YXJuKFwiU2V0dGluZyBmZWF0dXJlIG92ZXJyaWRlIGZyb20gVVJMIFwiK3QrXCI6IFwiK3IrXCIuXCIpLHRoaXMuc2V0KHQscil9fSx0LnByb3RvdHlwZS5nZXQ9ZnVuY3Rpb24odCl7cmV0dXJuIHQgaW4gdGhpcy5mbGFncz90aGlzLmZsYWdzW3RdOih0aGlzLmZsYWdzW3RdPXRoaXMuZXZhbHVhdGVGbGFnKHQpLHRoaXMuZmxhZ3NbdF0pfSx0LnByb3RvdHlwZS5nZXROdW1iZXI9ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMuZ2V0KHQpfSx0LnByb3RvdHlwZS5nZXRCb29sPWZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLmdldCh0KX0sdC5wcm90b3R5cGUuZ2V0RmxhZ3M9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5mbGFnc30sT2JqZWN0LmRlZmluZVByb3BlcnR5KHQucHJvdG90eXBlLFwiZmVhdHVyZXNcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuZmxhZ3N9LGVudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiEwfSksdC5wcm90b3R5cGUuc2V0PWZ1bmN0aW9uKHQsZSl7aWYobnVsbD09dGhpcy5mbGFnUmVnaXN0cnlbdF0pdGhyb3cgbmV3IEVycm9yKFwiQ2Fubm90IHNldCBmbGFnIFwiK3QrXCIgYXMgaXQgaGFzIG5vdCBiZWVuIHJlZ2lzdGVyZWQuXCIpO3RoaXMuZmxhZ3NbdF09ZSxudWxsIT10aGlzLmZsYWdSZWdpc3RyeVt0XS5zZXRIb29rJiZ0aGlzLmZsYWdSZWdpc3RyeVt0XS5zZXRIb29rKGUpfSx0LnByb3RvdHlwZS5ldmFsdWF0ZUZsYWc9ZnVuY3Rpb24odCl7aWYobnVsbD09dGhpcy5mbGFnUmVnaXN0cnlbdF0pdGhyb3cgbmV3IEVycm9yKFwiQ2Fubm90IGV2YWx1YXRlIGZsYWcgJ1wiK3QrXCInOiBubyBldmFsdWF0aW9uIGZ1bmN0aW9uIGZvdW5kLlwiKTtyZXR1cm4gdGhpcy5mbGFnUmVnaXN0cnlbdF0uZXZhbHVhdGlvbkZuKCl9LHQucHJvdG90eXBlLnNldEZsYWdzPWZ1bmN0aW9uKHQpe3RoaXMuZmxhZ3M9T2JqZWN0LmFzc2lnbih7fSx0KX0sdC5wcm90b3R5cGUucmVzZXQ9ZnVuY3Rpb24oKXt0aGlzLmZsYWdzPXt9LHRoaXMudXJsRmxhZ3M9e30sdGhpcy5wb3B1bGF0ZVVSTEZsYWdzKCl9LHQucHJvdG90eXBlLnBvcHVsYXRlVVJMRmxhZ3M9ZnVuY3Rpb24oKXt2YXIgdD10aGlzO2lmKHZvaWQgMCE9PXRoaXMuZ2xvYmFsJiZ2b2lkIDAhPT10aGlzLmdsb2JhbC5sb2NhdGlvbiYmdm9pZCAwIT09dGhpcy5nbG9iYWwubG9jYXRpb24uc2VhcmNoKXt2YXIgZSxuLHI9KGU9dGhpcy5nbG9iYWwubG9jYXRpb24uc2VhcmNoLG49e30sZS5yZXBsYWNlKC9bPyZdKFtePT8mXSspKD86PShbXiZdKikpPy9nLChmdW5jdGlvbih0KXtmb3IodmFyIGU9W10scj0xO3I8YXJndW1lbnRzLmxlbmd0aDtyKyspZVtyLTFdPWFyZ3VtZW50c1tyXTtyZXR1cm4gYShuLGVbMF0sZVsxXSksZS5qb2luKFwiPVwiKX0pKSxuKTtpZihcInRmanNmbGFnc1wiaW4gcilyLnRmanNmbGFncy5zcGxpdChcIixcIikuZm9yRWFjaCgoZnVuY3Rpb24oZSl7dmFyIG49ZS5zcGxpdChcIjpcIikscj1uWzBdLG89blsxXTt0LnVybEZsYWdzW3JdPWZ1bmN0aW9uKHQsZSl7aWYoXCJ0cnVlXCI9PT0oZT1lLnRvTG93ZXJDYXNlKCkpfHxcImZhbHNlXCI9PT1lKXJldHVyblwidHJ1ZVwiPT09ZTtpZihcIlwiKyArZT09PWUpcmV0dXJuK2U7dGhyb3cgbmV3IEVycm9yKFwiQ291bGQgbm90IHBhcnNlIHZhbHVlIGZsYWcgdmFsdWUgXCIrZStcIiBmb3IgZmxhZyBcIit0K1wiLlwiKX0ocixvKX0pKX19LHR9KCk7ZnVuY3Rpb24gYSh0LGUsbil7dFtkZWNvZGVVUklDb21wb25lbnQoZSldPWRlY29kZVVSSUNvbXBvbmVudChufHxcIlwiKX1mdW5jdGlvbiBpKCl7cmV0dXJuIHN9dmFyIHM9bnVsbDt2YXIgdT1uZXcgTWFwLGM9bmV3IE1hcDtmdW5jdGlvbiBsKHQsZSl7dmFyIG49Zyh0LGUpO3JldHVybiB1LmdldChuKX1mdW5jdGlvbiBoKHQpe3JldHVybiBjLmdldCh0KX1mdW5jdGlvbiBmKHQpe2Zvcih2YXIgZT11LmVudHJpZXMoKSxuPVtdOzspe3ZhciByPWUubmV4dCgpLG89ci5kb25lLGE9ci52YWx1ZTtpZihvKWJyZWFrO3ZhciBpPWFbMF0scz1hWzFdO2kuc3BsaXQoXCJfXCIpWzBdPT09dCYmbi5wdXNoKHMpfXJldHVybiBufWZ1bmN0aW9uIGQodCl7dmFyIGU9dC5rZXJuZWxOYW1lLG49dC5iYWNrZW5kTmFtZSxyPWcoZSxuKTtpZih1LmhhcyhyKSl0aHJvdyBuZXcgRXJyb3IoXCJUaGUga2VybmVsICdcIitlK1wiJyBmb3IgYmFja2VuZCAnXCIrbitcIicgaXMgYWxyZWFkeSByZWdpc3RlcmVkXCIpO3Uuc2V0KHIsdCl9ZnVuY3Rpb24gcCh0KXt2YXIgZT10Lmtlcm5lbE5hbWU7Yy5oYXMoZSkmJmNvbnNvbGUud2FybihcIk92ZXJyaWRpbmcgdGhlIGdyYWRpZW50IGZvciAnXCIrZStcIidcIiksYy5zZXQoZSx0KX1mdW5jdGlvbiB2KHQsZSl7dmFyIG49Zyh0LGUpO2lmKCF1LmhhcyhuKSl0aHJvdyBuZXcgRXJyb3IoXCJUaGUga2VybmVsICdcIit0K1wiJyBmb3IgYmFja2VuZCAnXCIrZStcIicgaXMgbm90IHJlZ2lzdGVyZWRcIik7dS5kZWxldGUobil9ZnVuY3Rpb24gbSh0KXtpZighYy5oYXModCkpdGhyb3cgbmV3IEVycm9yKFwiVGhlIGdyYWRpZW50ICdcIit0K1wiJyBmb3IgYmFja2VuZCBpcyBub3QgcmVnaXN0ZXJlZFwiKTtjLmRlbGV0ZSh0KX1mdW5jdGlvbiBnKHQsZSl7cmV0dXJuIGUrXCJfXCIrdH1mdW5jdGlvbiB5KHQpe2Zvcih2YXIgZT10Lmxlbmd0aCxuPTAscj0wO2U+MDspcj1NYXRoLnJhbmRvbSgpKmV8MCxuPXRbLS1lXSx0W2VdPXRbcl0sdFtyXT1ufWZ1bmN0aW9uIHgodCxlLG4pe3JldHVybiBNYXRoLm1heCh0LE1hdGgubWluKGUsbikpfWZ1bmN0aW9uIGIodCl7cmV0dXJuIHQlMj09MD90OnQrMX1mdW5jdGlvbiB3KHQpe2Zvcih2YXIgZT0wLG49MDtuPHQubGVuZ3RoO24rKyllKz10W25dO3JldHVybiBlfWZ1bmN0aW9uIEModCxlKXtpZighdCl0aHJvdyBuZXcgRXJyb3IoXCJzdHJpbmdcIj09dHlwZW9mIGU/ZTplKCkpfWZ1bmN0aW9uIEUodCxlLG4pe3ZvaWQgMD09PW4mJihuPVwiXCIpLEMoUyh0LGUpLChmdW5jdGlvbigpe3JldHVybiBuK1wiIFNoYXBlcyBcIit0K1wiIGFuZCBcIitlK1wiIG11c3QgbWF0Y2hcIn0pKX1mdW5jdGlvbiBSKHQpe0MobnVsbCE9dCwoZnVuY3Rpb24oKXtyZXR1cm5cIlRoZSBpbnB1dCB0byB0aGUgdGVuc29yIGNvbnN0cnVjdG9yIG11c3QgYmUgYSBub24tbnVsbCB2YWx1ZS5cIn0pKX1mdW5jdGlvbiBJKHQsZSxuKXtpZih2b2lkIDA9PT1lJiYoZT1bXSksdm9pZCAwPT09biYmKG49ITEpLG51bGw9PWUmJihlPVtdKSxBcnJheS5pc0FycmF5KHQpfHxWKHQpJiYhbilmb3IodmFyIHI9MDtyPHQubGVuZ3RoOysrcilJKHRbcl0sZSxuKTtlbHNlIGUucHVzaCh0KTtyZXR1cm4gZX1mdW5jdGlvbiBrKHQpe2lmKDA9PT10Lmxlbmd0aClyZXR1cm4gMTtmb3IodmFyIGU9dFswXSxuPTE7bjx0Lmxlbmd0aDtuKyspZSo9dFtuXTtyZXR1cm4gZX1mdW5jdGlvbiBTKHQsZSl7aWYodD09PWUpcmV0dXJuITA7aWYobnVsbD09dHx8bnVsbD09ZSlyZXR1cm4hMTtpZih0Lmxlbmd0aCE9PWUubGVuZ3RoKXJldHVybiExO2Zvcih2YXIgbj0wO248dC5sZW5ndGg7bisrKWlmKHRbbl0hPT1lW25dKXJldHVybiExO3JldHVybiEwfWZ1bmN0aW9uIEEodCl7cmV0dXJuIHQlMT09MH1mdW5jdGlvbiBEKHQpe2lmKG51bGwhPU1hdGgudGFuaClyZXR1cm4gTWF0aC50YW5oKHQpO2lmKHQ9PT0xLzApcmV0dXJuIDE7aWYodD09PS0xLzApcmV0dXJuLTE7dmFyIGU9TWF0aC5leHAoMip0KTtyZXR1cm4oZS0xKS8oZSsxKX1mdW5jdGlvbiBUKHQpe3ZhciBlPU1hdGguY2VpbChNYXRoLnNxcnQodCkpO3JldHVybltlLE1hdGguY2VpbCh0L2UpXX1mdW5jdGlvbiBOKHQsZSl7cmV0dXJuIGU8PXQubGVuZ3RoP3Q6dCtcIiBcIi5yZXBlYXQoZS10Lmxlbmd0aCl9ZnVuY3Rpb24gRih0LGUsbil7cmV0dXJuIHZvaWQgMD09PWUmJihlPWZ1bmN0aW9uKHQpe3JldHVybiAwfSksbmV3IFByb21pc2UoKGZ1bmN0aW9uKHIsbyl7dmFyIGE9MCxpPWZ1bmN0aW9uKCl7aWYodCgpKXIoKTtlbHNle2ErKzt2YXIgcz1lKGEpO251bGwhPW4mJmE+PW4/bygpOnNldFRpbWVvdXQoaSxzKX19O2koKX0pKX1mdW5jdGlvbiBfKHQsZSl7Zm9yKHZhciBuPTEscj0tMSxvPTA7bzx0Lmxlbmd0aDsrK28paWYodFtvXT49MCluKj10W29dO2Vsc2UgaWYoLTE9PT10W29dKXtpZigtMSE9PXIpdGhyb3cgRXJyb3IoXCJTaGFwZXMgY2FuIG9ubHkgaGF2ZSAxIGltcGxpY2l0IHNpemUuIEZvdW5kIC0xIGF0IGRpbSBcIityK1wiIGFuZCBkaW0gXCIrbyk7cj1vfWVsc2UgaWYodFtvXTwwKXRocm93IEVycm9yKFwiU2hhcGVzIGNhbiBub3QgYmUgPCAwLiBGb3VuZCBcIit0W29dK1wiIGF0IGRpbSBcIitvKTtpZigtMT09PXIpe2lmKGU+MCYmZSE9PW4pdGhyb3cgRXJyb3IoXCJTaXplKFwiK2UrXCIpIG11c3QgbWF0Y2ggdGhlIHByb2R1Y3Qgb2Ygc2hhcGUgXCIrdCk7cmV0dXJuIHR9aWYoMD09PW4pdGhyb3cgRXJyb3IoXCJDYW5ub3QgaW5mZXIgdGhlIG1pc3Npbmcgc2l6ZSBpbiBbXCIrdCtcIl0gd2hlbiB0aGVyZSBhcmUgMCBlbGVtZW50c1wiKTtpZihlJW4hPTApdGhyb3cgRXJyb3IoXCJUaGUgaW1wbGljaXQgc2hhcGUgY2FuJ3QgYmUgYSBmcmFjdGlvbmFsIG51bWJlci4gR290IFwiK2UrXCIgLyBcIituKTt2YXIgYT10LnNsaWNlKCk7cmV0dXJuIGFbcl09ZS9uLGF9ZnVuY3Rpb24gTyh0LGUpe3ZhciBuPWUubGVuZ3RoO3JldHVybiBDKCh0PW51bGw9PXQ/ZS5tYXAoKGZ1bmN0aW9uKHQsZSl7cmV0dXJuIGV9KSk6W10uY29uY2F0KHQpKS5ldmVyeSgoZnVuY3Rpb24odCl7cmV0dXJuIHQ+PS1uJiZ0PG59KSksKGZ1bmN0aW9uKCl7cmV0dXJuXCJBbGwgdmFsdWVzIGluIGF4aXMgcGFyYW0gbXVzdCBiZSBpbiByYW5nZSBbLVwiK24rXCIsIFwiK24rXCIpIGJ1dCBnb3QgYXhpcyBcIit0fSkpLEModC5ldmVyeSgoZnVuY3Rpb24odCl7cmV0dXJuIEEodCl9KSksKGZ1bmN0aW9uKCl7cmV0dXJuXCJBbGwgdmFsdWVzIGluIGF4aXMgcGFyYW0gbXVzdCBiZSBpbnRlZ2VycyBidXQgZ290IGF4aXMgXCIrdH0pKSx0Lm1hcCgoZnVuY3Rpb24odCl7cmV0dXJuIHQ8MD9uK3Q6dH0pKX1mdW5jdGlvbiBNKHQsZSl7Zm9yKHZhciBuPVtdLHI9W10sbz1udWxsIT1lJiZBcnJheS5pc0FycmF5KGUpJiYwPT09ZS5sZW5ndGgsYT1udWxsPT1lfHxvP251bGw6TyhlLHQpLnNvcnQoKSxpPTAscz0wO3M8dC5sZW5ndGg7KytzKXtpZihudWxsIT1hKXtpZihhW2ldPT09cyYmMSE9PXRbc10pdGhyb3cgbmV3IEVycm9yKFwiQ2FuJ3Qgc3F1ZWV6ZSBheGlzIFwiK3MrXCIgc2luY2UgaXRzIGRpbSAnXCIrdFtzXStcIicgaXMgbm90IDFcIik7KG51bGw9PWFbaV18fGFbaV0+cykmJjE9PT10W3NdJiYobi5wdXNoKHRbc10pLHIucHVzaChzKSksYVtpXTw9cyYmaSsrfTEhPT10W3NdJiYobi5wdXNoKHRbc10pLHIucHVzaChzKSl9cmV0dXJue25ld1NoYXBlOm4sa2VwdERpbXM6cn19ZnVuY3Rpb24gQih0LGUpe3ZhciBuPW51bGw7aWYobnVsbD09dHx8XCJmbG9hdDMyXCI9PT10KW49bmV3IEZsb2F0MzJBcnJheShlKTtlbHNlIGlmKFwiaW50MzJcIj09PXQpbj1uZXcgSW50MzJBcnJheShlKTtlbHNle2lmKFwiYm9vbFwiIT09dCl0aHJvdyBuZXcgRXJyb3IoXCJVbmtub3duIGRhdGEgdHlwZSBcIit0KTtuPW5ldyBVaW50OEFycmF5KGUpfXJldHVybiBufWZ1bmN0aW9uIFAodCxlKXt2YXIgbj1udWxsO2lmKG51bGw9PXR8fFwiZmxvYXQzMlwiPT09dCluPW5ldyBGbG9hdDMyQXJyYXkoZSk7ZWxzZSBpZihcImludDMyXCI9PT10KW49bmV3IEludDMyQXJyYXkoZSk7ZWxzZSBpZihcImJvb2xcIj09PXQpbj1uZXcgVWludDhBcnJheShlKTtlbHNle2lmKFwic3RyaW5nXCIhPT10KXRocm93IG5ldyBFcnJvcihcIlVua25vd24gZGF0YSB0eXBlIFwiK3QpO249bmV3IEFycmF5KGUpfXJldHVybiBufWZ1bmN0aW9uIEwodCxlKXtmb3IodmFyIG49MDtuPHQubGVuZ3RoO24rKyl7dmFyIHI9dFtuXTtpZihpc05hTihyKXx8IWlzRmluaXRlKHIpKXRocm93IEVycm9yKFwiQSB0ZW5zb3Igb2YgdHlwZSBcIitlK1wiIGJlaW5nIHVwbG9hZGVkIGNvbnRhaW5zIFwiK3IrXCIuXCIpfX1mdW5jdGlvbiBXKHQpe3JldHVyblwiYm9vbFwiPT09dHx8XCJjb21wbGV4NjRcIj09PXR8fFwiZmxvYXQzMlwiPT09dHx8XCJpbnQzMlwiPT09dHx8XCJzdHJpbmdcIj09PXR9ZnVuY3Rpb24gVSh0LGUpe3JldHVyblwiY29tcGxleDY0XCIhPT1lJiYoKFwiZmxvYXQzMlwiIT09ZXx8XCJjb21wbGV4NjRcIj09PXQpJiYoKFwiaW50MzJcIiE9PWV8fFwiZmxvYXQzMlwiPT09dHx8XCJjb21wbGV4NjRcIj09PXQpJiYoXCJib29sXCIhPT1lfHxcImJvb2xcIiE9PXQpKSl9ZnVuY3Rpb24gVih0KXtyZXR1cm4gdCBpbnN0YW5jZW9mIEZsb2F0MzJBcnJheXx8dCBpbnN0YW5jZW9mIEludDMyQXJyYXl8fHQgaW5zdGFuY2VvZiBVaW50OEFycmF5fWZ1bmN0aW9uIHoodCl7aWYoXCJmbG9hdDMyXCI9PT10fHxcImludDMyXCI9PT10KXJldHVybiA0O2lmKFwiY29tcGxleDY0XCI9PT10KXJldHVybiA4O2lmKFwiYm9vbFwiPT09dClyZXR1cm4gMTt0aHJvdyBuZXcgRXJyb3IoXCJVbmtub3duIGR0eXBlIFwiK3QpfWZ1bmN0aW9uIEcodCl7aWYobnVsbD09dClyZXR1cm4gMDt2YXIgZT0wO3JldHVybiB0LmZvckVhY2goKGZ1bmN0aW9uKHQpe3JldHVybiBlKz10Lmxlbmd0aH0pKSxlfWZ1bmN0aW9uIEgodCl7cmV0dXJuXCJzdHJpbmdcIj09dHlwZW9mIHR8fHQgaW5zdGFuY2VvZiBTdHJpbmd9ZnVuY3Rpb24gcSh0KXtyZXR1cm5cImJvb2xlYW5cIj09dHlwZW9mIHR9ZnVuY3Rpb24gSyh0KXtyZXR1cm5cIm51bWJlclwiPT10eXBlb2YgdH1mdW5jdGlvbiBqKHQpe3JldHVybiBBcnJheS5pc0FycmF5KHQpP2oodFswXSk6dCBpbnN0YW5jZW9mIEZsb2F0MzJBcnJheT9cImZsb2F0MzJcIjp0IGluc3RhbmNlb2YgSW50MzJBcnJheXx8dCBpbnN0YW5jZW9mIFVpbnQ4QXJyYXk/XCJpbnQzMlwiOksodCk/XCJmbG9hdDMyXCI6SCh0KT9cInN0cmluZ1wiOnEodCk/XCJib29sXCI6XCJmbG9hdDMyXCJ9ZnVuY3Rpb24gWCh0KXtyZXR1cm4hISh0JiZ0LmNvbnN0cnVjdG9yJiZ0LmNhbGwmJnQuYXBwbHkpfWZ1bmN0aW9uIFkodCxlKXtmb3IodmFyIG49ZTtuPHQ7KytuKWlmKHQlbj09MClyZXR1cm4gbjtyZXR1cm4gdH1mdW5jdGlvbiAkKHQpe3ZhciBlPXQubGVuZ3RoO2lmKGU8MilyZXR1cm5bXTt2YXIgbj1uZXcgQXJyYXkoZS0xKTtuW2UtMl09dFtlLTFdO2Zvcih2YXIgcj1lLTM7cj49MDstLXIpbltyXT1uW3IrMV0qdFtyKzFdO3JldHVybiBufWZ1bmN0aW9uIFEodCxlLG4pe2lmKFwic3RyaW5nXCI9PT1lKXRocm93IG5ldyBFcnJvcihcIkNhbm5vdCBjb252ZXJ0IGEgc3RyaW5nW10gdG8gYSBUeXBlZEFycmF5XCIpO2lmKEFycmF5LmlzQXJyYXkodCkmJih0PUkodCkpLG4mJkwodCxlKSxmdW5jdGlvbih0LGUpe3JldHVybiB0IGluc3RhbmNlb2YgRmxvYXQzMkFycmF5JiZcImZsb2F0MzJcIj09PWV8fHQgaW5zdGFuY2VvZiBJbnQzMkFycmF5JiZcImludDMyXCI9PT1lfHx0IGluc3RhbmNlb2YgVWludDhBcnJheSYmXCJib29sXCI9PT1lfSh0LGUpKXJldHVybiB0O2lmKG51bGw9PWV8fFwiZmxvYXQzMlwiPT09ZXx8XCJjb21wbGV4NjRcIj09PWUpcmV0dXJuIG5ldyBGbG9hdDMyQXJyYXkodCk7aWYoXCJpbnQzMlwiPT09ZSlyZXR1cm4gbmV3IEludDMyQXJyYXkodCk7aWYoXCJib29sXCI9PT1lKXtmb3IodmFyIHI9bmV3IFVpbnQ4QXJyYXkodC5sZW5ndGgpLG89MDtvPHIubGVuZ3RoOysrbykwIT09TWF0aC5yb3VuZCh0W29dKSYmKHJbb109MSk7cmV0dXJuIHJ9dGhyb3cgbmV3IEVycm9yKFwiVW5rbm93biBkYXRhIHR5cGUgXCIrZSl9ZnVuY3Rpb24gSih0LGUpe2lmKDA9PT10Lmxlbmd0aClyZXR1cm4gZVswXTt2YXIgbj10LnJlZHVjZSgoZnVuY3Rpb24odCxlKXtyZXR1cm4gdCplfSkpO2lmKDA9PT1uKXJldHVybltdO2lmKG4hPT1lLmxlbmd0aCl0aHJvdyBuZXcgRXJyb3IoXCJbXCIrdCtcIl0gZG9lcyBub3QgbWF0Y2ggdGhlIGlucHV0IHNpemUuXCIpO3JldHVybiBmdW5jdGlvbiB0KGUsbixyKXt2YXIgbz1uZXcgQXJyYXk7aWYoMT09PW4ubGVuZ3RoKWZvcih2YXIgYT1uWzBdLGk9MDtpPGE7aSsrKW9baV09cltlK2ldO2Vsc2V7YT1uWzBdO3ZhciBzPW4uc2xpY2UoMSksdT1zLnJlZHVjZSgoZnVuY3Rpb24odCxlKXtyZXR1cm4gdCplfSkpO2ZvcihpPTA7aTxhO2krKylvW2ldPXQoZStpKnUscyxyKX1yZXR1cm4gb30oMCx0LGUpfWZ1bmN0aW9uIFoodCxlKXtmb3IodmFyIG49dHQodCxlKSxyPTA7cjxuLmxlbmd0aDtyKyspbltyXT0xO3JldHVybiBufWZ1bmN0aW9uIHR0KHQsZSl7aWYobnVsbD09ZXx8XCJmbG9hdDMyXCI9PT1lfHxcImNvbXBsZXg2NFwiPT09ZSlyZXR1cm4gbmV3IEZsb2F0MzJBcnJheSh0KTtpZihcImludDMyXCI9PT1lKXJldHVybiBuZXcgSW50MzJBcnJheSh0KTtpZihcImJvb2xcIj09PWUpcmV0dXJuIG5ldyBVaW50OEFycmF5KHQpO3Rocm93IG5ldyBFcnJvcihcIlVua25vd24gZGF0YSB0eXBlIFwiK2UpfWZ1bmN0aW9uIGV0KCl7cmV0dXJuIGkoKS5wbGF0Zm9ybS5ub3coKX1mdW5jdGlvbiBudCh0KXt0LmZvckVhY2goKGZ1bmN0aW9uKGUpe0MoTnVtYmVyLmlzSW50ZWdlcihlKSYmZT49MCwoZnVuY3Rpb24oKXtyZXR1cm5cIlRlbnNvciBtdXN0IGhhdmUgYSBzaGFwZSBjb21wcmlzZWQgb2YgcG9zaXRpdmUgaW50ZWdlcnMgYnV0IGdvdCBzaGFwZSBbXCIrdCtcIl0uXCJ9KSl9KSl9ZnVuY3Rpb24gcnQodCxlKXtyZXR1cm4gdm9pZCAwPT09ZSYmKGU9XCJ1dGYtOFwiKSxlPWV8fFwidXRmLThcIixpKCkucGxhdGZvcm0uZW5jb2RlKHQsZSl9ZnVuY3Rpb24gb3QodCxlKXtyZXR1cm4gdm9pZCAwPT09ZSYmKGU9XCJ1dGYtOFwiKSxlPWV8fFwidXRmLThcIixpKCkucGxhdGZvcm0uZGVjb2RlKHQsZSl9ZnVuY3Rpb24gYXQodCxlLG4pe2lmKDA9PT1lKXJldHVybiAwO2lmKDE9PT1lKXJldHVybiB0WzBdO2Zvcih2YXIgcj10W3QubGVuZ3RoLTFdLG89MDtvPHQubGVuZ3RoLTE7KytvKXIrPW5bb10qdFtvXTtyZXR1cm4gcn1mdW5jdGlvbiBpdCh0LGUsbil7aWYoMD09PWUpcmV0dXJuW107aWYoMT09PWUpcmV0dXJuW3RdO2Zvcih2YXIgcj1uZXcgQXJyYXkoZSksbz0wO288ci5sZW5ndGgtMTsrK28pcltvXT1NYXRoLmZsb29yKHQvbltvXSksdC09cltvXSpuW29dO3JldHVybiByW3IubGVuZ3RoLTFdPXQscn12YXIgc3Q9T2JqZWN0LmZyZWV6ZSh7c2h1ZmZsZTp5LGNsYW1wOngsbmVhcmVzdExhcmdlckV2ZW46YixzdW06dyxyYW5kVW5pZm9ybTpmdW5jdGlvbih0LGUpe3ZhciBuPU1hdGgucmFuZG9tKCk7cmV0dXJuIGUqbisoMS1uKSp0fSxkaXN0U3F1YXJlZDpmdW5jdGlvbih0LGUpe2Zvcih2YXIgbj0wLHI9MDtyPHQubGVuZ3RoO3IrKyl7dmFyIG89TnVtYmVyKHRbcl0pLU51bWJlcihlW3JdKTtuKz1vKm99cmV0dXJuIG59LGFzc2VydDpDLGFzc2VydFNoYXBlc01hdGNoOkUsYXNzZXJ0Tm9uTnVsbDpSLGZsYXR0ZW46SSxzaXplRnJvbVNoYXBlOmssaXNTY2FsYXJTaGFwZTpmdW5jdGlvbih0KXtyZXR1cm4gMD09PXQubGVuZ3RofSxhcnJheXNFcXVhbDpTLGlzSW50OkEsdGFuaDpELHNpemVUb1NxdWFyaXNoU2hhcGU6VCxjcmVhdGVTaHVmZmxlZEluZGljZXM6ZnVuY3Rpb24odCl7Zm9yKHZhciBlPW5ldyBVaW50MzJBcnJheSh0KSxuPTA7bjx0OysrbillW25dPW47cmV0dXJuIHkoZSksZX0scmlnaHRQYWQ6TixyZXBlYXRlZFRyeTpGLGluZmVyRnJvbUltcGxpY2l0U2hhcGU6XyxwYXJzZUF4aXNQYXJhbTpPLHNxdWVlemVTaGFwZTpNLGdldFR5cGVkQXJyYXlGcm9tRFR5cGU6QixnZXRBcnJheUZyb21EVHlwZTpQLGNoZWNrQ29udmVyc2lvbkZvckVycm9yczpMLGlzVmFsaWREdHlwZTpXLGhhc0VuY29kaW5nTG9zczpVLGlzVHlwZWRBcnJheTpWLGJ5dGVzUGVyRWxlbWVudDp6LGJ5dGVzRnJvbVN0cmluZ0FycmF5OkcsaXNTdHJpbmc6SCxpc0Jvb2xlYW46cSxpc051bWJlcjpLLGluZmVyRHR5cGU6aixpc0Z1bmN0aW9uOlgsbmVhcmVzdERpdmlzb3I6WSxjb21wdXRlU3RyaWRlczokLHRvVHlwZWRBcnJheTpRLHRvTmVzdGVkQXJyYXk6SixtYWtlT25lc1R5cGVkQXJyYXk6WixtYWtlWmVyb3NUeXBlZEFycmF5OnR0LG5vdzpldCxhc3NlcnROb25OZWdhdGl2ZUludGVnZXJEaW1lbnNpb25zOm50LGZldGNoOmZ1bmN0aW9uKHQsZSl7cmV0dXJuIGkoKS5wbGF0Zm9ybS5mZXRjaCh0LGUpfSxlbmNvZGVTdHJpbmc6cnQsZGVjb2RlU3RyaW5nOm90LGxvY1RvSW5kZXg6YXQsaW5kZXhUb0xvYzppdH0pLHV0PWZ1bmN0aW9uKCl7ZnVuY3Rpb24gdCh0LGUpe3RoaXMuYmFja2VuZFRpbWVyPXQsdGhpcy5sb2dnZXI9ZSxudWxsPT1lJiYodGhpcy5sb2dnZXI9bmV3IGN0KX1yZXR1cm4gdC5wcm90b3R5cGUucHJvZmlsZUtlcm5lbD1mdW5jdGlvbih0LGUsbil7dmFyIHIsbz10aGlzLGE9dGhpcy5iYWNrZW5kVGltZXIudGltZSgoZnVuY3Rpb24oKXtyPW4oKX0pKTtyZXR1cm4gci5mb3JFYWNoKChmdW5jdGlvbihuKXtuLmRhdGEoKS50aGVuKChmdW5jdGlvbihyKXshZnVuY3Rpb24odCxlLG4pe2lmKFwiZmxvYXQzMlwiIT09ZSlyZXR1cm4hMTtmb3IodmFyIHI9MDtyPHQubGVuZ3RoO3IrKyl7dmFyIG89dFtyXTtpZihpc05hTihvKXx8IWlzRmluaXRlKG8pKXJldHVybiBjb25zb2xlLndhcm4oXCJGb3VuZCBcIitvK1wiIGluIHRoZSByZXN1bHQgb2YgJ1wiK24rXCInXCIpLCEwfX0ocixuLmR0eXBlLHQpLGEudGhlbigoZnVuY3Rpb24oYSl7dmFyIGk9XCJcIjtudWxsIT1hLmdldEV4dHJhUHJvZmlsZUluZm8mJihpPWEuZ2V0RXh0cmFQcm9maWxlSW5mbygpKSxvLmxvZ2dlci5sb2dLZXJuZWxQcm9maWxlKHQsbixyLGEua2VybmVsTXMsZSxpKX0pKX0pKX0pKSxyfSx0fSgpO3ZhciBjdD1mdW5jdGlvbigpe2Z1bmN0aW9uIHQoKXt9cmV0dXJuIHQucHJvdG90eXBlLmxvZ0tlcm5lbFByb2ZpbGU9ZnVuY3Rpb24odCxlLG4scixvLGEpe3ZhciBpPVwibnVtYmVyXCI9PXR5cGVvZiByP04ocitcIm1zXCIsOSk6ci5lcnJvcixzPU4odCwyNSksdT1lLnJhbmssYz1lLnNpemUsbD1OKGUuc2hhcGUudG9TdHJpbmcoKSwxNCksaD1cIlwiO2Zvcih2YXIgZiBpbiBvKXt2YXIgZD1vW2ZdLnNoYXBlfHxlLnNoYXBlLHA9ZC5sZW5ndGg7aCs9ZitcIjogXCIrcCtcIkQgXCIrKHA+MD9kOlwiXCIpK1wiIFwifWNvbnNvbGUubG9nKFwiJWNcIitzK1wiXFx0JWNcIitpK1wiXFx0JWNcIit1K1wiRCBcIitsK1wiXFx0JWNcIitjK1wiXFx0JWNcIitoK1wiXFx0JWNcIithLFwiZm9udC13ZWlnaHQ6Ym9sZFwiLFwiY29sb3I6cmVkXCIsXCJjb2xvcjpibHVlXCIsXCJjb2xvcjogb3JhbmdlXCIsXCJjb2xvcjogZ3JlZW5cIixcImNvbG9yOiBzdGVlbGJsdWVcIil9LHR9KCk7dmFyIGx0PTIwLGh0PTMsZnQ9NztmdW5jdGlvbiBkdCh0LGUsbixyKXt2YXIgbz0kKGUpLGE9ZnVuY3Rpb24odCxlLG4scil7dmFyIG89ayhlKSxhPXJbci5sZW5ndGgtMV0saT1uZXcgQXJyYXkoYSkuZmlsbCgwKSxzPWUubGVuZ3RoLHU9XCJjb21wbGV4NjRcIj09PW4/bXQodCk6dDtpZihzPjEpZm9yKHZhciBjPTA7YzxvL2E7YysrKWZvcih2YXIgbD1jKmEsaD0wO2g8YTtoKyspaVtoXT1NYXRoLm1heChpW2hdLHB0KHVbbCtoXSwwLG4pLmxlbmd0aCk7cmV0dXJuIGl9KHQsZSxuLG8pLGk9ZS5sZW5ndGgscz1mdW5jdGlvbiB0KGUsbixyLG8sYSxpKXt2b2lkIDA9PT1pJiYoaT0hMCk7dmFyIHM9XCJjb21wbGV4NjRcIj09PXI/MjoxLHU9blswXSxjPW4ubGVuZ3RoO2lmKDA9PT1jKXtyZXR1cm5cImNvbXBsZXg2NFwiPT09cj9bcHQobXQoZSlbMF0sMCxyKV06XCJib29sXCI9PT1yP1t2dChlWzBdKV06W2VbMF0udG9TdHJpbmcoKV19aWYoMT09PWMpe2lmKHU+bHQpe3ZhciBsPWh0KnMsaD1BcnJheS5mcm9tKGUuc2xpY2UoMCxsKSksZj1BcnJheS5mcm9tKGUuc2xpY2UoKHUtaHQpKnMsdSpzKSk7cmV0dXJuXCJjb21wbGV4NjRcIj09PXImJihoPW10KGgpLGY9bXQoZikpLFtcIltcIitoLm1hcCgoZnVuY3Rpb24odCxlKXtyZXR1cm4gcHQodCxhW2VdLHIpfSkpLmpvaW4oXCIsIFwiKStcIiwgLi4uLCBcIitmLm1hcCgoZnVuY3Rpb24odCxlKXtyZXR1cm4gcHQodCxhW3UtaHQrZV0scil9KSkuam9pbihcIiwgXCIpK1wiXVwiXX1yZXR1cm5bXCJbXCIrKFwiY29tcGxleDY0XCI9PT1yP210KGUpOkFycmF5LmZyb20oZSkpLm1hcCgoZnVuY3Rpb24odCxlKXtyZXR1cm4gcHQodCxhW2VdLHIpfSkpLmpvaW4oXCIsIFwiKStcIl1cIl19dmFyIGQ9bi5zbGljZSgxKSxwPW8uc2xpY2UoMSksdj1vWzBdKnMsbT1bXTtpZih1Pmx0KXtmb3IodmFyIGc9MDtnPGh0O2crKyl7dmFyIHk9KHg9Zyp2KSt2O20ucHVzaC5hcHBseShtLHQoZS5zbGljZSh4LHkpLGQscixwLGEsITEpKX1tLnB1c2goXCIuLi5cIik7Zm9yKGc9dS1odDtnPHU7ZysrKXt5PSh4PWcqdikrdjttLnB1c2guYXBwbHkobSx0KGUuc2xpY2UoeCx5KSxkLHIscCxhLGc9PT11LTEpKX19ZWxzZSBmb3IoZz0wO2c8dTtnKyspe3ZhciB4O3k9KHg9Zyp2KSt2O20ucHVzaC5hcHBseShtLHQoZS5zbGljZSh4LHkpLGQscixwLGEsZz09PXUtMSkpfXZhciBiPTI9PT1jP1wiLFwiOlwiXCI7bVswXT1cIltcIittWzBdK2I7Zm9yKGc9MTtnPG0ubGVuZ3RoLTE7ZysrKW1bZ109XCIgXCIrbVtnXStiO3ZhciB3PVwiLFxcblwiO2ZvcihnPTI7ZzxjO2crKyl3Kz1cIlxcblwiO3JldHVybiBtW20ubGVuZ3RoLTFdPVwiIFwiK21bbS5sZW5ndGgtMV0rXCJdXCIrKGk/XCJcIjp3KSxtfSh0LGUsbixvLGEpLHU9W1wiVGVuc29yXCJdO3JldHVybiByJiYodS5wdXNoKFwiICBkdHlwZTogXCIrbiksdS5wdXNoKFwiICByYW5rOiBcIitpKSx1LnB1c2goXCIgIHNoYXBlOiBbXCIrZStcIl1cIiksdS5wdXNoKFwiICB2YWx1ZXM6XCIpKSx1LnB1c2gocy5tYXAoKGZ1bmN0aW9uKHQpe3JldHVyblwiICAgIFwiK3R9KSkuam9pbihcIlxcblwiKSksdS5qb2luKFwiXFxuXCIpfWZ1bmN0aW9uIHB0KHQsZSxuKXtyZXR1cm4gTihBcnJheS5pc0FycmF5KHQpP3BhcnNlRmxvYXQodFswXS50b0ZpeGVkKGZ0KSkrXCIgKyBcIitwYXJzZUZsb2F0KHRbMV0udG9GaXhlZChmdCkpK1wialwiOkgodCk/XCInXCIrdCtcIidcIjpcImJvb2xcIj09PW4/dnQodCk6cGFyc2VGbG9hdCh0LnRvRml4ZWQoZnQpKS50b1N0cmluZygpLGUpfWZ1bmN0aW9uIHZ0KHQpe3JldHVybiAwPT09dD9cImZhbHNlXCI6XCJ0cnVlXCJ9ZnVuY3Rpb24gbXQodCl7Zm9yKHZhciBlPVtdLG49MDtuPHQubGVuZ3RoO24rPTIpZS5wdXNoKFt0W25dLHRbbisxXV0pO3JldHVybiBlfXZhciBndD1mdW5jdGlvbigpe2Z1bmN0aW9uIHQodCxlLG4pe3ZhciByPXRoaXM7aWYodGhpcy5kdHlwZT1lLHRoaXMuc2hhcGU9dC5zbGljZSgpLHRoaXMuc2l6ZT1rKHQpLG51bGwhPW4pe3ZhciBvPW4ubGVuZ3RoO0Mobz09PXRoaXMuc2l6ZSwoZnVuY3Rpb24oKXtyZXR1cm5cIkxlbmd0aCBvZiB2YWx1ZXMgJ1wiK28rXCInIGRvZXMgbm90IG1hdGNoIHRoZSBzaXplIGluZmVycmVkIGJ5IHRoZSBzaGFwZSAnXCIrci5zaXplK1wiJy5cIn0pKX1pZihcImNvbXBsZXg2NFwiPT09ZSl0aHJvdyBuZXcgRXJyb3IoXCJjb21wbGV4NjQgZHR5cGUgVGVuc29yQnVmZmVycyBhcmUgbm90IHN1cHBvcnRlZC4gUGxlYXNlIGNyZWF0ZSBhIFRlbnNvckJ1ZmZlciBmb3IgdGhlIHJlYWwgYW5kIGltYWdpbmFyeSBwYXJ0cyBzZXBhcmF0ZWx5IGFuZCBjYWxsIHRmLmNvbXBsZXgocmVhbCwgaW1hZykuXCIpO3RoaXMudmFsdWVzPW58fFAoZSx0aGlzLnNpemUpLHRoaXMuc3RyaWRlcz0kKHQpfXJldHVybiB0LnByb3RvdHlwZS5zZXQ9ZnVuY3Rpb24odCl7Zm9yKHZhciBlPXRoaXMsbj1bXSxyPTE7cjxhcmd1bWVudHMubGVuZ3RoO3IrKyluW3ItMV09YXJndW1lbnRzW3JdOzA9PT1uLmxlbmd0aCYmKG49WzBdKSxDKG4ubGVuZ3RoPT09dGhpcy5yYW5rLChmdW5jdGlvbigpe3JldHVyblwiVGhlIG51bWJlciBvZiBwcm92aWRlZCBjb29yZGluYXRlcyAoXCIrbi5sZW5ndGgrXCIpIG11c3QgbWF0Y2ggdGhlIHJhbmsgKFwiK2UucmFuaytcIilcIn0pKTt2YXIgbz10aGlzLmxvY1RvSW5kZXgobik7dGhpcy52YWx1ZXNbb109dH0sdC5wcm90b3R5cGUuZ2V0PWZ1bmN0aW9uKCl7Zm9yKHZhciB0PVtdLGU9MDtlPGFyZ3VtZW50cy5sZW5ndGg7ZSsrKXRbZV09YXJndW1lbnRzW2VdOzA9PT10Lmxlbmd0aCYmKHQ9WzBdKTtmb3IodmFyIG49MCxyPTAsbz10O3I8by5sZW5ndGg7cisrKXt2YXIgYT1vW3JdO2lmKGE8MHx8YT49dGhpcy5zaGFwZVtuXSl7dmFyIGk9XCJSZXF1ZXN0ZWQgb3V0IG9mIHJhbmdlIGVsZW1lbnQgYXQgXCIrdCtcIi4gICBCdWZmZXIgc2hhcGU9XCIrdGhpcy5zaGFwZTt0aHJvdyBuZXcgRXJyb3IoaSl9bisrfWZvcih2YXIgcz10W3QubGVuZ3RoLTFdLHU9MDt1PHQubGVuZ3RoLTE7Kyt1KXMrPXRoaXMuc3RyaWRlc1t1XSp0W3VdO3JldHVybiB0aGlzLnZhbHVlc1tzXX0sdC5wcm90b3R5cGUubG9jVG9JbmRleD1mdW5jdGlvbih0KXtpZigwPT09dGhpcy5yYW5rKXJldHVybiAwO2lmKDE9PT10aGlzLnJhbmspcmV0dXJuIHRbMF07Zm9yKHZhciBlPXRbdC5sZW5ndGgtMV0sbj0wO248dC5sZW5ndGgtMTsrK24pZSs9dGhpcy5zdHJpZGVzW25dKnRbbl07cmV0dXJuIGV9LHQucHJvdG90eXBlLmluZGV4VG9Mb2M9ZnVuY3Rpb24odCl7aWYoMD09PXRoaXMucmFuaylyZXR1cm5bXTtpZigxPT09dGhpcy5yYW5rKXJldHVyblt0XTtmb3IodmFyIGU9bmV3IEFycmF5KHRoaXMuc2hhcGUubGVuZ3RoKSxuPTA7bjxlLmxlbmd0aC0xOysrbillW25dPU1hdGguZmxvb3IodC90aGlzLnN0cmlkZXNbbl0pLHQtPWVbbl0qdGhpcy5zdHJpZGVzW25dO3JldHVybiBlW2UubGVuZ3RoLTFdPXQsZX0sT2JqZWN0LmRlZmluZVByb3BlcnR5KHQucHJvdG90eXBlLFwicmFua1wiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5zaGFwZS5sZW5ndGh9LGVudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiEwfSksdC5wcm90b3R5cGUudG9UZW5zb3I9ZnVuY3Rpb24oKXtyZXR1cm4geXQoKS5tYWtlVGVuc29yKHRoaXMudmFsdWVzLHRoaXMuc2hhcGUsdGhpcy5kdHlwZSl9LHR9KCkseXQ9bnVsbCx4dD1udWxsLGJ0PW51bGw7dmFyIHd0PWZ1bmN0aW9uKCl7ZnVuY3Rpb24gdCh0LGUsbixyKXt0aGlzLmtlcHQ9ITEsdGhpcy5pc0Rpc3Bvc2VkSW50ZXJuYWw9ITEsdGhpcy5zaGFwZT10LnNsaWNlKCksdGhpcy5kdHlwZT1lfHxcImZsb2F0MzJcIix0aGlzLnNpemU9ayh0KSx0aGlzLnN0cmlkZXM9JCh0KSx0aGlzLmRhdGFJZD1uLHRoaXMuaWQ9cix0aGlzLnJhbmtUeXBlPXRoaXMucmFuazw1P3RoaXMucmFuay50b1N0cmluZygpOlwiaGlnaGVyXCJ9cmV0dXJuIHQucHJvdG90eXBlLmZsYXR0ZW49ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy50aHJvd0lmRGlzcG9zZWQoKSx0aGlzLmFzMUQoKX0sdC5wcm90b3R5cGUuYXNTY2FsYXI9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy50aHJvd0lmRGlzcG9zZWQoKSxDKDE9PT10aGlzLnNpemUsKGZ1bmN0aW9uKCl7cmV0dXJuXCJUaGUgYXJyYXkgbXVzdCBoYXZlIG9ubHkgMSBlbGVtZW50LlwifSkpLHRoaXMucmVzaGFwZShbXSl9LHQucHJvdG90eXBlLmFzMUQ9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy50aHJvd0lmRGlzcG9zZWQoKSx0aGlzLnJlc2hhcGUoW3RoaXMuc2l6ZV0pfSx0LnByb3RvdHlwZS5hczJEPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIHRoaXMudGhyb3dJZkRpc3Bvc2VkKCksdGhpcy5yZXNoYXBlKFt0LGVdKX0sdC5wcm90b3R5cGUuYXMzRD1mdW5jdGlvbih0LGUsbil7cmV0dXJuIHRoaXMudGhyb3dJZkRpc3Bvc2VkKCksdGhpcy5yZXNoYXBlKFt0LGUsbl0pfSx0LnByb3RvdHlwZS5hczREPWZ1bmN0aW9uKHQsZSxuLHIpe3JldHVybiB0aGlzLnRocm93SWZEaXNwb3NlZCgpLHRoaXMucmVzaGFwZShbdCxlLG4scl0pfSx0LnByb3RvdHlwZS5hczVEPWZ1bmN0aW9uKHQsZSxuLHIsbyl7cmV0dXJuIHRoaXMudGhyb3dJZkRpc3Bvc2VkKCksdGhpcy5yZXNoYXBlKFt0LGUsbixyLG9dKX0sdC5wcm90b3R5cGUuYXNUeXBlPWZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLnRocm93SWZEaXNwb3NlZCgpLHh0LmNhc3QodGhpcyx0KX0sT2JqZWN0LmRlZmluZVByb3BlcnR5KHQucHJvdG90eXBlLFwicmFua1wiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5zaGFwZS5sZW5ndGh9LGVudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiEwfSksdC5wcm90b3R5cGUuYnVmZmVyPWZ1bmN0aW9uKCl7cmV0dXJuIG4odGhpcyx2b2lkIDAsdm9pZCAwLChmdW5jdGlvbigpe3ZhciB0O3JldHVybiByKHRoaXMsKGZ1bmN0aW9uKGUpe3N3aXRjaChlLmxhYmVsKXtjYXNlIDA6cmV0dXJuWzQsdGhpcy5kYXRhKCldO2Nhc2UgMTpyZXR1cm4gdD1lLnNlbnQoKSxbMix4dC5idWZmZXIodGhpcy5zaGFwZSx0aGlzLmR0eXBlLHQpXX19KSl9KSl9LHQucHJvdG90eXBlLmJ1ZmZlclN5bmM9ZnVuY3Rpb24oKXtyZXR1cm4geHQuYnVmZmVyKHRoaXMuc2hhcGUsdGhpcy5kdHlwZSx0aGlzLmRhdGFTeW5jKCkpfSx0LnByb3RvdHlwZS5hcnJheT1mdW5jdGlvbigpe3JldHVybiBuKHRoaXMsdm9pZCAwLHZvaWQgMCwoZnVuY3Rpb24oKXt2YXIgdDtyZXR1cm4gcih0aGlzLChmdW5jdGlvbihlKXtzd2l0Y2goZS5sYWJlbCl7Y2FzZSAwOnJldHVybls0LHRoaXMuZGF0YSgpXTtjYXNlIDE6cmV0dXJuIHQ9ZS5zZW50KCksWzIsSih0aGlzLnNoYXBlLHQpXX19KSl9KSl9LHQucHJvdG90eXBlLmFycmF5U3luYz1mdW5jdGlvbigpe3JldHVybiBKKHRoaXMuc2hhcGUsdGhpcy5kYXRhU3luYygpKX0sdC5wcm90b3R5cGUuZGF0YT1mdW5jdGlvbigpe3JldHVybiBuKHRoaXMsdm9pZCAwLHZvaWQgMCwoZnVuY3Rpb24oKXt2YXIgdCxlO3JldHVybiByKHRoaXMsKGZ1bmN0aW9uKG4pe3N3aXRjaChuLmxhYmVsKXtjYXNlIDA6cmV0dXJuIHRoaXMudGhyb3dJZkRpc3Bvc2VkKCksdD15dCgpLnJlYWQodGhpcy5kYXRhSWQpLFwic3RyaW5nXCIhPT10aGlzLmR0eXBlP1szLDJdOls0LHRdO2Nhc2UgMTplPW4uc2VudCgpO3RyeXtyZXR1cm5bMixlLm1hcCgoZnVuY3Rpb24odCl7cmV0dXJuIG90KHQpfSkpXX1jYXRjaCh0KXt0aHJvdyBuZXcgRXJyb3IoXCJGYWlsZWQgdG8gZGVjb2RlIHRoZSBzdHJpbmcgYnl0ZXMgaW50byB1dGYtOC4gVG8gZ2V0IHRoZSBvcmlnaW5hbCBieXRlcywgY2FsbCB0ZW5zb3IuYnl0ZXMoKS5cIil9bi5sYWJlbD0yO2Nhc2UgMjpyZXR1cm5bMix0XX19KSl9KSl9LHQucHJvdG90eXBlLmRhdGFTeW5jPWZ1bmN0aW9uKCl7dGhpcy50aHJvd0lmRGlzcG9zZWQoKTt2YXIgdD15dCgpLnJlYWRTeW5jKHRoaXMuZGF0YUlkKTtpZihcInN0cmluZ1wiPT09dGhpcy5kdHlwZSl0cnl7cmV0dXJuIHQubWFwKChmdW5jdGlvbih0KXtyZXR1cm4gb3QodCl9KSl9Y2F0Y2godCl7dGhyb3cgbmV3IEVycm9yKFwiRmFpbGVkIHRvIGRlY29kZSB0aGUgc3RyaW5nIGJ5dGVzIGludG8gdXRmLTguIFRvIGdldCB0aGUgb3JpZ2luYWwgYnl0ZXMsIGNhbGwgdGVuc29yLmJ5dGVzKCkuXCIpfXJldHVybiB0fSx0LnByb3RvdHlwZS5ieXRlcz1mdW5jdGlvbigpe3JldHVybiBuKHRoaXMsdm9pZCAwLHZvaWQgMCwoZnVuY3Rpb24oKXt2YXIgdDtyZXR1cm4gcih0aGlzLChmdW5jdGlvbihlKXtzd2l0Y2goZS5sYWJlbCl7Y2FzZSAwOnJldHVybiB0aGlzLnRocm93SWZEaXNwb3NlZCgpLFs0LHl0KCkucmVhZCh0aGlzLmRhdGFJZCldO2Nhc2UgMTpyZXR1cm4gdD1lLnNlbnQoKSxcInN0cmluZ1wiPT09dGhpcy5kdHlwZT9bMix0XTpbMixuZXcgVWludDhBcnJheSh0LmJ1ZmZlcildfX0pKX0pKX0sdC5wcm90b3R5cGUuZGlzcG9zZT1mdW5jdGlvbigpe3RoaXMuaXNEaXNwb3NlZHx8KHl0KCkuZGlzcG9zZVRlbnNvcih0aGlzKSx0aGlzLmlzRGlzcG9zZWRJbnRlcm5hbD0hMCl9LE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LnByb3RvdHlwZSxcImlzRGlzcG9zZWRcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuaXNEaXNwb3NlZEludGVybmFsfSxlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH0pLHQucHJvdG90eXBlLnRocm93SWZEaXNwb3NlZD1mdW5jdGlvbigpe2lmKHRoaXMuaXNEaXNwb3NlZCl0aHJvdyBuZXcgRXJyb3IoXCJUZW5zb3IgaXMgZGlzcG9zZWQuXCIpfSx0LnByb3RvdHlwZS50b0Zsb2F0PWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuYXNUeXBlKFwiZmxvYXQzMlwiKX0sdC5wcm90b3R5cGUudG9JbnQ9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5hc1R5cGUoXCJpbnQzMlwiKX0sdC5wcm90b3R5cGUudG9Cb29sPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuYXNUeXBlKFwiYm9vbFwiKX0sdC5wcm90b3R5cGUucHJpbnQ9ZnVuY3Rpb24odCl7cmV0dXJuIHZvaWQgMD09PXQmJih0PSExKSx4dC5wcmludCh0aGlzLHQpfSx0LnByb3RvdHlwZS5yZXNoYXBlPWZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLnRocm93SWZEaXNwb3NlZCgpLHh0LnJlc2hhcGUodGhpcyx0KX0sdC5wcm90b3R5cGUucmVzaGFwZUFzPWZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLnRocm93SWZEaXNwb3NlZCgpLHRoaXMucmVzaGFwZSh0LnNoYXBlKX0sdC5wcm90b3R5cGUuZXhwYW5kRGltcz1mdW5jdGlvbih0KXtyZXR1cm4gdm9pZCAwPT09dCYmKHQ9MCkseHQuZXhwYW5kRGltcyh0aGlzLHQpfSx0LnByb3RvdHlwZS5jdW1zdW09ZnVuY3Rpb24odCxlLG4pe3JldHVybiB2b2lkIDA9PT10JiYodD0wKSx2b2lkIDA9PT1lJiYoZT0hMSksdm9pZCAwPT09biYmKG49ITEpLHh0LmN1bXN1bSh0aGlzLHQsZSxuKX0sdC5wcm90b3R5cGUuc3F1ZWV6ZT1mdW5jdGlvbih0KXtyZXR1cm4gdGhpcy50aHJvd0lmRGlzcG9zZWQoKSx4dC5zcXVlZXplKHRoaXMsdCl9LHQucHJvdG90eXBlLmNsb25lPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMudGhyb3dJZkRpc3Bvc2VkKCkseHQuY2xvbmUodGhpcyl9LHQucHJvdG90eXBlLm9uZUhvdD1mdW5jdGlvbih0LGUsbil7cmV0dXJuIHRoaXMudGhyb3dJZkRpc3Bvc2VkKCkseHQub25lSG90KHRoaXMsdCxlLG4pfSx0LnByb3RvdHlwZS50b1N0cmluZz1mdW5jdGlvbih0KXtyZXR1cm4gdm9pZCAwPT09dCYmKHQ9ITEpLGR0KHRoaXMuZGF0YVN5bmMoKSx0aGlzLnNoYXBlLHRoaXMuZHR5cGUsdCl9LHQucHJvdG90eXBlLnRpbGU9ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMudGhyb3dJZkRpc3Bvc2VkKCkseHQudGlsZSh0aGlzLHQpfSx0LnByb3RvdHlwZS5nYXRoZXI9ZnVuY3Rpb24odCxlKXtyZXR1cm4gdm9pZCAwPT09ZSYmKGU9MCksdGhpcy50aHJvd0lmRGlzcG9zZWQoKSx4dC5nYXRoZXIodGhpcyx0LGUpfSx0LnByb3RvdHlwZS5tYXRNdWw9ZnVuY3Rpb24odCxlLG4pe3JldHVybiB2b2lkIDA9PT1lJiYoZT0hMSksdm9pZCAwPT09biYmKG49ITEpLHRoaXMudGhyb3dJZkRpc3Bvc2VkKCkseHQubWF0TXVsKHRoaXMsdCxlLG4pfSx0LnByb3RvdHlwZS5kb3Q9ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMudGhyb3dJZkRpc3Bvc2VkKCkseHQuZG90KHRoaXMsdCl9LHQucHJvdG90eXBlLm5vcm09ZnVuY3Rpb24odCxlLG4pe3JldHVybiB2b2lkIDA9PT10JiYodD1cImV1Y2xpZGVhblwiKSx2b2lkIDA9PT1lJiYoZT1udWxsKSx2b2lkIDA9PT1uJiYobj0hMSksdGhpcy50aHJvd0lmRGlzcG9zZWQoKSx4dC5ub3JtKHRoaXMsdCxlLG4pfSx0LnByb3RvdHlwZS5zbGljZT1mdW5jdGlvbih0LGUpe3JldHVybiB0aGlzLnRocm93SWZEaXNwb3NlZCgpLHh0LnNsaWNlKHRoaXMsdCxlKX0sdC5wcm90b3R5cGUucmV2ZXJzZT1mdW5jdGlvbih0KXtyZXR1cm4gdGhpcy50aHJvd0lmRGlzcG9zZWQoKSx4dC5yZXZlcnNlKHRoaXMsdCl9LHQucHJvdG90eXBlLmNvbmNhdD1mdW5jdGlvbihlLG4pe3JldHVybiB2b2lkIDA9PT1uJiYobj0wKSx0aGlzLnRocm93SWZEaXNwb3NlZCgpLGUgaW5zdGFuY2VvZiB0JiYoZT1bZV0pLHh0LmNvbmNhdChbdGhpc10uY29uY2F0KGUpLG4pfSx0LnByb3RvdHlwZS5zcGxpdD1mdW5jdGlvbih0LGUpe3JldHVybiB2b2lkIDA9PT1lJiYoZT0wKSx0aGlzLnRocm93SWZEaXNwb3NlZCgpLHh0LnNwbGl0KHRoaXMsdCxlKX0sdC5wcm90b3R5cGUuc3RhY2s9ZnVuY3Rpb24odCxlKXtyZXR1cm4gdm9pZCAwPT09ZSYmKGU9MCkseHQuc3RhY2soW3RoaXMsdF0sZSl9LHQucHJvdG90eXBlLnVuc3RhY2s9ZnVuY3Rpb24odCl7cmV0dXJuIHZvaWQgMD09PXQmJih0PTApLHh0LnVuc3RhY2sodGhpcyx0KX0sdC5wcm90b3R5cGUucGFkPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIHZvaWQgMD09PWUmJihlPTApLHh0LnBhZCh0aGlzLHQsZSl9LHQucHJvdG90eXBlLmJhdGNoTm9ybWFsaXphdGlvbj1mdW5jdGlvbih0LGUsbixyLG8pe3JldHVybiB2b2lkIDA9PT1uJiYobj0uMDAxKSxidChcInRmLmJhdGNoTm9ybWFsaXphdGlvbigpIGlzIGdvaW5nIGF3YXkuIFVzZSB0Zi5iYXRjaE5vcm0oKSBpbnN0ZWFkLCBhbmQgbm90ZSB0aGUgcG9zaXRpb25hbCBhcmd1bWVudCBjaGFuZ2Ugb2Ygc2NhbGUsIG9mZnNldCwgYW5kIHZhcmlhbmNlRXBzaWxvblwiKSx0aGlzLmJhdGNoTm9ybSh0LGUsbyxyLG4pfSx0LnByb3RvdHlwZS5iYXRjaE5vcm09ZnVuY3Rpb24odCxlLG4scixvKXtyZXR1cm4gdm9pZCAwPT09byYmKG89LjAwMSksdGhpcy50aHJvd0lmRGlzcG9zZWQoKSx4dC5iYXRjaE5vcm0odGhpcyx0LGUsbixyLG8pfSx0LnByb3RvdHlwZS5hbGw9ZnVuY3Rpb24odCxlKXtyZXR1cm4gdm9pZCAwPT09dCYmKHQ9bnVsbCksdm9pZCAwPT09ZSYmKGU9ITEpLHRoaXMudGhyb3dJZkRpc3Bvc2VkKCkseHQuYWxsKHRoaXMsdCxlKX0sdC5wcm90b3R5cGUuYW55PWZ1bmN0aW9uKHQsZSl7cmV0dXJuIHZvaWQgMD09PXQmJih0PW51bGwpLHZvaWQgMD09PWUmJihlPSExKSx0aGlzLnRocm93SWZEaXNwb3NlZCgpLHh0LmFueSh0aGlzLHQsZSl9LHQucHJvdG90eXBlLmxvZ1N1bUV4cD1mdW5jdGlvbih0LGUpe3JldHVybiB2b2lkIDA9PT10JiYodD1udWxsKSx2b2lkIDA9PT1lJiYoZT0hMSksdGhpcy50aHJvd0lmRGlzcG9zZWQoKSx4dC5sb2dTdW1FeHAodGhpcyx0LGUpfSx0LnByb3RvdHlwZS5zdW09ZnVuY3Rpb24odCxlKXtyZXR1cm4gdm9pZCAwPT09dCYmKHQ9bnVsbCksdm9pZCAwPT09ZSYmKGU9ITEpLHRoaXMudGhyb3dJZkRpc3Bvc2VkKCkseHQuc3VtKHRoaXMsdCxlKX0sdC5wcm90b3R5cGUucHJvZD1mdW5jdGlvbih0LGUpe3JldHVybiB2b2lkIDA9PT10JiYodD1udWxsKSx2b2lkIDA9PT1lJiYoZT0hMSksdGhpcy50aHJvd0lmRGlzcG9zZWQoKSx4dC5wcm9kKHRoaXMsdCxlKX0sdC5wcm90b3R5cGUubWVhbj1mdW5jdGlvbih0LGUpe3JldHVybiB2b2lkIDA9PT10JiYodD1udWxsKSx2b2lkIDA9PT1lJiYoZT0hMSksdGhpcy50aHJvd0lmRGlzcG9zZWQoKSx4dC5tZWFuKHRoaXMsdCxlKX0sdC5wcm90b3R5cGUubWluPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIHZvaWQgMD09PXQmJih0PW51bGwpLHZvaWQgMD09PWUmJihlPSExKSx0aGlzLnRocm93SWZEaXNwb3NlZCgpLHh0Lm1pbih0aGlzLHQsZSl9LHQucHJvdG90eXBlLm1heD1mdW5jdGlvbih0LGUpe3JldHVybiB2b2lkIDA9PT10JiYodD1udWxsKSx2b2lkIDA9PT1lJiYoZT0hMSksdGhpcy50aHJvd0lmRGlzcG9zZWQoKSx4dC5tYXgodGhpcyx0LGUpfSx0LnByb3RvdHlwZS5hcmdNaW49ZnVuY3Rpb24odCl7cmV0dXJuIHZvaWQgMD09PXQmJih0PW51bGwpLHRoaXMudGhyb3dJZkRpc3Bvc2VkKCkseHQuYXJnTWluKHRoaXMsdCl9LHQucHJvdG90eXBlLmFyZ01heD1mdW5jdGlvbih0KXtyZXR1cm4gdm9pZCAwPT09dCYmKHQ9bnVsbCksdGhpcy50aHJvd0lmRGlzcG9zZWQoKSx4dC5hcmdNYXgodGhpcyx0KX0sdC5wcm90b3R5cGUuY2FzdD1mdW5jdGlvbih0KXtyZXR1cm4gdGhpcy50aHJvd0lmRGlzcG9zZWQoKSx4dC5jYXN0KHRoaXMsdCl9LHQucHJvdG90eXBlLmFkZD1mdW5jdGlvbih0KXtyZXR1cm4gdGhpcy50aHJvd0lmRGlzcG9zZWQoKSx4dC5hZGQodGhpcyx0KX0sdC5wcm90b3R5cGUuYWRkU3RyaWN0PWZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLnRocm93SWZEaXNwb3NlZCgpLHh0LmFkZFN0cmljdCh0aGlzLHQpfSx0LnByb3RvdHlwZS5hdGFuMj1mdW5jdGlvbih0KXtyZXR1cm4gdGhpcy50aHJvd0lmRGlzcG9zZWQoKSx4dC5hdGFuMih0aGlzLHQpfSx0LnByb3RvdHlwZS5zdWI9ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMudGhyb3dJZkRpc3Bvc2VkKCkseHQuc3ViKHRoaXMsdCl9LHQucHJvdG90eXBlLnN1YlN0cmljdD1mdW5jdGlvbih0KXtyZXR1cm4gdGhpcy50aHJvd0lmRGlzcG9zZWQoKSx4dC5zdWJTdHJpY3QodGhpcyx0KX0sdC5wcm90b3R5cGUucG93PWZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLnRocm93SWZEaXNwb3NlZCgpLHh0LnBvdyh0aGlzLHQpfSx0LnByb3RvdHlwZS5wb3dTdHJpY3Q9ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMudGhyb3dJZkRpc3Bvc2VkKCkseHQucG93U3RyaWN0KHRoaXMsdCl9LHQucHJvdG90eXBlLm11bD1mdW5jdGlvbih0KXtyZXR1cm4gdGhpcy50aHJvd0lmRGlzcG9zZWQoKSx4dC5tdWwodGhpcyx0KX0sdC5wcm90b3R5cGUubXVsU3RyaWN0PWZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLnRocm93SWZEaXNwb3NlZCgpLHh0Lm11bFN0cmljdCh0aGlzLHQpfSx0LnByb3RvdHlwZS5kaXY9ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMudGhyb3dJZkRpc3Bvc2VkKCkseHQuZGl2KHRoaXMsdCl9LHQucHJvdG90eXBlLmRpdk5vTmFuPWZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLnRocm93SWZEaXNwb3NlZCgpLHh0LmRpdk5vTmFuKHRoaXMsdCl9LHQucHJvdG90eXBlLmZsb29yRGl2PWZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLnRocm93SWZEaXNwb3NlZCgpLHh0LmZsb29yRGl2KHRoaXMsdCl9LHQucHJvdG90eXBlLmRpdlN0cmljdD1mdW5jdGlvbih0KXtyZXR1cm4gdGhpcy50aHJvd0lmRGlzcG9zZWQoKSx4dC5kaXZTdHJpY3QodGhpcyx0KX0sdC5wcm90b3R5cGUubWluaW11bT1mdW5jdGlvbih0KXtyZXR1cm4gdGhpcy50aHJvd0lmRGlzcG9zZWQoKSx4dC5taW5pbXVtKHRoaXMsdCl9LHQucHJvdG90eXBlLm1pbmltdW1TdHJpY3Q9ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMudGhyb3dJZkRpc3Bvc2VkKCkseHQubWluaW11bVN0cmljdCh0aGlzLHQpfSx0LnByb3RvdHlwZS5tYXhpbXVtPWZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLnRocm93SWZEaXNwb3NlZCgpLHh0Lm1heGltdW0odGhpcyx0KX0sdC5wcm90b3R5cGUubWF4aW11bVN0cmljdD1mdW5jdGlvbih0KXtyZXR1cm4gdGhpcy50aHJvd0lmRGlzcG9zZWQoKSx4dC5tYXhpbXVtU3RyaWN0KHRoaXMsdCl9LHQucHJvdG90eXBlLm1vZD1mdW5jdGlvbih0KXtyZXR1cm4gdGhpcy50aHJvd0lmRGlzcG9zZWQoKSx4dC5tb2QodGhpcyx0KX0sdC5wcm90b3R5cGUubW9kU3RyaWN0PWZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLnRocm93SWZEaXNwb3NlZCgpLHh0Lm1vZFN0cmljdCh0aGlzLHQpfSx0LnByb3RvdHlwZS5zcXVhcmVkRGlmZmVyZW5jZVN0cmljdD1mdW5jdGlvbih0KXtyZXR1cm4gdGhpcy50aHJvd0lmRGlzcG9zZWQoKSx4dC5zcXVhcmVkRGlmZmVyZW5jZVN0cmljdCh0aGlzLHQpfSx0LnByb3RvdHlwZS50cmFuc3Bvc2U9ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMudGhyb3dJZkRpc3Bvc2VkKCkseHQudHJhbnNwb3NlKHRoaXMsdCl9LHQucHJvdG90eXBlLm5vdEVxdWFsPWZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLnRocm93SWZEaXNwb3NlZCgpLHh0Lm5vdEVxdWFsKHRoaXMsdCl9LHQucHJvdG90eXBlLm5vdEVxdWFsU3RyaWN0PWZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLnRocm93SWZEaXNwb3NlZCgpLHh0Lm5vdEVxdWFsU3RyaWN0KHRoaXMsdCl9LHQucHJvdG90eXBlLmxlc3M9ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMudGhyb3dJZkRpc3Bvc2VkKCkseHQubGVzcyh0aGlzLHQpfSx0LnByb3RvdHlwZS5sZXNzU3RyaWN0PWZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLnRocm93SWZEaXNwb3NlZCgpLHh0Lmxlc3NTdHJpY3QodGhpcyx0KX0sdC5wcm90b3R5cGUuZXF1YWw9ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMudGhyb3dJZkRpc3Bvc2VkKCkseHQuZXF1YWwodGhpcyx0KX0sdC5wcm90b3R5cGUuZXF1YWxTdHJpY3Q9ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMudGhyb3dJZkRpc3Bvc2VkKCkseHQuZXF1YWxTdHJpY3QodGhpcyx0KX0sdC5wcm90b3R5cGUubGVzc0VxdWFsPWZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLnRocm93SWZEaXNwb3NlZCgpLHh0Lmxlc3NFcXVhbCh0aGlzLHQpfSx0LnByb3RvdHlwZS5sZXNzRXF1YWxTdHJpY3Q9ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMudGhyb3dJZkRpc3Bvc2VkKCkseHQubGVzc0VxdWFsU3RyaWN0KHRoaXMsdCl9LHQucHJvdG90eXBlLmdyZWF0ZXI9ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMudGhyb3dJZkRpc3Bvc2VkKCkseHQuZ3JlYXRlcih0aGlzLHQpfSx0LnByb3RvdHlwZS5ncmVhdGVyU3RyaWN0PWZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLnRocm93SWZEaXNwb3NlZCgpLHh0LmdyZWF0ZXJTdHJpY3QodGhpcyx0KX0sdC5wcm90b3R5cGUuZ3JlYXRlckVxdWFsPWZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLnRocm93SWZEaXNwb3NlZCgpLHh0LmdyZWF0ZXJFcXVhbCh0aGlzLHQpfSx0LnByb3RvdHlwZS5ncmVhdGVyRXF1YWxTdHJpY3Q9ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMudGhyb3dJZkRpc3Bvc2VkKCkseHQuZ3JlYXRlckVxdWFsU3RyaWN0KHRoaXMsdCl9LHQucHJvdG90eXBlLmxvZ2ljYWxBbmQ9ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMudGhyb3dJZkRpc3Bvc2VkKCkseHQubG9naWNhbEFuZCh0aGlzLHQpfSx0LnByb3RvdHlwZS5sb2dpY2FsT3I9ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMudGhyb3dJZkRpc3Bvc2VkKCkseHQubG9naWNhbE9yKHRoaXMsdCl9LHQucHJvdG90eXBlLmxvZ2ljYWxOb3Q9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy50aHJvd0lmRGlzcG9zZWQoKSx4dC5sb2dpY2FsTm90KHRoaXMpfSx0LnByb3RvdHlwZS5sb2dpY2FsWG9yPWZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLnRocm93SWZEaXNwb3NlZCgpLHh0LmxvZ2ljYWxYb3IodGhpcyx0KX0sdC5wcm90b3R5cGUud2hlcmU9ZnVuY3Rpb24odCxlKXtyZXR1cm4gdGhpcy50aHJvd0lmRGlzcG9zZWQoKSx4dC53aGVyZSh0LHRoaXMsZSl9LHQucHJvdG90eXBlLm5lZz1mdW5jdGlvbigpe3JldHVybiB0aGlzLnRocm93SWZEaXNwb3NlZCgpLHh0Lm5lZyh0aGlzKX0sdC5wcm90b3R5cGUuY2VpbD1mdW5jdGlvbigpe3JldHVybiB0aGlzLnRocm93SWZEaXNwb3NlZCgpLHh0LmNlaWwodGhpcyl9LHQucHJvdG90eXBlLmZsb29yPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMudGhyb3dJZkRpc3Bvc2VkKCkseHQuZmxvb3IodGhpcyl9LHQucHJvdG90eXBlLnNpZ249ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy50aHJvd0lmRGlzcG9zZWQoKSx4dC5zaWduKHRoaXMpfSx0LnByb3RvdHlwZS5pc05hTj1mdW5jdGlvbigpe3JldHVybiB0aGlzLnRocm93SWZEaXNwb3NlZCgpLHh0LmlzTmFOKHRoaXMpfSx0LnByb3RvdHlwZS5pc0luZj1mdW5jdGlvbigpe3JldHVybiB0aGlzLnRocm93SWZEaXNwb3NlZCgpLHh0LmlzSW5mKHRoaXMpfSx0LnByb3RvdHlwZS5pc0Zpbml0ZT1mdW5jdGlvbigpe3JldHVybiB0aGlzLnRocm93SWZEaXNwb3NlZCgpLHh0LmlzRmluaXRlKHRoaXMpfSx0LnByb3RvdHlwZS5leHA9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy50aHJvd0lmRGlzcG9zZWQoKSx4dC5leHAodGhpcyl9LHQucHJvdG90eXBlLmV4cG0xPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMudGhyb3dJZkRpc3Bvc2VkKCkseHQuZXhwbTEodGhpcyl9LHQucHJvdG90eXBlLmxvZz1mdW5jdGlvbigpe3JldHVybiB0aGlzLnRocm93SWZEaXNwb3NlZCgpLHh0LmxvZyh0aGlzKX0sdC5wcm90b3R5cGUubG9nMXA9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy50aHJvd0lmRGlzcG9zZWQoKSx4dC5sb2cxcCh0aGlzKX0sdC5wcm90b3R5cGUuc3FydD1mdW5jdGlvbigpe3JldHVybiB0aGlzLnRocm93SWZEaXNwb3NlZCgpLHh0LnNxcnQodGhpcyl9LHQucHJvdG90eXBlLnJzcXJ0PWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMudGhyb3dJZkRpc3Bvc2VkKCkseHQucnNxcnQodGhpcyl9LHQucHJvdG90eXBlLnNxdWFyZT1mdW5jdGlvbigpe3JldHVybiB0aGlzLnRocm93SWZEaXNwb3NlZCgpLHh0LnNxdWFyZSh0aGlzKX0sdC5wcm90b3R5cGUucmVjaXByb2NhbD1mdW5jdGlvbigpe3JldHVybiB0aGlzLnRocm93SWZEaXNwb3NlZCgpLHh0LnJlY2lwcm9jYWwodGhpcyl9LHQucHJvdG90eXBlLmFicz1mdW5jdGlvbigpe3JldHVybiB0aGlzLnRocm93SWZEaXNwb3NlZCgpLHh0LmFicyh0aGlzKX0sdC5wcm90b3R5cGUuY2xpcEJ5VmFsdWU9ZnVuY3Rpb24odCxlKXtyZXR1cm4gdGhpcy50aHJvd0lmRGlzcG9zZWQoKSx4dC5jbGlwQnlWYWx1ZSh0aGlzLHQsZSl9LHQucHJvdG90eXBlLnJlbHU9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy50aHJvd0lmRGlzcG9zZWQoKSx4dC5yZWx1KHRoaXMpfSx0LnByb3RvdHlwZS5yZWx1Nj1mdW5jdGlvbigpe3JldHVybiB0aGlzLnRocm93SWZEaXNwb3NlZCgpLHh0LnJlbHU2KHRoaXMpfSx0LnByb3RvdHlwZS5lbHU9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy50aHJvd0lmRGlzcG9zZWQoKSx4dC5lbHUodGhpcyl9LHQucHJvdG90eXBlLnNlbHU9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy50aHJvd0lmRGlzcG9zZWQoKSx4dC5zZWx1KHRoaXMpfSx0LnByb3RvdHlwZS5sZWFreVJlbHU9ZnVuY3Rpb24odCl7cmV0dXJuIHZvaWQgMD09PXQmJih0PS4yKSx0aGlzLnRocm93SWZEaXNwb3NlZCgpLHh0LmxlYWt5UmVsdSh0aGlzLHQpfSx0LnByb3RvdHlwZS5wcmVsdT1mdW5jdGlvbih0KXtyZXR1cm4gdGhpcy50aHJvd0lmRGlzcG9zZWQoKSx4dC5wcmVsdSh0aGlzLHQpfSx0LnByb3RvdHlwZS5zaWdtb2lkPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMudGhyb3dJZkRpc3Bvc2VkKCkseHQuc2lnbW9pZCh0aGlzKX0sdC5wcm90b3R5cGUubG9nU2lnbW9pZD1mdW5jdGlvbigpe3JldHVybiB0aGlzLnRocm93SWZEaXNwb3NlZCgpLHh0LmxvZ1NpZ21vaWQodGhpcyl9LHQucHJvdG90eXBlLnNvZnRwbHVzPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMudGhyb3dJZkRpc3Bvc2VkKCkseHQuc29mdHBsdXModGhpcyl9LHQucHJvdG90eXBlLnplcm9zTGlrZT1mdW5jdGlvbigpe3JldHVybiB0aGlzLnRocm93SWZEaXNwb3NlZCgpLHh0Lnplcm9zTGlrZSh0aGlzKX0sdC5wcm90b3R5cGUub25lc0xpa2U9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy50aHJvd0lmRGlzcG9zZWQoKSx4dC5vbmVzTGlrZSh0aGlzKX0sdC5wcm90b3R5cGUuc2luPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMudGhyb3dJZkRpc3Bvc2VkKCkseHQuc2luKHRoaXMpfSx0LnByb3RvdHlwZS5jb3M9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy50aHJvd0lmRGlzcG9zZWQoKSx4dC5jb3ModGhpcyl9LHQucHJvdG90eXBlLnRhbj1mdW5jdGlvbigpe3JldHVybiB0aGlzLnRocm93SWZEaXNwb3NlZCgpLHh0LnRhbih0aGlzKX0sdC5wcm90b3R5cGUuYXNpbj1mdW5jdGlvbigpe3JldHVybiB0aGlzLnRocm93SWZEaXNwb3NlZCgpLHh0LmFzaW4odGhpcyl9LHQucHJvdG90eXBlLmFjb3M9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy50aHJvd0lmRGlzcG9zZWQoKSx4dC5hY29zKHRoaXMpfSx0LnByb3RvdHlwZS5hdGFuPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMudGhyb3dJZkRpc3Bvc2VkKCkseHQuYXRhbih0aGlzKX0sdC5wcm90b3R5cGUuc2luaD1mdW5jdGlvbigpe3JldHVybiB0aGlzLnRocm93SWZEaXNwb3NlZCgpLHh0LnNpbmgodGhpcyl9LHQucHJvdG90eXBlLmNvc2g9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy50aHJvd0lmRGlzcG9zZWQoKSx4dC5jb3NoKHRoaXMpfSx0LnByb3RvdHlwZS50YW5oPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMudGhyb3dJZkRpc3Bvc2VkKCkseHQudGFuaCh0aGlzKX0sdC5wcm90b3R5cGUuYXNpbmg9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy50aHJvd0lmRGlzcG9zZWQoKSx4dC5hc2luaCh0aGlzKX0sdC5wcm90b3R5cGUuYWNvc2g9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy50aHJvd0lmRGlzcG9zZWQoKSx4dC5hY29zaCh0aGlzKX0sdC5wcm90b3R5cGUuYXRhbmg9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy50aHJvd0lmRGlzcG9zZWQoKSx4dC5hdGFuaCh0aGlzKX0sdC5wcm90b3R5cGUuZXJmPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMudGhyb3dJZkRpc3Bvc2VkKCkseHQuZXJmKHRoaXMpfSx0LnByb3RvdHlwZS5yb3VuZD1mdW5jdGlvbigpe3JldHVybiB0aGlzLnRocm93SWZEaXNwb3NlZCgpLHh0LnJvdW5kKHRoaXMpfSx0LnByb3RvdHlwZS5zdGVwPWZ1bmN0aW9uKHQpe3JldHVybiB2b2lkIDA9PT10JiYodD0wKSx0aGlzLnRocm93SWZEaXNwb3NlZCgpLHh0LnN0ZXAodGhpcyx0KX0sdC5wcm90b3R5cGUuc29mdG1heD1mdW5jdGlvbih0KXtyZXR1cm4gdm9pZCAwPT09dCYmKHQ9LTEpLHRoaXMudGhyb3dJZkRpc3Bvc2VkKCkseHQuc29mdG1heCh0aGlzLHQpfSx0LnByb3RvdHlwZS5sb2dTb2Z0bWF4PWZ1bmN0aW9uKHQpe3JldHVybiB2b2lkIDA9PT10JiYodD0tMSksdGhpcy50aHJvd0lmRGlzcG9zZWQoKSx4dC5sb2dTb2Z0bWF4KHRoaXMsdCl9LHQucHJvdG90eXBlLnJlc2l6ZUJpbGluZWFyPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIHZvaWQgMD09PWUmJihlPSExKSx0aGlzLnRocm93SWZEaXNwb3NlZCgpLHh0LmltYWdlLnJlc2l6ZUJpbGluZWFyKHRoaXMsdCxlKX0sdC5wcm90b3R5cGUucmVzaXplTmVhcmVzdE5laWdoYm9yPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIHZvaWQgMD09PWUmJihlPSExKSx0aGlzLnRocm93SWZEaXNwb3NlZCgpLHh0LmltYWdlLnJlc2l6ZU5lYXJlc3ROZWlnaGJvcih0aGlzLHQsZSl9LHQucHJvdG90eXBlLmNvbnYxZD1mdW5jdGlvbih0LGUsbixyLG8sYSl7cmV0dXJuIHZvaWQgMD09PXImJihyPVwiTldDXCIpLHZvaWQgMD09PW8mJihvPTEpLHRoaXMudGhyb3dJZkRpc3Bvc2VkKCkseHQuY29udjFkKHRoaXMsdCxlLG4scixvLGEpfSx0LnByb3RvdHlwZS5jb252MmQ9ZnVuY3Rpb24odCxlLG4scixvLGEpe3JldHVybiB2b2lkIDA9PT1yJiYocj1cIk5IV0NcIiksdm9pZCAwPT09byYmKG89WzEsMV0pLHRoaXMudGhyb3dJZkRpc3Bvc2VkKCkseHQuY29udjJkKHRoaXMsdCxlLG4scixvLGEpfSx0LnByb3RvdHlwZS5jb252MmRUcmFuc3Bvc2U9ZnVuY3Rpb24odCxlLG4scixvKXtyZXR1cm4gdGhpcy50aHJvd0lmRGlzcG9zZWQoKSx4dC5jb252MmRUcmFuc3Bvc2UodGhpcyx0LGUsbixyLG8pfSx0LnByb3RvdHlwZS5kZXB0aHdpc2VDb252MkQ9ZnVuY3Rpb24odCxlLG4scixvLGEpe3JldHVybiB2b2lkIDA9PT1yJiYocj1cIk5IV0NcIiksdm9pZCAwPT09byYmKG89WzEsMV0pLHRoaXMudGhyb3dJZkRpc3Bvc2VkKCkseHQuZGVwdGh3aXNlQ29udjJkKHRoaXMsdCxlLG4scixvLGEpfSx0LnByb3RvdHlwZS5zZXBhcmFibGVDb252MmQ9ZnVuY3Rpb24odCxlLG4scixvLGEpe3JldHVybiB2b2lkIDA9PT1vJiYobz1bMSwxXSksdm9pZCAwPT09YSYmKGE9XCJOSFdDXCIpLHRoaXMudGhyb3dJZkRpc3Bvc2VkKCkseHQuc2VwYXJhYmxlQ29udjJkKHRoaXMsdCxlLG4scixvLGEpfSx0LnByb3RvdHlwZS5hdmdQb29sPWZ1bmN0aW9uKHQsZSxuLHIpe3JldHVybiB0aGlzLnRocm93SWZEaXNwb3NlZCgpLHh0LmF2Z1Bvb2wodGhpcyx0LGUsbixyKX0sdC5wcm90b3R5cGUubWF4UG9vbD1mdW5jdGlvbih0LGUsbixyKXtyZXR1cm4gdGhpcy50aHJvd0lmRGlzcG9zZWQoKSx4dC5tYXhQb29sKHRoaXMsdCxlLG4scil9LHQucHJvdG90eXBlLmxvY2FsUmVzcG9uc2VOb3JtYWxpemF0aW9uPWZ1bmN0aW9uKHQsZSxuLHIpe3JldHVybiB2b2lkIDA9PT10JiYodD01KSx2b2lkIDA9PT1lJiYoZT0xKSx2b2lkIDA9PT1uJiYobj0xKSx2b2lkIDA9PT1yJiYocj0uNSkseHQubG9jYWxSZXNwb25zZU5vcm1hbGl6YXRpb24odGhpcyx0LGUsbixyKX0sdC5wcm90b3R5cGUucG9vbD1mdW5jdGlvbih0LGUsbixyLG8pe3JldHVybiB0aGlzLnRocm93SWZEaXNwb3NlZCgpLHh0LnBvb2wodGhpcyx0LGUsbixyLG8pfSx0LnByb3RvdHlwZS52YXJpYWJsZT1mdW5jdGlvbih0LGUsbil7cmV0dXJuIHZvaWQgMD09PXQmJih0PSEwKSx0aGlzLnRocm93SWZEaXNwb3NlZCgpLHl0KCkubWFrZVZhcmlhYmxlKHRoaXMsdCxlLG4pfSx0LnByb3RvdHlwZS51bnNvcnRlZFNlZ21lbnRTdW09ZnVuY3Rpb24odCxlKXtyZXR1cm4gdGhpcy50aHJvd0lmRGlzcG9zZWQoKSx4dC51bnNvcnRlZFNlZ21lbnRTdW0odGhpcyx0LGUpfSx0LnByb3RvdHlwZS5iYXRjaFRvU3BhY2VORD1mdW5jdGlvbih0LGUpe3JldHVybiB0aGlzLnRocm93SWZEaXNwb3NlZCgpLHh0LmJhdGNoVG9TcGFjZU5EKHRoaXMsdCxlKX0sdC5wcm90b3R5cGUuc3BhY2VUb0JhdGNoTkQ9ZnVuY3Rpb24odCxlKXtyZXR1cm4gdGhpcy50aHJvd0lmRGlzcG9zZWQoKSx4dC5zcGFjZVRvQmF0Y2hORCh0aGlzLHQsZSl9LHQucHJvdG90eXBlLnRvcGs9ZnVuY3Rpb24odCxlKXtyZXR1cm4gdm9pZCAwPT09dCYmKHQ9MSksdm9pZCAwPT09ZSYmKGU9ITApLHRoaXMudGhyb3dJZkRpc3Bvc2VkKCkseHQudG9wayh0aGlzLHQsZSl9LHQucHJvdG90eXBlLnN0cmlkZWRTbGljZT1mdW5jdGlvbih0LGUsbixyLG8sYSxpLHMpe3JldHVybiB2b2lkIDA9PT1yJiYocj0wKSx2b2lkIDA9PT1vJiYobz0wKSx2b2lkIDA9PT1hJiYoYT0wKSx2b2lkIDA9PT1pJiYoaT0wKSx2b2lkIDA9PT1zJiYocz0wKSx0aGlzLnRocm93SWZEaXNwb3NlZCgpLHh0LnN0cmlkZWRTbGljZSh0aGlzLHQsZSxuLHIsbyxhLGkscyl9LHQucHJvdG90eXBlLmRlcHRoVG9TcGFjZT1mdW5jdGlvbih0LGUpe3JldHVybiB0aGlzLnRocm93SWZEaXNwb3NlZCgpLHh0LmRlcHRoVG9TcGFjZSh0aGlzLHQsZSl9LHQucHJvdG90eXBlLmZmdD1mdW5jdGlvbigpe3JldHVybiB0aGlzLnRocm93SWZEaXNwb3NlZCgpLHh0LnNwZWN0cmFsLmZmdCh0aGlzKX0sdC5wcm90b3R5cGUuaWZmdD1mdW5jdGlvbigpe3JldHVybiB0aGlzLnRocm93SWZEaXNwb3NlZCgpLHh0LnNwZWN0cmFsLmlmZnQodGhpcyl9LHQucHJvdG90eXBlLnJmZnQ9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy50aHJvd0lmRGlzcG9zZWQoKSx4dC5zcGVjdHJhbC5yZmZ0KHRoaXMpfSx0LnByb3RvdHlwZS5pcmZmdD1mdW5jdGlvbigpe3JldHVybiB0aGlzLnRocm93SWZEaXNwb3NlZCgpLHh0LnNwZWN0cmFsLmlyZmZ0KHRoaXMpfSx0fSgpO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh3dCxTeW1ib2wuaGFzSW5zdGFuY2Use3ZhbHVlOmZ1bmN0aW9uKHQpe3JldHVybiEhdCYmbnVsbCE9dC5kYXRhSWQmJm51bGwhPXQuc2hhcGUmJm51bGwhPXQuZHR5cGV9fSk7dmFyIEN0LEV0LFJ0LEl0LGt0LFN0PWZ1bmN0aW9uKHQpe2Z1bmN0aW9uIG4oZSxuLHIsbyl7dmFyIGE9dC5jYWxsKHRoaXMsZS5zaGFwZSxlLmR0eXBlLGUuZGF0YUlkLG8pfHx0aGlzO3JldHVybiBhLnRyYWluYWJsZT1uLGEubmFtZT1yLGF9cmV0dXJuIGUobix0KSxuLnByb3RvdHlwZS5hc3NpZ249ZnVuY3Rpb24odCl7aWYodC5kdHlwZSE9PXRoaXMuZHR5cGUpdGhyb3cgbmV3IEVycm9yKFwiZHR5cGUgb2YgdGhlIG5ldyB2YWx1ZSAoXCIrdC5kdHlwZStcIikgYW5kIHByZXZpb3VzIHZhbHVlIChcIit0aGlzLmR0eXBlK1wiKSBtdXN0IG1hdGNoXCIpO2lmKCFTKHQuc2hhcGUsdGhpcy5zaGFwZSkpdGhyb3cgbmV3IEVycm9yKFwic2hhcGUgb2YgdGhlIG5ldyB2YWx1ZSAoXCIrdC5zaGFwZStcIikgYW5kIHByZXZpb3VzIHZhbHVlIChcIit0aGlzLnNoYXBlK1wiKSBtdXN0IG1hdGNoXCIpO3l0KCkuZGlzcG9zZVRlbnNvcih0aGlzKSx0aGlzLmRhdGFJZD10LmRhdGFJZCx5dCgpLmluY1JlZih0aGlzLG51bGwpfSxuLnByb3RvdHlwZS5kaXNwb3NlPWZ1bmN0aW9uKCl7eXQoKS5kaXNwb3NlVmFyaWFibGUodGhpcyksdGhpcy5pc0Rpc3Bvc2VkSW50ZXJuYWw9ITB9LG59KHd0KTtPYmplY3QuZGVmaW5lUHJvcGVydHkoU3QsU3ltYm9sLmhhc0luc3RhbmNlLHt2YWx1ZTpmdW5jdGlvbih0KXtyZXR1cm4gdCBpbnN0YW5jZW9mIHd0JiZudWxsIT10LmFzc2lnbiYmdC5hc3NpZ24gaW5zdGFuY2VvZiBGdW5jdGlvbn19KSxmdW5jdGlvbih0KXt0LlIwPVwiUjBcIix0LlIxPVwiUjFcIix0LlIyPVwiUjJcIix0LlIzPVwiUjNcIix0LlI0PVwiUjRcIix0LlI1PVwiUjVcIix0LlI2PVwiUjZcIn0oQ3R8fChDdD17fSkpLGZ1bmN0aW9uKHQpe3QuZmxvYXQzMj1cImZsb2F0MzJcIix0LmludDMyPVwiaW50MzJcIix0LmJvb2w9XCJpbnQzMlwiLHQuY29tcGxleDY0PVwiY29tcGxleDY0XCJ9KEV0fHwoRXQ9e30pKSxmdW5jdGlvbih0KXt0LmZsb2F0MzI9XCJmbG9hdDMyXCIsdC5pbnQzMj1cImludDMyXCIsdC5ib29sPVwiYm9vbFwiLHQuY29tcGxleDY0PVwiY29tcGxleDY0XCJ9KFJ0fHwoUnQ9e30pKSxmdW5jdGlvbih0KXt0LmZsb2F0MzI9XCJmbG9hdDMyXCIsdC5pbnQzMj1cImZsb2F0MzJcIix0LmJvb2w9XCJmbG9hdDMyXCIsdC5jb21wbGV4NjQ9XCJjb21wbGV4NjRcIn0oSXR8fChJdD17fSkpLGZ1bmN0aW9uKHQpe3QuZmxvYXQzMj1cImNvbXBsZXg2NFwiLHQuaW50MzI9XCJjb21wbGV4NjRcIix0LmJvb2w9XCJjb21wbGV4NjRcIix0LmNvbXBsZXg2ND1cImNvbXBsZXg2NFwifShrdHx8KGt0PXt9KSk7dmFyIEF0PXtmbG9hdDMyOkl0LGludDMyOkV0LGJvb2w6UnQsY29tcGxleDY0Omt0fTtmdW5jdGlvbiBEdCh0LGUpe2lmKFwic3RyaW5nXCI9PT10fHxcInN0cmluZ1wiPT09ZSl7aWYoXCJzdHJpbmdcIj09PXQmJlwic3RyaW5nXCI9PT1lKXJldHVyblwic3RyaW5nXCI7dGhyb3cgbmV3IEVycm9yKFwiQ2FuIG5vdCB1cGNhc3QgXCIrdCtcIiB3aXRoIFwiK2UpfXJldHVybiBBdFt0XVtlXX1mdW5jdGlvbiBUdCh0KXtyZXR1cm4gRHQodCxcImludDMyXCIpfWZ1bmN0aW9uIE50KHQsZSl7aWYodC5kdHlwZT09PWUuZHR5cGUpcmV0dXJuW3QsZV07dmFyIG49RHQodC5kdHlwZSxlLmR0eXBlKTtyZXR1cm5bdC5jYXN0KG4pLGUuY2FzdChuKV19ZnVuY3Rpb24gRnQodCxlKXtDKHQuZHR5cGU9PT1lLmR0eXBlLChmdW5jdGlvbigpe3JldHVyblwiVGhlIGR0eXBlcyBvZiB0aGUgZmlyc3QoXCIrdC5kdHlwZStcIikgYW5kIHNlY29uZChcIitlLmR0eXBlK1wiKSBpbnB1dCBtdXN0IG1hdGNoXCJ9KSl9ZnVuY3Rpb24gX3QodCl7dmFyIGU9W107cmV0dXJuIGZ1bmN0aW9uIHQoZSxuLHIpe2lmKG51bGw9PWUpcmV0dXJuO2lmKGUgaW5zdGFuY2VvZiB3dClyZXR1cm4gdm9pZCBuLnB1c2goZSk7aWYobz1lLCFBcnJheS5pc0FycmF5KG8pJiZcIm9iamVjdFwiIT10eXBlb2YgbylyZXR1cm47dmFyIG87dmFyIGE9ZTtmb3IodmFyIGkgaW4gYSl7dmFyIHM9YVtpXTtyLmhhcyhzKXx8KHIuYWRkKHMpLHQocyxuLHIpKX19KHQsZSxuZXcgU2V0KSxlfXZhciBPdCxNdD1PYmplY3QuZnJlZXplKHttYWtlVHlwZXNNYXRjaDpOdCxhc3NlcnRUeXBlc01hdGNoOkZ0LGlzVGVuc29ySW5MaXN0OmZ1bmN0aW9uKHQsZSl7cmV0dXJuIGUuc29tZSgoZnVuY3Rpb24oZSl7cmV0dXJuIGUuaWQ9PT10LmlkfSkpfSxnZXRUZW5zb3JzSW5Db250YWluZXI6X3R9KSxCdD1mdW5jdGlvbigpe2Z1bmN0aW9uIHQoKXt0aGlzLnJlZ2lzdGVyZWRWYXJpYWJsZXM9e30sdGhpcy5uZXh0VGFwZU5vZGVJZD0wLHRoaXMubnVtQnl0ZXM9MCx0aGlzLm51bVRlbnNvcnM9MCx0aGlzLm51bVN0cmluZ1RlbnNvcnM9MCx0aGlzLm51bURhdGFCdWZmZXJzPTAsdGhpcy5ncmFkaWVudERlcHRoPTAsdGhpcy5rZXJuZWxEZXB0aD0wLHRoaXMuc2NvcGVTdGFjaz1bXSx0aGlzLm51bURhdGFNb3Zlc1N0YWNrPVtdLHRoaXMubmV4dFNjb3BlSWQ9MCx0aGlzLnRlbnNvckluZm89bmV3IFdlYWtNYXAsdGhpcy5wcm9maWxpbmc9ITEsdGhpcy5hY3RpdmVQcm9maWxlPXtuZXdCeXRlczowLG5ld1RlbnNvcnM6MCxwZWFrQnl0ZXM6MCxrZXJuZWxzOltdLHJlc3VsdDpudWxsfX1yZXR1cm4gdC5wcm90b3R5cGUuZGlzcG9zZT1mdW5jdGlvbigpe2Zvcih2YXIgdCBpbiB0aGlzLnJlZ2lzdGVyZWRWYXJpYWJsZXMpdGhpcy5yZWdpc3RlcmVkVmFyaWFibGVzW3RdLmRpc3Bvc2UoKX0sdH0oKSxQdD1mdW5jdGlvbigpe2Z1bmN0aW9uIHQodCl7dGhpcy5FTlY9dCx0aGlzLnJlZ2lzdHJ5PXt9LHRoaXMucmVnaXN0cnlGYWN0b3J5PXt9LHRoaXMucGVuZGluZ0JhY2tlbmRJbml0SWQ9MCx0aGlzLnN0YXRlPW5ldyBCdH1yZXR1cm4gdC5wcm90b3R5cGUucmVhZHk9ZnVuY3Rpb24oKXtyZXR1cm4gbih0aGlzLHZvaWQgMCx2b2lkIDAsKGZ1bmN0aW9uKCl7dmFyIHQsZSxuO3JldHVybiByKHRoaXMsKGZ1bmN0aW9uKHIpe3N3aXRjaChyLmxhYmVsKXtjYXNlIDA6aWYobnVsbCE9dGhpcy5wZW5kaW5nQmFja2VuZEluaXQpcmV0dXJuWzIsdGhpcy5wZW5kaW5nQmFja2VuZEluaXQudGhlbigoZnVuY3Rpb24oKXt9KSldO2lmKG51bGwhPXRoaXMuYmFja2VuZEluc3RhbmNlKXJldHVyblsyXTt0PXRoaXMuZ2V0U29ydGVkQmFja2VuZHMoKSxlPTAsci5sYWJlbD0xO2Nhc2UgMTpyZXR1cm4gZTx0Lmxlbmd0aD8obj10W2VdLFs0LHRoaXMuaW5pdGlhbGl6ZUJhY2tlbmQobikuc3VjY2Vzc10pOlszLDVdO2Nhc2UgMjpyZXR1cm4gci5zZW50KCk/WzQsdGhpcy5zZXRCYWNrZW5kKG4pXTpbMyw0XTtjYXNlIDM6cmV0dXJuIHIuc2VudCgpLFsyXTtjYXNlIDQ6cmV0dXJuIGUrKyxbMywxXTtjYXNlIDU6dGhyb3cgbmV3IEVycm9yKFwiQ291bGQgbm90IGluaXRpYWxpemUgYW55IGJhY2tlbmRzLCBhbGwgYmFja2VuZCBpbml0aWFsaXphdGlvbnMgZmFpbGVkLlwiKX19KSl9KSl9LE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LnByb3RvdHlwZSxcImJhY2tlbmRcIix7Z2V0OmZ1bmN0aW9uKCl7aWYobnVsbCE9dGhpcy5wZW5kaW5nQmFja2VuZEluaXQpdGhyb3cgbmV3IEVycm9yKFwiQmFja2VuZCAnXCIrdGhpcy5iYWNrZW5kTmFtZStcIicgaGFzIG5vdCB5ZXQgYmVlbiBpbml0aWFsaXplZC4gTWFrZSBzdXJlIHRvIGF3YWl0IHRmLnJlYWR5KCkgb3IgYXdhaXQgdGYuc2V0QmFja2VuZCgpIGJlZm9yZSBjYWxsaW5nIG90aGVyIG1ldGhvZHNcIik7aWYobnVsbD09dGhpcy5iYWNrZW5kSW5zdGFuY2Upe3ZhciB0PXRoaXMuaW5pdGlhbGl6ZUJhY2tlbmRzQW5kUmV0dXJuQmVzdCgpLGU9dC5uYW1lO2lmKHQuYXN5bmNJbml0KXRocm93IG5ldyBFcnJvcihcIlRoZSBoaWdoZXN0IHByaW9yaXR5IGJhY2tlbmQgJ1wiK2UrXCInIGhhcyBub3QgeWV0IGJlZW4gaW5pdGlhbGl6ZWQuIE1ha2Ugc3VyZSB0byBhd2FpdCB0Zi5yZWFkeSgpIG9yIGF3YWl0IHRmLnNldEJhY2tlbmQoKSBiZWZvcmUgY2FsbGluZyBvdGhlciBtZXRob2RzXCIpO3RoaXMuc2V0QmFja2VuZChlKX1yZXR1cm4gdGhpcy5iYWNrZW5kSW5zdGFuY2V9LGVudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiEwfSksdC5wcm90b3R5cGUuYmFja2VuZE5hbWVzPWZ1bmN0aW9uKCl7cmV0dXJuIE9iamVjdC5rZXlzKHRoaXMucmVnaXN0cnlGYWN0b3J5KX0sdC5wcm90b3R5cGUuZmluZEJhY2tlbmQ9ZnVuY3Rpb24odCl7aWYoISh0IGluIHRoaXMucmVnaXN0cnkpKXtpZighKHQgaW4gdGhpcy5yZWdpc3RyeUZhY3RvcnkpKXJldHVybiBudWxsO2lmKHRoaXMuaW5pdGlhbGl6ZUJhY2tlbmQodCkuYXN5bmNJbml0KXJldHVybiBudWxsfXJldHVybiB0aGlzLnJlZ2lzdHJ5W3RdfSx0LnByb3RvdHlwZS5maW5kQmFja2VuZEZhY3Rvcnk9ZnVuY3Rpb24odCl7cmV0dXJuIHQgaW4gdGhpcy5yZWdpc3RyeUZhY3Rvcnk/dGhpcy5yZWdpc3RyeUZhY3RvcnlbdF0uZmFjdG9yeTpudWxsfSx0LnByb3RvdHlwZS5yZWdpc3RlckJhY2tlbmQ9ZnVuY3Rpb24odCxlLG4pe3JldHVybiB2b2lkIDA9PT1uJiYobj0xKSx0IGluIHRoaXMucmVnaXN0cnlGYWN0b3J5Pyhjb25zb2xlLndhcm4odCtcIiBiYWNrZW5kIHdhcyBhbHJlYWR5IHJlZ2lzdGVyZWQuIFJldXNpbmcgZXhpc3RpbmcgYmFja2VuZCBmYWN0b3J5LlwiKSwhMSk6KHRoaXMucmVnaXN0cnlGYWN0b3J5W3RdPXtmYWN0b3J5OmUscHJpb3JpdHk6bn0sITApfSx0LnByb3RvdHlwZS5zZXRCYWNrZW5kPWZ1bmN0aW9uKHQpe3JldHVybiBuKHRoaXMsdm9pZCAwLHZvaWQgMCwoZnVuY3Rpb24oKXt2YXIgZSxuLG87cmV0dXJuIHIodGhpcywoZnVuY3Rpb24ocil7c3dpdGNoKHIubGFiZWwpe2Nhc2UgMDppZihudWxsPT10aGlzLnJlZ2lzdHJ5RmFjdG9yeVt0XSl0aHJvdyBuZXcgRXJyb3IoXCJCYWNrZW5kIG5hbWUgJ1wiK3QrXCInIG5vdCBmb3VuZCBpbiByZWdpc3RyeVwiKTtyZXR1cm4gdGhpcy5iYWNrZW5kTmFtZT10LG51bGwhPXRoaXMucmVnaXN0cnlbdF0/WzMsNF06KHRoaXMuYmFja2VuZEluc3RhbmNlPW51bGwsZT10aGlzLmluaXRpYWxpemVCYWNrZW5kKHQpLG49ZS5zdWNjZXNzLGUuYXN5bmNJbml0P1s0LG5dOlszLDJdKTtjYXNlIDE6cmV0dXJuIG89ci5zZW50KCksWzMsM107Y2FzZSAyOm89bixyLmxhYmVsPTM7Y2FzZSAzOmlmKCFvKXJldHVyblsyLCExXTtyLmxhYmVsPTQ7Y2FzZSA0OnJldHVybiB0aGlzLmJhY2tlbmRJbnN0YW5jZT10aGlzLnJlZ2lzdHJ5W3RdLHRoaXMuc2V0dXBSZWdpc3RlcmVkS2VybmVscygpLHRoaXMucHJvZmlsZXI9bmV3IHV0KHRoaXMuYmFja2VuZEluc3RhbmNlKSxbMiwhMF19fSkpfSkpfSx0LnByb3RvdHlwZS5zZXR1cFJlZ2lzdGVyZWRLZXJuZWxzPWZ1bmN0aW9uKCl7dmFyIHQ9dGhpcztmKHRoaXMuYmFja2VuZE5hbWUpLmZvckVhY2goKGZ1bmN0aW9uKGUpe251bGwhPWUuc2V0dXBGdW5jJiZlLnNldHVwRnVuYyh0LmJhY2tlbmRJbnN0YW5jZSl9KSl9LHQucHJvdG90eXBlLmRpc3Bvc2VSZWdpc3RlcmVkS2VybmVscz1mdW5jdGlvbih0KXt2YXIgZT10aGlzO2YodCkuZm9yRWFjaCgoZnVuY3Rpb24obil7bnVsbCE9bi5kaXNwb3NlRnVuYyYmbi5kaXNwb3NlRnVuYyhlLnJlZ2lzdHJ5W3RdKX0pKX0sdC5wcm90b3R5cGUuaW5pdGlhbGl6ZUJhY2tlbmQ9ZnVuY3Rpb24odCl7dmFyIGU9dGhpcyxuPXRoaXMucmVnaXN0cnlGYWN0b3J5W3RdO2lmKG51bGw9PW4pdGhyb3cgbmV3IEVycm9yKFwiQ2Fubm90IGluaXRpYWxpemUgYmFja2VuZCBcIit0K1wiLCBubyByZWdpc3RyYXRpb24gZm91bmQuXCIpO3RyeXt2YXIgcj1uLmZhY3RvcnkoKTtpZihQcm9taXNlLnJlc29sdmUocik9PT1yKXt2YXIgbz0rK3RoaXMucGVuZGluZ0JhY2tlbmRJbml0SWQsYT1yLnRoZW4oKGZ1bmN0aW9uKG4pe3JldHVybiEobzxlLnBlbmRpbmdCYWNrZW5kSW5pdElkKSYmKGUucmVnaXN0cnlbdF09bixlLnBlbmRpbmdCYWNrZW5kSW5pdD1udWxsLCEwKX0pKS5jYXRjaCgoZnVuY3Rpb24obil7cmV0dXJuIShvPGUucGVuZGluZ0JhY2tlbmRJbml0SWQpJiYoZS5wZW5kaW5nQmFja2VuZEluaXQ9bnVsbCxjb25zb2xlLndhcm4oXCJJbml0aWFsaXphdGlvbiBvZiBiYWNrZW5kIFwiK3QrXCIgZmFpbGVkXCIpLGNvbnNvbGUud2FybihuLnN0YWNrfHxuLm1lc3NhZ2UpLCExKX0pKTtyZXR1cm4gdGhpcy5wZW5kaW5nQmFja2VuZEluaXQ9YSx7c3VjY2VzczphLGFzeW5jSW5pdDohMH19cmV0dXJuIHRoaXMucmVnaXN0cnlbdF09cix7c3VjY2VzczohMCxhc3luY0luaXQ6ITF9fWNhdGNoKGUpe3JldHVybiBjb25zb2xlLndhcm4oXCJJbml0aWFsaXphdGlvbiBvZiBiYWNrZW5kIFwiK3QrXCIgZmFpbGVkXCIpLGNvbnNvbGUud2FybihlLnN0YWNrfHxlLm1lc3NhZ2UpLHtzdWNjZXNzOiExLGFzeW5jSW5pdDohMX19fSx0LnByb3RvdHlwZS5yZW1vdmVCYWNrZW5kPWZ1bmN0aW9uKHQpe2lmKCEodCBpbiB0aGlzLnJlZ2lzdHJ5RmFjdG9yeSkpdGhyb3cgbmV3IEVycm9yKHQrXCIgYmFja2VuZCBub3QgZm91bmQgaW4gcmVnaXN0cnlcIik7dGhpcy5iYWNrZW5kTmFtZT09PXQmJm51bGwhPXRoaXMucGVuZGluZ0JhY2tlbmRJbml0JiZ0aGlzLnBlbmRpbmdCYWNrZW5kSW5pdElkKyssdCBpbiB0aGlzLnJlZ2lzdHJ5JiYodGhpcy5kaXNwb3NlUmVnaXN0ZXJlZEtlcm5lbHModCksdGhpcy5yZWdpc3RyeVt0XS5kaXNwb3NlKCksZGVsZXRlIHRoaXMucmVnaXN0cnlbdF0pLGRlbGV0ZSB0aGlzLnJlZ2lzdHJ5RmFjdG9yeVt0XSx0aGlzLmJhY2tlbmROYW1lPT09dCYmKHRoaXMucGVuZGluZ0JhY2tlbmRJbml0PW51bGwsdGhpcy5iYWNrZW5kTmFtZT1udWxsLHRoaXMuYmFja2VuZEluc3RhbmNlPW51bGwpfSx0LnByb3RvdHlwZS5nZXRTb3J0ZWRCYWNrZW5kcz1mdW5jdGlvbigpe3ZhciB0PXRoaXM7aWYoMD09PU9iamVjdC5rZXlzKHRoaXMucmVnaXN0cnlGYWN0b3J5KS5sZW5ndGgpdGhyb3cgbmV3IEVycm9yKFwiTm8gYmFja2VuZCBmb3VuZCBpbiByZWdpc3RyeS5cIik7cmV0dXJuIE9iamVjdC5rZXlzKHRoaXMucmVnaXN0cnlGYWN0b3J5KS5zb3J0KChmdW5jdGlvbihlLG4pe3JldHVybiB0LnJlZ2lzdHJ5RmFjdG9yeVtuXS5wcmlvcml0eS10LnJlZ2lzdHJ5RmFjdG9yeVtlXS5wcmlvcml0eX0pKX0sdC5wcm90b3R5cGUuaW5pdGlhbGl6ZUJhY2tlbmRzQW5kUmV0dXJuQmVzdD1mdW5jdGlvbigpe2Zvcih2YXIgdD10aGlzLmdldFNvcnRlZEJhY2tlbmRzKCksZT0wO2U8dC5sZW5ndGg7ZSsrKXt2YXIgbj10W2VdLHI9dGhpcy5pbml0aWFsaXplQmFja2VuZChuKSxvPXIuc3VjY2VzcyxhPXIuYXN5bmNJbml0O2lmKGF8fG8pcmV0dXJue25hbWU6bixhc3luY0luaXQ6YX19dGhyb3cgbmV3IEVycm9yKFwiQ291bGQgbm90IGluaXRpYWxpemUgYW55IGJhY2tlbmRzLCBhbGwgYmFja2VuZCBpbml0aWFsaXphdGlvbnMgZmFpbGVkLlwiKX0sdC5wcm90b3R5cGUubW92ZURhdGE9ZnVuY3Rpb24odCxlKXt2YXIgbj10aGlzLnN0YXRlLnRlbnNvckluZm8uZ2V0KGUpLHI9bi5iYWNrZW5kLG89dGhpcy5yZWFkU3luYyhlKTtyLmRpc3Bvc2VEYXRhKGUpLG4uYmFja2VuZD10LHQubW92ZShlLG8sbi5zaGFwZSxuLmR0eXBlKSx0aGlzLnNob3VsZENoZWNrRm9yTWVtTGVha3MoKSYmdGhpcy5zdGF0ZS5udW1EYXRhTW92ZXNTdGFja1t0aGlzLnN0YXRlLm51bURhdGFNb3Zlc1N0YWNrLmxlbmd0aC0xXSsrfSx0LnByb3RvdHlwZS50aWR5PWZ1bmN0aW9uKHQsZSl7dmFyIG4scj10aGlzLG89bnVsbDtpZihudWxsPT1lKXtpZihcImZ1bmN0aW9uXCIhPXR5cGVvZiB0KXRocm93IG5ldyBFcnJvcihcIlBsZWFzZSBwcm92aWRlIGEgZnVuY3Rpb24gdG8gdGlkeSgpXCIpO2U9dH1lbHNle2lmKFwic3RyaW5nXCIhPXR5cGVvZiB0JiYhKHQgaW5zdGFuY2VvZiBTdHJpbmcpKXRocm93IG5ldyBFcnJvcihcIldoZW4gY2FsbGluZyB3aXRoIHR3byBhcmd1bWVudHMsIHRoZSBmaXJzdCBhcmd1bWVudCB0byB0aWR5KCkgbXVzdCBiZSBhIHN0cmluZ1wiKTtpZihcImZ1bmN0aW9uXCIhPXR5cGVvZiBlKXRocm93IG5ldyBFcnJvcihcIldoZW4gY2FsbGluZyB3aXRoIHR3byBhcmd1bWVudHMsIHRoZSAybmQgYXJndW1lbnQgdG8gdGlkeSgpIG11c3QgYmUgYSBmdW5jdGlvblwiKTtvPXR9cmV0dXJuIHRoaXMuc2NvcGVkUnVuKChmdW5jdGlvbigpe3JldHVybiByLnN0YXJ0U2NvcGUobyl9KSwoZnVuY3Rpb24oKXtyZXR1cm4gci5lbmRTY29wZShuKX0pLChmdW5jdGlvbigpe3JldHVybihuPWUoKSlpbnN0YW5jZW9mIFByb21pc2UmJmNvbnNvbGUuZXJyb3IoXCJDYW5ub3QgcmV0dXJuIGEgUHJvbWlzZSBpbnNpZGUgb2YgdGlkeS5cIiksbn0pKX0sdC5wcm90b3R5cGUuc2NvcGVkUnVuPWZ1bmN0aW9uKHQsZSxuKXt0KCk7dHJ5e3ZhciByPW4oKTtyZXR1cm4gZSgpLHJ9Y2F0Y2godCl7dGhyb3cgZSgpLHR9fSx0LnByb3RvdHlwZS5uZXh0VGVuc29ySWQ9ZnVuY3Rpb24oKXtyZXR1cm4gdC5uZXh0VGVuc29ySWQrK30sdC5wcm90b3R5cGUubmV4dFZhcmlhYmxlSWQ9ZnVuY3Rpb24oKXtyZXR1cm4gdC5uZXh0VmFyaWFibGVJZCsrfSx0LnByb3RvdHlwZS5jbG9uZT1mdW5jdGlvbih0KXt2YXIgZT10aGlzLm1ha2VUZW5zb3JGcm9tRGF0YUlkKHQuZGF0YUlkLHQuc2hhcGUsdC5kdHlwZSksbj17eDp0fTtyZXR1cm4gdGhpcy5hZGRUYXBlTm9kZSh0aGlzLnN0YXRlLmFjdGl2ZVNjb3BlLm5hbWUsbixbZV0sKGZ1bmN0aW9uKHQpe3JldHVybnt4OmZ1bmN0aW9uKCl7cmV0dXJuIHQudG9GbG9hdCgpfX19KSxbXSksZX0sdC5wcm90b3R5cGUucnVuS2VybmVsPWZ1bmN0aW9uKHQsZSxuLHIsbyl7cmV0dXJuIHRoaXMucnVuS2VybmVsRnVuYyhudWxsLGUsbnVsbCx0LG4scixvKX0sdC5wcm90b3R5cGUuc2hvdWxkQ2hlY2tGb3JNZW1MZWFrcz1mdW5jdGlvbigpe3JldHVybiB0aGlzLkVOVi5nZXRCb29sKFwiSVNfVEVTVFwiKX0sdC5wcm90b3R5cGUuY2hlY2tLZXJuZWxGb3JNZW1MZWFrPWZ1bmN0aW9uKHQsZSxuKXt2YXIgcj10aGlzLmJhY2tlbmQubnVtRGF0YUlkcygpLG89MDtuLmZvckVhY2goKGZ1bmN0aW9uKHQpe28rPVwiY29tcGxleDY0XCI9PT10LmR0eXBlPzM6MX0pKTt2YXIgYT10aGlzLnN0YXRlLm51bURhdGFNb3Zlc1N0YWNrW3RoaXMuc3RhdGUubnVtRGF0YU1vdmVzU3RhY2subGVuZ3RoLTFdLGk9ci1lLW8tYTtpZihpPjApdGhyb3cgbmV3IEVycm9yKFwiQmFja2VuZCAnXCIrdGhpcy5iYWNrZW5kTmFtZStcIicgaGFzIGFuIGludGVybmFsIG1lbW9yeSBsZWFrIChcIitpK1wiIGRhdGEgaWRzKSBhZnRlciBydW5uaW5nICdcIit0K1wiJ1wiKX0sdC5wcm90b3R5cGUucnVuS2VybmVsRnVuYz1mdW5jdGlvbih0LGUsbixyLG8sYSxpKXt2YXIgcyx1PXRoaXM7dm9pZCAwPT09YSYmKGE9W10pLHZvaWQgMD09PWkmJihpPVtdKTt2YXIgYz1bXSxoPXRoaXMuaXNUYXBlT24oKTtudWxsPT1yJiYocj1udWxsIT10aGlzLnN0YXRlLmFjdGl2ZVNjb3BlP3RoaXMuc3RhdGUuYWN0aXZlU2NvcGUubmFtZTpcIlwiKTt2YXIgZixkPWZ1bmN0aW9uKHQpe2gmJihjPXQubWFwKChmdW5jdGlvbih0KXtyZXR1cm4gdS5rZWVwKHUuY2xvbmUodCkpfSkpKX0scD10aGlzLnN0YXRlLm51bUJ5dGVzLHY9dGhpcy5zdGF0ZS5udW1UZW5zb3JzO3RoaXMuc2hvdWxkQ2hlY2tGb3JNZW1MZWFrcygpJiZ0aGlzLnN0YXRlLm51bURhdGFNb3Zlc1N0YWNrLnB1c2goMCk7dmFyIG0sZz1sKHIsdGhpcy5iYWNrZW5kTmFtZSk7cmV0dXJuIGY9bnVsbCE9Zz9mdW5jdGlvbigpe3ZhciB0PXUuYmFja2VuZC5udW1EYXRhSWRzKCk7bT1nLmtlcm5lbEZ1bmMoe2lucHV0czplLGF0dHJzOm8sYmFja2VuZDp1LmJhY2tlbmR9KTt2YXIgbj1BcnJheS5pc0FycmF5KG0pP206W21dO3Uuc2hvdWxkQ2hlY2tGb3JNZW1MZWFrcygpJiZ1LmNoZWNrS2VybmVsRm9yTWVtTGVhayhyLHQsbik7dmFyIHM9bi5tYXAoKGZ1bmN0aW9uKHQpe3ZhciBlPXQuZGF0YUlkLG49dC5zaGFwZSxyPXQuZHR5cGU7cmV0dXJuIHUubWFrZVRlbnNvckZyb21EYXRhSWQoZSxuLHIpfSkpLGM9cy5maWx0ZXIoKGZ1bmN0aW9uKHQsZSl7cmV0dXJuIGlbZV19KSk7cmV0dXJuIGQoKGF8fFtdKS5zbGljZSgpLmNvbmNhdChjKSksc306ZnVuY3Rpb24oKXt2YXIgZT11LmJhY2tlbmQubnVtRGF0YUlkcygpO209dS50aWR5KChmdW5jdGlvbigpe3JldHVybiB0KHUuYmFja2VuZCxkKX0pKTt2YXIgbj1BcnJheS5pc0FycmF5KG0pP206W21dO3JldHVybiB1LnNob3VsZENoZWNrRm9yTWVtTGVha3MoKSYmdS5jaGVja0tlcm5lbEZvck1lbUxlYWsocixlLG4pLG59LHRoaXMuc2NvcGVkUnVuKChmdW5jdGlvbigpe3JldHVybiB1LnN0YXRlLmtlcm5lbERlcHRoKyt9KSwoZnVuY3Rpb24oKXtyZXR1cm4gdS5zdGF0ZS5rZXJuZWxEZXB0aC0tfSksKGZ1bmN0aW9uKCl7cz11LkVOVi5nZXRCb29sKFwiREVCVUdcIik/dS5wcm9maWxlci5wcm9maWxlS2VybmVsKHIsZSwoZnVuY3Rpb24oKXtyZXR1cm4gZigpfSkpOmYoKX0pKSxoJiZ0aGlzLmFkZFRhcGVOb2RlKHIsZSxzLG4sYyksdGhpcy5zdGF0ZS5wcm9maWxpbmcmJnRoaXMuc3RhdGUuYWN0aXZlUHJvZmlsZS5rZXJuZWxzLnB1c2goe25hbWU6cixieXRlc0FkZGVkOnRoaXMuc3RhdGUubnVtQnl0ZXMtcCx0b3RhbEJ5dGVzU25hcHNob3Q6dGhpcy5zdGF0ZS5udW1CeXRlcyx0ZW5zb3JzQWRkZWQ6dGhpcy5zdGF0ZS5udW1UZW5zb3JzLXYsdG90YWxUZW5zb3JzU25hcHNob3Q6dGhpcy5zdGF0ZS5udW1UZW5zb3JzLGlucHV0U2hhcGVzOk9iamVjdC5rZXlzKGUpLm1hcCgoZnVuY3Rpb24odCl7cmV0dXJuIGVbdF0uc2hhcGV9KSksb3V0cHV0U2hhcGVzOnMubWFwKChmdW5jdGlvbih0KXtyZXR1cm4gdC5zaGFwZX0pKX0pLEFycmF5LmlzQXJyYXkobSk/czpzWzBdfSx0LnByb3RvdHlwZS5tYWtlVGVuc29yPWZ1bmN0aW9uKHQsZSxuLHIpe2lmKG51bGw9PXQpdGhyb3cgbmV3IEVycm9yKFwiVmFsdWVzIHBhc3NlZCB0byBlbmdpbmUubWFrZVRlbnNvcigpIGFyZSBudWxsXCIpO249bnx8XCJmbG9hdDMyXCIscj1yfHx0aGlzLmJhY2tlbmQ7dmFyIG89dDtcInN0cmluZ1wiPT09biYmSCh0WzBdKSYmKG89dC5tYXAoKGZ1bmN0aW9uKHQpe3JldHVybiBydCh0KX0pKSk7dmFyIGE9ci53cml0ZShvLGUsbiksaT1uZXcgd3QoZSxuLGEsdGhpcy5uZXh0VGVuc29ySWQoKSk7aWYodGhpcy5pbmNSZWYoaSxyKSxcInN0cmluZ1wiPT09bil7dmFyIHM9dGhpcy5zdGF0ZS50ZW5zb3JJbmZvLmdldChhKSx1PUcobyk7dGhpcy5zdGF0ZS5udW1CeXRlcys9dS1zLmJ5dGVzLHMuYnl0ZXM9dX1yZXR1cm4gaX0sdC5wcm90b3R5cGUubWFrZVRlbnNvckZyb21EYXRhSWQ9ZnVuY3Rpb24odCxlLG4scil7dmFyIG89bmV3IHd0KGUsbj1ufHxcImZsb2F0MzJcIix0LHRoaXMubmV4dFRlbnNvcklkKCkpO3JldHVybiB0aGlzLmluY1JlZihvLHIpLG99LHQucHJvdG90eXBlLm1ha2VWYXJpYWJsZT1mdW5jdGlvbih0LGUsbixyKXt2b2lkIDA9PT1lJiYoZT0hMCksbj1ufHx0aGlzLm5leHRWYXJpYWJsZUlkKCkudG9TdHJpbmcoKSxudWxsIT1yJiZyIT09dC5kdHlwZSYmKHQ9dC5hc1R5cGUocikpO3ZhciBvPW5ldyBTdCh0LGUsbix0aGlzLm5leHRUZW5zb3JJZCgpKTtpZihudWxsIT10aGlzLnN0YXRlLnJlZ2lzdGVyZWRWYXJpYWJsZXNbby5uYW1lXSl0aHJvdyBuZXcgRXJyb3IoXCJWYXJpYWJsZSB3aXRoIG5hbWUgXCIrby5uYW1lK1wiIHdhcyBhbHJlYWR5IHJlZ2lzdGVyZWRcIik7cmV0dXJuIHRoaXMuc3RhdGUucmVnaXN0ZXJlZFZhcmlhYmxlc1tvLm5hbWVdPW8sdGhpcy5pbmNSZWYobyx0aGlzLmJhY2tlbmQpLG99LHQucHJvdG90eXBlLmluY1JlZj1mdW5jdGlvbih0LGUpe3ZhciBuPXRoaXMuc3RhdGUudGVuc29ySW5mby5oYXModC5kYXRhSWQpP3RoaXMuc3RhdGUudGVuc29ySW5mby5nZXQodC5kYXRhSWQpLnJlZkNvdW50OjA7aWYodGhpcy5zdGF0ZS5udW1UZW5zb3JzKyssXCJzdHJpbmdcIj09PXQuZHR5cGUmJnRoaXMuc3RhdGUubnVtU3RyaW5nVGVuc29ycysrLDA9PT1uKXt0aGlzLnN0YXRlLm51bURhdGFCdWZmZXJzKys7dmFyIHI9MDtcImNvbXBsZXg2NFwiIT09dC5kdHlwZSYmXCJzdHJpbmdcIiE9PXQuZHR5cGUmJihyPXQuc2l6ZSp6KHQuZHR5cGUpKSx0aGlzLnN0YXRlLnRlbnNvckluZm8uc2V0KHQuZGF0YUlkLHtiYWNrZW5kOmV8fHRoaXMuYmFja2VuZCxkdHlwZTp0LmR0eXBlLHNoYXBlOnQuc2hhcGUsYnl0ZXM6cixyZWZDb3VudDowfSksdGhpcy5zdGF0ZS5udW1CeXRlcys9cn10aGlzLnN0YXRlLnRlbnNvckluZm8uZ2V0KHQuZGF0YUlkKS5yZWZDb3VudCsrLHQgaW5zdGFuY2VvZiBTdHx8dGhpcy50cmFjayh0KX0sdC5wcm90b3R5cGUuZGlzcG9zZVRlbnNvcj1mdW5jdGlvbih0KXtpZih0aGlzLnN0YXRlLnRlbnNvckluZm8uaGFzKHQuZGF0YUlkKSl7dGhpcy5zdGF0ZS5udW1UZW5zb3JzLS0sXCJzdHJpbmdcIj09PXQuZHR5cGUmJnRoaXMuc3RhdGUubnVtU3RyaW5nVGVuc29ycy0tO3ZhciBlPXRoaXMuc3RhdGUudGVuc29ySW5mby5nZXQodC5kYXRhSWQpO2UucmVmQ291bnQ8PTE/KFwiY29tcGxleDY0XCIhPT10LmR0eXBlJiYodGhpcy5zdGF0ZS5udW1CeXRlcy09ZS5ieXRlcyksdGhpcy5zdGF0ZS5udW1EYXRhQnVmZmVycy0tLGUuYmFja2VuZC5kaXNwb3NlRGF0YSh0LmRhdGFJZCksdGhpcy5zdGF0ZS50ZW5zb3JJbmZvLmRlbGV0ZSh0LmRhdGFJZCkpOnRoaXMuc3RhdGUudGVuc29ySW5mby5nZXQodC5kYXRhSWQpLnJlZkNvdW50LS19fSx0LnByb3RvdHlwZS5kaXNwb3NlVmFyaWFibGVzPWZ1bmN0aW9uKCl7Zm9yKHZhciB0IGluIHRoaXMuc3RhdGUucmVnaXN0ZXJlZFZhcmlhYmxlcyl7dmFyIGU9dGhpcy5zdGF0ZS5yZWdpc3RlcmVkVmFyaWFibGVzW3RdO3RoaXMuZGlzcG9zZVZhcmlhYmxlKGUpfX0sdC5wcm90b3R5cGUuZGlzcG9zZVZhcmlhYmxlPWZ1bmN0aW9uKHQpe3RoaXMuZGlzcG9zZVRlbnNvcih0KSxudWxsIT10aGlzLnN0YXRlLnJlZ2lzdGVyZWRWYXJpYWJsZXNbdC5uYW1lXSYmZGVsZXRlIHRoaXMuc3RhdGUucmVnaXN0ZXJlZFZhcmlhYmxlc1t0Lm5hbWVdfSx0LnByb3RvdHlwZS5tZW1vcnk9ZnVuY3Rpb24oKXt2YXIgdD10aGlzLmJhY2tlbmQubWVtb3J5KCk7cmV0dXJuIHQubnVtVGVuc29ycz10aGlzLnN0YXRlLm51bVRlbnNvcnMsdC5udW1EYXRhQnVmZmVycz10aGlzLnN0YXRlLm51bURhdGFCdWZmZXJzLHQubnVtQnl0ZXM9dGhpcy5zdGF0ZS5udW1CeXRlcyx0aGlzLnN0YXRlLm51bVN0cmluZ1RlbnNvcnM+MCYmKHQudW5yZWxpYWJsZT0hMCxudWxsPT10LnJlYXNvbnMmJih0LnJlYXNvbnM9W10pLHQucmVhc29ucy5wdXNoKFwiTWVtb3J5IHVzYWdlIGJ5IHN0cmluZyB0ZW5zb3JzIGlzIGFwcHJveGltYXRlICgyIGJ5dGVzIHBlciBjaGFyYWN0ZXIpXCIpKSx0fSx0LnByb3RvdHlwZS5wcm9maWxlPWZ1bmN0aW9uKHQpe3JldHVybiBuKHRoaXMsdm9pZCAwLHZvaWQgMCwoZnVuY3Rpb24oKXt2YXIgZSxuO3JldHVybiByKHRoaXMsKGZ1bmN0aW9uKHIpe3JldHVybiB0aGlzLnN0YXRlLnByb2ZpbGluZz0hMCxlPXRoaXMuc3RhdGUubnVtQnl0ZXMsbj10aGlzLnN0YXRlLm51bVRlbnNvcnMsdGhpcy5zdGF0ZS5hY3RpdmVQcm9maWxlLmtlcm5lbHM9W10sdGhpcy5zdGF0ZS5hY3RpdmVQcm9maWxlLnJlc3VsdD10KCksdGhpcy5zdGF0ZS5wcm9maWxpbmc9ITEsdGhpcy5zdGF0ZS5hY3RpdmVQcm9maWxlLnBlYWtCeXRlcz1NYXRoLm1heC5hcHBseShNYXRoLHRoaXMuc3RhdGUuYWN0aXZlUHJvZmlsZS5rZXJuZWxzLm1hcCgoZnVuY3Rpb24odCl7cmV0dXJuIHQudG90YWxCeXRlc1NuYXBzaG90fSkpKSx0aGlzLnN0YXRlLmFjdGl2ZVByb2ZpbGUubmV3Qnl0ZXM9dGhpcy5zdGF0ZS5udW1CeXRlcy1lLHRoaXMuc3RhdGUuYWN0aXZlUHJvZmlsZS5uZXdUZW5zb3JzPXRoaXMuc3RhdGUubnVtVGVuc29ycy1uLFsyLHRoaXMuc3RhdGUuYWN0aXZlUHJvZmlsZV19KSl9KSl9LHQucHJvdG90eXBlLmlzVGFwZU9uPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuc3RhdGUuZ3JhZGllbnREZXB0aD4wJiYwPT09dGhpcy5zdGF0ZS5rZXJuZWxEZXB0aH0sdC5wcm90b3R5cGUuYWRkVGFwZU5vZGU9ZnVuY3Rpb24odCxlLG4scixvKXt2YXIgYT10aGlzLGk9e2lkOnRoaXMuc3RhdGUubmV4dFRhcGVOb2RlSWQrKyxrZXJuZWxOYW1lOnQsaW5wdXRzOmUsb3V0cHV0czpuLHNhdmVkOm99LHM9aCh0KTtudWxsIT1zJiYocj1zLmdyYWRGdW5jKSxudWxsIT1yJiYoaS5ncmFkaWVudD1mdW5jdGlvbih0KXtyZXR1cm4gdD10Lm1hcCgoZnVuY3Rpb24odCxlKXtpZihudWxsPT10KXt2YXIgcj1uW2VdLG89dHQoci5zaXplLHIuZHR5cGUpO3JldHVybiBhLm1ha2VUZW5zb3IobyxyLnNoYXBlLHIuZHR5cGUpfXJldHVybiB0fSkpLHIodC5sZW5ndGg+MT90OnRbMF0sbyl9KSx0aGlzLnN0YXRlLmFjdGl2ZVRhcGUucHVzaChpKX0sdC5wcm90b3R5cGUua2VlcD1mdW5jdGlvbih0KXtyZXR1cm4gdC5rZXB0PSEwLHR9LHQucHJvdG90eXBlLnN0YXJ0VGFwZT1mdW5jdGlvbigpezA9PT10aGlzLnN0YXRlLmdyYWRpZW50RGVwdGgmJih0aGlzLnN0YXRlLmFjdGl2ZVRhcGU9W10pLHRoaXMuc3RhdGUuZ3JhZGllbnREZXB0aCsrfSx0LnByb3RvdHlwZS5lbmRUYXBlPWZ1bmN0aW9uKCl7dGhpcy5zdGF0ZS5ncmFkaWVudERlcHRoLS19LHQucHJvdG90eXBlLnN0YXJ0U2NvcGU9ZnVuY3Rpb24odCl7dmFyIGU9e3RyYWNrOltdLG5hbWU6XCJ1bm5hbWVkIHNjb3BlXCIsaWQ6dGhpcy5zdGF0ZS5uZXh0U2NvcGVJZCsrfTt0JiYoZS5uYW1lPXQpLHRoaXMuc3RhdGUuc2NvcGVTdGFjay5wdXNoKGUpLHRoaXMuc3RhdGUuYWN0aXZlU2NvcGU9ZX0sdC5wcm90b3R5cGUuZW5kU2NvcGU9ZnVuY3Rpb24odCl7Zm9yKHZhciBlPXRoaXMsbj1fdCh0KSxyPW5ldyBTZXQobi5tYXAoKGZ1bmN0aW9uKHQpe3JldHVybiB0LmlkfSkpKSxvPTA7bzx0aGlzLnN0YXRlLmFjdGl2ZVNjb3BlLnRyYWNrLmxlbmd0aDtvKyspe3ZhciBhPXRoaXMuc3RhdGUuYWN0aXZlU2NvcGUudHJhY2tbb107YS5rZXB0fHxyLmhhcyhhLmlkKXx8YS5kaXNwb3NlKCl9dmFyIGk9dGhpcy5zdGF0ZS5zY29wZVN0YWNrLnBvcCgpO3RoaXMuc3RhdGUuYWN0aXZlU2NvcGU9MD09PXRoaXMuc3RhdGUuc2NvcGVTdGFjay5sZW5ndGg/bnVsbDp0aGlzLnN0YXRlLnNjb3BlU3RhY2tbdGhpcy5zdGF0ZS5zY29wZVN0YWNrLmxlbmd0aC0xXSxuLmZvckVhY2goKGZ1bmN0aW9uKHQpe3Qua2VwdHx8dC5zY29wZUlkIT09aS5pZHx8ZS50cmFjayh0KX0pKX0sdC5wcm90b3R5cGUuZ3JhZGllbnRzPWZ1bmN0aW9uKHQsZSxuLHIpe3ZhciBvPXRoaXM7aWYodm9pZCAwPT09ciYmKHI9ITEpLEMoZS5sZW5ndGg+MCwoZnVuY3Rpb24oKXtyZXR1cm5cImdyYWRpZW50cygpIHJlY2VpdmVkIGFuIGVtcHR5IGxpc3Qgb2YgeHMuXCJ9KSksbnVsbCE9biYmXCJmbG9hdDMyXCIhPT1uLmR0eXBlKXRocm93IG5ldyBFcnJvcihcImR5IG11c3QgaGF2ZSAnZmxvYXQzMicgZHR5cGUsIGJ1dCBoYXMgJ1wiK24uZHR5cGUrXCInXCIpO3ZhciBhPXRoaXMuc2NvcGVkUnVuKChmdW5jdGlvbigpe3JldHVybiBvLnN0YXJ0VGFwZSgpfSksKGZ1bmN0aW9uKCl7cmV0dXJuIG8uZW5kVGFwZSgpfSksKGZ1bmN0aW9uKCl7cmV0dXJuIG8udGlkeShcImZvcndhcmRcIix0KX0pKTtDKGEgaW5zdGFuY2VvZiB3dCwoZnVuY3Rpb24oKXtyZXR1cm5cIlRoZSByZXN1bHQgeSByZXR1cm5lZCBieSBmKCkgbXVzdCBiZSBhIHRlbnNvci5cIn0pKTt2YXIgaT1mdW5jdGlvbih0LGUsbil7Zm9yKHZhciByPXt9LG89e30sYT0wO2E8ZS5sZW5ndGg7YSsrKXJbZVthXS5pZF09ITA7Zm9yKGE9MDthPHQubGVuZ3RoO2ErKyl7dmFyIGk9KHA9dFthXSkuaW5wdXRzO2Zvcih2YXIgcyBpbiBpKXtmb3IodmFyIHU9aVtzXSxjPSExLGw9MDtsPGUubGVuZ3RoO2wrKylpZihyW3UuaWRdKXtwLm91dHB1dHMuZm9yRWFjaCgoZnVuY3Rpb24odCl7cmV0dXJuIHJbdC5pZF09ITB9KSksYz0hMCxvW3AuaWRdPSEwO2JyZWFrfWlmKGMpYnJlYWt9fXZhciBoPXt9O2hbbi5pZF09ITA7dmFyIGY9e307Zm9yKGE9dC5sZW5ndGgtMTthPj0wO2EtLSlmb3IoaT0ocD10W2FdKS5pbnB1dHMsbD0wO2w8cC5vdXRwdXRzLmxlbmd0aDtsKyspaWYoaFtwLm91dHB1dHNbbF0uaWRdKXtmb3IodmFyIHMgaW4gaSloW2lbc10uaWRdPSEwLGZbcC5pZF09ITA7YnJlYWt9dmFyIGQ9W107Zm9yKGE9MDthPHQubGVuZ3RoO2ErKyl7dmFyIHA7aWYob1socD10W2FdKS5pZF0mJmZbcC5pZF0pe3ZhciB2PXt9O2Zvcih2YXIgcyBpbiBwLmlucHV0cyl7dmFyIG09cC5pbnB1dHNbc107clttLmlkXSYmKHZbc109bSl9dmFyIGc9T2JqZWN0LmFzc2lnbih7fSxwKTtnLmlucHV0cz12LGcub3V0cHV0cz1wLm91dHB1dHMsZC5wdXNoKGcpfX1yZXR1cm4gZH0odGhpcy5zdGF0ZS5hY3RpdmVUYXBlLGUsYSk7aWYoIXImJjA9PT1pLmxlbmd0aCYmZS5sZW5ndGg+MCl0aHJvdyBuZXcgRXJyb3IoXCJDYW5ub3QgY29tcHV0ZSBncmFkaWVudCBvZiB5PWYoeCkgd2l0aCByZXNwZWN0IHRvIHguIE1ha2Ugc3VyZSB0aGF0IHRoZSBmIHlvdSBwYXNzZWQgZW5jbG9zZXMgYWxsIG9wZXJhdGlvbnMgdGhhdCBsZWFkIGZyb20geCB0byB5LlwiKTtyZXR1cm4gdGhpcy50aWR5KFwiYmFja3dhcmRcIiwoZnVuY3Rpb24oKXt2YXIgdCxyLHM9e307c1thLmlkXT1udWxsPT1uPyh0PWEuc2hhcGUscj1aKGsodCksXCJmbG9hdDMyXCIpLEx0Lm1ha2VUZW5zb3Iocix0LFwiZmxvYXQzMlwiKSk6bixmdW5jdGlvbih0LGUsbil7Zm9yKHZhciByPWZ1bmN0aW9uKHIpe3ZhciBvPWVbcl0sYT1bXTtpZihvLm91dHB1dHMuZm9yRWFjaCgoZnVuY3Rpb24oZSl7dmFyIG49dFtlLmlkXTtudWxsIT1uP2EucHVzaChuKTphLnB1c2gobnVsbCl9KSksbnVsbD09by5ncmFkaWVudCl0aHJvdyBuZXcgRXJyb3IoXCJDYW5ub3QgY29tcHV0ZSBncmFkaWVudDogZ3JhZGllbnQgZnVuY3Rpb24gbm90IGZvdW5kIGZvciBcIitvLmtlcm5lbE5hbWUrXCIuXCIpO3ZhciBpPW8uZ3JhZGllbnQoYSkscz1mdW5jdGlvbihlKXtpZighKGUgaW4gaSkpdGhyb3cgbmV3IEVycm9yKFwiQ2Fubm90IGJhY2twcm9wIHRocm91Z2ggaW5wdXQgXCIrZStcIi4gQXZhaWxhYmxlIGdyYWRpZW50cyBmb3VuZDogXCIrT2JqZWN0LmtleXMoaSkrXCIuXCIpO3ZhciByPW4oKGZ1bmN0aW9uKCl7cmV0dXJuIGlbZV0oKX0pKTtpZihcImZsb2F0MzJcIiE9PXIuZHR5cGUpdGhyb3cgbmV3IEVycm9yKFwiRXJyb3IgaW4gZ3JhZGllbnQgZm9yIG9wIFwiK28ua2VybmVsTmFtZStcIi4gVGhlIGdyYWRpZW50IG9mIGlucHV0IFwiK2UrXCIgbXVzdCBoYXZlICdmbG9hdDMyJyBkdHlwZSwgYnV0IGhhcyAnXCIrci5kdHlwZStcIidcIik7dmFyIGE9by5pbnB1dHNbZV07aWYoIVMoci5zaGFwZSxhLnNoYXBlKSl0aHJvdyBuZXcgRXJyb3IoXCJFcnJvciBpbiBncmFkaWVudCBmb3Igb3AgXCIrby5rZXJuZWxOYW1lK1wiLiBUaGUgZ3JhZGllbnQgb2YgaW5wdXQgJ1wiK2UrXCInIGhhcyBzaGFwZSAnXCIrci5zaGFwZStcIicsIHdoaWNoIGRvZXMgbm90IG1hdGNoIHRoZSBzaGFwZSBvZiB0aGUgaW5wdXQgJ1wiK2Euc2hhcGUrXCInXCIpO2lmKG51bGw9PXRbYS5pZF0pdFthLmlkXT1yO2Vsc2V7dmFyIHM9dFthLmlkXTt0W2EuaWRdPXMuYWRkKHIpLHMuZGlzcG9zZSgpfX07Zm9yKHZhciB1IGluIG8uaW5wdXRzKXModSl9LG89ZS5sZW5ndGgtMTtvPj0wO28tLSlyKG8pfShzLGksKGZ1bmN0aW9uKHQpe3JldHVybiBvLnRpZHkodCl9KSk7dmFyIHU9ZS5tYXAoKGZ1bmN0aW9uKHQpe3JldHVybiBzW3QuaWRdfSkpO3JldHVybiAwPT09by5zdGF0ZS5ncmFkaWVudERlcHRoJiYoby5zdGF0ZS5hY3RpdmVUYXBlLmZvckVhY2goKGZ1bmN0aW9uKHQpe2Zvcih2YXIgZT0wLG49dC5zYXZlZDtlPG4ubGVuZ3RoO2UrKyl7bltlXS5kaXNwb3NlKCl9fSkpLG8uc3RhdGUuYWN0aXZlVGFwZT1udWxsKSx7dmFsdWU6YSxncmFkczp1fX0pKX0sdC5wcm90b3R5cGUuY3VzdG9tR3JhZD1mdW5jdGlvbih0KXt2YXIgZT10aGlzO3JldHVybiBDKFgodCksKGZ1bmN0aW9uKCl7cmV0dXJuXCJUaGUgZiBwYXNzZWQgaW4gY3VzdG9tR3JhZChmKSBtdXN0IGJlIGEgZnVuY3Rpb24uXCJ9KSksZnVuY3Rpb24oKXtmb3IodmFyIG4scj1bXSxvPTA7bzxhcmd1bWVudHMubGVuZ3RoO28rKylyW29dPWFyZ3VtZW50c1tvXTtDKHIuZXZlcnkoKGZ1bmN0aW9uKHQpe3JldHVybiB0IGluc3RhbmNlb2Ygd3R9KSksKGZ1bmN0aW9uKCl7cmV0dXJuXCJUaGUgYXJncyBwYXNzZWQgaW4gY3VzdG9tR3JhZChmKSh4MSwgeDIsLi4uKSBtdXN0IGFsbCBiZSB0ZW5zb3JzXCJ9KSk7dmFyIGE9e307cmV0dXJuIHIuZm9yRWFjaCgoZnVuY3Rpb24odCxlKXthW2VdPXR9KSksZS5ydW5LZXJuZWxGdW5jKChmdW5jdGlvbihlLG8pe3JldHVybiBDKChuPXQuYXBwbHkodm9pZCAwLHIuY29uY2F0KFtvXSkpKS52YWx1ZSBpbnN0YW5jZW9mIHd0LChmdW5jdGlvbigpe3JldHVyblwiVGhlIGZ1bmN0aW9uIGYgcGFzc2VkIGluIGN1c3RvbUdyYWQoZikgbXVzdCByZXR1cm4gYW4gb2JqZWN0IHdoZXJlIGBvYmoudmFsdWVgIGlzIGEgdGVuc29yXCJ9KSksQyhYKG4uZ3JhZEZ1bmMpLChmdW5jdGlvbigpe3JldHVyblwiVGhlIGZ1bmN0aW9uIGYgcGFzc2VkIGluIGN1c3RvbUdyYWQoZikgbXVzdCByZXR1cm4gYW4gb2JqZWN0IHdoZXJlIGBvYmouZ3JhZEZ1bmNgIGlzIGEgZnVuY3Rpb24uXCJ9KSksbi52YWx1ZX0pLGEsKGZ1bmN0aW9uKHQsZSl7dmFyIG89bi5ncmFkRnVuYyh0LGUpLGE9QXJyYXkuaXNBcnJheShvKT9vOltvXTtDKGEubGVuZ3RoPT09ci5sZW5ndGgsKGZ1bmN0aW9uKCl7cmV0dXJuXCJUaGUgZnVuY3Rpb24gZiBwYXNzZWQgaW4gY3VzdG9tR3JhZChmKSBtdXN0IHJldHVybiBhbiBvYmplY3Qgd2hlcmUgYG9iai5ncmFkRnVuY2AgaXMgYSBmdW5jdGlvbiB0aGF0IHJldHVybnMgdGhlIHNhbWUgbnVtYmVyIG9mIHRlbnNvcnMgYXMgaW5wdXRzIHBhc3NlZCB0byBmKC4uLikuXCJ9KSksQyhhLmV2ZXJ5KChmdW5jdGlvbih0KXtyZXR1cm4gdCBpbnN0YW5jZW9mIHd0fSkpLChmdW5jdGlvbigpe3JldHVyblwiVGhlIGZ1bmN0aW9uIGYgcGFzc2VkIGluIGN1c3RvbUdyYWQoZikgbXVzdCByZXR1cm4gYW4gb2JqZWN0IHdoZXJlIGBvYmouZ3JhZEZ1bmNgIGlzIGEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIGEgbGlzdCBvZiBvbmx5IHRlbnNvcnMuXCJ9KSk7dmFyIGk9e307cmV0dXJuIGEuZm9yRWFjaCgoZnVuY3Rpb24odCxlKXtpW2VdPWZ1bmN0aW9uKCl7cmV0dXJuIHR9fSkpLGl9KSl9fSx0LnByb3RvdHlwZS5yZWFkU3luYz1mdW5jdGlvbih0KXtyZXR1cm4gdGhpcy5zdGF0ZS50ZW5zb3JJbmZvLmdldCh0KS5iYWNrZW5kLnJlYWRTeW5jKHQpfSx0LnByb3RvdHlwZS5yZWFkPWZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLnN0YXRlLnRlbnNvckluZm8uZ2V0KHQpLmJhY2tlbmQucmVhZCh0KX0sdC5wcm90b3R5cGUudGltZT1mdW5jdGlvbih0KXtyZXR1cm4gbih0aGlzLHZvaWQgMCx2b2lkIDAsKGZ1bmN0aW9uKCl7dmFyIGUsbjtyZXR1cm4gcih0aGlzLChmdW5jdGlvbihyKXtzd2l0Y2goci5sYWJlbCl7Y2FzZSAwOnJldHVybiBlPWV0KCksWzQsdGhpcy5iYWNrZW5kLnRpbWUodCldO2Nhc2UgMTpyZXR1cm4obj1yLnNlbnQoKSkud2FsbE1zPWV0KCktZSxbMixuXX19KSl9KSl9LHQucHJvdG90eXBlLnRyYWNrPWZ1bmN0aW9uKHQpe3JldHVybiBudWxsIT10aGlzLnN0YXRlLmFjdGl2ZVNjb3BlJiYodC5zY29wZUlkPXRoaXMuc3RhdGUuYWN0aXZlU2NvcGUuaWQsdGhpcy5zdGF0ZS5hY3RpdmVTY29wZS50cmFjay5wdXNoKHQpKSx0fSxPYmplY3QuZGVmaW5lUHJvcGVydHkodC5wcm90b3R5cGUsXCJyZWdpc3RlcmVkVmFyaWFibGVzXCIse2dldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLnN0YXRlLnJlZ2lzdGVyZWRWYXJpYWJsZXN9LGVudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiEwfSksdC5wcm90b3R5cGUucmVzZXQ9ZnVuY3Rpb24oKXtmb3IodmFyIHQgaW4gdGhpcy5wZW5kaW5nQmFja2VuZEluaXRJZCsrLHRoaXMuc3RhdGUuZGlzcG9zZSgpLHRoaXMuRU5WLnJlc2V0KCksdGhpcy5zdGF0ZT1uZXcgQnQsdGhpcy5yZWdpc3RyeSl0aGlzLmRpc3Bvc2VSZWdpc3RlcmVkS2VybmVscyh0KSx0aGlzLnJlZ2lzdHJ5W3RdLmRpc3Bvc2UoKSxkZWxldGUgdGhpcy5yZWdpc3RyeVt0XTt0aGlzLmJhY2tlbmROYW1lPW51bGwsdGhpcy5iYWNrZW5kSW5zdGFuY2U9bnVsbCx0aGlzLnBlbmRpbmdCYWNrZW5kSW5pdD1udWxsfSx0Lm5leHRUZW5zb3JJZD0wLHQubmV4dFZhcmlhYmxlSWQ9MCx0fSgpO3ZhciBMdD1mdW5jdGlvbigpe3ZhciB0PWZ1bmN0aW9uKCl7aWYobnVsbD09T3Qpe3ZhciB0PXZvaWQgMDtpZihcInVuZGVmaW5lZFwiIT10eXBlb2Ygd2luZG93KXQ9d2luZG93O2Vsc2UgaWYoXCJ1bmRlZmluZWRcIiE9dHlwZW9mIGdsb2JhbCl0PWdsb2JhbDtlbHNlIGlmKFwidW5kZWZpbmVkXCIhPXR5cGVvZiBwcm9jZXNzKXQ9cHJvY2VzcztlbHNle2lmKFwidW5kZWZpbmVkXCI9PXR5cGVvZiBzZWxmKXRocm93IG5ldyBFcnJvcihcIkNvdWxkIG5vdCBmaW5kIGEgZ2xvYmFsIG9iamVjdFwiKTt0PXNlbGZ9T3Q9dH1yZXR1cm4gT3R9KCk7aWYobnVsbD09dC5fdGZlbmdpbmUpe3ZhciBlPW5ldyBvKHQpO3QuX3RmZW5naW5lPW5ldyBQdChlKX1yZXR1cm4gZnVuY3Rpb24odCl7cz10fSh0Ll90ZmVuZ2luZS5FTlYpLHl0PWZ1bmN0aW9uKCl7cmV0dXJuIHQuX3RmZW5naW5lfSx0Ll90ZmVuZ2luZX0oKTtmdW5jdGlvbiBXdCgpe3JldHVyblwidW5kZWZpbmVkXCIhPXR5cGVvZiB3aW5kb3cmJm51bGwhPXdpbmRvdy5kb2N1bWVudHx8XCJ1bmRlZmluZWRcIiE9dHlwZW9mIFdvcmtlckdsb2JhbFNjb3BlfXZhciBVdD1pKCk7VXQucmVnaXN0ZXJGbGFnKFwiREVCVUdcIiwoZnVuY3Rpb24oKXtyZXR1cm4hMX0pLChmdW5jdGlvbih0KXt0JiZjb25zb2xlLndhcm4oXCJEZWJ1Z2dpbmcgbW9kZSBpcyBPTi4gVGhlIG91dHB1dCBvZiBldmVyeSBtYXRoIGNhbGwgd2lsbCBiZSBkb3dubG9hZGVkIHRvIENQVSBhbmQgY2hlY2tlZCBmb3IgTmFOcy4gVGhpcyBzaWduaWZpY2FudGx5IGltcGFjdHMgcGVyZm9ybWFuY2UuXCIpfSkpLFV0LnJlZ2lzdGVyRmxhZyhcIklTX0JST1dTRVJcIiwoZnVuY3Rpb24oKXtyZXR1cm4gV3QoKX0pKSxVdC5yZWdpc3RlckZsYWcoXCJJU19OT0RFXCIsKGZ1bmN0aW9uKCl7cmV0dXJuXCJ1bmRlZmluZWRcIiE9dHlwZW9mIHByb2Nlc3MmJnZvaWQgMCE9PXByb2Nlc3MudmVyc2lvbnMmJnZvaWQgMCE9PXByb2Nlc3MudmVyc2lvbnMubm9kZX0pKSxVdC5yZWdpc3RlckZsYWcoXCJJU19DSFJPTUVcIiwoZnVuY3Rpb24oKXtyZXR1cm5cInVuZGVmaW5lZFwiIT10eXBlb2YgbmF2aWdhdG9yJiZudWxsIT1uYXZpZ2F0b3ImJm51bGwhPW5hdmlnYXRvci51c2VyQWdlbnQmJi9DaHJvbWUvLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCkmJi9Hb29nbGUgSW5jLy50ZXN0KG5hdmlnYXRvci52ZW5kb3IpfSkpLFV0LnJlZ2lzdGVyRmxhZyhcIlBST0RcIiwoZnVuY3Rpb24oKXtyZXR1cm4hMX0pKSxVdC5yZWdpc3RlckZsYWcoXCJURU5TT1JMSUtFX0NIRUNLX1NIQVBFX0NPTlNJU1RFTkNZXCIsKGZ1bmN0aW9uKCl7cmV0dXJuIFV0LmdldEJvb2woXCJERUJVR1wiKX0pKSxVdC5yZWdpc3RlckZsYWcoXCJERVBSRUNBVElPTl9XQVJOSU5HU19FTkFCTEVEXCIsKGZ1bmN0aW9uKCl7cmV0dXJuITB9KSksVXQucmVnaXN0ZXJGbGFnKFwiSVNfVEVTVFwiLChmdW5jdGlvbigpe3JldHVybiExfSkpO3ZhciBWdCx6dCxHdCxIdD17fSxxdD17YWxwaGE6ITEsYW50aWFsaWFzOiExLHByZW11bHRpcGxpZWRBbHBoYTohMSxwcmVzZXJ2ZURyYXdpbmdCdWZmZXI6ITEsZGVwdGg6ITEsc3RlbmNpbDohMSxmYWlsSWZNYWpvclBlcmZvcm1hbmNlQ2F2ZWF0OiEwfTtmdW5jdGlvbiBLdCh0LGUpe0h0W3RdPWV9ZnVuY3Rpb24ganQodCl7dCBpbiBIdHx8KEh0W3RdPWZ1bmN0aW9uKHQpe2lmKDEhPT10JiYyIT09dCl0aHJvdyBuZXcgRXJyb3IoXCJDYW5ub3QgZ2V0IFdlYkdMIHJlbmRlcmluZyBjb250ZXh0LCBXZWJHTCBpcyBkaXNhYmxlZC5cIik7dmFyIGU9ZnVuY3Rpb24odCl7aWYoXCJ1bmRlZmluZWRcIiE9dHlwZW9mIE9mZnNjcmVlbkNhbnZhcyYmMj09PXQpcmV0dXJuIG5ldyBPZmZzY3JlZW5DYW52YXMoMzAwLDE1MCk7aWYoXCJ1bmRlZmluZWRcIiE9dHlwZW9mIGRvY3VtZW50KXJldHVybiBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiY2FudmFzXCIpO3Rocm93IG5ldyBFcnJvcihcIkNhbm5vdCBjcmVhdGUgYSBjYW52YXMgaW4gdGhpcyBjb250ZXh0XCIpfSh0KTtpZihlLmFkZEV2ZW50TGlzdGVuZXIoXCJ3ZWJnbGNvbnRleHRsb3N0XCIsKGZ1bmN0aW9uKGUpe2UucHJldmVudERlZmF1bHQoKSxkZWxldGUgSHRbdF19KSwhMSksMT09PXQpcmV0dXJuIGUuZ2V0Q29udGV4dChcIndlYmdsXCIscXQpfHxlLmdldENvbnRleHQoXCJleHBlcmltZW50YWwtd2ViZ2xcIixxdCk7cmV0dXJuIGUuZ2V0Q29udGV4dChcIndlYmdsMlwiLHF0KX0odCkpO3ZhciBlPUh0W3RdO3JldHVybiBlLmlzQ29udGV4dExvc3QoKT8oZGVsZXRlIEh0W3RdLGp0KHQpKTooZS5kaXNhYmxlKGUuREVQVEhfVEVTVCksZS5kaXNhYmxlKGUuU1RFTkNJTF9URVNUKSxlLmRpc2FibGUoZS5CTEVORCksZS5kaXNhYmxlKGUuRElUSEVSKSxlLmRpc2FibGUoZS5QT0xZR09OX09GRlNFVF9GSUxMKSxlLmRpc2FibGUoZS5TQU1QTEVfQ09WRVJBR0UpLGUuZW5hYmxlKGUuU0NJU1NPUl9URVNUKSxlLmVuYWJsZShlLkNVTExfRkFDRSksZS5jdWxsRmFjZShlLkJBQ0spLEh0W3RdKX1mdW5jdGlvbiBYdCh0LGUpe3JldHVybltlLHRdfWZ1bmN0aW9uIFl0KHQpe3ZhciBlPWsodCk7cmV0dXJuIFQoTWF0aC5jZWlsKGUvNCkpfWZ1bmN0aW9uICR0KHQsZSl7cmV0dXJuW01hdGgubWF4KDEsTWF0aC5jZWlsKGUvMikpLE1hdGgubWF4KDEsTWF0aC5jZWlsKHQvMikpXX1mdW5jdGlvbiBRdCh0LGUpe3ZhciBuLHIsbyxhLHMsdSxjLGwsaCxmPXQ7cmV0dXJuIDI9PT1pKCkuZ2V0TnVtYmVyKFwiV0VCR0xfVkVSU0lPTlwiKT8obj1mLlIzMkYscj1mLlIxNkYsbz1mLlJHQkExNkYsYT1mLlJHQkEzMkYscz1mLlJFRCx1PTQsYz0xLGw9Zi5IQUxGX0ZMT0FULGg9Zi5GTE9BVCk6KG49dC5SR0JBLHI9dC5SR0JBLG89dC5SR0JBLGE9Zi5SR0JBLHM9dC5SR0JBLHU9NCxjPTQsbD1udWxsIT1lP2UuSEFMRl9GTE9BVF9PRVM6bnVsbCxoPXQuRkxPQVQpLHtpbnRlcm5hbEZvcm1hdEZsb2F0Om4saW50ZXJuYWxGb3JtYXRIYWxmRmxvYXQ6cixpbnRlcm5hbEZvcm1hdFBhY2tlZEhhbGZGbG9hdDpvLGludGVybmFsRm9ybWF0UGFja2VkRmxvYXQ6YSx0ZXh0dXJlRm9ybWF0RmxvYXQ6cyxkb3dubG9hZFRleHR1cmVGb3JtYXQ6dC5SR0JBLGRvd25sb2FkVW5wYWNrTnVtQ2hhbm5lbHM6dSxkZWZhdWx0TnVtQ2hhbm5lbHM6Yyx0ZXh0dXJlVHlwZUhhbGZGbG9hdDpsLHRleHR1cmVUeXBlRmxvYXQ6aH19ZnVuY3Rpb24gSnQodCxlLG4pe3ZhciByPW4oKTtyZXR1cm4gZSYmZnVuY3Rpb24odCl7dmFyIGU9dC5nZXRFcnJvcigpO2lmKGUhPT10Lk5PX0VSUk9SKXRocm93IG5ldyBFcnJvcihcIldlYkdMIEVycm9yOiBcIituZSh0LGUpKX0odCkscn0hZnVuY3Rpb24odCl7dFt0LkRFTlNFPTBdPVwiREVOU0VcIix0W3QuU0hBUkVEX0JBVENIPTFdPVwiU0hBUkVEX0JBVENIXCJ9KFZ0fHwoVnQ9e30pKSxmdW5jdGlvbih0KXt0W3QuUkVOREVSPTBdPVwiUkVOREVSXCIsdFt0LlVQTE9BRD0xXT1cIlVQTE9BRFwiLHRbdC5QSVhFTFM9Ml09XCJQSVhFTFNcIix0W3QuRE9XTkxPQUQ9M109XCJET1dOTE9BRFwifSh6dHx8KHp0PXt9KSksZnVuY3Rpb24odCl7dFt0LlVOUEFDS0VEX0ZMT0FUMTY9MF09XCJVTlBBQ0tFRF9GTE9BVDE2XCIsdFt0LlVOUEFDS0VEX0ZMT0FUMzI9MV09XCJVTlBBQ0tFRF9GTE9BVDMyXCIsdFt0LlBBQ0tFRF80WDFfVU5TSUdORURfQllURT0yXT1cIlBBQ0tFRF80WDFfVU5TSUdORURfQllURVwiLHRbdC5QQUNLRURfMlgyX0ZMT0FUMzI9M109XCJQQUNLRURfMlgyX0ZMT0FUMzJcIix0W3QuUEFDS0VEXzJYMl9GTE9BVDE2PTRdPVwiUEFDS0VEXzJYMl9GTE9BVDE2XCJ9KEd0fHwoR3Q9e30pKTt2YXIgWnQ9NS45NmUtOCx0ZT02NTUwNDtmdW5jdGlvbiBlZSh0KXtyZXR1cm4hIShpKCkuZ2V0Qm9vbChcIldFQkdMX1JFTkRFUl9GTE9BVDMyX0VOQUJMRURcIil8fDA9PT10fHxadDxNYXRoLmFicyh0KSYmTWF0aC5hYnModCk8dGUpfWZ1bmN0aW9uIG5lKHQsZSl7c3dpdGNoKGUpe2Nhc2UgdC5OT19FUlJPUjpyZXR1cm5cIk5PX0VSUk9SXCI7Y2FzZSB0LklOVkFMSURfRU5VTTpyZXR1cm5cIklOVkFMSURfRU5VTVwiO2Nhc2UgdC5JTlZBTElEX1ZBTFVFOnJldHVyblwiSU5WQUxJRF9WQUxVRVwiO2Nhc2UgdC5JTlZBTElEX09QRVJBVElPTjpyZXR1cm5cIklOVkFMSURfT1BFUkFUSU9OXCI7Y2FzZSB0LklOVkFMSURfRlJBTUVCVUZGRVJfT1BFUkFUSU9OOnJldHVyblwiSU5WQUxJRF9GUkFNRUJVRkZFUl9PUEVSQVRJT05cIjtjYXNlIHQuT1VUX09GX01FTU9SWTpyZXR1cm5cIk9VVF9PRl9NRU1PUllcIjtjYXNlIHQuQ09OVEVYVF9MT1NUX1dFQkdMOnJldHVyblwiQ09OVEVYVF9MT1NUX1dFQkdMXCI7ZGVmYXVsdDpyZXR1cm5cIlVua25vd24gZXJyb3IgY29kZSBcIitlfX1mdW5jdGlvbiByZSh0LGUsbil7cmV0dXJuIGtlKHQsZSwoZnVuY3Rpb24oKXtyZXR1cm4gdC5nZXRFeHRlbnNpb24obil9KSwnRXh0ZW5zaW9uIFwiJytuKydcIiBub3Qgc3VwcG9ydGVkIG9uIHRoaXMgYnJvd3Nlci4nKX1mdW5jdGlvbiBvZSh0LGUsbil7dmFyIHI9a2UodCxlLChmdW5jdGlvbigpe3JldHVybiB0LmNyZWF0ZVNoYWRlcih0LlZFUlRFWF9TSEFERVIpfSksXCJVbmFibGUgdG8gY3JlYXRlIHZlcnRleCBXZWJHTFNoYWRlci5cIik7aWYoSnQodCxlLChmdW5jdGlvbigpe3JldHVybiB0LnNoYWRlclNvdXJjZShyLG4pfSkpLEp0KHQsZSwoZnVuY3Rpb24oKXtyZXR1cm4gdC5jb21waWxlU2hhZGVyKHIpfSkpLCExPT09dC5nZXRTaGFkZXJQYXJhbWV0ZXIocix0LkNPTVBJTEVfU1RBVFVTKSl0aHJvdyBjb25zb2xlLmxvZyh0LmdldFNoYWRlckluZm9Mb2cocikpLG5ldyBFcnJvcihcIkZhaWxlZCB0byBjb21waWxlIHZlcnRleCBzaGFkZXIuXCIpO3JldHVybiByfWZ1bmN0aW9uIGFlKHQsZSxuKXt2YXIgcj1rZSh0LGUsKGZ1bmN0aW9uKCl7cmV0dXJuIHQuY3JlYXRlU2hhZGVyKHQuRlJBR01FTlRfU0hBREVSKX0pLFwiVW5hYmxlIHRvIGNyZWF0ZSBmcmFnbWVudCBXZWJHTFNoYWRlci5cIik7aWYoSnQodCxlLChmdW5jdGlvbigpe3JldHVybiB0LnNoYWRlclNvdXJjZShyLG4pfSkpLEp0KHQsZSwoZnVuY3Rpb24oKXtyZXR1cm4gdC5jb21waWxlU2hhZGVyKHIpfSkpLCExPT09dC5nZXRTaGFkZXJQYXJhbWV0ZXIocix0LkNPTVBJTEVfU1RBVFVTKSl0aHJvdyBmdW5jdGlvbih0LGUpe3ZhciBuPXVlLmV4ZWMoZSk7aWYobnVsbD09bilyZXR1cm4gY29uc29sZS5sb2coXCJDb3VsZG4ndCBwYXJzZSBsaW5lIG51bWJlciBpbiBlcnJvcjogXCIrZSksdm9pZCBjb25zb2xlLmxvZyh0KTtmb3IodmFyIHI9K25bMV0sbz10LnNwbGl0KFwiXFxuXCIpLGE9by5sZW5ndGgudG9TdHJpbmcoKS5sZW5ndGgrMixpPW8ubWFwKChmdW5jdGlvbih0LGUpe3JldHVybiBOKChlKzEpLnRvU3RyaW5nKCksYSkrdH0pKSxzPTAsdT0wO3U8aS5sZW5ndGg7dSsrKXM9TWF0aC5tYXgoaVt1XS5sZW5ndGgscyk7dmFyIGM9aS5zbGljZSgwLHItMSksbD1pLnNsaWNlKHItMSxyKSxoPWkuc2xpY2Uocik7Y29uc29sZS5sb2coYy5qb2luKFwiXFxuXCIpKSxjb25zb2xlLmxvZyhlLnNwbGl0KFwiXFxuXCIpWzBdKSxjb25zb2xlLmxvZyhcIiVjIFwiK04obFswXSxzKSxcImJvcmRlcjoxcHggc29saWQgcmVkOyBiYWNrZ3JvdW5kLWNvbG9yOiNlM2QyZDI7IGNvbG9yOiNhNjE3MTdcIiksY29uc29sZS5sb2coaC5qb2luKFwiXFxuXCIpKX0obix0LmdldFNoYWRlckluZm9Mb2cocikpLG5ldyBFcnJvcihcIkZhaWxlZCB0byBjb21waWxlIGZyYWdtZW50IHNoYWRlci5cIik7cmV0dXJuIHJ9dmFyIGllLHNlLHVlPS9FUlJPUjogWzAtOV0rOihbMC05XSspOi9nO2Z1bmN0aW9uIGNlKHQsZSl7cmV0dXJuIGtlKHQsZSwoZnVuY3Rpb24oKXtyZXR1cm4gdC5jcmVhdGVQcm9ncmFtKCl9KSxcIlVuYWJsZSB0byBjcmVhdGUgV2ViR0xQcm9ncmFtLlwiKX1mdW5jdGlvbiBsZSh0LGUsbil7aWYoSnQodCxlLChmdW5jdGlvbigpe3JldHVybiB0LmxpbmtQcm9ncmFtKG4pfSkpLCExPT09dC5nZXRQcm9ncmFtUGFyYW1ldGVyKG4sdC5MSU5LX1NUQVRVUykpdGhyb3cgY29uc29sZS5sb2codC5nZXRQcm9ncmFtSW5mb0xvZyhuKSksbmV3IEVycm9yKFwiRmFpbGVkIHRvIGxpbmsgdmVydGV4IGFuZCBmcmFnbWVudCBzaGFkZXJzLlwiKX1mdW5jdGlvbiBoZSh0LGUsbil7aWYoSnQodCxlLChmdW5jdGlvbigpe3JldHVybiB0LnZhbGlkYXRlUHJvZ3JhbShuKX0pKSwhMT09PXQuZ2V0UHJvZ3JhbVBhcmFtZXRlcihuLHQuVkFMSURBVEVfU1RBVFVTKSl0aHJvdyBjb25zb2xlLmxvZyh0LmdldFByb2dyYW1JbmZvTG9nKG4pKSxuZXcgRXJyb3IoXCJTaGFkZXIgcHJvZ3JhbSB2YWxpZGF0aW9uIGZhaWxlZC5cIil9ZnVuY3Rpb24gZmUodCxlLG4pe3ZhciByPWtlKHQsZSwoZnVuY3Rpb24oKXtyZXR1cm4gdC5jcmVhdGVCdWZmZXIoKX0pLFwiVW5hYmxlIHRvIGNyZWF0ZSBXZWJHTEJ1ZmZlclwiKTtyZXR1cm4gSnQodCxlLChmdW5jdGlvbigpe3JldHVybiB0LmJpbmRCdWZmZXIodC5BUlJBWV9CVUZGRVIscil9KSksSnQodCxlLChmdW5jdGlvbigpe3JldHVybiB0LmJ1ZmZlckRhdGEodC5BUlJBWV9CVUZGRVIsbix0LlNUQVRJQ19EUkFXKX0pKSxyfWZ1bmN0aW9uIGRlKHQsZSxuKXt2YXIgcj1rZSh0LGUsKGZ1bmN0aW9uKCl7cmV0dXJuIHQuY3JlYXRlQnVmZmVyKCl9KSxcIlVuYWJsZSB0byBjcmVhdGUgV2ViR0xCdWZmZXJcIik7cmV0dXJuIEp0KHQsZSwoZnVuY3Rpb24oKXtyZXR1cm4gdC5iaW5kQnVmZmVyKHQuRUxFTUVOVF9BUlJBWV9CVUZGRVIscil9KSksSnQodCxlLChmdW5jdGlvbigpe3JldHVybiB0LmJ1ZmZlckRhdGEodC5FTEVNRU5UX0FSUkFZX0JVRkZFUixuLHQuU1RBVElDX0RSQVcpfSkpLHJ9ZnVuY3Rpb24gcGUodCxlKXtyZXR1cm4ga2UodCxlLChmdW5jdGlvbigpe3JldHVybiB0LmNyZWF0ZVRleHR1cmUoKX0pLFwiVW5hYmxlIHRvIGNyZWF0ZSBXZWJHTFRleHR1cmUuXCIpfWZ1bmN0aW9uIHZlKHQsZSl7dmFyIG49aSgpLmdldE51bWJlcihcIldFQkdMX01BWF9URVhUVVJFX1NJWkVcIik7aWYodDw9MHx8ZTw9MCl7dmFyIHI9XCJbXCIrdCtcInhcIitlK1wiXVwiO3Rocm93IG5ldyBFcnJvcihcIlJlcXVlc3RlZCB0ZXh0dXJlIHNpemUgXCIrcitcIiBpcyBpbnZhbGlkLlwiKX1pZih0Pm58fGU+bil7cj1cIltcIit0K1wieFwiK2UrXCJdXCI7dGhyb3cgbmV3IEVycm9yKFwiUmVxdWVzdGVkIHRleHR1cmUgc2l6ZSBcIityK1wiIGdyZWF0ZXIgdGhhbiBXZWJHTCBtYXhpbXVtIG9uIHRoaXMgYnJvd3NlciAvIEdQVSBcIisoXCJbXCIrbitcInhcIituK1wiXVwiKStcIi5cIil9fWZ1bmN0aW9uIG1lKHQsZSl7cmV0dXJuIGtlKHQsZSwoZnVuY3Rpb24oKXtyZXR1cm4gdC5jcmVhdGVGcmFtZWJ1ZmZlcigpfSksXCJVbmFibGUgdG8gY3JlYXRlIFdlYkdMRnJhbWVidWZmZXIuXCIpfWZ1bmN0aW9uIGdlKHQsZSxuLHIsbyxhLGkscyl7dmFyIHU9dC5nZXRBdHRyaWJMb2NhdGlvbihuLHIpO3JldHVybi0xIT09dSYmKEp0KHQsZSwoZnVuY3Rpb24oKXtyZXR1cm4gdC5iaW5kQnVmZmVyKHQuQVJSQVlfQlVGRkVSLG8pfSkpLEp0KHQsZSwoZnVuY3Rpb24oKXtyZXR1cm4gdC52ZXJ0ZXhBdHRyaWJQb2ludGVyKHUsYSx0LkZMT0FULCExLGkscyl9KSksSnQodCxlLChmdW5jdGlvbigpe3JldHVybiB0LmVuYWJsZVZlcnRleEF0dHJpYkFycmF5KHUpfSkpLCEwKX1mdW5jdGlvbiB5ZSh0LGUsbixyKXtTZSh0LHIpLEp0KHQsZSwoZnVuY3Rpb24oKXtyZXR1cm4gdC5hY3RpdmVUZXh0dXJlKHQuVEVYVFVSRTArcil9KSksSnQodCxlLChmdW5jdGlvbigpe3JldHVybiB0LmJpbmRUZXh0dXJlKHQuVEVYVFVSRV8yRCxuKX0pKX1mdW5jdGlvbiB4ZSh0LGUsbixyKXtyZXR1cm4ga2UodCxlLChmdW5jdGlvbigpe3JldHVybiB0LmdldFVuaWZvcm1Mb2NhdGlvbihuLHIpfSksJ3VuaWZvcm0gXCInK3IrJ1wiIG5vdCBwcmVzZW50IGluIHByb2dyYW0uJyl9ZnVuY3Rpb24gYmUodCxlLG4pe3JldHVybiB0LmdldFVuaWZvcm1Mb2NhdGlvbihlLG4pfWZ1bmN0aW9uIHdlKHQsZSxuLHIsbyxhKXtKdCh0LGUsKGZ1bmN0aW9uKCl7cmV0dXJuIHllKHQsZSxyLGEpfSkpLEp0KHQsZSwoZnVuY3Rpb24oKXtyZXR1cm4gdC51bmlmb3JtMWkobyxhKX0pKX1mdW5jdGlvbiBDZSh0LGUsbixyKXtKdCh0LGUsKGZ1bmN0aW9uKCl7cmV0dXJuIHQuYmluZEZyYW1lYnVmZmVyKHQuRlJBTUVCVUZGRVIscil9KSksSnQodCxlLChmdW5jdGlvbigpe3JldHVybiB0LmZyYW1lYnVmZmVyVGV4dHVyZTJEKHQuRlJBTUVCVUZGRVIsdC5DT0xPUl9BVFRBQ0hNRU5UMCx0LlRFWFRVUkVfMkQsbiwwKX0pKX1mdW5jdGlvbiBFZSh0LGUsbil7SnQodCxlLChmdW5jdGlvbigpe3JldHVybiB0LmJpbmRGcmFtZWJ1ZmZlcih0LkZSQU1FQlVGRkVSLG4pfSkpLEp0KHQsZSwoZnVuY3Rpb24oKXtyZXR1cm4gdC5mcmFtZWJ1ZmZlclRleHR1cmUyRCh0LkZSQU1FQlVGRkVSLHQuQ09MT1JfQVRUQUNITUVOVDAsdC5URVhUVVJFXzJELG51bGwsMCl9KSl9ZnVuY3Rpb24gUmUodCl7dmFyIGU9dC5jaGVja0ZyYW1lYnVmZmVyU3RhdHVzKHQuRlJBTUVCVUZGRVIpO2lmKGUhPT10LkZSQU1FQlVGRkVSX0NPTVBMRVRFKXRocm93IG5ldyBFcnJvcihcIkVycm9yIGJpbmRpbmcgZnJhbWVidWZmZXI6IFwiK0llKHQsZSkpfWZ1bmN0aW9uIEllKHQsZSl7c3dpdGNoKGUpe2Nhc2UgdC5GUkFNRUJVRkZFUl9JTkNPTVBMRVRFX0FUVEFDSE1FTlQ6cmV0dXJuXCJGUkFNRUJVRkZFUl9JTkNPTVBMRVRFX0FUVEFDSE1FTlRcIjtjYXNlIHQuRlJBTUVCVUZGRVJfSU5DT01QTEVURV9NSVNTSU5HX0FUVEFDSE1FTlQ6cmV0dXJuXCJGUkFNRUJVRkZFUl9JTkNPTVBMRVRFX01JU1NJTkdfQVRUQUNITUVOVFwiO2Nhc2UgdC5GUkFNRUJVRkZFUl9JTkNPTVBMRVRFX0RJTUVOU0lPTlM6cmV0dXJuXCJGUkFNRUJVRkZFUl9JTkNPTVBMRVRFX0RJTUVOU0lPTlNcIjtjYXNlIHQuRlJBTUVCVUZGRVJfVU5TVVBQT1JURUQ6cmV0dXJuXCJGUkFNRUJVRkZFUl9VTlNVUFBPUlRFRFwiO2RlZmF1bHQ6cmV0dXJuXCJ1bmtub3duIGVycm9yIFwiK2V9fWZ1bmN0aW9uIGtlKHQsZSxuLHIpe3ZhciBvPUp0KHQsZSwoZnVuY3Rpb24oKXtyZXR1cm4gbigpfSkpO2lmKG51bGw9PW8pdGhyb3cgbmV3IEVycm9yKHIpO3JldHVybiBvfWZ1bmN0aW9uIFNlKHQsZSl7dmFyIG49dC5NQVhfQ09NQklORURfVEVYVFVSRV9JTUFHRV9VTklUUy0xLHI9ZSt0LlRFWFRVUkUwO2lmKHI8dC5URVhUVVJFMHx8cj5uKXRocm93IG5ldyBFcnJvcihcInRleHR1cmVVbml0IG11c3QgYmUgaW4gXCIrKFwiW2dsLlRFWFRVUkUwLCBnbC5URVhUVVJFXCIrbitcIl1cIikrXCIuXCIpfWZ1bmN0aW9uIEFlKHQsZSl7cmV0dXJuIHZvaWQgMD09PWUmJihlPTIpLGsodC5zbGljZSgwLHQubGVuZ3RoLWUpKX1mdW5jdGlvbiBEZSh0KXtpZigwPT09dC5sZW5ndGgpdGhyb3cgRXJyb3IoXCJDYW5ub3QgZ2V0IHJvd3MgYW5kIGNvbHVtbnMgb2YgYW4gZW1wdHkgc2hhcGUgYXJyYXkuXCIpO3JldHVyblt0Lmxlbmd0aD4xP3RbdC5sZW5ndGgtMl06MSx0W3QubGVuZ3RoLTFdXX1mdW5jdGlvbiBUZSh0KXt2YXIgZT1bMSwxLDFdO3JldHVybiAwPT09dC5sZW5ndGh8fDE9PT10Lmxlbmd0aCYmMT09PXRbMF18fChlPVtBZSh0KV0uY29uY2F0KERlKHQpKSksZX1mdW5jdGlvbiBOZSh0LGUpe3ZhciBuO3ZvaWQgMD09PWUmJihlPSExKTt2YXIgcj1pKCkuZ2V0TnVtYmVyKFwiV0VCR0xfTUFYX1RFWFRVUkVfU0laRVwiKTtpZihlJiYocio9MiwxPT09KHQ9dC5tYXAoKGZ1bmN0aW9uKGUsbil7cmV0dXJuIG4+PXQubGVuZ3RoLTI/Yih0W25dKTp0W25dfSkpKS5sZW5ndGgmJih0PVsyLHRbMF1dKSksMiE9PXQubGVuZ3RoKXt2YXIgbz1NKHQpO3Q9by5uZXdTaGFwZX12YXIgYT1rKHQpO2lmKHQubGVuZ3RoPD0xJiZhPD1yKXJldHVyblsxLGFdO2lmKDI9PT10Lmxlbmd0aCYmdFswXTw9ciYmdFsxXTw9cilyZXR1cm4gdDtpZigzPT09dC5sZW5ndGgmJnRbMF0qdFsxXTw9ciYmdFsyXTw9cilyZXR1cm5bdFswXSp0WzFdLHRbMl1dO2lmKDM9PT10Lmxlbmd0aCYmdFswXTw9ciYmdFsxXSp0WzJdPD1yKXJldHVyblt0WzBdLHRbMV0qdFsyXV07aWYoND09PXQubGVuZ3RoJiZ0WzBdKnRbMV0qdFsyXTw9ciYmdFszXTw9cilyZXR1cm5bdFswXSp0WzFdKnRbMl0sdFszXV07aWYoND09PXQubGVuZ3RoJiZ0WzBdPD1yJiZ0WzFdKnRbMl0qdFszXTw9cilyZXR1cm5bdFswXSx0WzFdKnRbMl0qdFszXV07aWYoZSl7dmFyIHM9QWUodCksdT0yLGM9MjtyZXR1cm4gdC5sZW5ndGgmJih1PShuPURlKHQpKVswXSxjPW5bMV0pLFQoYT1zKih1LzIpKihjLzIpKS5tYXAoKGZ1bmN0aW9uKHQpe3JldHVybiAyKnR9KSl9cmV0dXJuIFQoYSl9ZnVuY3Rpb24gRmUodCl7cmV0dXJuIHQlMj09MH1mdW5jdGlvbiBfZSh0LGUpe2lmKFModD10LnNsaWNlKC0yKSxlPWUuc2xpY2UoLTIpKSlyZXR1cm4hMDtpZighdC5sZW5ndGh8fCFlLmxlbmd0aClyZXR1cm4hMDtpZigwPT09dFswXXx8MD09PXRbMV18fDA9PT1lWzBdfHwwPT09ZVsxXSlyZXR1cm4hMDtpZih0Lmxlbmd0aCE9PWUubGVuZ3RoKXt2YXIgbj10LnNsaWNlKC0xKVswXSxyPWUuc2xpY2UoLTEpWzBdO2lmKG49PT1yKXJldHVybiEwO2lmKEZlKG4pJiZGZShyKSYmKDE9PT10WzBdfHwxPT09ZVswXSkpcmV0dXJuITB9cmV0dXJuIHRbMV09PT1lWzFdJiZGZSh0WzBdKSYmRmUoZVswXSl9ZnVuY3Rpb24gT2UodCl7aWYobnVsbD09aWUpe3ZhciBlPWp0KHQpO2llPWUuZ2V0UGFyYW1ldGVyKGUuTUFYX1RFWFRVUkVfU0laRSl9cmV0dXJuIGllfWZ1bmN0aW9uIE1lKHQpe2lmKG51bGw9PXNlKXt2YXIgZT1qdCh0KTtzZT1lLmdldFBhcmFtZXRlcihlLk1BWF9URVhUVVJFX0lNQUdFX1VOSVRTKX1yZXR1cm4gTWF0aC5taW4oMTYsc2UpfWZ1bmN0aW9uIEJlKHQpe2lmKDA9PT10KXJldHVybiAwO3ZhciBlPWp0KHQpO3JldHVybiBQZShlLFwiRVhUX2Rpc2pvaW50X3RpbWVyX3F1ZXJ5X3dlYmdsMlwiKSYmMj09PXQ/MjpQZShlLFwiRVhUX2Rpc2pvaW50X3RpbWVyX3F1ZXJ5XCIpPzE6MH1mdW5jdGlvbiBQZSh0LGUpe3JldHVybiBudWxsIT10LmdldEV4dGVuc2lvbihlKX1mdW5jdGlvbiBMZSh0KXt0cnl7aWYobnVsbCE9anQodCkpcmV0dXJuITB9Y2F0Y2godCl7cmV0dXJuITF9cmV0dXJuITF9ZnVuY3Rpb24gV2UodCl7aWYoMD09PXQpcmV0dXJuITE7dmFyIGU9anQodCk7aWYoMT09PXQpe2lmKCFQZShlLFwiT0VTX3RleHR1cmVfZmxvYXRcIikpcmV0dXJuITF9ZWxzZSBpZighUGUoZSxcIkVYVF9jb2xvcl9idWZmZXJfZmxvYXRcIikpcmV0dXJuITE7cmV0dXJuIFZlKGUpfWZ1bmN0aW9uIFVlKHQpe2lmKDA9PT10KXJldHVybiExO3ZhciBlPWp0KHQpO2lmKDEhPT10KXtpZihQZShlLFwiRVhUX2NvbG9yX2J1ZmZlcl9mbG9hdFwiKSlyZXR1cm4gVmUoZSk7aWYoUGUoZSxcIkVYVF9jb2xvcl9idWZmZXJfaGFsZl9mbG9hdFwiKSl7dmFyIG49ZS5nZXRFeHRlbnNpb24oXCJFWFRfY29sb3JfYnVmZmVyX2hhbGZfZmxvYXRcIik7cmV0dXJuIGZ1bmN0aW9uKHQsZSl7dmFyIG49UXQodCxlKSxyPXQuY3JlYXRlVGV4dHVyZSgpO3QuYmluZFRleHR1cmUodC5URVhUVVJFXzJELHIpO3QudGV4SW1hZ2UyRCh0LlRFWFRVUkVfMkQsMCxuLmludGVybmFsRm9ybWF0SGFsZkZsb2F0LDEsMSwwLG4udGV4dHVyZUZvcm1hdEZsb2F0LG4udGV4dHVyZVR5cGVIYWxmRmxvYXQsbnVsbCk7dmFyIG89dC5jcmVhdGVGcmFtZWJ1ZmZlcigpO3QuYmluZEZyYW1lYnVmZmVyKHQuRlJBTUVCVUZGRVIsbyksdC5mcmFtZWJ1ZmZlclRleHR1cmUyRCh0LkZSQU1FQlVGRkVSLHQuQ09MT1JfQVRUQUNITUVOVDAsdC5URVhUVVJFXzJELHIsMCk7dmFyIGE9dC5jaGVja0ZyYW1lYnVmZmVyU3RhdHVzKHQuRlJBTUVCVUZGRVIpPT09dC5GUkFNRUJVRkZFUl9DT01QTEVURTtyZXR1cm4gdC5iaW5kVGV4dHVyZSh0LlRFWFRVUkVfMkQsbnVsbCksdC5iaW5kRnJhbWVidWZmZXIodC5GUkFNRUJVRkZFUixudWxsKSx0LmRlbGV0ZVRleHR1cmUociksdC5kZWxldGVGcmFtZWJ1ZmZlcihvKSxhfShlLG4pfXJldHVybiExfXJldHVybiEhUGUoZSxcIk9FU190ZXh0dXJlX2Zsb2F0XCIpJiYoISFQZShlLFwiV0VCR0xfY29sb3JfYnVmZmVyX2Zsb2F0XCIpJiZWZShlKSl9ZnVuY3Rpb24gVmUodCl7dmFyIGU9UXQodCksbj10LmNyZWF0ZVRleHR1cmUoKTt0LmJpbmRUZXh0dXJlKHQuVEVYVFVSRV8yRCxuKTt0LnRleEltYWdlMkQodC5URVhUVVJFXzJELDAsZS5pbnRlcm5hbEZvcm1hdEZsb2F0LDEsMSwwLGUudGV4dHVyZUZvcm1hdEZsb2F0LGUudGV4dHVyZVR5cGVGbG9hdCxudWxsKTt2YXIgcj10LmNyZWF0ZUZyYW1lYnVmZmVyKCk7dC5iaW5kRnJhbWVidWZmZXIodC5GUkFNRUJVRkZFUixyKSx0LmZyYW1lYnVmZmVyVGV4dHVyZTJEKHQuRlJBTUVCVUZGRVIsdC5DT0xPUl9BVFRBQ0hNRU5UMCx0LlRFWFRVUkVfMkQsbiwwKTt2YXIgbz10LmNoZWNrRnJhbWVidWZmZXJTdGF0dXModC5GUkFNRUJVRkZFUik9PT10LkZSQU1FQlVGRkVSX0NPTVBMRVRFO3JldHVybiB0LmJpbmRUZXh0dXJlKHQuVEVYVFVSRV8yRCxudWxsKSx0LmJpbmRGcmFtZWJ1ZmZlcih0LkZSQU1FQlVGRkVSLG51bGwpLHQuZGVsZXRlVGV4dHVyZShuKSx0LmRlbGV0ZUZyYW1lYnVmZmVyKHIpLG99ZnVuY3Rpb24gemUodCl7cmV0dXJuIDI9PT10JiZudWxsIT1qdCh0KS5mZW5jZVN5bmN9dmFyIEdlPU9iamVjdC5mcmVlemUoe2NhbGxBbmRDaGVjazpKdCxjYW5CZVJlcHJlc2VudGVkOmVlLGdldFdlYkdMRXJyb3JNZXNzYWdlOm5lLGdldEV4dGVuc2lvbk9yVGhyb3c6cmUsY3JlYXRlVmVydGV4U2hhZGVyOm9lLGNyZWF0ZUZyYWdtZW50U2hhZGVyOmFlLGNyZWF0ZVByb2dyYW06Y2UsbGlua1Byb2dyYW06bGUsdmFsaWRhdGVQcm9ncmFtOmhlLGNyZWF0ZVN0YXRpY1ZlcnRleEJ1ZmZlcjpmZSxjcmVhdGVTdGF0aWNJbmRleEJ1ZmZlcjpkZSxnZXROdW1DaGFubmVsczpmdW5jdGlvbigpe3JldHVybiAyPT09aSgpLmdldE51bWJlcihcIldFQkdMX1ZFUlNJT05cIik/MTo0fSxjcmVhdGVUZXh0dXJlOnBlLHZhbGlkYXRlVGV4dHVyZVNpemU6dmUsY3JlYXRlRnJhbWVidWZmZXI6bWUsYmluZFZlcnRleEJ1ZmZlclRvUHJvZ3JhbUF0dHJpYnV0ZTpnZSxiaW5kVGV4dHVyZVVuaXQ6eWUsdW5iaW5kVGV4dHVyZVVuaXQ6ZnVuY3Rpb24odCxlLG4pe1NlKHQsbiksSnQodCxlLChmdW5jdGlvbigpe3JldHVybiB0LmFjdGl2ZVRleHR1cmUodC5URVhUVVJFMCtuKX0pKSxKdCh0LGUsKGZ1bmN0aW9uKCl7cmV0dXJuIHQuYmluZFRleHR1cmUodC5URVhUVVJFXzJELG51bGwpfSkpfSxnZXRQcm9ncmFtVW5pZm9ybUxvY2F0aW9uT3JUaHJvdzp4ZSxnZXRQcm9ncmFtVW5pZm9ybUxvY2F0aW9uOmJlLGJpbmRUZXh0dXJlVG9Qcm9ncmFtVW5pZm9ybVNhbXBsZXI6d2UsYmluZENhbnZhc1RvRnJhbWVidWZmZXI6ZnVuY3Rpb24odCxlKXtKdCh0LGUsKGZ1bmN0aW9uKCl7cmV0dXJuIHQuYmluZEZyYW1lYnVmZmVyKHQuRlJBTUVCVUZGRVIsbnVsbCl9KSksSnQodCxlLChmdW5jdGlvbigpe3JldHVybiB0LnZpZXdwb3J0KDAsMCx0LmNhbnZhcy53aWR0aCx0LmNhbnZhcy5oZWlnaHQpfSkpLEp0KHQsZSwoZnVuY3Rpb24oKXtyZXR1cm4gdC5zY2lzc29yKDAsMCx0LmNhbnZhcy53aWR0aCx0LmNhbnZhcy5oZWlnaHQpfSkpfSxiaW5kQ29sb3JUZXh0dXJlVG9GcmFtZWJ1ZmZlcjpDZSx1bmJpbmRDb2xvclRleHR1cmVGcm9tRnJhbWVidWZmZXI6RWUsdmFsaWRhdGVGcmFtZWJ1ZmZlcjpSZSxnZXRGcmFtZWJ1ZmZlckVycm9yTWVzc2FnZTpJZSxnZXRCYXRjaERpbTpBZSxnZXRSb3dzQ29sczpEZSxnZXRTaGFwZUFzM0Q6VGUsZ2V0VGV4dHVyZVNoYXBlRnJvbUxvZ2ljYWxTaGFwZTpOZSxpc1Jlc2hhcGVGcmVlOl9lLGdldFdlYkdMTWF4VGV4dHVyZVNpemU6T2UscmVzZXRNYXhUZXh0dXJlU2l6ZTpmdW5jdGlvbigpe2llPW51bGx9LHJlc2V0TWF4VGV4dHVyZXNJblNoYWRlcjpmdW5jdGlvbigpe3NlPW51bGx9LGdldE1heFRleHR1cmVzSW5TaGFkZXI6TWUsZ2V0V2ViR0xEaXNqb2ludFF1ZXJ5VGltZXJWZXJzaW9uOkJlLGhhc0V4dGVuc2lvbjpQZSxpc1dlYkdMVmVyc2lvbkVuYWJsZWQ6TGUsaXNDYXBhYmxlT2ZSZW5kZXJpbmdUb0Zsb2F0VGV4dHVyZTpXZSxpc0Rvd25sb2FkRmxvYXRUZXh0dXJlRW5hYmxlZDpVZSxpc1dlYkdMRmVuY2VFbmFibGVkOnplfSksSGU9aSgpO2Z1bmN0aW9uIHFlKCl7aSgpLnNldChcIlBST0RcIiwhMCl9ZnVuY3Rpb24gS2UoKXtpKCkuc2V0KFwiREVCVUdcIiwhMCl9ZnVuY3Rpb24gamUoKXtpKCkuc2V0KFwiREVQUkVDQVRJT05fV0FSTklOR1NfRU5BQkxFRFwiLCExKSxjb25zb2xlLndhcm4oXCJUZW5zb3JGbG93LmpzIGRlcHJlY2F0aW9uIHdhcm5pbmdzIGhhdmUgYmVlbiBkaXNhYmxlZC5cIil9ZnVuY3Rpb24gWGUodCl7aSgpLmdldEJvb2woXCJERVBSRUNBVElPTl9XQVJOSU5HU19FTkFCTEVEXCIpJiZjb25zb2xlLndhcm4odCtcIiBZb3UgY2FuIGRpc2FibGUgZGVwcmVjYXRpb24gd2FybmluZ3Mgd2l0aCB0Zi5kaXNhYmxlRGVwcmVjYXRpb25XYXJuaW5ncygpLlwiKX1mdW5jdGlvbiBZZSgpe0x0LmRpc3Bvc2VWYXJpYWJsZXMoKX1mdW5jdGlvbiAkZSgpe3JldHVybiBMdH1mdW5jdGlvbiBRZSgpe3JldHVybiBMdC5tZW1vcnkoKX1mdW5jdGlvbiBKZSh0KXtyZXR1cm4gTHQucHJvZmlsZSh0KX1mdW5jdGlvbiBaZSh0LGUpe3JldHVybiBMdC50aWR5KHQsZSl9ZnVuY3Rpb24gdG4odCl7X3QodCkuZm9yRWFjaCgoZnVuY3Rpb24odCl7cmV0dXJuIHQuZGlzcG9zZSgpfSkpfWZ1bmN0aW9uIGVuKHQpe3JldHVybiBMdC5rZWVwKHQpfWZ1bmN0aW9uIG5uKHQpe3JldHVybiBMdC50aW1lKHQpfWZ1bmN0aW9uIHJuKHQpe3JldHVybiBMdC5zZXRCYWNrZW5kKHQpfWZ1bmN0aW9uIG9uKCl7cmV0dXJuIEx0LnJlYWR5KCl9ZnVuY3Rpb24gYW4oKXtyZXR1cm4gTHQuYmFja2VuZE5hbWV9ZnVuY3Rpb24gc24odCl7THQucmVtb3ZlQmFja2VuZCh0KX1mdW5jdGlvbiB1bih0KXtyZXR1cm4gTHQuZmluZEJhY2tlbmQodCl9ZnVuY3Rpb24gY24odCl7cmV0dXJuIEx0LmZpbmRCYWNrZW5kRmFjdG9yeSh0KX1mdW5jdGlvbiBsbih0LGUsbil7cmV0dXJuIHZvaWQgMD09PW4mJihuPTEpLEx0LnJlZ2lzdGVyQmFja2VuZCh0LGUsbil9ZnVuY3Rpb24gaG4oKXtyZXR1cm4gTHQuYmFja2VuZH1mdW5jdGlvbiBmbih0LGUpe2koKS5zZXRQbGF0Zm9ybSh0LGUpfWZ1bmN0aW9uIGRuKCl7Zm9yKHZhciB0PVtdLGU9MDtlPGFyZ3VtZW50cy5sZW5ndGg7ZSsrKXRbZV09YXJndW1lbnRzW2VdO2koKS5nZXRCb29sKFwiSVNfVEVTVFwiKXx8Y29uc29sZS53YXJuLmFwcGx5KGNvbnNvbGUsdCl9ZnVuY3Rpb24gcG4odCxlKXt2YXIgbj10O2lmKFYodCkpcmV0dXJuXCJzdHJpbmdcIj09PWU/W106W3QubGVuZ3RoXTtpZighQXJyYXkuaXNBcnJheSh0KSlyZXR1cm5bXTtmb3IodmFyIHI9W107QXJyYXkuaXNBcnJheShuKXx8VihuKSYmXCJzdHJpbmdcIiE9PWU7KXIucHVzaChuLmxlbmd0aCksbj1uWzBdO3JldHVybiBBcnJheS5pc0FycmF5KHQpJiZpKCkuZ2V0Qm9vbChcIlRFTlNPUkxJS0VfQ0hFQ0tfU0hBUEVfQ09OU0lTVEVOQ1lcIikmJmZ1bmN0aW9uIHQoZSxuLHIpe2lmKHI9cnx8W10sIUFycmF5LmlzQXJyYXkoZSkmJiFWKGUpKXJldHVybiB2b2lkIEMoMD09PW4ubGVuZ3RoLChmdW5jdGlvbigpe3JldHVyblwiRWxlbWVudCBhcnJbXCIrci5qb2luKFwiXVtcIikrXCJdIGlzIGEgcHJpbWl0aXZlLCBidXQgc2hvdWxkIGJlIGFuIGFycmF5L1R5cGVkQXJyYXkgb2YgXCIrblswXStcIiBlbGVtZW50c1wifSkpO0Mobi5sZW5ndGg+MCwoZnVuY3Rpb24oKXtyZXR1cm5cIkVsZW1lbnQgYXJyW1wiK3Iuam9pbihcIl1bXCIpK1wiXSBzaG91bGQgYmUgYSBwcmltaXRpdmUsIGJ1dCBpcyBhbiBhcnJheSBvZiBcIitlLmxlbmd0aCtcIiBlbGVtZW50c1wifSkpLEMoZS5sZW5ndGg9PT1uWzBdLChmdW5jdGlvbigpe3JldHVyblwiRWxlbWVudCBhcnJbXCIrci5qb2luKFwiXVtcIikrXCJdIHNob3VsZCBoYXZlIFwiK25bMF0rXCIgZWxlbWVudHMsIGJ1dCBoYXMgXCIrZS5sZW5ndGgrXCIgZWxlbWVudHNcIn0pKTtmb3IodmFyIG89bi5zbGljZSgxKSxhPTA7YTxlLmxlbmd0aDsrK2EpdChlW2FdLG8sci5jb25jYXQoYSkpfSh0LHIsW10pLHJ9ZnVuY3Rpb24gdm4odCxlLG4scil7aWYobnVsbCE9dCYmKFwibnVtZXJpY1wiIT09dCYmdCE9PWV8fFwibnVtZXJpY1wiPT09dCYmXCJzdHJpbmdcIj09PWUpKXRocm93IG5ldyBFcnJvcihcIkFyZ3VtZW50ICdcIituK1wiJyBwYXNzZWQgdG8gJ1wiK3IrXCInIG11c3QgYmUgXCIrdCtcIiB0ZW5zb3IsIGJ1dCBnb3QgXCIrZStcIiB0ZW5zb3JcIil9ZnVuY3Rpb24gbW4odCxlLG4scil7aWYodm9pZCAwPT09ciYmKHI9XCJudW1lcmljXCIpLHQgaW5zdGFuY2VvZiB3dClyZXR1cm4gdm4ocix0LmR0eXBlLGUsbiksdDt2YXIgbz1qKHQpO2lmKFwic3RyaW5nXCIhPT1vJiZbXCJib29sXCIsXCJpbnQzMlwiLFwiZmxvYXQzMlwiXS5pbmRleE9mKHIpPj0wJiYobz1yKSx2bihyLG8sZSxuKSxudWxsPT10fHwhVih0KSYmIUFycmF5LmlzQXJyYXkodCkmJlwibnVtYmVyXCIhPXR5cGVvZiB0JiZcImJvb2xlYW5cIiE9dHlwZW9mIHQmJlwic3RyaW5nXCIhPXR5cGVvZiB0KXt2YXIgYT1udWxsPT10P1wibnVsbFwiOnQuY29uc3RydWN0b3IubmFtZTt0aHJvdyBuZXcgRXJyb3IoXCJBcmd1bWVudCAnXCIrZStcIicgcGFzc2VkIHRvICdcIituK1wiJyBtdXN0IGJlIGEgVGVuc29yIG9yIFRlbnNvckxpa2UsIGJ1dCBnb3QgJ1wiK2ErXCInXCIpfXZhciBzPXBuKHQsbyk7Vih0KXx8QXJyYXkuaXNBcnJheSh0KXx8KHQ9W3RdKTt2YXIgdT1cInN0cmluZ1wiIT09bz9RKHQsbyxpKCkuZ2V0Qm9vbChcIkRFQlVHXCIpKTpJKHQsW10sITApO3JldHVybiBMdC5tYWtlVGVuc29yKHUscyxvKX1mdW5jdGlvbiBnbih0LGUsbixyKXtpZih2b2lkIDA9PT1yJiYocj1cIm51bWVyaWNcIiksIUFycmF5LmlzQXJyYXkodCkpdGhyb3cgbmV3IEVycm9yKFwiQXJndW1lbnQgXCIrZStcIiBwYXNzZWQgdG8gXCIrbitcIiBtdXN0IGJlIGEgYFRlbnNvcltdYCBvciBgVGVuc29yTGlrZVtdYFwiKTtyZXR1cm4gdC5tYXAoKGZ1bmN0aW9uKHQscil7cmV0dXJuIG1uKHQsZStcIltcIityK1wiXVwiLG4pfSkscil9ZnVuY3Rpb24geW4odCxlKXtmb3IodmFyIG49MDtuPHQubGVuZ3RoOysrbilpZih0W3QubGVuZ3RoLW4tMV0hPT1lLTEtbilyZXR1cm4hMTtyZXR1cm4hMH1mdW5jdGlvbiB4bih0LGUsbil7Zm9yKHZhciByPXQubGVuZ3RoK2UubGVuZ3RoLG89W10sYT0wLGk9MCxzPTA7czxyO3MrKyktMT09PW4uaW5kZXhPZihzKT9vLnB1c2godFthKytdKTpvLnB1c2goZVtpKytdKTtyZXR1cm4gb31mdW5jdGlvbiBibih0LGUpe2Zvcih2YXIgbj1bXSxyPXQubGVuZ3RoLG89MDtvPHI7bysrKS0xPT09ZS5pbmRleE9mKG8pJiZuLnB1c2godFtvXSk7cmV0dXJuW24sZS5tYXAoKGZ1bmN0aW9uKGUpe3JldHVybiB0W2VdfSkpXX1mdW5jdGlvbiB3bih0LGUpe3JldHVybiB4bih0LGUubWFwKChmdW5jdGlvbih0KXtyZXR1cm4gMX0pKSxlKX1mdW5jdGlvbiBDbih0LGUsbil7Qyh5bihlLG4pLChmdW5jdGlvbigpe3JldHVybiB0K1wiIHN1cHBvcnRzIG9ubHkgaW5uZXItbW9zdCBheGVzIGZvciBub3cuIEdvdCBheGVzIFwiK2UrXCIgYW5kIHJhbmstXCIrbitcIiBpbnB1dC5cIn0pKX1mdW5jdGlvbiBFbih0LGUpe2lmKHluKHQsZSkpcmV0dXJuIG51bGw7Zm9yKHZhciBuPVtdLHI9MDtyPGU7KytyKS0xPT09dC5pbmRleE9mKHIpJiZuLnB1c2gocik7cmV0dXJuIHQuZm9yRWFjaCgoZnVuY3Rpb24odCl7cmV0dXJuIG4ucHVzaCh0KX0pKSxufWZ1bmN0aW9uIFJuKHQpe3JldHVybiB0Lm1hcCgoZnVuY3Rpb24odCxlKXtyZXR1cm5bZSx0XX0pKS5zb3J0KChmdW5jdGlvbih0LGUpe3JldHVybiB0WzFdLWVbMV19KSkubWFwKChmdW5jdGlvbih0KXtyZXR1cm4gdFswXX0pKX1mdW5jdGlvbiBJbih0LGUpe2Zvcih2YXIgbj1bXSxyPWUtdDtyPGU7KytyKW4ucHVzaChyKTtyZXR1cm4gbn1mdW5jdGlvbiBrbih0LGUpe3ZhciBuPXRbMF0ubGVuZ3RoO3QuZm9yRWFjaCgoZnVuY3Rpb24odCxlKXtDKHQubGVuZ3RoPT09biwoZnVuY3Rpb24oKXtyZXR1cm5cIkVycm9yIGluIGNvbmNhdFwiK24rXCJEOiByYW5rIG9mIHRlbnNvcnNbXCIrZStcIl0gbXVzdCBiZSB0aGUgc2FtZSBhcyB0aGUgcmFuayBvZiB0aGUgcmVzdCAoXCIrbitcIilcIn0pKX0pKSxDKGU+PTAmJmU8biwoZnVuY3Rpb24oKXtyZXR1cm5cIkVycm9yIGluIGNvbmNhdFwiK24rXCJEOiBheGlzIG11c3QgYmUgYmV0d2VlbiAwIGFuZCBcIisobi0xKStcIi5cIn0pKTt2YXIgcj10WzBdO3QuZm9yRWFjaCgoZnVuY3Rpb24odCxvKXtmb3IodmFyIGE9MDthPG47YSsrKUMoYT09PWV8fHRbYV09PT1yW2FdLChmdW5jdGlvbigpe3JldHVyblwiRXJyb3IgaW4gY29uY2F0XCIrbitcIkQ6IFNoYXBlIG9mIHRlbnNvcnNbXCIrbytcIl0gKFwiK3QrXCIpIGRvZXMgbm90IG1hdGNoIHRoZSBzaGFwZSBvZiB0aGUgcmVzdCAoXCIrcitcIikgYWxvbmcgdGhlIG5vbi1jb25jYXRlbmF0ZWQgYXhpcyBcIitvK1wiLlwifSkpfSkpfWZ1bmN0aW9uIFNuKHQsZSl7Zm9yKHZhciBuPXRbMF0uc2xpY2UoKSxyPTE7cjx0Lmxlbmd0aDtyKyspbltlXSs9dFtyXVtlXTtyZXR1cm4gbn1mdW5jdGlvbiBBbih0KXt2YXIgZT1PYmplY3Qua2V5cyh0KTtpZigxIT09ZS5sZW5ndGgpdGhyb3cgbmV3IEVycm9yKFwiUGxlYXNlIHByb3ZpZGUgYW4gb2JqZWN0IHdpdGggYSBzaW5nbGUga2V5IChvcGVyYXRpb24gbmFtZSkgbWFwcGluZyB0byBhIGZ1bmN0aW9uLiBHb3QgYW4gb2JqZWN0IHdpdGggXCIrZS5sZW5ndGgrXCIga2V5cy5cIik7dmFyIG49ZVswXSxyPXRbbl07bi5lbmRzV2l0aChcIl9cIikmJihuPW4uc3Vic3RyaW5nKDAsbi5sZW5ndGgtMSkpO3ZhciBvPWZ1bmN0aW9uKCl7Zm9yKHZhciB0PVtdLGU9MDtlPGFyZ3VtZW50cy5sZW5ndGg7ZSsrKXRbZV09YXJndW1lbnRzW2VdO0x0LnN0YXJ0U2NvcGUobik7dHJ5e3ZhciBvPXIuYXBwbHkodm9pZCAwLHQpO3JldHVybiBvIGluc3RhbmNlb2YgUHJvbWlzZSYmY29uc29sZS5lcnJvcihcIkNhbm5vdCByZXR1cm4gYSBQcm9taXNlIGluc2lkZSBvZiB0aWR5LlwiKSxMdC5lbmRTY29wZShvKSxvfWNhdGNoKHQpe3Rocm93IEx0LmVuZFNjb3BlKG51bGwpLHR9fTtyZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sXCJuYW1lXCIse3ZhbHVlOm4sY29uZmlndXJhYmxlOiEwfSksb31IZS5yZWdpc3RlckZsYWcoXCJIQVNfV0VCR0xcIiwoZnVuY3Rpb24oKXtyZXR1cm4gSGUuZ2V0TnVtYmVyKFwiV0VCR0xfVkVSU0lPTlwiKT4wfSkpLEhlLnJlZ2lzdGVyRmxhZyhcIldFQkdMX1ZFUlNJT05cIiwoZnVuY3Rpb24oKXtyZXR1cm4gTGUoMik/MjpMZSgxKT8xOjB9KSksSGUucmVnaXN0ZXJGbGFnKFwiV0VCR0xfQlVGRkVSX1NVUFBPUlRFRFwiLChmdW5jdGlvbigpe3JldHVybiAyPT09SGUuZ2V0KFwiV0VCR0xfVkVSU0lPTlwiKX0pKSxIZS5yZWdpc3RlckZsYWcoXCJXRUJHTF9DUFVfRk9SV0FSRFwiLChmdW5jdGlvbigpe3JldHVybiEwfSkpLEhlLnJlZ2lzdGVyRmxhZyhcIldFQkdMX0ZPUkNFX0YxNl9URVhUVVJFU1wiLChmdW5jdGlvbigpe3JldHVybiExfSkpLEhlLnJlZ2lzdGVyRmxhZyhcIldFQkdMX1BBQ0tcIiwoZnVuY3Rpb24oKXtyZXR1cm4gSGUuZ2V0Qm9vbChcIkhBU19XRUJHTFwiKX0pKSxIZS5yZWdpc3RlckZsYWcoXCJXRUJHTF9QQUNLX05PUk1BTElaQVRJT05cIiwoZnVuY3Rpb24oKXtyZXR1cm4gSGUuZ2V0Qm9vbChcIldFQkdMX1BBQ0tcIil9KSksSGUucmVnaXN0ZXJGbGFnKFwiV0VCR0xfUEFDS19DTElQXCIsKGZ1bmN0aW9uKCl7cmV0dXJuIEhlLmdldEJvb2woXCJXRUJHTF9QQUNLXCIpfSkpLEhlLnJlZ2lzdGVyRmxhZyhcIldFQkdMX1BBQ0tfREVQVEhXSVNFQ09OVlwiLChmdW5jdGlvbigpe3JldHVybiExfSkpLEhlLnJlZ2lzdGVyRmxhZyhcIldFQkdMX1BBQ0tfQklOQVJZX09QRVJBVElPTlNcIiwoZnVuY3Rpb24oKXtyZXR1cm4gSGUuZ2V0Qm9vbChcIldFQkdMX1BBQ0tcIil9KSksSGUucmVnaXN0ZXJGbGFnKFwiV0VCR0xfUEFDS19VTkFSWV9PUEVSQVRJT05TXCIsKGZ1bmN0aW9uKCl7cmV0dXJuIEhlLmdldEJvb2woXCJXRUJHTF9QQUNLXCIpfSkpLEhlLnJlZ2lzdGVyRmxhZyhcIldFQkdMX1BBQ0tfQVJSQVlfT1BFUkFUSU9OU1wiLChmdW5jdGlvbigpe3JldHVybiBIZS5nZXRCb29sKFwiV0VCR0xfUEFDS1wiKX0pKSxIZS5yZWdpc3RlckZsYWcoXCJXRUJHTF9QQUNLX0lNQUdFX09QRVJBVElPTlNcIiwoZnVuY3Rpb24oKXtyZXR1cm4gSGUuZ2V0Qm9vbChcIldFQkdMX1BBQ0tcIil9KSksSGUucmVnaXN0ZXJGbGFnKFwiV0VCR0xfUEFDS19SRURVQ0VcIiwoZnVuY3Rpb24oKXtyZXR1cm4gSGUuZ2V0Qm9vbChcIldFQkdMX1BBQ0tcIil9KSksSGUucmVnaXN0ZXJGbGFnKFwiV0VCR0xfTEFaSUxZX1VOUEFDS1wiLChmdW5jdGlvbigpe3JldHVybiBIZS5nZXRCb29sKFwiV0VCR0xfUEFDS1wiKX0pKSxIZS5yZWdpc3RlckZsYWcoXCJXRUJHTF9DT05WX0lNMkNPTFwiLChmdW5jdGlvbigpe3JldHVybiBIZS5nZXRCb29sKFwiV0VCR0xfUEFDS1wiKX0pKSxIZS5yZWdpc3RlckZsYWcoXCJXRUJHTF9NQVhfVEVYVFVSRV9TSVpFXCIsKGZ1bmN0aW9uKCl7cmV0dXJuIE9lKEhlLmdldE51bWJlcihcIldFQkdMX1ZFUlNJT05cIikpfSkpLEhlLnJlZ2lzdGVyRmxhZyhcIldFQkdMX01BWF9URVhUVVJFU19JTl9TSEFERVJcIiwoZnVuY3Rpb24oKXtyZXR1cm4gTWUoSGUuZ2V0TnVtYmVyKFwiV0VCR0xfVkVSU0lPTlwiKSl9KSksSGUucmVnaXN0ZXJGbGFnKFwiV0VCR0xfRElTSk9JTlRfUVVFUllfVElNRVJfRVhURU5TSU9OX1ZFUlNJT05cIiwoZnVuY3Rpb24oKXt2YXIgdD1IZS5nZXROdW1iZXIoXCJXRUJHTF9WRVJTSU9OXCIpO3JldHVybiAwPT09dD8wOkJlKHQpfSkpLEhlLnJlZ2lzdGVyRmxhZyhcIldFQkdMX0RJU0pPSU5UX1FVRVJZX1RJTUVSX0VYVEVOU0lPTl9SRUxJQUJMRVwiLChmdW5jdGlvbigpe3JldHVybiBIZS5nZXROdW1iZXIoXCJXRUJHTF9ESVNKT0lOVF9RVUVSWV9USU1FUl9FWFRFTlNJT05fVkVSU0lPTlwiKT4wJiYodD1uYXZpZ2F0b3IudXNlckFnZW50fHxuYXZpZ2F0b3IudmVuZG9yfHx3aW5kb3cub3BlcmEsISgvKGFuZHJvaWR8YmJcXGQrfG1lZWdvKS4rbW9iaWxlfGF2YW50Z298YmFkYVxcL3xibGFja2JlcnJ5fGJsYXplcnxjb21wYWx8ZWxhaW5lfGZlbm5lY3xoaXB0b3B8aWVtb2JpbGV8aXAoaG9uZXxvZCl8aXJpc3xraW5kbGV8bGdlIHxtYWVtb3xtaWRwfG1tcHxtb2JpbGUuK2ZpcmVmb3h8bmV0ZnJvbnR8b3BlcmEgbShvYnxpbilpfHBhbG0oIG9zKT98cGhvbmV8cChpeGl8cmUpXFwvfHBsdWNrZXJ8cG9ja2V0fHBzcHxzZXJpZXMoNHw2KTB8c3ltYmlhbnx0cmVvfHVwXFwuKGJyb3dzZXJ8bGluayl8dm9kYWZvbmV8d2FwfHdpbmRvd3MgY2V8eGRhfHhpaW5vL2kudGVzdCh0KXx8LzEyMDd8NjMxMHw2NTkwfDNnc298NHRocHw1MFsxLTZdaXw3NzBzfDgwMnN8YSB3YXxhYmFjfGFjKGVyfG9vfHNcXC0pfGFpKGtvfHJuKXxhbChhdnxjYXxjbyl8YW1vaXxhbihleHxueXx5dyl8YXB0dXxhcihjaHxnbyl8YXModGV8dXMpfGF0dHd8YXUoZGl8XFwtbXxyIHxzICl8YXZhbnxiZShja3xsbHxucSl8YmkobGJ8cmQpfGJsKGFjfGF6KXxicihlfHYpd3xidW1ifGJ3XFwtKG58dSl8YzU1XFwvfGNhcGl8Y2N3YXxjZG1cXC18Y2VsbHxjaHRtfGNsZGN8Y21kXFwtfGNvKG1wfG5kKXxjcmF3fGRhKGl0fGxsfG5nKXxkYnRlfGRjXFwtc3xkZXZpfGRpY2F8ZG1vYnxkbyhjfHApb3xkcygxMnxcXC1kKXxlbCg0OXxhaSl8ZW0obDJ8dWwpfGVyKGljfGswKXxlc2w4fGV6KFs0LTddMHxvc3x3YXx6ZSl8ZmV0Y3xmbHkoXFwtfF8pfGcxIHV8ZzU2MHxnZW5lfGdmXFwtNXxnXFwtbW98Z28oXFwud3xvZCl8Z3IoYWR8dW4pfGhhaWV8aGNpdHxoZFxcLShtfHB8dCl8aGVpXFwtfGhpKHB0fHRhKXxocCggaXxpcCl8aHNcXC1jfGh0KGMoXFwtfCB8X3xhfGd8cHxzfHQpfHRwKXxodShhd3x0Yyl8aVxcLSgyMHxnb3xtYSl8aTIzMHxpYWMoIHxcXC18XFwvKXxpYnJvfGlkZWF8aWcwMXxpa29tfGltMWt8aW5ub3xpcGFxfGlyaXN8amEodHx2KWF8amJyb3xqZW11fGppZ3N8a2RkaXxrZWppfGtndCggfFxcLyl8a2xvbnxrcHQgfGt3Y1xcLXxreW8oY3xrKXxsZShub3x4aSl8bGcoIGd8XFwvKGt8bHx1KXw1MHw1NHxcXC1bYS13XSl8bGlid3xseW54fG0xXFwtd3xtM2dhfG01MFxcL3xtYSh0ZXx1aXx4byl8bWMoMDF8MjF8Y2EpfG1cXC1jcnxtZShyY3xyaSl8bWkobzh8b2F8dHMpfG1tZWZ8bW8oMDF8MDJ8Yml8ZGV8ZG98dChcXC18IHxvfHYpfHp6KXxtdCg1MHxwMXx2ICl8bXdicHxteXdhfG4xMFswLTJdfG4yMFsyLTNdfG4zMCgwfDIpfG41MCgwfDJ8NSl8bjcoMCgwfDEpfDEwKXxuZSgoY3xtKVxcLXxvbnx0Znx3Znx3Z3x3dCl8bm9rKDZ8aSl8bnpwaHxvMmltfG9wKHRpfHd2KXxvcmFufG93ZzF8cDgwMHxwYW4oYXxkfHQpfHBkeGd8cGcoMTN8XFwtKFsxLThdfGMpKXxwaGlsfHBpcmV8cGwoYXl8dWMpfHBuXFwtMnxwbyhja3xydHxzZSl8cHJveHxwc2lvfHB0XFwtZ3xxYVxcLWF8cWMoMDd8MTJ8MjF8MzJ8NjB8XFwtWzItN118aVxcLSl8cXRla3xyMzgwfHI2MDB8cmFrc3xyaW05fHJvKHZlfHpvKXxzNTVcXC98c2EoZ2V8bWF8bW18bXN8bnl8dmEpfHNjKDAxfGhcXC18b298cFxcLSl8c2RrXFwvfHNlKGMoXFwtfDB8MSl8NDd8bWN8bmR8cmkpfHNnaFxcLXxzaGFyfHNpZShcXC18bSl8c2tcXC0wfHNsKDQ1fGlkKXxzbShhbHxhcnxiM3xpdHx0NSl8c28oZnR8bnkpfHNwKDAxfGhcXC18dlxcLXx2ICl8c3koMDF8bWIpfHQyKDE4fDUwKXx0NigwMHwxMHwxOCl8dGEoZ3R8bGspfHRjbFxcLXx0ZGdcXC18dGVsKGl8bSl8dGltXFwtfHRcXC1tb3x0byhwbHxzaCl8dHMoNzB8bVxcLXxtM3xtNSl8dHhcXC05fHVwKFxcLmJ8ZzF8c2kpfHV0c3R8djQwMHx2NzUwfHZlcml8dmkocmd8dGUpfHZrKDQwfDVbMC0zXXxcXC12KXx2bTQwfHZvZGF8dnVsY3x2eCg1Mnw1M3w2MHw2MXw3MHw4MHw4MXw4M3w4NXw5OCl8dzNjKFxcLXwgKXx3ZWJjfHdoaXR8d2koZyB8bmN8bncpfHdtbGJ8d29udXx4NzAwfHlhc1xcLXx5b3VyfHpldG98enRlXFwtL2kudGVzdCh0LnN1YnN0cigwLDQpKSkpO3ZhciB0fSkpLEhlLnJlZ2lzdGVyRmxhZyhcIldFQkdMX1JFTkRFUl9GTE9BVDMyX0NBUEFCTEVcIiwoZnVuY3Rpb24oKXtyZXR1cm4gV2UoSGUuZ2V0TnVtYmVyKFwiV0VCR0xfVkVSU0lPTlwiKSl9KSksSGUucmVnaXN0ZXJGbGFnKFwiV0VCR0xfUkVOREVSX0ZMT0FUMzJfRU5BQkxFRFwiLChmdW5jdGlvbigpe3JldHVybiFIZS5nZXRCb29sKFwiV0VCR0xfRk9SQ0VfRjE2X1RFWFRVUkVTXCIpJiZIZS5nZXRCb29sKFwiV0VCR0xfUkVOREVSX0ZMT0FUMzJfQ0FQQUJMRVwiKX0pKSxIZS5yZWdpc3RlckZsYWcoXCJXRUJHTF9ET1dOTE9BRF9GTE9BVF9FTkFCTEVEXCIsKGZ1bmN0aW9uKCl7cmV0dXJuIFVlKEhlLmdldE51bWJlcihcIldFQkdMX1ZFUlNJT05cIikpfSkpLEhlLnJlZ2lzdGVyRmxhZyhcIldFQkdMX0ZFTkNFX0FQSV9FTkFCTEVEXCIsKGZ1bmN0aW9uKCl7cmV0dXJuIHplKEhlLmdldE51bWJlcihcIldFQkdMX1ZFUlNJT05cIikpfSkpLEhlLnJlZ2lzdGVyRmxhZyhcIldFQkdMX1NJWkVfVVBMT0FEX1VOSUZPUk1cIiwoZnVuY3Rpb24oKXtyZXR1cm4gSGUuZ2V0Qm9vbChcIldFQkdMX1JFTkRFUl9GTE9BVDMyX0VOQUJMRURcIik/NDowfSkpLGJ0PVhlO3ZhciBEbj1Bbih7Y29tcGxleF86ZnVuY3Rpb24odCxlKXt2YXIgbj1tbih0LFwicmVhbFwiLFwiY29tcGxleFwiKSxyPW1uKGUsXCJpbWFnXCIsXCJjb21wbGV4XCIpO3JldHVybiBFKG4uc2hhcGUsci5zaGFwZSxcInJlYWwgYW5kIGltYWcgc2hhcGVzLCBcIituLnNoYXBlK1wiIGFuZCBcIityLnNoYXBlK1wiLCBtdXN0IG1hdGNoIGluIGNhbGwgdG8gdGYuY29tcGxleCgpLlwiKSxMdC5ydW5LZXJuZWxGdW5jKChmdW5jdGlvbih0KXtyZXR1cm4gdC5jb21wbGV4KG4scil9KSx7JHJlYWw6biwkaW1hZzpyfSl9fSksVG49QW4oe3JlYWxfOmZ1bmN0aW9uKHQpe3ZhciBlPW1uKHQsXCJpbnB1dFwiLFwicmVhbFwiKTtyZXR1cm4gTHQucnVuS2VybmVsRnVuYygoZnVuY3Rpb24odCl7cmV0dXJuIHQucmVhbChlKX0pLHskaW5wdXQ6ZX0pfX0pLE5uPUFuKHtpbWFnXzpmdW5jdGlvbih0KXt2YXIgZT1tbih0LFwiaW5wdXRcIixcImltYWdcIik7cmV0dXJuIEx0LnJ1bktlcm5lbEZ1bmMoKGZ1bmN0aW9uKHQpe3JldHVybiB0LmltYWcoZSl9KSx7JGlucHV0OmV9KX19KTtmdW5jdGlvbiBGbih0LGUsbil7cmV0dXJuIF9uKHQsZSxwbih0LG4pLG4pfWZ1bmN0aW9uIF9uKHQsZSxuLHIpe2lmKG51bGw9PXImJihyPWoodCkpLFwiY29tcGxleDY0XCI9PT1yKXRocm93IG5ldyBFcnJvcihcIkNhbm5vdCBjb25zdHJ1Y3QgYSBjb21wbGV4NjQgdGVuc29yIGRpcmVjdGx5LiBQbGVhc2UgdXNlIHRmLmNvbXBsZXgocmVhbCwgaW1hZykuXCIpO2lmKCFWKHQpJiYhQXJyYXkuaXNBcnJheSh0KSYmXCJudW1iZXJcIiE9dHlwZW9mIHQmJlwiYm9vbGVhblwiIT10eXBlb2YgdCYmXCJzdHJpbmdcIiE9dHlwZW9mIHQpdGhyb3cgbmV3IEVycm9yKFwidmFsdWVzIHBhc3NlZCB0byB0ZW5zb3IodmFsdWVzKSBtdXN0IGJlIGEgbnVtYmVyL2Jvb2xlYW4vc3RyaW5nIG9yIGFuIGFycmF5IG9mIG51bWJlcnMvYm9vbGVhbnMvc3RyaW5ncywgb3IgYSBUeXBlZEFycmF5XCIpO2lmKG51bGwhPWUpe250KGUpO3ZhciBvPWsoZSksYT1rKG4pO0Mobz09PWEsKGZ1bmN0aW9uKCl7cmV0dXJuXCJCYXNlZCBvbiB0aGUgcHJvdmlkZWQgc2hhcGUsIFtcIitlK1wiXSwgdGhlIHRlbnNvciBzaG91bGQgaGF2ZSBcIitvK1wiIHZhbHVlcyBidXQgaGFzIFwiK2F9KSk7Zm9yKHZhciBzPTA7czxuLmxlbmd0aDsrK3Mpe3ZhciB1PW5bc10sYz1zIT09bi5sZW5ndGgtMXx8dSE9PWsoZS5zbGljZShzKSk7QyhuW3NdPT09ZVtzXXx8IWMsKGZ1bmN0aW9uKCl7cmV0dXJuXCJFcnJvciBjcmVhdGluZyBhIG5ldyBUZW5zb3IuIEluZmVycmVkIHNoYXBlIChcIituK1wiKSBkb2VzIG5vdCBtYXRjaCB0aGUgcHJvdmlkZWQgc2hhcGUgKFwiK2UrXCIpLiBcIn0pKX19cmV0dXJuIFYodCl8fEFycmF5LmlzQXJyYXkodCl8fCh0PVt0XSksZT1lfHxuLHQ9XCJzdHJpbmdcIiE9PXI/USh0LHIsaSgpLmdldEJvb2woXCJERUJVR1wiKSk6SSh0LFtdLCEwKSxMdC5tYWtlVGVuc29yKHQsZSxyKX1mdW5jdGlvbiBPbih0LGUpe2lmKChWKHQpJiZcInN0cmluZ1wiIT09ZXx8QXJyYXkuaXNBcnJheSh0KSkmJlwiY29tcGxleDY0XCIhPT1lKXRocm93IG5ldyBFcnJvcihcIkVycm9yIGNyZWF0aW5nIGEgbmV3IFNjYWxhcjogdmFsdWUgbXVzdCBiZSBhIHByaW1pdGl2ZSAobnVtYmVyfGJvb2xlYW58c3RyaW5nKVwiKTtpZihcInN0cmluZ1wiPT09ZSYmVih0KSYmISh0IGluc3RhbmNlb2YgVWludDhBcnJheSkpdGhyb3cgbmV3IEVycm9yKFwiV2hlbiBtYWtpbmcgYSBzY2FsYXIgZnJvbSBlbmNvZGVkIHN0cmluZywgdGhlIHZhbHVlIG11c3QgYmUgYFVpbnQ4QXJyYXlgLlwiKTtyZXR1cm4gX24odCxbXSxbXSxlKX1mdW5jdGlvbiBNbih0LGUpe1IodCk7dmFyIG49cG4odCxlKTtpZigxIT09bi5sZW5ndGgpdGhyb3cgbmV3IEVycm9yKFwidGVuc29yMWQoKSByZXF1aXJlcyB2YWx1ZXMgdG8gYmUgYSBmbGF0L1R5cGVkQXJyYXlcIik7cmV0dXJuIF9uKHQsbnVsbCxuLGUpfWZ1bmN0aW9uIEJuKHQsZSxuKXtpZihSKHQpLG51bGwhPWUmJjIhPT1lLmxlbmd0aCl0aHJvdyBuZXcgRXJyb3IoXCJ0ZW5zb3IyZCgpIHJlcXVpcmVzIHNoYXBlIHRvIGhhdmUgdHdvIG51bWJlcnNcIik7dmFyIHI9cG4odCxuKTtpZigyIT09ci5sZW5ndGgmJjEhPT1yLmxlbmd0aCl0aHJvdyBuZXcgRXJyb3IoXCJ0ZW5zb3IyZCgpIHJlcXVpcmVzIHZhbHVlcyB0byBiZSBudW1iZXJbXVtdIG9yIGZsYXQvVHlwZWRBcnJheVwiKTtpZigxPT09ci5sZW5ndGgmJm51bGw9PWUpdGhyb3cgbmV3IEVycm9yKFwidGVuc29yMmQoKSByZXF1aXJlcyBzaGFwZSB0byBiZSBwcm92aWRlZCB3aGVuIGB2YWx1ZXNgIGFyZSBhIGZsYXQvVHlwZWRBcnJheVwiKTtyZXR1cm4gX24odCxlLHIsbil9ZnVuY3Rpb24gUG4odCxlLG4pe2lmKFIodCksbnVsbCE9ZSYmMyE9PWUubGVuZ3RoKXRocm93IG5ldyBFcnJvcihcInRlbnNvcjNkKCkgcmVxdWlyZXMgc2hhcGUgdG8gaGF2ZSB0aHJlZSBudW1iZXJzXCIpO3ZhciByPXBuKHQsbik7aWYoMyE9PXIubGVuZ3RoJiYxIT09ci5sZW5ndGgpdGhyb3cgbmV3IEVycm9yKFwidGVuc29yM2QoKSByZXF1aXJlcyB2YWx1ZXMgdG8gYmUgbnVtYmVyW11bXVtdIG9yIGZsYXQvVHlwZWRBcnJheVwiKTtpZigxPT09ci5sZW5ndGgmJm51bGw9PWUpdGhyb3cgbmV3IEVycm9yKFwidGVuc29yM2QoKSByZXF1aXJlcyBzaGFwZSB0byBiZSBwcm92aWRlZCB3aGVuIGB2YWx1ZXNgIGFyZSBhIGZsYXQgYXJyYXlcIik7cmV0dXJuIF9uKHQsZSxyLG4pfWZ1bmN0aW9uIExuKHQsZSxuKXtpZihSKHQpLG51bGwhPWUmJjQhPT1lLmxlbmd0aCl0aHJvdyBuZXcgRXJyb3IoXCJ0ZW5zb3I0ZCgpIHJlcXVpcmVzIHNoYXBlIHRvIGhhdmUgZm91ciBudW1iZXJzXCIpO3ZhciByPXBuKHQsbik7aWYoNCE9PXIubGVuZ3RoJiYxIT09ci5sZW5ndGgpdGhyb3cgbmV3IEVycm9yKFwidGVuc29yNGQoKSByZXF1aXJlcyB2YWx1ZXMgdG8gYmUgbnVtYmVyW11bXVtdW10gb3IgZmxhdC9UeXBlZEFycmF5XCIpO2lmKDE9PT1yLmxlbmd0aCYmbnVsbD09ZSl0aHJvdyBuZXcgRXJyb3IoXCJ0ZW5zb3I0ZCgpIHJlcXVpcmVzIHNoYXBlIHRvIGJlIHByb3ZpZGVkIHdoZW4gYHZhbHVlc2AgYXJlIGEgZmxhdCBhcnJheVwiKTtyZXR1cm4gX24odCxlLHIsbil9ZnVuY3Rpb24gV24odCxlLG4pe2lmKFIodCksbnVsbCE9ZSYmNSE9PWUubGVuZ3RoKXRocm93IG5ldyBFcnJvcihcInRlbnNvcjVkKCkgcmVxdWlyZXMgc2hhcGUgdG8gaGF2ZSBmaXZlIG51bWJlcnNcIik7dmFyIHI9cG4odCxuKTtpZig1IT09ci5sZW5ndGgmJjEhPT1yLmxlbmd0aCl0aHJvdyBuZXcgRXJyb3IoXCJ0ZW5zb3I1ZCgpIHJlcXVpcmVzIHZhbHVlcyB0byBiZSBudW1iZXJbXVtdW11bXVtdIG9yIGZsYXQvVHlwZWRBcnJheVwiKTtpZigxPT09ci5sZW5ndGgmJm51bGw9PWUpdGhyb3cgbmV3IEVycm9yKFwidGVuc29yNWQoKSByZXF1aXJlcyBzaGFwZSB0byBiZSBwcm92aWRlZCB3aGVuIGB2YWx1ZXNgIGFyZSBhIGZsYXQgYXJyYXlcIik7cmV0dXJuIF9uKHQsZSxyLG4pfWZ1bmN0aW9uIFVuKHQsZSxuKXtpZihSKHQpLG51bGwhPWUmJjYhPT1lLmxlbmd0aCl0aHJvdyBuZXcgRXJyb3IoXCJ0ZW5zb3I2ZCgpIHJlcXVpcmVzIHNoYXBlIHRvIGhhdmUgc2l4IG51bWJlcnNcIik7dmFyIHI9cG4odCxuKTtpZig2IT09ci5sZW5ndGgmJjEhPT1yLmxlbmd0aCl0aHJvdyBuZXcgRXJyb3IoXCJ0ZW5zb3I2ZCgpIHJlcXVpcmVzIHZhbHVlcyB0byBiZSBudW1iZXJbXVtdW11bXVtdW10gb3IgZmxhdC9UeXBlZEFycmF5XCIpO2lmKDE9PT1yLmxlbmd0aCYmbnVsbD09ZSl0aHJvdyBuZXcgRXJyb3IoXCJ0ZW5zb3I2ZCgpIHJlcXVpcmVzIHNoYXBlIHRvIGJlIHByb3ZpZGVkIHdoZW4gYHZhbHVlc2AgYXJlIGEgZmxhdCBhcnJheVwiKTtyZXR1cm4gX24odCxlPWV8fHIscixuKX1mdW5jdGlvbiBWbih0LGUsbixyKXtyZXR1cm4gdm9pZCAwPT09ZSYmKGU9ITApLEx0Lm1ha2VWYXJpYWJsZSh0LGUsbixyKX1mdW5jdGlvbiB6bih0LGUpe2lmKHZvaWQgMD09PWUmJihlPVwiZmxvYXQzMlwiKSxcImNvbXBsZXg2NFwiPT09ZSl7dmFyIG49em4odCxcImZsb2F0MzJcIikscj1Hbih0LFwiZmxvYXQzMlwiKTtyZXR1cm4gRG4obixyKX12YXIgbz1aKGsodCksZSk7cmV0dXJuIEx0Lm1ha2VUZW5zb3Iobyx0LGUpfWZ1bmN0aW9uIEduKHQsZSl7aWYodm9pZCAwPT09ZSYmKGU9XCJmbG9hdDMyXCIpLFwiY29tcGxleDY0XCI9PT1lKXt2YXIgbj1Hbih0LFwiZmxvYXQzMlwiKSxyPUduKHQsXCJmbG9hdDMyXCIpO3JldHVybiBEbihuLHIpfXZhciBvPXR0KGsodCksZSk7cmV0dXJuIEx0Lm1ha2VUZW5zb3Iobyx0LGUpfWZ1bmN0aW9uIEhuKHQsZSxuKXtyZXR1cm4gTHQucnVuS2VybmVsRnVuYygoZnVuY3Rpb24ocil7cmV0dXJuIHIuZmlsbCh0LGUsbil9KSx7fSl9ZnVuY3Rpb24gcW4odCxlLG4pe2lmKG48PTApdGhyb3cgbmV3IEVycm9yKFwiVGhlIG51bWJlciBvZiB2YWx1ZXMgc2hvdWxkIGJlIHBvc2l0aXZlLlwiKTtyZXR1cm4gTHQucnVuS2VybmVsRnVuYygoZnVuY3Rpb24ocil7cmV0dXJuIHIubGluc3BhY2UodCxlLG4pfSkse30pfWZ1bmN0aW9uIEtuKHQsZSxuLHIpe2lmKHZvaWQgMD09PW4mJihuPTEpLHZvaWQgMD09PXImJihyPVwiZmxvYXQzMlwiKSwwPT09bil0aHJvdyBuZXcgRXJyb3IoXCJDYW5ub3QgaGF2ZSBhIHN0ZXAgb2YgemVyb1wiKTtpZih0PT09ZXx8dDxlJiZuPDB8fGU8dCYmbj4xKXJldHVybiBHbihbMF0scik7dmFyIG89dHQoTWF0aC5hYnMoTWF0aC5jZWlsKChlLXQpL24pKSxyKTtlPHQmJjE9PT1uJiYobj0tMSksb1swXT10O2Zvcih2YXIgYT0xO2E8by5sZW5ndGg7YSsrKW9bYV09b1thLTFdK247cmV0dXJuIE1uKG8scil9dmFyIGpuPUFuKHtvbmVzTGlrZV86ZnVuY3Rpb24odCl7dmFyIGU9bW4odCxcInhcIixcIm9uZXNMaWtlXCIpO2lmKFwiY29tcGxleDY0XCI9PT1lLmR0eXBlKXt2YXIgbj1qbihUbihlKSkscj1YbihObihlKSk7cmV0dXJuIERuKG4scil9cmV0dXJuIEx0LnJ1bktlcm5lbEZ1bmMoKGZ1bmN0aW9uKHQpe3JldHVybiB0Lm9uZXNMaWtlKGUpfSkseyR4OmV9LChmdW5jdGlvbih0LGUpe3JldHVybnskeDpmdW5jdGlvbigpe3JldHVybiBYbih0KX19fSkpfX0pLFhuPUFuKHt6ZXJvc0xpa2VfOmZ1bmN0aW9uKHQpe3ZhciBlPW1uKHQsXCJ4XCIsXCJ6ZXJvc0xpa2VcIik7cmV0dXJuIEx0LnJ1bktlcm5lbEZ1bmMoKGZ1bmN0aW9uKHQpe3JldHVybiB0Lnplcm9zTGlrZShlKX0pLHskeDplfSwoZnVuY3Rpb24odCxlKXtyZXR1cm57JHg6ZnVuY3Rpb24oKXtyZXR1cm4gWG4odCl9fX0pKX19KTt2YXIgWW49QW4oe2NvbmNhdF86ZnVuY3Rpb24odCxlKXt2b2lkIDA9PT1lJiYoZT0wKSxDKHQubGVuZ3RoPj0xLChmdW5jdGlvbigpe3JldHVyblwiUGFzcyBhdCBsZWFzdCBvbmUgdGVuc29yIHRvIGNvbmNhdFwifSkpO3ZhciBuPWduKHQsXCJ0ZW5zb3JzXCIsXCJjb25jYXRcIik7XCJjb21wbGV4NjRcIj09PW5bMF0uZHR5cGUmJm4uZm9yRWFjaCgoZnVuY3Rpb24odCl7aWYoXCJjb21wbGV4NjRcIiE9PXQuZHR5cGUpdGhyb3cgbmV3IEVycm9yKFwiQ2Fubm90IGNvbmNhdGVuYXRlIGNvbXBsZXg2NCB0ZW5zb3JzIHdpdGggYSB0ZW5zb3JcXG4gICAgICAgICAgd2l0aCBkdHlwZSBcIit0LmR0eXBlK1wiLiBcIil9KSksZT1PKGUsblswXS5zaGFwZSlbMF07dmFyIHI9U24obi5tYXAoKGZ1bmN0aW9uKHQpe3JldHVybiB0LnNoYXBlfSkpLGUpO2lmKDA9PT1rKHIpKXJldHVybiBGbihbXSxyKTtpZigxPT09KG49bi5maWx0ZXIoKGZ1bmN0aW9uKHQpe3JldHVybiB0LnNpemU+MH0pKSkubGVuZ3RoKXJldHVybiBuWzBdO3ZhciBvPW4ubWFwKChmdW5jdGlvbih0KXtyZXR1cm4gdC5zaGFwZX0pKTtrbihvLGUpO3ZhciBhPW4saT17YXhpczplfTtyZXR1cm4gTHQucnVuS2VybmVsRnVuYygoZnVuY3Rpb24odCl7cmV0dXJuIHQuY29uY2F0KG4sZSl9KSxhLChmdW5jdGlvbih0KXt2YXIgbj1vLm1hcCgoZnVuY3Rpb24odCl7cmV0dXJuIHRbZV19KSk7cmV0dXJuIHRyKHQsbixlKS5tYXAoKGZ1bmN0aW9uKHQpe3JldHVybiBmdW5jdGlvbigpe3JldHVybiB0fX0pKX0pLFwiQ29uY2F0XCIsaSl9fSksJG49QW4oe2NvbmNhdDFkXzpmdW5jdGlvbih0KXtyZXR1cm4gWW4odCwwKX19KSxRbj1Bbih7Y29uY2F0MmRfOmZ1bmN0aW9uKHQsZSl7cmV0dXJuIFluKHQsZSl9fSksSm49QW4oe2NvbmNhdDNkXzpmdW5jdGlvbih0LGUpe3JldHVybiBZbih0LGUpfX0pLFpuPUFuKHtjb25jYXQ0ZF86ZnVuY3Rpb24odCxlKXtyZXR1cm4gWW4odCxlKX19KSx0cj1Bbih7c3BsaXRfOmZ1bmN0aW9uKHQsZSxuKXt2b2lkIDA9PT1uJiYobj0wKTt2YXIgcixvPW1uKHQsXCJ4XCIsXCJzcGxpdFwiKTtyZXR1cm4gbj1PKG4sby5zaGFwZSlbMF0sXCJudW1iZXJcIj09dHlwZW9mIGU/KEMoby5zaGFwZVtuXSVlPT0wLChmdW5jdGlvbigpe3JldHVyblwiTnVtYmVyIG9mIHNwbGl0cyBtdXN0IGV2ZW5seSBkaXZpZGUgdGhlIGF4aXMuXCJ9KSkscj1uZXcgQXJyYXkoZSkuZmlsbChvLnNoYXBlW25dL2UpKTooQyhvLnNoYXBlW25dPT09ZS5yZWR1Y2UoKGZ1bmN0aW9uKHQsZSl7cmV0dXJuIHQrZX0pKSwoZnVuY3Rpb24oKXtyZXR1cm5cIlRoZSBzdW0gb2Ygc2l6ZXMgbXVzdCBtYXRjaCB0aGUgc2l6ZSBvZiB0aGUgYXhpcyBkaW1lbnNpb24uXCJ9KSkscj1lKSxMdC5ydW5LZXJuZWxGdW5jKChmdW5jdGlvbih0KXtyZXR1cm4gdC5zcGxpdChvLHIsbil9KSx7JHg6b30sKGZ1bmN0aW9uKHQpe3JldHVybnskeDpmdW5jdGlvbigpe3JldHVybiBZbih0LG4pfX19KSl9fSk7XCJ1bmRlZmluZWRcIiE9dHlwZW9mIGdsb2JhbFRoaXM/Z2xvYmFsVGhpczpcInVuZGVmaW5lZFwiIT10eXBlb2Ygd2luZG93P3dpbmRvdzpcInVuZGVmaW5lZFwiIT10eXBlb2YgZ2xvYmFsP2dsb2JhbDpcInVuZGVmaW5lZFwiIT10eXBlb2Ygc2VsZiYmc2VsZjtmdW5jdGlvbiBlcih0LGUpe3JldHVybiB0KGU9e2V4cG9ydHM6e319LGUuZXhwb3J0cyksZS5leHBvcnRzfXZhciBucj1lcigoZnVuY3Rpb24odCl7IWZ1bmN0aW9uKHQsZSxuKXtmdW5jdGlvbiByKHQpe3ZhciBlLG49dGhpcyxyPShlPTQwMjI4NzExOTcsZnVuY3Rpb24odCl7dD10LnRvU3RyaW5nKCk7Zm9yKHZhciBuPTA7bjx0Lmxlbmd0aDtuKyspe3ZhciByPS4wMjUxOTYwMzI4MjQxNjkzOCooZSs9dC5jaGFyQ29kZUF0KG4pKTtyLT1lPXI+Pj4wLGU9KHIqPWUpPj4+MCxlKz00Mjk0OTY3Mjk2KihyLT1lKX1yZXR1cm4gMi4zMjgzMDY0MzY1Mzg2OTYzZS0xMCooZT4+PjApfSk7bi5uZXh0PWZ1bmN0aW9uKCl7dmFyIHQ9MjA5MTYzOSpuLnMwKzIuMzI4MzA2NDM2NTM4Njk2M2UtMTAqbi5jO3JldHVybiBuLnMwPW4uczEsbi5zMT1uLnMyLG4uczI9dC0obi5jPTB8dCl9LG4uYz0xLG4uczA9cihcIiBcIiksbi5zMT1yKFwiIFwiKSxuLnMyPXIoXCIgXCIpLG4uczAtPXIodCksbi5zMDwwJiYobi5zMCs9MSksbi5zMS09cih0KSxuLnMxPDAmJihuLnMxKz0xKSxuLnMyLT1yKHQpLG4uczI8MCYmKG4uczIrPTEpLHI9bnVsbH1mdW5jdGlvbiBvKHQsZSl7cmV0dXJuIGUuYz10LmMsZS5zMD10LnMwLGUuczE9dC5zMSxlLnMyPXQuczIsZX1mdW5jdGlvbiBhKHQsZSl7dmFyIG49bmV3IHIodCksYT1lJiZlLnN0YXRlLGk9bi5uZXh0O3JldHVybiBpLmludDMyPWZ1bmN0aW9uKCl7cmV0dXJuIDQyOTQ5NjcyOTYqbi5uZXh0KCl8MH0saS5kb3VibGU9ZnVuY3Rpb24oKXtyZXR1cm4gaSgpKzExMTAyMjMwMjQ2MjUxNTY1ZS0zMiooMjA5NzE1MippKCl8MCl9LGkucXVpY2s9aSxhJiYoXCJvYmplY3RcIj09dHlwZW9mIGEmJm8oYSxuKSxpLnN0YXRlPWZ1bmN0aW9uKCl7cmV0dXJuIG8obix7fSl9KSxpfWUmJmUuZXhwb3J0cz9lLmV4cG9ydHM9YTpuJiZuLmFtZD9uKChmdW5jdGlvbigpe3JldHVybiBhfSkpOnRoaXMuYWxlYT1hfSgwLHQsITEpfSkpLHJyPWVyKChmdW5jdGlvbih0KXshZnVuY3Rpb24odCxlLG4pe2Z1bmN0aW9uIHIodCl7dmFyIGU9dGhpcyxuPVwiXCI7ZS54PTAsZS55PTAsZS56PTAsZS53PTAsZS5uZXh0PWZ1bmN0aW9uKCl7dmFyIHQ9ZS54XmUueDw8MTE7cmV0dXJuIGUueD1lLnksZS55PWUueixlLno9ZS53LGUud149ZS53Pj4+MTledF50Pj4+OH0sdD09PSgwfHQpP2UueD10Om4rPXQ7Zm9yKHZhciByPTA7cjxuLmxlbmd0aCs2NDtyKyspZS54Xj0wfG4uY2hhckNvZGVBdChyKSxlLm5leHQoKX1mdW5jdGlvbiBvKHQsZSl7cmV0dXJuIGUueD10LngsZS55PXQueSxlLno9dC56LGUudz10LncsZX1mdW5jdGlvbiBhKHQsZSl7dmFyIG49bmV3IHIodCksYT1lJiZlLnN0YXRlLGk9ZnVuY3Rpb24oKXtyZXR1cm4obi5uZXh0KCk+Pj4wKS80Mjk0OTY3Mjk2fTtyZXR1cm4gaS5kb3VibGU9ZnVuY3Rpb24oKXtkb3t2YXIgdD0oKG4ubmV4dCgpPj4+MTEpKyhuLm5leHQoKT4+PjApLzQyOTQ5NjcyOTYpLygxPDwyMSl9d2hpbGUoMD09PXQpO3JldHVybiB0fSxpLmludDMyPW4ubmV4dCxpLnF1aWNrPWksYSYmKFwib2JqZWN0XCI9PXR5cGVvZiBhJiZvKGEsbiksaS5zdGF0ZT1mdW5jdGlvbigpe3JldHVybiBvKG4se30pfSksaX1lJiZlLmV4cG9ydHM/ZS5leHBvcnRzPWE6biYmbi5hbWQ/bigoZnVuY3Rpb24oKXtyZXR1cm4gYX0pKTp0aGlzLnhvcjEyOD1hfSgwLHQsITEpfSkpLG9yPWVyKChmdW5jdGlvbih0KXshZnVuY3Rpb24odCxlLG4pe2Z1bmN0aW9uIHIodCl7dmFyIGU9dGhpcyxuPVwiXCI7ZS5uZXh0PWZ1bmN0aW9uKCl7dmFyIHQ9ZS54XmUueD4+PjI7cmV0dXJuIGUueD1lLnksZS55PWUueixlLno9ZS53LGUudz1lLnYsKGUuZD1lLmQrMzYyNDM3fDApKyhlLnY9ZS52XmUudjw8NF50XnQ8PDEpfDB9LGUueD0wLGUueT0wLGUuej0wLGUudz0wLGUudj0wLHQ9PT0oMHx0KT9lLng9dDpuKz10O2Zvcih2YXIgcj0wO3I8bi5sZW5ndGgrNjQ7cisrKWUueF49MHxuLmNoYXJDb2RlQXQocikscj09bi5sZW5ndGgmJihlLmQ9ZS54PDwxMF5lLng+Pj40KSxlLm5leHQoKX1mdW5jdGlvbiBvKHQsZSl7cmV0dXJuIGUueD10LngsZS55PXQueSxlLno9dC56LGUudz10LncsZS52PXQudixlLmQ9dC5kLGV9ZnVuY3Rpb24gYSh0LGUpe3ZhciBuPW5ldyByKHQpLGE9ZSYmZS5zdGF0ZSxpPWZ1bmN0aW9uKCl7cmV0dXJuKG4ubmV4dCgpPj4+MCkvNDI5NDk2NzI5Nn07cmV0dXJuIGkuZG91YmxlPWZ1bmN0aW9uKCl7ZG97dmFyIHQ9KChuLm5leHQoKT4+PjExKSsobi5uZXh0KCk+Pj4wKS80Mjk0OTY3Mjk2KS8oMTw8MjEpfXdoaWxlKDA9PT10KTtyZXR1cm4gdH0saS5pbnQzMj1uLm5leHQsaS5xdWljaz1pLGEmJihcIm9iamVjdFwiPT10eXBlb2YgYSYmbyhhLG4pLGkuc3RhdGU9ZnVuY3Rpb24oKXtyZXR1cm4gbyhuLHt9KX0pLGl9ZSYmZS5leHBvcnRzP2UuZXhwb3J0cz1hOm4mJm4uYW1kP24oKGZ1bmN0aW9uKCl7cmV0dXJuIGF9KSk6dGhpcy54b3J3b3c9YX0oMCx0LCExKX0pKSxhcj1lcigoZnVuY3Rpb24odCl7IWZ1bmN0aW9uKHQsZSxuKXtmdW5jdGlvbiByKHQpe3ZhciBlPXRoaXM7ZS5uZXh0PWZ1bmN0aW9uKCl7dmFyIHQsbixyPWUueCxvPWUuaTtyZXR1cm4gdD1yW29dLG49KHRePXQ+Pj43KV50PDwyNCxuXj0odD1yW28rMSY3XSledD4+PjEwLG5ePSh0PXJbbyszJjddKV50Pj4+MyxuXj0odD1yW28rNCY3XSledDw8Nyx0PXJbbys3JjddLG5ePSh0Xj10PDwxMyledDw8OSxyW29dPW4sZS5pPW8rMSY3LG59LGZ1bmN0aW9uKHQsZSl7dmFyIG4scj1bXTtpZihlPT09KDB8ZSkpclswXT1lO2Vsc2UgZm9yKGU9XCJcIitlLG49MDtuPGUubGVuZ3RoOysrbilyWzcmbl09cls3Jm5dPDwxNV5lLmNoYXJDb2RlQXQobikrcltuKzEmN108PDEzO2Zvcig7ci5sZW5ndGg8ODspci5wdXNoKDApO2ZvcihuPTA7bjw4JiYwPT09cltuXTsrK24pO2Zvcig4PT1uP3JbN109LTE6cltuXSx0Lng9cix0Lmk9MCxuPTI1NjtuPjA7LS1uKXQubmV4dCgpfShlLHQpfWZ1bmN0aW9uIG8odCxlKXtyZXR1cm4gZS54PXQueC5zbGljZSgpLGUuaT10LmksZX1mdW5jdGlvbiBhKHQsZSl7bnVsbD09dCYmKHQ9K25ldyBEYXRlKTt2YXIgbj1uZXcgcih0KSxhPWUmJmUuc3RhdGUsaT1mdW5jdGlvbigpe3JldHVybihuLm5leHQoKT4+PjApLzQyOTQ5NjcyOTZ9O3JldHVybiBpLmRvdWJsZT1mdW5jdGlvbigpe2Rve3ZhciB0PSgobi5uZXh0KCk+Pj4xMSkrKG4ubmV4dCgpPj4+MCkvNDI5NDk2NzI5NikvKDE8PDIxKX13aGlsZSgwPT09dCk7cmV0dXJuIHR9LGkuaW50MzI9bi5uZXh0LGkucXVpY2s9aSxhJiYoYS54JiZvKGEsbiksaS5zdGF0ZT1mdW5jdGlvbigpe3JldHVybiBvKG4se30pfSksaX1lJiZlLmV4cG9ydHM/ZS5leHBvcnRzPWE6biYmbi5hbWQ/bigoZnVuY3Rpb24oKXtyZXR1cm4gYX0pKTp0aGlzLnhvcnNoaWZ0Nz1hfSgwLHQsITEpfSkpLGlyPWVyKChmdW5jdGlvbih0KXshZnVuY3Rpb24odCxlLG4pe2Z1bmN0aW9uIHIodCl7dmFyIGU9dGhpcztlLm5leHQ9ZnVuY3Rpb24oKXt2YXIgdCxuLHI9ZS53LG89ZS5YLGE9ZS5pO3JldHVybiBlLnc9cj1yKzE2NDA1MzE1Mjd8MCxuPW9bYSszNCYxMjddLHQ9b1thPWErMSYxMjddLG5ePW48PDEzLHRePXQ8PDE3LG5ePW4+Pj4xNSx0Xj10Pj4+MTIsbj1vW2FdPW5edCxlLmk9YSxuKyhyXnI+Pj4xNil8MH0sZnVuY3Rpb24odCxlKXt2YXIgbixyLG8sYSxpLHM9W10sdT0xMjg7Zm9yKGU9PT0oMHxlKT8ocj1lLGU9bnVsbCk6KGUrPVwiXFwwXCIscj0wLHU9TWF0aC5tYXgodSxlLmxlbmd0aCkpLG89MCxhPS0zMjthPHU7KythKWUmJihyXj1lLmNoYXJDb2RlQXQoKGErMzIpJWUubGVuZ3RoKSksMD09PWEmJihpPXIpLHJePXI8PDEwLHJePXI+Pj4xNSxyXj1yPDw0LHJePXI+Pj4xMyxhPj0wJiYoaT1pKzE2NDA1MzE1Mjd8MCxvPTA9PShuPXNbMTI3JmFdXj1yK2kpP28rMTowKTtmb3Iobz49MTI4JiYoc1sxMjcmKGUmJmUubGVuZ3RofHwwKV09LTEpLG89MTI3LGE9NTEyO2E+MDstLWEpcj1zW28rMzQmMTI3XSxuPXNbbz1vKzEmMTI3XSxyXj1yPDwxMyxuXj1uPDwxNyxyXj1yPj4+MTUsbl49bj4+PjEyLHNbb109cl5uO3Qudz1pLHQuWD1zLHQuaT1vfShlLHQpfWZ1bmN0aW9uIG8odCxlKXtyZXR1cm4gZS5pPXQuaSxlLnc9dC53LGUuWD10Llguc2xpY2UoKSxlfWZ1bmN0aW9uIGEodCxlKXtudWxsPT10JiYodD0rbmV3IERhdGUpO3ZhciBuPW5ldyByKHQpLGE9ZSYmZS5zdGF0ZSxpPWZ1bmN0aW9uKCl7cmV0dXJuKG4ubmV4dCgpPj4+MCkvNDI5NDk2NzI5Nn07cmV0dXJuIGkuZG91YmxlPWZ1bmN0aW9uKCl7ZG97dmFyIHQ9KChuLm5leHQoKT4+PjExKSsobi5uZXh0KCk+Pj4wKS80Mjk0OTY3Mjk2KS8oMTw8MjEpfXdoaWxlKDA9PT10KTtyZXR1cm4gdH0saS5pbnQzMj1uLm5leHQsaS5xdWljaz1pLGEmJihhLlgmJm8oYSxuKSxpLnN0YXRlPWZ1bmN0aW9uKCl7cmV0dXJuIG8obix7fSl9KSxpfWUmJmUuZXhwb3J0cz9lLmV4cG9ydHM9YTpuJiZuLmFtZD9uKChmdW5jdGlvbigpe3JldHVybiBhfSkpOnRoaXMueG9yNDA5Nj1hfSgwLHQsITEpfSkpLHNyPWVyKChmdW5jdGlvbih0KXshZnVuY3Rpb24odCxlLG4pe2Z1bmN0aW9uIHIodCl7dmFyIGU9dGhpcyxuPVwiXCI7ZS5uZXh0PWZ1bmN0aW9uKCl7dmFyIHQ9ZS5iLG49ZS5jLHI9ZS5kLG89ZS5hO3JldHVybiB0PXQ8PDI1XnQ+Pj43Xm4sbj1uLXJ8MCxyPXI8PDI0XnI+Pj44Xm8sbz1vLXR8MCxlLmI9dD10PDwyMF50Pj4+MTJebixlLmM9bj1uLXJ8MCxlLmQ9cjw8MTZebj4+PjE2Xm8sZS5hPW8tdHwwfSxlLmE9MCxlLmI9MCxlLmM9LTE2NDA1MzE1MjcsZS5kPTEzNjcxMzA1NTEsdD09PU1hdGguZmxvb3IodCk/KGUuYT10LzQyOTQ5NjcyOTZ8MCxlLmI9MHx0KTpuKz10O2Zvcih2YXIgcj0wO3I8bi5sZW5ndGgrMjA7cisrKWUuYl49MHxuLmNoYXJDb2RlQXQociksZS5uZXh0KCl9ZnVuY3Rpb24gbyh0LGUpe3JldHVybiBlLmE9dC5hLGUuYj10LmIsZS5jPXQuYyxlLmQ9dC5kLGV9ZnVuY3Rpb24gYSh0LGUpe3ZhciBuPW5ldyByKHQpLGE9ZSYmZS5zdGF0ZSxpPWZ1bmN0aW9uKCl7cmV0dXJuKG4ubmV4dCgpPj4+MCkvNDI5NDk2NzI5Nn07cmV0dXJuIGkuZG91YmxlPWZ1bmN0aW9uKCl7ZG97dmFyIHQ9KChuLm5leHQoKT4+PjExKSsobi5uZXh0KCk+Pj4wKS80Mjk0OTY3Mjk2KS8oMTw8MjEpfXdoaWxlKDA9PT10KTtyZXR1cm4gdH0saS5pbnQzMj1uLm5leHQsaS5xdWljaz1pLGEmJihcIm9iamVjdFwiPT10eXBlb2YgYSYmbyhhLG4pLGkuc3RhdGU9ZnVuY3Rpb24oKXtyZXR1cm4gbyhuLHt9KX0pLGl9ZSYmZS5leHBvcnRzP2UuZXhwb3J0cz1hOm4mJm4uYW1kP24oKGZ1bmN0aW9uKCl7cmV0dXJuIGF9KSk6dGhpcy50eWNoZWk9YX0oMCx0LCExKX0pKSx1cj1lcigoZnVuY3Rpb24odCl7IWZ1bmN0aW9uKGUsbil7dmFyIHIsbz10aGlzLGE9MjU2LGk9NixzPVwicmFuZG9tXCIsdT1uLnBvdyhhLGkpLGM9bi5wb3coMiw1MiksbD0yKmMsaD1hLTE7ZnVuY3Rpb24gZih0LGgsZil7dmFyIGc9W10seT12KGZ1bmN0aW9uIHQoZSxuKXt2YXIgcixvPVtdLGE9dHlwZW9mIGU7aWYobiYmXCJvYmplY3RcIj09YSlmb3IociBpbiBlKXRyeXtvLnB1c2godChlW3JdLG4tMSkpfWNhdGNoKHQpe31yZXR1cm4gby5sZW5ndGg/bzpcInN0cmluZ1wiPT1hP2U6ZStcIlxcMFwifSgoaD0xPT1oP3tlbnRyb3B5OiEwfTpofHx7fSkuZW50cm9weT9bdCxtKGUpXTpudWxsPT10P2Z1bmN0aW9uKCl7dHJ5e3ZhciB0O3JldHVybiByJiYodD1yLnJhbmRvbUJ5dGVzKT90PXQoYSk6KHQ9bmV3IFVpbnQ4QXJyYXkoYSksKG8uY3J5cHRvfHxvLm1zQ3J5cHRvKS5nZXRSYW5kb21WYWx1ZXModCkpLG0odCl9Y2F0Y2godCl7dmFyIG49by5uYXZpZ2F0b3IsaT1uJiZuLnBsdWdpbnM7cmV0dXJuWytuZXcgRGF0ZSxvLGksby5zY3JlZW4sbShlKV19fSgpOnQsMyksZykseD1uZXcgZChnKSxiPWZ1bmN0aW9uKCl7Zm9yKHZhciB0PXguZyhpKSxlPXUsbj0wO3Q8YzspdD0odCtuKSphLGUqPWEsbj14LmcoMSk7Zm9yKDt0Pj1sOyl0Lz0yLGUvPTIsbj4+Pj0xO3JldHVybih0K24pL2V9O3JldHVybiBiLmludDMyPWZ1bmN0aW9uKCl7cmV0dXJuIDB8eC5nKDQpfSxiLnF1aWNrPWZ1bmN0aW9uKCl7cmV0dXJuIHguZyg0KS80Mjk0OTY3Mjk2fSxiLmRvdWJsZT1iLHYobSh4LlMpLGUpLChoLnBhc3N8fGZ8fGZ1bmN0aW9uKHQsZSxyLG8pe3JldHVybiBvJiYoby5TJiZwKG8seCksdC5zdGF0ZT1mdW5jdGlvbigpe3JldHVybiBwKHgse30pfSkscj8obltzXT10LGUpOnR9KShiLHksXCJnbG9iYWxcImluIGg/aC5nbG9iYWw6dGhpcz09bixoLnN0YXRlKX1mdW5jdGlvbiBkKHQpe3ZhciBlLG49dC5sZW5ndGgscj10aGlzLG89MCxpPXIuaT1yLmo9MCxzPXIuUz1bXTtmb3Iobnx8KHQ9W24rK10pO288YTspc1tvXT1vKys7Zm9yKG89MDtvPGE7bysrKXNbb109c1tpPWgmaSt0W28lbl0rKGU9c1tvXSldLHNbaV09ZTsoci5nPWZ1bmN0aW9uKHQpe2Zvcih2YXIgZSxuPTAsbz1yLmksaT1yLmoscz1yLlM7dC0tOyllPXNbbz1oJm8rMV0sbj1uKmErc1toJihzW29dPXNbaT1oJmkrZV0pKyhzW2ldPWUpXTtyZXR1cm4gci5pPW8sci5qPWksbn0pKGEpfWZ1bmN0aW9uIHAodCxlKXtyZXR1cm4gZS5pPXQuaSxlLmo9dC5qLGUuUz10LlMuc2xpY2UoKSxlfWZ1bmN0aW9uIHYodCxlKXtmb3IodmFyIG4scj10K1wiXCIsbz0wO288ci5sZW5ndGg7KWVbaCZvXT1oJihuXj0xOSplW2gmb10pK3IuY2hhckNvZGVBdChvKyspO3JldHVybiBtKGUpfWZ1bmN0aW9uIG0odCl7cmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkoMCx0KX1pZihuW1wic2VlZFwiK3NdPWYsdihuLnJhbmRvbSgpLGUpLHQuZXhwb3J0cyl7dC5leHBvcnRzPWY7dHJ5e3I9cmVxdWlyZShcImNyeXB0b1wiKX1jYXRjaCh0KXt9fX0oW10sTWF0aCl9KSk7dXIuYWxlYT1ucix1ci54b3IxMjg9cnIsdXIueG9yd293PW9yLHVyLnhvcnNoaWZ0Nz1hcix1ci54b3I0MDk2PWlyLHVyLnR5Y2hlaT1zcjt2YXIgY3I9dXIuYWxlYSxscj1mdW5jdGlvbigpe2Z1bmN0aW9uIHQodCxlLG4scixvKXt0aGlzLm1lYW49dCx0aGlzLnN0ZERldj1lLHRoaXMuZHR5cGU9bix0aGlzLm5leHRWYWw9TmFOLHRoaXMudHJ1bmNhdGVkPXIsdGhpcy50cnVuY2F0ZWQmJih0aGlzLnVwcGVyPXRoaXMubWVhbisyKnRoaXMuc3RkRGV2LHRoaXMubG93ZXI9dGhpcy5tZWFuLTIqdGhpcy5zdGREZXYpO3ZhciBhPW98fE1hdGgucmFuZG9tKCk7dGhpcy5yYW5kb209Y3IoYS50b1N0cmluZygpKX1yZXR1cm4gdC5wcm90b3R5cGUubmV4dFZhbHVlPWZ1bmN0aW9uKCl7aWYoIWlzTmFOKHRoaXMubmV4dFZhbCkpe3ZhciB0PXRoaXMubmV4dFZhbDtyZXR1cm4gdGhpcy5uZXh0VmFsPU5hTix0fWZvcih2YXIgZSxuLHI9ITE7IXI7KXt2YXIgbz12b2lkIDAsYT12b2lkIDAsaT12b2lkIDA7ZG97aT0obz0yKnRoaXMucmFuZG9tKCktMSkqbysoYT0yKnRoaXMucmFuZG9tKCktMSkqYX13aGlsZShpPj0xfHwwPT09aSk7dmFyIHM9TWF0aC5zcXJ0KC0yKk1hdGgubG9nKGkpL2kpO2U9dGhpcy5tZWFuK3RoaXMuc3RkRGV2Km8qcyxuPXRoaXMubWVhbit0aGlzLnN0ZERldiphKnMsdGhpcy50cnVuY2F0ZWQmJiF0aGlzLmlzVmFsaWRUcnVuY2F0ZWQoZSl8fChyPSEwKX1yZXR1cm4gdGhpcy50cnVuY2F0ZWQmJiF0aGlzLmlzVmFsaWRUcnVuY2F0ZWQobil8fCh0aGlzLm5leHRWYWw9dGhpcy5jb252ZXJ0VmFsdWUobikpLHRoaXMuY29udmVydFZhbHVlKGUpfSx0LnByb3RvdHlwZS5jb252ZXJ0VmFsdWU9ZnVuY3Rpb24odCl7cmV0dXJuIG51bGw9PXRoaXMuZHR5cGV8fFwiZmxvYXQzMlwiPT09dGhpcy5kdHlwZT90Ok1hdGgucm91bmQodCl9LHQucHJvdG90eXBlLmlzVmFsaWRUcnVuY2F0ZWQ9ZnVuY3Rpb24odCl7cmV0dXJuIHQ8PXRoaXMudXBwZXImJnQ+PXRoaXMubG93ZXJ9LHR9KCksaHI9ZnVuY3Rpb24oKXtmdW5jdGlvbiB0KHQsZSxuLHIpe3RoaXMuYWxwaGE9dCx0aGlzLmJldGE9MS9lLHRoaXMuZHR5cGU9bjt2YXIgbz1yfHxNYXRoLnJhbmRvbSgpO3RoaXMucmFuZHU9Y3Ioby50b1N0cmluZygpKSx0aGlzLnJhbmRuPW5ldyBscigwLDEsbiwhMSx0aGlzLnJhbmR1KCkpLHRoaXMuZD10PDE/dCsyLzM6dC0xLzMsdGhpcy5jPTEvTWF0aC5zcXJ0KDkqdGhpcy5kKX1yZXR1cm4gdC5wcm90b3R5cGUubmV4dFZhbHVlPWZ1bmN0aW9uKCl7Zm9yKHZhciB0LGUsbixyLG8sYTs7KXtkb3tyPXRoaXMucmFuZG4ubmV4dFZhbHVlKCksYT0xK3RoaXMuYypyfXdoaWxlKGE8PTApO2lmKGEqPWEqYSxlPTEtLjMzMSoodD1yKnIpKnQsbj0uNSp0K3RoaXMuZCooMS1hK01hdGgubG9nKGEpKSwobz10aGlzLnJhbmR1KCkpPGV8fE1hdGgubG9nKG8pPG4pYnJlYWt9cmV0dXJuIGE9MS90aGlzLmJldGEqdGhpcy5kKmEsdGhpcy5hbHBoYTwxJiYoYSo9TWF0aC5wb3codGhpcy5yYW5kdSgpLDEvdGhpcy5hbHBoYSkpLHRoaXMuY29udmVydFZhbHVlKGEpfSx0LnByb3RvdHlwZS5jb252ZXJ0VmFsdWU9ZnVuY3Rpb24odCl7cmV0dXJuXCJmbG9hdDMyXCI9PT10aGlzLmR0eXBlP3Q6TWF0aC5yb3VuZCh0KX0sdH0oKSxmcj1mdW5jdGlvbigpe2Z1bmN0aW9uIHQodCxlLG4scil7dmFyIG89dGhpcztpZih2b2lkIDA9PT10JiYodD0wKSx2b2lkIDA9PT1lJiYoZT0xKSx0aGlzLmNhblJldHVybkZsb2F0PWZ1bmN0aW9uKCl7cmV0dXJuIG51bGw9PW8uZHR5cGV8fFwiZmxvYXQzMlwiPT09by5kdHlwZX0sdGhpcy5taW49dCx0aGlzLnJhbmdlPWUtdCx0aGlzLmR0eXBlPW4sbnVsbD09ciYmKHI9TWF0aC5yYW5kb20oKSksXCJudW1iZXJcIj09dHlwZW9mIHImJihyPXIudG9TdHJpbmcoKSksIXRoaXMuY2FuUmV0dXJuRmxvYXQoKSYmdGhpcy5yYW5nZTw9MSl0aHJvdyBuZXcgRXJyb3IoXCJUaGUgZGlmZmVyZW5jZSBiZXR3ZWVuIFwiK3QrXCIgLSBcIitlK1wiIDw9IDEgYW5kIGR0eXBlIGlzIG5vdCBmbG9hdFwiKTt0aGlzLnJhbmRvbT1jcihyKX1yZXR1cm4gdC5wcm90b3R5cGUuY29udmVydFZhbHVlPWZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLmNhblJldHVybkZsb2F0KCk/dDpNYXRoLnJvdW5kKHQpfSx0LnByb3RvdHlwZS5uZXh0VmFsdWU9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5jb252ZXJ0VmFsdWUodGhpcy5taW4rdGhpcy5yYW5nZSp0aGlzLnJhbmRvbSgpKX0sdH0oKTtmdW5jdGlvbiBkcih0LGUsbil7cmV0dXJuIHZvaWQgMD09PWUmJihlPVwiZmxvYXQzMlwiKSxlPWV8fFwiZmxvYXQzMlwiLG50KHQpLG5ldyBndCh0LGUsbil9ZnVuY3Rpb24gcHIodCxlKXt2b2lkIDA9PT1lJiYoZT0hMSksY29uc29sZS5sb2codC50b1N0cmluZyhlKSl9dmFyIHZyPUFuKHtiYXRjaFRvU3BhY2VORF86ZnVuY3Rpb24odCxlLG4pe3ZhciByPW1uKHQsXCJ4XCIsXCJiYXRjaFRvU3BhY2VORFwiKSxvPWUucmVkdWNlKChmdW5jdGlvbih0LGUpe3JldHVybiB0KmV9KSk7cmV0dXJuIEMoci5yYW5rPj0xK2UubGVuZ3RoLChmdW5jdGlvbigpe3JldHVyblwiaW5wdXQgcmFuayBpcyBcIityLnJhbmsrXCIgYnV0IHNob3VsZCBiZSA+IHRoYW4gYmxvY2tTaGFwZS5sZW5ndGggXCIrZS5sZW5ndGh9KSksQyhuLmxlbmd0aD09PWUubGVuZ3RoLChmdW5jdGlvbigpe3JldHVyblwiY3JvcHMubGVuZ3RoIGlzIFwiK24ubGVuZ3RoK1wiIGJ1dCBzaG91bGQgYmUgZXF1YWwgdG8gYmxvY2tTaGFwZS5sZW5ndGggIFwiK2UubGVuZ3RofSkpLEMoci5zaGFwZVswXSVvPT0wLChmdW5jdGlvbigpe3JldHVyblwiaW5wdXQgdGVuc29yIGJhdGNoIGlzIFwiK3Iuc2hhcGVbMF0rXCIgYnV0IGlzIG5vdCBkaXZpc2libGUgYnkgdGhlIHByb2R1Y3Qgb2YgdGhlIGVsZW1lbnRzIG9mIGJsb2NrU2hhcGUgXCIrZS5qb2luKFwiICogXCIpK1wiID09PSBcIitvfSkpLEx0LnJ1bktlcm5lbEZ1bmMoKGZ1bmN0aW9uKHQpe3JldHVybiB0LmJhdGNoVG9TcGFjZU5EKHIsZSxuKX0pLHskeDpyfSwoZnVuY3Rpb24odCl7cmV0dXJueyR4OmZ1bmN0aW9uKCl7cmV0dXJuIHQuc3BhY2VUb0JhdGNoTkQoZSxuKX19fSkpfX0pLG1yPUFuKHticm9hZGNhc3RUb186ZnVuY3Rpb24odCxlKXt2YXIgbj1tbih0LFwiYnJvYWRjYXN0VG9cIixcInhcIikscj1uLnNoYXBlO2lmKGUuc29tZSgoZnVuY3Rpb24odCl7cmV0dXJuISh0PjApfHx0JTEhPTB9KSkpdGhyb3cgbmV3IEVycm9yKFwiYnJvYWRjYXN0VG8oKTogSW52YWxpZCBicm9hZGNhc3Qgc2hhcGUgW1wiK2UrXCJdLlwiKTtpZihlLmxlbmd0aDxuLnJhbmspdGhyb3cgbmV3IEVycm9yKFwiYnJvYWRjYXN0VG8oKTogc2hhcGUubGVuZ3RoPVwiK2UubGVuZ3RoK1wiIDwgaW5wdXQucmFuaz1cIituLnJhbmsrXCIuXCIpO2lmKGUubGVuZ3RoPm4ucmFuayl7Zm9yKHZhciBvPW4uc2hhcGUuc2xpY2UoKTtvLmxlbmd0aDxlLmxlbmd0aDspby51bnNoaWZ0KDEpO249bi5yZXNoYXBlKG8pfWZvcih2YXIgYT1BcnJheS5mcm9tKGUpLGk9ZS5sZW5ndGgtMTtpPj0wO2ktLSlpZihuLnNoYXBlW2ldPT09ZVtpXSlhW2ldPTE7ZWxzZSBpZigxIT09bi5zaGFwZVtpXSl0aHJvdyBuZXcgRXJyb3IoXCJicm9hZGNhc3RUbygpOiBbXCIrcitcIl0gY2Fubm90IGJlIGJyb2FkY2FzdCB0byBbXCIrZStcIl0uXCIpO3ZhciBzPWEubWFwKChmdW5jdGlvbih0LGUpe3JldHVybiB0PjE/ZTotMX0pKS5maWx0ZXIoKGZ1bmN0aW9uKHQpe3JldHVybiB0Pj0wfSkpO3JldHVybiAwPT09cy5sZW5ndGg/bi5jbG9uZSgpOkx0LnJ1bktlcm5lbEZ1bmMoKGZ1bmN0aW9uKHQpe3JldHVybiB0LnRpbGUobixhKX0pLHtpbnB1dDpufSwoZnVuY3Rpb24odCl7cmV0dXJue2lucHV0OmZ1bmN0aW9uKCl7cmV0dXJuIHQuc3VtKHMsITApfX19KSl9fSksZ3I9QW4oe2Nhc3RfOmZ1bmN0aW9uKHQsZSl7dmFyIG49bW4odCxcInhcIixcImNhc3RcIik7aWYoIVcoZSkpdGhyb3cgbmV3IEVycm9yKFwiRmFpbGVkIHRvIGNhc3QgdG8gdW5rbm93biBkdHlwZSBcIitlKTtpZihcInN0cmluZ1wiPT09ZSYmXCJzdHJpbmdcIiE9PW4uZHR5cGV8fFwic3RyaW5nXCIhPT1lJiZcInN0cmluZ1wiPT09bi5kdHlwZSl0aHJvdyBuZXcgRXJyb3IoXCJPbmx5IHN0cmluZ3MgY2FuIGJlIGNhc3RlZCB0byBzdHJpbmdzXCIpO3ZhciByPXtkdHlwZTplfTtyZXR1cm4gTHQucnVuS2VybmVsRnVuYygoZnVuY3Rpb24odCl7cmV0dXJuIHQuY2FzdChuLGUpfSkse3g6bn0sKGZ1bmN0aW9uKHQpe3JldHVybnt4OmZ1bmN0aW9uKCl7cmV0dXJuIHQuY2xvbmUoKX19fSksXCJDYXN0XCIscil9fSkseXI9QW4oe2Nsb25lXzpmdW5jdGlvbih0KXt2YXIgZT1tbih0LFwieFwiLFwiY2xvbmVcIixudWxsKTtyZXR1cm4gTHQucnVuS2VybmVsRnVuYygoZnVuY3Rpb24oKXtyZXR1cm4gTHQubWFrZVRlbnNvckZyb21EYXRhSWQoZS5kYXRhSWQsZS5zaGFwZSxlLmR0eXBlKX0pLHskeDplfSwoZnVuY3Rpb24odCl7cmV0dXJueyR4OmZ1bmN0aW9uKCl7cmV0dXJuIHQudG9GbG9hdCgpfX19KSl9fSkseHI9QW4oe2N1bXN1bV86ZnVuY3Rpb24odCxlLG4scil7dm9pZCAwPT09ZSYmKGU9MCksdm9pZCAwPT09biYmKG49ITEpLHZvaWQgMD09PXImJihyPSExKTt2YXIgbz1tbih0LFwieFwiLFwiY3Vtc3VtXCIpLGE9RW4oW2V8PTBdLG8ucmFuayksaT1vO251bGwhPWEmJihpPW8udHJhbnNwb3NlKGEpKTt2YXIgcz1JbigxLG8ucmFuaylbMF0sdT1MdC5ydW5LZXJuZWxGdW5jKChmdW5jdGlvbih0KXtyZXR1cm4gdC5jdW1zdW0oaSxzLG4scil9KSx7cGVybXV0ZWRYOml9LChmdW5jdGlvbih0KXtyZXR1cm57cGVybXV0ZWRYOmZ1bmN0aW9uKCl7cmV0dXJuIHQuY3Vtc3VtKGUsbiwhcil9fX0pKTtyZXR1cm4gbnVsbCE9YSYmKHU9dS50cmFuc3Bvc2UoYSkpLHV9fSksYnI9QW4oe2RlcHRoVG9TcGFjZV86ZnVuY3Rpb24odCxlLG4pe3ZvaWQgMD09PW4mJihuPVwiTkhXQ1wiKTt2YXIgcj1tbih0LFwieFwiLFwiZGVwdGhUb1NwYWNlXCIpLG89XCJOSFdDXCI9PT1uP3Iuc2hhcGVbMV06ci5zaGFwZVsyXSxhPVwiTkhXQ1wiPT09bj9yLnNoYXBlWzJdOnIuc2hhcGVbM10saT1cIk5IV0NcIj09PW4/ci5zaGFwZVszXTpyLnNoYXBlWzFdO3JldHVybiBDKG8qZT49MCwoZnVuY3Rpb24oKXtyZXR1cm5cIk5lZ2F0aXZlIGRpbWVuc2lvbiBzaXplIGNhdXNlZCBieSBvdmVyZmxvdyB3aGVuIG11bHRpcGx5aW5nXFxuICAgICAgXCIrbytcIiBhbmQgXCIrZStcIiAgZm9yIGRlcHRoVG9TcGFjZSB3aXRoIGlucHV0IHNoYXBlXFxuICAgICAgXCIrci5zaGFwZX0pKSxDKGEqZT49MCwoZnVuY3Rpb24oKXtyZXR1cm5cIk5lZ2F0aXZlIGRpbWVuc2lvbiBzaXplIGNhdXNlZCBieSBvdmVyZmxvdyB3aGVuIG11bHRpcGx5aW5nXFxuICAgICAgXCIrYStcIiBhbmQgXCIrZStcIiBmb3IgZGVwdGhUb1NwYWNlIHdpdGggaW5wdXQgc2hhcGVcXG4gICAgICAgICAgXCIrci5zaGFwZX0pKSxDKGklKGUqZSk9PTAsKGZ1bmN0aW9uKCl7cmV0dXJuXCJEaW1lbnNpb24gc2l6ZSBtdXN0IGJlIGV2ZW5seSBkaXZpc2libGUgYnkgXCIrZSplK1wiIGJ1dCBpcyBcIitpK1wiIGZvciBkZXB0aFRvU3BhY2Ugd2l0aCBpbnB1dCBzaGFwZSBcIityLnNoYXBlfSkpLEx0LnJ1bktlcm5lbEZ1bmMoKGZ1bmN0aW9uKHQpe3JldHVybiB0LmRlcHRoVG9TcGFjZShyLGUsbil9KSx7JHg6cn0pfX0pLHdyPUFuKHtleHBhbmREaW1zXzpmdW5jdGlvbih0LGUpe3ZvaWQgMD09PWUmJihlPTApO3ZhciBuPW1uKHQsXCJ4XCIsXCJleHBhbmREaW1zXCIsbnVsbCk7QyhlPD1uLnJhbmssKGZ1bmN0aW9uKCl7cmV0dXJuXCJBeGlzIG11c3QgYmUgPD0gcmFuayBvZiB0aGUgdGVuc29yXCJ9KSk7dmFyIHI9bi5zaGFwZS5zbGljZSgpO3JldHVybiBlPDAmJihDKC0obi5yYW5rKzEpPD1lLChmdW5jdGlvbigpe3JldHVyblwiQXhpcyBtdXN0IGJlIGluIHRoZSBpbnRlcnZhbCBbXCIrLShuLnJhbmsrMSkrXCIsIFwiK24ucmFuaytcIl1cIn0pKSxlPW4ucmFuaytlKzEpLHIuc3BsaWNlKGUsMCwxKSxPcihuLHIpfX0pLENyPUFuKHtleWVfOmZ1bmN0aW9uKHQsZSxuLHIpe3ZvaWQgMD09PXImJihyPVwiZmxvYXQzMlwiKSxudWxsPT1lJiYoZT10KTtmb3IodmFyIG89ZHIoW3QsZV0sciksYT10PD1lP3Q6ZSxpPTA7aTxhOysraSlvLnNldCgxLGksaSk7dmFyIHM9by50b1RlbnNvcigpLmFzMkQodCxlKTtpZihudWxsPT1uKXJldHVybiBzO2lmKDE9PT1uLmxlbmd0aClyZXR1cm4gTHIod3IocywwKSxbblswXSwxLDFdKTtpZigyPT09bi5sZW5ndGgpcmV0dXJuIExyKHdyKHdyKHMsMCksMCksW25bMF0sblsxXSwxLDFdKTtpZigzPT09bi5sZW5ndGgpcmV0dXJuIExyKHdyKHdyKHdyKHMsMCksMCksMCksW25bMF0sblsxXSxuWzJdLDEsMV0pO3Rocm93IG5ldyBFcnJvcihcImV5ZSgpIGN1cnJlbnRseSBzdXBwb3J0cyBvbmx5IDFEIGFuZCAyRCBiYXRjaFNoYXBlcywgYnV0IHJlY2VpdmVkIFwiK24ubGVuZ3RoK1wiRC5cIil9fSksRXI9QW4oe211bHRpbm9taWFsXzpmdW5jdGlvbih0LGUsbixyKXt2b2lkIDA9PT1yJiYocj0hMSk7dmFyIG89bW4odCxcImxvZ2l0c1wiLFwibXVsdGlub21pYWxcIiksYT1vLnNpemUsaT1vLnJhbms7aWYoYTwyKXRocm93IG5ldyBFcnJvcihcIkVycm9yIGluIG11bHRpbm9taWFsOiB5b3UgbmVlZCBhdCBsZWFzdCAyIG91dGNvbWVzLCBidXQgZ290IFwiK2ErXCIuXCIpO2lmKGk+Mil0aHJvdyBuZXcgRXJyb3IoXCJSYW5rIG9mIHByb2JhYmlsaXRpZXMgbXVzdCBiZSAxIG9yIDIsIGJ1dCBpcyBcIitpKTtuPW58fE1hdGgucmFuZG9tKCk7dmFyIHM9MT09PWk/by5hczJEKDEsLTEpOm8sdT1MdC5ydW5LZXJuZWxGdW5jKChmdW5jdGlvbih0KXtyZXR1cm4gdC5tdWx0aW5vbWlhbChzLHIsZSxuKX0pLHtsb2dpdHMyRDpzfSk7cmV0dXJuIDE9PT1pP3UuYXMxRCgpOnV9fSksUnI9QW4oe29uZUhvdF86ZnVuY3Rpb24odCxlLG4scil7aWYodm9pZCAwPT09biYmKG49MSksdm9pZCAwPT09ciYmKHI9MCksZTwyKXRocm93IG5ldyBFcnJvcihcIkVycm9yIGluIG9uZUhvdDogZGVwdGggbXVzdCBiZSA+PTIsIGJ1dCBpdCBpcyBcIitlKTt2YXIgbz1tbih0LFwiaW5kaWNlc1wiLFwib25lSG90XCIsXCJpbnQzMlwiKSxhPW8uc2hhcGUuY29uY2F0KFtlXSk7cmV0dXJuIG89by5mbGF0dGVuKCksTHQucnVuS2VybmVsRnVuYygoZnVuY3Rpb24odCl7cmV0dXJuIHQub25lSG90KG8sZSxuLHIpfSkseyRpbmRpY2VzOm99LChmdW5jdGlvbih0KXtyZXR1cm57JGluZGljZXM6ZnVuY3Rpb24oKXtyZXR1cm4gR24oby5zaGFwZSxcImZsb2F0MzJcIil9fX0pKS5yZXNoYXBlKGEpfX0pLElyPUFuKHtwYWRfOmZ1bmN0aW9uKHQsZSxuKXt2b2lkIDA9PT1uJiYobj0wKTt2YXIgcj1tbih0LFwieFwiLFwicGFkXCIpO2lmKDA9PT1yLnJhbmspdGhyb3cgbmV3IEVycm9yKFwicGFkKHNjYWxhcikgaXMgbm90IGRlZmluZWQuIFBhc3Mgbm9uLXNjYWxhciB0byBwYWRcIik7dmFyIG89e3BhZGRpbmdzOmUsY29uc3RhbnRWYWx1ZTpufTtyZXR1cm4gTHQucnVuS2VybmVsRnVuYygoZnVuY3Rpb24odCl7cmV0dXJuIHQucGFkKHIsZSxuKX0pLHt4OnJ9LChmdW5jdGlvbih0KXt2YXIgbj1lLm1hcCgoZnVuY3Rpb24odCl7cmV0dXJuIHRbMF19KSk7cmV0dXJue3g6ZnVuY3Rpb24oKXtyZXR1cm4gdC5zbGljZShuLHIuc2hhcGUpfX19KSxcIlBhZFYyXCIsbyl9fSksa3I9QW4oe3BhZDFkXzpmdW5jdGlvbih0LGUsbil7cmV0dXJuIHZvaWQgMD09PW4mJihuPTApLEMoMj09PWUubGVuZ3RoLChmdW5jdGlvbigpe3JldHVyblwiSW52YWxpZCBudW1iZXIgb2YgcGFkZGluZ3MuIE11c3QgYmUgbGVuZ3RoIG9mIDIuXCJ9KSksSXIodCxbZV0sbil9fSksU3I9QW4oe3BhZDJkXzpmdW5jdGlvbih0LGUsbil7cmV0dXJuIHZvaWQgMD09PW4mJihuPTApLEMoMj09PWUubGVuZ3RoJiYyPT09ZVswXS5sZW5ndGgmJjI9PT1lWzFdLmxlbmd0aCwoZnVuY3Rpb24oKXtyZXR1cm5cIkludmFsaWQgbnVtYmVyIG9mIHBhZGRpbmdzLiBNdXN0IGJlIGxlbmd0aCBvZiAyIGVhY2guXCJ9KSksSXIodCxlLG4pfX0pLEFyPUFuKHtwYWQzZF86ZnVuY3Rpb24odCxlLG4pe3JldHVybiB2b2lkIDA9PT1uJiYobj0wKSxDKDM9PT1lLmxlbmd0aCYmMj09PWVbMF0ubGVuZ3RoJiYyPT09ZVsxXS5sZW5ndGgmJjI9PT1lWzJdLmxlbmd0aCwoZnVuY3Rpb24oKXtyZXR1cm5cIkludmFsaWQgbnVtYmVyIG9mIHBhZGRpbmdzLiBNdXN0IGJlIGxlbmd0aCBvZiAyIGVhY2guXCJ9KSksSXIodCxlLG4pfX0pLERyPUFuKHtwYWQ0ZF86ZnVuY3Rpb24odCxlLG4pe3JldHVybiB2b2lkIDA9PT1uJiYobj0wKSxDKDQ9PT1lLmxlbmd0aCYmMj09PWVbMF0ubGVuZ3RoJiYyPT09ZVsxXS5sZW5ndGgmJjI9PT1lWzJdLmxlbmd0aCYmMj09PWVbM10ubGVuZ3RoLChmdW5jdGlvbigpe3JldHVyblwiSW52YWxpZCBudW1iZXIgb2YgcGFkZGluZ3MuIE11c3QgYmUgbGVuZ3RoIG9mIDIgZWFjaC5cIn0pKSxJcih0LGUsbil9fSksVHI9QW4oe3JhbmRfOmZ1bmN0aW9uKHQsZSxuKXt2YXIgcj1rKHQpLG89bnVsbDtpZihudWxsPT1ufHxcImZsb2F0MzJcIj09PW4pbz1uZXcgRmxvYXQzMkFycmF5KHIpO2Vsc2UgaWYoXCJpbnQzMlwiPT09bilvPW5ldyBJbnQzMkFycmF5KHIpO2Vsc2V7aWYoXCJib29sXCIhPT1uKXRocm93IG5ldyBFcnJvcihcIlVua25vd24gZGF0YSB0eXBlIFwiK24pO289bmV3IFVpbnQ4QXJyYXkocil9Zm9yKHZhciBhPTA7YTxyO2ErKylvW2FdPWUoKTtyZXR1cm4gTHQubWFrZVRlbnNvcihvLHQsbil9fSksTnI9QW4oe3JhbmRvbU5vcm1hbF86ZnVuY3Rpb24odCxlLG4scixvKXtpZih2b2lkIDA9PT1lJiYoZT0wKSx2b2lkIDA9PT1uJiYobj0xKSxudWxsIT1yJiZcImJvb2xcIj09PXIpdGhyb3cgbmV3IEVycm9yKFwiVW5zdXBwb3J0ZWQgZGF0YSB0eXBlIFwiK3IpO2Zvcih2YXIgYT1uZXcgbHIoZSxuLHIsITEsbyksaT1kcih0LHIpLHM9MDtzPGkudmFsdWVzLmxlbmd0aDtzKyspaS52YWx1ZXNbc109YS5uZXh0VmFsdWUoKTtyZXR1cm4gaS50b1RlbnNvcigpfX0pLEZyPUFuKHtyYW5kb21HYW1tYV86ZnVuY3Rpb24odCxlLG4scixvKXtpZih2b2lkIDA9PT1uJiYobj0xKSx2b2lkIDA9PT1yJiYocj1cImZsb2F0MzJcIiksbnVsbD09biYmKG49MSksbnVsbD09ciYmKHI9XCJmbG9hdDMyXCIpLFwiZmxvYXQzMlwiIT09ciYmXCJpbnQzMlwiIT09cil0aHJvdyBuZXcgRXJyb3IoXCJVbnN1cHBvcnRlZCBkYXRhIHR5cGUgXCIrcik7Zm9yKHZhciBhPW5ldyBocihlLG4scixvKSxpPWRyKHQscikscz0wO3M8aS52YWx1ZXMubGVuZ3RoO3MrKylpLnZhbHVlc1tzXT1hLm5leHRWYWx1ZSgpO3JldHVybiBpLnRvVGVuc29yKCl9fSksX3I9QW4oe3JhbmRvbVVuaWZvcm1fOmZ1bmN0aW9uKHQsZSxuLHIsbyl7dm9pZCAwPT09ZSYmKGU9MCksdm9pZCAwPT09biYmKG49MSksdm9pZCAwPT09ciYmKHI9XCJmbG9hdDMyXCIpO2Zvcih2YXIgYT1kcih0LHIpLGk9bmV3IGZyKGUsbixudWxsLG8pLHM9MDtzPGEudmFsdWVzLmxlbmd0aDtzKyspYS52YWx1ZXNbc109aS5uZXh0VmFsdWUoKTtyZXR1cm4gYS50b1RlbnNvcigpfX0pLE9yPUFuKHtyZXNoYXBlXzpmdW5jdGlvbih0LGUpe3ZhciBuPW1uKHQsXCJ4XCIsXCJyZXNoYXBlXCIsbnVsbCk7ZT1fKGUsbi5zaXplKSxDKG4uc2l6ZT09PWsoZSksKGZ1bmN0aW9uKCl7cmV0dXJuXCJuZXcgc2hhcGUgYW5kIG9sZCBzaGFwZSBtdXN0IGhhdmUgdGhlIHNhbWUgbnVtYmVyIG9mIGVsZW1lbnRzLlwifSkpO3ZhciByPXtzaGFwZTplfTtyZXR1cm4gTHQucnVuS2VybmVsRnVuYygoZnVuY3Rpb24odCl7cmV0dXJuIHQucmVzaGFwZShuLGUpfSkse3g6bn0sKGZ1bmN0aW9uKHQpe3JldHVybnt4OmZ1bmN0aW9uKCl7cmV0dXJuIHQucmVzaGFwZShuLnNoYXBlKX19fSksXCJSZXNoYXBlXCIscil9fSksTXI9QW4oe3NwYWNlVG9CYXRjaE5EXzpmdW5jdGlvbih0LGUsbil7dmFyIHI9bW4odCxcInhcIixcInNwYWNlVG9CYXRjaE5EXCIpO3JldHVybiBDKHIucmFuaz49MStlLmxlbmd0aCwoZnVuY3Rpb24oKXtyZXR1cm5cImlucHV0IHJhbmsgXCIrci5yYW5rK1wiIHNob3VsZCBiZSA+IHRoYW4gW2Jsb2NrU2hhcGVdIFwiK2UubGVuZ3RofSkpLEMobi5sZW5ndGg9PT1lLmxlbmd0aCwoZnVuY3Rpb24oKXtyZXR1cm5cInBhZGRpbmdzLnNoYXBlWzBdIFwiK24ubGVuZ3RoK1wiIG11c3QgYmUgZXF1YWwgdG8gW2Jsb2NrU2hhcGVdIFwiK2UubGVuZ3RofSkpLEMoci5zaGFwZS5yZWR1Y2UoKGZ1bmN0aW9uKHQscixvKXtyZXR1cm4gbz4wJiZvPD1lLmxlbmd0aD90JiYocituW28tMV1bMF0rbltvLTFdWzFdKSVlW28tMV09PTA6dH0pLCEwKSwoZnVuY3Rpb24oKXtyZXR1cm5cImlucHV0IHNwYXRpYWwgZGltZW5zaW9ucyBcIityLnNoYXBlLnNsaWNlKDEpK1wiIHdpdGggcGFkZGluZ3MgXCIrbi50b1N0cmluZygpK1wiIG11c3QgYmUgZGl2aXNpYmxlIGJ5IGJsb2NrU2hhcGVzIFwiK2UudG9TdHJpbmcoKX0pKSxMdC5ydW5LZXJuZWxGdW5jKChmdW5jdGlvbih0KXtyZXR1cm4gdC5zcGFjZVRvQmF0Y2hORChyLGUsbil9KSx7JHg6cn0sKGZ1bmN0aW9uKHQpe3JldHVybnskeDpmdW5jdGlvbigpe3JldHVybiB0LmJhdGNoVG9TcGFjZU5EKGUsbil9fX0pKX19KSxCcj1Bbih7c3F1ZWV6ZV86ZnVuY3Rpb24odCxlKXt2YXIgbj1tbih0LFwieFwiLFwic3F1ZWV6ZVwiKTtyZXR1cm4gT3IobixNKG4uc2hhcGUsZSkubmV3U2hhcGUpfX0pLFByPUFuKHtzdGFja186ZnVuY3Rpb24odCxlKXt2b2lkIDA9PT1lJiYoZT0wKTt2YXIgbj1nbih0LFwidGVuc29yc1wiLFwic3RhY2tcIik7aWYoQyhuLmxlbmd0aD49MSwoZnVuY3Rpb24oKXtyZXR1cm5cIlBhc3MgYXQgbGVhc3Qgb25lIHRlbnNvciB0byB0Zi5zdGFja1wifSkpLDE9PT1uLmxlbmd0aClyZXR1cm4gblswXS5leHBhbmREaW1zKGUpO3ZhciByPW5bMF0ucmFuayxvPW5bMF0uc2hhcGUsYT1uWzBdLmR0eXBlO0MoZTw9ciwoZnVuY3Rpb24oKXtyZXR1cm5cIkF4aXMgbXVzdCBiZSA8PSByYW5rIG9mIHRoZSB0ZW5zb3JcIn0pKSxuLmZvckVhY2goKGZ1bmN0aW9uKHQpe0Uobyx0LnNoYXBlLFwiQWxsIHRlbnNvcnMgcGFzc2VkIHRvIHN0YWNrIG11c3QgaGF2ZSBtYXRjaGluZyBzaGFwZXNcIil9KSksbi5mb3JFYWNoKChmdW5jdGlvbih0KXtDKGE9PT10LmR0eXBlLChmdW5jdGlvbigpe3JldHVyblwiQWxsIHRlbnNvcnMgcGFzc2VkIHRvIHN0YWNrIG11c3QgaGF2ZSBtYXRjaGluZyBkdHlwZXNcIn0pKX0pKTt2YXIgaT1uLm1hcCgoZnVuY3Rpb24odCl7cmV0dXJuIHQuZXhwYW5kRGltcyhlKX0pKTtyZXR1cm4gWW4oaSxlKX19KSxMcj1Bbih7dGlsZV86ZnVuY3Rpb24odCxlKXt2YXIgbj1tbih0LFwieFwiLFwidGlsZVwiLG51bGwpO0Mobi5yYW5rPT09ZS5sZW5ndGgsKGZ1bmN0aW9uKCl7cmV0dXJuXCJFcnJvciBpbiB0cmFuc3Bvc2U6IHJhbmsgb2YgaW5wdXQgXCIrbi5yYW5rK1wiIG11c3QgbWF0Y2ggbGVuZ3RoIG9mIHJlcHMgXCIrZStcIi5cIn0pKTt2YXIgcj1bbl0sbz17cmVwczplfTtyZXR1cm4gTHQucnVuS2VybmVsRnVuYygoZnVuY3Rpb24odCxyKXt2YXIgbz10LnRpbGUobixlKTtyZXR1cm4gcihbbl0pLG99KSx7eDpufSwoZnVuY3Rpb24odCxuKXt2YXIgcj1uWzBdO3JldHVybnt4OmZ1bmN0aW9uKCl7dmFyIG49WG4ocik7aWYoMT09PXIucmFuaylmb3IodmFyIG89MDtvPGVbMF07KytvKW49bi5hZGQodC5zbGljZShbbypyLnNoYXBlWzBdXSxbci5zaGFwZVswXV0pKTtlbHNlIGlmKDI9PT1yLnJhbmspZm9yKG89MDtvPGVbMF07KytvKWZvcih2YXIgYT0wO2E8ZVsxXTsrK2Epbj1uLmFkZCh0LnNsaWNlKFtvKnIuc2hhcGVbMF0sYSpyLnNoYXBlWzFdXSxbci5zaGFwZVswXSxyLnNoYXBlWzFdXSkpO2Vsc2UgaWYoMz09PXIucmFuaylmb3Iobz0wO288ZVswXTsrK28pZm9yKGE9MDthPGVbMV07KythKWZvcih2YXIgaT0wO2k8ZVsyXTsrK2kpbj1uLmFkZCh0LnNsaWNlKFtvKnIuc2hhcGVbMF0sYSpyLnNoYXBlWzFdLGkqci5zaGFwZVsyXV0sW3Iuc2hhcGVbMF0sci5zaGFwZVsxXSxyLnNoYXBlWzJdXSkpO2Vsc2V7aWYoNCE9PXIucmFuayl0aHJvdyBuZXcgRXJyb3IoXCJHcmFkaWVudCBmb3IgdGlsZSBvcGVyYXRpb24gaXMgbm90IGltcGxlbWVudGVkIGZvciByYW5rLVwiK3IucmFuaytcIiB0ZW5zb3JzIHlldC5cIik7Zm9yKG89MDtvPGVbMF07KytvKWZvcihhPTA7YTxlWzFdOysrYSlmb3IoaT0wO2k8ZVsyXTsrK2kpZm9yKHZhciBzPTA7czxlWzNdOysrcyluPW4uYWRkKHQuc2xpY2UoW28qci5zaGFwZVswXSxhKnIuc2hhcGVbMV0saSpyLnNoYXBlWzJdLHMqci5zaGFwZVszXV0sW3Iuc2hhcGVbMF0sci5zaGFwZVsxXSxyLnNoYXBlWzJdLHIuc2hhcGVbM11dKSl9cmV0dXJuIG59fX0pLFwiVGlsZVwiLG8scil9fSksV3I9QW4oe3RydW5jYXRlZE5vcm1hbF86ZnVuY3Rpb24odCxlLG4scixvKXtpZih2b2lkIDA9PT1lJiYoZT0wKSx2b2lkIDA9PT1uJiYobj0xKSxudWxsIT1yJiZcImJvb2xcIj09PXIpdGhyb3cgbmV3IEVycm9yKFwiVW5zdXBwb3J0ZWQgZGF0YSB0eXBlIFwiK3IpO2Zvcih2YXIgYT1uZXcgbHIoZSxuLHIsITAsbyksaT1kcih0LHIpLHM9MDtzPGkudmFsdWVzLmxlbmd0aDtzKyspaS52YWx1ZXNbc109YS5uZXh0VmFsdWUoKTtyZXR1cm4gaS50b1RlbnNvcigpfX0pLFVyPUFuKHt1bnN0YWNrXzpmdW5jdGlvbih0LGUpe3ZvaWQgMD09PWUmJihlPTApLGU9ZXx8MDt2YXIgbj1tbih0LFwieFwiLFwidW5zdGFja1wiKTtDKGU+PS1uLnNoYXBlLmxlbmd0aCYmZTxuLnNoYXBlLmxlbmd0aCwoZnVuY3Rpb24oKXtyZXR1cm5cIkF4aXMgPSBcIitlK1wiIGlzIG5vdCBpbiBbLVwiK24uc2hhcGUubGVuZ3RoK1wiLCBcIituLnNoYXBlLmxlbmd0aCtcIilcIn0pKSxlPDAmJihlKz1uLnNoYXBlLmxlbmd0aCk7dmFyIHI9e2F4aXM6ZX07cmV0dXJuIEx0LnJ1bktlcm5lbEZ1bmMoKGZ1bmN0aW9uKHQpe3JldHVybiB0LnVuc3RhY2sobixlKX0pLHt4Om59LChmdW5jdGlvbih0KXtyZXR1cm57eDpmdW5jdGlvbigpe3JldHVybiBQcih0LGUpfX19KSxcIlVucGFja1wiLHIpfX0pLFZyPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIG4odGhpcyx2b2lkIDAsdm9pZCAwLChmdW5jdGlvbigpe3ZhciBuLG8sYSxpLHMsdSxjLGwsaCxmO3JldHVybiByKHRoaXMsKGZ1bmN0aW9uKHIpe3N3aXRjaChyLmxhYmVsKXtjYXNlIDA6cmV0dXJuIG49bW4odCxcInhcIixcInNldGRpZmYxZFwiKSxvPW1uKGUsXCJ5XCIsXCJzZXRkaWZmMWRcIiksQyhuLmR0eXBlPT09by5kdHlwZSwoZnVuY3Rpb24oKXtyZXR1cm5cInggYW5kIHkgc2hvdWxkIGhhdmUgdGhlIHNhbWUgZHR5cGUsIGJ1dCBnb3QgeCAoXCIrbi5kdHlwZStcIikgYW5kIHkgKFwiK28uZHR5cGUrXCIpLlwifSkpLEMoMT09PW4ucmFuaywoZnVuY3Rpb24oKXtyZXR1cm5cInggc2hvdWxkIGJlIDFEIHRlbnNvciwgYnV0IGdvdCB4IChcIituLnNoYXBlK1wiKS5cIn0pKSxDKDE9PT1vLnJhbmssKGZ1bmN0aW9uKCl7cmV0dXJuXCJ5IHNob3VsZCBiZSAxRCB0ZW5zb3IsIGJ1dCBnb3QgeSAoXCIrby5zaGFwZStcIikuXCJ9KSksWzQsbi5kYXRhKCldO2Nhc2UgMTpyZXR1cm4gYT1yLnNlbnQoKSxbNCxvLmRhdGEoKV07Y2FzZSAyOmZvcihpPXIuc2VudCgpLHM9bmV3IFNldChpKSx1PTAsaD0wO2g8YS5sZW5ndGg7aCsrKXMuaGFzKGFbaF0pfHx1Kys7Zm9yKGM9bmV3IGd0KFt1XSxuLmR0eXBlKSxsPW5ldyBndChbdV0sXCJpbnQzMlwiKSxoPTAsZj0wO2g8YS5sZW5ndGg7aCsrKXMuaGFzKGFbaF0pfHwoYy52YWx1ZXNbZl09YVtoXSxsLnZhbHVlc1tmXT1oLGYrKyk7cmV0dXJuWzIsW2MudG9UZW5zb3IoKSxsLnRvVGVuc29yKCldXX19KSl9KSl9O2Z1bmN0aW9uIHpyKHQsZSxuLHIpe3ZvaWQgMD09PXImJihyPSEwKTt2YXIgbz1bXTtpZihyKShvPW8uY29uY2F0KGUuc2xpY2UoMCkpKS5wdXNoKHRbMF0vbiksbz1vLmNvbmNhdCh0LnNsaWNlKDEpKTtlbHNle289by5jb25jYXQodFswXSk7Zm9yKHZhciBhPWUubGVuZ3RoLGk9MDtpPGE7KytpKW89by5jb25jYXQoW3RbaSsxXS9lW2ldLGVbaV1dKTtvPW8uY29uY2F0KHQuc2xpY2UoYSsxKSl9cmV0dXJuIG99ZnVuY3Rpb24gR3IodCxlLG4pe3ZvaWQgMD09PW4mJihuPSEwKTt2YXIgcj1bXTtpZihuKXtyLnB1c2goZSk7Zm9yKHZhciBvPWUrMTtvPHQ7KytvKW88PTIqZT8oci5wdXNoKG8pLHIucHVzaChvLShlKzEpKSk6ci5wdXNoKG8pfWVsc2V7dmFyIGE9W10saT1bXTtmb3Iobz0xO288dDsrK28pbz49MiplKzF8fG8lMj09MT9pLnB1c2gobyk6YS5wdXNoKG8pO3IucHVzaC5hcHBseShyLGEpLHIucHVzaCgwKSxyLnB1c2guYXBwbHkocixpKX1yZXR1cm4gcn1mdW5jdGlvbiBIcih0LGUsbixyKXt2b2lkIDA9PT1yJiYocj0hMCk7dmFyIG89W107cj9vLnB1c2godFswXS9uKTpvLnB1c2godFswXSpuKTtmb3IodmFyIGE9MTthPHQubGVuZ3RoOysrYSlhPD1lLmxlbmd0aD9yP28ucHVzaChlW2EtMV0qdFthXSk6by5wdXNoKHRbYV0vZVthLTFdKTpvLnB1c2godFthXSk7cmV0dXJuIG99ZnVuY3Rpb24gcXIodCxlKXtmb3IodmFyIG49WzBdLHI9MDtyPGU7KytyKW4ucHVzaCh0W3JdWzBdKTtyZXR1cm4gbn1mdW5jdGlvbiBLcih0LGUsbil7Zm9yKHZhciByPXQuc2xpY2UoMCwxKSxvPTA7bzxuOysrbylyLnB1c2godFtvKzFdLWVbb11bMF0tZVtvXVsxXSk7cmV0dXJuIHJ9ZnVuY3Rpb24ganIodCxlKXtpZih0LnJhbms8MSl0aHJvdyBuZXcgRXJyb3IoXCJ0Zi5nYXRoZXJORCgpIGV4cGVjdHMgdGhlIGlucHV0IHRvIGJlIHJhbmsgMSBvciBoaWdoZXIsIGJ1dCB0aGUgcmFuayB3YXMgXCIrdC5yYW5rK1wiLlwiKTtpZihlLnJhbms8MSl0aHJvdyBuZXcgRXJyb3IoXCJ0Zi5nYXRoZXJORCgpIGV4cGVjdHMgdGhlIGluZGljZXMgdG8gYmUgcmFuayAxIG9yIGhpZ2hlciwgYnV0IHRoZSByYW5rIHdhcyBcIitlLnJhbmsrXCIuXCIpO2lmKFwiaW50MzJcIiE9PWUuZHR5cGUpdGhyb3cgbmV3IEVycm9yKFwidGYuZ2F0aGVyTkQoKSBleHBlY3RzIHRoZSBpbmRpY2VzIHRvIGJlIGludDMyIHR5cGUsIGJ1dCB0aGUgZHR5cGUgd2FzIFwiK2UuZHR5cGUrXCIuXCIpO2lmKGUuc2hhcGVbZS5yYW5rLTFdPnQucmFuayl0aHJvdyBuZXcgRXJyb3IoXCJpbmRleCBpbm5lcm1vc3QgZGltZW5zaW9uIGxlbmd0aCBtdXN0IGJlIDw9IHRlbnNvciByYW5rOyBzYXc6IFwiK2Uuc2hhcGVbZS5yYW5rLTFdK1wiIHZzLiBcIit0LnJhbmspO2lmKDA9PT10LnNpemUpdGhyb3cgbmV3IEVycm9yKFwiUmVxdWVzdGVkIG1vcmUgdGhhbiAwIGVudHJpZXMsIGJ1dCBpbnB1dCBpcyBlbXB0eS4gSW5wdXQgc2hhcGU6IFwiK3Quc2hhcGUrXCIuXCIpO2Zvcih2YXIgbj1lLnNoYXBlLHI9bltuLmxlbmd0aC0xXSxvPTEsYT0wO2E8bi5sZW5ndGgtMTsrK2Epbyo9blthXTt2YXIgaT10LnNoYXBlLHM9bi5zbGljZSgpO3MucG9wKCk7dmFyIHU9MTtmb3IoYT1yO2E8dC5yYW5rOysrYSl1Kj1pW2FdLHMucHVzaChpW2FdKTt2YXIgYz0kKHQuc2hhcGUpLm1hcCgoZnVuY3Rpb24odCl7cmV0dXJuIHQvdX0pKS5jb25jYXQoWzFdKS5zbGljZSgwLHIpO3JldHVybltzLG8sdSxjXX12YXIgWHI9T2JqZWN0LmZyZWV6ZSh7cHJlcGFyZUFuZFZhbGlkYXRlOmpyfSksWXI9MzA7ZnVuY3Rpb24gJHIodCl7cmV0dXJuIHQ8PVlyP3Q6WSh0LE1hdGguZmxvb3IoTWF0aC5zcXJ0KHQpKSl9ZnVuY3Rpb24gUXIodCxlLG4pe3ZhciByPWUucmFuaz4xP2Uuc2hhcGVbZS5yYW5rLTFdOjEsbz1lLnJhbms+MT9lLnJhbmstMToxLGE9XCJNdXN0IGhhdmUgdXBkYXRlcy5zaGFwZSA9IGluZGljZXMuc2hhcGVbOmJhdGNoRGltXSArIHNoYXBlW3NsaWNlRGltOl0sIGdvdCB1cGRhdGVzLnNoYXBlOiBcIituLnNoYXBlK1wiLCBpbmRpY2VzLnNoYXBlOiBcIitlLnNoYXBlK1wiLCBzaGFwZTogXCIrdCtcIiwgc2xpY2VEaW06IFwiK3IrXCIsIGFuZCBiYXRjaERpbTogXCIrbytcIi5cIjtpZihuLnJhbms8byl0aHJvdyBuZXcgRXJyb3IoYStcIiB1cGRhdGUucmFuayA8IFwiK28rXCIuIFwiKTtpZih0Lmxlbmd0aDxyKyhuLnJhbmstbykpdGhyb3cgbmV3IEVycm9yKGErXCIgT3V0cHV0IHNoYXBlIGxlbmd0aCA8IFwiKyhyKyhuLnJhbmstbykpKTtpZihuLnJhbmshPT1vK3QubGVuZ3RoLXIpdGhyb3cgbmV3IEVycm9yKGErXCIgdXBkYXRlLnJhbmsgIT0gXCIrKG8rdC5sZW5ndGgtcikpO2Zvcih2YXIgaT0wO2k8bzsrK2kpaWYobi5zaGFwZVtpXSE9PWUuc2hhcGVbaV0pdGhyb3cgbmV3IEVycm9yKGErXCIgdXBkYXRlcy5zaGFwZVtcIitpK1wiXSAoXCIrbi5zaGFwZVtpXStcIikgIT0gaW5kaWNlcy5zaGFwZVtcIitpK1wiXSAoXCIrZS5zaGFwZVtpXStcIikuXCIpO2ZvcihpPTA7aTxuLnJhbmstbzsrK2kpaWYobi5zaGFwZVtpK29dIT09dFtpK3JdKXRocm93IG5ldyBFcnJvcihhK1wiIHVwZGF0ZXMuc2hhcGVbXCIrKGkrbykrXCJdIChcIituLnNoYXBlW2krb10rXCIpICE9IHNoYXBlW1wiKyhpK28pK1wiXSAoXCIrdFtpK29dK1wiKVwiKX1mdW5jdGlvbiBKcih0LGUsbil7aWYoZS5yYW5rPDEpdGhyb3cgbmV3IEVycm9yKFwidGYuc2NhdHRlck5EKCkgZXhwZWN0cyB0aGUgaW5kaWNlcyB0byBiZSByYW5rIDEgb3IgaGlnaGVyLCBidXQgdGhlIHJhbmsgd2FzIFwiK2UucmFuaytcIi5cIik7aWYodC5yYW5rPDEpdGhyb3cgbmV3IEVycm9yKFwidGYuc2NhdHRlck5EKCkgZXhwZWN0cyB0aGUgdXBkYXRlcyB0byBiZSByYW5rIDEgb3IgaGlnaGVyLCBidXQgdGhlIHJhbmsgd2FzIFwiK3QucmFuaytcIi5cIik7aWYoXCJpbnQzMlwiIT09ZS5kdHlwZSl0aHJvdyBuZXcgRXJyb3IoXCJUaGUgZHR5cGUgb2YgJ2luZGljZXMnIHNob3VsZCBiZSBpbnQzMiwgYnV0IGdvdCBkdHlwZTogXCIrZS5kdHlwZSk7aWYobi5sZW5ndGg8MSl0aHJvdyBuZXcgRXJyb3IoXCJPdXRwdXQgcmFuayBtdXN0IGJlIGdyZWF0ZXIgb3IgZXF1YWwgdG8gMSwgYnV0IGdvdCBzaGFwZTogXCIrbik7aWYoMD09PW4ubGVuZ3RoKXtpZigwPT09ZS5zaXplKXRocm93IG5ldyBFcnJvcihcIkluZGljZXMgc3BlY2lmaWVkIGZvciBlbXB0eSBvdXRwdXQuIGluZGljZXMgc2hhcGU6IFwiK2Uuc2hhcGUpO2lmKDA9PT10LnNpemUpdGhyb3cgbmV3IEVycm9yKFwiVXBkYXRlcyBzcGVjaWZpZWQgZm9yIGVtcHR5IG91dHB1dC4gdXBkYXRlcyBzaGFwZTogXCIrdC5zaGFwZSl9UXIobixlLHQpfWZ1bmN0aW9uIFpyKHQsZSxuKXtmb3IodmFyIHI9ZS5zaGFwZS5sZW5ndGgsbz1yPjE/ZS5zaGFwZVtyLTFdOjEsYT1uLmxlbmd0aCxpPTEscz1vO3M8YTsrK3MpaSo9bltzXTt2YXIgdT1vPDE/MTpvO3JldHVybntzbGljZVJhbms6byxudW1VcGRhdGVzOmsoZS5zaGFwZSkvdSxzbGljZVNpemU6aSxzdHJpZGVzOiQobi5zbGljZSgwLG8pKS5jb25jYXQoWzFdKSxvdXRwdXRTaXplOmsobil9fXZhciB0bz1PYmplY3QuZnJlZXplKHt2YWxpZGF0ZVVwZGF0ZVNoYXBlOlFyLHZhbGlkYXRlSW5wdXQ6SnIsY2FsY3VsYXRlU2hhcGVzOlpyfSk7ZnVuY3Rpb24gZW8odCxlLG4pe0ModC5yYW5rPT09ZS5sZW5ndGgsKGZ1bmN0aW9uKCl7cmV0dXJuXCJFcnJvciBpbiBzbGljZVwiK3QucmFuaytcIkQ6IExlbmd0aCBvZiBiZWdpbiBcIitlK1wiIG11c3QgbWF0Y2ggdGhlIHJhbmsgb2YgdGhlIGFycmF5IChcIit0LnJhbmsrXCIpLlwifSkpLEModC5yYW5rPT09bi5sZW5ndGgsKGZ1bmN0aW9uKCl7cmV0dXJuXCJFcnJvciBpbiBzbGljZVwiK3QucmFuaytcIkQ6IExlbmd0aCBvZiBzaXplIFwiK24rXCIgbXVzdCBtYXRjaCB0aGUgcmFuayBvZiB0aGUgYXJyYXkgKFwiK3QucmFuaytcIikuXCJ9KSk7Zm9yKHZhciByPWZ1bmN0aW9uKHIpe0MoZVtyXStuW3JdPD10LnNoYXBlW3JdLChmdW5jdGlvbigpe3JldHVyblwiRXJyb3IgaW4gc2xpY2VcIit0LnJhbmsrXCJEOiBiZWdpbltcIityK1wiXSArIHNpemVbXCIrcitcIl0gKFwiKyhlW3JdK25bcl0pK1wiKSB3b3VsZCBvdmVyZmxvdyBpbnB1dC5zaGFwZVtcIityK1wiXSAoXCIrdC5zaGFwZVtyXStcIilcIn0pKX0sbz0wO288dC5yYW5rOysrbylyKG8pfWZ1bmN0aW9uIG5vKHQpe2Zvcih2YXIgZT1bXSxuPTA7dD4wOykxJnQmJmUucHVzaChuKSx0Lz0yLG4rKztyZXR1cm4gZX1mdW5jdGlvbiBybyh0LGUsbil7Zm9yKHZhciByPVtdLG89MDtvPHQubGVuZ3RoO28rKylyW29dPU1hdGguY2VpbCgoZVtvXS10W29dKS9uW29dKTtyZXR1cm4gcn1mdW5jdGlvbiBvbyh0LGUsbixyLG8pe3ZhciBhPWVbb10saT1uW29dfHwxOyh0JjE8PG98fG51bGw9PWEpJiYoYT1pPjA/TnVtYmVyLk1JTl9TQUZFX0lOVEVHRVI6TnVtYmVyLk1BWF9TQUZFX0lOVEVHRVIpO3ZhciBzPXJbb107cmV0dXJuIGE8MCYmKGErPXMpLGE9eCgwLGEscy0xKX1mdW5jdGlvbiBhbyh0LGUsbixyLG8pe3ZhciBhPWVbb10saT1uW29dfHwxOyh0JjE8PG98fG51bGw9PWEpJiYoYT1pPjA/TnVtYmVyLk1BWF9TQUZFX0lOVEVHRVI6TnVtYmVyLk1JTl9TQUZFX0lOVEVHRVIpO3ZhciBzPXJbb107cmV0dXJuIGE8MCYmKGErPXMpLGE9aT4wP3goMCxhLHMpOngoLTEsYSxzLTEpfWZ1bmN0aW9uIGlvKHQsZSxuKXtmb3IodmFyIHI9bi5sZW5ndGgsbz0wO288bi5sZW5ndGg7bysrKWlmKG5bb10+MSl7cj1vO2JyZWFrfWZvcihvPXIrMTtvPG4ubGVuZ3RoO28rKylpZihlW29dPjB8fG5bb10hPT10W29dKXJldHVybiExO3JldHVybiEwfWZ1bmN0aW9uIHNvKHQsZSl7Zm9yKHZhciBuPXQubGVuZ3RoPjA/dFt0Lmxlbmd0aC0xXToxLHI9MDtyPHQubGVuZ3RoLTE7cisrKW4rPXRbcl0qZVtyXTtyZXR1cm4gbn12YXIgdW89T2JqZWN0LmZyZWV6ZSh7YXNzZXJ0UGFyYW1zVmFsaWQ6ZW8sbWFza1RvQXhlczpubyxjb21wdXRlT3V0U2hhcGU6cm8sc3RhcnRGb3JBeGlzOm9vLHN0b3BGb3JBeGlzOmFvLGlzU2xpY2VDb250aW5vdXM6aW8sY29tcHV0ZUZsYXRPZmZzZXQ6c299KTtmdW5jdGlvbiBjbyh0KXtyZXR1cm4gQyhYKHQpLChmdW5jdGlvbigpe3JldHVyblwiVGhlIGYgcGFzc2VkIGluIGdyYWQoZikgbXVzdCBiZSBhIGZ1bmN0aW9uXCJ9KSksZnVuY3Rpb24oZSxuKXt2YXIgcj1tbihlLFwieFwiLFwidGYuZ3JhZFwiLG51bGwpLG89bnVsbCE9bj9tbihuLFwiZHlcIixcInRmLmdyYWRcIik6bnVsbDtyZXR1cm4gTHQudGlkeSgoZnVuY3Rpb24oKXt2YXIgZT1MdC5ncmFkaWVudHMoKGZ1bmN0aW9uKCl7cmV0dXJuIHQocil9KSxbcl0sbyksbj1lLnZhbHVlLGE9ZS5ncmFkcztyZXR1cm4gbnVsbCE9byYmRShuLnNoYXBlLG8uc2hhcGUsXCJUaGUgc2hhcGUgb2YgZHkgcGFzc2VkIGluIGdyYWQoZikoeCwgZHkpIG11c3QgbWF0Y2ggdGhlIHNoYXBlIHJldHVybmVkIGJ5IGYoeClcIiksbW8oYSksYVswXX0pKX19ZnVuY3Rpb24gbG8odCl7cmV0dXJuIEMoWCh0KSwoZnVuY3Rpb24oKXtyZXR1cm5cIlRoZSBmIHBhc3NlZCBpbiBncmFkcyhmKSBtdXN0IGJlIGEgZnVuY3Rpb25cIn0pKSxmdW5jdGlvbihlLG4pe0MoQXJyYXkuaXNBcnJheShlKSwoZnVuY3Rpb24oKXtyZXR1cm5cIlRoZSBhcmdzIHBhc3NlZCBpbiBncmFkcyhmKShhcmdzKSBtdXN0IGJlIGFuIGFycmF5IG9mIGBUZW5zb3JgcyBvciBgVGVuc29yTGlrZWBzXCJ9KSk7dmFyIHI9Z24oZSxcImFyZ3NcIixcInRmLmdyYWRzXCIsbnVsbCksbz1udWxsIT1uP21uKG4sXCJkeVwiLFwidGYuZ3JhZHNcIik6bnVsbDtyZXR1cm4gTHQudGlkeSgoZnVuY3Rpb24oKXt2YXIgZT1MdC5ncmFkaWVudHMoKGZ1bmN0aW9uKCl7cmV0dXJuIHQuYXBwbHkodm9pZCAwLHIpfSkscixvKSxuPWUudmFsdWUsYT1lLmdyYWRzO3JldHVybiBudWxsIT1vJiZFKG4uc2hhcGUsby5zaGFwZSxcIlRoZSBzaGFwZSBvZiBkeSBwYXNzZWQgaW4gZ3JhZHMoZikoW3gxLC4uLl0sIGR5KSBtdXN0IG1hdGNoIHRoZSBzaGFwZSByZXR1cm5lZCBieSBmKFt4MSwuLi5dKVwiKSxtbyhhKSxhfSkpfX1mdW5jdGlvbiBobyh0KXtyZXR1cm4gQyhYKHQpLChmdW5jdGlvbigpe3JldHVyblwiVGhlIGYgcGFzc2VkIGluIHZhbHVlQW5kR3JhZChmKSBtdXN0IGJlIGEgZnVuY3Rpb25cIn0pKSxmdW5jdGlvbihlLG4pe0MoZSBpbnN0YW5jZW9mIHd0LChmdW5jdGlvbigpe3JldHVyblwiVGhlIHggcGFzc2VkIGluIHZhbHVlQW5kR3JhZChmKSh4KSBtdXN0IGJlIGEgdGVuc29yXCJ9KSksQyhudWxsPT1ufHxuIGluc3RhbmNlb2Ygd3QsKGZ1bmN0aW9uKCl7cmV0dXJuXCJUaGUgZHkgcGFzc2VkIGluIHZhbHVlQW5kR3JhZChmKSh4LCBkeSkgbXVzdCBiZSBhIHRlbnNvclwifSkpO3ZhciByPUx0LmdyYWRpZW50cygoZnVuY3Rpb24oKXtyZXR1cm4gdChlKX0pLFtlXSxuKSxvPXIuZ3JhZHMsYT1yLnZhbHVlO3JldHVybiBtbyhvKSx7Z3JhZDpvWzBdLHZhbHVlOmF9fX1mdW5jdGlvbiBmbyh0KXtyZXR1cm4gQyhYKHQpLChmdW5jdGlvbigpe3JldHVyblwiVGhlIGYgcGFzc2VkIGluIHZhbHVlQW5kR3JhZHMoZikgbXVzdCBiZSBhIGZ1bmN0aW9uXCJ9KSksZnVuY3Rpb24oZSxuKXtDKEFycmF5LmlzQXJyYXkoZSkmJmUuZXZlcnkoKGZ1bmN0aW9uKHQpe3JldHVybiB0IGluc3RhbmNlb2Ygd3R9KSksKGZ1bmN0aW9uKCl7cmV0dXJuXCJUaGUgYXJncyBwYXNzZWQgaW4gdmFsdWVBbmRHcmFkcyhmKShhcmdzKSBtdXN0IGJlIGFycmF5IG9mIHRlbnNvcnNcIn0pKSxDKG51bGw9PW58fG4gaW5zdGFuY2VvZiB3dCwoZnVuY3Rpb24oKXtyZXR1cm5cIlRoZSBkeSBwYXNzZWQgaW4gdmFsdWVBbmRHcmFkcyhmKShhcmdzLCBkeSkgbXVzdCBiZSBhIHRlbnNvclwifSkpO3ZhciByPUx0LmdyYWRpZW50cygoZnVuY3Rpb24oKXtyZXR1cm4gdC5hcHBseSh2b2lkIDAsZSl9KSxlLG4pO3JldHVybiBudWxsIT1uJiZFKHIudmFsdWUuc2hhcGUsbi5zaGFwZSxcIlRoZSBzaGFwZSBvZiBkeSBwYXNzZWQgaW4gdmFsdWVBbmRHcmFkcyhmKShbeDEsLi4uXSwgZHkpIG11c3QgbWF0Y2ggdGhlIHNoYXBlIHJldHVybmVkIGJ5IGYoW3gxLC4uLl0pXCIpLG1vKHIuZ3JhZHMpLHJ9fWZ1bmN0aW9uIHBvKHQsZSl7QyhYKHQpLChmdW5jdGlvbigpe3JldHVyblwiVGhlIGYgcGFzc2VkIGluIHZhcmlhYmxlR3JhZHMoZikgbXVzdCBiZSBhIGZ1bmN0aW9uXCJ9KSksQyhudWxsPT1lfHxBcnJheS5pc0FycmF5KGUpJiZlLmV2ZXJ5KChmdW5jdGlvbih0KXtyZXR1cm4gdCBpbnN0YW5jZW9mIFN0fSkpLChmdW5jdGlvbigpe3JldHVyblwiVGhlIHZhckxpc3QgcGFzc2VkIGluIHZhcmlhYmxlR3JhZHMoZiwgdmFyTGlzdCkgbXVzdCBiZSBhbiBhcnJheSBvZiB2YXJpYWJsZXNcIn0pKTt2YXIgbj1udWxsIT1lO2lmKCFuKWZvcih2YXIgciBpbiBlPVtdLEx0LnJlZ2lzdGVyZWRWYXJpYWJsZXMpZS5wdXNoKEx0LnJlZ2lzdGVyZWRWYXJpYWJsZXNbcl0pO3ZhciBvPW4/ZS5maWx0ZXIoKGZ1bmN0aW9uKHQpe3JldHVybiF0LnRyYWluYWJsZX0pKTpudWxsLGE9ZS5sZW5ndGg7QygoZT1lLmZpbHRlcigoZnVuY3Rpb24odCl7cmV0dXJuIHQudHJhaW5hYmxlfSkpKS5sZW5ndGg+MCwoZnVuY3Rpb24oKXtyZXR1cm5cInZhcmlhYmxlR3JhZHMoKSBleHBlY3RzIGF0IGxlYXN0IG9uZSBvZiB0aGUgaW5wdXQgdmFyaWFibGVzIHRvIGJlIHRyYWluYWJsZSwgYnV0IG5vbmUgb2YgdGhlIFwiK2ErXCIgdmFyaWFibGVzIGlzIHRyYWluYWJsZS5cIn0pKTt2YXIgaT1MdC5ncmFkaWVudHModCxlLG51bGwsITApLHM9aS52YWx1ZSx1PWkuZ3JhZHM7Qyh1LnNvbWUoKGZ1bmN0aW9uKHQpe3JldHVybiBudWxsIT10fSkpLChmdW5jdGlvbigpe3JldHVyblwiQ2Fubm90IGZpbmQgYSBjb25uZWN0aW9uIGJldHdlZW4gYW55IHZhcmlhYmxlIGFuZCB0aGUgcmVzdWx0IG9mIHRoZSBsb3NzIGZ1bmN0aW9uIHk9Zih4KS4gUGxlYXNlIG1ha2Ugc3VyZSB0aGUgb3BlcmF0aW9ucyB0aGF0IHVzZSB2YXJpYWJsZXMgYXJlIGluc2lkZSB0aGUgZnVuY3Rpb24gZiBwYXNzZWQgdG8gbWluaW1pemUoKS5cIn0pKSxDKDA9PT1zLnJhbmssKGZ1bmN0aW9uKCl7cmV0dXJuXCJUaGUgZiBwYXNzZWQgaW4gdmFyaWFibGVHcmFkcyhmKSBtdXN0IHJldHVybiBhIHNjYWxhciwgYnV0IGl0IHJldHVybmVkIGEgcmFuay1cIitzLnJhbmsrXCIgdGVuc29yXCJ9KSk7dmFyIGM9e307cmV0dXJuIGUuZm9yRWFjaCgoZnVuY3Rpb24odCxlKXtudWxsIT11W2VdJiYoY1t0Lm5hbWVdPXVbZV0pfSkpLG51bGwhPW8mJm8uZm9yRWFjaCgoZnVuY3Rpb24odCl7cmV0dXJuIGNbdC5uYW1lXT1udWxsfSkpLHt2YWx1ZTpzLGdyYWRzOmN9fWZ1bmN0aW9uIHZvKHQpe3JldHVybiBMdC5jdXN0b21HcmFkKHQpfWZ1bmN0aW9uIG1vKHQpe2lmKHQuZmlsdGVyKChmdW5jdGlvbih0KXtyZXR1cm4gbnVsbD09dH0pKS5sZW5ndGg+MCl0aHJvdyBuZXcgRXJyb3IoXCJDYW5ub3QgY29tcHV0ZSBncmFkaWVudCBvZiB5PWYoeCkgd2l0aCByZXNwZWN0IHRvIHguIE1ha2Ugc3VyZSB0aGF0XFxuICAgIHRoZSBmIHlvdSBwYXNzZWQgZW5jbG9zZXMgYWxsIG9wZXJhdGlvbnMgdGhhdCBsZWFkIGZyb20geCB0byB5LlwiKX12YXIgZ289QW4oe3NvZnRtYXhfOmZ1bmN0aW9uKHQsZSl7dm9pZCAwPT09ZSYmKGU9LTEpO3ZhciBuPW1uKHQsXCJsb2dpdHNcIixcInNvZnRtYXhcIixcImZsb2F0MzJcIik7aWYoLTE9PT1lJiYoZT1uLnJhbmstMSksZSE9PW4ucmFuay0xKXRocm93IEVycm9yKFwiU29mdG1heCBhbG9uZyBhIG5vbi1sYXN0IGRpbWVuc2lvbiBpcyBub3QgeWV0IHN1cHBvcnRlZC4gTG9naXRzIHdhcyByYW5rIFwiK24ucmFuaytcIiBhbmQgZGltIHdhcyBcIitlKTtyZXR1cm4gTHQucnVuS2VybmVsRnVuYygoZnVuY3Rpb24odCxyKXt2YXIgbz10LnNvZnRtYXgobixlKTtyZXR1cm4gcihbb10pLG99KSx7bG9naXRzOm59LChmdW5jdGlvbih0LG4pe3ZhciByPW5bMF0sbz10Lm11bChyKTtyZXR1cm57bG9naXRzOmZ1bmN0aW9uKCl7cmV0dXJuIG8uc3ViKG8uc3VtKFtlXSwhMCkubXVsKHIpKX19fSksXCJTb2Z0bWF4XCIse2RpbTplfSxbXSxbITBdKX19KSx5bz1Bbih7bG9nU29mdG1heF86ZnVuY3Rpb24odCxlKXt2b2lkIDA9PT1lJiYoZT0tMSk7dmFyIG49bW4odCxcImxvZ2l0c1wiLFwibG9nU29mdG1heFwiKTtpZigtMT09PWUmJihlPW4ucmFuay0xKSxlIT09bi5yYW5rLTEpdGhyb3cgRXJyb3IoXCJMb2cgU29mdG1heCBhbG9uZyBhIG5vbi1sYXN0IGRpbWVuc2lvbiBpcyBub3QgeWV0IHN1cHBvcnRlZC4gTG9naXRzIHdhcyByYW5rIFwiK24ucmFuaytcIiBhbmQgYXhpcyB3YXMgXCIrZSk7cmV0dXJuIHZvKChmdW5jdGlvbih0LG4pe3ZhciByPXQubWF4KGUsITApLG89dC5zdWIociksYT1vLnRvRmxvYXQoKS5zdWIoby5leHAoKS5zdW0oZSwhMCkubG9nKCkpO24oW2FdKTtyZXR1cm57dmFsdWU6YSxncmFkRnVuYzpmdW5jdGlvbih0LG4pe3ZhciByPW5bMF0uZXhwKCk7cmV0dXJuIHQuc3ViKHQuc3VtKGUsITApLm11bChyKSl9fX0pKShuKX19KSx4bz1mdW5jdGlvbigpe2Z1bmN0aW9uIHQodCxlKXt0aGlzLmJhY2tlbmQ9dCx0aGlzLmRhdGFNb3Zlcj1lLHRoaXMuZGF0YT1uZXcgV2Vha01hcCx0aGlzLmRhdGFJZHNDb3VudD0wfXJldHVybiB0LnByb3RvdHlwZS5nZXQ9ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMuZGF0YS5oYXModCl8fHRoaXMuZGF0YU1vdmVyLm1vdmVEYXRhKHRoaXMuYmFja2VuZCx0KSx0aGlzLmRhdGEuZ2V0KHQpfSx0LnByb3RvdHlwZS5zZXQ9ZnVuY3Rpb24odCxlKXt0aGlzLmRhdGFJZHNDb3VudCsrLHRoaXMuZGF0YS5zZXQodCxlKX0sdC5wcm90b3R5cGUuaGFzPWZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLmRhdGEuaGFzKHQpfSx0LnByb3RvdHlwZS5kZWxldGU9ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMuZGF0YUlkc0NvdW50LS0sdGhpcy5kYXRhLmRlbGV0ZSh0KX0sdC5wcm90b3R5cGUubnVtRGF0YUlkcz1mdW5jdGlvbigpe3JldHVybiB0aGlzLmRhdGFJZHNDb3VudH0sdH0oKSxibz1mdW5jdGlvbigpe2Z1bmN0aW9uIHQoKXt9cmV0dXJuIHQucHJvdG90eXBlLnRpbWU9ZnVuY3Rpb24odCl7cmV0dXJuIHdvKFwidGltZVwiKX0sdC5wcm90b3R5cGUucmVhZD1mdW5jdGlvbih0KXtyZXR1cm4gd28oXCJyZWFkXCIpfSx0LnByb3RvdHlwZS5yZWFkU3luYz1mdW5jdGlvbih0KXtyZXR1cm4gd28oXCJyZWFkU3luY1wiKX0sdC5wcm90b3R5cGUubnVtRGF0YUlkcz1mdW5jdGlvbigpe3JldHVybiB3byhcIm51bURhdGFJZHNcIil9LHQucHJvdG90eXBlLmRpc3Bvc2VEYXRhPWZ1bmN0aW9uKHQpe3JldHVybiB3byhcImRpc3Bvc2VEYXRhXCIpfSx0LnByb3RvdHlwZS53cml0ZT1mdW5jdGlvbih0LGUsbil7cmV0dXJuIHdvKFwid3JpdGVcIil9LHQucHJvdG90eXBlLm1vdmU9ZnVuY3Rpb24odCxlLG4scil7cmV0dXJuIHdvKFwibW92ZVwiKX0sdC5wcm90b3R5cGUubWVtb3J5PWZ1bmN0aW9uKCl7cmV0dXJuIHdvKFwibWVtb3J5XCIpfSx0LnByb3RvdHlwZS5mbG9hdFByZWNpc2lvbj1mdW5jdGlvbigpe3JldHVybiB3byhcImZsb2F0UHJlY2lzaW9uXCIpfSx0LnByb3RvdHlwZS5lcHNpbG9uPWZ1bmN0aW9uKCl7cmV0dXJuIDMyPT09dGhpcy5mbG9hdFByZWNpc2lvbigpPzFlLTc6MWUtNH0sdC5wcm90b3R5cGUuYmF0Y2hNYXRNdWw9ZnVuY3Rpb24odCxlLG4scil7cmV0dXJuIHdvKFwiYmF0Y2hNYXRNdWxcIil9LHQucHJvdG90eXBlLmZ1c2VkQmF0Y2hNYXRNdWw9ZnVuY3Rpb24odCl7dC5hLHQuYix0LnRyYW5zcG9zZUEsdC50cmFuc3Bvc2VCLHQuYmlhcyx0LmFjdGl2YXRpb24sdC5wcmVsdUFjdGl2YXRpb25XZWlnaHRzO3JldHVybiB3byhcImZ1c2VkQmF0Y2hNYXRNdWxcIil9LHQucHJvdG90eXBlLnNsaWNlPWZ1bmN0aW9uKHQsZSxuKXtyZXR1cm4gd28oXCJzbGljZVwiKX0sdC5wcm90b3R5cGUuc3RyaWRlZFNsaWNlPWZ1bmN0aW9uKHQsZSxuLHIpe3JldHVybiB3byhcInN0cmlkZWRTbGljZVwiKX0sdC5wcm90b3R5cGUudW5zdGFjaz1mdW5jdGlvbih0LGUpe3JldHVybiB3byhcInVuc3RhY2tcIil9LHQucHJvdG90eXBlLnJldmVyc2U9ZnVuY3Rpb24odCxlKXtyZXR1cm4gd28oXCJyZXZlcnNlXCIpfSx0LnByb3RvdHlwZS5jb25jYXQ9ZnVuY3Rpb24odCxlKXtyZXR1cm4gd28oXCJjb25jYXRcIil9LHQucHJvdG90eXBlLm5lZz1mdW5jdGlvbih0KXtyZXR1cm4gd28oXCJuZWdcIil9LHQucHJvdG90eXBlLmFkZD1mdW5jdGlvbih0LGUpe3JldHVybiB3byhcImFkZFwiKX0sdC5wcm90b3R5cGUuYWRkTj1mdW5jdGlvbih0KXtyZXR1cm4gd28oXCJhZGROXCIpfSx0LnByb3RvdHlwZS5zdWJ0cmFjdD1mdW5jdGlvbih0LGUpe3JldHVybiB3byhcInN1YnRyYWN0XCIpfSx0LnByb3RvdHlwZS5tdWx0aXBseT1mdW5jdGlvbih0LGUpe3JldHVybiB3byhcIm11bHRpcGx5XCIpfSx0LnByb3RvdHlwZS5yZWFsRGl2aWRlPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIHdvKFwicmVhbERpdmlkZVwiKX0sdC5wcm90b3R5cGUuZmxvb3JEaXY9ZnVuY3Rpb24odCxlKXtyZXR1cm4gd28oXCJmbG9vckRpdlwiKX0sdC5wcm90b3R5cGUuc3VtPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIHdvKFwic3VtXCIpfSx0LnByb3RvdHlwZS5wcm9kPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIHdvKFwicHJvZFwiKX0sdC5wcm90b3R5cGUudW5zb3J0ZWRTZWdtZW50U3VtPWZ1bmN0aW9uKHQsZSxuKXtyZXR1cm4gd28oXCJ1bnNvcnRlZFNlZ21lbnRTdW1cIil9LHQucHJvdG90eXBlLmFyZ01pbj1mdW5jdGlvbih0LGUpe3JldHVybiB3byhcImFyZ01pblwiKX0sdC5wcm90b3R5cGUuYXJnTWF4PWZ1bmN0aW9uKHQsZSl7cmV0dXJuIHdvKFwiYXJnTWF4XCIpfSx0LnByb3RvdHlwZS5lcXVhbD1mdW5jdGlvbih0LGUpe3JldHVybiB3byhcImVxdWFsXCIpfSx0LnByb3RvdHlwZS5ub3RFcXVhbD1mdW5jdGlvbih0LGUpe3JldHVybiB3byhcIm5vdEVxdWFsXCIpfSx0LnByb3RvdHlwZS5sZXNzPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIHdvKFwibGVzc1wiKX0sdC5wcm90b3R5cGUubGVzc0VxdWFsPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIHdvKFwibGVzc0VxdWFsXCIpfSx0LnByb3RvdHlwZS5ncmVhdGVyPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIHdvKFwiZ3JlYXRlclwiKX0sdC5wcm90b3R5cGUuZ3JlYXRlckVxdWFsPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIHdvKFwiZ3JlYXRlckVxdWFsXCIpfSx0LnByb3RvdHlwZS5sb2dpY2FsTm90PWZ1bmN0aW9uKHQpe3JldHVybiB3byhcImxvZ2ljYWxOb3RcIil9LHQucHJvdG90eXBlLmxvZ2ljYWxBbmQ9ZnVuY3Rpb24odCxlKXtyZXR1cm4gd28oXCJsb2dpY2FsQW5kXCIpfSx0LnByb3RvdHlwZS5sb2dpY2FsT3I9ZnVuY3Rpb24odCxlKXtyZXR1cm4gd28oXCJsb2dpY2FsT3JcIil9LHQucHJvdG90eXBlLndoZXJlPWZ1bmN0aW9uKHQpe3JldHVybiB3byhcIndoZXJlXCIpfSx0LnByb3RvdHlwZS5zZWxlY3Q9ZnVuY3Rpb24odCxlLG4pe3JldHVybiB3byhcInNlbGVjdFwiKX0sdC5wcm90b3R5cGUudG9waz1mdW5jdGlvbih0LGUsbil7cmV0dXJuIHdvKFwidG9wa1wiKX0sdC5wcm90b3R5cGUubWluPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIHdvKFwibWluXCIpfSx0LnByb3RvdHlwZS5taW5pbXVtPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIHdvKFwibWluaW11bVwiKX0sdC5wcm90b3R5cGUubW9kPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIHdvKFwibW9kXCIpfSx0LnByb3RvdHlwZS5tYXg9ZnVuY3Rpb24odCxlKXtyZXR1cm4gd28oXCJtYXhcIil9LHQucHJvdG90eXBlLm1heGltdW09ZnVuY3Rpb24odCxlKXtyZXR1cm4gd28oXCJtYXhpbXVtXCIpfSx0LnByb3RvdHlwZS5hbGw9ZnVuY3Rpb24odCxlKXtyZXR1cm4gd28oXCJhbGxcIil9LHQucHJvdG90eXBlLmFueT1mdW5jdGlvbih0LGUpe3JldHVybiB3byhcImFueVwiKX0sdC5wcm90b3R5cGUuc3F1YXJlZERpZmZlcmVuY2U9ZnVuY3Rpb24odCxlKXtyZXR1cm4gd28oXCJzcXVhcmVkRGlmZmVyZW5jZVwiKX0sdC5wcm90b3R5cGUuY2VpbD1mdW5jdGlvbih0KXtyZXR1cm4gd28oXCJjZWlsXCIpfSx0LnByb3RvdHlwZS5mbG9vcj1mdW5jdGlvbih0KXtyZXR1cm4gd28oXCJmbG9vclwiKX0sdC5wcm90b3R5cGUucm91bmQ9ZnVuY3Rpb24odCl7cmV0dXJuIHdvKFwicm91bmRcIil9LHQucHJvdG90eXBlLnNpZ249ZnVuY3Rpb24odCl7cmV0dXJuIHdvKFwic2lnblwiKX0sdC5wcm90b3R5cGUuaXNOYU49ZnVuY3Rpb24odCl7cmV0dXJuIHdvKFwiaXNOYU5cIil9LHQucHJvdG90eXBlLmlzSW5mPWZ1bmN0aW9uKHQpe3JldHVybiB3byhcImlzSW5mXCIpfSx0LnByb3RvdHlwZS5pc0Zpbml0ZT1mdW5jdGlvbih0KXtyZXR1cm4gd28oXCJpc0Zpbml0ZVwiKX0sdC5wcm90b3R5cGUucG93PWZ1bmN0aW9uKHQsZSl7cmV0dXJuIHdvKFwicG93XCIpfSx0LnByb3RvdHlwZS5leHA9ZnVuY3Rpb24odCl7cmV0dXJuIHdvKFwiZXhwXCIpfSx0LnByb3RvdHlwZS5leHBtMT1mdW5jdGlvbih0KXtyZXR1cm4gd28oXCJleHBtMVwiKX0sdC5wcm90b3R5cGUuc29mdG1heD1mdW5jdGlvbih0LGUpe3JldHVybiB3byhcInNvZnRtYXhcIil9LHQucHJvdG90eXBlLmxvZz1mdW5jdGlvbih0KXtyZXR1cm4gd28oXCJsb2dcIil9LHQucHJvdG90eXBlLmxvZzFwPWZ1bmN0aW9uKHQpe3JldHVybiB3byhcImxvZzFwXCIpfSx0LnByb3RvdHlwZS5zcXJ0PWZ1bmN0aW9uKHQpe3JldHVybiB3byhcInNxcnRcIil9LHQucHJvdG90eXBlLnJzcXJ0PWZ1bmN0aW9uKHQpe3JldHVybiB3byhcInJzcXJ0XCIpfSx0LnByb3RvdHlwZS5zcXVhcmU9ZnVuY3Rpb24odCl7cmV0dXJuIHdvKFwic3F1YXJlXCIpfSx0LnByb3RvdHlwZS5yZWNpcHJvY2FsPWZ1bmN0aW9uKHQpe3JldHVybiB3byhcInJlY2lwcm9jYWxcIil9LHQucHJvdG90eXBlLnJlbHU9ZnVuY3Rpb24odCl7cmV0dXJuIHdvKFwicmVsdVwiKX0sdC5wcm90b3R5cGUucmVsdTY9ZnVuY3Rpb24odCl7cmV0dXJuIHdvKFwicmVsdTZcIil9LHQucHJvdG90eXBlLnByZWx1PWZ1bmN0aW9uKHQsZSl7cmV0dXJuIHdvKFwicHJlbHVcIil9LHQucHJvdG90eXBlLmVsdT1mdW5jdGlvbih0KXtyZXR1cm4gd28oXCJlbHVcIil9LHQucHJvdG90eXBlLmVsdURlcj1mdW5jdGlvbih0LGUpe3JldHVybiB3byhcImVsdURlclwiKX0sdC5wcm90b3R5cGUuc2VsdT1mdW5jdGlvbih0KXtyZXR1cm4gd28oXCJzZWx1XCIpfSx0LnByb3RvdHlwZS5pbnQ9ZnVuY3Rpb24odCl7cmV0dXJuIHdvKFwiaW50XCIpfSx0LnByb3RvdHlwZS5jbGlwPWZ1bmN0aW9uKHQsZSxuKXtyZXR1cm4gd28oXCJjbGlwXCIpfSx0LnByb3RvdHlwZS5hYnM9ZnVuY3Rpb24odCl7cmV0dXJuIHdvKFwiYWJzXCIpfSx0LnByb3RvdHlwZS5jb21wbGV4QWJzPWZ1bmN0aW9uKHQpe3JldHVybiB3byhcImNvbXBsZXhBYnNcIil9LHQucHJvdG90eXBlLnNpZ21vaWQ9ZnVuY3Rpb24odCl7cmV0dXJuIHdvKFwic2lnbW9pZFwiKX0sdC5wcm90b3R5cGUuc29mdHBsdXM9ZnVuY3Rpb24odCl7cmV0dXJuIHdvKFwic29mdHBsdXNcIil9LHQucHJvdG90eXBlLnNpbj1mdW5jdGlvbih0KXtyZXR1cm4gd28oXCJzaW5cIil9LHQucHJvdG90eXBlLmNvcz1mdW5jdGlvbih0KXtyZXR1cm4gd28oXCJjb3NcIil9LHQucHJvdG90eXBlLnRhbj1mdW5jdGlvbih0KXtyZXR1cm4gd28oXCJ0YW5cIil9LHQucHJvdG90eXBlLmFzaW49ZnVuY3Rpb24odCl7cmV0dXJuIHdvKFwiYXNpblwiKX0sdC5wcm90b3R5cGUuYWNvcz1mdW5jdGlvbih0KXtyZXR1cm4gd28oXCJhY29zXCIpfSx0LnByb3RvdHlwZS5hdGFuPWZ1bmN0aW9uKHQpe3JldHVybiB3byhcImF0YW5cIil9LHQucHJvdG90eXBlLmF0YW4yPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIHdvKFwiYXRhbjJcIil9LHQucHJvdG90eXBlLnNpbmg9ZnVuY3Rpb24odCl7cmV0dXJuIHdvKFwic2luaFwiKX0sdC5wcm90b3R5cGUuY29zaD1mdW5jdGlvbih0KXtyZXR1cm4gd28oXCJjb3NoXCIpfSx0LnByb3RvdHlwZS50YW5oPWZ1bmN0aW9uKHQpe3JldHVybiB3byhcInRhbmhcIil9LHQucHJvdG90eXBlLmFzaW5oPWZ1bmN0aW9uKHQpe3JldHVybiB3byhcImFzaW5oXCIpfSx0LnByb3RvdHlwZS5hY29zaD1mdW5jdGlvbih0KXtyZXR1cm4gd28oXCJhY29zaFwiKX0sdC5wcm90b3R5cGUuYXRhbmg9ZnVuY3Rpb24odCl7cmV0dXJuIHdvKFwiYXRhbmhcIil9LHQucHJvdG90eXBlLmVyZj1mdW5jdGlvbih0KXtyZXR1cm4gd28oXCJlcmZcIil9LHQucHJvdG90eXBlLnN0ZXA9ZnVuY3Rpb24odCxlKXtyZXR1cm4gd28oXCJzdGVwXCIpfSx0LnByb3RvdHlwZS5mdXNlZENvbnYyZD1mdW5jdGlvbih0KXt0LmlucHV0LHQuZmlsdGVyLHQuY29udkluZm8sdC5iaWFzLHQuYWN0aXZhdGlvbix0LnByZWx1QWN0aXZhdGlvbldlaWdodHM7cmV0dXJuIHdvKFwiZnVzZWRDb252MmRcIil9LHQucHJvdG90eXBlLmNvbnYyZD1mdW5jdGlvbih0LGUsbil7cmV0dXJuIHdvKFwiY29udjJkXCIpfSx0LnByb3RvdHlwZS5jb252MmREZXJJbnB1dD1mdW5jdGlvbih0LGUsbil7cmV0dXJuIHdvKFwiY29udjJkRGVySW5wdXRcIil9LHQucHJvdG90eXBlLmNvbnYyZERlckZpbHRlcj1mdW5jdGlvbih0LGUsbil7cmV0dXJuIHdvKFwiY29udjJkRGVyRmlsdGVyXCIpfSx0LnByb3RvdHlwZS5mdXNlZERlcHRod2lzZUNvbnYyRD1mdW5jdGlvbih0KXt0LmlucHV0LHQuZmlsdGVyLHQuY29udkluZm8sdC5iaWFzLHQuYWN0aXZhdGlvbix0LnByZWx1QWN0aXZhdGlvbldlaWdodHM7cmV0dXJuIHdvKFwiZnVzZWREZXB0aHdpc2VDb252MkRcIil9LHQucHJvdG90eXBlLmRlcHRod2lzZUNvbnYyRD1mdW5jdGlvbih0LGUsbil7cmV0dXJuIHdvKFwiZGVwdGh3aXNlQ29udjJEXCIpfSx0LnByb3RvdHlwZS5kZXB0aHdpc2VDb252MkREZXJJbnB1dD1mdW5jdGlvbih0LGUsbil7cmV0dXJuIHdvKFwiZGVwdGh3aXNlQ29udjJERGVySW5wdXRcIil9LHQucHJvdG90eXBlLmRlcHRod2lzZUNvbnYyRERlckZpbHRlcj1mdW5jdGlvbih0LGUsbil7cmV0dXJuIHdvKFwiZGVwdGh3aXNlQ29udjJERGVyRmlsdGVyXCIpfSx0LnByb3RvdHlwZS5jb252M2Q9ZnVuY3Rpb24odCxlLG4pe3JldHVybiB3byhcImNvbnYzZFwiKX0sdC5wcm90b3R5cGUuY29udjNkRGVySW5wdXQ9ZnVuY3Rpb24odCxlLG4pe3JldHVybiB3byhcImNvbnYzZERlcklucHV0XCIpfSx0LnByb3RvdHlwZS5jb252M2REZXJGaWx0ZXI9ZnVuY3Rpb24odCxlLG4pe3JldHVybiB3byhcImNvbnYzZERlckZpbHRlclwiKX0sdC5wcm90b3R5cGUubWF4UG9vbD1mdW5jdGlvbih0LGUpe3JldHVybiB3byhcIm1heFBvb2xcIil9LHQucHJvdG90eXBlLm1heFBvb2xCYWNrcHJvcD1mdW5jdGlvbih0LGUsbixyKXtyZXR1cm4gd28oXCJtYXhQb29sQmFja3Byb3BcIil9LHQucHJvdG90eXBlLmF2Z1Bvb2w9ZnVuY3Rpb24odCxlKXtyZXR1cm4gd28oXCJhdmdQb29sXCIpfSx0LnByb3RvdHlwZS5hdmdQb29sQmFja3Byb3A9ZnVuY3Rpb24odCxlLG4pe3JldHVybiB3byhcImF2Z1Bvb2xCYWNrcHJvcFwiKX0sdC5wcm90b3R5cGUuYXZnUG9vbDNkPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIHdvKFwiYXZnUG9vbDNkXCIpfSx0LnByb3RvdHlwZS5hdmdQb29sM2RCYWNrcHJvcD1mdW5jdGlvbih0LGUsbil7cmV0dXJuIHdvKFwiYXZnUG9vbDNkQmFja3Byb3BcIil9LHQucHJvdG90eXBlLm1heFBvb2wzZD1mdW5jdGlvbih0LGUpe3JldHVybiB3byhcIm1heFBvb2wzZFwiKX0sdC5wcm90b3R5cGUubWF4UG9vbDNkQmFja3Byb3A9ZnVuY3Rpb24odCxlLG4scil7cmV0dXJuIHdvKFwibWF4UG9vbDNkQmFja3Byb3BcIil9LHQucHJvdG90eXBlLnJlc2hhcGU9ZnVuY3Rpb24odCxlKXtyZXR1cm4gd28oXCJyZXNoYXBlXCIpfSx0LnByb3RvdHlwZS5jYXN0PWZ1bmN0aW9uKHQsZSl7cmV0dXJuIHdvKFwiY2FzdFwiKX0sdC5wcm90b3R5cGUudGlsZT1mdW5jdGlvbih0LGUpe3JldHVybiB3byhcInRpbGVcIil9LHQucHJvdG90eXBlLnBhZD1mdW5jdGlvbih0LGUsbil7cmV0dXJuIHdvKFwicGFkXCIpfSx0LnByb3RvdHlwZS50cmFuc3Bvc2U9ZnVuY3Rpb24odCxlKXtyZXR1cm4gd28oXCJ0cmFuc3Bvc2VcIil9LHQucHJvdG90eXBlLmdhdGhlcj1mdW5jdGlvbih0LGUsbil7cmV0dXJuIHdvKFwiZ2F0aGVyXCIpfSx0LnByb3RvdHlwZS5nYXRoZXJORD1mdW5jdGlvbih0LGUpe3JldHVybiB3byhcImdhdGhlck5EXCIpfSx0LnByb3RvdHlwZS5zY2F0dGVyTkQ9ZnVuY3Rpb24odCxlLG4pe3JldHVybiB3byhcInNjYXR0ZXJORFwiKX0sdC5wcm90b3R5cGUuYmF0Y2hUb1NwYWNlTkQ9ZnVuY3Rpb24odCxlLG4pe3JldHVybiB3byhcImJhdGNoVG9TcGFjZU5EXCIpfSx0LnByb3RvdHlwZS5zcGFjZVRvQmF0Y2hORD1mdW5jdGlvbih0LGUsbil7cmV0dXJuIHdvKFwic3BhY2VUb0JhdGNoTkRcIil9LHQucHJvdG90eXBlLnJlc2l6ZUJpbGluZWFyPWZ1bmN0aW9uKHQsZSxuLHIpe3JldHVybiB3byhcInJlc2l6ZUJpbGluZWFyXCIpfSx0LnByb3RvdHlwZS5yZXNpemVCaWxpbmVhckJhY2twcm9wPWZ1bmN0aW9uKHQsZSxuKXtyZXR1cm4gd28oXCJyZXNpemVCaWxpbmVhckJhY2twcm9wXCIpfSx0LnByb3RvdHlwZS5yZXNpemVOZWFyZXN0TmVpZ2hib3I9ZnVuY3Rpb24odCxlLG4scil7cmV0dXJuIHdvKFwicmVzaXplTmVhcmVzdE5laWdoYm9yXCIpfSx0LnByb3RvdHlwZS5yZXNpemVOZWFyZXN0TmVpZ2hib3JCYWNrcHJvcD1mdW5jdGlvbih0LGUsbil7cmV0dXJuIHdvKFwicmVzaXplTmVhcmVzdE5laWdoYm9yQmFja3Byb3BcIil9LHQucHJvdG90eXBlLmJhdGNoTm9ybWFsaXphdGlvbj1mdW5jdGlvbih0LGUsbixyLG8sYSl7cmV0dXJuIHdvKFwiYmF0Y2hOb3JtYWxpemF0aW9uXCIpfSx0LnByb3RvdHlwZS5sb2NhbFJlc3BvbnNlTm9ybWFsaXphdGlvbjREPWZ1bmN0aW9uKHQsZSxuLHIsbyl7cmV0dXJuIHdvKFwibG9jYWxSZXNwb25zZU5vcm1hbGl6YXRpb240RFwiKX0sdC5wcm90b3R5cGUuTFJOR3JhZD1mdW5jdGlvbih0LGUsbixyLG8sYSxpKXtyZXR1cm4gd28oXCJMUk5HcmFkXCIpfSx0LnByb3RvdHlwZS5tdWx0aW5vbWlhbD1mdW5jdGlvbih0LGUsbixyKXtyZXR1cm4gd28oXCJtdWx0aW5vbWlhbFwiKX0sdC5wcm90b3R5cGUub25lSG90PWZ1bmN0aW9uKHQsZSxuLHIpe3JldHVybiB3byhcIm9uZUhvdFwiKX0sdC5wcm90b3R5cGUuY3Vtc3VtPWZ1bmN0aW9uKHQsZSxuLHIpe3JldHVybiB3byhcImN1bXN1bVwiKX0sdC5wcm90b3R5cGUubm9uTWF4U3VwcHJlc3Npb249ZnVuY3Rpb24odCxlLG4scixvKXtyZXR1cm4gd28oXCJub25NYXhTdXBwcmVzc2lvblwiKX0sdC5wcm90b3R5cGUuZmZ0PWZ1bmN0aW9uKHQpe3JldHVybiB3byhcImZmdFwiKX0sdC5wcm90b3R5cGUuaWZmdD1mdW5jdGlvbih0KXtyZXR1cm4gd28oXCJpZmZ0XCIpfSx0LnByb3RvdHlwZS5jb21wbGV4PWZ1bmN0aW9uKHQsZSl7cmV0dXJuIHdvKFwiY29tcGxleFwiKX0sdC5wcm90b3R5cGUucmVhbD1mdW5jdGlvbih0KXtyZXR1cm4gd28oXCJyZWFsXCIpfSx0LnByb3RvdHlwZS5pbWFnPWZ1bmN0aW9uKHQpe3JldHVybiB3byhcImltYWdcIil9LHQucHJvdG90eXBlLmNyb3BBbmRSZXNpemU9ZnVuY3Rpb24odCxlLG4scixvLGEpe3JldHVybiB3byhcImNyb3BBbmRSZXNpemVcIil9LHQucHJvdG90eXBlLmRlcHRoVG9TcGFjZT1mdW5jdGlvbih0LGUsbil7cmV0dXJuIHdvKFwiZGVwdGhUb1NwYWNlXCIpfSx0LnByb3RvdHlwZS5zcGxpdD1mdW5jdGlvbih0LGUsbil7cmV0dXJuIHdvKFwic3BsaXRcIil9LHQucHJvdG90eXBlLnNwYXJzZVRvRGVuc2U9ZnVuY3Rpb24odCxlLG4scil7cmV0dXJuIHdvKFwic3BhcnNlVG9EZW5zZVwiKX0sdC5wcm90b3R5cGUuZGlhZz1mdW5jdGlvbih0KXtyZXR1cm4gd28oXCJkaWFnXCIpfSx0LnByb3RvdHlwZS5maWxsPWZ1bmN0aW9uKHQsZSxuKXtyZXR1cm4gd28oXCJmaWxsXCIpfSx0LnByb3RvdHlwZS5vbmVzTGlrZT1mdW5jdGlvbih0KXtyZXR1cm4gd28oXCJvbmVzTGlrZVwiKX0sdC5wcm90b3R5cGUuemVyb3NMaWtlPWZ1bmN0aW9uKHQpe3JldHVybiB3byhcInplcm9zTGlrZVwiKX0sdC5wcm90b3R5cGUubGluc3BhY2U9ZnVuY3Rpb24odCxlLG4pe3JldHVybiB3byhcImxpbnNwYWNlXCIpfSx0LnByb3RvdHlwZS5kaXNwb3NlPWZ1bmN0aW9uKCl7cmV0dXJuIHdvKFwiZGlzcG9zZVwiKX0sdH0oKTtmdW5jdGlvbiB3byh0KXt0aHJvdyBuZXcgRXJyb3IoXCInXCIrdCtcIicgbm90IHlldCBpbXBsZW1lbnRlZCBvciBub3QgZm91bmQgaW4gdGhlIHJlZ2lzdHJ5LiBEaWQgeW91IGZvcmdldCB0byBpbXBvcnQgdGhlIGtlcm5lbD9cIil9ZnVuY3Rpb24gQ28odCxlKXtmb3IodmFyIG49dC5sZW5ndGgscj1bXSxvPTA7bzxuO28rKyl7dmFyIGE9bi0xLW8saT10W2FdfHwxOyhlW2UubGVuZ3RoLTEtb118fDEpPjEmJjE9PT1pJiZyLnVuc2hpZnQoYSl9cmV0dXJuIHJ9ZnVuY3Rpb24gRW8odCxlKXtmb3IodmFyIG49W10scj0wO3I8ZS5sZW5ndGg7cisrKXt2YXIgbz10W3QubGVuZ3RoLXItMV0sYT1lLmxlbmd0aC1yLTEsaT1lW2FdOyhudWxsPT1vfHwxPT09byYmaT4xKSYmbi51bnNoaWZ0KGEpfXJldHVybiBufWZ1bmN0aW9uIFJvKHQsZSl7Zm9yKHZhciBuPVtdLHI9TWF0aC5tYXgodC5sZW5ndGgsZS5sZW5ndGgpLG89MDtvPHI7bysrKXt2YXIgYT10W3QubGVuZ3RoLW8tMV07bnVsbD09YSYmKGE9MSk7dmFyIGk9ZVtlLmxlbmd0aC1vLTFdO2lmKG51bGw9PWkmJihpPTEpLDE9PT1hKW4udW5zaGlmdChpKTtlbHNlIGlmKDE9PT1pKW4udW5zaGlmdChhKTtlbHNle2lmKGEhPT1pKXRocm93IEVycm9yKFwiT3BlcmFuZHMgY291bGQgbm90IGJlIGJyb2FkY2FzdCB0b2dldGhlciB3aXRoIHNoYXBlcyBcIit0K1wiIGFuZCBcIitlK1wiLlwiKTtuLnVuc2hpZnQoYSl9fXJldHVybiBufWZ1bmN0aW9uIElvKHQsZSxuLHIsbyxhLGkpe3ZvaWQgMD09PWkmJihpPVwiY2hhbm5lbHNMYXN0XCIpO3ZhciBzLHU9VG8oZSksYz11WzBdLGw9dVsxXTtpZihcImNoYW5uZWxzTGFzdFwiPT09aSlzPVtjLGwsdFszXSx0WzNdXTtlbHNle2lmKFwiY2hhbm5lbHNGaXJzdFwiIT09aSl0aHJvdyBuZXcgRXJyb3IoXCJVbmtub3duIGRhdGFGb3JtYXQgXCIraSk7cz1bYyxsLHRbMV0sdFsxXV19cmV0dXJuIFNvKHQscyxuLHIsbyxhLCExLGkpfWZ1bmN0aW9uIGtvKHQsZSxuLHIsbyxhLGkpe3ZvaWQgMD09PWkmJihpPVwiTkRIV0NcIik7dmFyIHMsdSxjPU5vKGUpLGw9Y1swXSxoPWNbMV0sZj1jWzJdO2lmKFwiTkRIV0NcIj09PWkpdT1cImNoYW5uZWxzTGFzdFwiLHM9W2wsaCxmLHRbNF0sdFs0XV07ZWxzZXtpZihcIk5DREhXXCIhPT1pKXRocm93IG5ldyBFcnJvcihcIlVua25vd24gZGF0YUZvcm1hdCBcIitpKTt1PVwiY2hhbm5lbHNGaXJzdFwiLHM9W2wsaCxmLHRbMV0sdFsxXV19cmV0dXJuIEFvKHQscyxuLHIsbywhMSx1LGEpfWZ1bmN0aW9uIFNvKHQsZSxuLHIsbyxhLGkscyl7dm9pZCAwPT09aSYmKGk9ITEpLHZvaWQgMD09PXMmJihzPVwiY2hhbm5lbHNMYXN0XCIpO3ZhciB1PVstMSwtMSwtMSwtMV0sYz11WzBdLGw9dVsxXSxoPXVbMl0sZj11WzNdO2lmKFwiY2hhbm5lbHNMYXN0XCI9PT1zKWM9dFswXSxsPXRbMV0saD10WzJdLGY9dFszXTtlbHNle2lmKFwiY2hhbm5lbHNGaXJzdFwiIT09cyl0aHJvdyBuZXcgRXJyb3IoXCJVbmtub3duIGRhdGFGb3JtYXQgXCIrcyk7Yz10WzBdLGY9dFsxXSxsPXRbMl0saD10WzNdfXZhciBkLHA9ZVswXSx2PWVbMV0sbT1lWzNdLGc9VG8obikseT1nWzBdLHg9Z1sxXSxiPVRvKHIpLHc9YlswXSxFPWJbMV0sUj1GbyhwLHcpLEk9Rm8odixFKSxrPWZ1bmN0aW9uKHQsZSxuLHIsbyxhLGkscyl7dmFyIHUsYyxsO2lmKFwibnVtYmVyXCI9PXR5cGVvZiB0KXt1PXt0b3A6dCxib3R0b206dCxsZWZ0OnQscmlnaHQ6dCx0eXBlOjA9PT10P1wiVkFMSURcIjpcIk5VTUJFUlwifTt2YXIgaD1mdW5jdGlvbih0LGUsbixyLG8pe251bGw9PXImJihyPURvKHQsZSxuKSk7dmFyIGE9dFswXSxpPXRbMV0scz1fbygoYS1lKzIqcikvbisxLG8pO0MoQShzKSwoZnVuY3Rpb24oKXtyZXR1cm5cIlRoZSBvdXRwdXQgIyBvZiByb3dzIChcIitzK1wiKSBtdXN0IGJlIGFuIGludGVnZXIuIENoYW5nZSB0aGUgc3RyaWRlIGFuZC9vciB6ZXJvIHBhZCBwYXJhbWV0ZXJzXCJ9KSk7dmFyIHU9X28oKGktZSsyKnIpL24rMSxvKTtyZXR1cm4gQyhBKHUpLChmdW5jdGlvbigpe3JldHVyblwiVGhlIG91dHB1dCAjIG9mIGNvbHVtbnMgKFwiK3UrXCIpIG11c3QgYmUgYW4gaW50ZWdlci4gQ2hhbmdlIHRoZSBzdHJpZGUgYW5kL29yIHplcm8gcGFkIHBhcmFtZXRlcnNcIn0pKSxbcyx1XX0oW2Usbl0sYSxyLHQscyk7Yz1oWzBdLGw9aFsxXX1lbHNlIGlmKFwic2FtZVwiPT09dCl7Yz1NYXRoLmNlaWwoZS9yKSxsPU1hdGguY2VpbChuL28pO3ZhciBmPU1hdGgubWF4KDAsKGMtMSkqcithLWUpLGQ9TWF0aC5tYXgoMCwobC0xKSpvK2ktbikscD1NYXRoLmZsb29yKGYvMiksdj1mLXAsbT1NYXRoLmZsb29yKGQvMik7dT17dG9wOnAsYm90dG9tOnYsbGVmdDptLHJpZ2h0OmQtbSx0eXBlOlwiU0FNRVwifX1lbHNle2lmKFwidmFsaWRcIiE9PXQpdGhyb3cgRXJyb3IoXCJVbmtub3duIHBhZGRpbmcgcGFyYW1ldGVyOiBcIit0KTt1PXt0b3A6MCxib3R0b206MCxsZWZ0OjAscmlnaHQ6MCx0eXBlOlwiVkFMSURcIn0sYz1NYXRoLmNlaWwoKGUtYSsxKS9yKSxsPU1hdGguY2VpbCgobi1pKzEpL28pfXJldHVybntwYWRJbmZvOnUsb3V0SGVpZ2h0OmMsb3V0V2lkdGg6bH19KG8sbCxoLHkseCxSLEksYSksUz1rLnBhZEluZm8sRD1rLm91dEhlaWdodCxUPWsub3V0V2lkdGgsTj1pP20qZjptO3JldHVyblwiY2hhbm5lbHNGaXJzdFwiPT09cz9kPVtjLE4sRCxUXTpcImNoYW5uZWxzTGFzdFwiPT09cyYmKGQ9W2MsRCxULE5dKSx7YmF0Y2hTaXplOmMsZGF0YUZvcm1hdDpzLGluSGVpZ2h0OmwsaW5XaWR0aDpoLGluQ2hhbm5lbHM6ZixvdXRIZWlnaHQ6RCxvdXRXaWR0aDpULG91dENoYW5uZWxzOk4scGFkSW5mbzpTLHN0cmlkZUhlaWdodDp5LHN0cmlkZVdpZHRoOngsZmlsdGVySGVpZ2h0OnAsZmlsdGVyV2lkdGg6dixlZmZlY3RpdmVGaWx0ZXJIZWlnaHQ6UixlZmZlY3RpdmVGaWx0ZXJXaWR0aDpJLGRpbGF0aW9uSGVpZ2h0OncsZGlsYXRpb25XaWR0aDpFLGluU2hhcGU6dCxvdXRTaGFwZTpkLGZpbHRlclNoYXBlOmV9fWZ1bmN0aW9uIEFvKHQsZSxuLHIsbyxhLGkscyl7dm9pZCAwPT09YSYmKGE9ITEpLHZvaWQgMD09PWkmJihpPVwiY2hhbm5lbHNMYXN0XCIpO3ZhciB1PVstMSwtMSwtMSwtMSwtMV0sYz11WzBdLGw9dVsxXSxoPXVbMl0sZj11WzNdLGQ9dVs0XTtpZihcImNoYW5uZWxzTGFzdFwiPT09aSljPXRbMF0sbD10WzFdLGg9dFsyXSxmPXRbM10sZD10WzRdO2Vsc2V7aWYoXCJjaGFubmVsc0ZpcnN0XCIhPT1pKXRocm93IG5ldyBFcnJvcihcIlVua25vd24gZGF0YUZvcm1hdCBcIitpKTtjPXRbMF0sZD10WzFdLGw9dFsyXSxoPXRbM10sZj10WzRdfXZhciBwLHY9ZVswXSxtPWVbMV0sZz1lWzJdLHk9ZVs0XSx4PU5vKG4pLGI9eFswXSx3PXhbMV0sRT14WzJdLFI9Tm8ociksST1SWzBdLGs9UlsxXSxTPVJbMl0sRD1Gbyh2LEkpLFQ9Rm8obSxrKSxOPUZvKGcsUyksRj1mdW5jdGlvbih0LGUsbixyLG8sYSxpLHMsdSxjLGwpe3ZhciBoLGYsZCxwO2lmKFwibnVtYmVyXCI9PXR5cGVvZiB0KXtoPXt0b3A6dCxib3R0b206dCxsZWZ0OnQscmlnaHQ6dCxmcm9udDp0LGJhY2s6dCx0eXBlOjA9PT10P1wiVkFMSURcIjpcIk5VTUJFUlwifTt2YXIgdj1mdW5jdGlvbih0LGUsbixyLG8sYSl7bnVsbD09byYmKG89RG8odCxlLHIpKTt2YXIgaT10WzBdLHM9dFsxXSx1PXRbMl0sYz1fbygoaS1lKzIqbykvcisxLGEpO0MoQShjKSwoZnVuY3Rpb24oKXtyZXR1cm5cIlRoZSBvdXRwdXQgIyBvZiBkZXB0aHMgKFwiK2MrXCIpIG11c3QgYmUgYW4gaW50ZWdlci4gQ2hhbmdlIHRoZSBzdHJpZGUgYW5kL29yIHplcm8gcGFkIHBhcmFtZXRlcnNcIn0pKTt2YXIgbD1fbygocy1lKzIqbykvcisxLGEpO0MoQShsKSwoZnVuY3Rpb24oKXtyZXR1cm5cIlRoZSBvdXRwdXQgIyBvZiByb3dzIChcIitsK1wiKSBtdXN0IGJlIGFuIGludGVnZXIuIENoYW5nZSB0aGUgc3RyaWRlIGFuZC9vciB6ZXJvIHBhZCBwYXJhbWV0ZXJzXCJ9KSk7dmFyIGg9X28oKHUtZSsyKm8pL3IrMSxhKTtyZXR1cm4gQyhBKGgpLChmdW5jdGlvbigpe3JldHVyblwiVGhlIG91dHB1dCAjIG9mIGNvbHVtbnMgKFwiK2grXCIpIG11c3QgYmUgYW4gaW50ZWdlci4gQ2hhbmdlIHRoZSBzdHJpZGUgYW5kL29yIHplcm8gcGFkIHBhcmFtZXRlcnNcIn0pKSxbYyxsLGgsbl19KFtlLG4sciwxXSxzLDEsbyx0LGwpO2Y9dlswXSxkPXZbMV0scD12WzJdfWVsc2UgaWYoXCJzYW1lXCI9PT10KXtmPU1hdGguY2VpbChlL28pLGQ9TWF0aC5jZWlsKG4vYSkscD1NYXRoLmNlaWwoci9pKTt2YXIgbT0oZi0xKSpvK3MtZSxnPShkLTEpKmErdS1uLHk9KHAtMSkqaStjLXIseD1NYXRoLmZsb29yKG0vMiksYj1tLXgsdz1NYXRoLmZsb29yKGcvMiksRT1nLXcsUj1NYXRoLmZsb29yKHkvMik7aD17dG9wOncsYm90dG9tOkUsbGVmdDpSLHJpZ2h0OnktUixmcm9udDp4LGJhY2s6Yix0eXBlOlwiU0FNRVwifX1lbHNle2lmKFwidmFsaWRcIiE9PXQpdGhyb3cgRXJyb3IoXCJVbmtub3duIHBhZGRpbmcgcGFyYW1ldGVyOiBcIit0KTtoPXt0b3A6MCxib3R0b206MCxsZWZ0OjAscmlnaHQ6MCxmcm9udDowLGJhY2s6MCx0eXBlOlwiVkFMSURcIn0sZj1NYXRoLmNlaWwoKGUtcysxKS9vKSxkPU1hdGguY2VpbCgobi11KzEpL2EpLHA9TWF0aC5jZWlsKChyLWMrMSkvaSl9cmV0dXJue3BhZEluZm86aCxvdXREZXB0aDpmLG91dEhlaWdodDpkLG91dFdpZHRoOnB9fShvLGwsaCxmLGIsdyxFLEQsVCxOLHMpLF89Ri5wYWRJbmZvLE89Ri5vdXREZXB0aCxNPUYub3V0SGVpZ2h0LEI9Ri5vdXRXaWR0aCxQPWE/eSpkOnk7cmV0dXJuXCJjaGFubmVsc0ZpcnN0XCI9PT1pP3A9W2MsUCxPLE0sQl06XCJjaGFubmVsc0xhc3RcIj09PWkmJihwPVtjLE8sTSxCLFBdKSx7YmF0Y2hTaXplOmMsZGF0YUZvcm1hdDppLGluRGVwdGg6bCxpbkhlaWdodDpoLGluV2lkdGg6ZixpbkNoYW5uZWxzOmQsb3V0RGVwdGg6TyxvdXRIZWlnaHQ6TSxvdXRXaWR0aDpCLG91dENoYW5uZWxzOlAscGFkSW5mbzpfLHN0cmlkZURlcHRoOmIsc3RyaWRlSGVpZ2h0Oncsc3RyaWRlV2lkdGg6RSxmaWx0ZXJEZXB0aDp2LGZpbHRlckhlaWdodDptLGZpbHRlcldpZHRoOmcsZWZmZWN0aXZlRmlsdGVyRGVwdGg6RCxlZmZlY3RpdmVGaWx0ZXJIZWlnaHQ6VCxlZmZlY3RpdmVGaWx0ZXJXaWR0aDpOLGRpbGF0aW9uRGVwdGg6SSxkaWxhdGlvbkhlaWdodDprLGRpbGF0aW9uV2lkdGg6UyxpblNoYXBlOnQsb3V0U2hhcGU6cCxmaWx0ZXJTaGFwZTplfX1mdW5jdGlvbiBEbyh0LGUsbixyKXt2b2lkIDA9PT1yJiYocj0xKTt2YXIgbz1GbyhlLHIpO3JldHVybiBNYXRoLmZsb29yKCh0WzBdKihuLTEpLW4rbykvMil9ZnVuY3Rpb24gVG8odCl7cmV0dXJuXCJudW1iZXJcIj09dHlwZW9mIHQ/W3QsdCx0XToyPT09dC5sZW5ndGg/W3RbMF0sdFsxXSwxXTp0fWZ1bmN0aW9uIE5vKHQpe3JldHVyblwibnVtYmVyXCI9PXR5cGVvZiB0P1t0LHQsdF06dH1mdW5jdGlvbiBGbyh0LGUpe3JldHVybiBlPD0xP3Q6dCsodC0xKSooZS0xKX1mdW5jdGlvbiBfbyh0LGUpe2lmKCFlKXJldHVybiB0O3N3aXRjaChlKXtjYXNlXCJyb3VuZFwiOnJldHVybiBNYXRoLnJvdW5kKHQpO2Nhc2VcImNlaWxcIjpyZXR1cm4gTWF0aC5jZWlsKHQpO2Nhc2VcImZsb29yXCI6cmV0dXJuIE1hdGguZmxvb3IodCk7ZGVmYXVsdDp0aHJvdyBuZXcgRXJyb3IoXCJVbmtub3duIHJvdW5kaW5nTW9kZSBcIitlKX19ZnVuY3Rpb24gT28odCl7dmFyIGU9VG8odCksbj1lWzBdLHI9ZVsxXSxvPWVbMl07cmV0dXJuIDE9PT1uJiYxPT09ciYmMT09PW99ZnVuY3Rpb24gTW8odCxlKXtyZXR1cm4gT28odCl8fE9vKGUpfWZ1bmN0aW9uIEJvKHQpe2lmKFwiTkhXQ1wiPT09dClyZXR1cm5cImNoYW5uZWxzTGFzdFwiO2lmKFwiTkNIV1wiPT09dClyZXR1cm5cImNoYW5uZWxzRmlyc3RcIjt0aHJvdyBuZXcgRXJyb3IoXCJVbmtub3duIGRhdGFGb3JtYXQgXCIrdCl9ZnVuY3Rpb24gUG8odCxlLG4pe2lmKFwiY29tcGxleDY0XCI9PT1lKXtpZihcImNvbXBsZXg2NFwiPT09dC5kdHlwZSlyZXR1cm4gdC5jbG9uZSgpO3ZhciByPUduKHQuc2hhcGUpLG89dC50b0Zsb2F0KCksYT1uLmNvbXBsZXgobyxyKTtyZXR1cm4gci5kaXNwb3NlKCksby5kaXNwb3NlKCksYX1pZighVSh0LmR0eXBlLGUpKXJldHVybiBMdC5tYWtlVGVuc29yRnJvbURhdGFJZCh0LmRhdGFJZCx0LnNoYXBlLGUpO2lmKFwiY29tcGxleDY0XCI9PT10LmR0eXBlKXt2YXIgaT1uLnJlYWwodCk7YT1pLmNhc3QoZSk7cmV0dXJuIGkuZGlzcG9zZSgpLGF9aWYoXCJpbnQzMlwiPT09ZSlyZXR1cm4gbi5pbnQodCk7aWYoXCJib29sXCI9PT1lKXt2YXIgcz1PbigwLHQuZHR5cGUpO2E9bi5ub3RFcXVhbCh0LHMpO3JldHVybiBzLmRpc3Bvc2UoKSxhfXRocm93IG5ldyBFcnJvcihcIkVycm9yIGluIENhc3Q6IGZhaWxlZCB0byBjYXN0IFwiK3QuZHR5cGUrXCIgdG8gXCIrZSl9ZnVuY3Rpb24gTG8odCxlKXtyZXR1cm4gTHQubWFrZVRlbnNvckZyb21EYXRhSWQodC5kYXRhSWQsZSx0LmR0eXBlKX1mdW5jdGlvbiBXbyh0LGUsbil7dmFyIHI9KGUtdCkvKG4tMSksbz10dChuLFwiZmxvYXQzMlwiKTtvWzBdPXQ7Zm9yKHZhciBhPTE7YTxvLmxlbmd0aDthKyspb1thXT1vW2EtMV0rcjtyZXR1cm4gTW4obyxcImZsb2F0MzJcIil9dmFyIFVvPU9iamVjdC5mcmVlemUoe2Nhc3RUZW5zb3I6UG8scmVzaGFwZVRlbnNvcjpMbyxsaW5zcGFjZUltcGw6V28sdXBjYXN0VHlwZTpEdCxheGVzQXJlSW5uZXJNb3N0RGltczp5bixjb21iaW5lTG9jYXRpb25zOnhuLGNvbXB1dGVPdXRBbmRSZWR1Y2VTaGFwZXM6Ym4sZXhwYW5kU2hhcGVUb0tlZXBEaW06d24sYXNzZXJ0QXhlc0FyZUlubmVyTW9zdERpbXM6Q24sZ2V0QXhlc1Blcm11dGF0aW9uOkVuLGdldFVuZG9BeGVzUGVybXV0YXRpb246Um4sZ2V0SW5uZXJNb3N0QXhlczpJbixnZXRCcm9hZGNhc3REaW1zOkNvLGdldFJlZHVjdGlvbkF4ZXM6RW8sYXNzZXJ0QW5kR2V0QnJvYWRjYXN0U2hhcGU6Um8sYXNzZXJ0UGFyYW1zQ29uc2lzdGVudDprbixjb21wdXRlT3V0U2hhcGU6U24sY29tcHV0ZVBvb2wyREluZm86SW8sY29tcHV0ZVBvb2wzREluZm86a28sY29tcHV0ZUNvbnYyREluZm86U28sY29tcHV0ZUNvbnYzREluZm86QW8sY29tcHV0ZURlZmF1bHRQYWQ6RG8sdHVwbGVWYWx1ZXNBcmVPbmU6T28sZWl0aGVyU3RyaWRlc09yRGlsYXRpb25zQXJlT25lOk1vLGNvbnZlcnRDb252MkREYXRhRm9ybWF0OkJvLFBBUkFMTEVMSVpFX1RIUkVTSE9MRDpZcixjb21wdXRlT3B0aW1hbFdpbmRvd1NpemU6JHJ9KTtmdW5jdGlvbiBWbyh0LGUpe2lmKHQubGVuZ3RoIT09ZS5sZW5ndGgpdGhyb3cgbmV3IEVycm9yKFwiQ2Fubm90IG1lcmdlIHJlYWwgYW5kIGltYWcgYXJyYXlzIG9mIGRpZmZlcmVudCBsZW5ndGhzLiByZWFsOlwiK3QubGVuZ3RoK1wiLCBpbWFnOiBcIitlLmxlbmd0aCtcIi5cIik7Zm9yKHZhciBuPW5ldyBGbG9hdDMyQXJyYXkoMip0Lmxlbmd0aCkscj0wO3I8bi5sZW5ndGg7cis9MiluW3JdPXRbci8yXSxuW3IrMV09ZVtyLzJdO3JldHVybiBufWZ1bmN0aW9uIHpvKHQsZSl7cmV0dXJue3JlYWw6dFsyKmVdLGltYWc6dFsyKmUrMV19fWZ1bmN0aW9uIEdvKHQsZSxuLHIpe3RbMipyXT1lLHRbMipyKzFdPW59ZnVuY3Rpb24gSG8odCxlLG4pe3ZhciByPShuPzI6LTIpKk1hdGguUEkqKHQvZSk7cmV0dXJue3JlYWw6TWF0aC5jb3MociksaW1hZzpNYXRoLnNpbihyKX19ZnVuY3Rpb24gcW8odCxlLG4pe3ZhciByPWZ1bmN0aW9uKHQsZSxuKXtyZXR1cm4gZnVuY3Rpb24odCxlLG4pe3ZhciByPTAsbz10Lmxlbmd0aCxhPTAsaT0hMTtmb3IoO3I8bzspe3ZhciBzPW4oZSx0W2E9cisoby1yPj4+MSldKTtzPjA/cj1hKzE6KG89YSxpPSFzKX1yZXR1cm4gaT9yOi1yLTF9KHQsZSxufHxLbyl9KHQsZSxuKSxvPXI8MD8tKHIrMSk6cjt0LnNwbGljZShvLDAsZSl9ZnVuY3Rpb24gS28odCxlKXtyZXR1cm4gdD5lPzE6dDxlPy0xOjB9ZnVuY3Rpb24gam8odCxlLG4scixvKXtyZXR1cm4gWW8odCxlLG4scixvLDApLnNlbGVjdGVkSW5kaWNlc31mdW5jdGlvbiBYbyh0LGUsbixyLG8sYSl7dmFyIGk9WW8odCxlLG4scixvLGEsITApO3JldHVybiBpLm51bVZhbGlkT3V0cHV0cy5kaXNwb3NlKCkse3NlbGVjdGVkSW5kaWNlczppLnNlbGVjdGVkSW5kaWNlcyxzZWxlY3RlZFNjb3JlczppLnNlbGVjdGVkU2NvcmVzfX1mdW5jdGlvbiBZbyh0LGUsbixyLG8sYSxpLHMpe3ZvaWQgMD09PWkmJihpPSExKSx2b2lkIDA9PT1zJiYocz0hMSk7Zm9yKHZhciB1PUFycmF5LmZyb20oZSkubWFwKChmdW5jdGlvbih0LGUpe3JldHVybntzY29yZTp0LGJveEluZGV4OmUsc3VwcHJlc3NCZWdpbkluZGV4OjB9fSkpLmZpbHRlcigoZnVuY3Rpb24odCl7cmV0dXJuIHQuc2NvcmU+b30pKS5zb3J0KEpvKSxjPWE+MD8tLjUvYTowLGw9W10saD1bXTtsLmxlbmd0aDxuJiZ1Lmxlbmd0aD4wOyl7dmFyIGY9dS5wb3AoKSxkPWYuc2NvcmUscD1mLmJveEluZGV4LHY9Zi5zdXBwcmVzc0JlZ2luSW5kZXg7aWYoZDxvKWJyZWFrO2Zvcih2YXIgbT0hMSxnPWwubGVuZ3RoLTE7Zz49djstLWcpe3ZhciB5PSRvKHQscCxsW2ddKTtpZih5Pj1yKXttPSEwO2JyZWFrfWlmKGYuc2NvcmU9Zi5zY29yZSpRbyhyLGMseSksZi5zY29yZTw9bylicmVha31mLnN1cHByZXNzQmVnaW5JbmRleD1sLmxlbmd0aCxtfHwoZi5zY29yZT09PWQ/KGwucHVzaChwKSxoLnB1c2goZi5zY29yZSkpOmYuc2NvcmU+byYmcW8odSxmLEpvKSl9dmFyIHg9bC5sZW5ndGg7cmV0dXJuIHMmJihsLmZpbGwoMCx4KSxoLmZpbGwoMCx4KSkse3NlbGVjdGVkSW5kaWNlczpNbihsLFwiaW50MzJcIiksc2VsZWN0ZWRTY29yZXM6TW4oaCxcImZsb2F0MzJcIiksbnVtVmFsaWRPdXRwdXRzOk9uKHgsXCJpbnQzMlwiKX19ZnVuY3Rpb24gJG8odCxlLG4pe3ZhciByPXQuc3ViYXJyYXkoNCplLDQqZSs0KSxvPXQuc3ViYXJyYXkoNCpuLDQqbis0KSxhPU1hdGgubWluKHJbMF0sclsyXSksaT1NYXRoLm1pbihyWzFdLHJbM10pLHM9TWF0aC5tYXgoclswXSxyWzJdKSx1PU1hdGgubWF4KHJbMV0sclszXSksYz1NYXRoLm1pbihvWzBdLG9bMl0pLGw9TWF0aC5taW4ob1sxXSxvWzNdKSxoPU1hdGgubWF4KG9bMF0sb1syXSksZj1NYXRoLm1heChvWzFdLG9bM10pLGQ9KHMtYSkqKHUtaSkscD0oaC1jKSooZi1sKTtpZihkPD0wfHxwPD0wKXJldHVybiAwO3ZhciB2PU1hdGgubWF4KGEsYyksbT1NYXRoLm1heChpLGwpLGc9TWF0aC5taW4ocyxoKSx5PU1hdGgubWluKHUsZikseD1NYXRoLm1heChnLXYsMCkqTWF0aC5tYXgoeS1tLDApO3JldHVybiB4LyhkK3AteCl9ZnVuY3Rpb24gUW8odCxlLG4pe3ZhciByPU1hdGguZXhwKGUqbipuKTtyZXR1cm4gbjw9dD9yOjB9ZnVuY3Rpb24gSm8odCxlKXtyZXR1cm4gdC5zY29yZS1lLnNjb3JlfHx0LnNjb3JlPT09ZS5zY29yZSYmZS5ib3hJbmRleC10LmJveEluZGV4fWZ1bmN0aW9uIFpvKHQsZSxuKXt2YXIgcj1uZXcgQXJyYXkodC5yYW5rKS5maWxsKDApLG89dC5zaGFwZS5zbGljZSgpO3JldHVybiBlLm1hcCgoZnVuY3Rpb24oZSl7b1tuXT1lO3ZhciBhPXQuc2xpY2UocixvKTtyZXR1cm4gcltuXSs9ZSxhfSkpfWZ1bmN0aW9uIHRhKHQsZSl7Zm9yKHZhciBuPW5ldyBBcnJheSh0LnJhbmspLHI9MDtyPG4ubGVuZ3RoO3IrKyluW3JdPXQuc2hhcGVbcl0qZVtyXTt2YXIgbz1kcihuLHQuZHR5cGUpO2ZvcihyPTA7cjxvLnZhbHVlcy5sZW5ndGg7KytyKXtmb3IodmFyIGE9by5pbmRleFRvTG9jKHIpLGk9bmV3IEFycmF5KHQucmFuaykscz0wO3M8aS5sZW5ndGg7cysrKWlbc109YVtzXSV0LnNoYXBlW3NdO3ZhciB1PXQubG9jVG9JbmRleChpKTtvLnZhbHVlc1tyXT10LnZhbHVlc1t1XX1yZXR1cm4gby50b1RlbnNvcigpfWZ1bmN0aW9uIGVhKHQsZSxuLHIsbyl7Zm9yKHZhciBhPWVbZS5sZW5ndGgtMV0saT1bdC5sZW5ndGgvYSxhXSxzPWlbMF0sdT1pWzFdLGM9QihuLHMqciksbD1CKFwiaW50MzJcIixzKnIpLGg9MDtoPHM7aCsrKXtmb3IodmFyIGY9aCp1LGQ9dC5zdWJhcnJheShmLGYrdSkscD1bXSx2PTA7djxkLmxlbmd0aDt2KyspcC5wdXNoKHt2YWx1ZTpkW3ZdLGluZGV4OnZ9KTtwLnNvcnQoKGZ1bmN0aW9uKHQsZSl7cmV0dXJuIGUudmFsdWUtdC52YWx1ZX0pKTt2YXIgbT1oKnIsZz1jLnN1YmFycmF5KG0sbStyKSx5PWwuc3ViYXJyYXkobSxtK3IpO2Zvcih2PTA7djxyO3YrKylnW3ZdPXBbdl0udmFsdWUseVt2XT1wW3ZdLmluZGV4fXZhciB4PWUuc2xpY2UoKTtyZXR1cm4geFt4Lmxlbmd0aC0xXT1yLFtGbihjLHgsbiksRm4obCx4LFwiaW50MzJcIildfWZ1bmN0aW9uIG5hKHQsZSl7Zm9yKHZhciBuPVtdLHI9MDtyPGUubGVuZ3RoO3IrKyllW3JdJiZuLnB1c2gocik7dmFyIG89ZHIodCxcImludDMyXCIpLGE9ZHIoW24ubGVuZ3RoLHQubGVuZ3RoXSxcImludDMyXCIpO2ZvcihyPTA7cjxuLmxlbmd0aDtyKyspe3ZhciBpPW8uaW5kZXhUb0xvYyhuW3JdKSxzPXIqdC5sZW5ndGg7YS52YWx1ZXMuc2V0KGkscyl9cmV0dXJuIGEudG9UZW5zb3IoKX12YXIgcmE9ZnVuY3Rpb24odCxlKXt0aGlzLm91dHB1dFNoYXBlPVtdLHRoaXMub3V0cHV0U2hhcGU9dCx0aGlzLnZhcmlhYmxlTmFtZXM9ZS5tYXAoKGZ1bmN0aW9uKHQsZSl7cmV0dXJuXCJUXCIrZX0pKTt2YXIgbj1bXTt0aGlzLnZhcmlhYmxlTmFtZXMuZm9yRWFjaCgoZnVuY3Rpb24odCl7bi5wdXNoKFwiZmxvYXQgdlwiK3QrXCIgPSBnZXRcIit0K1wiQXRPdXRDb29yZHMoKTtcIil9KSk7dmFyIHI9dGhpcy52YXJpYWJsZU5hbWVzLm1hcCgoZnVuY3Rpb24odCl7cmV0dXJuXCJ2XCIrdH0pKS5qb2luKFwiICsgXCIpO3RoaXMudXNlckNvZGU9XCJcXG4gICAgICB2b2lkIG1haW4oKSB7XFxuICAgICAgICBcIituLmpvaW4oXCJcXG4gICAgICAgIFwiKStcIlxcblxcbiAgICAgICAgZmxvYXQgcmVzdWx0ID0gXCIrcitcIjtcXG4gICAgICAgIHNldE91dHB1dChyZXN1bHQpO1xcbiAgICAgIH1cXG4gICAgXCJ9LG9hPWZ1bmN0aW9uKHQsZSl7dGhpcy5vdXRwdXRTaGFwZT1bXSx0aGlzLnBhY2tlZElucHV0cz0hMCx0aGlzLnBhY2tlZE91dHB1dD0hMCx0aGlzLm91dHB1dFNoYXBlPXQsdGhpcy52YXJpYWJsZU5hbWVzPWUubWFwKChmdW5jdGlvbih0LGUpe3JldHVyblwiVFwiK2V9KSk7dmFyIG49W107dGhpcy52YXJpYWJsZU5hbWVzLmZvckVhY2goKGZ1bmN0aW9uKHQpe24ucHVzaChcInZlYzQgdlwiK3QrXCIgPSBnZXRcIit0K1wiQXRPdXRDb29yZHMoKTtcIil9KSk7dmFyIHI9dGhpcy52YXJpYWJsZU5hbWVzLm1hcCgoZnVuY3Rpb24odCl7cmV0dXJuXCJ2XCIrdH0pKS5qb2luKFwiICsgXCIpO3RoaXMudXNlckNvZGU9XCJcXG4gICAgICB2b2lkIG1haW4oKSB7XFxuICAgICAgICBcIituLmpvaW4oXCJcXG4gICAgICAgIFwiKStcIlxcblxcbiAgICAgICAgdmVjNCByZXN1bHQgPSBcIityK1wiO1xcbiAgICAgICAgc2V0T3V0cHV0KHJlc3VsdCk7XFxuICAgICAgfVxcbiAgICBcIn0sYWE9ZnVuY3Rpb24odCxlLG4pe3RoaXMudmFyaWFibGVOYW1lcz1bXCJBXCJdO3ZhciByPXQud2luZG93U2l6ZSxvPXQuYmF0Y2hTaXplLGE9dC5pblNpemUsaT1NYXRoLmNlaWwoYS9yKTtufHx0aGlzLnZhcmlhYmxlTmFtZXMucHVzaChcImJlc3RJbmRpY2VzQVwiKSx0aGlzLm91dHB1dFNoYXBlPVtvLGldO3ZhciBzPVwibWF4XCI9PT1lP1wiPlwiOlwiPFwiLHU9bj9cImluT2Zmc2V0ICsgaTtcIjpcInJvdW5kKGdldEJlc3RJbmRpY2VzQShiYXRjaCwgaW5PZmZzZXQgKyBpKSk7XCI7dGhpcy51c2VyQ29kZT1cIlxcbiAgICAgIHZvaWQgbWFpbigpIHtcXG4gICAgICAgIGl2ZWMyIGNvb3JkcyA9IGdldE91dHB1dENvb3JkcygpO1xcbiAgICAgICAgaW50IGJhdGNoID0gY29vcmRzWzBdO1xcbiAgICAgICAgaW50IG91dElkeCA9IGNvb3Jkc1sxXTtcXG4gICAgICAgIGludCBpbk9mZnNldCA9IG91dElkeCAqIFwiK3IrXCI7XFxuXFxuICAgICAgICBpbnQgYmVzdEluZGV4ID0gaW5PZmZzZXQ7XFxuICAgICAgICBmbG9hdCBiZXN0VmFsdWUgPSBnZXRBKGJhdGNoLCBiZXN0SW5kZXgpO1xcblxcbiAgICAgICAgZm9yIChpbnQgaSA9IDA7IGkgPCBcIityK1wiOyBpKyspIHtcXG4gICAgICAgICAgaW50IGluSWR4ID0gXCIrdStcIjtcXG4gICAgICAgICAgZmxvYXQgY2FuZGlkYXRlID0gZ2V0QShiYXRjaCwgaW5JZHgpO1xcbiAgICAgICAgICBpZiAoY2FuZGlkYXRlIFwiK3MrXCIgYmVzdFZhbHVlKSB7XFxuICAgICAgICAgICAgYmVzdFZhbHVlID0gY2FuZGlkYXRlO1xcbiAgICAgICAgICAgIGJlc3RJbmRleCA9IGluSWR4O1xcbiAgICAgICAgICB9XFxuICAgICAgICB9XFxuICAgICAgICBzZXRPdXRwdXQoZmxvYXQoYmVzdEluZGV4KSk7XFxuICAgICAgfVxcbiAgICBcIn07ZnVuY3Rpb24gaWEodCxlKXtyZXR1cm5bXCJ4XCIsXCJ5XCIsXCJ6XCIsXCJ3XCIsXCJ1XCIsXCJ2XCJdLnNsaWNlKDAsZSkubWFwKChmdW5jdGlvbihlKXtyZXR1cm4gdCtcIi5cIitlfSkpfWZ1bmN0aW9uIHNhKHQsZSl7cmV0dXJuIDE9PT1lP1t0XTppYSh0LGUpfWZ1bmN0aW9uIHVhKCl7dmFyIHQsZSxuLHIsbyxhLHMsdSxjLGw7cmV0dXJuIDI9PT1pKCkuZ2V0TnVtYmVyKFwiV0VCR0xfVkVSU0lPTlwiKT8odD1cIiN2ZXJzaW9uIDMwMCBlc1wiLGU9XCJpblwiLG49XCJvdXRcIixyPVwiaW5cIixvPVwidGV4dHVyZVwiLGE9XCJvdXRwdXRDb2xvclwiLHM9XCJvdXQgdmVjNCBvdXRwdXRDb2xvcjtcIix1PVwiXFxuICAgICAgYm9vbCBpc25hbl9jdXN0b20oZmxvYXQgdmFsKSB7XFxuICAgICAgICByZXR1cm4gKHZhbCA+IDAuMCB8fCB2YWwgPCAwLjApID8gZmFsc2UgOiB2YWwgIT0gMC4wO1xcbiAgICAgIH1cXG5cXG4gICAgICBidmVjNCBpc25hbl9jdXN0b20odmVjNCB2YWwpIHtcXG4gICAgICAgIHJldHVybiBidmVjNChpc25hbl9jdXN0b20odmFsLngpLFxcbiAgICAgICAgICBpc25hbl9jdXN0b20odmFsLnkpLCBpc25hbl9jdXN0b20odmFsLnopLCBpc25hbl9jdXN0b20odmFsLncpKTtcXG4gICAgICB9XFxuXFxuICAgICAgI2RlZmluZSBpc25hbih2YWx1ZSkgaXNuYW5fY3VzdG9tKHZhbHVlKVxcbiAgICBcIixjPVwiXCIsbD1cIlxcbiAgICAgICNkZWZpbmUgcm91bmQodmFsdWUpIG5ld1JvdW5kKHZhbHVlKVxcbiAgICAgIGludCBuZXdSb3VuZChmbG9hdCB2YWx1ZSkge1xcbiAgICAgICAgcmV0dXJuIGludChmbG9vcih2YWx1ZSArIDAuNSkpO1xcbiAgICAgIH1cXG5cXG4gICAgICBpdmVjNCBuZXdSb3VuZCh2ZWM0IHZhbHVlKSB7XFxuICAgICAgICByZXR1cm4gaXZlYzQoZmxvb3IodmFsdWUgKyB2ZWM0KDAuNSkpKTtcXG4gICAgICB9XFxuICAgIFwiKToodD1cIlwiLGU9XCJhdHRyaWJ1dGVcIixuPVwidmFyeWluZ1wiLHI9XCJ2YXJ5aW5nXCIsbz1cInRleHR1cmUyRFwiLGE9XCJnbF9GcmFnQ29sb3JcIixzPVwiXCIsdT1cIlxcbiAgICAgICNkZWZpbmUgaXNuYW4odmFsdWUpIGlzbmFuX2N1c3RvbSh2YWx1ZSlcXG4gICAgICBib29sIGlzbmFuX2N1c3RvbShmbG9hdCB2YWwpIHtcXG4gICAgICAgIHJldHVybiAodmFsID4gMC4gfHwgdmFsIDwgMS4gfHwgdmFsID09IDAuKSA/IGZhbHNlIDogdHJ1ZTtcXG4gICAgICB9XFxuICAgICAgYnZlYzQgaXNuYW5fY3VzdG9tKHZlYzQgdmFsKSB7XFxuICAgICAgICByZXR1cm4gYnZlYzQoaXNuYW4odmFsLngpLCBpc25hbih2YWwueSksIGlzbmFuKHZhbC56KSwgaXNuYW4odmFsLncpKTtcXG4gICAgICB9XFxuICAgIFwiLGM9XCJcXG4gICAgICB1bmlmb3JtIGZsb2F0IElORklOSVRZO1xcblxcbiAgICAgIGJvb2wgaXNpbmYoZmxvYXQgdmFsKSB7XFxuICAgICAgICByZXR1cm4gYWJzKHZhbCkgPT0gSU5GSU5JVFk7XFxuICAgICAgfVxcbiAgICAgIGJ2ZWM0IGlzaW5mKHZlYzQgdmFsKSB7XFxuICAgICAgICByZXR1cm4gZXF1YWwoYWJzKHZhbCksIHZlYzQoSU5GSU5JVFkpKTtcXG4gICAgICB9XFxuICAgIFwiLGw9XCJcXG4gICAgICBpbnQgcm91bmQoZmxvYXQgdmFsdWUpIHtcXG4gICAgICAgIHJldHVybiBpbnQoZmxvb3IodmFsdWUgKyAwLjUpKTtcXG4gICAgICB9XFxuXFxuICAgICAgaXZlYzQgcm91bmQodmVjNCB2YWx1ZSkge1xcbiAgICAgICAgcmV0dXJuIGl2ZWM0KGZsb29yKHZhbHVlICsgdmVjNCgwLjUpKSk7XFxuICAgICAgfVxcbiAgICBcIikse3ZlcnNpb246dCxhdHRyaWJ1dGU6ZSx2YXJ5aW5nVnM6bix2YXJ5aW5nRnM6cix0ZXh0dXJlMkQ6byxvdXRwdXQ6YSxkZWZpbmVPdXRwdXQ6cyxkZWZpbmVTcGVjaWFsTmFOOnUsZGVmaW5lU3BlY2lhbEluZjpjLGRlZmluZVJvdW5kOmx9fWZ1bmN0aW9uIGNhKHQsZSxuKXt2b2lkIDA9PT1uJiYobj1cImluZGV4XCIpO3ZhciByPSQoZSk7cmV0dXJuIHIubWFwKChmdW5jdGlvbihlLG8pe3JldHVyblwiaW50IFwiK3Rbb10rXCIgPSBcIituK1wiIC8gXCIrZStcIjsgXCIrKG89PT1yLmxlbmd0aC0xP1wiaW50IFwiK3RbbysxXStcIiA9IFwiK24rXCIgLSBcIit0W29dK1wiICogXCIrZTpcImluZGV4IC09IFwiK3Rbb10rXCIgKiBcIitlKStcIjtcIn0pKS5qb2luKFwiXCIpfWZ1bmN0aW9uIGxhKHQpe3ZhciBlPSQodCkubWFwKChmdW5jdGlvbih0KXtyZXR1cm4gdC50b1N0cmluZygpfSkpO3JldHVyblwiXFxuICBpbnQgZ2V0RmxhdEluZGV4KGl2ZWMzIGNvb3Jkcykge1xcbiAgICByZXR1cm4gY29vcmRzLnggKiBcIitlWzBdK1wiICsgY29vcmRzLnkgKiBcIitlWzFdK1wiICsgY29vcmRzLno7XFxuICB9XFxuXCJ9dmFyIGhhPVwiXFxuICBjb25zdCBmbG9hdCBGTE9BVF9NQVggPSAxLjcwMTQxMTg0ZTM4O1xcbiAgY29uc3QgZmxvYXQgRkxPQVRfTUlOID0gMS4xNzU0OTQzNWUtMzg7XFxuXFxuICBsb3dwIHZlYzQgZW5jb2RlX2Zsb2F0KGhpZ2hwIGZsb2F0IHYpIHtcXG4gICAgaWYgKGlzbmFuKHYpKSB7XFxuICAgICAgcmV0dXJuIHZlYzQoMjU1LCAyNTUsIDI1NSwgMjU1KTtcXG4gICAgfVxcblxcbiAgICBoaWdocCBmbG9hdCBhdiA9IGFicyh2KTtcXG5cXG4gICAgaWYoYXYgPCBGTE9BVF9NSU4pIHtcXG4gICAgICByZXR1cm4gdmVjNCgwLjAsIDAuMCwgMC4wLCAwLjApO1xcbiAgICB9IGVsc2UgaWYodiA+IEZMT0FUX01BWCkge1xcbiAgICAgIHJldHVybiB2ZWM0KDAuMCwgMC4wLCAxMjguMCwgMTI3LjApIC8gMjU1LjA7XFxuICAgIH0gZWxzZSBpZih2IDwgLUZMT0FUX01BWCkge1xcbiAgICAgIHJldHVybiB2ZWM0KDAuMCwgMC4wLCAgMTI4LjAsIDI1NS4wKSAvIDI1NS4wO1xcbiAgICB9XFxuXFxuICAgIGhpZ2hwIHZlYzQgYyA9IHZlYzQoMCwwLDAsMCk7XFxuXFxuICAgIGhpZ2hwIGZsb2F0IGUgPSBmbG9vcihsb2cyKGF2KSk7XFxuICAgIGhpZ2hwIGZsb2F0IG0gPSBleHAyKGZyYWN0KGxvZzIoYXYpKSkgLSAxLjA7XFxuXFxuICAgIGNbMl0gPSBmbG9vcigxMjguMCAqIG0pO1xcbiAgICBtIC09IGNbMl0gLyAxMjguMDtcXG4gICAgY1sxXSA9IGZsb29yKDMyNzY4LjAgKiBtKTtcXG4gICAgbSAtPSBjWzFdIC8gMzI3NjguMDtcXG4gICAgY1swXSA9IGZsb29yKDgzODg2MDguMCAqIG0pO1xcblxcbiAgICBoaWdocCBmbG9hdCBlYmlhcyA9IGUgKyAxMjcuMDtcXG4gICAgY1szXSA9IGZsb29yKGViaWFzIC8gMi4wKTtcXG4gICAgZWJpYXMgLT0gY1szXSAqIDIuMDtcXG4gICAgY1syXSArPSBmbG9vcihlYmlhcykgKiAxMjguMDtcXG5cXG4gICAgY1szXSArPSAxMjguMCAqIHN0ZXAoMC4wLCAtdik7XFxuXFxuICAgIHJldHVybiBjIC8gMjU1LjA7XFxuICB9XFxuXCI7ZnVuY3Rpb24gZmEodCxlLG4scil7dmFyIG89W107dC5mb3JFYWNoKChmdW5jdGlvbih0KXt2YXIgZT1rKHQuc2hhcGVJbmZvLmxvZ2ljYWxTaGFwZSk7dC5zaGFwZUluZm8uaXNVbmlmb3JtP28ucHVzaChcInVuaWZvcm0gZmxvYXQgXCIrdC5uYW1lKyhlPjE/XCJbXCIrZStcIl1cIjpcIlwiKStcIjtcIik6KG8ucHVzaChcInVuaWZvcm0gc2FtcGxlcjJEIFwiK3QubmFtZStcIjtcIiksby5wdXNoKFwidW5pZm9ybSBpbnQgb2Zmc2V0XCIrdC5uYW1lK1wiO1wiKSl9KSk7dmFyIGEsaSxzPW8uam9pbihcIlxcblwiKSx1PXQubWFwKChmdW5jdGlvbih0KXtyZXR1cm4gZnVuY3Rpb24odCxlLG4pe3ZvaWQgMD09PW4mJihuPSExKTt2YXIgcj1cIlwiO3IrPW4/cGEodCk6ZGEodCk7dmFyIG89dC5zaGFwZUluZm8ubG9naWNhbFNoYXBlLGE9ZS5sb2dpY2FsU2hhcGU7by5sZW5ndGg8PWEubGVuZ3RoJiYocis9bj9mdW5jdGlvbih0LGUpe3ZhciBuLHI9dC5uYW1lLG89ci5jaGFyQXQoMCkudG9VcHBlckNhc2UoKStyLnNsaWNlKDEpLGE9XCJnZXRcIitvK1wiQXRPdXRDb29yZHNcIixpPXQuc2hhcGVJbmZvLmxvZ2ljYWxTaGFwZS5sZW5ndGgscz1lLmxvZ2ljYWxTaGFwZS5sZW5ndGgsdT1Dbyh0LnNoYXBlSW5mby5sb2dpY2FsU2hhcGUsZS5sb2dpY2FsU2hhcGUpLGM9d2EocyksbD1zLWksaD1bXCJ4XCIsXCJ5XCIsXCJ6XCIsXCJ3XCIsXCJ1XCIsXCJ2XCJdO249MD09PWk/XCJcIjpzPDImJnUubGVuZ3RoPj0xP1wiY29vcmRzID0gMDtcIjp1Lm1hcCgoZnVuY3Rpb24odCl7cmV0dXJuXCJjb29yZHMuXCIraFt0K2xdK1wiID0gMDtcIn0pKS5qb2luKFwiXFxuXCIpO3ZhciBmPVwiXCI7Zj1zPDImJmk+MD9cImNvb3Jkc1wiOnQuc2hhcGVJbmZvLmxvZ2ljYWxTaGFwZS5tYXAoKGZ1bmN0aW9uKHQsZSl7cmV0dXJuXCJjb29yZHMuXCIraFtlK2xdfSkpLmpvaW4oXCIsIFwiKTt2YXIgZD1cInJldHVybiBvdXRwdXRWYWx1ZTtcIixwPTE9PT1rKHQuc2hhcGVJbmZvLmxvZ2ljYWxTaGFwZSksdj0xPT09ayhlLmxvZ2ljYWxTaGFwZSk7aWYoMSE9PWl8fHB8fHYpe2lmKHAmJiF2KWQ9MT09PXM/XCJcXG4gICAgICAgIHJldHVybiB2ZWM0KG91dHB1dFZhbHVlLngsIG91dHB1dFZhbHVlLngsIDAuLCAwLik7XFxuICAgICAgXCI6XCJcXG4gICAgICAgIHJldHVybiB2ZWM0KG91dHB1dFZhbHVlLngpO1xcbiAgICAgIFwiO2Vsc2UgaWYodS5sZW5ndGgpe3ZhciBtPWktMixnPWktMTt1LmluZGV4T2YobSk+LTEmJnUuaW5kZXhPZihnKT4tMT9kPVwicmV0dXJuIHZlYzQob3V0cHV0VmFsdWUueCk7XCI6dS5pbmRleE9mKG0pPi0xP2Q9XCJyZXR1cm4gdmVjNChvdXRwdXRWYWx1ZS54LCBvdXRwdXRWYWx1ZS55LCBvdXRwdXRWYWx1ZS54LCBvdXRwdXRWYWx1ZS55KTtcIjp1LmluZGV4T2YoZyk+LTEmJihkPVwicmV0dXJuIHZlYzQob3V0cHV0VmFsdWUueHgsIG91dHB1dFZhbHVlLnp6KTtcIil9fWVsc2UgZD1cIlxcbiAgICAgIHJldHVybiB2ZWM0KG91dHB1dFZhbHVlLnh5LCBvdXRwdXRWYWx1ZS54eSk7XFxuICAgIFwiO3JldHVyblwiXFxuICAgIHZlYzQgXCIrYStcIigpIHtcXG4gICAgICBcIitjK1wiIGNvb3JkcyA9IGdldE91dHB1dENvb3JkcygpO1xcbiAgICAgIFwiK24rXCJcXG4gICAgICB2ZWM0IG91dHB1dFZhbHVlID0gZ2V0XCIrbytcIihcIitmK1wiKTtcXG4gICAgICBcIitkK1wiXFxuICAgIH1cXG4gIFwifSh0LGUpOmZ1bmN0aW9uKHQsZSl7dmFyIG49dC5uYW1lLHI9bi5jaGFyQXQoMCkudG9VcHBlckNhc2UoKStuLnNsaWNlKDEpLG89XCJnZXRcIityK1wiQXRPdXRDb29yZHNcIixhPWUudGV4U2hhcGUsaT10LnNoYXBlSW5mby50ZXhTaGFwZSxzPXQuc2hhcGVJbmZvLmxvZ2ljYWxTaGFwZS5sZW5ndGgsdT1lLmxvZ2ljYWxTaGFwZS5sZW5ndGg7aWYoIXQuc2hhcGVJbmZvLmlzVW5pZm9ybSYmcz09PXUmJm51bGw9PXQuc2hhcGVJbmZvLmZsYXRPZmZzZXQmJlMoaSxhKSlyZXR1cm5cIlxcbiAgICAgIGZsb2F0IFwiK28rXCIoKSB7XFxuICAgICAgICByZXR1cm4gc2FtcGxlVGV4dHVyZShcIituK1wiLCByZXN1bHRVVik7XFxuICAgICAgfVxcbiAgICBcIjt2YXIgYyxsPXdhKHUpLGg9Q28odC5zaGFwZUluZm8ubG9naWNhbFNoYXBlLGUubG9naWNhbFNoYXBlKSxmPXUtcyxkPVtcInhcIixcInlcIixcInpcIixcIndcIixcInVcIixcInZcIl07Yz0wPT09cz9cIlwiOnU8MiYmaC5sZW5ndGg+PTE/XCJjb29yZHMgPSAwO1wiOmgubWFwKChmdW5jdGlvbih0KXtyZXR1cm5cImNvb3Jkcy5cIitkW3QrZl0rXCIgPSAwO1wifSkpLmpvaW4oXCJcXG5cIik7dmFyIHA9XCJcIjtwPXU8MiYmcz4wP1wiY29vcmRzXCI6dC5zaGFwZUluZm8ubG9naWNhbFNoYXBlLm1hcCgoZnVuY3Rpb24odCxlKXtyZXR1cm5cImNvb3Jkcy5cIitkW2UrZl19KSkuam9pbihcIiwgXCIpO3JldHVyblwiXFxuICAgIGZsb2F0IFwiK28rXCIoKSB7XFxuICAgICAgXCIrbCtcIiBjb29yZHMgPSBnZXRPdXRwdXRDb29yZHMoKTtcXG4gICAgICBcIitjK1wiXFxuICAgICAgcmV0dXJuIGdldFwiK3IrXCIoXCIrcCtcIik7XFxuICAgIH1cXG4gIFwifSh0LGUpKTtyZXR1cm4gcn0odCxlLHIpfSkpLmpvaW4oXCJcXG5cIiksYz1lLnRleFNoYXBlLGw9dWEoKSxoPWZ1bmN0aW9uKHQpe3JldHVyblwiXFxuICAgIGZsb2F0IHNhbXBsZVRleHR1cmUoc2FtcGxlcjJEIHRleHR1cmVTYW1wbGVyLCB2ZWMyIHV2KSB7XFxuICAgICAgcmV0dXJuIFwiK3QudGV4dHVyZTJEK1wiKHRleHR1cmVTYW1wbGVyLCB1dikucjtcXG4gICAgfVxcbiAgXCJ9KGwpLGY9ZnVuY3Rpb24odCl7cmV0dXJuIHQudmVyc2lvbitcIlxcbiAgICBwcmVjaXNpb24gaGlnaHAgZmxvYXQ7XFxuICAgIHByZWNpc2lvbiBoaWdocCBpbnQ7XFxuICAgIHByZWNpc2lvbiBoaWdocCBzYW1wbGVyMkQ7XFxuICAgIFwiK3QudmFyeWluZ0ZzK1wiIHZlYzIgcmVzdWx0VVY7XFxuICAgIFwiK3QuZGVmaW5lT3V0cHV0K1wiXFxuICAgIGNvbnN0IHZlYzIgaGFsZkNSID0gdmVjMigwLjUsIDAuNSk7XFxuXFxuICAgIHN0cnVjdCBpdmVjNVxcbiAgICB7XFxuICAgICAgaW50IHg7XFxuICAgICAgaW50IHk7XFxuICAgICAgaW50IHo7XFxuICAgICAgaW50IHc7XFxuICAgICAgaW50IHU7XFxuICAgIH07XFxuXFxuICAgIHN0cnVjdCBpdmVjNlxcbiAgICB7XFxuICAgICAgaW50IHg7XFxuICAgICAgaW50IHk7XFxuICAgICAgaW50IHo7XFxuICAgICAgaW50IHc7XFxuICAgICAgaW50IHU7XFxuICAgICAgaW50IHY7XFxuICAgIH07XFxuXFxuICAgIHVuaWZvcm0gZmxvYXQgTkFOO1xcbiAgICBcIit0LmRlZmluZVNwZWNpYWxOYU4rXCJcXG4gICAgXCIrdC5kZWZpbmVTcGVjaWFsSW5mK1wiXFxuICAgIFwiK3QuZGVmaW5lUm91bmQrXCJcXG5cXG4gICAgaW50IGltb2QoaW50IHgsIGludCB5KSB7XFxuICAgICAgcmV0dXJuIHggLSB5ICogKHggLyB5KTtcXG4gICAgfVxcblxcbiAgICBpbnQgaWRpdihpbnQgYSwgaW50IGIsIGZsb2F0IHNpZ24pIHtcXG4gICAgICBpbnQgcmVzID0gYSAvIGI7XFxuICAgICAgaW50IG1vZCA9IGltb2QoYSwgYik7XFxuICAgICAgaWYgKHNpZ24gPCAwLiAmJiBtb2QgIT0gMCkge1xcbiAgICAgICAgcmVzIC09IDE7XFxuICAgICAgfVxcbiAgICAgIHJldHVybiByZXM7XFxuICAgIH1cXG5cXG4gICAgLy9CYXNlZCBvbiB0aGUgd29yayBvZiBEYXZlIEhvc2tpbnNcXG4gICAgLy9odHRwczovL3d3dy5zaGFkZXJ0b3kuY29tL3ZpZXcvNGRqU1JXXFxuICAgICNkZWZpbmUgSEFTSFNDQUxFMSA0NDMuODk3NVxcbiAgICBmbG9hdCByYW5kb20oZmxvYXQgc2VlZCl7XFxuICAgICAgdmVjMiBwID0gcmVzdWx0VVYgKiBzZWVkO1xcbiAgICAgIHZlYzMgcDMgID0gZnJhY3QodmVjMyhwLnh5eCkgKiBIQVNIU0NBTEUxKTtcXG4gICAgICBwMyArPSBkb3QocDMsIHAzLnl6eCArIDE5LjE5KTtcXG4gICAgICByZXR1cm4gZnJhY3QoKHAzLnggKyBwMy55KSAqIHAzLnopO1xcbiAgICB9XFxuXFxuICAgIFwiK3ZhK1wiXFxuICAgIFwiK21hK1wiXFxuICAgIFwiK2dhK1wiXFxuICBcIn0obCk7cmV0dXJuIGUuaXNQYWNrZWQ/KGE9ZnVuY3Rpb24odCxlKXtzd2l0Y2godC5sZW5ndGgpe2Nhc2UgMDpyZXR1cm5cIlxcbiAgICBpbnQgZ2V0T3V0cHV0Q29vcmRzKCkge1xcbiAgICAgIHJldHVybiAwO1xcbiAgICB9XFxuICBcIjtjYXNlIDE6cmV0dXJuIGZ1bmN0aW9uKHQsZSl7dmFyIG49W01hdGguY2VpbChlWzBdLzIpLE1hdGguY2VpbChlWzFdLzIpXTtpZigxPT09blswXSlyZXR1cm5cIlxcbiAgICAgIGludCBnZXRPdXRwdXRDb29yZHMoKSB7XFxuICAgICAgICByZXR1cm4gMiAqIGludChyZXN1bHRVVi54ICogXCIrblsxXStcIi4wKTtcXG4gICAgICB9XFxuICAgIFwiO2lmKDE9PT1uWzFdKXJldHVyblwiXFxuICAgICAgaW50IGdldE91dHB1dENvb3JkcygpIHtcXG4gICAgICAgIHJldHVybiAyICogaW50KHJlc3VsdFVWLnkgKiBcIituWzBdK1wiLjApO1xcbiAgICAgIH1cXG4gICAgXCI7cmV0dXJuXCJcXG4gICAgaW50IGdldE91dHB1dENvb3JkcygpIHtcXG4gICAgICBpdmVjMiByZXNUZXhSQyA9IGl2ZWMyKHJlc3VsdFVWLnl4ICpcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZlYzIoXCIrblswXStcIiwgXCIrblsxXStcIikpO1xcbiAgICAgIHJldHVybiAyICogKHJlc1RleFJDLnggKiBcIituWzFdK1wiICsgcmVzVGV4UkMueSk7XFxuICAgIH1cXG4gIFwifSgwLGUpO2Nhc2UgMjpyZXR1cm4gZnVuY3Rpb24odCxlKXt2YXIgbj1bTWF0aC5jZWlsKGVbMF0vMiksTWF0aC5jZWlsKGVbMV0vMildO2lmKFModCxlKSlyZXR1cm5cIlxcbiAgICAgIGl2ZWMyIGdldE91dHB1dENvb3JkcygpIHtcXG4gICAgICAgIHJldHVybiAyICogaXZlYzIocmVzdWx0VVYueXggKiB2ZWMyKFwiK25bMF0rXCIsIFwiK25bMV0rXCIpKTtcXG4gICAgICB9XFxuICAgIFwiO3ZhciByPU1hdGguY2VpbCh0WzFdLzIpO3JldHVyblwiXFxuICAgIGl2ZWMyIGdldE91dHB1dENvb3JkcygpIHtcXG4gICAgICBpdmVjMiByZXNUZXhSQyA9IGl2ZWMyKHJlc3VsdFVWLnl4ICpcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZlYzIoXCIrblswXStcIiwgXCIrblsxXStcIikpO1xcblxcbiAgICAgIGludCBpbmRleCA9IHJlc1RleFJDLnggKiBcIituWzFdK1wiICsgcmVzVGV4UkMueTtcXG4gICAgICBpbnQgciA9IDIgKiAoaW5kZXggLyBcIityK1wiKTtcXG4gICAgICBpbnQgYyA9IGltb2QoaW5kZXgsIFwiK3IrXCIpICogMjtcXG5cXG4gICAgICByZXR1cm4gaXZlYzIociwgYyk7XFxuICAgIH1cXG4gIFwifSh0LGUpO2Nhc2UgMzpyZXR1cm4gbj10LHI9ZSxvPVtNYXRoLmNlaWwoclswXS8yKSxNYXRoLmNlaWwoclsxXS8yKV0sYT1NYXRoLmNlaWwoblsyXS8yKSxpPWEqTWF0aC5jZWlsKG5bMV0vMiksXCJcXG4gICAgaXZlYzMgZ2V0T3V0cHV0Q29vcmRzKCkge1xcbiAgICAgIGl2ZWMyIHJlc1RleFJDID0gaXZlYzIocmVzdWx0VVYueXggKlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmVjMihcIitvWzBdK1wiLCBcIitvWzFdK1wiKSk7XFxuICAgICAgaW50IGluZGV4ID0gcmVzVGV4UkMueCAqIFwiK29bMV0rXCIgKyByZXNUZXhSQy55O1xcblxcbiAgICAgIGludCBiID0gaW5kZXggLyBcIitpK1wiO1xcbiAgICAgIGluZGV4IC09IGIgKiBcIitpK1wiO1xcblxcbiAgICAgIGludCByID0gMiAqIChpbmRleCAvIFwiK2ErXCIpO1xcbiAgICAgIGludCBjID0gaW1vZChpbmRleCwgXCIrYStcIikgKiAyO1xcblxcbiAgICAgIHJldHVybiBpdmVjMyhiLCByLCBjKTtcXG4gICAgfVxcbiAgXCI7ZGVmYXVsdDpyZXR1cm4gZnVuY3Rpb24odCxlKXtmb3IodmFyIG49W01hdGguY2VpbChlWzBdLzIpLE1hdGguY2VpbChlWzFdLzIpXSxyPU1hdGguY2VpbCh0W3QubGVuZ3RoLTFdLzIpLG89cipNYXRoLmNlaWwodFt0Lmxlbmd0aC0yXS8yKSxhPW8saT1cIlwiLHM9XCJiLCByLCBjXCIsdT0yO3U8dC5sZW5ndGgtMTt1KyspYSo9dFt0Lmxlbmd0aC11LTFdLGk9XCJcXG4gICAgICBpbnQgYlwiK3UrXCIgPSBpbmRleCAvIFwiK2ErXCI7XFxuICAgICAgaW5kZXggLT0gYlwiK3UrXCIgKiBcIithK1wiO1xcbiAgICBcIitpLHM9XCJiXCIrdStcIiwgXCIrcztyZXR1cm5cIlxcbiAgICBpdmVjXCIrdC5sZW5ndGgrXCIgZ2V0T3V0cHV0Q29vcmRzKCkge1xcbiAgICAgIGl2ZWMyIHJlc1RleFJDID0gaXZlYzIocmVzdWx0VVYueXggKlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmVjMihcIituWzBdK1wiLCBcIituWzFdK1wiKSk7XFxuICAgICAgaW50IGluZGV4ID0gcmVzVGV4UkMueCAqIFwiK25bMV0rXCIgKyByZXNUZXhSQy55O1xcblxcbiAgICAgIFwiK2krXCJcXG5cXG4gICAgICBpbnQgYiA9IGluZGV4IC8gXCIrbytcIjtcXG4gICAgICBpbmRleCAtPSBiICogXCIrbytcIjtcXG5cXG4gICAgICBpbnQgciA9IDIgKiAoaW5kZXggLyBcIityK1wiKTtcXG4gICAgICBpbnQgYyA9IGltb2QoaW5kZXgsIFwiK3IrXCIpICogMjtcXG5cXG4gICAgICByZXR1cm4gaXZlY1wiK3QubGVuZ3RoK1wiKFwiK3MrXCIpO1xcbiAgICB9XFxuICBcIn0odCxlKX12YXIgbixyLG8sYSxpfShlLmxvZ2ljYWxTaGFwZSxjKSxpPWZ1bmN0aW9uKHQpe3JldHVyblwiXFxuICAgIHZvaWQgc2V0T3V0cHV0KHZlYzQgdmFsKSB7XFxuICAgICAgXCIrdC5vdXRwdXQrXCIgPSB2YWw7XFxuICAgIH1cXG4gIFwifShsKSk6KGE9ZnVuY3Rpb24odCxlKXtzd2l0Y2godC5sZW5ndGgpe2Nhc2UgMDpyZXR1cm5cIlxcbiAgICBpbnQgZ2V0T3V0cHV0Q29vcmRzKCkge1xcbiAgICAgIHJldHVybiAwO1xcbiAgICB9XFxuICBcIjtjYXNlIDE6cmV0dXJuIGZ1bmN0aW9uKHQsZSl7aWYoMT09PWVbMF0pcmV0dXJuXCJcXG4gICAgICBpbnQgZ2V0T3V0cHV0Q29vcmRzKCkge1xcbiAgICAgICAgcmV0dXJuIGludChyZXN1bHRVVi54ICogXCIrZVsxXStcIi4wKTtcXG4gICAgICB9XFxuICAgIFwiO2lmKDE9PT1lWzFdKXJldHVyblwiXFxuICAgICAgaW50IGdldE91dHB1dENvb3JkcygpIHtcXG4gICAgICAgIHJldHVybiBpbnQocmVzdWx0VVYueSAqIFwiK2VbMF0rXCIuMCk7XFxuICAgICAgfVxcbiAgICBcIjtyZXR1cm5cIlxcbiAgICBpbnQgZ2V0T3V0cHV0Q29vcmRzKCkge1xcbiAgICAgIGl2ZWMyIHJlc1RleFJDID0gaXZlYzIocmVzdWx0VVYueXggKlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmVjMihcIitlWzBdK1wiLCBcIitlWzFdK1wiKSk7XFxuICAgICAgcmV0dXJuIHJlc1RleFJDLnggKiBcIitlWzFdK1wiICsgcmVzVGV4UkMueTtcXG4gICAgfVxcbiAgXCJ9KDAsZSk7Y2FzZSAyOnJldHVybiBmdW5jdGlvbih0LGUpe2lmKFModCxlKSlyZXR1cm5cIlxcbiAgICAgIGl2ZWMyIGdldE91dHB1dENvb3JkcygpIHtcXG4gICAgICAgIHJldHVybiBpdmVjMihyZXN1bHRVVi55eCAqIHZlYzIoXCIrZVswXStcIiwgXCIrZVsxXStcIikpO1xcbiAgICAgIH1cXG4gICAgXCI7aWYoMT09PXRbMV0pcmV0dXJuXCJcXG4gICAgICBpdmVjMiBnZXRPdXRwdXRDb29yZHMoKSB7XFxuICAgICAgICBpdmVjMiByZXNUZXhSQyA9IGl2ZWMyKHJlc3VsdFVWLnl4ICpcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmVjMihcIitlWzBdK1wiLCBcIitlWzFdK1wiKSk7XFxuICAgICAgICBpbnQgaW5kZXggPSByZXNUZXhSQy54ICogXCIrZVsxXStcIiArIHJlc1RleFJDLnk7XFxuICAgICAgICByZXR1cm4gaXZlYzIoaW5kZXgsIDApO1xcbiAgICAgIH1cXG4gICAgXCI7aWYoMT09PXRbMF0pcmV0dXJuXCJcXG4gICAgICBpdmVjMiBnZXRPdXRwdXRDb29yZHMoKSB7XFxuICAgICAgICBpdmVjMiByZXNUZXhSQyA9IGl2ZWMyKHJlc3VsdFVWLnl4ICpcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmVjMihcIitlWzBdK1wiLCBcIitlWzFdK1wiKSk7XFxuICAgICAgICBpbnQgaW5kZXggPSByZXNUZXhSQy54ICogXCIrZVsxXStcIiArIHJlc1RleFJDLnk7XFxuICAgICAgICByZXR1cm4gaXZlYzIoMCwgaW5kZXgpO1xcbiAgICAgIH1cXG4gICAgXCI7cmV0dXJuXCJcXG4gICAgaXZlYzIgZ2V0T3V0cHV0Q29vcmRzKCkge1xcbiAgICAgIGl2ZWMyIHJlc1RleFJDID0gaXZlYzIocmVzdWx0VVYueXggKlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmVjMihcIitlWzBdK1wiLCBcIitlWzFdK1wiKSk7XFxuICAgICAgaW50IGluZGV4ID0gcmVzVGV4UkMueCAqIFwiK2VbMV0rXCIgKyByZXNUZXhSQy55O1xcbiAgICAgIGludCByID0gaW5kZXggLyBcIit0WzFdK1wiO1xcbiAgICAgIGludCBjID0gaW5kZXggLSByICogXCIrdFsxXStcIjtcXG4gICAgICByZXR1cm4gaXZlYzIociwgYyk7XFxuICAgIH1cXG4gIFwifSh0LGUpO2Nhc2UgMzpyZXR1cm4gbj1lLHI9Y2EoW1wiclwiLFwiY1wiLFwiZFwiXSx0KSxcIlxcbiAgICBpdmVjMyBnZXRPdXRwdXRDb29yZHMoKSB7XFxuICAgICAgaXZlYzIgcmVzVGV4UkMgPSBpdmVjMihyZXN1bHRVVi55eCAqXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2ZWMyKFwiK25bMF0rXCIsIFwiK25bMV0rXCIpKTtcXG4gICAgICBpbnQgaW5kZXggPSByZXNUZXhSQy54ICogXCIrblsxXStcIiArIHJlc1RleFJDLnk7XFxuICAgICAgXCIrcitcIlxcbiAgICAgIHJldHVybiBpdmVjMyhyLCBjLCBkKTtcXG4gICAgfVxcbiAgXCI7Y2FzZSA0OnJldHVybiBmdW5jdGlvbih0LGUpe3ZhciBuPWNhKFtcInJcIixcImNcIixcImRcIixcImQyXCJdLHQpO3JldHVyblwiXFxuICAgIGl2ZWM0IGdldE91dHB1dENvb3JkcygpIHtcXG4gICAgICBpdmVjMiByZXNUZXhSQyA9IGl2ZWMyKHJlc3VsdFVWLnl4ICpcXG4gICAgICAgIHZlYzIoXCIrZVswXStcIiwgXCIrZVsxXStcIikpO1xcbiAgICAgIGludCBpbmRleCA9IHJlc1RleFJDLnggKiBcIitlWzFdK1wiICsgcmVzVGV4UkMueTtcXG4gICAgICBcIituK1wiXFxuICAgICAgcmV0dXJuIGl2ZWM0KHIsIGMsIGQsIGQyKTtcXG4gICAgfVxcbiAgXCJ9KHQsZSk7Y2FzZSA1OnJldHVybiBmdW5jdGlvbih0LGUpe3ZhciBuPWNhKFtcInJcIixcImNcIixcImRcIixcImQyXCIsXCJkM1wiXSx0KTtyZXR1cm5cIlxcbiAgICBpdmVjNSBnZXRPdXRwdXRDb29yZHMoKSB7XFxuICAgICAgaXZlYzIgcmVzVGV4UkMgPSBpdmVjMihyZXN1bHRVVi55eCAqIHZlYzIoXCIrZVswXStcIixcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiK2VbMV0rXCIpKTtcXG5cXG4gICAgICBpbnQgaW5kZXggPSByZXNUZXhSQy54ICogXCIrZVsxXStcIiArIHJlc1RleFJDLnk7XFxuXFxuICAgICAgXCIrbitcIlxcblxcbiAgICAgIGl2ZWM1IG91dFNoYXBlID0gaXZlYzUociwgYywgZCwgZDIsIGQzKTtcXG4gICAgICByZXR1cm4gb3V0U2hhcGU7XFxuICAgIH1cXG4gIFwifSh0LGUpO2Nhc2UgNjpyZXR1cm4gZnVuY3Rpb24odCxlKXt2YXIgbj1jYShbXCJyXCIsXCJjXCIsXCJkXCIsXCJkMlwiLFwiZDNcIixcImQ0XCJdLHQpO3JldHVyblwiXFxuICAgIGl2ZWM2IGdldE91dHB1dENvb3JkcygpIHtcXG4gICAgICBpdmVjMiByZXNUZXhSQyA9IGl2ZWMyKHJlc3VsdFVWLnl4ICpcXG4gICAgICAgIHZlYzIoXCIrZVswXStcIiwgXCIrZVsxXStcIikpO1xcbiAgICAgIGludCBpbmRleCA9IHJlc1RleFJDLnggKiBcIitlWzFdK1wiICsgcmVzVGV4UkMueTtcXG5cXG4gICAgICBcIituK1wiXFxuXFxuICAgICAgaXZlYzYgcmVzdWx0ID0gaXZlYzYociwgYywgZCwgZDIsIGQzLCBkNCk7XFxuICAgICAgcmV0dXJuIHJlc3VsdDtcXG4gICAgfVxcbiAgXCJ9KHQsZSk7ZGVmYXVsdDp0aHJvdyBuZXcgRXJyb3IodC5sZW5ndGgrXCItRCBvdXRwdXQgc2FtcGxpbmcgaXMgbm90IHlldCBzdXBwb3J0ZWRcIil9dmFyIG4scn0oZS5sb2dpY2FsU2hhcGUsYyksaT1mdW5jdGlvbih0KXtyZXR1cm5cIlxcbiAgICB2b2lkIHNldE91dHB1dChmbG9hdCB2YWwpIHtcXG4gICAgICBcIit0Lm91dHB1dCtcIiA9IHZlYzQodmFsLCAwLCAwLCAwKTtcXG4gICAgfVxcbiAgXCJ9KGwpKSxyJiYoZis9eWEpLFtmLGgsaSxzLGEsdSxuXS5qb2luKFwiXFxuXCIpfWZ1bmN0aW9uIGRhKHQpe3ZhciBlPXQuc2hhcGVJbmZvLmxvZ2ljYWxTaGFwZTtzd2l0Y2goZS5sZW5ndGgpe2Nhc2UgMDpyZXR1cm4gZnVuY3Rpb24odCl7dmFyIGU9dC5uYW1lLG49XCJnZXRcIitlLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpK2Uuc2xpY2UoMSk7aWYodC5zaGFwZUluZm8uaXNVbmlmb3JtKXJldHVyblwiZmxvYXQgXCIrbitcIigpIHtyZXR1cm4gXCIrZStcIjt9XCI7dmFyIHI9dC5zaGFwZUluZm8udGV4U2hhcGUsbz1yWzBdLGE9clsxXTtpZigxPT09byYmMT09PWEpcmV0dXJuXCJcXG4gICAgICBmbG9hdCBcIituK1wiKCkge1xcbiAgICAgICAgcmV0dXJuIHNhbXBsZVRleHR1cmUoXCIrZStcIiwgaGFsZkNSKTtcXG4gICAgICB9XFxuICAgIFwiO3ZhciBpPXQuc2hhcGVJbmZvLnRleFNoYXBlLHM9aVswXSx1PWlbMV0sYz14YShlKTtyZXR1cm5cIlxcbiAgICBmbG9hdCBcIituK1wiKCkge1xcbiAgICAgIHZlYzIgdXYgPSB1dkZyb21GbGF0KFwiK3MrXCIsIFwiK3UrXCIsIFwiK2MrXCIpO1xcbiAgICAgIHJldHVybiBzYW1wbGVUZXh0dXJlKFwiK2UrXCIsIHV2KTtcXG4gICAgfVxcbiAgXCJ9KHQpO2Nhc2UgMTpyZXR1cm4gZnVuY3Rpb24odCl7dmFyIGU9dC5uYW1lLG49XCJnZXRcIitlLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpK2Uuc2xpY2UoMSk7aWYodC5zaGFwZUluZm8uaXNVbmlmb3JtKXJldHVyblwiXFxuICAgICAgZmxvYXQgXCIrbitcIihpbnQgaW5kZXgpIHtcXG4gICAgICAgIFwiK2JhKHQpK1wiXFxuICAgICAgfVxcbiAgICBcIjt2YXIgcj10LnNoYXBlSW5mby50ZXhTaGFwZSxvPXJbMF0sYT1yWzFdO2lmKDE9PT1hJiYxPT09bylyZXR1cm5cIlxcbiAgICAgIGZsb2F0IFwiK24rXCIoaW50IGluZGV4KSB7XFxuICAgICAgICByZXR1cm4gc2FtcGxlVGV4dHVyZShcIitlK1wiLCBoYWxmQ1IpO1xcbiAgICAgIH1cXG4gICAgXCI7dmFyIGk9eGEoZSk7aWYoMT09PWEpcmV0dXJuXCJcXG4gICAgICBmbG9hdCBcIituK1wiKGludCBpbmRleCkge1xcbiAgICAgICAgdmVjMiB1diA9IHZlYzIoMC41LCAoZmxvYXQoaW5kZXggKyBcIitpK1wiKSArIDAuNSkgLyBcIitvK1wiLjApO1xcbiAgICAgICAgcmV0dXJuIHNhbXBsZVRleHR1cmUoXCIrZStcIiwgdXYpO1xcbiAgICAgIH1cXG4gICAgXCI7aWYoMT09PW8pcmV0dXJuXCJcXG4gICAgICBmbG9hdCBcIituK1wiKGludCBpbmRleCkge1xcbiAgICAgICAgdmVjMiB1diA9IHZlYzIoKGZsb2F0KGluZGV4ICsgXCIraStcIikgKyAwLjUpIC8gXCIrYStcIi4wLCAwLjUpO1xcbiAgICAgICAgcmV0dXJuIHNhbXBsZVRleHR1cmUoXCIrZStcIiwgdXYpO1xcbiAgICAgIH1cXG4gICAgXCI7cmV0dXJuXCJcXG4gICAgZmxvYXQgXCIrbitcIihpbnQgaW5kZXgpIHtcXG4gICAgICB2ZWMyIHV2ID0gdXZGcm9tRmxhdChcIitvK1wiLCBcIithK1wiLCBpbmRleCArIFwiK2krXCIpO1xcbiAgICAgIHJldHVybiBzYW1wbGVUZXh0dXJlKFwiK2UrXCIsIHV2KTtcXG4gICAgfVxcbiAgXCJ9KHQpO2Nhc2UgMjpyZXR1cm4gZnVuY3Rpb24odCl7dmFyIGU9dC5zaGFwZUluZm8ubG9naWNhbFNoYXBlLG49dC5uYW1lLHI9XCJnZXRcIituLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpK24uc2xpY2UoMSksbz10LnNoYXBlSW5mby50ZXhTaGFwZTtpZihudWxsIT1vJiZTKGUsbykpe3ZhciBhPW9bMF0saT1vWzFdO3JldHVyblwiXFxuICAgIGZsb2F0IFwiK3IrXCIoaW50IHJvdywgaW50IGNvbCkge1xcbiAgICAgIHZlYzIgdXYgPSAodmVjMihjb2wsIHJvdykgKyBoYWxmQ1IpIC8gdmVjMihcIitpK1wiLjAsIFwiK2ErXCIuMCk7XFxuICAgICAgcmV0dXJuIHNhbXBsZVRleHR1cmUoXCIrbitcIiwgdXYpO1xcbiAgICB9XFxuICBcIn12YXIgcz1NKGUpLHU9cy5uZXdTaGFwZSxjPXMua2VwdERpbXMsbD11O2lmKGwubGVuZ3RoPGUubGVuZ3RoKXt2YXIgaD1DYSh0LGwpO3JldHVyblwiXFxuICAgICAgXCIrZGEoaCkrXCJcXG4gICAgICBmbG9hdCBcIityK1wiKGludCByb3csIGludCBjb2wpIHtcXG4gICAgICAgIHJldHVybiBcIityK1wiKFwiK0VhKFtcInJvd1wiLFwiY29sXCJdLGMpK1wiKTtcXG4gICAgICB9XFxuICAgIFwifWlmKHQuc2hhcGVJbmZvLmlzVW5pZm9ybSlyZXR1cm5cIlxcbiAgICAgIGZsb2F0IFwiK3IrXCIoaW50IHJvdywgaW50IGNvbCkge1xcbiAgICAgICAgaW50IGluZGV4ID0gcm91bmQoZG90KHZlYzIocm93LCBjb2wpLCB2ZWMyKFwiK2VbMV0rXCIsIDEpKSk7XFxuICAgICAgICBcIitiYSh0KStcIlxcbiAgICAgIH1cXG4gICAgXCI7dmFyIGY9b1swXSxkPW9bMV0scD14YShuKTtpZigxPT09ZClyZXR1cm5cIlxcbiAgICBmbG9hdCBcIityK1wiKGludCByb3csIGludCBjb2wpIHtcXG4gICAgICBmbG9hdCBpbmRleCA9IGRvdCh2ZWMzKHJvdywgY29sLCBcIitwK1wiKSwgdmVjMyhcIitlWzFdK1wiLCAxLCAxKSk7XFxuICAgICAgdmVjMiB1diA9IHZlYzIoMC41LCAoaW5kZXggKyAwLjUpIC8gXCIrZitcIi4wKTtcXG4gICAgICByZXR1cm4gc2FtcGxlVGV4dHVyZShcIituK1wiLCB1dik7XFxuICAgIH1cXG4gIFwiO2lmKDE9PT1mKXJldHVyblwiXFxuICAgIGZsb2F0IFwiK3IrXCIoaW50IHJvdywgaW50IGNvbCkge1xcbiAgICAgIGZsb2F0IGluZGV4ID0gZG90KHZlYzMocm93LCBjb2wsIFwiK3ArXCIpLCB2ZWMzKFwiK2VbMV0rXCIsIDEsIDEpKTtcXG4gICAgICB2ZWMyIHV2ID0gdmVjMigoaW5kZXggKyAwLjUpIC8gXCIrZCtcIi4wLCAwLjUpO1xcbiAgICAgIHJldHVybiBzYW1wbGVUZXh0dXJlKFwiK24rXCIsIHV2KTtcXG4gICAgfVxcbiAgXCI7cmV0dXJuXCJcXG4gIGZsb2F0IFwiK3IrXCIoaW50IHJvdywgaW50IGNvbCkge1xcbiAgICAvLyBFeHBsaWNpdGx5IHVzZSBpbnRlZ2VyIG9wZXJhdGlvbnMgYXMgZG90KCkgb25seSB3b3JrcyBvbiBmbG9hdHMuXFxuICAgIGludCBpbmRleCA9IHJvdyAqIFwiK2VbMV0rXCIgKyBjb2wgKyBcIitwK1wiO1xcbiAgICB2ZWMyIHV2ID0gdXZGcm9tRmxhdChcIitmK1wiLCBcIitkK1wiLCBpbmRleCk7XFxuICAgIHJldHVybiBzYW1wbGVUZXh0dXJlKFwiK24rXCIsIHV2KTtcXG4gIH1cXG5cIn0odCk7Y2FzZSAzOnJldHVybiBmdW5jdGlvbih0KXt2YXIgZT10LnNoYXBlSW5mby5sb2dpY2FsU2hhcGUsbj10Lm5hbWUscj1cImdldFwiK24uY2hhckF0KDApLnRvVXBwZXJDYXNlKCkrbi5zbGljZSgxKSxvPWVbMV0qZVsyXSxhPWVbMl0saT1NKGUpLHM9aS5uZXdTaGFwZSx1PWkua2VwdERpbXMsYz1zO2lmKGMubGVuZ3RoPGUubGVuZ3RoKXt2YXIgbD1DYSh0LGMpO3JldHVyblwiXFxuICAgICAgICBcIitkYShsKStcIlxcbiAgICAgICAgZmxvYXQgXCIrcitcIihpbnQgcm93LCBpbnQgY29sLCBpbnQgZGVwdGgpIHtcXG4gICAgICAgICAgcmV0dXJuIFwiK3IrXCIoXCIrRWEoW1wicm93XCIsXCJjb2xcIixcImRlcHRoXCJdLHUpK1wiKTtcXG4gICAgICAgIH1cXG4gICAgICBcIn1pZih0LnNoYXBlSW5mby5pc1VuaWZvcm0pcmV0dXJuXCJcXG4gICAgICBmbG9hdCBcIityK1wiKGludCByb3csIGludCBjb2wsIGludCBkZXB0aCkge1xcbiAgICAgICAgaW50IGluZGV4ID0gcm91bmQoZG90KHZlYzMocm93LCBjb2wsIGRlcHRoKSxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHZlYzMoXCIrbytcIiwgXCIrYStcIiwgMSkpKTtcXG4gICAgICAgIFwiK2JhKHQpK1wiXFxuICAgICAgfVxcbiAgICBcIjt2YXIgaD10LnNoYXBlSW5mby50ZXhTaGFwZSxmPWhbMF0sZD1oWzFdLHA9dC5zaGFwZUluZm8uZmxhdE9mZnNldDtpZihkPT09byYmbnVsbD09cClyZXR1cm5cIlxcbiAgICAgICAgZmxvYXQgXCIrcitcIihpbnQgcm93LCBpbnQgY29sLCBpbnQgZGVwdGgpIHtcXG4gICAgICAgICAgZmxvYXQgdGV4UiA9IGZsb2F0KHJvdyk7XFxuICAgICAgICAgIGZsb2F0IHRleEMgPSBkb3QodmVjMihjb2wsIGRlcHRoKSwgdmVjMihcIithK1wiLCAxKSk7XFxuICAgICAgICAgIHZlYzIgdXYgPSAodmVjMih0ZXhDLCB0ZXhSKSArIGhhbGZDUikgL1xcbiAgICAgICAgICAgICAgICAgICAgIHZlYzIoXCIrZCtcIi4wLCBcIitmK1wiLjApO1xcbiAgICAgICAgICByZXR1cm4gc2FtcGxlVGV4dHVyZShcIituK1wiLCB1dik7XFxuICAgICAgICB9XFxuICAgICAgXCI7aWYoZD09PWEmJm51bGw9PXApcmV0dXJuXCJcXG4gICAgZmxvYXQgXCIrcitcIihpbnQgcm93LCBpbnQgY29sLCBpbnQgZGVwdGgpIHtcXG4gICAgICBmbG9hdCB0ZXhSID0gZG90KHZlYzIocm93LCBjb2wpLCB2ZWMyKFwiK2VbMV0rXCIsIDEpKTtcXG4gICAgICBmbG9hdCB0ZXhDID0gZmxvYXQoZGVwdGgpO1xcbiAgICAgIHZlYzIgdXYgPSAodmVjMih0ZXhDLCB0ZXhSKSArIGhhbGZDUikgLyB2ZWMyKFwiK2QrXCIuMCwgXCIrZitcIi4wKTtcXG4gICAgICByZXR1cm4gc2FtcGxlVGV4dHVyZShcIituK1wiLCB1dik7XFxuICAgIH1cXG4gIFwiO3ZhciB2PXhhKG4pO3JldHVyblwiXFxuICAgICAgZmxvYXQgXCIrcitcIihpbnQgcm93LCBpbnQgY29sLCBpbnQgZGVwdGgpIHtcXG4gICAgICAgIC8vIEV4cGxpY2l0bHkgdXNlIGludGVnZXIgb3BlcmF0aW9ucyBhcyBkb3QoKSBvbmx5IHdvcmtzIG9uIGZsb2F0cy5cXG4gICAgICAgIGludCBpbmRleCA9IHJvdyAqIFwiK28rXCIgKyBjb2wgKiBcIithK1wiICsgZGVwdGggKyBcIit2K1wiO1xcbiAgICAgICAgdmVjMiB1diA9IHV2RnJvbUZsYXQoXCIrZitcIiwgXCIrZCtcIiwgaW5kZXgpO1xcbiAgICAgICAgcmV0dXJuIHNhbXBsZVRleHR1cmUoXCIrbitcIiwgdXYpO1xcbiAgICAgIH1cXG4gIFwifSh0KTtjYXNlIDQ6cmV0dXJuIGZ1bmN0aW9uKHQpe3ZhciBlPXQuc2hhcGVJbmZvLmxvZ2ljYWxTaGFwZSxuPXQubmFtZSxyPVwiZ2V0XCIrbi5jaGFyQXQoMCkudG9VcHBlckNhc2UoKStuLnNsaWNlKDEpLG89ZVszXSxhPWVbMl0qbyxpPWVbMV0qYSxzPU0oZSksdT1zLm5ld1NoYXBlLGM9cy5rZXB0RGltcztpZih1Lmxlbmd0aDxlLmxlbmd0aCl7dmFyIGw9Q2EodCx1KTtyZXR1cm5cIlxcbiAgICAgIFwiK2RhKGwpK1wiXFxuICAgICAgZmxvYXQgXCIrcitcIihpbnQgcm93LCBpbnQgY29sLCBpbnQgZGVwdGgsIGludCBkZXB0aDIpIHtcXG4gICAgICAgIHJldHVybiBcIityK1wiKFwiK0VhKFtcInJvd1wiLFwiY29sXCIsXCJkZXB0aFwiLFwiZGVwdGgyXCJdLGMpK1wiKTtcXG4gICAgICB9XFxuICAgIFwifWlmKHQuc2hhcGVJbmZvLmlzVW5pZm9ybSlyZXR1cm5cIlxcbiAgICAgIGZsb2F0IFwiK3IrXCIoaW50IHJvdywgaW50IGNvbCwgaW50IGRlcHRoLCBpbnQgZGVwdGgyKSB7XFxuICAgICAgICBpbnQgaW5kZXggPSByb3VuZChkb3QodmVjNChyb3csIGNvbCwgZGVwdGgsIGRlcHRoMiksXFxuICAgICAgICAgICAgICAgICAgICAgICAgICB2ZWM0KFwiK2krXCIsIFwiK2ErXCIsIFwiK28rXCIsIDEpKSk7XFxuICAgICAgICBcIitiYSh0KStcIlxcbiAgICAgIH1cXG4gICAgXCI7dmFyIGg9dC5zaGFwZUluZm8uZmxhdE9mZnNldCxmPXQuc2hhcGVJbmZvLnRleFNoYXBlLGQ9ZlswXSxwPWZbMV07aWYocD09PWkmJm51bGw9PWgpcmV0dXJuXCJcXG4gICAgICBmbG9hdCBcIityK1wiKGludCByb3csIGludCBjb2wsIGludCBkZXB0aCwgaW50IGRlcHRoMikge1xcbiAgICAgICAgZmxvYXQgdGV4UiA9IGZsb2F0KHJvdyk7XFxuICAgICAgICBmbG9hdCB0ZXhDID1cXG4gICAgICAgICAgICBkb3QodmVjMyhjb2wsIGRlcHRoLCBkZXB0aDIpLFxcbiAgICAgICAgICAgICAgICB2ZWMzKFwiK2ErXCIsIFwiK28rXCIsIDEpKTtcXG4gICAgICAgIHZlYzIgdXYgPSAodmVjMih0ZXhDLCB0ZXhSKSArIGhhbGZDUikgL1xcbiAgICAgICAgICAgICAgICAgICB2ZWMyKFwiK3ArXCIuMCwgXCIrZCtcIi4wKTtcXG4gICAgICAgIHJldHVybiBzYW1wbGVUZXh0dXJlKFwiK24rXCIsIHV2KTtcXG4gICAgICB9XFxuICAgIFwiO2lmKHA9PT1vJiZudWxsPT1oKXJldHVyblwiXFxuICAgICAgZmxvYXQgXCIrcitcIihpbnQgcm93LCBpbnQgY29sLCBpbnQgZGVwdGgsIGludCBkZXB0aDIpIHtcXG4gICAgICAgIGZsb2F0IHRleFIgPSBkb3QodmVjMyhyb3csIGNvbCwgZGVwdGgpLFxcbiAgICAgICAgICAgICAgICAgICAgICAgICB2ZWMzKFwiK2VbMV0qZVsyXStcIiwgXCIrZVsyXStcIiwgMSkpO1xcbiAgICAgICAgZmxvYXQgdGV4QyA9IGZsb2F0KGRlcHRoMik7XFxuICAgICAgICB2ZWMyIHV2ID0gKHZlYzIodGV4QywgdGV4UikgKyBoYWxmQ1IpIC9cXG4gICAgICAgICAgICAgICAgICB2ZWMyKFwiK3ArXCIuMCwgXCIrZCtcIi4wKTtcXG4gICAgICAgIHJldHVybiBzYW1wbGVUZXh0dXJlKFwiK24rXCIsIHV2KTtcXG4gICAgICB9XFxuICAgIFwiO3ZhciB2PXhhKG4pO3JldHVyblwiXFxuICAgIGZsb2F0IFwiK3IrXCIoaW50IHJvdywgaW50IGNvbCwgaW50IGRlcHRoLCBpbnQgZGVwdGgyKSB7XFxuICAgICAgLy8gRXhwbGljaXRseSB1c2UgaW50ZWdlciBvcGVyYXRpb25zIGFzIGRvdCgpIG9ubHkgd29ya3Mgb24gZmxvYXRzLlxcbiAgICAgIGludCBpbmRleCA9IHJvdyAqIFwiK2krXCIgKyBjb2wgKiBcIithK1wiICtcXG4gICAgICAgICAgZGVwdGggKiBcIitvK1wiICsgZGVwdGgyO1xcbiAgICAgIHZlYzIgdXYgPSB1dkZyb21GbGF0KFwiK2QrXCIsIFwiK3ArXCIsIGluZGV4ICsgXCIrditcIik7XFxuICAgICAgcmV0dXJuIHNhbXBsZVRleHR1cmUoXCIrbitcIiwgdXYpO1xcbiAgICB9XFxuICBcIn0odCk7Y2FzZSA1OnJldHVybiBmdW5jdGlvbih0KXt2YXIgZT10LnNoYXBlSW5mby5sb2dpY2FsU2hhcGUsbj10Lm5hbWUscj1cImdldFwiK24uY2hhckF0KDApLnRvVXBwZXJDYXNlKCkrbi5zbGljZSgxKSxvPWVbNF0sYT1lWzNdKm8saT1lWzJdKmEscz1lWzFdKmksdT1NKGUpLGM9dS5uZXdTaGFwZSxsPXUua2VwdERpbXM7aWYoYy5sZW5ndGg8ZS5sZW5ndGgpe3ZhciBoPUNhKHQsYyk7cmV0dXJuXCJcXG4gICAgICBcIitkYShoKStcIlxcbiAgICAgIGZsb2F0IFwiK3IrXCIoaW50IHJvdywgaW50IGNvbCwgaW50IGRlcHRoLCBpbnQgZGVwdGgyLCBpbnQgZGVwdGgzKSB7XFxuICAgICAgICByZXR1cm4gXCIrcitcIihcIitFYShbXCJyb3dcIixcImNvbFwiLFwiZGVwdGhcIixcImRlcHRoMlwiLFwiZGVwdGgzXCJdLGwpK1wiKTtcXG4gICAgICB9XFxuICAgIFwifWlmKHQuc2hhcGVJbmZvLmlzVW5pZm9ybSlyZXR1cm5cIlxcbiAgICAgIGZsb2F0IFwiK3IrXCIoaW50IHJvdywgaW50IGNvbCwgaW50IGRlcHRoLCBpbnQgZGVwdGgyLCBpbnQgZGVwdGgzKSB7XFxuICAgICAgICBmbG9hdCBpbmRleCA9IGRvdChcXG4gICAgICAgICAgdmVjNChyb3csIGNvbCwgZGVwdGgsIGRlcHRoMiksXFxuICAgICAgICAgIHZlYzQoXCIrcytcIiwgXCIraStcIiwgXCIrYStcIiwgXCIrbytcIikpICtcXG4gICAgICAgICAgZGVwdGgzO1xcbiAgICAgICAgXCIrYmEodCkrXCJcXG4gICAgICB9XFxuICAgIFwiO3ZhciBmPXQuc2hhcGVJbmZvLmZsYXRPZmZzZXQsZD10LnNoYXBlSW5mby50ZXhTaGFwZSxwPWRbMF0sdj1kWzFdO2lmKHY9PT1zJiZudWxsPT1mKXJldHVyblwiXFxuICAgICAgZmxvYXQgXCIrcitcIihpbnQgcm93LCBpbnQgY29sLCBpbnQgZGVwdGgsIGludCBkZXB0aDIsIGludCBkZXB0aDMpIHtcXG4gICAgICAgIGludCB0ZXhSID0gcm93O1xcbiAgICAgICAgZmxvYXQgdGV4QyA9IGRvdCh2ZWM0KGNvbCwgZGVwdGgsIGRlcHRoMiwgZGVwdGgzKSxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgdmVjNChcIitpK1wiLCBcIithK1wiLCBcIitvK1wiLCAxKSk7XFxuICAgICAgICB2ZWMyIHV2ID0gKHZlYzIodGV4QywgdGV4UikgKyBoYWxmQ1IpIC9cXG4gICAgICAgICAgICAgICAgICAgdmVjMihcIit2K1wiLjAsIFwiK3ArXCIuMCk7XFxuICAgICAgICByZXR1cm4gc2FtcGxlVGV4dHVyZShcIituK1wiLCB1dik7XFxuICAgICAgfVxcbiAgICBcIjtpZih2PT09byYmbnVsbD09ZilyZXR1cm5cIlxcbiAgICAgIGZsb2F0IFwiK3IrXCIoaW50IHJvdywgaW50IGNvbCwgaW50IGRlcHRoLCBpbnQgZGVwdGgyLCBpbnQgZGVwdGgzKSB7XFxuICAgICAgICBmbG9hdCB0ZXhSID0gZG90KFxcbiAgICAgICAgICB2ZWM0KHJvdywgY29sLCBkZXB0aCwgZGVwdGgyKSxcXG4gICAgICAgICAgdmVjNChcIitlWzFdKmVbMl0qZVszXStcIixcXG4gICAgICAgICAgICAgICBcIitlWzJdKmVbM10rXCIsIFwiK2VbM10rXCIsIDEpKTtcXG4gICAgICAgIGludCB0ZXhDID0gZGVwdGgzO1xcbiAgICAgICAgdmVjMiB1diA9ICh2ZWMyKHRleEMsIHRleFIpICsgaGFsZkNSKSAvXFxuICAgICAgICAgICAgICAgICAgdmVjMihcIit2K1wiLjAsIFwiK3ArXCIuMCk7XFxuICAgICAgICByZXR1cm4gc2FtcGxlVGV4dHVyZShcIituK1wiLCB1dik7XFxuICAgICAgfVxcbiAgICBcIjt2YXIgbT14YShuKTtyZXR1cm5cIlxcbiAgICBmbG9hdCBcIityK1wiKGludCByb3csIGludCBjb2wsIGludCBkZXB0aCwgaW50IGRlcHRoMiwgaW50IGRlcHRoMykge1xcbiAgICAgIC8vIEV4cGxpY2l0bHkgdXNlIGludGVnZXIgb3BlcmF0aW9ucyBhcyBkb3QoKSBvbmx5IHdvcmtzIG9uIGZsb2F0cy5cXG4gICAgICBpbnQgaW5kZXggPSByb3cgKiBcIitzK1wiICsgY29sICogXCIraStcIiArIGRlcHRoICogXCIrYStcIiArXFxuICAgICAgICAgIGRlcHRoMiAqIFwiK28rXCIgKyBkZXB0aDMgKyBcIittK1wiO1xcbiAgICAgIHZlYzIgdXYgPSB1dkZyb21GbGF0KFwiK3ArXCIsIFwiK3YrXCIsIGluZGV4KTtcXG4gICAgICByZXR1cm4gc2FtcGxlVGV4dHVyZShcIituK1wiLCB1dik7XFxuICAgIH1cXG4gIFwifSh0KTtjYXNlIDY6cmV0dXJuIGZ1bmN0aW9uKHQpe3ZhciBlPXQuc2hhcGVJbmZvLmxvZ2ljYWxTaGFwZSxuPXQubmFtZSxyPVwiZ2V0XCIrbi5jaGFyQXQoMCkudG9VcHBlckNhc2UoKStuLnNsaWNlKDEpLG89TShlKSxhPW8ubmV3U2hhcGUsaT1vLmtlcHREaW1zO2lmKGEubGVuZ3RoPGUubGVuZ3RoKXt2YXIgcz1DYSh0LGEpO3JldHVyblwiXFxuICAgICAgXCIrZGEocykrXCJcXG4gICAgICBmbG9hdCBcIityK1wiKGludCByb3csIGludCBjb2wsIGludCBkZXB0aCxcXG4gICAgICAgICAgICAgICAgICAgIGludCBkZXB0aDIsIGludCBkZXB0aDMsIGludCBkZXB0aDQpIHtcXG4gICAgICAgIHJldHVybiBcIityK1wiKFwiK0VhKFtcInJvd1wiLFwiY29sXCIsXCJkZXB0aFwiLFwiZGVwdGgyXCIsXCJkZXB0aDNcIixcImRlcHRoNFwiXSxpKStcIik7XFxuICAgICAgfVxcbiAgICBcIn12YXIgdT1lWzVdLGM9ZVs0XSp1LGw9ZVszXSpjLGg9ZVsyXSpsLGY9ZVsxXSpoO2lmKHQuc2hhcGVJbmZvLmlzVW5pZm9ybSlyZXR1cm5cIlxcbiAgICAgIGZsb2F0IFwiK3IrXCIoaW50IHJvdywgaW50IGNvbCwgaW50IGRlcHRoLFxcbiAgICAgICAgICAgICAgICAgIGludCBkZXB0aDIsIGludCBkZXB0aDMsIGludCBkZXB0aDQpIHtcXG4gICAgICAgIGludCBpbmRleCA9IHJvdW5kKGRvdChcXG4gICAgICAgICAgdmVjNChyb3csIGNvbCwgZGVwdGgsIGRlcHRoMiksXFxuICAgICAgICAgIHZlYzQoXCIrZitcIiwgXCIraCtcIiwgXCIrbCtcIiwgXCIrYytcIikpICtcXG4gICAgICAgICAgZG90KFxcbiAgICAgICAgICAgIHZlYzIoZGVwdGgzLCBkZXB0aDQpLFxcbiAgICAgICAgICAgIHZlYzIoXCIrdStcIiwgMSkpKTtcXG4gICAgICAgIFwiK2JhKHQpK1wiXFxuICAgICAgfVxcbiAgICBcIjt2YXIgZD10LnNoYXBlSW5mby5mbGF0T2Zmc2V0LHA9dC5zaGFwZUluZm8udGV4U2hhcGUsdj1wWzBdLG09cFsxXTtpZihtPT09ZiYmbnVsbD09ZClyZXR1cm5cIlxcbiAgICAgIGZsb2F0IFwiK3IrXCIoaW50IHJvdywgaW50IGNvbCwgaW50IGRlcHRoLFxcbiAgICAgICAgICAgICAgICAgICAgaW50IGRlcHRoMiwgaW50IGRlcHRoMywgaW50IGRlcHRoNCkge1xcbiAgICAgICAgaW50IHRleFIgPSByb3c7XFxuICAgICAgICBmbG9hdCB0ZXhDID0gZG90KHZlYzQoY29sLCBkZXB0aCwgZGVwdGgyLCBkZXB0aDMpLFxcbiAgICAgICAgICB2ZWM0KFwiK2grXCIsIFwiK2wrXCIsIFwiK2MrXCIsIFwiK3UrXCIpKSArXFxuICAgICAgICAgICAgICAgZmxvYXQoZGVwdGg0KTtcXG4gICAgICAgIHZlYzIgdXYgPSAodmVjMih0ZXhDLCB0ZXhSKSArIGhhbGZDUikgL1xcbiAgICAgICAgICAgICAgICAgICB2ZWMyKFwiK20rXCIuMCwgXCIrditcIi4wKTtcXG4gICAgICAgIHJldHVybiBzYW1wbGVUZXh0dXJlKFwiK24rXCIsIHV2KTtcXG4gICAgICB9XFxuICAgIFwiO2lmKG09PT11JiZudWxsPT1kKXJldHVyblwiXFxuICAgICAgZmxvYXQgXCIrcitcIihpbnQgcm93LCBpbnQgY29sLCBpbnQgZGVwdGgsXFxuICAgICAgICAgICAgICAgICAgICBpbnQgZGVwdGgyLCBpbnQgZGVwdGgzLCBpbnQgZGVwdGg0KSB7XFxuICAgICAgICBmbG9hdCB0ZXhSID0gZG90KHZlYzQocm93LCBjb2wsIGRlcHRoLCBkZXB0aDIpLFxcbiAgICAgICAgICB2ZWM0KFwiK2VbMV0qZVsyXSplWzNdKmVbNF0rXCIsXFxuICAgICAgICAgICAgICAgXCIrZVsyXSplWzNdKmVbNF0rXCIsXFxuICAgICAgICAgICAgICAgXCIrZVszXSplWzRdK1wiLFxcbiAgICAgICAgICAgICAgIFwiK2VbNF0rXCIpKSArIGZsb2F0KGRlcHRoMyk7XFxuICAgICAgICBpbnQgdGV4QyA9IGRlcHRoNDtcXG4gICAgICAgIHZlYzIgdXYgPSAodmVjMih0ZXhDLCB0ZXhSKSArIGhhbGZDUikgL1xcbiAgICAgICAgICAgICAgICAgIHZlYzIoXCIrbStcIi4wLCBcIit2K1wiLjApO1xcbiAgICAgICAgcmV0dXJuIHNhbXBsZVRleHR1cmUoXCIrbitcIiwgdXYpO1xcbiAgICAgIH1cXG4gICAgXCI7dmFyIGc9eGEobik7cmV0dXJuXCJcXG4gICAgZmxvYXQgXCIrcitcIihpbnQgcm93LCBpbnQgY29sLCBpbnQgZGVwdGgsXFxuICAgICAgICAgICAgICAgICAgaW50IGRlcHRoMiwgaW50IGRlcHRoMywgaW50IGRlcHRoNCkge1xcbiAgICAgIC8vIEV4cGxpY2l0bHkgdXNlIGludGVnZXIgb3BlcmF0aW9ucyBhcyBkb3QoKSBvbmx5IHdvcmtzIG9uIGZsb2F0cy5cXG4gICAgICBpbnQgaW5kZXggPSByb3cgKiBcIitmK1wiICsgY29sICogXCIraCtcIiArIGRlcHRoICogXCIrbCtcIiArXFxuICAgICAgICAgIGRlcHRoMiAqIFwiK2MrXCIgKyBkZXB0aDMgKiBcIit1K1wiICsgZGVwdGg0ICsgXCIrZytcIjtcXG4gICAgICB2ZWMyIHV2ID0gdXZGcm9tRmxhdChcIit2K1wiLCBcIittK1wiLCBpbmRleCk7XFxuICAgICAgcmV0dXJuIHNhbXBsZVRleHR1cmUoXCIrbitcIiwgdXYpO1xcbiAgICB9XFxuICBcIn0odCk7ZGVmYXVsdDp0aHJvdyBuZXcgRXJyb3IoZS5sZW5ndGgrXCItRCBpbnB1dCBzYW1wbGluZyBpcyBub3QgeWV0IHN1cHBvcnRlZFwiKX19ZnVuY3Rpb24gcGEodCl7dmFyIGUsbixyO3N3aXRjaCh0LnNoYXBlSW5mby5sb2dpY2FsU2hhcGUubGVuZ3RoKXtjYXNlIDA6cmV0dXJuIGU9dC5uYW1lLG49XCJnZXRcIitlLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpK2Uuc2xpY2UoMSkscj11YSgpLFwiXFxuICAgIHZlYzQgXCIrbitcIigpIHtcXG4gICAgICByZXR1cm4gXCIrci50ZXh0dXJlMkQrXCIoXCIrZStcIiwgaGFsZkNSKTtcXG4gICAgfVxcbiAgXCI7Y2FzZSAxOnJldHVybiBmdW5jdGlvbih0KXt2YXIgZT10Lm5hbWUsbj1cImdldFwiK2UuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkrZS5zbGljZSgxKSxyPXQuc2hhcGVJbmZvLnRleFNoYXBlLG89W01hdGguY2VpbChyWzBdLzIpLE1hdGguY2VpbChyWzFdLzIpXSxhPXVhKCk7cmV0dXJuXCJcXG4gICAgdmVjNCBcIituK1wiKGludCBpbmRleCkge1xcbiAgICAgIHZlYzIgdXYgPSBwYWNrZWRVVmZyb20xRChcXG4gICAgICAgIFwiK29bMF0rXCIsIFwiK29bMV0rXCIsIGluZGV4KTtcXG4gICAgICByZXR1cm4gXCIrYS50ZXh0dXJlMkQrXCIoXCIrZStcIiwgdXYpO1xcbiAgICB9XFxuICBcIn0odCk7Y2FzZSAyOnJldHVybiBmdW5jdGlvbih0KXt2YXIgZT10LnNoYXBlSW5mby5sb2dpY2FsU2hhcGUsbj10Lm5hbWUscj1cImdldFwiK24uY2hhckF0KDApLnRvVXBwZXJDYXNlKCkrbi5zbGljZSgxKSxvPXQuc2hhcGVJbmZvLnRleFNoYXBlLGE9b1swXSxpPW9bMV0scz11YSgpO2lmKG51bGwhPW8mJlMoZSxvKSlyZXR1cm5cIlxcbiAgICAgIHZlYzQgXCIrcitcIihpbnQgcm93LCBpbnQgY29sKSB7XFxuICAgICAgICB2ZWMyIHV2ID0gKHZlYzIoY29sLCByb3cpICsgaGFsZkNSKSAvIHZlYzIoXCIraStcIi4wLCBcIithK1wiLjApO1xcblxcbiAgICAgICAgcmV0dXJuIFwiK3MudGV4dHVyZTJEK1wiKFwiK24rXCIsIHV2KTtcXG4gICAgICB9XFxuICAgIFwiO3ZhciB1PVtNYXRoLmNlaWwob1swXS8yKSxNYXRoLmNlaWwob1sxXS8yKV0sYz1NYXRoLmNlaWwoZVsxXS8yKTtyZXR1cm5cIlxcbiAgICB2ZWM0IFwiK3IrXCIoaW50IHJvdywgaW50IGNvbCkge1xcbiAgICAgIHZlYzIgdXYgPSBwYWNrZWRVVmZyb20yRChcIitjK1wiLCBcIit1WzBdK1wiLCBcIit1WzFdK1wiLCByb3csIGNvbCk7XFxuICAgICAgcmV0dXJuIFwiK3MudGV4dHVyZTJEK1wiKFwiK24rXCIsIHV2KTtcXG4gICAgfVxcbiAgXCJ9KHQpO2Nhc2UgMzpyZXR1cm4gZnVuY3Rpb24odCl7dmFyIGU9dC5zaGFwZUluZm8ubG9naWNhbFNoYXBlLG49dC5uYW1lLHI9XCJnZXRcIituLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpK24uc2xpY2UoMSksbz10LnNoYXBlSW5mby50ZXhTaGFwZSxhPVtNYXRoLmNlaWwob1swXS8yKSxNYXRoLmNlaWwob1sxXS8yKV07aWYoMT09PWVbMF0pe3ZhciBpPWUuc2xpY2UoMSkscz1DYSh0LGkpO3JldHVyblwiXFxuICAgICAgICBcIitwYShzKStcIlxcbiAgICAgICAgdmVjNCBcIityK1wiKGludCBiLCBpbnQgcm93LCBpbnQgY29sKSB7XFxuICAgICAgICAgIHJldHVybiBcIityK1wiKFwiK0VhKFtcImJcIixcInJvd1wiLFwiY29sXCJdLFsxLDJdKStcIik7XFxuICAgICAgICB9XFxuICAgICAgXCJ9dmFyIHU9YVswXSxjPWFbMV0sbD1NYXRoLmNlaWwoZVsyXS8yKSxoPWwqTWF0aC5jZWlsKGVbMV0vMiksZj11YSgpO3JldHVyblwiXFxuICAgIHZlYzQgXCIrcitcIihpbnQgYiwgaW50IHJvdywgaW50IGNvbCkge1xcbiAgICAgIHZlYzIgdXYgPSBwYWNrZWRVVmZyb20zRChcXG4gICAgICAgIFwiK3UrXCIsIFwiK2MrXCIsIFwiK2grXCIsIFwiK2wrXCIsIGIsIHJvdywgY29sKTtcXG4gICAgICByZXR1cm4gXCIrZi50ZXh0dXJlMkQrXCIoXCIrbitcIiwgdXYpO1xcbiAgICB9XFxuICBcIn0odCk7ZGVmYXVsdDpyZXR1cm4gZnVuY3Rpb24odCl7Zm9yKHZhciBlPXQuc2hhcGVJbmZvLmxvZ2ljYWxTaGFwZSxuPWUubGVuZ3RoLHI9dC5uYW1lLG89XCJnZXRcIityLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpK3Iuc2xpY2UoMSksYT10LnNoYXBlSW5mby50ZXhTaGFwZSxpPVtNYXRoLmNlaWwoYVswXS8yKSxNYXRoLmNlaWwoYVsxXS8yKV0scz1pWzBdLHU9aVsxXSxjPU1hdGguY2VpbChlW24tMV0vMiksbD1jKk1hdGguY2VpbChlW24tMl0vMiksaD1cImludCBiLCBpbnQgcm93LCBpbnQgY29sXCIsZj1cImIgKiBcIitsK1wiICsgKHJvdyAvIDIpICogXCIrYytcIiArIChjb2wgLyAyKVwiLGQ9MjtkPG4tMTtkKyspaD1cImludCBiXCIrZCtcIiwgXCIraCxsKj1lW24tZC0xXSxmPVwiYlwiK2QrXCIgKiBcIitsK1wiICsgXCIrZjt2YXIgcD11YSgpO3JldHVyblwiXFxuICAgIHZlYzQgXCIrbytcIihcIitoK1wiKSB7XFxuICAgICAgaW50IGluZGV4ID0gXCIrZitcIjtcXG4gICAgICBpbnQgdGV4UiA9IGluZGV4IC8gXCIrdStcIjtcXG4gICAgICBpbnQgdGV4QyA9IGluZGV4IC0gdGV4UiAqIFwiK3UrXCI7XFxuICAgICAgdmVjMiB1diA9ICh2ZWMyKHRleEMsIHRleFIpICsgaGFsZkNSKSAvIHZlYzIoXCIrdStcIiwgXCIrcytcIik7XFxuICAgICAgcmV0dXJuIFwiK3AudGV4dHVyZTJEK1wiKFwiK3IrXCIsIHV2KTtcXG4gICAgfVxcbiAgXCJ9KHQpfX12YXIgdmE9XCJcXG52ZWMyIHV2RnJvbUZsYXQoaW50IHRleE51bVIsIGludCB0ZXhOdW1DLCBpbnQgaW5kZXgpIHtcXG4gIGludCB0ZXhSID0gaW5kZXggLyB0ZXhOdW1DO1xcbiAgaW50IHRleEMgPSBpbmRleCAtIHRleFIgKiB0ZXhOdW1DO1xcbiAgcmV0dXJuICh2ZWMyKHRleEMsIHRleFIpICsgaGFsZkNSKSAvIHZlYzIodGV4TnVtQywgdGV4TnVtUik7XFxufVxcbnZlYzIgcGFja2VkVVZmcm9tMUQoaW50IHRleE51bVIsIGludCB0ZXhOdW1DLCBpbnQgaW5kZXgpIHtcXG4gIGludCB0ZXhlbEluZGV4ID0gaW5kZXggLyAyO1xcbiAgaW50IHRleFIgPSB0ZXhlbEluZGV4IC8gdGV4TnVtQztcXG4gIGludCB0ZXhDID0gdGV4ZWxJbmRleCAtIHRleFIgKiB0ZXhOdW1DO1xcbiAgcmV0dXJuICh2ZWMyKHRleEMsIHRleFIpICsgaGFsZkNSKSAvIHZlYzIodGV4TnVtQywgdGV4TnVtUik7XFxufVxcblwiLG1hPVwiXFxudmVjMiBwYWNrZWRVVmZyb20yRChpbnQgdGV4ZWxzSW5Mb2dpY2FsUm93LCBpbnQgdGV4TnVtUixcXG4gIGludCB0ZXhOdW1DLCBpbnQgcm93LCBpbnQgY29sKSB7XFxuICBpbnQgdGV4ZWxJbmRleCA9IChyb3cgLyAyKSAqIHRleGVsc0luTG9naWNhbFJvdyArIChjb2wgLyAyKTtcXG4gIGludCB0ZXhSID0gdGV4ZWxJbmRleCAvIHRleE51bUM7XFxuICBpbnQgdGV4QyA9IHRleGVsSW5kZXggLSB0ZXhSICogdGV4TnVtQztcXG4gIHJldHVybiAodmVjMih0ZXhDLCB0ZXhSKSArIGhhbGZDUikgLyB2ZWMyKHRleE51bUMsIHRleE51bVIpO1xcbn1cXG5cIixnYT1cIlxcbnZlYzIgcGFja2VkVVZmcm9tM0QoaW50IHRleE51bVIsIGludCB0ZXhOdW1DLFxcbiAgICBpbnQgdGV4ZWxzSW5CYXRjaCwgaW50IHRleGVsc0luTG9naWNhbFJvdywgaW50IGIsXFxuICAgIGludCByb3csIGludCBjb2wpIHtcXG4gIGludCBpbmRleCA9IGIgKiB0ZXhlbHNJbkJhdGNoICsgKHJvdyAvIDIpICogdGV4ZWxzSW5Mb2dpY2FsUm93ICsgKGNvbCAvIDIpO1xcbiAgaW50IHRleFIgPSBpbmRleCAvIHRleE51bUM7XFxuICBpbnQgdGV4QyA9IGluZGV4IC0gdGV4UiAqIHRleE51bUM7XFxuICByZXR1cm4gKHZlYzIodGV4QywgdGV4UikgKyBoYWxmQ1IpIC8gdmVjMih0ZXhOdW1DLCB0ZXhOdW1SKTtcXG59XFxuXCIseWE9XCJcXG4gIGZsb2F0IGdldENoYW5uZWwodmVjNCBmcmFnLCB2ZWMyIGlubmVyRGltcykge1xcbiAgICB2ZWMyIG1vZENvb3JkID0gbW9kKGlubmVyRGltcywgMi4pO1xcbiAgICByZXR1cm4gbW9kQ29vcmQueCA9PSAwLiA/XFxuICAgICAgKG1vZENvb3JkLnkgPT0gMC4gPyBmcmFnLnIgOiBmcmFnLmcpIDpcXG4gICAgICAobW9kQ29vcmQueSA9PSAwLiA/IGZyYWcuYiA6IGZyYWcuYSk7XFxuICB9XFxuICBmbG9hdCBnZXRDaGFubmVsKHZlYzQgZnJhZywgaW50IGRpbSkge1xcbiAgICBmbG9hdCBtb2RDb29yZCA9IG1vZChmbG9hdChkaW0pLCAyLik7XFxuICAgIHJldHVybiBtb2RDb29yZCA9PSAwLiA/IGZyYWcuciA6IGZyYWcuZztcXG4gIH1cXG5cIjtmdW5jdGlvbiB4YSh0KXtyZXR1cm5cIm9mZnNldFwiK3R9ZnVuY3Rpb24gYmEodCl7dmFyIGU9dC5uYW1lLG49ayh0LnNoYXBlSW5mby5sb2dpY2FsU2hhcGUpO3JldHVybiBuPDI/XCJyZXR1cm4gXCIrZStcIjtcIjpcIlxcbiAgICBmb3IgKGludCBpID0gMDsgaSA8IFwiK24rXCI7IGkrKykge1xcbiAgICAgIGlmIChpID09IGluZGV4KSB7XFxuICAgICAgICByZXR1cm4gXCIrZStcIltpXTtcXG4gICAgICB9XFxuICAgIH1cXG4gIFwifWZ1bmN0aW9uIHdhKHQpe2lmKHQ8PTEpcmV0dXJuXCJpbnRcIjtpZigyPT09dClyZXR1cm5cIml2ZWMyXCI7aWYoMz09PXQpcmV0dXJuXCJpdmVjM1wiO2lmKDQ9PT10KXJldHVyblwiaXZlYzRcIjtpZig1PT09dClyZXR1cm5cIml2ZWM1XCI7aWYoNj09PXQpcmV0dXJuXCJpdmVjNlwiO3Rocm93IEVycm9yKFwiR1BVIGZvciByYW5rIFwiK3QrXCIgaXMgbm90IHlldCBzdXBwb3J0ZWRcIil9ZnVuY3Rpb24gQ2EodCxlKXt2YXIgbj1KU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KHQpKTtyZXR1cm4gbi5zaGFwZUluZm8ubG9naWNhbFNoYXBlPWUsbn1mdW5jdGlvbiBFYSh0LGUpe3JldHVybiBlLm1hcCgoZnVuY3Rpb24oZSl7cmV0dXJuIHRbZV19KSkuam9pbihcIiwgXCIpfXZhciBSYT1mdW5jdGlvbih0LGUsbixyKXt0aGlzLnZhcmlhYmxlTmFtZXM9W1wiQVwiXSx0aGlzLnBhY2tlZElucHV0cz0hMCx0aGlzLnBhY2tlZE91dHB1dD0hMCxDKHQubGVuZ3RoPjIsKGZ1bmN0aW9uKCl7cmV0dXJuXCJQYWNrZWQgYXJnXCIrKG4uY2hhckF0KDApLnRvVXBwZXJDYXNlKCkrbi5zbGljZSgxKSkrXCIgc3VwcG9ydHMgb25seSBpbnB1dHMgd2l0aCByYW5rIGFib3ZlIDIuXCJ9KSk7dmFyIG89dFt0Lmxlbmd0aC0xXSxhPU1hdGguY2VpbChvL2UpO3RoaXMub3V0cHV0U2hhcGU9dC5zbGljZSgwLC0xKSxhPjEmJnRoaXMub3V0cHV0U2hhcGUucHVzaChhKSxyfHx0aGlzLnZhcmlhYmxlTmFtZXMucHVzaChcImJlc3RJbmRpY2VzQVwiKTt2YXIgaSxzLHU9dGhpcy5vdXRwdXRTaGFwZSxjPXUubGVuZ3RoLGw9d2EoYyksaD1zYShcImNvb3Jkc1wiLGMpO2lmKDE9PT1hKXt2YXIgZj13YShzPWMrMSk7aT1cIlxcbiAgICAgICAgXCIrZitcIiBzb3VyY2VMb2NSID0gXCIrZitcIihcIitoLmpvaW4oKStcIiwgMCk7XFxuICAgICAgICArK1wiK2hbYy0xXStcIjtcXG4gICAgICAgIFwiK2YrXCIgc291cmNlTG9jRyA9IFwiK2YrXCIoXCIraC5qb2luKCkrXCIsIDApO1xcbiAgICAgICAgKytcIitoW2MtMl0rXCI7XFxuICAgICAgICBcIitmK1wiIHNvdXJjZUxvY0EgPSBcIitmK1wiKFwiK2guam9pbigpK1wiLCAwKTtcXG4gICAgICAgIC0tXCIraFtjLTFdK1wiO1xcbiAgICAgICAgXCIrZitcIiBzb3VyY2VMb2NCID0gXCIrZitcIihcIitoLmpvaW4oKStcIiwgMCk7XFxuICAgICAgICAtLVwiK2hbYy0yXStcIjtcIn1lbHNlIHM9YyxpPVwiXFxuICAgICAgICBcIitsK1wiIHNvdXJjZUxvY1IgPSBjb29yZHM7XFxuICAgICAgICArK1wiK2hbYy0xXStcIjtcXG4gICAgICAgIFwiK2wrXCIgc291cmNlTG9jRyA9IGNvb3JkcztcXG4gICAgICAgICsrXCIraFtjLTJdK1wiO1xcbiAgICAgICAgXCIrbCtcIiBzb3VyY2VMb2NBID0gY29vcmRzO1xcbiAgICAgICAgLS1cIitoW2MtMV0rXCI7XFxuICAgICAgICBcIitsK1wiIHNvdXJjZUxvY0IgPSBjb29yZHM7XFxuICAgICAgICAtLVwiK2hbYy0yXStcIjtcIjt2YXIgZD1bXCJ4XCIsXCJ5XCIsXCJ6XCIsXCJ3XCIsXCJ1XCIsXCJ2XCJdLnNsaWNlKDAscykscD1cIi5cIitkW3MtMV0sdj1kLm1hcCgoZnVuY3Rpb24odCl7cmV0dXJuXCJpbnQgXCIrdH0pKSxtPXNhKFwic291cmNlTG9jUlwiLHMtMSkuY29uY2F0KFwiaW5JZHguclwiKSxnPXNhKFwic291cmNlTG9jR1wiLHMtMSkuY29uY2F0KFwiaW5JZHguZ1wiKSx5PXNhKFwic291cmNlTG9jQlwiLHMtMSkuY29uY2F0KFwiaW5JZHguYlwiKSx4PXNhKFwic291cmNlTG9jQVwiLHMtMSkuY29uY2F0KFwiaW5JZHguYVwiKSxiPVwibWF4XCI9PT1uP1wiZ3JlYXRlclRoYW5cIjpcImxlc3NUaGFuXCIsdz1yP1wiXCI6XCJcXG4gICAgICAgICAgaW5JZHggPSByb3VuZCh2ZWM0KGdldEJlc3RJbmRpY2VzQUNoYW5uZWwoXCIrbS5qb2luKCkrXCIpLFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2V0QmVzdEluZGljZXNBQ2hhbm5lbChcIitnLmpvaW4oKStcIiksXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICBnZXRCZXN0SW5kaWNlc0FDaGFubmVsKFwiK3kuam9pbigpK1wiKSxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdldEJlc3RJbmRpY2VzQUNoYW5uZWwoXCIreC5qb2luKCkrXCIpKSk7XCIsRT1cInZlYzQoXFxuICAgICAgICAgICAgZ2V0QUNoYW5uZWwoXCIrbS5qb2luKCkrXCIpLFxcbiAgICAgICAgICAgIGhhc05leHRDb2wgPyBnZXRBQ2hhbm5lbChcIitnLmpvaW4oKStcIikgOiAwLixcXG4gICAgICAgICAgICBoYXNOZXh0Um93ID8gZ2V0QUNoYW5uZWwoXCIreS5qb2luKCkrXCIpIDogMC4sXFxuICAgICAgICAgICAgaGFzTmV4dFJvdyAmJiBoYXNOZXh0Q29sID8gZ2V0QUNoYW5uZWwoXCIreC5qb2luKCkrXCIpIDogMC4pXCIsUj1yP1wiXCI6XCJcXG4gICAgICBmbG9hdCBnZXRCZXN0SW5kaWNlc0FDaGFubmVsKFwiK3Yuam9pbigpK1wiKSB7XFxuICAgICAgICByZXR1cm4gZ2V0Q2hhbm5lbChnZXRCZXN0SW5kaWNlc0EoXCIrZC5qb2luKCkrXCIpLFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZlYzIoXCIrZC5zbGljZSgtMikuam9pbigpK1wiKSk7XFxuICAgICAgfVwiO3RoaXMudXNlckNvZGU9XCJcXG4gICAgICBmbG9hdCBnZXRBQ2hhbm5lbChcIit2LmpvaW4oKStcIikge1xcbiAgICAgICAgcmV0dXJuIGdldENoYW5uZWwoZ2V0QShcIitkLmpvaW4oKStcIiksXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZlYzIoXCIrZC5zbGljZSgtMikuam9pbigpK1wiKSk7XFxuICAgICAgfVxcbiAgICAgIFwiK1IrXCJcXG4gICAgICB2b2lkIG1haW4oKSB7XFxuICAgICAgICBcIitsK1wiIGNvb3JkcyA9IGdldE91dHB1dENvb3JkcygpO1xcbiAgICAgICAgYm9vbCBoYXNOZXh0Q29sID0gXCIraFtjLTFdK1wiIDwgXCIrKHVbYy0xXS0xKStcIjtcXG4gICAgICAgIGJvb2wgaGFzTmV4dFJvdyA9IFwiK2hbYy0yXStcIiA8IFwiKyh1W2MtMl0tMSkrXCI7XFxuICAgICAgICBcIitpK1wiXFxuICAgICAgICBpdmVjNCBzcmNJZHggPSBpdmVjNChzb3VyY2VMb2NSXCIrcCtcIiwgc291cmNlTG9jR1wiK3ArXCIsXFxuICAgICAgICAgIHNvdXJjZUxvY0JcIitwK1wiLCBzb3VyY2VMb2NBXCIrcCtcIikgKiBcIitlK1wiO1xcbiAgICAgICAgaXZlYzQgaW5JZHggPSBzcmNJZHg7XFxuICAgICAgICB2ZWM0IGJlc3RJbmRleCA9IHZlYzQoaW5JZHgpO1xcbiAgICAgICAgdmVjNCBiZXN0VmFsdWUgPSBcIitFK1wiO1xcblxcbiAgICAgICAgZm9yIChpbnQgaSA9IDA7IGkgPCBcIitlK1wiOyBpKyspIHtcXG4gICAgICAgICAgaW5JZHggPSBzcmNJZHg7XFxuICAgICAgICAgIFwiK3crXCJcXG4gICAgICAgICAgdmVjNCBjYW5kaWRhdGUgPSBcIitFK1wiO1xcbiAgICAgICAgICBidmVjNCBuYW4gPSBpc25hbihjYW5kaWRhdGUpO1xcbiAgICAgICAgICBidmVjNCByZXBsYWNlID0gYnZlYzQoXFxuICAgICAgICAgICAgdmVjNChcIitiK1wiKGNhbmRpZGF0ZSwgYmVzdFZhbHVlKSkgKiAodmVjNCgxLjApIC0gdmVjNChuYW4pKSk7XFxuXFxuICAgICAgICAgIGJlc3RWYWx1ZSA9IHZlYzQocmVwbGFjZS54ICA/IGNhbmRpZGF0ZS54IDogYmVzdFZhbHVlLngsXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVwbGFjZS55ICA/IGNhbmRpZGF0ZS55IDogYmVzdFZhbHVlLnksXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVwbGFjZS56ICA/IGNhbmRpZGF0ZS56IDogYmVzdFZhbHVlLnosXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVwbGFjZS53ICA/IGNhbmRpZGF0ZS53IDogYmVzdFZhbHVlLncpO1xcbiAgICAgICAgICBiZXN0SW5kZXggPSBtaXgoYmVzdEluZGV4LCB2ZWM0KGluSWR4KSwgdmVjNChyZXBsYWNlKSk7XFxuICAgICAgICAgIHNyY0lkeCsrO1xcbiAgICAgICAgfVxcbiAgICAgICAgc2V0T3V0cHV0KGJlc3RJbmRleCk7XFxuICAgICAgfVxcbiAgICBcIn0sSWE9ZnVuY3Rpb24odCl7dGhpcy52YXJpYWJsZU5hbWVzPVtcImR5XCJdLHRoaXMub3V0cHV0U2hhcGU9dC5pblNoYXBlO3ZhciBlPXQuZmlsdGVySGVpZ2h0LG49dC5maWx0ZXJXaWR0aCxyPXQuc3RyaWRlSGVpZ2h0LG89dC5zdHJpZGVXaWR0aCxhPXQuZGlsYXRpb25IZWlnaHQsaT10LmRpbGF0aW9uV2lkdGgscz10LmVmZmVjdGl2ZUZpbHRlckhlaWdodCx1PXQuZWZmZWN0aXZlRmlsdGVyV2lkdGgsYz1zLTEtdC5wYWRJbmZvLnRvcCxsPXUtMS10LnBhZEluZm8ubGVmdCxoPTEvKGUqbik7dGhpcy51c2VyQ29kZT1cIlxcbiAgICAgIGNvbnN0IGl2ZWMyIHBhZHMgPSBpdmVjMihcIitjK1wiLCBcIitsK1wiKTtcXG4gICAgICBjb25zdCBmbG9hdCBhdmdNdWx0aXBsaWVyID0gZmxvYXQoXCIraCtcIik7XFxuXFxuICAgICAgdm9pZCBtYWluKCkge1xcbiAgICAgICAgaXZlYzQgY29vcmRzID0gZ2V0T3V0cHV0Q29vcmRzKCk7XFxuICAgICAgICBpbnQgYiA9IGNvb3Jkc1swXTtcXG4gICAgICAgIGludCBkID0gY29vcmRzWzNdO1xcblxcbiAgICAgICAgaXZlYzIgZHlSQ0Nvcm5lciA9IGNvb3Jkcy55eiAtIHBhZHM7XFxuICAgICAgICBpbnQgZHlSQ29ybmVyID0gZHlSQ0Nvcm5lci54O1xcbiAgICAgICAgaW50IGR5Q0Nvcm5lciA9IGR5UkNDb3JuZXIueTtcXG5cXG4gICAgICAgIC8vIENvbnZvbHZlIGR5KD8sID8sIGQpIHdpdGggcG9zIG1hc2soOiwgOiwgZCkgdG8gZ2V0IGR4KHhSLCB4QywgZCkuXFxuICAgICAgICAvLyA/ID0gdG8gYmUgZGV0ZXJtaW5lZC4gOiA9IGFjcm9zcyBhbGwgdmFsdWVzIGluIHRoYXQgYXhpcy5cXG4gICAgICAgIGZsb2F0IGRvdFByb2QgPSAwLjA7XFxuICAgICAgICBmb3IgKGludCB3UiA9IDA7IHdSIDwgXCIrcytcIjtcXG4gICAgICAgICAgICB3UiArPSBcIithK1wiKSB7XFxuICAgICAgICAgIGZsb2F0IGR5UiA9IGZsb2F0KGR5UkNvcm5lciArIHdSKSAvIFwiK3IrXCIuMDtcXG5cXG4gICAgICAgICAgaWYgKGR5UiA8IDAuMCB8fCBkeVIgPj0gXCIrdC5vdXRIZWlnaHQrXCIuMCB8fCBmcmFjdChkeVIpID4gMC4wKSB7XFxuICAgICAgICAgICAgY29udGludWU7XFxuICAgICAgICAgIH1cXG4gICAgICAgICAgaW50IGlkeVIgPSBpbnQoZHlSKTtcXG5cXG4gICAgICAgICAgZm9yIChpbnQgd0MgPSAwOyB3QyA8IFwiK3UrXCI7XFxuICAgICAgICAgICAgd0MrPSBcIitpK1wiKSB7XFxuICAgICAgICAgICAgZmxvYXQgZHlDID0gZmxvYXQoZHlDQ29ybmVyICsgd0MpIC8gXCIrbytcIi4wO1xcblxcbiAgICAgICAgICAgIGlmIChkeUMgPCAwLjAgfHwgZHlDID49IFwiK3Qub3V0V2lkdGgrXCIuMCB8fFxcbiAgICAgICAgICAgICAgICBmcmFjdChkeUMpID4gMC4wKSB7XFxuICAgICAgICAgICAgICBjb250aW51ZTtcXG4gICAgICAgICAgICB9XFxuICAgICAgICAgICAgaW50IGlkeUMgPSBpbnQoZHlDKTtcXG5cXG4gICAgICAgICAgICBmbG9hdCBkeVZhbHVlID0gZ2V0RHkoYiwgaWR5UiwgaWR5QywgZCk7XFxuXFxuICAgICAgICAgICAgZG90UHJvZCArPSBkeVZhbHVlICogYXZnTXVsdGlwbGllcjtcXG4gICAgICAgICAgfVxcbiAgICAgICAgfVxcbiAgICAgICAgc2V0T3V0cHV0KGRvdFByb2QpO1xcbiAgICAgIH1cXG4gICAgXCJ9LGthPWZ1bmN0aW9uKHQpe3RoaXMudmFyaWFibGVOYW1lcz1bXCJkeVwiXSx0aGlzLm91dHB1dFNoYXBlPXQuaW5TaGFwZTt2YXIgZT10LmZpbHRlckRlcHRoLG49dC5maWx0ZXJIZWlnaHQscj10LmZpbHRlcldpZHRoLG89dC5zdHJpZGVEZXB0aCxhPXQuc3RyaWRlSGVpZ2h0LGk9dC5zdHJpZGVXaWR0aCxzPXQuZGlsYXRpb25EZXB0aCx1PXQuZGlsYXRpb25IZWlnaHQsYz10LmRpbGF0aW9uV2lkdGgsbD10LmVmZmVjdGl2ZUZpbHRlckRlcHRoLGg9dC5lZmZlY3RpdmVGaWx0ZXJIZWlnaHQsZj10LmVmZmVjdGl2ZUZpbHRlcldpZHRoLGQ9bC0xLXQucGFkSW5mby5mcm9udCxwPWgtMS10LnBhZEluZm8udG9wLHY9Zi0xLXQucGFkSW5mby5sZWZ0LG09MS8oZSpuKnIpO3RoaXMudXNlckNvZGU9XCJcXG4gICAgICBjb25zdCBpdmVjMyBwYWRzID0gaXZlYzMoXCIrZCtcIiwgXCIrcCtcIiwgXCIrditcIik7XFxuICAgICAgY29uc3QgZmxvYXQgYXZnTXVsdGlwbGllciA9IGZsb2F0KFwiK20rXCIpO1xcblxcbiAgICAgIHZvaWQgbWFpbigpIHtcXG4gICAgICAgIGl2ZWM1IGNvb3JkcyA9IGdldE91dHB1dENvb3JkcygpO1xcbiAgICAgICAgaW50IGJhdGNoID0gY29vcmRzLng7XFxuICAgICAgICBpbnQgY2ggPSBjb29yZHMudTtcXG5cXG4gICAgICAgIGl2ZWMzIGR5Q29ybmVyID0gaXZlYzMoY29vcmRzLnksIGNvb3Jkcy56LCBjb29yZHMudykgLSBwYWRzO1xcbiAgICAgICAgaW50IGR5RENvcm5lciA9IGR5Q29ybmVyLng7XFxuICAgICAgICBpbnQgZHlSQ29ybmVyID0gZHlDb3JuZXIueTtcXG4gICAgICAgIGludCBkeUNDb3JuZXIgPSBkeUNvcm5lci56O1xcblxcbiAgICAgICAgLy8gQ29udm9sdmUgZHkoPywgPywgPywgZCkgd2l0aCBwb3MgbWFzayg6LCA6LCA6LCBjaCkgdG8gZ2V0XFxuICAgICAgICAvLyBkeCh4RCwgeFIsIHhDLCBjaCkuXFxuICAgICAgICAvLyA/ID0gdG8gYmUgZGV0ZXJtaW5lZC4gOiA9IGFjcm9zcyBhbGwgdmFsdWVzIGluIHRoYXQgYXhpcy5cXG4gICAgICAgIGZsb2F0IGRvdFByb2QgPSAwLjA7XFxuXFxuICAgICAgICBmb3IgKGludCB3RCA9IDA7IHdEIDwgXCIrbCtcIjtcXG4gICAgICAgICAgICB3RCArPSBcIitzK1wiKSB7XFxuICAgICAgICAgIGZsb2F0IGR5RCA9IGZsb2F0KGR5RENvcm5lciArIHdEKSAvIFwiK28rXCIuMDtcXG5cXG4gICAgICAgICAgaWYgKGR5RCA8IDAuMCB8fCBkeUQgPj0gXCIrdC5vdXREZXB0aCtcIi4wIHx8IGZyYWN0KGR5RCkgPiAwLjApIHtcXG4gICAgICAgICAgICBjb250aW51ZTtcXG4gICAgICAgICAgfVxcbiAgICAgICAgICBpbnQgaWR5RCA9IGludChkeUQpO1xcblxcbiAgICAgICAgICBmb3IgKGludCB3UiA9IDA7IHdSIDwgXCIraCtcIjtcXG4gICAgICAgICAgICAgIHdSICs9IFwiK3UrXCIpIHtcXG4gICAgICAgICAgICBmbG9hdCBkeVIgPSBmbG9hdChkeVJDb3JuZXIgKyB3UikgLyBcIithK1wiLjA7XFxuXFxuICAgICAgICAgICAgaWYgKGR5UiA8IDAuMCB8fCBkeVIgPj0gXCIrdC5vdXRIZWlnaHQrXCIuMCB8fFxcbiAgICAgICAgICAgICAgICBmcmFjdChkeVIpID4gMC4wKSB7XFxuICAgICAgICAgICAgICBjb250aW51ZTtcXG4gICAgICAgICAgICB9XFxuICAgICAgICAgICAgaW50IGlkeVIgPSBpbnQoZHlSKTtcXG5cXG4gICAgICAgICAgICBmb3IgKGludCB3QyA9IDA7IHdDIDwgXCIrZitcIjtcXG4gICAgICAgICAgICAgICAgd0MgKz0gXCIrYytcIikge1xcbiAgICAgICAgICAgICAgZmxvYXQgZHlDID0gZmxvYXQoZHlDQ29ybmVyICsgd0MpIC8gXCIraStcIi4wO1xcblxcbiAgICAgICAgICAgICAgaWYgKGR5QyA8IDAuMCB8fCBkeUMgPj0gXCIrdC5vdXRXaWR0aCtcIi4wIHx8XFxuICAgICAgICAgICAgICAgICAgZnJhY3QoZHlDKSA+IDAuMCkge1xcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcXG4gICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICAgIGludCBpZHlDID0gaW50KGR5Qyk7XFxuXFxuICAgICAgICAgICAgICBmbG9hdCBkeVZhbHVlID0gZ2V0RHkoYmF0Y2gsIGlkeUQsIGlkeVIsIGlkeUMsIGNoKTtcXG5cXG4gICAgICAgICAgICAgIGRvdFByb2QgKz0gZHlWYWx1ZSAqIGF2Z011bHRpcGxpZXI7XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgICB9XFxuICAgICAgICB9XFxuICAgICAgICBzZXRPdXRwdXQoZG90UHJvZCk7XFxuICAgICAgfVxcbiAgICBcIn0sU2E9ZnVuY3Rpb24odCxlLG4scixvLGEpe3RoaXMub3V0cHV0U2hhcGU9W10sdGhpcy52YXJpYWJsZU5hbWVzPVtcInhcIixcIm1lYW5cIixcInZhcmlhbmNlXCJdLFJvKHQsZSksUm8odCxuKTt2YXIgaT1cIjAuMFwiO251bGwhPXImJihSbyh0LHIpLHRoaXMudmFyaWFibGVOYW1lcy5wdXNoKFwib2Zmc2V0XCIpLGk9XCJnZXRPZmZzZXRBdE91dENvb3JkcygpXCIpO3ZhciBzPVwiMS4wXCI7bnVsbCE9byYmKFJvKHQsbyksdGhpcy52YXJpYWJsZU5hbWVzLnB1c2goXCJzY2FsZVwiKSxzPVwiZ2V0U2NhbGVBdE91dENvb3JkcygpXCIpLHRoaXMub3V0cHV0U2hhcGU9dCx0aGlzLnVzZXJDb2RlPVwiXFxuICAgICAgdm9pZCBtYWluKCkge1xcbiAgICAgICAgZmxvYXQgeCA9IGdldFhBdE91dENvb3JkcygpO1xcbiAgICAgICAgZmxvYXQgbWVhbiA9IGdldE1lYW5BdE91dENvb3JkcygpO1xcbiAgICAgICAgZmxvYXQgdmFyaWFuY2UgPSBnZXRWYXJpYW5jZUF0T3V0Q29vcmRzKCk7XFxuICAgICAgICBmbG9hdCBvZmZzZXQgPSBcIitpK1wiO1xcbiAgICAgICAgZmxvYXQgc2NhbGUgPSBcIitzK1wiO1xcbiAgICAgICAgZmxvYXQgaW52ID0gc2NhbGUgKiBpbnZlcnNlc3FydCh2YXJpYW5jZSArIGZsb2F0KFwiK2ErXCIpKTtcXG4gICAgICAgIHNldE91dHB1dChkb3QodmVjMyh4LCAtbWVhbiwgb2Zmc2V0KSwgdmVjMyhpbnYsIGludiwgMSkpKTtcXG4gICAgICB9XFxuICAgIFwifSxBYT1mdW5jdGlvbih0LGUsbixyLG8sYSl7dGhpcy5wYWNrZWRJbnB1dHM9ITAsdGhpcy5wYWNrZWRPdXRwdXQ9ITAsdGhpcy52YXJpYWJsZU5hbWVzPVtcInhcIixcIm1lYW5cIixcInZhcmlhbmNlXCJdLFJvKHQsZSksUm8odCxuKTt2YXIgaT1cInZlYzQoMC4wKVwiO251bGwhPXImJihSbyh0LHIpLHRoaXMudmFyaWFibGVOYW1lcy5wdXNoKFwib2Zmc2V0XCIpLGk9XCJnZXRPZmZzZXRBdE91dENvb3JkcygpXCIpO3ZhciBzPVwidmVjNCgxLjApXCI7bnVsbCE9byYmKFJvKHQsbyksdGhpcy52YXJpYWJsZU5hbWVzLnB1c2goXCJzY2FsZVwiKSxzPVwiZ2V0U2NhbGVBdE91dENvb3JkcygpXCIpLHRoaXMub3V0cHV0U2hhcGU9dCx0aGlzLnVzZXJDb2RlPVwiXFxuICAgICAgdm9pZCBtYWluKCkge1xcbiAgICAgICAgdmVjNCBvZmZzZXQgPSBcIitpK1wiO1xcbiAgICAgICAgdmVjNCBzY2FsZSA9IFwiK3MrXCI7XFxuXFxuICAgICAgICB2ZWM0IHggPSBnZXRYQXRPdXRDb29yZHMoKTtcXG4gICAgICAgIHZlYzQgbWVhbiA9IGdldE1lYW5BdE91dENvb3JkcygpO1xcbiAgICAgICAgdmVjNCB2YXJpYW5jZSA9IGdldFZhcmlhbmNlQXRPdXRDb29yZHMoKTtcXG5cXG4gICAgICAgIHZlYzQgaW52ID0gc2NhbGUgKiBpbnZlcnNlc3FydCh2YXJpYW5jZSArIHZlYzQoXCIrYStcIikpO1xcblxcbiAgICAgICAgc2V0T3V0cHV0KCh4IC0gbWVhbikgKiBpbnYgKyBvZmZzZXQpO1xcbiAgICAgIH1cXG4gICAgXCJ9LERhPVwicmV0dXJuIGFyZWFsICogYnJlYWwgLSBhaW1hZyAqIGJpbWFnO1wiLFRhPVwicmV0dXJuIGFyZWFsICogYmltYWcgKyBhaW1hZyAqIGJyZWFsO1wiLE5hPWZ1bmN0aW9uKHQsZSxuKXt0aGlzLnZhcmlhYmxlTmFtZXM9W1wiQVJlYWxcIixcIkFJbWFnXCIsXCJCUmVhbFwiLFwiQkltYWdcIl0sdGhpcy5vdXRwdXRTaGFwZT1SbyhlLG4pLHRoaXMudXNlckNvZGU9XCJcXG4gICAgICBmbG9hdCBiaW5hcnlPcENvbXBsZXgoXFxuICAgICAgICAgIGZsb2F0IGFyZWFsLCBmbG9hdCBhaW1hZywgZmxvYXQgYnJlYWwsIGZsb2F0IGJpbWFnKSB7XFxuICAgICAgICBcIit0K1wiXFxuICAgICAgfVxcblxcbiAgICAgIHZvaWQgbWFpbigpIHtcXG4gICAgICAgIGZsb2F0IGFyZWFsID0gZ2V0QVJlYWxBdE91dENvb3JkcygpO1xcbiAgICAgICAgZmxvYXQgYWltYWcgPSBnZXRBSW1hZ0F0T3V0Q29vcmRzKCk7XFxuICAgICAgICBmbG9hdCBicmVhbCA9IGdldEJSZWFsQXRPdXRDb29yZHMoKTtcXG4gICAgICAgIGZsb2F0IGJpbWFnID0gZ2V0QkltYWdBdE91dENvb3JkcygpO1xcbiAgICAgICAgc2V0T3V0cHV0KGJpbmFyeU9wQ29tcGxleChhcmVhbCwgYWltYWcsIGJyZWFsLCBiaW1hZykpO1xcbiAgICAgIH1cXG4gICAgXCJ9LEZhPVwicmV0dXJuIGEgKyBiO1wiLF9hPVwicmV0dXJuIGEgLSBiO1wiLE9hPVwicmV0dXJuIGEgKiBiO1wiLE1hPVwicmV0dXJuIChhIDwgMC4pID8gYiAqIGEgOiBhO1wiLEJhPWZ1bmN0aW9uKHQsZSxuKXt0aGlzLnZhcmlhYmxlTmFtZXM9W1wiQVwiLFwiQlwiXSx0aGlzLm91dHB1dFNoYXBlPVJvKGUsbiksdGhpcy51c2VyQ29kZT1cIlxcbiAgICAgIGZsb2F0IGJpbmFyeU9wZXJhdGlvbihmbG9hdCBhLCBmbG9hdCBiKSB7XFxuICAgICAgICBcIit0K1wiXFxuICAgICAgfVxcblxcbiAgICAgIHZvaWQgbWFpbigpIHtcXG4gICAgICAgIGZsb2F0IGEgPSBnZXRBQXRPdXRDb29yZHMoKTtcXG4gICAgICAgIGZsb2F0IGIgPSBnZXRCQXRPdXRDb29yZHMoKTtcXG4gICAgICAgIHNldE91dHB1dChiaW5hcnlPcGVyYXRpb24oYSwgYikpO1xcbiAgICAgIH1cXG4gICAgXCJ9LFBhPVwiXFxuICB2ZWM0IGFMZXNzVGhhblplcm8gPSB2ZWM0KGxlc3NUaGFuKGEsIHZlYzQoMC4pKSk7XFxuICByZXR1cm4gKGFMZXNzVGhhblplcm8gKiAoYiAqIGEpKSArICgodmVjNCgxLjApIC0gYUxlc3NUaGFuWmVybykgKiBhKTtcXG5cIixMYT1mdW5jdGlvbih0LGUsbixyKXt2b2lkIDA9PT1yJiYocj0hMSksdGhpcy52YXJpYWJsZU5hbWVzPVtcIkFcIixcIkJcIl0sdGhpcy5zdXBwb3J0c0Jyb2FkY2FzdGluZz0hMCx0aGlzLnBhY2tlZElucHV0cz0hMCx0aGlzLnBhY2tlZE91dHB1dD0hMCx0aGlzLm91dHB1dFNoYXBlPVJvKGUsbik7dmFyIG89dGhpcy5vdXRwdXRTaGFwZS5sZW5ndGgsYT1cIlwiO2lmKHIpaWYoMD09PW98fDE9PT1rKHRoaXMub3V0cHV0U2hhcGUpKWE9XCJcXG4gICAgICAgICAgcmVzdWx0LnkgPSAwLjtcXG4gICAgICAgICAgcmVzdWx0LnogPSAwLjtcXG4gICAgICAgICAgcmVzdWx0LncgPSAwLjtcXG4gICAgICAgIFwiO2Vsc2UgaWYoYT1cIlxcbiAgICAgICAgICBcIit3YShvKStcIiBjb29yZHMgPSBnZXRPdXRwdXRDb29yZHMoKTtcXG4gICAgICAgIFwiLDE9PT1vKWErPVwiXFxuICAgICAgICAgICAgcmVzdWx0LnkgPSAoY29vcmRzICsgMSkgPj0gXCIrdGhpcy5vdXRwdXRTaGFwZVswXStcIiA/IDAuIDogcmVzdWx0Lnk7XFxuICAgICAgICAgICAgcmVzdWx0LnogPSAwLjtcXG4gICAgICAgICAgICByZXN1bHQudyA9IDAuO1xcbiAgICAgICAgICBcIjtlbHNle3ZhciBpPXNhKFwiY29vcmRzXCIsbyk7YSs9XCJcXG4gICAgICAgICAgICBib29sIG5leHRSb3dPdXRPZkJvdW5kcyA9XFxuICAgICAgICAgICAgICAoXCIraVtvLTJdK1wiICsgMSkgPj0gXCIrdGhpcy5vdXRwdXRTaGFwZVtvLTJdK1wiO1xcbiAgICAgICAgICAgIGJvb2wgbmV4dENvbE91dE9mQm91bmRzID1cXG4gICAgICAgICAgICAgIChcIitpW28tMV0rXCIgKyAxKSA+PSBcIit0aGlzLm91dHB1dFNoYXBlW28tMV0rXCI7XFxuICAgICAgICAgICAgcmVzdWx0LnkgPSBuZXh0Q29sT3V0T2ZCb3VuZHMgPyAwLiA6IHJlc3VsdC55O1xcbiAgICAgICAgICAgIHJlc3VsdC56ID0gbmV4dFJvd091dE9mQm91bmRzID8gMC4gOiByZXN1bHQuejtcXG4gICAgICAgICAgICByZXN1bHQudyA9IG5leHRDb2xPdXRPZkJvdW5kcyB8fCBuZXh0Um93T3V0T2ZCb3VuZHMgPyAwLiA6IHJlc3VsdC53O1xcbiAgICAgICAgICBcIn10aGlzLnVzZXJDb2RlPVwiXFxuICAgICAgdmVjNCBiaW5hcnlPcGVyYXRpb24odmVjNCBhLCB2ZWM0IGIpIHtcXG4gICAgICAgIFwiK3QrXCJcXG4gICAgICB9XFxuXFxuICAgICAgdm9pZCBtYWluKCkge1xcbiAgICAgICAgdmVjNCBhID0gZ2V0QUF0T3V0Q29vcmRzKCk7XFxuICAgICAgICB2ZWM0IGIgPSBnZXRCQXRPdXRDb29yZHMoKTtcXG5cXG4gICAgICAgIHZlYzQgcmVzdWx0ID0gYmluYXJ5T3BlcmF0aW9uKGEsIGIpO1xcbiAgICAgICAgXCIrYStcIlxcblxcbiAgICAgICAgc2V0T3V0cHV0KHJlc3VsdCk7XFxuICAgICAgfVxcbiAgICBcIn0sV2E9ZnVuY3Rpb24oKXtmdW5jdGlvbiB0KHQpe3RoaXMudmFyaWFibGVOYW1lcz1bXCJBXCJdLHRoaXMub3V0cHV0U2hhcGU9dCx0aGlzLnVzZXJDb2RlPVwiXFxuICAgICAgdW5pZm9ybSBmbG9hdCBtaW5WYWw7XFxuICAgICAgdW5pZm9ybSBmbG9hdCBtYXhWYWw7XFxuXFxuICAgICAgdm9pZCBtYWluKCkge1xcbiAgICAgICAgZmxvYXQgdmFsdWUgPSBnZXRBQXRPdXRDb29yZHMoKTtcXG4gICAgICAgIGlmIChpc25hbih2YWx1ZSkpIHtcXG4gICAgICAgICAgc2V0T3V0cHV0KHZhbHVlKTtcXG4gICAgICAgICAgcmV0dXJuO1xcbiAgICAgICAgfVxcblxcbiAgICAgICAgc2V0T3V0cHV0KGNsYW1wKHZhbHVlLCBtaW5WYWwsIG1heFZhbCkpO1xcbiAgICAgIH1cXG4gICAgXCJ9cmV0dXJuIHQucHJvdG90eXBlLmdldEN1c3RvbVNldHVwRnVuYz1mdW5jdGlvbih0LGUpe3ZhciBuPXRoaXM7cmV0dXJuIGZ1bmN0aW9uKHIsbyl7bnVsbD09bi5taW5Mb2MmJihuLm1pbkxvYz1yLmdldFVuaWZvcm1Mb2NhdGlvbk5vVGhyb3cobyxcIm1pblZhbFwiKSxuLm1heExvYz1yLmdldFVuaWZvcm1Mb2NhdGlvbk5vVGhyb3cobyxcIm1heFZhbFwiKSksci5nbC51bmlmb3JtMWYobi5taW5Mb2MsdCksci5nbC51bmlmb3JtMWYobi5tYXhMb2MsZSl9fSx0fSgpLFVhPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gdCh0KXt0aGlzLnZhcmlhYmxlTmFtZXM9W1wiQVwiXSx0aGlzLnBhY2tlZElucHV0cz0hMCx0aGlzLnBhY2tlZE91dHB1dD0hMCx0aGlzLm91dHB1dFNoYXBlPXQsdGhpcy51c2VyQ29kZT1cIlxcbiAgICAgIHVuaWZvcm0gZmxvYXQgbWluVmFsO1xcbiAgICAgIHVuaWZvcm0gZmxvYXQgbWF4VmFsO1xcblxcbiAgICAgIHZvaWQgbWFpbigpIHtcXG4gICAgICAgIHZlYzQgdmFsdWUgPSBnZXRBQXRPdXRDb29yZHMoKTtcXG5cXG4gICAgICAgIGlmIChhbnkoaXNuYW4odmFsdWUpKSkge1xcbiAgICAgICAgICBzZXRPdXRwdXQodmFsdWUpO1xcbiAgICAgICAgICByZXR1cm47XFxuICAgICAgICB9XFxuXFxuICAgICAgICBzZXRPdXRwdXQoY2xhbXAodmFsdWUsIHZlYzQobWluVmFsKSwgdmVjNChtYXhWYWwpKSk7XFxuICAgICAgfVxcbiAgICBcIn1yZXR1cm4gdC5wcm90b3R5cGUuZ2V0Q3VzdG9tU2V0dXBGdW5jPWZ1bmN0aW9uKHQsZSl7dmFyIG49dGhpcztyZXR1cm4gZnVuY3Rpb24ocixvKXtudWxsPT1uLm1pbkxvYyYmKG4ubWluTG9jPXIuZ2V0VW5pZm9ybUxvY2F0aW9uTm9UaHJvdyhvLFwibWluVmFsXCIpLG4ubWF4TG9jPXIuZ2V0VW5pZm9ybUxvY2F0aW9uTm9UaHJvdyhvLFwibWF4VmFsXCIpKSxyLmdsLnVuaWZvcm0xZihuLm1pbkxvYyx0KSxyLmdsLnVuaWZvcm0xZihuLm1heExvYyxlKX19LHR9KCksVmE9ZnVuY3Rpb24odCl7dGhpcy52YXJpYWJsZU5hbWVzPVtcInJlYWxcIixcImltYWdcIl0sdGhpcy5vdXRwdXRTaGFwZT10LHRoaXMudXNlckNvZGU9XCJcXG4gICAgICB2b2lkIG1haW4oKSB7XFxuICAgICAgICBmbG9hdCByZSA9IGFicyhnZXRSZWFsQXRPdXRDb29yZHMoKSk7XFxuICAgICAgICBmbG9hdCBpbSA9IGFicyhnZXRJbWFnQXRPdXRDb29yZHMoKSk7XFxuICAgICAgICBmbG9hdCBteCA9IG1heChyZSwgaW0pO1xcblxcbiAgICAgICAgLy8gc2FkbHkgdGhlIGxlbmd0aCBmdW5jdGlvbiBpbiBnbHNsIGlzIG5vdCB1bmRlcmZsb3ctc2FmZVxcbiAgICAgICAgLy8gKGF0IGxlYXN0IG5vdCBvbiBJbnRlbCBHUFVzKS4gU28gdGhlIHNhZmUgc29sdXRpb24gaXNcXG4gICAgICAgIC8vIHRvIGVuc3VyZSB1bmRlcmZsb3ctc2FmZXR5IGluIGFsbCBjYXNlcy5cXG4gICAgICAgIHNldE91dHB1dChcXG4gICAgICAgICAgbXggPT0gMC4wID8gMC4wIDogbXggKiBsZW5ndGgodmVjMigxLCBtaW4ocmUsIGltKS9teCkpXFxuICAgICAgICApO1xcbiAgICAgIH1cXG4gICAgXCJ9LHphPWZ1bmN0aW9uKHQpe3RoaXMub3V0cHV0U2hhcGU9W10sdGhpcy5vdXRwdXRTaGFwZT1Tbih0LDEpLHRoaXMudmFyaWFibGVOYW1lcz10Lm1hcCgoZnVuY3Rpb24odCxlKXtyZXR1cm5cIlRcIitlfSkpO3ZhciBlPW5ldyBBcnJheSh0Lmxlbmd0aC0xKTtlWzBdPXRbMF1bMV07Zm9yKHZhciBuPTE7bjxlLmxlbmd0aDtuKyspZVtuXT1lW24tMV0rdFtuXVsxXTt2YXIgcj1bXCJpZiAoeUMgPCBcIitlWzBdK1wiKSBzZXRPdXRwdXQoZ2V0VDAoeVIsIHlDKSk7XCJdO2ZvcihuPTE7bjxlLmxlbmd0aDtuKyspe3ZhciBvPWVbbi0xXTtyLnB1c2goXCJlbHNlIGlmICh5QyA8IFwiK2Vbbl0rXCIpIHNldE91dHB1dChnZXRUXCIrbitcIih5UiwgeUMtXCIrbytcIikpO1wiKX12YXIgYT1lLmxlbmd0aCxpPWVbZS5sZW5ndGgtMV07ci5wdXNoKFwiZWxzZSBzZXRPdXRwdXQoZ2V0VFwiK2ErXCIoeVIsIHlDLVwiK2krXCIpKTtcIiksdGhpcy51c2VyQ29kZT1cIlxcbiAgICAgIHZvaWQgbWFpbigpIHtcXG4gICAgICAgIGl2ZWMyIGNvb3JkcyA9IGdldE91dHB1dENvb3JkcygpO1xcbiAgICAgICAgaW50IHlSID0gY29vcmRzLng7XFxuICAgICAgICBpbnQgeUMgPSBjb29yZHMueTtcXG5cXG4gICAgICAgIFwiK3Iuam9pbihcIlxcbiAgICAgICAgXCIpK1wiXFxuICAgICAgfVxcbiAgICBcIn0sR2E9ZnVuY3Rpb24odCxlKXt0aGlzLnBhY2tlZElucHV0cz0hMCx0aGlzLnBhY2tlZE91dHB1dD0hMCx0aGlzLm91dHB1dFNoYXBlPVtdLHRoaXMub3V0cHV0U2hhcGU9U24odCxlKTt2YXIgbj10aGlzLm91dHB1dFNoYXBlLHI9bi5sZW5ndGgsbz13YShyKSxhPXNhKFwiY29vcmRzXCIsciksaT1bXCJ4XCIsXCJ5XCIsXCJ6XCIsXCJ3XCIsXCJ1XCIsXCJ2XCJdLnNsaWNlKDAscik7dGhpcy52YXJpYWJsZU5hbWVzPXQubWFwKChmdW5jdGlvbih0LGUpe3JldHVyblwiVFwiK2V9KSk7dmFyIHM9bmV3IEFycmF5KHQubGVuZ3RoLTEpO3NbMF09dFswXVtlXTtmb3IodmFyIHU9MTt1PHMubGVuZ3RoO3UrKylzW3VdPXNbdS0xXSt0W3VdW2VdO3ZhciBjPWlbZV0sbD1pLnNsaWNlKC0yKSxoPWkuam9pbigpLGY9XCJpZiAoXCIrYytcIiA8IFwiK3NbMF0rXCIpIHtcXG4gICAgICAgIHJldHVybiBnZXRDaGFubmVsKFxcbiAgICAgICAgICAgIGdldFQwKFwiK2grXCIpLCB2ZWMyKFwiK2wuam9pbigpK1wiKSk7XFxuICAgICAgICB9XCI7Zm9yKHU9MTt1PHMubGVuZ3RoO3UrKyl7dmFyIGQ9c1t1LTFdO2YrPVwiXFxuICAgICAgICBpZiAoXCIrYytcIiA8IFwiK3NbdV0rXCIgICYmIFwiK2MrXCIgPj0gXCIrc1t1LTFdK1wiKSB7XFxuICAgICAgICAgIHJldHVybiBnZXRDaGFubmVsKFxcbiAgICAgICAgICAgIGdldFRcIit1K1wiKFwiK0hhKGksYyxkKStcIiksXFxuICAgICAgICAgICAgdmVjMihcIitIYShsLGMsZCkrXCIpKTtcXG4gICAgICAgIH1cIn12YXIgcD1zLmxlbmd0aCx2PXNbcy5sZW5ndGgtMV07Zis9XCJcXG4gICAgICAgIHJldHVybiBnZXRDaGFubmVsKFxcbiAgICAgICAgICBnZXRUXCIrcCtcIihcIitIYShpLGMsdikrXCIpLFxcbiAgICAgICAgICB2ZWMyKFwiK0hhKGwsYyx2KStcIikpO1wiLHRoaXMudXNlckNvZGU9XCJcXG4gICAgICBmbG9hdCBnZXRWYWx1ZShcIitpLm1hcCgoZnVuY3Rpb24odCl7cmV0dXJuXCJpbnQgXCIrdH0pKStcIikge1xcbiAgICAgICAgXCIrZitcIlxcbiAgICAgIH1cXG5cXG4gICAgICB2b2lkIG1haW4oKSB7XFxuICAgICAgICBcIitvK1wiIGNvb3JkcyA9IGdldE91dHB1dENvb3JkcygpO1xcbiAgICAgICAgdmVjNCByZXN1bHQgPSB2ZWM0KGdldFZhbHVlKFwiK2ErXCIpLCAwLiwgMC4sIDAuKTtcXG5cXG4gICAgICAgIFwiK2Fbci0xXStcIiA9IFwiK2Fbci0xXStcIiArIDE7XFxuICAgICAgICBpZiAoXCIrYVtyLTFdK1wiIDwgXCIrbltyLTFdK1wiKSB7XFxuICAgICAgICAgIHJlc3VsdC5nID0gZ2V0VmFsdWUoXCIrYStcIik7XFxuICAgICAgICB9XFxuXFxuICAgICAgICBcIithW3ItMl0rXCIgPSBcIithW3ItMl0rXCIgKyAxO1xcbiAgICAgICAgaWYgKFwiK2Fbci0yXStcIiA8IFwiK25bci0yXStcIikge1xcbiAgICAgICAgICByZXN1bHQuYSA9IGdldFZhbHVlKFwiK2ErXCIpO1xcbiAgICAgICAgfVxcblxcbiAgICAgICAgXCIrYVtyLTFdK1wiID0gXCIrYVtyLTFdK1wiIC0gMTtcXG4gICAgICAgIGlmIChcIithW3ItMl0rXCIgPCBcIituW3ItMl0rXCIgJiZcXG4gICAgICAgICAgICBcIithW3ItMV0rXCIgPCBcIituW3ItMV0rXCIpIHtcXG4gICAgICAgICAgcmVzdWx0LmIgPSBnZXRWYWx1ZShcIithK1wiKTtcXG4gICAgICAgIH1cXG4gICAgICAgIHNldE91dHB1dChyZXN1bHQpO1xcbiAgICAgIH1cXG4gICAgXCJ9O2Z1bmN0aW9uIEhhKHQsZSxuKXt2YXIgcj10LmluZGV4T2YoZSk7cmV0dXJuIHQubWFwKChmdW5jdGlvbih0LGUpe3JldHVybiBlPT09cj90K1wiIC0gXCIrbjp0fSkpLmpvaW4oKX12YXIgcWE9ZnVuY3Rpb24odCl7dGhpcy52YXJpYWJsZU5hbWVzPVtcInhcIixcImR5XCJdLHRoaXMub3V0cHV0U2hhcGU9dC5maWx0ZXJTaGFwZTt2YXIgZT10LnN0cmlkZUhlaWdodCxuPXQuc3RyaWRlV2lkdGgscj10LnBhZEluZm8udG9wLG89dC5wYWRJbmZvLmxlZnQsYT1cImNoYW5uZWxzTGFzdFwiPT09dC5kYXRhRm9ybWF0O3RoaXMudXNlckNvZGU9XCJcXG4gICAgICB2b2lkIG1haW4oKSB7XFxuICAgICAgICBpdmVjNCBjb29yZHMgPSBnZXRPdXRwdXRDb29yZHMoKTtcXG4gICAgICAgIGludCB3UiA9IGNvb3Jkcy54O1xcbiAgICAgICAgaW50IHdDID0gY29vcmRzLnk7XFxuICAgICAgICBpbnQgZDEgPSBjb29yZHMuejtcXG4gICAgICAgIGludCBkMiA9IGNvb3Jkcy53O1xcblxcbiAgICAgICAgLy8gQ29udm9sdmUgeCg/LCA/LCBkMSkgd2l0aCBkeSg6LCA6LCBkMikgdG8gZ2V0IGR3KHdSLCB3QywgZDEsIGQyKS5cXG4gICAgICAgIC8vID8gPSB0byBiZSBkZXRlcm1pbmVkLiA6ID0gYWNyb3NzIGFsbCB2YWx1ZXMgaW4gdGhhdCBheGlzLlxcbiAgICAgICAgZmxvYXQgZG90UHJvZCA9IDAuMDtcXG5cXG4gICAgICAgIGZvciAoaW50IGIgPSAwOyBiIDwgXCIrdC5iYXRjaFNpemUrXCI7IGIrKykge1xcbiAgICAgICAgICBmb3IgKGludCB5UiA9IDA7IHlSIDwgXCIrdC5vdXRIZWlnaHQrXCI7IHlSKyspIHtcXG4gICAgICAgICAgICBpbnQgeFIgPSB3UiArIHlSICogXCIrZStcIiAtIFwiK3IrXCI7XFxuXFxuICAgICAgICAgICAgaWYgKHhSIDwgMCB8fCB4UiA+PSBcIit0LmluSGVpZ2h0K1wiKSB7XFxuICAgICAgICAgICAgICBjb250aW51ZTtcXG4gICAgICAgICAgICB9XFxuXFxuICAgICAgICAgICAgZm9yIChpbnQgeUMgPSAwOyB5QyA8IFwiK3Qub3V0V2lkdGgrXCI7IHlDKyspIHtcXG4gICAgICAgICAgICAgIGludCB4QyA9IHdDICsgeUMgKiBcIituK1wiIC0gXCIrbytcIjtcXG5cXG4gICAgICAgICAgICAgIGlmICh4QyA8IDAgfHwgeEMgPj0gXCIrdC5pbldpZHRoK1wiKSB7XFxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xcbiAgICAgICAgICAgICAgfVxcblxcbiAgICAgICAgICAgICAgaWYgKFwiK2ErXCIpIHtcXG4gICAgICAgICAgICAgICAgZmxvYXQgZHlWYWx1ZSA9IGdldER5KGIsIHlSLCB5QywgZDIpO1xcbiAgICAgICAgICAgICAgICBmbG9hdCB4VmFsdWUgPSBnZXRYKGIsIHhSLCB4QywgZDEpO1xcbiAgICAgICAgICAgICAgICBkb3RQcm9kICs9ICh4VmFsdWUgKiBkeVZhbHVlKTtcXG4gICAgICAgICAgICAgIH0gZWxzZSB7XFxuICAgICAgICAgICAgICAgIGZsb2F0IGR5VmFsdWUgPSBnZXREeShiLCBkMiwgeVIsIHlDKTtcXG4gICAgICAgICAgICAgICAgZmxvYXQgeFZhbHVlID0gZ2V0WChiLCBkMSwgeFIsIHhDKTtcXG4gICAgICAgICAgICAgICAgZG90UHJvZCArPSAoeFZhbHVlICogZHlWYWx1ZSk7XFxuICAgICAgICAgICAgICB9XFxuXFxuICAgICAgICAgICAgfVxcbiAgICAgICAgICB9XFxuICAgICAgICB9XFxuICAgICAgICBzZXRPdXRwdXQoZG90UHJvZCk7XFxuICAgICAgfVxcbiAgICBcIn0sS2E9ZnVuY3Rpb24odCl7dGhpcy52YXJpYWJsZU5hbWVzPVtcImR5XCIsXCJXXCJdLHRoaXMub3V0cHV0U2hhcGU9dC5pblNoYXBlO3ZhciBlPXQuZmlsdGVySGVpZ2h0LG49dC5maWx0ZXJXaWR0aCxyPXQuc3RyaWRlSGVpZ2h0LG89dC5zdHJpZGVXaWR0aCxhPVwiY2hhbm5lbHNMYXN0XCI9PT10LmRhdGFGb3JtYXQsaT1lLTEtdC5wYWRJbmZvLnRvcCxzPW4tMS10LnBhZEluZm8ubGVmdCx1PWE/MToyLGM9YT8yOjMsbD1hPzM6MTt0aGlzLnVzZXJDb2RlPVwiXFxuICAgICAgY29uc3QgaXZlYzIgcGFkcyA9IGl2ZWMyKFwiK2krXCIsIFwiK3MrXCIpO1xcblxcbiAgICAgIHZvaWQgbWFpbigpIHtcXG4gICAgICAgIGl2ZWM0IGNvb3JkcyA9IGdldE91dHB1dENvb3JkcygpO1xcbiAgICAgICAgaW50IGJhdGNoID0gY29vcmRzWzBdO1xcbiAgICAgICAgaW50IGQxID0gY29vcmRzW1wiK2wrXCJdO1xcblxcbiAgICAgICAgaXZlYzIgZHlDb3JuZXIgPSBpdmVjMihjb29yZHNbXCIrdStcIl0sIGNvb3Jkc1tcIitjK1wiXSkgLSBwYWRzO1xcbiAgICAgICAgaW50IGR5UkNvcm5lciA9IGR5Q29ybmVyLng7XFxuICAgICAgICBpbnQgZHlDQ29ybmVyID0gZHlDb3JuZXIueTtcXG5cXG4gICAgICAgIC8vIENvbnZvbHZlIGR5KD8sID8sIGQyKSB3aXRoIHcoOiwgOiwgZDEsIGQyKSB0byBjb21wdXRlIGR4KHhSLCB4QywgZDEpLlxcbiAgICAgICAgLy8gPyA9IHRvIGJlIGRldGVybWluZWQuIDogPSBhY3Jvc3MgYWxsIHZhbHVlcyBpbiB0aGF0IGF4aXMuXFxuICAgICAgICBmbG9hdCBkb3RQcm9kID0gMC4wO1xcbiAgICAgICAgZm9yIChpbnQgd1IgPSAwOyB3UiA8IFwiK2UrXCI7IHdSKyspIHtcXG4gICAgICAgICAgZmxvYXQgZHlSID0gZmxvYXQoZHlSQ29ybmVyICsgd1IpIC8gXCIrcitcIi4wO1xcblxcbiAgICAgICAgICBpZiAoZHlSIDwgMC4wIHx8IGR5UiA+PSBcIit0Lm91dEhlaWdodCtcIi4wIHx8IGZyYWN0KGR5UikgPiAwLjApIHtcXG4gICAgICAgICAgICBjb250aW51ZTtcXG4gICAgICAgICAgfVxcbiAgICAgICAgICBpbnQgaWR5UiA9IGludChkeVIpO1xcblxcbiAgICAgICAgICBpbnQgd1JQZXJtID0gXCIrZStcIiAtIDEgLSB3UjtcXG5cXG4gICAgICAgICAgZm9yIChpbnQgd0MgPSAwOyB3QyA8IFwiK24rXCI7IHdDKyspIHtcXG4gICAgICAgICAgICBmbG9hdCBkeUMgPSBmbG9hdChkeUNDb3JuZXIgKyB3QykgLyBcIitvK1wiLjA7XFxuXFxuICAgICAgICAgICAgaWYgKGR5QyA8IDAuMCB8fCBkeUMgPj0gXCIrdC5vdXRXaWR0aCtcIi4wIHx8XFxuICAgICAgICAgICAgICAgIGZyYWN0KGR5QykgPiAwLjApIHtcXG4gICAgICAgICAgICAgIGNvbnRpbnVlO1xcbiAgICAgICAgICAgIH1cXG4gICAgICAgICAgICBpbnQgaWR5QyA9IGludChkeUMpO1xcblxcbiAgICAgICAgICAgIGludCB3Q1Blcm0gPSBcIituK1wiIC0gMSAtIHdDO1xcblxcbiAgICAgICAgICAgIGZvciAoaW50IGQyID0gMDsgZDIgPCBcIit0Lm91dENoYW5uZWxzK1wiOyBkMisrKSB7XFxuXFxuICAgICAgICAgICAgICBpZiAoXCIrYStcIikge1xcbiAgICAgICAgICAgICAgICBmbG9hdCB4VmFsdWUgPSBnZXREeShiYXRjaCwgaWR5UiwgaWR5QywgZDIpO1xcbiAgICAgICAgICAgICAgICBmbG9hdCB3VmFsdWUgPSBnZXRXKHdSUGVybSwgd0NQZXJtLCBkMSwgZDIpO1xcbiAgICAgICAgICAgICAgICBkb3RQcm9kICs9IHhWYWx1ZSAqIHdWYWx1ZTtcXG4gICAgICAgICAgICAgIH0gZWxzZSB7XFxuICAgICAgICAgICAgICAgIGZsb2F0IHhWYWx1ZSA9IGdldER5KGJhdGNoLCBkMiwgaWR5UiwgaWR5Qyk7XFxuICAgICAgICAgICAgICAgIGZsb2F0IHdWYWx1ZSA9IGdldFcod1JQZXJtLCB3Q1Blcm0sIGQxLCBkMik7XFxuICAgICAgICAgICAgICAgIGRvdFByb2QgKz0geFZhbHVlICogd1ZhbHVlO1xcbiAgICAgICAgICAgICAgfVxcblxcbiAgICAgICAgICAgIH1cXG4gICAgICAgICAgfVxcbiAgICAgICAgfVxcbiAgICAgICAgc2V0T3V0cHV0KGRvdFByb2QpO1xcbiAgICAgIH1cXG4gICAgXCJ9LGphPWZ1bmN0aW9uKHQpe3RoaXMudmFyaWFibGVOYW1lcz1bXCJ4XCIsXCJkeVwiXSx0aGlzLm91dHB1dFNoYXBlPXQuZmlsdGVyU2hhcGU7dmFyIGU9dC5zdHJpZGVEZXB0aCxuPXQuc3RyaWRlSGVpZ2h0LHI9dC5zdHJpZGVXaWR0aCxvPXQucGFkSW5mby5mcm9udCxhPXQucGFkSW5mby50b3AsaT10LnBhZEluZm8ubGVmdDt0aGlzLnVzZXJDb2RlPVwiXFxuICAgICAgdm9pZCBtYWluKCkge1xcbiAgICAgICAgaXZlYzUgY29vcmRzID0gZ2V0T3V0cHV0Q29vcmRzKCk7XFxuICAgICAgICBpbnQgd0YgPSBjb29yZHMueDtcXG4gICAgICAgIGludCB3UiA9IGNvb3Jkcy55O1xcbiAgICAgICAgaW50IHdDID0gY29vcmRzLno7XFxuICAgICAgICBpbnQgZDEgPSBjb29yZHMudztcXG4gICAgICAgIGludCBkMiA9IGNvb3Jkcy51O1xcblxcbiAgICAgICAgZmxvYXQgZG90UHJvZCA9IDAuMDtcXG5cXG4gICAgICAgIGZvciAoaW50IGIgPSAwOyBiIDwgXCIrdC5iYXRjaFNpemUrXCI7IGIrKykge1xcbiAgICAgICAgICBmb3IgKGludCB5RiA9IDA7IHlGIDwgXCIrdC5vdXREZXB0aCtcIjsgeUYrKykge1xcbiAgICAgICAgICAgIGludCB4RiA9IHdGICsgeUYgKiBcIitlK1wiIC0gXCIrbytcIjtcXG5cXG4gICAgICAgICAgICBpZiAoeEYgPCAwIHx8IHhGID49IFwiK3QuaW5EZXB0aCtcIikge1xcbiAgICAgICAgICAgICAgY29udGludWU7XFxuICAgICAgICAgICAgfVxcblxcbiAgICAgICAgICAgIGZvciAoaW50IHlSID0gMDsgeVIgPCBcIit0Lm91dEhlaWdodCtcIjsgeVIrKykge1xcbiAgICAgICAgICAgICAgaW50IHhSID0gd1IgKyB5UiAqIFwiK24rXCIgLSBcIithK1wiO1xcblxcbiAgICAgICAgICAgICAgaWYgKHhSIDwgMCB8fCB4UiA+PSBcIit0LmluSGVpZ2h0K1wiKSB7XFxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xcbiAgICAgICAgICAgICAgfVxcblxcbiAgICAgICAgICAgICAgZm9yIChpbnQgeUMgPSAwOyB5QyA8IFwiK3Qub3V0V2lkdGgrXCI7IHlDKyspIHtcXG4gICAgICAgICAgICAgICAgaW50IHhDID0gd0MgKyB5QyAqIFwiK3IrXCIgLSBcIitpK1wiO1xcblxcbiAgICAgICAgICAgICAgICBpZiAoeEMgPCAwIHx8IHhDID49IFwiK3QuaW5XaWR0aCtcIikge1xcbiAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xcbiAgICAgICAgICAgICAgICB9XFxuXFxuICAgICAgICAgICAgICAgIGZsb2F0IGR5VmFsdWUgPSBnZXREeShiLCB5RiwgeVIsIHlDLCBkMik7XFxuICAgICAgICAgICAgICAgIGZsb2F0IHhWYWx1ZSA9IGdldFgoYiwgeEYsIHhSLCB4QywgZDEpO1xcbiAgICAgICAgICAgICAgICBkb3RQcm9kICs9ICh4VmFsdWUgKiBkeVZhbHVlKTtcXG4gICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICB9XFxuICAgICAgICAgIH1cXG4gICAgICAgIH1cXG4gICAgICAgIHNldE91dHB1dChkb3RQcm9kKTtcXG4gICAgICB9XFxuICAgIFwifSxYYT1mdW5jdGlvbih0KXt0aGlzLnZhcmlhYmxlTmFtZXM9W1wiZHlcIixcIldcIl0sdGhpcy5vdXRwdXRTaGFwZT10LmluU2hhcGU7dmFyIGU9dC5maWx0ZXJEZXB0aCxuPXQuZmlsdGVySGVpZ2h0LHI9dC5maWx0ZXJXaWR0aCxvPXQuc3RyaWRlRGVwdGgsYT10LnN0cmlkZUhlaWdodCxpPXQuc3RyaWRlV2lkdGgscz1lLTEtdC5wYWRJbmZvLmZyb250LHU9bi0xLXQucGFkSW5mby50b3AsYz1yLTEtdC5wYWRJbmZvLmxlZnQ7dGhpcy51c2VyQ29kZT1cIlxcbiAgICAgIGNvbnN0IGl2ZWMzIHBhZHMgPSBpdmVjMyhcIitzK1wiLCBcIit1K1wiLCBcIitjK1wiKTtcXG5cXG4gICAgICB2b2lkIG1haW4oKSB7XFxuICAgICAgICBpdmVjNSBjb29yZHMgPSBnZXRPdXRwdXRDb29yZHMoKTtcXG4gICAgICAgIGludCBiYXRjaCA9IGNvb3Jkcy54O1xcbiAgICAgICAgaW50IGQxID0gY29vcmRzLnU7XFxuXFxuXFxuICAgICAgICBpdmVjMyBkeUNvcm5lciA9IGl2ZWMzKGNvb3Jkcy55LCBjb29yZHMueiwgY29vcmRzLncpIC0gcGFkcztcXG4gICAgICAgIGludCBkeUZDb3JuZXIgPSBkeUNvcm5lci54O1xcbiAgICAgICAgaW50IGR5UkNvcm5lciA9IGR5Q29ybmVyLnk7XFxuICAgICAgICBpbnQgZHlDQ29ybmVyID0gZHlDb3JuZXIuejtcXG5cXG4gICAgICAgIGZsb2F0IGRvdFByb2QgPSAwLjA7XFxuICAgICAgICBmb3IgKGludCB3RiA9IDA7IHdGIDwgXCIrZStcIjsgd0YrKykge1xcbiAgICAgICAgICBmbG9hdCBkeUYgPSBmbG9hdChkeUZDb3JuZXIgKyB3RikgLyBcIitvK1wiLjA7XFxuXFxuICAgICAgICAgIGlmIChkeUYgPCAwLjAgfHwgZHlGID49IFwiK3Qub3V0RGVwdGgrXCIuMCB8fCBmcmFjdChkeUYpID4gMC4wKSB7XFxuICAgICAgICAgICAgY29udGludWU7XFxuICAgICAgICAgIH1cXG4gICAgICAgICAgaW50IGlkeUYgPSBpbnQoZHlGKTtcXG5cXG4gICAgICAgICAgaW50IHdGUGVybSA9IFwiK2UrXCIgLSAxIC0gd0Y7XFxuXFxuICAgICAgICAgIGZvciAoaW50IHdSID0gMDsgd1IgPCBcIituK1wiOyB3UisrKSB7XFxuICAgICAgICAgICAgZmxvYXQgZHlSID0gZmxvYXQoZHlSQ29ybmVyICsgd1IpIC8gXCIrYStcIi4wO1xcblxcbiAgICAgICAgICAgIGlmIChkeVIgPCAwLjAgfHwgZHlSID49IFwiK3Qub3V0SGVpZ2h0K1wiLjAgfHxcXG4gICAgICAgICAgICAgIGZyYWN0KGR5UikgPiAwLjApIHtcXG4gICAgICAgICAgICAgIGNvbnRpbnVlO1xcbiAgICAgICAgICAgIH1cXG4gICAgICAgICAgICBpbnQgaWR5UiA9IGludChkeVIpO1xcblxcbiAgICAgICAgICAgIGludCB3UlBlcm0gPSBcIituK1wiIC0gMSAtIHdSO1xcblxcbiAgICAgICAgICAgIGZvciAoaW50IHdDID0gMDsgd0MgPCBcIityK1wiOyB3QysrKSB7XFxuICAgICAgICAgICAgICBmbG9hdCBkeUMgPSBmbG9hdChkeUNDb3JuZXIgKyB3QykgLyBcIitpK1wiLjA7XFxuXFxuICAgICAgICAgICAgICBpZiAoZHlDIDwgMC4wIHx8IGR5QyA+PSBcIit0Lm91dFdpZHRoK1wiLjAgfHxcXG4gICAgICAgICAgICAgICAgICBmcmFjdChkeUMpID4gMC4wKSB7XFxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xcbiAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgICAgaW50IGlkeUMgPSBpbnQoZHlDKTtcXG5cXG4gICAgICAgICAgICAgIGludCB3Q1Blcm0gPSBcIityK1wiIC0gMSAtIHdDO1xcblxcbiAgICAgICAgICAgICAgZm9yIChpbnQgZDIgPSAwOyBkMiA8IFwiK3Qub3V0Q2hhbm5lbHMrXCI7IGQyKyspIHtcXG4gICAgICAgICAgICAgICAgZmxvYXQgeFZhbHVlID0gZ2V0RHkoYmF0Y2gsIGlkeUYsIGlkeVIsIGlkeUMsIGQyKTtcXG4gICAgICAgICAgICAgICAgZmxvYXQgd1ZhbHVlID0gZ2V0Vyh3RlBlcm0sIHdSUGVybSwgd0NQZXJtLCBkMSwgZDIpO1xcbiAgICAgICAgICAgICAgICBkb3RQcm9kICs9IHhWYWx1ZSAqIHdWYWx1ZTtcXG4gICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICB9XFxuICAgICAgICAgIH1cXG4gICAgICAgIH1cXG4gICAgICAgIHNldE91dHB1dChkb3RQcm9kKTtcXG4gICAgICB9XFxuICAgIFwifSxZYT1mdW5jdGlvbih0KXt0aGlzLnZhcmlhYmxlTmFtZXM9W1wieFwiLFwiZHlcIl0sdGhpcy5vdXRwdXRTaGFwZT10LmZpbHRlclNoYXBlO3ZhciBlPXQuc3RyaWRlSGVpZ2h0LG49dC5zdHJpZGVXaWR0aCxyPXQucGFkSW5mby50b3Asbz10LnBhZEluZm8ubGVmdCxhPXQub3V0Q2hhbm5lbHMvdC5pbkNoYW5uZWxzO3RoaXMudXNlckNvZGU9XCJcXG4gICAgICB2b2lkIG1haW4oKSB7XFxuICAgICAgICBpdmVjNCBjb29yZHMgPSBnZXRPdXRwdXRDb29yZHMoKTtcXG4gICAgICAgIGludCB3UiA9IGNvb3Jkcy54O1xcbiAgICAgICAgaW50IHdDID0gY29vcmRzLnk7XFxuICAgICAgICBpbnQgZDEgPSBjb29yZHMuejtcXG4gICAgICAgIGludCBkbSA9IGNvb3Jkcy53O1xcbiAgICAgICAgaW50IGQyID0gZDEgKiBcIithK1wiICsgZG07XFxuXFxuICAgICAgICBmbG9hdCBkb3RQcm9kID0gMC4wO1xcblxcbiAgICAgICAgLy8gVE8gRE86IFZlYzQgb3ZlciB0aGUgYmF0Y2ggc2l6ZVxcbiAgICAgICAgZm9yIChpbnQgYiA9IDA7IGIgPCBcIit0LmJhdGNoU2l6ZStcIjsgYisrKSB7XFxuICAgICAgICAgIGZvciAoaW50IHlSID0gMDsgeVIgPCBcIit0Lm91dEhlaWdodCtcIjsgeVIrKykge1xcbiAgICAgICAgICAgIGludCB4UiA9IHdSICsgeVIgKiBcIitlK1wiIC0gXCIrcitcIjtcXG5cXG4gICAgICAgICAgICBpZiAoeFIgPCAwIHx8IHhSID49IFwiK3QuaW5IZWlnaHQrXCIpIHtcXG4gICAgICAgICAgICAgIGNvbnRpbnVlO1xcbiAgICAgICAgICAgIH1cXG5cXG4gICAgICAgICAgICBmb3IgKGludCB5QyA9IDA7IHlDIDwgXCIrdC5vdXRXaWR0aCtcIjsgeUMrKykge1xcbiAgICAgICAgICAgICAgaW50IHhDID0gd0MgKyB5QyAqIFwiK24rXCIgLSBcIitvK1wiO1xcblxcbiAgICAgICAgICAgICAgaWYgKHhDIDwgMCB8fCB4QyA+PSBcIit0LmluV2lkdGgrXCIpIHtcXG4gICAgICAgICAgICAgICAgY29udGludWU7XFxuICAgICAgICAgICAgICB9XFxuXFxuICAgICAgICAgICAgICBmbG9hdCBkeVZhbHVlID0gZ2V0RHkoYiwgeVIsIHlDLCBkMik7XFxuICAgICAgICAgICAgICBmbG9hdCB4VmFsdWUgPSBnZXRYKGIsIHhSLCB4QywgZDEpO1xcbiAgICAgICAgICAgICAgZG90UHJvZCArPSAoeFZhbHVlICogZHlWYWx1ZSk7XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgICB9XFxuICAgICAgICB9XFxuICAgICAgICBzZXRPdXRwdXQoZG90UHJvZCk7XFxuICAgICAgfVxcbiAgICBcIn0sJGE9ZnVuY3Rpb24odCl7dGhpcy52YXJpYWJsZU5hbWVzPVtcImR5XCIsXCJXXCJdLHRoaXMub3V0cHV0U2hhcGU9dC5pblNoYXBlO3ZhciBlPXQuZmlsdGVySGVpZ2h0LG49dC5maWx0ZXJXaWR0aCxyPXQuc3RyaWRlSGVpZ2h0LG89dC5zdHJpZGVXaWR0aCxhPWUtMS10LnBhZEluZm8udG9wLGk9bi0xLXQucGFkSW5mby5sZWZ0LHM9dC5vdXRDaGFubmVscy90LmluQ2hhbm5lbHM7dGhpcy51c2VyQ29kZT1cIlxcbiAgICAgIGNvbnN0IGl2ZWMyIHBhZHMgPSBpdmVjMihcIithK1wiLCBcIitpK1wiKTtcXG5cXG4gICAgICB2b2lkIG1haW4oKSB7XFxuICAgICAgICBpdmVjNCBjb29yZHMgPSBnZXRPdXRwdXRDb29yZHMoKTtcXG4gICAgICAgIGludCBiYXRjaCA9IGNvb3Jkc1swXTtcXG4gICAgICAgIGludCBkMSA9IGNvb3Jkc1szXTtcXG4gICAgICAgIGl2ZWMyIGR5Q29ybmVyID0gY29vcmRzLnl6IC0gcGFkcztcXG4gICAgICAgIGludCBkeVJDb3JuZXIgPSBkeUNvcm5lci54O1xcbiAgICAgICAgaW50IGR5Q0Nvcm5lciA9IGR5Q29ybmVyLnk7XFxuXFxuICAgICAgICBmbG9hdCBkb3RQcm9kID0gMC4wO1xcblxcbiAgICAgICAgZm9yIChpbnQgd1IgPSAwOyB3UiA8IFwiK2UrXCI7IHdSKyspIHtcXG4gICAgICAgICAgZmxvYXQgZHlSID0gZmxvYXQoZHlSQ29ybmVyICsgd1IpIC8gXCIrcitcIi4wO1xcblxcbiAgICAgICAgICBpZiAoZHlSIDwgMC4wIHx8IGR5UiA+PSBcIit0Lm91dEhlaWdodCtcIi4wIHx8IGZyYWN0KGR5UikgPiAwLjApIHtcXG4gICAgICAgICAgICBjb250aW51ZTtcXG4gICAgICAgICAgfVxcbiAgICAgICAgICBpbnQgaWR5UiA9IGludChkeVIpO1xcblxcbiAgICAgICAgICBpbnQgd1JQZXJtID0gXCIrZStcIiAtIDEgLSB3UjtcXG5cXG4gICAgICAgICAgZm9yIChpbnQgd0MgPSAwOyB3QyA8IFwiK24rXCI7IHdDKyspIHtcXG4gICAgICAgICAgICBmbG9hdCBkeUMgPSBmbG9hdChkeUNDb3JuZXIgKyB3QykgLyBcIitvK1wiLjA7XFxuXFxuICAgICAgICAgICAgaWYgKGR5QyA8IDAuMCB8fCBkeUMgPj0gXCIrdC5vdXRXaWR0aCtcIi4wIHx8XFxuICAgICAgICAgICAgICAgIGZyYWN0KGR5QykgPiAwLjApIHtcXG4gICAgICAgICAgICAgIGNvbnRpbnVlO1xcbiAgICAgICAgICAgIH1cXG4gICAgICAgICAgICBpbnQgaWR5QyA9IGludChkeUMpO1xcblxcbiAgICAgICAgICAgIGludCB3Q1Blcm0gPSBcIituK1wiIC0gMSAtIHdDO1xcblxcbiAgICAgICAgICAgIC8vIFRPIERPOiBWZWM0IG92ZXIgdGhlIGNoYW5uZWxNdWxcXG4gICAgICAgICAgICBmb3IgKGludCBkbSA9IDA7IGRtIDwgXCIrcytcIjsgZG0rKykge1xcbiAgICAgICAgICAgICAgaW50IGQyID0gZDEgKiBcIitzK1wiICsgZG07XFxuICAgICAgICAgICAgICBmbG9hdCB4VmFsdWUgPSBnZXREeShiYXRjaCwgaWR5UiwgaWR5QywgZDIpO1xcbiAgICAgICAgICAgICAgZmxvYXQgd1ZhbHVlID0gZ2V0Vyh3UlBlcm0sIHdDUGVybSwgZDEsIGRtKTtcXG4gICAgICAgICAgICAgIGRvdFByb2QgKz0geFZhbHVlICogd1ZhbHVlO1xcbiAgICAgICAgICAgIH1cXG4gICAgICAgICAgfVxcbiAgICAgICAgfVxcbiAgICAgICAgc2V0T3V0cHV0KGRvdFByb2QpO1xcbiAgICAgIH1cXG4gICAgXCJ9LFFhPWZ1bmN0aW9uKHQsZSxuLHIpe3ZvaWQgMD09PWUmJihlPSExKSx2b2lkIDA9PT1uJiYobj1udWxsKSx2b2lkIDA9PT1yJiYocj0hMSksdGhpcy52YXJpYWJsZU5hbWVzPVtcInhcIixcIldcIl0sdGhpcy5vdXRwdXRTaGFwZT10Lm91dFNoYXBlO3ZhciBvPXQucGFkSW5mby50b3AsYT10LnBhZEluZm8ubGVmdCxpPXQuc3RyaWRlSGVpZ2h0LHM9dC5zdHJpZGVXaWR0aCx1PXQuZGlsYXRpb25IZWlnaHQsYz10LmRpbGF0aW9uV2lkdGgsbD10LmZpbHRlckhlaWdodCxoPXQuZmlsdGVyV2lkdGgsZj00Kk1hdGguZmxvb3IodC5pbkNoYW5uZWxzLzQpLGQ9dC5pbkNoYW5uZWxzJTQscD1cImNoYW5uZWxzTGFzdFwiPT09dC5kYXRhRm9ybWF0LHY9cD8xOjIsbT1wPzI6MyxnPXA/MzoxLHk9XCJcIix4PVwiXCI7biYmKHk9cj9cImZsb2F0IGFjdGl2YXRpb24oZmxvYXQgYSkge1xcbiAgICAgICAgICBmbG9hdCBiID0gZ2V0UHJlbHVBY3RpdmF0aW9uV2VpZ2h0c0F0T3V0Q29vcmRzKCk7XFxuICAgICAgICAgIFwiK24rXCJcXG4gICAgICAgIH1cIjpcIlxcbiAgICAgICAgICBmbG9hdCBhY3RpdmF0aW9uKGZsb2F0IHgpIHtcXG4gICAgICAgICAgICBcIituK1wiXFxuICAgICAgICAgIH1cXG4gICAgICAgIFwiLHg9XCJyZXN1bHQgPSBhY3RpdmF0aW9uKHJlc3VsdCk7XCIpO3ZhciBiPWU/XCJyZXN1bHQgKz0gZ2V0Qmlhc0F0T3V0Q29vcmRzKCk7XCI6XCJcIjtlJiZ0aGlzLnZhcmlhYmxlTmFtZXMucHVzaChcImJpYXNcIiksciYmdGhpcy52YXJpYWJsZU5hbWVzLnB1c2goXCJwcmVsdUFjdGl2YXRpb25XZWlnaHRzXCIpLHRoaXMudXNlckNvZGU9XCJcXG4gICAgICBcIit5K1wiXFxuXFxuICAgICAgY29uc3QgaXZlYzIgc3RyaWRlcyA9IGl2ZWMyKFwiK2krXCIsIFwiK3MrXCIpO1xcbiAgICAgIGNvbnN0IGl2ZWMyIHBhZHMgPSBpdmVjMihcIitvK1wiLCBcIithK1wiKTtcXG5cXG4gICAgICB2b2lkIG1haW4oKSB7XFxuICAgICAgICBpdmVjNCBjb29yZHMgPSBnZXRPdXRwdXRDb29yZHMoKTtcXG4gICAgICAgIGludCBiYXRjaCA9IGNvb3Jkc1swXTtcXG4gICAgICAgIGludCBkMiA9IGNvb3Jkc1tcIitnK1wiXTtcXG5cXG4gICAgICAgIGl2ZWMyIHhSQ0Nvcm5lciA9XFxuICAgICAgICAgICAgaXZlYzIoY29vcmRzW1wiK3YrXCJdLCBjb29yZHNbXCIrbStcIl0pICogc3RyaWRlcyAtIHBhZHM7XFxuICAgICAgICBpbnQgeFJDb3JuZXIgPSB4UkNDb3JuZXIueDtcXG4gICAgICAgIGludCB4Q0Nvcm5lciA9IHhSQ0Nvcm5lci55O1xcblxcbiAgICAgICAgLy8gQ29udm9sdmUgeCg/LCA/LCBkMSkgd2l0aCB3KDosIDosIGQxLCBkMikgdG8gZ2V0IHkoeVIsIHlDLCBkMikuXFxuICAgICAgICAvLyA/ID0gdG8gYmUgZGV0ZXJtaW5lZC4gOiA9IGFjcm9zcyBhbGwgdmFsdWVzIGluIHRoYXQgYXhpcy5cXG4gICAgICAgIGZsb2F0IGRvdFByb2QgPSAwLjA7XFxuICAgICAgICBmb3IgKGludCB3UiA9IDA7IHdSIDwgXCIrbCtcIjsgd1IrKykge1xcbiAgICAgICAgICBpbnQgeFIgPSB4UkNvcm5lciArIHdSICogXCIrdStcIjtcXG5cXG4gICAgICAgICAgaWYgKHhSIDwgMCB8fCB4UiA+PSBcIit0LmluSGVpZ2h0K1wiKSB7XFxuICAgICAgICAgICAgY29udGludWU7XFxuICAgICAgICAgIH1cXG5cXG4gICAgICAgICAgZm9yIChpbnQgd0MgPSAwOyB3QyA8IFwiK2grXCI7IHdDKyspIHtcXG4gICAgICAgICAgICBpbnQgeEMgPSB4Q0Nvcm5lciArIHdDICogXCIrYytcIjtcXG5cXG4gICAgICAgICAgICBpZiAoeEMgPCAwIHx8IHhDID49IFwiK3QuaW5XaWR0aCtcIikge1xcbiAgICAgICAgICAgICAgY29udGludWU7XFxuICAgICAgICAgICAgfVxcblxcbiAgICAgICAgICAgIGZvciAoaW50IGQxID0gMDsgZDEgPCBcIitmK1wiOyBkMSArPSA0KSB7XFxuICAgICAgICAgICAgICB2ZWM0IHdWYWx1ZXMgPSB2ZWM0KFxcbiAgICAgICAgICAgICAgICBnZXRXKHdSLCB3QywgZDEsIGQyKSxcXG4gICAgICAgICAgICAgICAgZ2V0Vyh3Uiwgd0MsIGQxICsgMSwgZDIpLFxcbiAgICAgICAgICAgICAgICBnZXRXKHdSLCB3QywgZDEgKyAyLCBkMiksXFxuICAgICAgICAgICAgICAgIGdldFcod1IsIHdDLCBkMSArIDMsIGQyKVxcbiAgICAgICAgICAgICAgKTtcXG5cXG4gICAgICAgICAgICAgIGlmIChcIitwK1wiKSB7XFxuICAgICAgICAgICAgICAgIHZlYzQgeFZhbHVlcyA9IHZlYzQoXFxuICAgICAgICAgICAgICAgICAgZ2V0WChiYXRjaCwgeFIsIHhDLCBkMSksXFxuICAgICAgICAgICAgICAgICAgZ2V0WChiYXRjaCwgeFIsIHhDLCBkMSArIDEpLFxcbiAgICAgICAgICAgICAgICAgIGdldFgoYmF0Y2gsIHhSLCB4QywgZDEgKyAyKSxcXG4gICAgICAgICAgICAgICAgICBnZXRYKGJhdGNoLCB4UiwgeEMsIGQxICsgMylcXG4gICAgICAgICAgICAgICAgKTtcXG4gICAgICAgICAgICAgICAgZG90UHJvZCArPSBkb3QoeFZhbHVlcywgd1ZhbHVlcyk7XFxuICAgICAgICAgICAgICB9IGVsc2Uge1xcbiAgICAgICAgICAgICAgICB2ZWM0IHhWYWx1ZXMgPSB2ZWM0KFxcbiAgICAgICAgICAgICAgICAgIGdldFgoYmF0Y2gsIGQxLCB4UiwgeEMpLFxcbiAgICAgICAgICAgICAgICAgIGdldFgoYmF0Y2gsIGQxICsgMSwgeFIsIHhDKSxcXG4gICAgICAgICAgICAgICAgICBnZXRYKGJhdGNoLCBkMSArIDIsIHhSLCB4QyksXFxuICAgICAgICAgICAgICAgICAgZ2V0WChiYXRjaCwgZDEgKyAzLCB4UiwgeEMpXFxuICAgICAgICAgICAgICAgICk7XFxuICAgICAgICAgICAgICAgIGRvdFByb2QgKz0gZG90KHhWYWx1ZXMsIHdWYWx1ZXMpO1xcbiAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgIH1cXG5cXG4gICAgICAgICAgICBpZiAoXCIrKDE9PT1kKStcIikge1xcblxcbiAgICAgICAgICAgICAgaWYgKFwiK3ArXCIpIHtcXG4gICAgICAgICAgICAgICAgZG90UHJvZCArPVxcbiAgICAgICAgICAgICAgICAgICAgZ2V0WChiYXRjaCwgeFIsIHhDLCBcIitmK1wiKSAqXFxuICAgICAgICAgICAgICAgICAgICBnZXRXKHdSLCB3QywgXCIrZitcIiwgZDIpO1xcbiAgICAgICAgICAgICAgfSBlbHNlIHtcXG4gICAgICAgICAgICAgICAgZG90UHJvZCArPVxcbiAgICAgICAgICAgICAgICAgICAgZ2V0WChiYXRjaCwgXCIrZitcIiwgeFIsIHhDKSAqXFxuICAgICAgICAgICAgICAgICAgICBnZXRXKHdSLCB3QywgXCIrZitcIiwgZDIpO1xcbiAgICAgICAgICAgICAgfVxcblxcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoXCIrKDI9PT1kKStcIikge1xcbiAgICAgICAgICAgICAgdmVjMiB3VmFsdWVzID0gdmVjMihcXG4gICAgICAgICAgICAgICAgZ2V0Vyh3Uiwgd0MsIFwiK2YrXCIsIGQyKSxcXG4gICAgICAgICAgICAgICAgZ2V0Vyh3Uiwgd0MsIFwiK2YrXCIgKyAxLCBkMilcXG4gICAgICAgICAgICAgICk7XFxuXFxuICAgICAgICAgICAgICBpZiAoXCIrcCtcIikge1xcbiAgICAgICAgICAgICAgICB2ZWMyIHhWYWx1ZXMgPSB2ZWMyKFxcbiAgICAgICAgICAgICAgICAgIGdldFgoYmF0Y2gsIHhSLCB4QywgXCIrZitcIiksXFxuICAgICAgICAgICAgICAgICAgZ2V0WChiYXRjaCwgeFIsIHhDLCBcIitmK1wiICsgMSlcXG4gICAgICAgICAgICAgICAgKTtcXG4gICAgICAgICAgICAgICAgZG90UHJvZCArPSBkb3QoeFZhbHVlcywgd1ZhbHVlcyk7XFxuICAgICAgICAgICAgICB9IGVsc2Uge1xcbiAgICAgICAgICAgICAgICB2ZWMyIHhWYWx1ZXMgPSB2ZWMyKFxcbiAgICAgICAgICAgICAgICAgIGdldFgoYmF0Y2gsIFwiK2YrXCIsIHhSLCB4QyksXFxuICAgICAgICAgICAgICAgICAgZ2V0WChiYXRjaCwgXCIrZitcIiArIDEsIHhSLCB4QylcXG4gICAgICAgICAgICAgICAgKTtcXG4gICAgICAgICAgICAgICAgZG90UHJvZCArPSBkb3QoeFZhbHVlcywgd1ZhbHVlcyk7XFxuICAgICAgICAgICAgICB9XFxuXFxuICAgICAgICAgICAgfSBlbHNlIGlmIChcIisoMz09PWQpK1wiKSB7XFxuICAgICAgICAgICAgICB2ZWMzIHdWYWx1ZXMgPSB2ZWMzKFxcbiAgICAgICAgICAgICAgICBnZXRXKHdSLCB3QywgXCIrZitcIiwgZDIpLFxcbiAgICAgICAgICAgICAgICBnZXRXKHdSLCB3QywgXCIrZitcIiArIDEsIGQyKSxcXG4gICAgICAgICAgICAgICAgZ2V0Vyh3Uiwgd0MsIFwiK2YrXCIgKyAyLCBkMilcXG4gICAgICAgICAgICAgICk7XFxuXFxuICAgICAgICAgICAgICBpZiAoXCIrcCtcIikge1xcbiAgICAgICAgICAgICAgICB2ZWMzIHhWYWx1ZXMgPSB2ZWMzKFxcbiAgICAgICAgICAgICAgICAgIGdldFgoYmF0Y2gsIHhSLCB4QywgXCIrZitcIiksXFxuICAgICAgICAgICAgICAgICAgZ2V0WChiYXRjaCwgeFIsIHhDLCBcIitmK1wiICsgMSksXFxuICAgICAgICAgICAgICAgICAgZ2V0WChiYXRjaCwgeFIsIHhDLCBcIitmK1wiICsgMilcXG4gICAgICAgICAgICAgICAgKTtcXG4gICAgICAgICAgICAgICAgZG90UHJvZCArPSBkb3QoeFZhbHVlcywgd1ZhbHVlcyk7XFxuICAgICAgICAgICAgICB9IGVsc2Uge1xcbiAgICAgICAgICAgICAgICB2ZWMzIHhWYWx1ZXMgPSB2ZWMzKFxcbiAgICAgICAgICAgICAgICAgIGdldFgoYmF0Y2gsIFwiK2YrXCIsIHhSLCB4QyksXFxuICAgICAgICAgICAgICAgICAgZ2V0WChiYXRjaCwgXCIrZitcIiArIDEsIHhSLCB4QyksXFxuICAgICAgICAgICAgICAgICAgZ2V0WChiYXRjaCwgXCIrZitcIiArIDIsIHhSLCB4QylcXG4gICAgICAgICAgICAgICAgKTtcXG4gICAgICAgICAgICAgICAgZG90UHJvZCArPSBkb3QoeFZhbHVlcywgd1ZhbHVlcyk7XFxuICAgICAgICAgICAgICB9XFxuXFxuICAgICAgICAgICAgfVxcbiAgICAgICAgICB9XFxuICAgICAgICB9XFxuXFxuICAgICAgICBmbG9hdCByZXN1bHQgPSBkb3RQcm9kO1xcbiAgICAgICAgXCIrYitcIlxcbiAgICAgICAgXCIreCtcIlxcbiAgICAgICAgc2V0T3V0cHV0KHJlc3VsdCk7XFxuICAgICAgfVxcbiAgICBcIn0sSmE9ZnVuY3Rpb24odCl7dGhpcy52YXJpYWJsZU5hbWVzPVtcInhcIixcIldcIl0sdGhpcy5vdXRwdXRTaGFwZT10Lm91dFNoYXBlO3ZhciBlPXQucGFkSW5mby5mcm9udCxuPXQucGFkSW5mby50b3Ascj10LnBhZEluZm8ubGVmdCxvPXQuc3RyaWRlRGVwdGgsYT10LnN0cmlkZUhlaWdodCxpPXQuc3RyaWRlV2lkdGgscz10LmRpbGF0aW9uRGVwdGgsdT10LmRpbGF0aW9uSGVpZ2h0LGM9dC5kaWxhdGlvbldpZHRoLGw9dC5maWx0ZXJEZXB0aCxoPXQuZmlsdGVySGVpZ2h0LGY9dC5maWx0ZXJXaWR0aCxkPTQqTWF0aC5mbG9vcih0LmluQ2hhbm5lbHMvNCkscD10LmluQ2hhbm5lbHMlNDt0aGlzLnVzZXJDb2RlPVwiXFxuICAgICAgY29uc3QgaXZlYzMgc3RyaWRlcyA9IGl2ZWMzKFwiK28rXCIsIFwiK2ErXCIsIFwiK2krXCIpO1xcbiAgICAgIGNvbnN0IGl2ZWMzIHBhZHMgPSBpdmVjMyhcIitlK1wiLCBcIituK1wiLCBcIityK1wiKTtcXG5cXG4gICAgICB2b2lkIG1haW4oKSB7XFxuICAgICAgICBpdmVjNSBjb29yZHMgPSBnZXRPdXRwdXRDb29yZHMoKTtcXG4gICAgICAgIGludCBiYXRjaCA9IGNvb3Jkcy54O1xcbiAgICAgICAgaW50IGQyID0gY29vcmRzLnU7XFxuXFxuICAgICAgICBpdmVjMyB4RlJDQ29ybmVyID0gaXZlYzMoY29vcmRzLnksIGNvb3Jkcy56LCBjb29yZHMudykgKiBzdHJpZGVzIC0gcGFkcztcXG4gICAgICAgIGludCB4RkNvcm5lciA9IHhGUkNDb3JuZXIueDtcXG4gICAgICAgIGludCB4UkNvcm5lciA9IHhGUkNDb3JuZXIueTtcXG4gICAgICAgIGludCB4Q0Nvcm5lciA9IHhGUkNDb3JuZXIuejtcXG5cXG4gICAgICAgIC8vIENvbnZvbHZlIHgoPywgPywgPywgZDEpIHdpdGggdyg6LCA6LCA6LCBkMSwgZDIpIHRvIGdldFxcbiAgICAgICAgLy8geSh5RiwgeVIsIHlDLCBkMikuID8gPSB0byBiZSBkZXRlcm1pbmVkLiA6ID0gYWNyb3NzIGFsbFxcbiAgICAgICAgLy8gdmFsdWVzIGluIHRoYXQgYXhpcy5cXG4gICAgICAgIGZsb2F0IGRvdFByb2QgPSAwLjA7XFxuICAgICAgICBmb3IgKGludCB3RiA9IDA7IHdGIDwgXCIrbCtcIjsgd0YrKykge1xcbiAgICAgICAgICBpbnQgeEYgPSB4RkNvcm5lciArIHdGICogXCIrcytcIjtcXG5cXG4gICAgICAgICAgaWYgKHhGIDwgMCB8fCB4RiA+PSBcIit0LmluRGVwdGgrXCIpIHtcXG4gICAgICAgICAgICBjb250aW51ZTtcXG4gICAgICAgICAgfVxcblxcbiAgICAgICAgICBmb3IgKGludCB3UiA9IDA7IHdSIDwgXCIraCtcIjsgd1IrKykge1xcbiAgICAgICAgICAgIGludCB4UiA9IHhSQ29ybmVyICsgd1IgKiBcIit1K1wiO1xcblxcbiAgICAgICAgICAgIGlmICh4UiA8IDAgfHwgeFIgPj0gXCIrdC5pbkhlaWdodCtcIikge1xcbiAgICAgICAgICAgICAgY29udGludWU7XFxuICAgICAgICAgICAgfVxcblxcbiAgICAgICAgICAgIGZvciAoaW50IHdDID0gMDsgd0MgPCBcIitmK1wiOyB3QysrKSB7XFxuICAgICAgICAgICAgICBpbnQgeEMgPSB4Q0Nvcm5lciArIHdDICogXCIrYytcIjtcXG5cXG4gICAgICAgICAgICAgIGlmICh4QyA8IDAgfHwgeEMgPj0gXCIrdC5pbldpZHRoK1wiKSB7XFxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xcbiAgICAgICAgICAgICAgfVxcblxcbiAgICAgICAgICAgICAgZm9yIChpbnQgZDEgPSAwOyBkMSA8IFwiK2QrXCI7IGQxICs9IDQpIHtcXG4gICAgICAgICAgICAgICAgdmVjNCB4VmFsdWVzID0gdmVjNChcXG4gICAgICAgICAgICAgICAgICBnZXRYKGJhdGNoLCB4RiwgeFIsIHhDLCBkMSksXFxuICAgICAgICAgICAgICAgICAgZ2V0WChiYXRjaCwgeEYsIHhSLCB4QywgZDEgKyAxKSxcXG4gICAgICAgICAgICAgICAgICBnZXRYKGJhdGNoLCB4RiwgeFIsIHhDLCBkMSArIDIpLFxcbiAgICAgICAgICAgICAgICAgIGdldFgoYmF0Y2gsIHhGLCB4UiwgeEMsIGQxICsgMylcXG4gICAgICAgICAgICAgICAgKTtcXG4gICAgICAgICAgICAgICAgdmVjNCB3VmFsdWVzID0gdmVjNChcXG4gICAgICAgICAgICAgICAgICBnZXRXKHdGLCB3Uiwgd0MsIGQxLCBkMiksXFxuICAgICAgICAgICAgICAgICAgZ2V0Vyh3Riwgd1IsIHdDLCBkMSArIDEsIGQyKSxcXG4gICAgICAgICAgICAgICAgICBnZXRXKHdGLCB3Uiwgd0MsIGQxICsgMiwgZDIpLFxcbiAgICAgICAgICAgICAgICAgIGdldFcod0YsIHdSLCB3QywgZDEgKyAzLCBkMilcXG4gICAgICAgICAgICAgICAgKTtcXG5cXG4gICAgICAgICAgICAgICAgZG90UHJvZCArPSBkb3QoeFZhbHVlcywgd1ZhbHVlcyk7XFxuICAgICAgICAgICAgICB9XFxuXFxuICAgICAgICAgICAgICBpZiAoXCIrKDE9PT1wKStcIikge1xcbiAgICAgICAgICAgICAgICBkb3RQcm9kICs9XFxuICAgICAgICAgICAgICAgICAgZ2V0WChiYXRjaCwgeEYsIHhSLCB4QywgXCIrZCtcIikgKlxcbiAgICAgICAgICAgICAgICAgIGdldFcod0YsIHdSLCB3QywgXCIrZCtcIiwgZDIpO1xcbiAgICAgICAgICAgICAgfSBlbHNlIGlmIChcIisoMj09PXApK1wiKSB7XFxuICAgICAgICAgICAgICAgIHZlYzIgeFZhbHVlcyA9IHZlYzIoXFxuICAgICAgICAgICAgICAgICAgZ2V0WChiYXRjaCwgeEYsIHhSLCB4QywgXCIrZCtcIiksXFxuICAgICAgICAgICAgICAgICAgZ2V0WChiYXRjaCwgeEYsIHhSLCB4QywgXCIrZCtcIiArIDEpXFxuICAgICAgICAgICAgICAgICk7XFxuICAgICAgICAgICAgICAgIHZlYzIgd1ZhbHVlcyA9IHZlYzIoXFxuICAgICAgICAgICAgICAgICAgZ2V0Vyh3Riwgd1IsIHdDLCBcIitkK1wiLCBkMiksXFxuICAgICAgICAgICAgICAgICAgZ2V0Vyh3Riwgd1IsIHdDLCBcIitkK1wiICsgMSwgZDIpXFxuICAgICAgICAgICAgICAgICk7XFxuICAgICAgICAgICAgICAgIGRvdFByb2QgKz0gZG90KHhWYWx1ZXMsIHdWYWx1ZXMpO1xcbiAgICAgICAgICAgICAgfSBlbHNlIGlmIChcIisoMz09PXApK1wiKSB7XFxuICAgICAgICAgICAgICAgIHZlYzMgeFZhbHVlcyA9IHZlYzMoXFxuICAgICAgICAgICAgICAgICAgZ2V0WChiYXRjaCwgeEYsIHhSLCB4QywgXCIrZCtcIiksXFxuICAgICAgICAgICAgICAgICAgZ2V0WChiYXRjaCwgeEYsIHhSLCB4QywgXCIrZCtcIiArIDEpLFxcbiAgICAgICAgICAgICAgICAgIGdldFgoYmF0Y2gsIHhGLCB4UiwgeEMsIFwiK2QrXCIgKyAyKVxcbiAgICAgICAgICAgICAgICApO1xcbiAgICAgICAgICAgICAgICB2ZWMzIHdWYWx1ZXMgPSB2ZWMzKFxcbiAgICAgICAgICAgICAgICAgIGdldFcod0YsIHdSLCB3QywgXCIrZCtcIiwgZDIpLFxcbiAgICAgICAgICAgICAgICAgIGdldFcod0YsIHdSLCB3QywgXCIrZCtcIiArIDEsIGQyKSxcXG4gICAgICAgICAgICAgICAgICBnZXRXKHdGLCB3Uiwgd0MsIFwiK2QrXCIgKyAyLCBkMilcXG4gICAgICAgICAgICAgICAgKTtcXG4gICAgICAgICAgICAgICAgZG90UHJvZCArPSBkb3QoeFZhbHVlcywgd1ZhbHVlcyk7XFxuICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgICB9XFxuICAgICAgICB9XFxuICAgICAgICBzZXRPdXRwdXQoZG90UHJvZCk7XFxuICAgICAgfVxcbiAgICBcIn0sWmE9ZnVuY3Rpb24odCxlLG4scil7dm9pZCAwPT09ZSYmKGU9ITEpLHZvaWQgMD09PW4mJihuPW51bGwpLHZvaWQgMD09PXImJihyPSExKSx0aGlzLnZhcmlhYmxlTmFtZXM9W1wieFwiLFwiV1wiXSx0aGlzLm91dHB1dFNoYXBlPXQub3V0U2hhcGU7dmFyIG89dC5pbkhlaWdodCxhPXQuaW5XaWR0aCxpPXQucGFkSW5mby50b3Ascz10LnBhZEluZm8ubGVmdCx1PXQuc3RyaWRlSGVpZ2h0LGM9dC5zdHJpZGVXaWR0aCxsPXQuZGlsYXRpb25IZWlnaHQsaD10LmRpbGF0aW9uV2lkdGgsZj10LmZpbHRlckhlaWdodCxkPXQuZmlsdGVyV2lkdGgscD10Lm91dENoYW5uZWxzL3QuaW5DaGFubmVscyx2PVwiXCIsbT1cIlwiO24mJih2PXI/XCJmbG9hdCBhY3RpdmF0aW9uKGZsb2F0IGEpIHtcXG4gICAgICAgICAgZmxvYXQgYiA9IGdldFByZWx1QWN0aXZhdGlvbldlaWdodHNBdE91dENvb3JkcygpO1xcbiAgICAgICAgICBcIituK1wiXFxuICAgICAgICB9XCI6XCJcXG4gICAgICAgICAgZmxvYXQgYWN0aXZhdGlvbihmbG9hdCB4KSB7XFxuICAgICAgICAgICAgXCIrbitcIlxcbiAgICAgICAgICB9XFxuICAgICAgICBcIixtPVwicmVzdWx0ID0gYWN0aXZhdGlvbihyZXN1bHQpO1wiKTt2YXIgZz1lP1wicmVzdWx0ICs9IGdldEJpYXNBdE91dENvb3JkcygpO1wiOlwiXCI7ZSYmdGhpcy52YXJpYWJsZU5hbWVzLnB1c2goXCJiaWFzXCIpLHImJnRoaXMudmFyaWFibGVOYW1lcy5wdXNoKFwicHJlbHVBY3RpdmF0aW9uV2VpZ2h0c1wiKSx0aGlzLnVzZXJDb2RlPVwiXFxuICAgICAgXCIrditcIlxcblxcbiAgICAgIGNvbnN0IGl2ZWMyIHN0cmlkZXMgPSBpdmVjMihcIit1K1wiLCBcIitjK1wiKTtcXG4gICAgICBjb25zdCBpdmVjMiBwYWRzID0gaXZlYzIoXCIraStcIiwgXCIrcytcIik7XFxuXFxuICAgICAgdm9pZCBtYWluKCkge1xcbiAgICAgICAgaXZlYzQgY29vcmRzID0gZ2V0T3V0cHV0Q29vcmRzKCk7XFxuICAgICAgICBpbnQgYmF0Y2ggPSBjb29yZHMueDtcXG4gICAgICAgIGl2ZWMyIHhSQ0Nvcm5lciA9IGNvb3Jkcy55eiAqIHN0cmlkZXMgLSBwYWRzO1xcbiAgICAgICAgaW50IGQyID0gY29vcmRzLnc7XFxuICAgICAgICBpbnQgZDEgPSBkMiAvIFwiK3ArXCI7XFxuICAgICAgICBpbnQgcSA9IGQyIC0gZDEgKiBcIitwK1wiO1xcblxcbiAgICAgICAgaW50IHhSQ29ybmVyID0geFJDQ29ybmVyLng7XFxuICAgICAgICBpbnQgeENDb3JuZXIgPSB4UkNDb3JuZXIueTtcXG5cXG4gICAgICAgIC8vIENvbnZvbHZlIHgoPywgPywgZDEpIHdpdGggdyg6LCA6LCBkMSwgcSkgdG8gZ2V0IHkoeVIsIHlDLCBkMikuXFxuICAgICAgICAvLyA/ID0gdG8gYmUgZGV0ZXJtaW5lZC4gOiA9IGFjcm9zcyBhbGwgdmFsdWVzIGluIHRoYXQgYXhpcy5cXG4gICAgICAgIGZsb2F0IGRvdFByb2QgPSAwLjA7XFxuICAgICAgICAvLyBUTyBETyhkc21pbGtvdik6IEZsYXR0ZW4gdGhlIHR3byBmb3IgbG9vcHMgYW5kIHZlYzQgdGhlIG9wZXJhdGlvbnMuXFxuICAgICAgICBmb3IgKGludCB3UiA9IDA7IHdSIDwgXCIrZitcIjsgd1IrKykge1xcbiAgICAgICAgICBpbnQgeFIgPSB4UkNvcm5lciArIHdSICogXCIrbCtcIjtcXG5cXG4gICAgICAgICAgaWYgKHhSIDwgMCB8fCB4UiA+PSBcIitvK1wiKSB7XFxuICAgICAgICAgICAgY29udGludWU7XFxuICAgICAgICAgIH1cXG5cXG4gICAgICAgICAgZm9yIChpbnQgd0MgPSAwOyB3QyA8IFwiK2QrXCI7IHdDKyspIHtcXG4gICAgICAgICAgICBpbnQgeEMgPSB4Q0Nvcm5lciArIHdDICogXCIraCtcIjtcXG5cXG4gICAgICAgICAgICBpZiAoeEMgPCAwIHx8IHhDID49IFwiK2ErXCIpIHtcXG4gICAgICAgICAgICAgIGNvbnRpbnVlO1xcbiAgICAgICAgICAgIH1cXG5cXG4gICAgICAgICAgICBmbG9hdCB4VmFsID0gZ2V0WChiYXRjaCwgeFIsIHhDLCBkMSk7XFxuICAgICAgICAgICAgZmxvYXQgd1ZhbCA9IGdldFcod1IsIHdDLCBkMSwgcSk7XFxuICAgICAgICAgICAgZG90UHJvZCArPSB4VmFsICogd1ZhbDtcXG4gICAgICAgICAgfVxcbiAgICAgICAgfVxcblxcbiAgICAgICAgZmxvYXQgcmVzdWx0ID0gZG90UHJvZDtcXG4gICAgICAgIFwiK2crXCJcXG4gICAgICAgIFwiK20rXCJcXG4gICAgICAgIHNldE91dHB1dChyZXN1bHQpO1xcbiAgICAgIH1cXG4gICAgXCJ9LHRpPWZ1bmN0aW9uKHQsZSxuLHIpe3ZvaWQgMD09PWUmJihlPSExKSx2b2lkIDA9PT1uJiYobj1udWxsKSx2b2lkIDA9PT1yJiYocj0hMSksdGhpcy52YXJpYWJsZU5hbWVzPVtcInhcIixcIldcIl0sdGhpcy5wYWNrZWRJbnB1dHM9ITAsdGhpcy5wYWNrZWRPdXRwdXQ9ITAsdGhpcy5vdXRwdXRTaGFwZT10Lm91dFNoYXBlO2Zvcih2YXIgbz10LmluSGVpZ2h0LGE9dC5pbldpZHRoLGk9dC5wYWRJbmZvLnRvcCxzPXQucGFkSW5mby5sZWZ0LHU9dC5zdHJpZGVIZWlnaHQsYz10LnN0cmlkZVdpZHRoLGw9dC5kaWxhdGlvbkhlaWdodCxoPXQuZGlsYXRpb25XaWR0aCxmPXQuZmlsdGVySGVpZ2h0LGQ9dC5maWx0ZXJXaWR0aCxwPWQsdj1cImludCB4UjsgaW50IHhDOyBpbnQgeENPZmZzZXQ7XCIsbT0wO208ZjttKyspZm9yKHZhciBnPTA7ZzxkO2crKyl2Kz1cIlxcbiAgICAgICAgICB2ZWM0IHhUZXhlbFJcIittK1wiQ1wiKzIqZytcIiA9IHZlYzQoMC4pO1xcbiAgICAgICAgICB2ZWM0IHdSXCIrbStcIkNcIitnK1wiID0gdmVjNCgwLik7XFxuICAgICAgICAgIHZlYzQgeFJcIittK1wiQ1wiK2crXCIgPSB2ZWM0KDAuKTtcIjtmb3IobT0wO208ZjttKyspZm9yKHZhciB5PTA7eTxwO3krKyl7aWYodis9XCJcXG4gICAgICAgICAgeFIgPSB4UkNvcm5lciArIFwiK20qbCtcIjtcXG4gICAgICAgICAgeEMgPSB4Q0Nvcm5lciArIFwiKyhnPTIqeSkqaCtcIjtcXG4gICAgICAgIFwiLDE9PT1jKXtpZihnPGQmJih2Kz1zJTI9PTE/XCJcXG4gICAgICAgICAgICAgICAgeENPZmZzZXQgPSB4QyArIDE7XFxuICAgICAgICAgICAgICAgIGlmKHhSID49IDAgJiYgeFIgPCBcIitvK1wiICYmIHhDT2Zmc2V0ID49IDAgJiYgeENPZmZzZXQgPCBcIithK1wiKSB7XFxuICAgICAgICAgICAgICAgICAgeFRleGVsUlwiK20rXCJDXCIrZytcIiA9IGdldFgoYmF0Y2gsIHhSLCB4Q09mZnNldCwgZDEpO1xcblxcbiAgICAgICAgICAgICAgICAgIC8vIE5lZWQgdG8gbWFudWFsbHkgY2xlYXIgdW51c2VkIGNoYW5uZWxzIGluIGNhc2VcXG4gICAgICAgICAgICAgICAgICAvLyB3ZSdyZSByZWFkaW5nIGZyb20gcmVjeWNsZWQgdGV4dHVyZS5cXG4gICAgICAgICAgICAgICAgICBpZih4Q09mZnNldCArIDEgPj0gXCIrYStcIikge1xcbiAgICAgICAgICAgICAgICAgICAgeFRleGVsUlwiK20rXCJDXCIrZytcIi56dyA9IHZlYzIoMC4pO1xcbiAgICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcXG4gICAgICAgICAgICAgICAgICB4VGV4ZWxSXCIrbStcIkNcIitnK1wiID0gdmVjNCgwLik7XFxuICAgICAgICAgICAgICAgIH1cXG5cXG4gICAgICAgICAgICAgICAgeENPZmZzZXQgPSB4QyArIDEgLSAyO1xcbiAgICAgICAgICAgICAgICBpZih4UiA+PSAwICYmIHhSIDwgXCIrbytcIiAmJiB4Q09mZnNldCA+PSAwICYmIHhDT2Zmc2V0IDwgXCIrYStcIikge1xcbiAgICAgICAgICAgICAgICAgIHZlYzQgcHJldmlvdXMgPSBnZXRYKGJhdGNoLCB4UiwgeENPZmZzZXQsIGQxKTtcXG5cXG4gICAgICAgICAgICAgICAgICAvLyBOZWVkIHRvIG1hbnVhbGx5IGNsZWFyIHVudXNlZCBjaGFubmVscyBpbiBjYXNlXFxuICAgICAgICAgICAgICAgICAgLy8gd2UncmUgcmVhZGluZyBmcm9tIHJlY3ljbGVkIHRleHR1cmUuXFxuICAgICAgICAgICAgICAgICAgaWYoeENPZmZzZXQgKyAxID49IFwiK2ErXCIpIHtcXG4gICAgICAgICAgICAgICAgICAgIHByZXZpb3VzLnp3ID0gdmVjMigwLik7XFxuICAgICAgICAgICAgICAgICAgfVxcblxcbiAgICAgICAgICAgICAgICAgIHhSXCIrbStcIkNcIitnK1wiID0gdmVjNChwcmV2aW91cy56dywgeFRleGVsUlwiK20rXCJDXCIrZytcIi54eSk7XFxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XFxuICAgICAgICAgICAgICAgICAgeFJcIittK1wiQ1wiK2crXCIgPSB2ZWM0KDAsIDAsIHhUZXhlbFJcIittK1wiQ1wiK2crXCIueHkpO1xcbiAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICBcIjpcIlxcbiAgICAgICAgICAgICAgICBpZih4UiA+PSAwICYmIHhSIDwgXCIrbytcIiAmJiB4QyA+PSAwICYmIHhDIDwgXCIrYStcIikge1xcbiAgICAgICAgICAgICAgICAgIHhUZXhlbFJcIittK1wiQ1wiK2crXCIgPSBnZXRYKGJhdGNoLCB4UiwgeEMsIGQxKTtcXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcXG4gICAgICAgICAgICAgICAgICB4VGV4ZWxSXCIrbStcIkNcIitnK1wiID0gdmVjNCgwLik7XFxuICAgICAgICAgICAgICAgIH1cXG5cXG4gICAgICAgICAgICAgICAgeFJcIittK1wiQ1wiK2crXCIgPSB4VGV4ZWxSXCIrbStcIkNcIitnK1wiO1xcbiAgICAgICAgICAgICAgXCIsZysxPGQpKXt2YXIgeD1zJTI9PTA/YihoKTpoO2glMj09MCYmcyUyPT0xfHxoJTIhPTAmJnMlMiE9MT8odis9XCJcXG4gICAgICAgICAgICAgICAgICB4Q09mZnNldCA9IHhDICsgXCIrcyUyK1wiICsgXCIreCtcIjtcXG5cXG4gICAgICAgICAgICAgICAgICBpZih4UiA+PSAwICYmIHhSIDwgXCIrbytcIiAmJlxcbiAgICAgICAgICAgICAgICAgICAgeENPZmZzZXQgPj0gMCAmJiB4Q09mZnNldCA8IFwiK2ErXCIpIHtcXG4gICAgICAgICAgICAgICAgICAgIHhUZXhlbFJcIittK1wiQ1wiKyhnKzIpK1wiID0gZ2V0WChiYXRjaCwgeFIsIHhDT2Zmc2V0LCBkMSk7XFxuICAgICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgICAgICBcIixoPjEmJih2Kz1cIlxcbiAgICAgICAgICAgICAgICAgICAgeENPZmZzZXQgLT0gMjtcXG4gICAgICAgICAgICAgICAgICAgIGlmKHhSID49IDAgJiYgeFIgPCBcIitvK1wiICYmXFxuICAgICAgICAgICAgICAgICAgICAgIHhDT2Zmc2V0ID49IDAgJiYgeENPZmZzZXQgPCBcIithK1wiKSB7XFxuICAgICAgICAgICAgICAgICAgICAgIHhUZXhlbFJcIittK1wiQ1wiK2crXCIgPSBnZXRYKGJhdGNoLCB4UiwgeENPZmZzZXQsIGQxKTtcXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XFxuICAgICAgICAgICAgICAgICAgICAgIHhUZXhlbFJcIittK1wiQ1wiK2crXCIgPSB2ZWM0KDAuKTtcXG4gICAgICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICAgICAgICBcIiksdis9XCJcXG4gICAgICAgICAgICAgICAgICB4UlwiK20rXCJDXCIrKGcrMSkrXCIgPSB2ZWM0KFxcbiAgICAgICAgICAgICAgICAgICAgeFRleGVsUlwiK20rXCJDXCIrZytcIi56dywgeFRleGVsUlwiK20rXCJDXCIrKGcrMikrXCIueHkpO1xcbiAgICAgICAgICAgICAgICBcIik6dis9XCJcXG4gICAgICAgICAgICAgICAgICB4Q09mZnNldCA9IHhDICsgXCIreCtcIjtcXG5cXG4gICAgICAgICAgICAgICAgICBpZih4UiA+PSAwICYmIHhSIDwgXCIrbytcIiAmJlxcbiAgICAgICAgICAgICAgICAgICAgeENPZmZzZXQgPj0gMCAmJiB4Q09mZnNldCA8IFwiK2ErXCIpIHtcXG4gICAgICAgICAgICAgICAgICAgIHhUZXhlbFJcIittK1wiQ1wiKyhnKzIpK1wiID0gZ2V0WChiYXRjaCwgeFIsIHhDT2Zmc2V0LCBkMSk7XFxuICAgICAgICAgICAgICAgICAgfVxcblxcbiAgICAgICAgICAgICAgICAgIHhSXCIrbStcIkNcIisoZysxKStcIiA9IHhUZXhlbFJcIittK1wiQ1wiKyhnKzIpK1wiO1xcbiAgICAgICAgICAgICAgICBcIn19ZWxzZSBnPGQmJih2Kz1cIlxcbiAgICAgICAgICAgICAgaWYoeFIgPj0gMCAmJiB4UiA8IFwiK28rXCIpIHtcXG4gICAgICAgICAgICBcIixzJTI9PTE/KHYrPVwiXFxuICAgICAgICAgICAgICAgIHhDT2Zmc2V0ID0geEMgKyAxIC0gXCIrYytcIjtcXG4gICAgICAgICAgICAgICAgaWYoeENPZmZzZXQgPj0gMCAmJiB4Q09mZnNldCA8IFwiK2ErXCIpIHtcXG4gICAgICAgICAgICAgICAgICB4VGV4ZWxSXCIrbStcIkNcIitnK1wiID0gZ2V0WChiYXRjaCwgeFIsIHhDT2Zmc2V0LCBkMSk7XFxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XFxuICAgICAgICAgICAgICAgICAgeFRleGVsUlwiK20rXCJDXCIrZytcIiA9IHZlYzQoMC4pO1xcbiAgICAgICAgICAgICAgICB9XFxuXFxuICAgICAgICAgICAgICAgIGlmKHhDICsgMSA+PSAwICYmIHhDICsgMSA8IFwiK2ErXCIpIHtcXG4gICAgICAgICAgICAgICAgICB4VGV4ZWxSXCIrbStcIkNcIisoZysyKStcIiA9IGdldFgoYmF0Y2gsIHhSLCB4QyArIDEsIGQxKTtcXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcXG4gICAgICAgICAgICAgICAgICB4VGV4ZWxSXCIrbStcIkNcIisoZysyKStcIiA9IHZlYzQoMC4pO1xcbiAgICAgICAgICAgICAgICB9XFxuXFxuICAgICAgICAgICAgICAgIHhSXCIrbStcIkNcIitnK1wiID0gdmVjNChcXG4gICAgICAgICAgICAgICAgICB4VGV4ZWxSXCIrbStcIkNcIitnK1wiLnp3LCB4VGV4ZWxSXCIrbStcIkNcIisoZysyKStcIi56dyk7XFxuICAgICAgICAgICAgICBcIixnKzE8ZCYmKHYrPVwiXFxuICAgICAgICAgICAgICAgICAgdmVjNCBmaW5hbCA9IHZlYzQoMC4pO1xcbiAgICAgICAgICAgICAgICAgIHhDT2Zmc2V0ID0geEMgKyAxICsgXCIrYytcIjtcXG4gICAgICAgICAgICAgICAgICBpZih4Q09mZnNldCA+PSAwICYmIHhDT2Zmc2V0IDwgXCIrYStcIikge1xcbiAgICAgICAgICAgICAgICAgICAgZmluYWwgPSBnZXRYKGJhdGNoLCB4UiwgeENPZmZzZXQsIGQxKTtcXG4gICAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICAgICAgeFJcIittK1wiQ1wiKyhnKzEpK1wiID0gdmVjNCh4VGV4ZWxSXCIrbStcIkNcIisoZysyKStcIi54eSwgZmluYWwueHkpO1xcbiAgICAgICAgICAgICAgICBcIikpOih2Kz1cIlxcbiAgICAgICAgICAgICAgICBpZih4QyA+PSAwICYmIHhDIDwgXCIrYStcIikge1xcbiAgICAgICAgICAgICAgICAgIHhUZXhlbFJcIittK1wiQ1wiK2crXCIgPSBnZXRYKGJhdGNoLCB4UiwgeEMsIGQxKTtcXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcXG4gICAgICAgICAgICAgICAgICB4VGV4ZWxSXCIrbStcIkNcIitnK1wiID0gdmVjNCgwLik7XFxuICAgICAgICAgICAgICAgIH1cXG5cXG4gICAgICAgICAgICAgICAgeENPZmZzZXQgPSB4QyArIFwiK2MrXCI7XFxuICAgICAgICAgICAgICAgIGlmKHhDT2Zmc2V0ID49IDAgJiYgeENPZmZzZXQgPCBcIithK1wiKSB7XFxuICAgICAgICAgICAgICAgICAgeFRleGVsUlwiK20rXCJDXCIrKGcrMikrXCIgPSBnZXRYKGJhdGNoLCB4UiwgeENPZmZzZXQsIGQxKTtcXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcXG4gICAgICAgICAgICAgICAgICB4VGV4ZWxSXCIrbStcIkNcIisoZysyKStcIiA9IHZlYzQoMC4pO1xcbiAgICAgICAgICAgICAgICB9XFxuXFxuICAgICAgICAgICAgICAgIHhSXCIrbStcIkNcIitnK1wiID0gdmVjNChcXG4gICAgICAgICAgICAgICAgICB4VGV4ZWxSXCIrbStcIkNcIitnK1wiLnh5LCB4VGV4ZWxSXCIrbStcIkNcIisoZysyKStcIi54eSk7XFxuICAgICAgICAgICAgICBcIixnKzE8ZCYmKHYrPVwiXFxuICAgICAgICAgICAgICAgICAgeFJcIittK1wiQ1wiKyhnKzEpK1wiID0gdmVjNChcXG4gICAgICAgICAgICAgICAgICAgIHhUZXhlbFJcIittK1wiQ1wiK2crXCIuencsIHhUZXhlbFJcIittK1wiQ1wiKyhnKzIpK1wiLnp3KTtcXG4gICAgICAgICAgICAgICAgXCIpKSx2Kz1cIn1cIik7ZzxkJiYodis9XCJcXG4gICAgICAgICAgICB2ZWM0IHdUZXhlbFJcIittK1wiQ1wiK2crXCIgPSBnZXRXKFwiK20rXCIsIFwiK2crXCIsIGQxLCBxKTtcXG4gICAgICAgICAgICB3UlwiK20rXCJDXCIrZytcIiA9IHZlYzQod1RleGVsUlwiK20rXCJDXCIrZytcIi54eiwgd1RleGVsUlwiK20rXCJDXCIrZytcIi54eik7XFxuICAgICAgICAgIFwiLGcrMTxkJiYodis9XCJcXG4gICAgICAgICAgICAgIHZlYzQgd1RleGVsUlwiK20rXCJDXCIrKGcrMSkrXCIgPSBnZXRXKFwiK20rXCIsIFwiKyhnKzEpK1wiLCBkMSwgcSk7XFxuICAgICAgICAgICAgICB3UlwiK20rXCJDXCIrKGcrMSkrXCIgPVxcbiAgICAgICAgICAgICAgICB2ZWM0KHdUZXhlbFJcIittK1wiQ1wiKyhnKzEpK1wiLnh6LCB3VGV4ZWxSXCIrbStcIkNcIisoZysxKStcIi54eik7XCIpKX1mb3IobT0wO208ZjttKyspZm9yKGc9MDtnPGQ7ZysrKXYrPVwiZG90UHJvZCArPSB4UlwiK20rXCJDXCIrZytcIiAqIHdSXCIrbStcIkNcIitnK1wiO1wiO3ZhciB3PVwiXCIsQz1cIlwiO24mJih3PXI/XCJ2ZWM0IGFjdGl2YXRpb24odmVjNCBhKSB7XFxuICAgICAgICAgIHZlYzQgYiA9IGdldFByZWx1QWN0aXZhdGlvbldlaWdodHNBdE91dENvb3JkcygpO1xcbiAgICAgICAgICBcIituK1wiXFxuICAgICAgICB9XCI6XCJ2ZWM0IGFjdGl2YXRpb24odmVjNCB4KSB7XFxuICAgICAgICAgIFwiK24rXCJcXG4gICAgICAgIH1cIixDPVwicmVzdWx0ID0gYWN0aXZhdGlvbihyZXN1bHQpO1wiKTt2YXIgRT1lP1wicmVzdWx0ICs9IGdldEJpYXNBdE91dENvb3JkcygpO1wiOlwiXCI7ZSYmdGhpcy52YXJpYWJsZU5hbWVzLnB1c2goXCJiaWFzXCIpLHImJnRoaXMudmFyaWFibGVOYW1lcy5wdXNoKFwicHJlbHVBY3RpdmF0aW9uV2VpZ2h0c1wiKSx0aGlzLnVzZXJDb2RlPVwiXFxuICAgICAgXCIrdytcIlxcblxcbiAgICAgIGNvbnN0IGl2ZWMyIHN0cmlkZXMgPSBpdmVjMihcIit1K1wiLCBcIitjK1wiKTtcXG4gICAgICBjb25zdCBpdmVjMiBwYWRzID0gaXZlYzIoXCIraStcIiwgXCIrcytcIik7XFxuXFxuICAgICAgdm9pZCBtYWluKCkge1xcblxcbiAgICAgICAgaXZlYzQgY29vcmRzID0gZ2V0T3V0cHV0Q29vcmRzKCk7XFxuICAgICAgICBpbnQgYmF0Y2ggPSBjb29yZHMueDtcXG4gICAgICAgIGl2ZWMyIHhSQ0Nvcm5lciA9IGNvb3Jkcy55eiAqIHN0cmlkZXMgLSBwYWRzO1xcbiAgICAgICAgaW50IGQyID0gY29vcmRzLnc7XFxuICAgICAgICBpbnQgZDEgPSBkMjtcXG4gICAgICAgIGludCBxID0gMDtcXG4gICAgICAgIGludCB4UkNvcm5lciA9IHhSQ0Nvcm5lci54O1xcbiAgICAgICAgaW50IHhDQ29ybmVyID0geFJDQ29ybmVyLnk7XFxuXFxuICAgICAgICB2ZWM0IGRvdFByb2QgPSB2ZWM0KDAuKTtcXG5cXG4gICAgICAgIFwiK3YrXCJcXG5cXG4gICAgICAgIHZlYzQgcmVzdWx0ID0gZG90UHJvZDtcXG4gICAgICAgIFwiK0UrXCJcXG4gICAgICAgIFwiK0MrXCJcXG4gICAgICAgIHNldE91dHB1dChyZXN1bHQpO1xcbiAgICAgIH1cXG4gICAgXCJ9LGVpPWZ1bmN0aW9uKHQsZSxuLHIsbyl7dGhpcy52YXJpYWJsZU5hbWVzPVtcIkltYWdlXCIsXCJCb3hlc1wiLFwiQm94SW5kXCJdLHRoaXMub3V0cHV0U2hhcGU9W107dmFyIGE9dFswXSxpPXRbMV0scz10WzJdLHU9dFszXSxjPWVbMF0sbD1uWzBdLGg9blsxXTt0aGlzLm91dHB1dFNoYXBlPVtjLGwsaCx1XTt2YXIgZj1cImJpbGluZWFyXCI9PT1yPzE6MCxkPVtpLTErXCIuMFwiLHMtMStcIi4wXCJdLHA9ZFswXSx2PWRbMV0sbT1sPjE/W1wiXCIrKGktMSkvKGwtMSksXCIoeTIteTEpICogaGVpZ2h0X3JhdGlvXCIsXCJ5MSpcIitwK1wiICsgZmxvYXQoeSkqKGhlaWdodF9zY2FsZSlcIl06W1wiMC4wXCIsXCIwLjBcIixcIjAuNSAqICh5MSt5MikgKiBcIitwXSxnPW1bMF0seT1tWzFdLHg9bVsyXSxiPWg+MT9bXCJcIisocy0xKS8oaC0xKSxcIih4Mi14MSkgKiB3aWR0aF9yYXRpb1wiLFwieDEqXCIrditcIiArIGZsb2F0KHgpKih3aWR0aF9zY2FsZSlcIl06W1wiMC4wXCIsXCIwLjBcIixcIjAuNSAqICh4MSt4MikgKiBcIit2XSx3PWJbMF0sQz1iWzFdLEU9YlsyXTt0aGlzLnVzZXJDb2RlPVwiXFxuICAgICAgY29uc3QgZmxvYXQgaGVpZ2h0X3JhdGlvID0gZmxvYXQoXCIrZytcIik7XFxuICAgICAgY29uc3QgZmxvYXQgd2lkdGhfcmF0aW8gPSBmbG9hdChcIit3K1wiKTtcXG4gICAgICB2b2lkIG1haW4oKSB7XFxuICAgICAgICBpdmVjNCBjb29yZHMgPSBnZXRPdXRwdXRDb29yZHMoKTtcXG4gICAgICAgIGludCBiID0gY29vcmRzWzBdO1xcbiAgICAgICAgaW50IHkgPSBjb29yZHNbMV07XFxuICAgICAgICBpbnQgeCA9IGNvb3Jkc1syXTtcXG4gICAgICAgIGludCBkID0gY29vcmRzWzNdO1xcblxcbiAgICAgICAgLy8gZ2V0IGJveCB2YWxzXFxuICAgICAgICBmbG9hdCB5MSA9IGdldEJveGVzKGIsMCk7XFxuICAgICAgICBmbG9hdCB4MSA9IGdldEJveGVzKGIsMSk7XFxuICAgICAgICBmbG9hdCB5MiA9IGdldEJveGVzKGIsMik7XFxuICAgICAgICBmbG9hdCB4MiA9IGdldEJveGVzKGIsMyk7XFxuXFxuICAgICAgICAvLyBnZXQgaW1hZ2UgaW4gYmF0Y2ggaW5kZXhcXG4gICAgICAgIGludCBiSW5kID0gcm91bmQoZ2V0Qm94SW5kKGIpKTtcXG4gICAgICAgIGlmKGJJbmQgPCAwIHx8IGJJbmQgPj0gXCIrYStcIikge1xcbiAgICAgICAgICByZXR1cm47XFxuICAgICAgICB9XFxuXFxuICAgICAgICBmbG9hdCBoZWlnaHRfc2NhbGUgPSBcIit5K1wiO1xcbiAgICAgICAgZmxvYXQgd2lkdGhfc2NhbGUgPSBcIitDK1wiO1xcblxcbiAgICAgICAgZmxvYXQgaW5feSA9IFwiK3grXCI7XFxuICAgICAgICBpZiggaW5feSA8IDAuMCB8fCBpbl95ID4gXCIrcCtcIiApIHtcXG4gICAgICAgICAgc2V0T3V0cHV0KGZsb2F0KFwiK28rXCIpKTtcXG4gICAgICAgICAgcmV0dXJuO1xcbiAgICAgICAgfVxcbiAgICAgICAgZmxvYXQgaW5feCA9IFwiK0UrXCI7XFxuICAgICAgICBpZiggaW5feCA8IDAuMCB8fCBpbl94ID4gXCIrditcIiApIHtcXG4gICAgICAgICAgc2V0T3V0cHV0KGZsb2F0KFwiK28rXCIpKTtcXG4gICAgICAgICAgcmV0dXJuO1xcbiAgICAgICAgfVxcblxcbiAgICAgICAgdmVjMiBzb3VyY2VGcmFjSW5kZXhDUiA9IHZlYzIoaW5feCxpbl95KTtcXG4gICAgICAgIGlmKFwiK2YrXCIgPT0gMSkge1xcbiAgICAgICAgICAvLyBDb21wdXRlIHRoZSBmb3VyIGludGVnZXIgaW5kaWNlcy5cXG4gICAgICAgICAgaXZlYzIgc291cmNlRmxvb3JDUiA9IGl2ZWMyKHNvdXJjZUZyYWNJbmRleENSKTtcXG4gICAgICAgICAgaXZlYzIgc291cmNlQ2VpbENSID0gaXZlYzIoY2VpbChzb3VyY2VGcmFjSW5kZXhDUikpO1xcblxcbiAgICAgICAgICBmbG9hdCB0b3BMZWZ0ID0gZ2V0SW1hZ2UoYiwgc291cmNlRmxvb3JDUi55LCBzb3VyY2VGbG9vckNSLngsIGQpO1xcbiAgICAgICAgICBmbG9hdCBib3R0b21MZWZ0ID0gZ2V0SW1hZ2UoYiwgc291cmNlQ2VpbENSLnksIHNvdXJjZUZsb29yQ1IueCwgZCk7XFxuICAgICAgICAgIGZsb2F0IHRvcFJpZ2h0ID0gZ2V0SW1hZ2UoYiwgc291cmNlRmxvb3JDUi55LCBzb3VyY2VDZWlsQ1IueCwgZCk7XFxuICAgICAgICAgIGZsb2F0IGJvdHRvbVJpZ2h0ID0gZ2V0SW1hZ2UoYiwgc291cmNlQ2VpbENSLnksIHNvdXJjZUNlaWxDUi54LCBkKTtcXG5cXG4gICAgICAgICAgdmVjMiBmcmFjQ1IgPSBzb3VyY2VGcmFjSW5kZXhDUiAtIHZlYzIoc291cmNlRmxvb3JDUik7XFxuXFxuICAgICAgICAgIGZsb2F0IHRvcCA9IHRvcExlZnQgKyAodG9wUmlnaHQgLSB0b3BMZWZ0KSAqIGZyYWNDUi54O1xcbiAgICAgICAgICBmbG9hdCBib3R0b20gPSBib3R0b21MZWZ0ICsgKGJvdHRvbVJpZ2h0IC0gYm90dG9tTGVmdCkgKiBmcmFjQ1IueDtcXG4gICAgICAgICAgZmxvYXQgbmV3VmFsdWUgPSB0b3AgKyAoYm90dG9tIC0gdG9wKSAqIGZyYWNDUi55O1xcbiAgICAgICAgICBzZXRPdXRwdXQobmV3VmFsdWUpO1xcbiAgICAgICAgfSBlbHNlIHtcXG4gICAgICAgICAgLy8gQ29tcHV0ZSB0aGUgY29vcmRpbmF0b3JzIG9mIG5lYXJlc3QgbmVpZ2hib3IgcG9pbnQuXFxuICAgICAgICAgIGl2ZWMyIHNvdXJjZU5lYXJlc3RDUiA9IGl2ZWMyKGZsb29yKFxcbiAgICAgICAgICAgIHNvdXJjZUZyYWNJbmRleENSICsgdmVjMigwLjUsMC41KSkpO1xcbiAgICAgICAgICBmbG9hdCBuZXdWYWx1ZSA9IGdldEltYWdlKGIsIHNvdXJjZU5lYXJlc3RDUi55LCBzb3VyY2VOZWFyZXN0Q1IueCwgZCk7XFxuICAgICAgICAgIHNldE91dHB1dChuZXdWYWx1ZSk7XFxuICAgICAgICB9XFxuICAgICAgfVxcbiAgICBcIn0sbmk9ZnVuY3Rpb24odCxlLG4pe3RoaXMudmFyaWFibGVOYW1lcz1bXCJ4XCJdLHRoaXMub3V0cHV0U2hhcGU9dDt2YXIgcj10Lmxlbmd0aCxvPXRbdC5sZW5ndGgtMV0sYT1uP1wiPFwiOlwiPlwiO3RoaXMudXNlckNvZGU9XCJcXG4gICAgICBpbnQgZ2V0SW5kZXgoaW50IGkpIHtcXG4gICAgICAgIFwiKyhuP1wicmV0dXJuIFwiK28rXCIgLWkgLSAxO1wiOlwicmV0dXJuIGk7XCIpK1wiXFxuICAgICAgfVxcblxcbiAgICAgIHZvaWQgbWFpbigpIHtcXG4gICAgICAgIFwiK3dhKHIpK1wiIGNvb3JkcyA9IGdldE91dHB1dENvb3JkcygpO1xcbiAgICAgICAgaW50IGVuZCA9IFwiK3JpKHIsXCJjb29yZHNcIikrXCI7XFxuICAgICAgICBmbG9hdCB2YWwgPSAwLjA7XFxuICAgICAgICBmb3IgKGludCBpID0gXCIrbytcIiAtIDE7IGkgPj0gMDsgaSAtPSAxKSB7XFxuICAgICAgICAgIGludCBpZHggPSBnZXRJbmRleChpKTtcXG4gICAgICAgICAgaWYgKGlkeCBcIithK1wiIGVuZCkge1xcbiAgICAgICAgICAgIGNvbnRpbnVlO1xcbiAgICAgICAgICB9XFxuICAgICAgICAgIGlmIChpZHggPT0gZW5kICYmIFwiK2UrXCIpIHtcXG4gICAgICAgICAgICBjb250aW51ZTtcXG4gICAgICAgICAgfVxcbiAgICAgICAgICBcIityaShyLFwiY29vcmRzXCIpK1wiID0gaWR4O1xcbiAgICAgICAgICB2YWwgKz0gZ2V0WChcIitmdW5jdGlvbih0LGUpe2lmKDE9PT10KXJldHVyblwiXCIrZTtpZigyPT09dClyZXR1cm4gZStcIi54LCBcIitlK1wiLnlcIjtpZigzPT09dClyZXR1cm4gZStcIi54LCBcIitlK1wiLnksIFwiK2UrXCIuelwiO2lmKDQ9PT10KXJldHVybiBlK1wiLngsIFwiK2UrXCIueSwgXCIrZStcIi56LCBcIitlK1wiLndcIjt0aHJvdyBFcnJvcihcIkN1bXVsYXRpdmUgc3VtIGZvciByYW5rIFwiK3QrXCIgaXMgbm90IHlldCBzdXBwb3J0ZWRcIil9KHIsXCJjb29yZHNcIikrXCIpO1xcbiAgICAgICAgfVxcbiAgICAgICAgc2V0T3V0cHV0KHZhbCk7XFxuICAgICAgfVxcbiAgICBcIn07ZnVuY3Rpb24gcmkodCxlKXtpZigxPT09dClyZXR1cm5cIlwiK2U7aWYoMj09PXQpcmV0dXJuIGUrXCIueVwiO2lmKDM9PT10KXJldHVybiBlK1wiLnpcIjtpZig0PT09dClyZXR1cm4gZStcIi53XCI7dGhyb3cgRXJyb3IoXCJDdW11bGF0aXZlIHN1bSBmb3IgcmFuayBcIit0K1wiIGlzIG5vdCB5ZXQgc3VwcG9ydGVkXCIpfXZhciBvaT1mdW5jdGlvbih0KXt0aGlzLnZhcmlhYmxlTmFtZXM9W1wiQVwiXSx0aGlzLnBhY2tlZElucHV0cz0hMSx0aGlzLnBhY2tlZE91dHB1dD0hMCx0aGlzLm91dFBhY2tpbmdTY2hlbWU9VnQuREVOU0U7dmFyIGU9WXQodCksbj11YSgpO3RoaXMub3V0cHV0U2hhcGU9dCx0aGlzLnVzZXJDb2RlPVwiXFxuICAgICAgaXZlYzMgb3V0Q29vcmRzRnJvbUZsYXRJbmRleChpbnQgaW5kZXgpIHtcXG4gICAgICAgIFwiK2NhKFtcInJcIixcImNcIixcImRcIl0sdCkrXCJcXG4gICAgICAgIHJldHVybiBpdmVjMyhyLCBjLCBkKTtcXG4gICAgICB9XFxuXFxuICAgICAgdm9pZCBtYWluKCkge1xcbiAgICAgICAgaXZlYzIgcmVzVGV4UkMgPSBpdmVjMihyZXN1bHRVVi55eCAqXFxuICAgICAgICAgIHZlYzIoXCIrZVswXStcIiwgXCIrZVsxXStcIikpO1xcbiAgICAgICAgaW50IGluZGV4ID0gNCAqIChyZXNUZXhSQy54ICogXCIrZVsxXStcIiArIHJlc1RleFJDLnkpO1xcblxcbiAgICAgICAgdmVjNCByZXN1bHQgPSB2ZWM0KDAuKTtcXG5cXG4gICAgICAgIGZvciAoaW50IGk9MDsgaTw0OyBpKyspIHtcXG4gICAgICAgICAgaW50IGZsYXRJbmRleCA9IGluZGV4ICsgaTtcXG4gICAgICAgICAgaXZlYzMgcmMgPSBvdXRDb29yZHNGcm9tRmxhdEluZGV4KGZsYXRJbmRleCk7XFxuICAgICAgICAgIHJlc3VsdFtpXSA9IGdldEEocmMueCwgcmMueSwgcmMueik7XFxuICAgICAgICB9XFxuXFxuICAgICAgICBcIituLm91dHB1dCtcIiA9IHJlc3VsdDtcXG4gICAgICB9XFxuICAgIFwifSxhaT1mdW5jdGlvbih0KXt0aGlzLnZhcmlhYmxlTmFtZXM9W1wiQVwiXSx0aGlzLnBhY2tlZElucHV0cz0hMCx0aGlzLnBhY2tlZE91dHB1dD0hMCx0aGlzLm91dFBhY2tpbmdTY2hlbWU9VnQuREVOU0U7dmFyIGU9WXQodCksbj11YSgpO3RoaXMub3V0cHV0U2hhcGU9dCx0aGlzLnVzZXJDb2RlPVwiXFxuICAgICAgaXZlYzMgb3V0Q29vcmRzRnJvbUZsYXRJbmRleChpbnQgaW5kZXgpIHtcXG4gICAgICAgIFwiK2NhKFtcInJcIixcImNcIixcImRcIl0sdCkrXCJcXG4gICAgICAgIHJldHVybiBpdmVjMyhyLCBjLCBkKTtcXG4gICAgICB9XFxuXFxuICAgICAgdm9pZCBtYWluKCkge1xcbiAgICAgICAgaXZlYzIgcmVzVGV4UkMgPSBpdmVjMihyZXN1bHRVVi55eCAqXFxuICAgICAgICAgIHZlYzIoXCIrZVswXStcIiwgXCIrZVsxXStcIikpO1xcbiAgICAgICAgaW50IGluZGV4ID0gNCAqIChyZXNUZXhSQy54ICogXCIrZVsxXStcIiArIHJlc1RleFJDLnkpO1xcblxcbiAgICAgICAgdmVjNCByZXN1bHQgPSB2ZWM0KDAuKTtcXG5cXG4gICAgICAgIGZvciAoaW50IGk9MDsgaTw0OyBpKyspIHtcXG4gICAgICAgICAgaW50IGZsYXRJbmRleCA9IGluZGV4ICsgaTtcXG4gICAgICAgICAgaXZlYzMgcmMgPSBvdXRDb29yZHNGcm9tRmxhdEluZGV4KGZsYXRJbmRleCk7XFxuICAgICAgICAgIHJlc3VsdFtpXSA9IGdldENoYW5uZWwoZ2V0QShyYy54LCByYy55LCByYy56KSwgdmVjMihyYy55LCByYy56KSk7XFxuICAgICAgICB9XFxuXFxuICAgICAgICBcIituLm91dHB1dCtcIiA9IHJlc3VsdDtcXG4gICAgICB9XFxuICAgIFwifSxpaT1mdW5jdGlvbigpe2Z1bmN0aW9uIHQodCxlLG4pe3RoaXMudmFyaWFibGVOYW1lcz1bXCJ4XCJdLHRoaXMub3V0cHV0U2hhcGU9W10sdGhpcy5vdXRwdXRTaGFwZT10LHRoaXMuYmxvY2tTaXplPWUsdGhpcy5kYXRhRm9ybWF0PW4sdGhpcy51c2VyQ29kZT1cIlxcbiAgICB2b2lkIG1haW4oKSB7XFxuICAgICAgaXZlYzQgY29vcmRzID0gZ2V0T3V0cHV0Q29vcmRzKCk7XFxuICAgICAgaW50IGIgPSBjb29yZHNbMF07XFxuICAgICAgaW50IGggPSBcIit0aGlzLmdldEhlaWdodENvb3JkU3RyaW5nKCkrXCI7XFxuICAgICAgaW50IHcgPSBcIit0aGlzLmdldFdpZHRoQ29vcmRTdHJpbmcoKStcIjtcXG4gICAgICBpbnQgZCA9IFwiK3RoaXMuZ2V0RGVwdGhDb29yZFN0cmluZygpK1wiO1xcblxcbiAgICAgIGludCBpbl9oID0gaCAvIFwiK2UrXCI7XFxuICAgICAgaW50IG9mZnNldF9oID0gaW1vZChoLCBcIitlK1wiKTtcXG4gICAgICBpbnQgaW5fdyA9IHcgLyBcIitlK1wiO1xcbiAgICAgIGludCBvZmZzZXRfdyA9IGltb2QodywgXCIrZStcIik7XFxuICAgICAgaW50IG9mZnNldF9kID0gKG9mZnNldF9oICogXCIrZStcIiArIG9mZnNldF93KSAqXFxuICAgICAgICBcIit0aGlzLmdldE91dHB1dERlcHRoU2l6ZSgpK1wiO1xcbiAgICAgIGludCBpbl9kID0gZCArIG9mZnNldF9kO1xcblxcbiAgICAgIGZsb2F0IHJlc3VsdCA9IFwiK3RoaXMuZ2V0SW5wdXRTYW1wbGluZ1N0cmluZygpK1wiO1xcbiAgICAgIHNldE91dHB1dChyZXN1bHQpO1xcbiAgICB9XFxuICBcIn1yZXR1cm4gdC5wcm90b3R5cGUuZ2V0SGVpZ2h0Q29vcmRTdHJpbmc9ZnVuY3Rpb24oKXtyZXR1cm5cIk5IV0NcIj09PXRoaXMuZGF0YUZvcm1hdD9cImNvb3Jkc1sxXVwiOlwiY29vcmRzWzJdXCJ9LHQucHJvdG90eXBlLmdldFdpZHRoQ29vcmRTdHJpbmc9ZnVuY3Rpb24oKXtyZXR1cm5cIk5IV0NcIj09PXRoaXMuZGF0YUZvcm1hdD9cImNvb3Jkc1syXVwiOlwiY29vcmRzWzNdXCJ9LHQucHJvdG90eXBlLmdldERlcHRoQ29vcmRTdHJpbmc9ZnVuY3Rpb24oKXtyZXR1cm5cIk5IV0NcIj09PXRoaXMuZGF0YUZvcm1hdD9cImNvb3Jkc1szXVwiOlwiY29vcmRzWzFdXCJ9LHQucHJvdG90eXBlLmdldE91dHB1dERlcHRoU2l6ZT1mdW5jdGlvbigpe3JldHVyblwiTkhXQ1wiPT09dGhpcy5kYXRhRm9ybWF0P3RoaXMub3V0cHV0U2hhcGVbM106dGhpcy5vdXRwdXRTaGFwZVsxXX0sdC5wcm90b3R5cGUuZ2V0SW5wdXRTYW1wbGluZ1N0cmluZz1mdW5jdGlvbigpe3JldHVyblwiTkhXQ1wiPT09dGhpcy5kYXRhRm9ybWF0P1wiZ2V0WChiLCBpbl9oLCBpbl93LCBpbl9kKVwiOlwiZ2V0WChiLCBpbl9kLCBpbl9oLCBpbl93KVwifSx0fSgpLHNpPWZ1bmN0aW9uKHQpe3RoaXMudmFyaWFibGVOYW1lcz1bXCJYXCJdLHRoaXMub3V0cHV0U2hhcGU9W3QsdF0sdGhpcy51c2VyQ29kZT1cIlxcbiAgICAgIHZvaWQgbWFpbigpIHtcXG4gICAgICAgICAgaXZlYzIgY29vcmRzID0gZ2V0T3V0cHV0Q29vcmRzKCk7XFxuICAgICAgICAgIGZsb2F0IHZhbCA9IGNvb3Jkc1swXSA9PSBjb29yZHNbMV0gPyBnZXRYKGNvb3Jkc1swXSkgOiAwLjA7XFxuICAgICAgICAgIHNldE91dHB1dCh2YWwpO1xcbiAgICAgIH1cXG4gICAgXCJ9LHVpPWZ1bmN0aW9uKHQpe3RoaXMudmFyaWFibGVOYW1lcz1bXCJBXCJdLHRoaXMub3V0VGV4VXNhZ2U9enQuRE9XTkxPQUQ7dmFyIGU9dWEoKTt0aGlzLm91dHB1dFNoYXBlPXQsdGhpcy51c2VyQ29kZT1cIlxcbiAgICAgIFwiK2hhK1wiXFxuXFxuICAgICAgdm9pZCBtYWluKCkge1xcbiAgICAgICAgZmxvYXQgeCA9IGdldEFBdE91dENvb3JkcygpO1xcbiAgICAgICAgXCIrZS5vdXRwdXQrXCIgPSBlbmNvZGVfZmxvYXQoeCk7XFxuICAgICAgfVxcbiAgICBcIn0sY2k9ZnVuY3Rpb24odCl7dGhpcy52YXJpYWJsZU5hbWVzPVtcIkFcIl0sdGhpcy5wYWNrZWRJbnB1dHM9ITAsdGhpcy5wYWNrZWRPdXRwdXQ9ITEsdGhpcy5vdXRUZXhVc2FnZT16dC5ET1dOTE9BRDt2YXIgZT11YSgpO3RoaXMub3V0cHV0U2hhcGU9dCx0aGlzLnVzZXJDb2RlPVwiXFxuICAgICAgXCIraGErXCJcXG5cXG4gICAgICB2b2lkIG1haW4oKSB7XFxuICAgICAgICBpdmVjMyBjb29yZHMgPSBnZXRPdXRwdXRDb29yZHMoKTtcXG4gICAgICAgIGZsb2F0IHggPSBnZXRDaGFubmVsKGdldEFBdE91dENvb3JkcygpLCB2ZWMyKGNvb3Jkcy55LCBjb29yZHMueikpO1xcbiAgICAgICAgXCIrZS5vdXRwdXQrXCIgPSBlbmNvZGVfZmxvYXQoeCk7XFxuICAgICAgfVxcbiAgICBcIn0sbGk9ZnVuY3Rpb24odCxlLG4pe3ZvaWQgMD09PW4mJihuPSExKSx0aGlzLnZhcmlhYmxlTmFtZXM9W1wiQVwiXTt2YXIgcj11YSgpLG89ZVswXSxhPWVbMV07dGhpcy5vdXRwdXRTaGFwZT10O3ZhciBpPVwicmVzdWx0XCI7biYmKGk9XCJmbG9vcihyZXN1bHQgKiAyNTUuICsgMC41KVwiKSx0aGlzLnVzZXJDb2RlPVwiXFxuICAgICAgXCIrbGEodCkrXCJcXG5cXG4gICAgICB2b2lkIG1haW4oKSB7XFxuICAgICAgICBpdmVjMyBjb29yZHMgPSBnZXRPdXRwdXRDb29yZHMoKTtcXG5cXG4gICAgICAgIGludCBmbGF0SW5kZXggPSBnZXRGbGF0SW5kZXgoY29vcmRzKTtcXG4gICAgICAgIGludCBvZmZzZXQgPSBpbW9kKGZsYXRJbmRleCwgNCk7XFxuXFxuICAgICAgICBmbGF0SW5kZXggPSBpZGl2KGZsYXRJbmRleCwgNCwgMS4pO1xcbiAgICAgICAgXFxuICAgICAgICBpbnQgciA9IGZsYXRJbmRleCAvIFwiK2ErXCI7XFxuICAgICAgICBpbnQgYyA9IGltb2QoZmxhdEluZGV4LCBcIithK1wiKTtcXG4gICAgICAgIHZlYzIgdXYgPSAodmVjMihjLCByKSArIGhhbGZDUikgLyB2ZWMyKFwiK2ErXCIuMCwgXCIrbytcIi4wKTtcXG4gICAgICAgIHZlYzQgdmFsdWVzID0gXCIrci50ZXh0dXJlMkQrXCIoQSwgdXYpO1xcblxcbiAgICAgICAgZmxvYXQgcmVzdWx0O1xcblxcbiAgICAgICAgaWYob2Zmc2V0ID09IDApIHtcXG4gICAgICAgICAgcmVzdWx0ID0gdmFsdWVzWzBdO1xcbiAgICAgICAgfSBlbHNlIGlmKG9mZnNldCA9PSAxKSB7XFxuICAgICAgICAgIHJlc3VsdCA9IHZhbHVlc1sxXTtcXG4gICAgICAgIH0gZWxzZSBpZihvZmZzZXQgPT0gMikge1xcbiAgICAgICAgICByZXN1bHQgPSB2YWx1ZXNbMl07XFxuICAgICAgICB9IGVsc2Uge1xcbiAgICAgICAgICByZXN1bHQgPSB2YWx1ZXNbM107XFxuICAgICAgICB9XFxuXFxuICAgICAgICBcIityLm91dHB1dCtcIiA9IHZlYzQoXCIraStcIiwgMC4sIDAuLCAwLik7XFxuICAgICAgfVxcbiAgICBcIn0saGk9ZnVuY3Rpb24odCxlLG4pe3ZvaWQgMD09PW4mJihuPSExKSx0aGlzLnZhcmlhYmxlTmFtZXM9W1wiQVwiXSx0aGlzLnBhY2tlZElucHV0cz0hMSx0aGlzLnBhY2tlZE91dHB1dD0hMDt2YXIgcj11YSgpLG89ZVswXSxhPWVbMV07dGhpcy5vdXRwdXRTaGFwZT10O3ZhciBpPVwiXCIscz1cInJlc3VsdFwiO24mJihzPVwiZmxvb3IocmVzdWx0ICogMjU1LiArIDAuNSlcIik7Zm9yKHZhciB1PTA7dTw9MTt1KyspZm9yKHZhciBjPTA7Yzw9MTtjKyspe3ZhciBsPTIqdStjO2krPVwiXFxuICAgICAgICAgIGxvY2FsQ29vcmRzID0gY29vcmRzO1xcbiAgICAgICAgICBpZihsb2NhbENvb3Jkc1syXSArIFwiK2MrXCIgPCBcIit0WzJdK1wiKSB7XFxuICAgICAgICAgICAgbG9jYWxDb29yZHNbMl0gKz0gXCIrYytcIjtcXG4gICAgICAgICAgICBpZihsb2NhbENvb3Jkc1sxXSArIFwiK3UrXCIgPCBcIit0WzFdK1wiKSB7XFxuICAgICAgICAgICAgICBsb2NhbENvb3Jkc1sxXSArPSBcIit1K1wiO1xcblxcbiAgICAgICAgICAgICAgZmxhdEluZGV4ID0gZ2V0RmxhdEluZGV4KGxvY2FsQ29vcmRzKTtcXG4gICAgICAgICAgICAgIG9mZnNldCA9IGltb2QoZmxhdEluZGV4LCA0KTtcXG5cXG4gICAgICAgICAgICAgIGZsYXRJbmRleCA9IGlkaXYoZmxhdEluZGV4LCA0LCAxLik7XFxuXFxuICAgICAgICAgICAgICByID0gZmxhdEluZGV4IC8gXCIrYStcIjtcXG4gICAgICAgICAgICAgIGMgPSBpbW9kKGZsYXRJbmRleCwgXCIrYStcIik7XFxuICAgICAgICAgICAgICB1diA9ICh2ZWMyKGMsIHIpICsgaGFsZkNSKSAvIHZlYzIoXCIrYStcIi4wLCBcIitvK1wiLjApO1xcbiAgICAgICAgICAgICAgdmFsdWVzID0gXCIrci50ZXh0dXJlMkQrXCIoQSwgdXYpO1xcblxcbiAgICAgICAgICAgICAgaWYob2Zmc2V0ID09IDApIHtcXG4gICAgICAgICAgICAgICAgcmVzdWx0W1wiK2wrXCJdID0gdmFsdWVzWzBdO1xcbiAgICAgICAgICAgICAgfSBlbHNlIGlmKG9mZnNldCA9PSAxKSB7XFxuICAgICAgICAgICAgICAgIHJlc3VsdFtcIitsK1wiXSA9IHZhbHVlc1sxXTtcXG4gICAgICAgICAgICAgIH0gZWxzZSBpZihvZmZzZXQgPT0gMikge1xcbiAgICAgICAgICAgICAgICByZXN1bHRbXCIrbCtcIl0gPSB2YWx1ZXNbMl07XFxuICAgICAgICAgICAgICB9IGVsc2Uge1xcbiAgICAgICAgICAgICAgICByZXN1bHRbXCIrbCtcIl0gPSB2YWx1ZXNbM107XFxuICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgICB9XFxuICAgICAgICBcIn10aGlzLnVzZXJDb2RlPVwiXFxuICAgICAgXCIrbGEodCkrXCJcXG5cXG4gICAgICB2b2lkIG1haW4oKSB7XFxuICAgICAgICBpdmVjMyBjb29yZHMgPSBnZXRPdXRwdXRDb29yZHMoKTtcXG5cXG4gICAgICAgIHZlYzQgcmVzdWx0ID0gdmVjNCgwLik7XFxuICAgICAgICBpbnQgZmxhdEluZGV4LCByLCBjLCBvZmZzZXQ7XFxuICAgICAgICBpdmVjMyBsb2NhbENvb3JkcztcXG4gICAgICAgIHZlYzIgdXY7XFxuICAgICAgICB2ZWM0IHZhbHVlcztcXG5cXG4gICAgICAgIFwiK2krXCJcXG5cXG4gICAgICAgIFwiK3Iub3V0cHV0K1wiID0gXCIrcytcIjtcXG4gICAgICB9XFxuICAgIFwifSxmaT1cInJldHVybiByZWFsICogZXhwUiAtIGltYWcgKiBleHBJO1wiLGRpPVwicmV0dXJuIHJlYWwgKiBleHBJICsgaW1hZyAqIGV4cFI7XCIscGk9ZnVuY3Rpb24odCxlLG4pe3RoaXMudmFyaWFibGVOYW1lcz1bXCJyZWFsXCIsXCJpbWFnXCJdO3ZhciByPWVbMV07dGhpcy5vdXRwdXRTaGFwZT1lO3ZhciBvPW4/XCIyLjAgKiBcIitNYXRoLlBJOlwiLTIuMCAqIFwiK01hdGguUEksYT1uP3IrXCIuMFwiOlwiMS4wXCI7dGhpcy51c2VyQ29kZT1cIlxcbiAgICAgIGNvbnN0IGZsb2F0IGV4cG9uZW50TXVsdGlwbGllciA9IFwiK28rXCI7XFxuXFxuICAgICAgZmxvYXQgdW5hcnlPcENvbXBsZXgoZmxvYXQgcmVhbCwgZmxvYXQgZXhwUiwgZmxvYXQgaW1hZywgZmxvYXQgZXhwSSkge1xcbiAgICAgICAgXCIrdCtcIlxcbiAgICAgIH1cXG5cXG4gICAgICBmbG9hdCBtdWxNYXRERlQoaW50IGJhdGNoLCBpbnQgaW5kZXgpIHtcXG4gICAgICAgIGZsb2F0IGluZGV4UmF0aW8gPSBmbG9hdChpbmRleCkgLyBmbG9hdChcIityK1wiKTtcXG4gICAgICAgIGZsb2F0IGV4cG9uZW50TXVsdGlwbGllclRpbWVzSW5kZXhSYXRpbyA9XFxuICAgICAgICAgICAgZXhwb25lbnRNdWx0aXBsaWVyICogaW5kZXhSYXRpbztcXG5cXG4gICAgICAgIGZsb2F0IHJlc3VsdCA9IDAuMDtcXG5cXG4gICAgICAgIGZvciAoaW50IGkgPSAwOyBpIDwgXCIrcitcIjsgaSsrKSB7XFxuICAgICAgICAgIC8vIHggPSAoLTJ8MiAqIFBJIC8gTikgKiBpbmRleCAqIGk7XFxuICAgICAgICAgIGZsb2F0IHggPSBleHBvbmVudE11bHRpcGxpZXJUaW1lc0luZGV4UmF0aW8gKiBmbG9hdChpKTtcXG4gICAgICAgICAgZmxvYXQgZXhwUiA9IGNvcyh4KTtcXG4gICAgICAgICAgZmxvYXQgZXhwSSA9IHNpbih4KTtcXG4gICAgICAgICAgZmxvYXQgcmVhbCA9IGdldFJlYWwoYmF0Y2gsIGkpO1xcbiAgICAgICAgICBmbG9hdCBpbWFnID0gZ2V0SW1hZyhiYXRjaCwgaSk7XFxuXFxuICAgICAgICAgIHJlc3VsdCArPVxcbiAgICAgICAgICAgICAgdW5hcnlPcENvbXBsZXgocmVhbCwgZXhwUiwgaW1hZywgZXhwSSkgLyBcIithK1wiO1xcbiAgICAgICAgfVxcblxcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcXG4gICAgICB9XFxuXFxuICAgICAgdm9pZCBtYWluKCkge1xcbiAgICAgICAgaXZlYzIgY29vcmRzID0gZ2V0T3V0cHV0Q29vcmRzKCk7XFxuICAgICAgICBzZXRPdXRwdXQobXVsTWF0REZUKGNvb3Jkc1swXSwgY29vcmRzWzFdKSk7XFxuICAgICAgfVxcbiAgICBcIn0sdmk9ZnVuY3Rpb24oKXtmdW5jdGlvbiB0KHQsZSl7dGhpcy5vdXRwdXRTaGFwZT1bXSx0aGlzLnZhcmlhYmxlTmFtZXM9W1wieFwiXSx0aGlzLm91dHB1dFNoYXBlPXQsdGhpcy51c2VyQ29kZT1cIlxcbiAgICAgIHVuaWZvcm0gZmxvYXQgdmFsdWU7XFxuICAgICAgdm9pZCBtYWluKCkge1xcbiAgICAgICAgLy8gSW5wdXQgY2FuIGJlIG9idGFpbmVkIGZyb20gdW5pZm9ybSB2YWx1ZS5cXG4gICAgICAgIHNldE91dHB1dCh2YWx1ZSk7XFxuICAgICAgfVxcbiAgICBcIn1yZXR1cm4gdC5wcm90b3R5cGUuZ2V0Q3VzdG9tU2V0dXBGdW5jPWZ1bmN0aW9uKHQpe3ZhciBlPXRoaXM7cmV0dXJuIGZ1bmN0aW9uKG4scil7bnVsbD09ZS52YWx1ZUxvYyYmKGUudmFsdWVMb2M9bi5nZXRVbmlmb3JtTG9jYXRpb25Ob1Rocm93KHIsXCJ2YWx1ZVwiKSksbi5nbC51bmlmb3JtMWYoZS52YWx1ZUxvYyx0KX19LHR9KCksbWk9ZnVuY3Rpb24odCxlLG4pe3RoaXMudmFyaWFibGVOYW1lcz1bXCJBXCIsXCJpbmRpY2VzXCJdO3ZhciByPXQuc2xpY2UoKTtyW25dPWUsdGhpcy5vdXRwdXRTaGFwZT1yLHRoaXMucmFuaz1yLmxlbmd0aDt2YXIgbz13YSh0aGlzLnJhbmspLGE9ZnVuY3Rpb24odCxlKXt2YXIgbj10Lmxlbmd0aDtpZihuPjQpdGhyb3cgRXJyb3IoXCJHYXRoZXIgZm9yIHJhbmsgXCIrbitcIiBpcyBub3QgeWV0IHN1cHBvcnRlZFwiKTtpZigxPT09bilyZXR1cm5cImludChnZXRJbmRpY2VzKHJlc1JDKSlcIjtmb3IodmFyIHI9W1wicmVzUkMueFwiLFwicmVzUkMueVwiLFwicmVzUkMuelwiLFwicmVzUkMud1wiXSxvPVtdLGE9MDthPHQubGVuZ3RoO2ErKylhPT09ZT9vLnB1c2goXCJpbnQoZ2V0SW5kaWNlcyhcIityW2FdK1wiKSlcIik6by5wdXNoKFwiXCIrclthXSk7cmV0dXJuIG8uam9pbigpfSh0LG4pO3RoaXMudXNlckNvZGU9XCJcXG4gICAgICB2b2lkIG1haW4oKSB7XFxuICAgICAgICBcIitvK1wiIHJlc1JDID0gZ2V0T3V0cHV0Q29vcmRzKCk7XFxuICAgICAgICBzZXRPdXRwdXQoZ2V0QShcIithK1wiKSk7XFxuICAgICAgfVxcbiAgICBcIn07dmFyIGdpPWZ1bmN0aW9uKHQsZSxuKXt0aGlzLnNsaWNlRGltPXQsdGhpcy5zdHJpZGVzPWUsdGhpcy52YXJpYWJsZU5hbWVzPVtcInhcIixcImluZGljZXNcIl0sdGhpcy5vdXRwdXRTaGFwZT1uO3ZhciByPXdhKGUubGVuZ3RoKSxvPXdhKG4ubGVuZ3RoKSxhPXRoaXMuc2xpY2VEaW0+MT9cInN0cmlkZXNbal1cIjpcInN0cmlkZXNcIjt0aGlzLnVzZXJDb2RlPVwiXFxuICAgICAgICBcIityK1wiIHN0cmlkZXMgPSBcIityK1wiKFwiK3RoaXMuc3RyaWRlcytcIik7XFxuICAgICAgICAgdm9pZCBtYWluKCkge1xcbiAgICAgICAgICBcIitvK1wiIGNvb3JkcyA9IGdldE91dHB1dENvb3JkcygpO1xcbiAgICAgICAgICBpbnQgZmxhdHRlbkluZGV4ID0gMDtcXG4gICAgICAgICAgZm9yIChpbnQgaiA9IDA7IGogPCBcIit0aGlzLnNsaWNlRGltK1wiOyBqKyspIHtcXG4gICAgICAgICAgICBpbnQgaW5kZXggPSByb3VuZChnZXRJbmRpY2VzKGNvb3Jkc1swXSwgaikpO1xcbiAgICAgICAgICAgIGZsYXR0ZW5JbmRleCArPSBpbmRleCAqIFwiK2ErXCI7XFxuICAgICAgICAgIH1cXG4gICAgICAgICAgc2V0T3V0cHV0KGdldFgoZmxhdHRlbkluZGV4LCBjb29yZHNbMV0pKTtcXG4gICAgICAgIH1cXG4gICAgICBcIn07ZnVuY3Rpb24geWkodCxlKXt2YXIgbj11YSgpO3JldHVybiBvZSh0LGUsbi52ZXJzaW9uK1wiXFxuICAgIHByZWNpc2lvbiBoaWdocCBmbG9hdDtcXG4gICAgXCIrbi5hdHRyaWJ1dGUrXCIgdmVjMyBjbGlwU3BhY2VQb3M7XFxuICAgIFwiK24uYXR0cmlidXRlK1wiIHZlYzIgdXY7XFxuICAgIFwiK24udmFyeWluZ1ZzK1wiIHZlYzIgcmVzdWx0VVY7XFxuXFxuICAgIHZvaWQgbWFpbigpIHtcXG4gICAgICBnbF9Qb3NpdGlvbiA9IHZlYzQoY2xpcFNwYWNlUG9zLCAxKTtcXG4gICAgICByZXN1bHRVViA9IHV2O1xcbiAgICB9XCIpfWZ1bmN0aW9uIHhpKHQsZSl7cmV0dXJuIGZlKHQsZSxuZXcgRmxvYXQzMkFycmF5KFstMSwxLDAsMCwxLC0xLC0xLDAsMCwwLDEsMSwwLDEsMSwxLC0xLDAsMSwwXSkpfWZ1bmN0aW9uIGJpKHQsZSl7cmV0dXJuIGRlKHQsZSxuZXcgVWludDE2QXJyYXkoWzAsMSwyLDIsMSwzXSkpfWZ1bmN0aW9uIHdpKHQsZSxuLHIsbyxhLGkpe3ZlKG4scik7dmFyIHM9cGUodCxlKSx1PXQuVEVYVFVSRV8yRDtyZXR1cm4gSnQodCxlLChmdW5jdGlvbigpe3JldHVybiB0LmJpbmRUZXh0dXJlKHUscyl9KSksSnQodCxlLChmdW5jdGlvbigpe3JldHVybiB0LnRleFBhcmFtZXRlcmkodSx0LlRFWFRVUkVfV1JBUF9TLHQuQ0xBTVBfVE9fRURHRSl9KSksSnQodCxlLChmdW5jdGlvbigpe3JldHVybiB0LnRleFBhcmFtZXRlcmkodSx0LlRFWFRVUkVfV1JBUF9ULHQuQ0xBTVBfVE9fRURHRSl9KSksSnQodCxlLChmdW5jdGlvbigpe3JldHVybiB0LnRleFBhcmFtZXRlcmkodSx0LlRFWFRVUkVfTUlOX0ZJTFRFUix0Lk5FQVJFU1QpfSkpLEp0KHQsZSwoZnVuY3Rpb24oKXtyZXR1cm4gdC50ZXhQYXJhbWV0ZXJpKHUsdC5URVhUVVJFX01BR19GSUxURVIsdC5ORUFSRVNUKX0pKSxKdCh0LGUsKGZ1bmN0aW9uKCl7cmV0dXJuIHQudGV4SW1hZ2UyRCh1LDAsbyxuLHIsMCxhLGksbnVsbCl9KSksSnQodCxlLChmdW5jdGlvbigpe3JldHVybiB0LmJpbmRUZXh0dXJlKHQuVEVYVFVSRV8yRCxudWxsKX0pKSxzfWZ1bmN0aW9uIENpKHQsZSxuLHIsbyl7dmFyIGE9WHQobixyKTtyZXR1cm4gd2kodCxlLGFbMF0sYVsxXSxvLmludGVybmFsRm9ybWF0RmxvYXQsby50ZXh0dXJlRm9ybWF0RmxvYXQsdC5GTE9BVCl9ZnVuY3Rpb24gRWkodCxlLG4scixvKXt2YXIgYT1YdChuLHIpO3JldHVybiB3aSh0LGUsYVswXSxhWzFdLG8uaW50ZXJuYWxGb3JtYXRIYWxmRmxvYXQsby50ZXh0dXJlRm9ybWF0RmxvYXQsby50ZXh0dXJlVHlwZUhhbGZGbG9hdCl9ZnVuY3Rpb24gUmkodCxlLG4scixvKXt2YXIgYT1YdChuLHIpO3JldHVybiB3aSh0LGUsYVswXSxhWzFdLHQuUkdCQSx0LlJHQkEsdC5VTlNJR05FRF9CWVRFKX1mdW5jdGlvbiBJaSh0LGUsbixyLG8pe3ZhciBhPSR0KG4scik7cmV0dXJuIHdpKHQsZSxhWzBdLGFbMV0sby5pbnRlcm5hbEZvcm1hdFBhY2tlZEZsb2F0LHQuUkdCQSx0LkZMT0FUKX1mdW5jdGlvbiBraSh0LGUsbixyLG8pe3ZhciBhPSR0KG4scik7cmV0dXJuIHdpKHQsZSxhWzBdLGFbMV0sby5pbnRlcm5hbEZvcm1hdFBhY2tlZEhhbGZGbG9hdCx0LlJHQkEsby50ZXh0dXJlVHlwZUhhbGZGbG9hdCl9ZnVuY3Rpb24gU2kodCxlLG4scil7cmV0dXJuIEp0KHQsZSwoZnVuY3Rpb24oKXtyZXR1cm4gdC5iaW5kQnVmZmVyKHQuQVJSQVlfQlVGRkVSLHIpfSkpLGdlKHQsZSxuLFwiY2xpcFNwYWNlUG9zXCIsciwzLDIwLDApJiZnZSh0LGUsbixcInV2XCIsciwyLDIwLDEyKX1mdW5jdGlvbiBBaSh0LGUsbixyLG8sYSxpKXt2YXIgcyx1LGM7SnQodCxlLChmdW5jdGlvbigpe3JldHVybiB0LmJpbmRUZXh0dXJlKHQuVEVYVFVSRV8yRCxuKX0pKSxhIGluc3RhbmNlb2YgVWludDhBcnJheT8ocz1uZXcgVWludDhBcnJheShyKm8qNCksdT10LlVOU0lHTkVEX0JZVEUsYz10LlJHQkEpOihzPW5ldyBGbG9hdDMyQXJyYXkocipvKjQpLHU9dC5GTE9BVCxjPWkuaW50ZXJuYWxGb3JtYXRQYWNrZWRGbG9hdCkscy5zZXQoYSksSnQodCxlLChmdW5jdGlvbigpe3JldHVybiB0LnRleEltYWdlMkQodC5URVhUVVJFXzJELDAsYyxyLG8sMCx0LlJHQkEsdSxzKX0pKSxKdCh0LGUsKGZ1bmN0aW9uKCl7cmV0dXJuIHQuYmluZFRleHR1cmUodC5URVhUVVJFXzJELG51bGwpfSkpfWZ1bmN0aW9uIERpKHQsZSxuLHIpe0p0KHQsZSwoZnVuY3Rpb24oKXtyZXR1cm4gdC5iaW5kVGV4dHVyZSh0LlRFWFRVUkVfMkQsbil9KSksci5kYXRhIGluc3RhbmNlb2YgVWludDhBcnJheT9KdCh0LGUsKGZ1bmN0aW9uKCl7cmV0dXJuIHQudGV4SW1hZ2UyRCh0LlRFWFRVUkVfMkQsMCx0LlJHQkEsci53aWR0aCxyLmhlaWdodCwwLHQuUkdCQSx0LlVOU0lHTkVEX0JZVEUsci5kYXRhKX0pKTpKdCh0LGUsKGZ1bmN0aW9uKCl7cmV0dXJuIHQudGV4SW1hZ2UyRCh0LlRFWFRVUkVfMkQsMCx0LlJHQkEsdC5SR0JBLHQuVU5TSUdORURfQllURSxyKX0pKSxKdCh0LGUsKGZ1bmN0aW9uKCl7cmV0dXJuIHQuYmluZFRleHR1cmUodC5URVhUVVJFXzJELG51bGwpfSkpfWZ1bmN0aW9uIFRpKHQsZSxuLHIsbyl7dmFyIGE9dC5jcmVhdGVCdWZmZXIoKTtKdCh0LGUsKGZ1bmN0aW9uKCl7cmV0dXJuIHQuYmluZEJ1ZmZlcih0LlBJWEVMX1BBQ0tfQlVGRkVSLGEpfSkpO3ZhciBpPTE2Km4qcjtyZXR1cm4gSnQodCxlLChmdW5jdGlvbigpe3JldHVybiB0LmJ1ZmZlckRhdGEodC5QSVhFTF9QQUNLX0JVRkZFUixpLHQuU1RSRUFNX1JFQUQpfSkpLEp0KHQsZSwoZnVuY3Rpb24oKXtyZXR1cm4gdC5yZWFkUGl4ZWxzKDAsMCxyLG4sdC5SR0JBLHQuRkxPQVQsMCl9KSksSnQodCxlLChmdW5jdGlvbigpe3JldHVybiB0LmJpbmRCdWZmZXIodC5QSVhFTF9QQUNLX0JVRkZFUixudWxsKX0pKSxhfWZ1bmN0aW9uIE5pKHQsZSxuKXt2YXIgcj10LG89bmV3IEZsb2F0MzJBcnJheShuKTtyZXR1cm4gci5iaW5kQnVmZmVyKHIuUElYRUxfUEFDS19CVUZGRVIsZSksci5nZXRCdWZmZXJTdWJEYXRhKHIuUElYRUxfUEFDS19CVUZGRVIsMCxvKSxyLmJpbmRCdWZmZXIoci5QSVhFTF9QQUNLX0JVRkZFUixudWxsKSxvfWZ1bmN0aW9uIEZpKHQsZSxuLHIsbyl7dmFyIGE9WHQobixyKSxpPWFbMF0scz1hWzFdLHU9bmV3IFVpbnQ4QXJyYXkobipyKjQpO3JldHVybiBKdCh0LGUsKGZ1bmN0aW9uKCl7cmV0dXJuIHQucmVhZFBpeGVscygwLDAsaSxzLG8uZG93bmxvYWRUZXh0dXJlRm9ybWF0LHQuVU5TSUdORURfQllURSx1KX0pKSxuZXcgRmxvYXQzMkFycmF5KHUuYnVmZmVyKX1mdW5jdGlvbiBfaSh0LGUsbixyLG8sYSxpLHMpe3ZhciB1PXQsYz1uZXcgRmxvYXQzMkFycmF5KGZ1bmN0aW9uKHQsZSl7dmFyIG49JHQodCxlKTtyZXR1cm4gblswXSpuWzFdKjR9KGEsaSkpO3JldHVybiB1LmJpbmRCdWZmZXIodS5QSVhFTF9QQUNLX0JVRkZFUixlKSx1LmdldEJ1ZmZlclN1YkRhdGEodS5QSVhFTF9QQUNLX0JVRkZFUiwwLGMpLHUuYmluZEJ1ZmZlcih1LlBJWEVMX1BBQ0tfQlVGRkVSLG51bGwpLGN9ZnVuY3Rpb24gT2kodCxlLG4scil7dmFyIG89bmV3IEZsb2F0MzJBcnJheShuKnIqNCk7cmV0dXJuIEp0KHQsZSwoZnVuY3Rpb24oKXtyZXR1cm4gdC5yZWFkUGl4ZWxzKDAsMCxyLG4sdC5SR0JBLHQuRkxPQVQsbyl9KSksb312YXIgTWk9T2JqZWN0LmZyZWV6ZSh7Y3JlYXRlVmVydGV4U2hhZGVyOnlpLGNyZWF0ZVZlcnRleEJ1ZmZlcjp4aSxjcmVhdGVJbmRleEJ1ZmZlcjpiaSxjcmVhdGVGbG9hdDMyTWF0cml4VGV4dHVyZTpDaSxjcmVhdGVGbG9hdDE2TWF0cml4VGV4dHVyZTpFaSxjcmVhdGVVbnNpZ25lZEJ5dGVzTWF0cml4VGV4dHVyZTpSaSxjcmVhdGVQYWNrZWRNYXRyaXhUZXh0dXJlOklpLGNyZWF0ZUZsb2F0MTZQYWNrZWRNYXRyaXhUZXh0dXJlOmtpLGJpbmRWZXJ0ZXhQcm9ncmFtQXR0cmlidXRlU3RyZWFtczpTaSx1cGxvYWREZW5zZU1hdHJpeFRvVGV4dHVyZTpBaSx1cGxvYWRQaXhlbERhdGFUb1RleHR1cmU6RGksY3JlYXRlQnVmZmVyRnJvbU91dHB1dFRleHR1cmU6VGksZG93bmxvYWRGbG9hdDMyTWF0cml4RnJvbUJ1ZmZlcjpOaSxkb3dubG9hZEJ5dGVFbmNvZGVkRmxvYXRNYXRyaXhGcm9tT3V0cHV0VGV4dHVyZTpGaSxkb3dubG9hZFBhY2tlZE1hdHJpeEZyb21CdWZmZXI6X2ksZG93bmxvYWRNYXRyaXhGcm9tUGFja2VkT3V0cHV0VGV4dHVyZTpPaX0pLEJpPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gdCh0KXt0aGlzLm91dHB1dFRleHR1cmU9bnVsbCx0aGlzLnByb2dyYW09bnVsbCx0aGlzLmRpc3Bvc2VkPSExLHRoaXMudmVydGV4QXR0cnNBcmVCb3VuZD0hMSx0aGlzLml0ZW1zVG9Qb2xsPVtdO3ZhciBlPWkoKS5nZXROdW1iZXIoXCJXRUJHTF9WRVJTSU9OXCIpO251bGwhPXQ/KHRoaXMuZ2w9dCxLdChlLHQpKTp0aGlzLmdsPWp0KGUpO3ZhciBuPVwiV0VCR0xfY29sb3JfYnVmZmVyX2Zsb2F0XCI7aWYoMT09PWkoKS5nZXROdW1iZXIoXCJXRUJHTF9WRVJTSU9OXCIpKXtpZih0aGlzLnRleHR1cmVGbG9hdEV4dGVuc2lvbj1yZSh0aGlzLmdsLHRoaXMuZGVidWcsXCJPRVNfdGV4dHVyZV9mbG9hdFwiKSxQZSh0aGlzLmdsLFwiT0VTX3RleHR1cmVfaGFsZl9mbG9hdFwiKSl0aGlzLnRleHR1cmVIYWxmRmxvYXRFeHRlbnNpb249cmUodGhpcy5nbCx0aGlzLmRlYnVnLFwiT0VTX3RleHR1cmVfaGFsZl9mbG9hdFwiKTtlbHNlIGlmKGkoKS5nZXQoXCJXRUJHTF9GT1JDRV9GMTZfVEVYVFVSRVNcIikpdGhyb3cgbmV3IEVycm9yKFwiR0wgY29udGV4dCBkb2VzIG5vdCBzdXBwb3J0IGhhbGYgZmxvYXQgdGV4dHVyZXMsIHlldCB0aGUgZW52aXJvbm1lbnQgZmxhZyBXRUJHTF9GT1JDRV9GMTZfVEVYVFVSRVMgaXMgc2V0IHRvIHRydWUuXCIpO2lmKHRoaXMuY29sb3JCdWZmZXJGbG9hdEV4dGVuc2lvbj10aGlzLmdsLmdldEV4dGVuc2lvbihuKSxQZSh0aGlzLmdsLFwiRVhUX2NvbG9yX2J1ZmZlcl9oYWxmX2Zsb2F0XCIpKXRoaXMuY29sb3JCdWZmZXJIYWxmRmxvYXRFeHRlbnNpb249cmUodGhpcy5nbCx0aGlzLmRlYnVnLFwiRVhUX2NvbG9yX2J1ZmZlcl9oYWxmX2Zsb2F0XCIpO2Vsc2UgaWYoaSgpLmdldChcIldFQkdMX0ZPUkNFX0YxNl9URVhUVVJFU1wiKSl0aHJvdyBuZXcgRXJyb3IoXCJHTCBjb250ZXh0IGRvZXMgbm90IHN1cHBvcnQgY29sb3IgcmVuZGVyYWJsZSBoYWxmIGZsb2F0cywgeWV0IHRoZSBlbnZpcm9ubWVudCBmbGFnIFdFQkdMX0ZPUkNFX0YxNl9URVhUVVJFUyBpcyBzZXQgdG8gdHJ1ZS5cIil9ZWxzZSBpZihuPVwiRVhUX2NvbG9yX2J1ZmZlcl9mbG9hdFwiLFBlKHRoaXMuZ2wsbikpdGhpcy5jb2xvckJ1ZmZlckZsb2F0RXh0ZW5zaW9uPXRoaXMuZ2wuZ2V0RXh0ZW5zaW9uKG4pO2Vsc2V7aWYoIVBlKHRoaXMuZ2wsXCJFWFRfY29sb3JfYnVmZmVyX2hhbGZfZmxvYXRcIikpdGhyb3cgbmV3IEVycm9yKFwiR0wgY29udGV4dCBkb2VzIG5vdCBzdXBwb3J0IGNvbG9yIHJlbmRlcmFibGUgZmxvYXRzXCIpO3RoaXMuY29sb3JCdWZmZXJIYWxmRmxvYXRFeHRlbnNpb249dGhpcy5nbC5nZXRFeHRlbnNpb24oXCJFWFRfY29sb3JfYnVmZmVyX2hhbGZfZmxvYXRcIil9dGhpcy52ZXJ0ZXhCdWZmZXI9eGkodGhpcy5nbCx0aGlzLmRlYnVnKSx0aGlzLmluZGV4QnVmZmVyPWJpKHRoaXMuZ2wsdGhpcy5kZWJ1ZyksdGhpcy5mcmFtZWJ1ZmZlcj1tZSh0aGlzLmdsLHRoaXMuZGVidWcpLHRoaXMudGV4dHVyZUNvbmZpZz1RdCh0aGlzLmdsLHRoaXMudGV4dHVyZUhhbGZGbG9hdEV4dGVuc2lvbil9cmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LnByb3RvdHlwZSxcImRlYnVnXCIse2dldDpmdW5jdGlvbigpe3JldHVybiBpKCkuZ2V0Qm9vbChcIkRFQlVHXCIpfSxlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH0pLHQucHJvdG90eXBlLmRpc3Bvc2U9ZnVuY3Rpb24oKXt2YXIgdD10aGlzO2lmKCF0aGlzLmRpc3Bvc2VkKXtudWxsIT10aGlzLnByb2dyYW0mJmNvbnNvbGUud2FybihcIkRpc3Bvc2luZyBhIEdQR1BVQ29udGV4dCB0aGF0IHN0aWxsIGhhcyBhIGJvdW5kIFdlYkdMUHJvZ3JhbS4gVGhpcyBpcyBwcm9iYWJseSBhIHJlc291cmNlIGxlYWssIGRlbGV0ZSB0aGUgcHJvZ3JhbSB3aXRoIEdQR1BVQ29udGV4dC5kZWxldGVQcm9ncmFtIGJlZm9yZSBkaXNwb3NpbmcuXCIpLG51bGwhPXRoaXMub3V0cHV0VGV4dHVyZSYmY29uc29sZS53YXJuKFwiRGlzcG9zaW5nIGEgR1BHUFVDb250ZXh0IHRoYXQgc3RpbGwgaGFzIGEgYm91bmQgb3V0cHV0IG1hdHJpeCB0ZXh0dXJlLiAgVGhpcyBpcyBwcm9iYWJseSBhIHJlc291cmNlIGxlYWssIGRlbGV0ZSB0aGUgb3V0cHV0IG1hdHJpeCB0ZXh0dXJlIHdpdGggR1BHUFVDb250ZXh0LmRlbGV0ZU1hdHJpeFRleHR1cmUgYmVmb3JlIGRpc3Bvc2luZy5cIik7dmFyIGU9dGhpcy5nbDtKdChlLHRoaXMuZGVidWcsKGZ1bmN0aW9uKCl7cmV0dXJuIGUuZmluaXNoKCl9KSksSnQoZSx0aGlzLmRlYnVnLChmdW5jdGlvbigpe3JldHVybiBlLmJpbmRGcmFtZWJ1ZmZlcihlLkZSQU1FQlVGRkVSLG51bGwpfSkpLEp0KGUsdGhpcy5kZWJ1ZywoZnVuY3Rpb24oKXtyZXR1cm4gZS5kZWxldGVGcmFtZWJ1ZmZlcih0LmZyYW1lYnVmZmVyKX0pKSxKdChlLHRoaXMuZGVidWcsKGZ1bmN0aW9uKCl7cmV0dXJuIGUuYmluZEJ1ZmZlcihlLkFSUkFZX0JVRkZFUixudWxsKX0pKSxKdChlLHRoaXMuZGVidWcsKGZ1bmN0aW9uKCl7cmV0dXJuIGUuYmluZEJ1ZmZlcihlLkVMRU1FTlRfQVJSQVlfQlVGRkVSLG51bGwpfSkpLEp0KGUsdGhpcy5kZWJ1ZywoZnVuY3Rpb24oKXtyZXR1cm4gZS5kZWxldGVCdWZmZXIodC5pbmRleEJ1ZmZlcil9KSksdGhpcy5kaXNwb3NlZD0hMH19LHQucHJvdG90eXBlLmNyZWF0ZUZsb2F0MzJNYXRyaXhUZXh0dXJlPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIHRoaXMudGhyb3dJZkRpc3Bvc2VkKCksQ2kodGhpcy5nbCx0aGlzLmRlYnVnLHQsZSx0aGlzLnRleHR1cmVDb25maWcpfSx0LnByb3RvdHlwZS5jcmVhdGVGbG9hdDE2TWF0cml4VGV4dHVyZT1mdW5jdGlvbih0LGUpe3JldHVybiB0aGlzLnRocm93SWZEaXNwb3NlZCgpLEVpKHRoaXMuZ2wsdGhpcy5kZWJ1Zyx0LGUsdGhpcy50ZXh0dXJlQ29uZmlnKX0sdC5wcm90b3R5cGUuY3JlYXRlVW5zaWduZWRCeXRlc01hdHJpeFRleHR1cmU9ZnVuY3Rpb24odCxlKXtyZXR1cm4gdGhpcy50aHJvd0lmRGlzcG9zZWQoKSxSaSh0aGlzLmdsLHRoaXMuZGVidWcsdCxlLHRoaXMudGV4dHVyZUNvbmZpZyl9LHQucHJvdG90eXBlLnVwbG9hZFBpeGVsRGF0YVRvVGV4dHVyZT1mdW5jdGlvbih0LGUpe3RoaXMudGhyb3dJZkRpc3Bvc2VkKCksRGkodGhpcy5nbCx0aGlzLmRlYnVnLHQsZSl9LHQucHJvdG90eXBlLnVwbG9hZERlbnNlTWF0cml4VG9UZXh0dXJlPWZ1bmN0aW9uKHQsZSxuLHIpe3RoaXMudGhyb3dJZkRpc3Bvc2VkKCksQWkodGhpcy5nbCx0aGlzLmRlYnVnLHQsZSxuLHIsdGhpcy50ZXh0dXJlQ29uZmlnKX0sdC5wcm90b3R5cGUuY3JlYXRlRmxvYXQxNlBhY2tlZE1hdHJpeFRleHR1cmU9ZnVuY3Rpb24odCxlKXtyZXR1cm4gdGhpcy50aHJvd0lmRGlzcG9zZWQoKSxraSh0aGlzLmdsLHRoaXMuZGVidWcsdCxlLHRoaXMudGV4dHVyZUNvbmZpZyl9LHQucHJvdG90eXBlLmNyZWF0ZVBhY2tlZE1hdHJpeFRleHR1cmU9ZnVuY3Rpb24odCxlKXtyZXR1cm4gdGhpcy50aHJvd0lmRGlzcG9zZWQoKSxJaSh0aGlzLmdsLHRoaXMuZGVidWcsdCxlLHRoaXMudGV4dHVyZUNvbmZpZyl9LHQucHJvdG90eXBlLmRlbGV0ZU1hdHJpeFRleHR1cmU9ZnVuY3Rpb24odCl7dmFyIGU9dGhpczt0aGlzLnRocm93SWZEaXNwb3NlZCgpLHRoaXMub3V0cHV0VGV4dHVyZT09PXQmJihFZSh0aGlzLmdsLHRoaXMuZGVidWcsdGhpcy5mcmFtZWJ1ZmZlciksdGhpcy5vdXRwdXRUZXh0dXJlPW51bGwpLEp0KHRoaXMuZ2wsdGhpcy5kZWJ1ZywoZnVuY3Rpb24oKXtyZXR1cm4gZS5nbC5kZWxldGVUZXh0dXJlKHQpfSkpfSx0LnByb3RvdHlwZS5kb3dubG9hZEJ5dGVFbmNvZGVkRmxvYXRNYXRyaXhGcm9tT3V0cHV0VGV4dHVyZT1mdW5jdGlvbih0LGUsbil7dmFyIHI9dGhpcztyZXR1cm4gdGhpcy5kb3dubG9hZE1hdHJpeERyaXZlcih0LChmdW5jdGlvbigpe3JldHVybiBGaShyLmdsLHIuZGVidWcsZSxuLHIudGV4dHVyZUNvbmZpZyl9KSl9LHQucHJvdG90eXBlLmRvd25sb2FkUGFja2VkTWF0cml4RnJvbUJ1ZmZlcj1mdW5jdGlvbih0LGUsbixyLG8sYSl7cmV0dXJuIF9pKHRoaXMuZ2wsdCwwLDAsMCxvLGEsdGhpcy50ZXh0dXJlQ29uZmlnKX0sdC5wcm90b3R5cGUuZG93bmxvYWRGbG9hdDMyTWF0cml4RnJvbUJ1ZmZlcj1mdW5jdGlvbih0LGUpe3JldHVybiBOaSh0aGlzLmdsLHQsZSl9LHQucHJvdG90eXBlLmNyZWF0ZUJ1ZmZlckZyb21UZXh0dXJlPWZ1bmN0aW9uKHQsZSxuKXt0aGlzLmJpbmRUZXh0dXJlVG9GcmFtZUJ1ZmZlcih0KTt2YXIgcj1UaSh0aGlzLmdsLHRoaXMuZGVidWcsZSxuLHRoaXMudGV4dHVyZUNvbmZpZyk7cmV0dXJuIHRoaXMudW5iaW5kVGV4dHVyZVRvRnJhbWVCdWZmZXIoKSxyfSx0LnByb3RvdHlwZS5jcmVhdGVBbmRXYWl0Rm9yRmVuY2U9ZnVuY3Rpb24oKXt2YXIgdD10aGlzLmNyZWF0ZUZlbmNlKHRoaXMuZ2wpO3JldHVybiB0aGlzLnBvbGxGZW5jZSh0KX0sdC5wcm90b3R5cGUuY3JlYXRlRmVuY2U9ZnVuY3Rpb24odCl7dmFyIGUsbixyPXRoaXM7aWYoaSgpLmdldEJvb2woXCJXRUJHTF9GRU5DRV9BUElfRU5BQkxFRFwiKSl7dmFyIG89dCxhPW8uZmVuY2VTeW5jKG8uU1lOQ19HUFVfQ09NTUFORFNfQ09NUExFVEUsMCk7dC5mbHVzaCgpLG49ZnVuY3Rpb24oKXt2YXIgdD1vLmNsaWVudFdhaXRTeW5jKGEsMCwwKTtyZXR1cm4gdD09PW8uQUxSRUFEWV9TSUdOQUxFRHx8dD09PW8uQ09ORElUSU9OX1NBVElTRklFRH0sZT1hfWVsc2UgaSgpLmdldE51bWJlcihcIldFQkdMX0RJU0pPSU5UX1FVRVJZX1RJTUVSX0VYVEVOU0lPTl9WRVJTSU9OXCIpPjA/KGU9dGhpcy5iZWdpblF1ZXJ5KCksdGhpcy5lbmRRdWVyeSgpLG49ZnVuY3Rpb24oKXtyZXR1cm4gci5pc1F1ZXJ5QXZhaWxhYmxlKGUsaSgpLmdldE51bWJlcihcIldFQkdMX0RJU0pPSU5UX1FVRVJZX1RJTUVSX0VYVEVOU0lPTl9WRVJTSU9OXCIpKX0pOm49ZnVuY3Rpb24oKXtyZXR1cm4hMH07cmV0dXJue3F1ZXJ5OmUsaXNGZW5jZVBhc3NlZDpufX0sdC5wcm90b3R5cGUuZG93bmxvYWRNYXRyaXhGcm9tUGFja2VkVGV4dHVyZT1mdW5jdGlvbih0LGUsbil7dmFyIHI9dGhpcztyZXR1cm4gdGhpcy5kb3dubG9hZE1hdHJpeERyaXZlcih0LChmdW5jdGlvbigpe3JldHVybiBPaShyLmdsLHIuZGVidWcsZSxuKX0pKX0sdC5wcm90b3R5cGUuY3JlYXRlUHJvZ3JhbT1mdW5jdGlvbih0KXt0aGlzLnRocm93SWZEaXNwb3NlZCgpO3ZhciBlPXRoaXMuZ2wsbj1hZShlLHRoaXMuZGVidWcsdCkscj15aShlLHRoaXMuZGVidWcpLG89Y2UoZSx0aGlzLmRlYnVnKTtyZXR1cm4gSnQoZSx0aGlzLmRlYnVnLChmdW5jdGlvbigpe3JldHVybiBlLmF0dGFjaFNoYWRlcihvLHIpfSkpLEp0KGUsdGhpcy5kZWJ1ZywoZnVuY3Rpb24oKXtyZXR1cm4gZS5hdHRhY2hTaGFkZXIobyxuKX0pKSxsZShlLHRoaXMuZGVidWcsbyksdGhpcy5kZWJ1ZyYmaGUoZSx0aGlzLmRlYnVnLG8pLHRoaXMudmVydGV4QXR0cnNBcmVCb3VuZHx8KHRoaXMuc2V0UHJvZ3JhbShvKSx0aGlzLnZlcnRleEF0dHJzQXJlQm91bmQ9U2koZSx0aGlzLmRlYnVnLHRoaXMucHJvZ3JhbSx0aGlzLnZlcnRleEJ1ZmZlcikpLG99LHQucHJvdG90eXBlLmRlbGV0ZVByb2dyYW09ZnVuY3Rpb24odCl7dmFyIGU9dGhpczt0aGlzLnRocm93SWZEaXNwb3NlZCgpLHQ9PT10aGlzLnByb2dyYW0mJih0aGlzLnByb2dyYW09bnVsbCksbnVsbCE9dCYmSnQodGhpcy5nbCx0aGlzLmRlYnVnLChmdW5jdGlvbigpe3JldHVybiBlLmdsLmRlbGV0ZVByb2dyYW0odCl9KSl9LHQucHJvdG90eXBlLnNldFByb2dyYW09ZnVuY3Rpb24odCl7dmFyIGU9dGhpczt0aGlzLnRocm93SWZEaXNwb3NlZCgpLHRoaXMucHJvZ3JhbT10LG51bGwhPXRoaXMucHJvZ3JhbSYmdGhpcy5kZWJ1ZyYmaGUodGhpcy5nbCx0aGlzLmRlYnVnLHRoaXMucHJvZ3JhbSksSnQodGhpcy5nbCx0aGlzLmRlYnVnLChmdW5jdGlvbigpe3JldHVybiBlLmdsLnVzZVByb2dyYW0odCl9KSl9LHQucHJvdG90eXBlLmdldFVuaWZvcm1Mb2NhdGlvbj1mdW5jdGlvbih0LGUsbil7cmV0dXJuIHZvaWQgMD09PW4mJihuPSEwKSx0aGlzLnRocm93SWZEaXNwb3NlZCgpLG4/eGUodGhpcy5nbCx0aGlzLmRlYnVnLHQsZSk6YmUodGhpcy5nbCx0LGUpfSx0LnByb3RvdHlwZS5nZXRBdHRyaWJ1dGVMb2NhdGlvbj1mdW5jdGlvbih0LGUpe3ZhciBuPXRoaXM7cmV0dXJuIHRoaXMudGhyb3dJZkRpc3Bvc2VkKCksSnQodGhpcy5nbCx0aGlzLmRlYnVnLChmdW5jdGlvbigpe3JldHVybiBuLmdsLmdldEF0dHJpYkxvY2F0aW9uKHQsZSl9KSl9LHQucHJvdG90eXBlLmdldFVuaWZvcm1Mb2NhdGlvbk5vVGhyb3c9ZnVuY3Rpb24odCxlKXtyZXR1cm4gdGhpcy50aHJvd0lmRGlzcG9zZWQoKSx0aGlzLmdsLmdldFVuaWZvcm1Mb2NhdGlvbih0LGUpfSx0LnByb3RvdHlwZS5zZXRJbnB1dE1hdHJpeFRleHR1cmU9ZnVuY3Rpb24odCxlLG4pe3RoaXMudGhyb3dJZkRpc3Bvc2VkKCksdGhpcy50aHJvd0lmTm9Qcm9ncmFtKCksd2UodGhpcy5nbCx0aGlzLmRlYnVnLHRoaXMucHJvZ3JhbSx0LGUsbil9LHQucHJvdG90eXBlLnNldE91dHB1dE1hdHJpeFRleHR1cmU9ZnVuY3Rpb24odCxlLG4pe3RoaXMuc2V0T3V0cHV0TWF0cml4VGV4dHVyZURyaXZlcih0LG4sZSl9LHQucHJvdG90eXBlLnNldE91dHB1dFBhY2tlZE1hdHJpeFRleHR1cmU9ZnVuY3Rpb24odCxlLG4pe3RoaXMudGhyb3dJZkRpc3Bvc2VkKCk7dmFyIHI9JHQoZSxuKSxvPXJbMF0sYT1yWzFdO3RoaXMuc2V0T3V0cHV0TWF0cml4VGV4dHVyZURyaXZlcih0LG8sYSl9LHQucHJvdG90eXBlLnNldE91dHB1dE1hdHJpeFdyaXRlUmVnaW9uPWZ1bmN0aW9uKHQsZSxuLHIpe3RoaXMuc2V0T3V0cHV0TWF0cml4V3JpdGVSZWdpb25Ecml2ZXIobix0LHIsZSl9LHQucHJvdG90eXBlLnNldE91dHB1dFBhY2tlZE1hdHJpeFdyaXRlUmVnaW9uPWZ1bmN0aW9uKHQsZSxuLHIpe3Rocm93IG5ldyBFcnJvcihcInNldE91dHB1dFBhY2tlZE1hdHJpeFdyaXRlUmVnaW9uIG5vdCBpbXBsZW1lbnRlZC5cIil9LHQucHJvdG90eXBlLmRlYnVnVmFsaWRhdGU9ZnVuY3Rpb24oKXtudWxsIT10aGlzLnByb2dyYW0mJmhlKHRoaXMuZ2wsdGhpcy5kZWJ1Zyx0aGlzLnByb2dyYW0pLFJlKHRoaXMuZ2wpfSx0LnByb3RvdHlwZS5leGVjdXRlUHJvZ3JhbT1mdW5jdGlvbigpe3RoaXMudGhyb3dJZkRpc3Bvc2VkKCksdGhpcy50aHJvd0lmTm9Qcm9ncmFtKCk7dmFyIHQ9dGhpcy5nbDt0aGlzLmRlYnVnJiZ0aGlzLmRlYnVnVmFsaWRhdGUoKSxKdCh0LHRoaXMuZGVidWcsKGZ1bmN0aW9uKCl7cmV0dXJuIHQuZHJhd0VsZW1lbnRzKHQuVFJJQU5HTEVTLDYsdC5VTlNJR05FRF9TSE9SVCwwKX0pKX0sdC5wcm90b3R5cGUuYmxvY2tVbnRpbEFsbFByb2dyYW1zQ29tcGxldGVkPWZ1bmN0aW9uKCl7dmFyIHQ9dGhpczt0aGlzLnRocm93SWZEaXNwb3NlZCgpLEp0KHRoaXMuZ2wsdGhpcy5kZWJ1ZywoZnVuY3Rpb24oKXtyZXR1cm4gdC5nbC5maW5pc2goKX0pKX0sdC5wcm90b3R5cGUuZ2V0UXVlcnlUaW1lckV4dGVuc2lvbj1mdW5jdGlvbigpe3JldHVybiBudWxsPT10aGlzLmRpc2pvaW50UXVlcnlUaW1lckV4dGVuc2lvbiYmKHRoaXMuZGlzam9pbnRRdWVyeVRpbWVyRXh0ZW5zaW9uPXJlKHRoaXMuZ2wsdGhpcy5kZWJ1ZywyPT09aSgpLmdldE51bWJlcihcIldFQkdMX0RJU0pPSU5UX1FVRVJZX1RJTUVSX0VYVEVOU0lPTl9WRVJTSU9OXCIpP1wiRVhUX2Rpc2pvaW50X3RpbWVyX3F1ZXJ5X3dlYmdsMlwiOlwiRVhUX2Rpc2pvaW50X3RpbWVyX3F1ZXJ5XCIpKSx0aGlzLmRpc2pvaW50UXVlcnlUaW1lckV4dGVuc2lvbn0sdC5wcm90b3R5cGUuZ2V0UXVlcnlUaW1lckV4dGVuc2lvbldlYkdMMj1mdW5jdGlvbigpe3JldHVybiB0aGlzLmdldFF1ZXJ5VGltZXJFeHRlbnNpb24oKX0sdC5wcm90b3R5cGUuZ2V0UXVlcnlUaW1lckV4dGVuc2lvbldlYkdMMT1mdW5jdGlvbigpe3JldHVybiB0aGlzLmdldFF1ZXJ5VGltZXJFeHRlbnNpb24oKX0sdC5wcm90b3R5cGUuYmVnaW5RdWVyeT1mdW5jdGlvbigpe2lmKDI9PT1pKCkuZ2V0TnVtYmVyKFwiV0VCR0xfRElTSk9JTlRfUVVFUllfVElNRVJfRVhURU5TSU9OX1ZFUlNJT05cIikpe3ZhciB0PXRoaXMuZ2wsZT10aGlzLmdldFF1ZXJ5VGltZXJFeHRlbnNpb25XZWJHTDIoKSxuPXQuY3JlYXRlUXVlcnkoKTtyZXR1cm4gdC5iZWdpblF1ZXJ5KGUuVElNRV9FTEFQU0VEX0VYVCxuKSxufXZhciByPXRoaXMuZ2V0UXVlcnlUaW1lckV4dGVuc2lvbldlYkdMMSgpLG89ci5jcmVhdGVRdWVyeUVYVCgpO3JldHVybiByLmJlZ2luUXVlcnlFWFQoci5USU1FX0VMQVBTRURfRVhULG8pLG99LHQucHJvdG90eXBlLmVuZFF1ZXJ5PWZ1bmN0aW9uKCl7aWYoMiE9PWkoKS5nZXROdW1iZXIoXCJXRUJHTF9ESVNKT0lOVF9RVUVSWV9USU1FUl9FWFRFTlNJT05fVkVSU0lPTlwiKSl7dmFyIHQ9dGhpcy5nZXRRdWVyeVRpbWVyRXh0ZW5zaW9uV2ViR0wxKCk7dC5lbmRRdWVyeUVYVCh0LlRJTUVfRUxBUFNFRF9FWFQpfWVsc2V7dmFyIGU9dGhpcy5nbCxuPXRoaXMuZ2V0UXVlcnlUaW1lckV4dGVuc2lvbldlYkdMMigpO2UuZW5kUXVlcnkobi5USU1FX0VMQVBTRURfRVhUKX19LHQucHJvdG90eXBlLndhaXRGb3JRdWVyeUFuZEdldFRpbWU9ZnVuY3Rpb24odCl7cmV0dXJuIG4odGhpcyx2b2lkIDAsdm9pZCAwLChmdW5jdGlvbigpe3ZhciBlPXRoaXM7cmV0dXJuIHIodGhpcywoZnVuY3Rpb24obil7c3dpdGNoKG4ubGFiZWwpe2Nhc2UgMDpyZXR1cm5bNCxGKChmdW5jdGlvbigpe3JldHVybiBlLmRpc3Bvc2VkfHxlLmlzUXVlcnlBdmFpbGFibGUodCxpKCkuZ2V0TnVtYmVyKFwiV0VCR0xfRElTSk9JTlRfUVVFUllfVElNRVJfRVhURU5TSU9OX1ZFUlNJT05cIikpfSkpXTtjYXNlIDE6cmV0dXJuIG4uc2VudCgpLFsyLHRoaXMuZ2V0UXVlcnlUaW1lKHQsaSgpLmdldE51bWJlcihcIldFQkdMX0RJU0pPSU5UX1FVRVJZX1RJTUVSX0VYVEVOU0lPTl9WRVJTSU9OXCIpKV19fSkpfSkpfSx0LnByb3RvdHlwZS5nZXRRdWVyeVRpbWU9ZnVuY3Rpb24odCxlKXtpZigwPT09ZSlyZXR1cm4gbnVsbDtpZigyPT09ZSl7dmFyIG49dGhpcy5nbDtyZXR1cm4gbi5nZXRRdWVyeVBhcmFtZXRlcih0LG4uUVVFUllfUkVTVUxUKS8xZTZ9dmFyIHI9dGhpcy5nZXRRdWVyeVRpbWVyRXh0ZW5zaW9uV2ViR0wxKCk7cmV0dXJuIHIuZ2V0UXVlcnlPYmplY3RFWFQodCxyLlFVRVJZX1JFU1VMVF9FWFQpLzFlNn0sdC5wcm90b3R5cGUuaXNRdWVyeUF2YWlsYWJsZT1mdW5jdGlvbih0LGUpe2lmKDA9PT1lKXJldHVybiEwO2lmKDI9PT1lKXt2YXIgbj10aGlzLmdsLHI9dGhpcy5nZXRRdWVyeVRpbWVyRXh0ZW5zaW9uV2ViR0wyKCksbz1uLmdldFF1ZXJ5UGFyYW1ldGVyKHQsbi5RVUVSWV9SRVNVTFRfQVZBSUxBQkxFKTtyZXR1cm4gbnVsbD09dGhpcy5kaXNqb2ludCYmKHRoaXMuZGlzam9pbnQ9dGhpcy5nbC5nZXRQYXJhbWV0ZXIoci5HUFVfRElTSk9JTlRfRVhUKSksbyYmIXRoaXMuZGlzam9pbnR9bz0ocj10aGlzLmdldFF1ZXJ5VGltZXJFeHRlbnNpb25XZWJHTDEoKSkuZ2V0UXVlcnlPYmplY3RFWFQodCxyLlFVRVJZX1JFU1VMVF9BVkFJTEFCTEVfRVhUKTtyZXR1cm4gbnVsbD09dGhpcy5kaXNqb2ludCYmKHRoaXMuZGlzam9pbnQ9dGhpcy5nbC5nZXRQYXJhbWV0ZXIoci5HUFVfRElTSk9JTlRfRVhUKSksbyYmIXRoaXMuZGlzam9pbnR9LHQucHJvdG90eXBlLnBvbGxGZW5jZT1mdW5jdGlvbih0KXt2YXIgZT10aGlzO3JldHVybiBuZXcgUHJvbWlzZSgoZnVuY3Rpb24obil7ZS5hZGRJdGVtVG9Qb2xsKChmdW5jdGlvbigpe3JldHVybiB0LmlzRmVuY2VQYXNzZWQoKX0pLChmdW5jdGlvbigpe3JldHVybiBuKCl9KSl9KSl9LHQucHJvdG90eXBlLnBvbGxJdGVtcz1mdW5jdGlvbigpe2Zvcih2YXIgdD1mdW5jdGlvbih0KXtmb3IodmFyIGU9MDtlPHQubGVuZ3RoOysrZSl7aWYoIXRbZV0oKSlicmVha31yZXR1cm4gZS0xfSh0aGlzLml0ZW1zVG9Qb2xsLm1hcCgoZnVuY3Rpb24odCl7cmV0dXJuIHQuaXNEb25lRm59KSkpLGU9MDtlPD10OysrZSl7KDAsdGhpcy5pdGVtc1RvUG9sbFtlXS5yZXNvbHZlRm4pKCl9dGhpcy5pdGVtc1RvUG9sbD10aGlzLml0ZW1zVG9Qb2xsLnNsaWNlKHQrMSl9LHQucHJvdG90eXBlLmFkZEl0ZW1Ub1BvbGw9ZnVuY3Rpb24odCxlKXt2YXIgbj10aGlzO3RoaXMuaXRlbXNUb1BvbGwucHVzaCh7aXNEb25lRm46dCxyZXNvbHZlRm46ZX0pLHRoaXMuaXRlbXNUb1BvbGwubGVuZ3RoPjF8fEYoKGZ1bmN0aW9uKCl7cmV0dXJuIG4ucG9sbEl0ZW1zKCksMD09PW4uaXRlbXNUb1BvbGwubGVuZ3RofSkpfSx0LnByb3RvdHlwZS5iaW5kVGV4dHVyZVRvRnJhbWVCdWZmZXI9ZnVuY3Rpb24odCl7dGhpcy50aHJvd0lmRGlzcG9zZWQoKSxDZSh0aGlzLmdsLHRoaXMuZGVidWcsdCx0aGlzLmZyYW1lYnVmZmVyKSx0aGlzLmRlYnVnJiZSZSh0aGlzLmdsKX0sdC5wcm90b3R5cGUudW5iaW5kVGV4dHVyZVRvRnJhbWVCdWZmZXI9ZnVuY3Rpb24oKXtudWxsIT10aGlzLm91dHB1dFRleHR1cmU/KENlKHRoaXMuZ2wsdGhpcy5kZWJ1Zyx0aGlzLm91dHB1dFRleHR1cmUsdGhpcy5mcmFtZWJ1ZmZlciksdGhpcy5kZWJ1ZyYmUmUodGhpcy5nbCkpOkVlKHRoaXMuZ2wsdGhpcy5kZWJ1Zyx0aGlzLmZyYW1lYnVmZmVyKX0sdC5wcm90b3R5cGUuZG93bmxvYWRNYXRyaXhEcml2ZXI9ZnVuY3Rpb24odCxlKXt0aGlzLmJpbmRUZXh0dXJlVG9GcmFtZUJ1ZmZlcih0KTt2YXIgbj1lKCk7cmV0dXJuIHRoaXMudW5iaW5kVGV4dHVyZVRvRnJhbWVCdWZmZXIoKSxufSx0LnByb3RvdHlwZS5zZXRPdXRwdXRNYXRyaXhUZXh0dXJlRHJpdmVyPWZ1bmN0aW9uKHQsZSxuKXt0aGlzLnRocm93SWZEaXNwb3NlZCgpO3ZhciByPXRoaXMuZ2w7Q2Uocix0aGlzLmRlYnVnLHQsdGhpcy5mcmFtZWJ1ZmZlciksdGhpcy5kZWJ1ZyYmUmUociksdGhpcy5vdXRwdXRUZXh0dXJlPXQsSnQocix0aGlzLmRlYnVnLChmdW5jdGlvbigpe3JldHVybiByLnZpZXdwb3J0KDAsMCxlLG4pfSkpLEp0KHIsdGhpcy5kZWJ1ZywoZnVuY3Rpb24oKXtyZXR1cm4gci5zY2lzc29yKDAsMCxlLG4pfSkpfSx0LnByb3RvdHlwZS5zZXRPdXRwdXRNYXRyaXhXcml0ZVJlZ2lvbkRyaXZlcj1mdW5jdGlvbih0LGUsbixyKXt2YXIgbz10aGlzO3RoaXMudGhyb3dJZkRpc3Bvc2VkKCksSnQodGhpcy5nbCx0aGlzLmRlYnVnLChmdW5jdGlvbigpe3JldHVybiBvLmdsLnNjaXNzb3IodCxlLG4scil9KSl9LHQucHJvdG90eXBlLnRocm93SWZEaXNwb3NlZD1mdW5jdGlvbigpe2lmKHRoaXMuZGlzcG9zZWQpdGhyb3cgbmV3IEVycm9yKFwiQXR0ZW1wdGVkIHRvIHVzZSBkaXNwb3NlZCBHUEdQVUNvbnRleHQuXCIpfSx0LnByb3RvdHlwZS50aHJvd0lmTm9Qcm9ncmFtPWZ1bmN0aW9uKCl7aWYobnVsbD09dGhpcy5wcm9ncmFtKXRocm93IG5ldyBFcnJvcihcIk5vIEdQVSBwcm9ncmFtIGlzIGN1cnJlbnRseSBzZXQuXCIpfSx0fSgpO2Z1bmN0aW9uIFBpKHQsZSl7aWYodC5sZW5ndGghPT1lLmxlbmd0aCl0aHJvdyBFcnJvcihcIkJpbmFyeSB3YXMgY29tcGlsZWQgd2l0aCBcIit0Lmxlbmd0aCtcIiBpbnB1dHMsIGJ1dCB3YXMgZXhlY3V0ZWQgd2l0aCBcIitlLmxlbmd0aCtcIiBpbnB1dHNcIik7dC5mb3JFYWNoKChmdW5jdGlvbih0LG4pe3ZhciByPXQubG9naWNhbFNoYXBlLG89ZVtuXSxhPW8uc2hhcGU7aWYoIVMocixhKSl0aHJvdyBFcnJvcihcIkJpbmFyeSB3YXMgY29tcGlsZWQgd2l0aCBkaWZmZXJlbnQgc2hhcGVzIHRoYW4gdGhlIGN1cnJlbnQgYXJncy4gU2hhcGVzIFwiK3IrXCIgYW5kIFwiK2ErXCIgbXVzdCBtYXRjaFwiKTtpZighdC5pc1VuaWZvcm18fCFvLmlzVW5pZm9ybSl7dmFyIGk9dC50ZXhTaGFwZSxzPW8uaXNVbmlmb3JtP251bGw6by50ZXhEYXRhLnRleFNoYXBlO2lmKCFTKGkscykpdGhyb3cgRXJyb3IoXCJCaW5hcnkgd2FzIGNvbXBpbGVkIHdpdGggZGlmZmVyZW50IHRleHR1cmUgc2hhcGVzIHRoYW4gdGhlIGN1cnJlbnQgYXJncy4gU2hhcGUgXCIraStcIiBhbmQgXCIrcytcIiBtdXN0IG1hdGNoXCIpfX0pKX12YXIgTGk9ZnVuY3Rpb24odCxlLG4pe3RoaXMudmFyaWFibGVOYW1lcz1bXCJBXCJdLHRoaXMucGFja2VkSW5wdXRzPSEwLHRoaXMucGFja2VkT3V0cHV0PSEwLHRoaXMub3V0cHV0U2hhcGU9dDtmb3IodmFyIHI9bi5maWx0ZXJXaWR0aCxvPW4uaW5DaGFubmVscyxhPW4uc3RyaWRlV2lkdGgsaT1uLnN0cmlkZUhlaWdodCxzPW4ucGFkSW5mbyx1PW4ub3V0V2lkdGgsYz1uLmRpbGF0aW9uV2lkdGgsbD1uLmRpbGF0aW9uSGVpZ2h0LGg9bi5kYXRhRm9ybWF0LGY9cy5sZWZ0LGQ9cy50b3AscD1vKnIsdj11YSgpLG09XCJjaGFubmVsc0xhc3RcIj09PWgsZz1tPzA6MSx5PW0/MToyLHg9XCJcIixiPTA7Yjw9MTtiKyspZm9yKHZhciB3PTA7dzw9MTt3KyspeCs9XCJcXG4gICAgICAgICAgYmxvY2tJbmRleCA9IHJjLnkgKyBcIit3K1wiO1xcbiAgICAgICAgICBwb3MgPSByYy54ICsgXCIrYitcIjtcXG5cXG4gICAgICAgICAgaWYoYmxvY2tJbmRleCA8IFwiK3RbMV0rXCIgJiYgcG9zIDwgXCIrdFswXStcIikge1xcbiAgICAgICAgICAgIG9mZnNldFkgPSBpbnQoYmxvY2tJbmRleCAvIChcIit1K1wiKSkgKiBcIitpK1wiIC0gXCIrZCtcIjtcXG4gICAgICAgICAgICBkMCA9IG9mZnNldFkgKyBcIitsK1wiICogKHBvcyAvIFwiK3ArXCIpO1xcblxcbiAgICAgICAgICAgIGlmKGQwIDwgXCIrZVtnXStcIiAmJiBkMCA+PSAwKSB7XFxuXFxuICAgICAgICAgICAgICBvZmZzZXRYID0gaW50KG1vZChmbG9hdChibG9ja0luZGV4KSwgXCIrdStcIi4pICogXCIrYStcIi4gLSBcIitmK1wiLik7XFxuICAgICAgICAgICAgICBkMSA9IG9mZnNldFggKyBcIitjK1wiICogKGludChtb2QoZmxvYXQocG9zKSwgXCIrcCtcIi4pIC8gXCIrbytcIi4pKTtcXG5cXG4gICAgICAgICAgICAgIGlmKGQxIDwgXCIrZVt5XStcIiAmJiBkMSA+PSAwKSB7XFxuXFxuICAgICAgICAgICAgICAgIGNoID0gaW50KG1vZChmbG9hdChwb3MpLCBcIitvK1wiLikpO1xcblxcbiAgICAgICAgICAgICAgICBpZiAoXCIrbStcIikge1xcbiAgICAgICAgICAgICAgICAgIGlubmVyRGltcyA9IHZlYzIoZDEsIGNoKTtcXG4gICAgICAgICAgICAgICAgICByZXN1bHRbXCIrKDIqYit3KStcIl0gPSBnZXRDaGFubmVsKFxcbiAgICAgICAgICAgICAgICAgICAgZ2V0QShkMCwgaW50KGlubmVyRGltcy54KSxcXG4gICAgICAgICAgICAgICAgICAgIGludChpbm5lckRpbXMueSkpLCBpbm5lckRpbXMpO1xcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xcbiAgICAgICAgICAgICAgICAgIGlubmVyRGltcyA9IHZlYzIoZDAsIGQxKTtcXG4gICAgICAgICAgICAgICAgICByZXN1bHRbXCIrKDIqYit3KStcIl0gPSBnZXRDaGFubmVsKFxcbiAgICAgICAgICAgICAgICAgICAgZ2V0QShjaCwgaW50KGlubmVyRGltcy54KSxcXG4gICAgICAgICAgICAgICAgICAgIGludChpbm5lckRpbXMueSkpLCBpbm5lckRpbXMpO1xcbiAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgICB9XFxuICAgICAgICBcIjt0aGlzLnVzZXJDb2RlPVwiXFxuICAgICAgdm9pZCBtYWluKCkge1xcbiAgICAgICAgaXZlYzIgcmMgPSBnZXRPdXRwdXRDb29yZHMoKTtcXG5cXG4gICAgICAgIHZlYzQgcmVzdWx0ID0gdmVjNCgwKTtcXG5cXG4gICAgICAgIGludCBibG9ja0luZGV4LCBwb3MsIG9mZnNldFksIGQwLCBvZmZzZXRYLCBkMSwgY2g7XFxuICAgICAgICB2ZWMyIGlubmVyRGltcztcXG5cXG4gICAgICAgIFwiK3grXCJcXG5cXG4gICAgICAgIFwiK3Yub3V0cHV0K1wiID0gcmVzdWx0O1xcbiAgICAgIH1cXG4gICAgXCJ9LFdpPWZ1bmN0aW9uKHQsZSxuLHIsbyl7dGhpcy52YXJpYWJsZU5hbWVzPVtcInhcIl0sdGhpcy5vdXRwdXRTaGFwZT1bXTt2YXIgYSxpPWUscz10WzNdLTE7dGhpcy5vdXRwdXRTaGFwZT10O3ZhciB1PVwiZmxvYXQoXCIrbitcIikgKyBmbG9hdChcIityK1wiKSAqIHN1bVwiO2E9LjU9PT1vP1wiaW52ZXJzZXNxcnQoXCIrdStcIilcIjoxPT09bz9cIjEuMC8oXCIrdStcIilcIjpcImV4cChsb2coXCIrdStcIikgKiBmbG9hdCgtXCIrbytcIikpO1wiLHRoaXMudXNlckNvZGU9XCJcXG4gICAgICB2b2lkIG1haW4oKSB7XFxuICAgICAgICBpdmVjNCBjb29yZHMgPSBnZXRPdXRwdXRDb29yZHMoKTtcXG4gICAgICAgIGludCBiID0gY29vcmRzWzBdO1xcbiAgICAgICAgaW50IHIgPSBjb29yZHNbMV07XFxuICAgICAgICBpbnQgYyA9IGNvb3Jkc1syXTtcXG4gICAgICAgIGludCBkID0gY29vcmRzWzNdO1xcbiAgICAgICAgZmxvYXQgeCA9IGdldFgoYiwgciwgYywgZCk7XFxuICAgICAgICBmbG9hdCBzdW0gPSAwLjA7XFxuICAgICAgICBmb3IgKGludCBqID0gLVwiK2krXCI7IGogPD0gXCIraStcIjsgaisrKSB7XFxuICAgICAgICAgIGludCBpZHggPSBkICsgajtcXG4gICAgICAgICAgaWYgKGlkeCA+PSAwICYmIGlkeCA8PSAgXCIrcytcIikge1xcbiAgICAgICAgICAgIGZsb2F0IHogPSBnZXRYKGIsIHIsIGMsIGlkeCk7XFxuICAgICAgICAgICAgc3VtICs9IHogKiB6O1xcbiAgICAgICAgICB9XFxuICAgICAgICB9XFxuICAgICAgICBmbG9hdCB2YWwgPSB4ICogXCIrYStcIjtcXG4gICAgICAgIHNldE91dHB1dCh2YWwpO1xcbiAgICAgIH1cXG4gICAgXCJ9LFVpPWZ1bmN0aW9uKHQsZSxuLHIsbyl7dGhpcy52YXJpYWJsZU5hbWVzPVtcImlucHV0SW1hZ2VcIixcIm91dHB1dEltYWdlXCIsXCJkeVwiXSx0aGlzLm91dHB1dFNoYXBlPVtdLHRoaXMub3V0cHV0U2hhcGU9dCx0aGlzLmRlcHRoPXRbM10sdGhpcy5kZXB0aFJhZGl1cz1lLHRoaXMuYmlhcz1uLHRoaXMuYWxwaGE9cix0aGlzLmJldGE9byx0aGlzLnVzZXJDb2RlPVwiXFxuICAgICAgdm9pZCBtYWluKCkge1xcbiAgICAgICAgaXZlYzQgY29vcmRzID0gZ2V0T3V0cHV0Q29vcmRzKCk7XFxuICAgICAgICBpbnQgYiA9IGNvb3Jkc1swXTtcXG4gICAgICAgIGludCByID0gY29vcmRzWzFdO1xcbiAgICAgICAgaW50IGMgPSBjb29yZHNbMl07XFxuXFxuICAgICAgICBmbG9hdCByZXN1bHQgPSAwLjA7XFxuICAgICAgICBmb3IgKGludCBkID0gMDsgZCA8IFwiK3RoaXMuZGVwdGgrXCI7ICsrZCkge1xcbiAgICAgICAgICBpbnQgZGVwdGhCZWdpbiA9IGludChtYXgoMC4wLCBmbG9hdChkIC0gXCIrZStcIikpKTtcXG4gICAgICAgICAgaW50IGRlcHRoRW5kID0gaW50KG1pbihmbG9hdChcIit0aGlzLmRlcHRoK1wiKSxcXG4gICAgICAgICAgICAgIGZsb2F0KGQgKyBcIitlK1wiICsgMSkpKTtcXG5cXG4gICAgICAgICAgY29uc3QgaW50IE1JTl9ERVBUSF9CRUdJTiA9IDA7XFxuICAgICAgICAgIGNvbnN0IGludCBNQVhfREVQVEhfRU5EID0gXCIrdGhpcy5kZXB0aCtcIjtcXG5cXG4gICAgICAgICAgZmxvYXQgbm9ybSA9IDAuMDtcXG4gICAgICAgICAgZm9yIChpbnQgayA9IE1JTl9ERVBUSF9CRUdJTjsgayA8IE1BWF9ERVBUSF9FTkQ7ICsraykge1xcbiAgICAgICAgICAgIGlmIChrIDwgZGVwdGhCZWdpbil7XFxuICAgICAgICAgICAgICBjb250aW51ZTtcXG4gICAgICAgICAgICB9XFxuICAgICAgICAgICAgZWxzZSBpZiAoayA+PSBkZXB0aEJlZ2luICYmIGsgPCBkZXB0aEVuZCkge1xcbiAgICAgICAgICAgICAgbm9ybSArPSBnZXRJbnB1dEltYWdlKGIsIHIsIGMsIGspICogZ2V0SW5wdXRJbWFnZShiLCByLCBjLCBrKTtcXG4gICAgICAgICAgICB9XFxuICAgICAgICAgICAgZWxzZSB7XFxuICAgICAgICAgICAgICBicmVhaztcXG4gICAgICAgICAgICB9XFxuICAgICAgICAgIH1cXG5cXG4gICAgICAgICAgbm9ybSA9IGZsb2F0KFwiK3IrXCIpICogbm9ybSArIGZsb2F0KFwiK24rXCIpO1xcblxcbiAgICAgICAgICBmb3IoaW50IGsgPSBNSU5fREVQVEhfQkVHSU47IGsgPCBNQVhfREVQVEhfRU5EOyArK2spe1xcbiAgICAgICAgICAgIGlmIChrIDwgZGVwdGhCZWdpbil7XFxuICAgICAgICAgICAgICBjb250aW51ZTtcXG4gICAgICAgICAgICB9XFxuICAgICAgICAgICAgZWxzZSBpZiAoayA+PSBkZXB0aEJlZ2luICYmIGsgPCBkZXB0aEVuZCl7XFxuICAgICAgICAgICAgICBmbG9hdCBkeWkgPSAtMi4wICogZmxvYXQoXCIrcitcIilcXG4gICAgICAgICAgICAgICAgKiBmbG9hdChcIitvK1wiKVxcbiAgICAgICAgICAgICAgICAqIGdldElucHV0SW1hZ2UoYiAsciAsYywgaykgKiBnZXRPdXRwdXRJbWFnZShiLCByLCBjLCBkKVxcbiAgICAgICAgICAgICAgICAvIG5vcm07XFxuICAgICAgICAgICAgICBpZiAoayA9PSBkKSB7XFxuICAgICAgICAgICAgICAgIGR5aSArPSBwb3cobm9ybSwgLTEuMCAqIFwiK28rXCIpO1xcbiAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgICAgaWYgKGsgPT0gY29vcmRzWzNdKSB7XFxuICAgICAgICAgICAgICAgIGR5aSAqPSBnZXREeShiLCByLCBjLCBkKTtcXG4gICAgICAgICAgICAgICAgcmVzdWx0ICs9IGR5aTtcXG4gICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICB9XFxuICAgICAgICAgICAgZWxzZSB7XFxuICAgICAgICAgICAgICBicmVhaztcXG4gICAgICAgICAgICB9XFxuICAgICAgICAgIH1cXG4gICAgICB9XFxuICAgICAgc2V0T3V0cHV0KHJlc3VsdCk7XFxuICAgICAgfVxcbiAgICBcIn0sVmk9ZnVuY3Rpb24odCxlLG4scixvKXt0aGlzLnZhcmlhYmxlTmFtZXM9W1wieFwiXSx0aGlzLm91dHB1dFNoYXBlPVtdLHRoaXMucGFja2VkSW5wdXRzPSEwLHRoaXMucGFja2VkT3V0cHV0PSEwO3ZhciBhLGk9ZSxzPXRbM10tMTt0aGlzLm91dHB1dFNoYXBlPXQ7dmFyIHU9XCJmbG9hdChcIituK1wiKSArIGZsb2F0KFwiK3IrXCIpICogc3VtXCI7YT0uNT09PW8/XCJpbnZlcnNlc3FydChcIit1K1wiKVwiOjE9PT1vP1wiMS4wLyhcIit1K1wiKVwiOlwiZXhwKGxvZyhcIit1K1wiKSAqIGZsb2F0KC1cIitvK1wiKSk7XCIsdGhpcy51c2VyQ29kZT1cIlxcbiAgICAgIHZvaWQgbWFpbigpIHtcXG4gICAgICAgIGl2ZWM0IGNvb3JkcyA9IGdldE91dHB1dENvb3JkcygpO1xcbiAgICAgICAgaW50IGIgPSBjb29yZHMueDtcXG4gICAgICAgIGludCByID0gY29vcmRzLnk7XFxuICAgICAgICBpbnQgYyA9IGNvb3Jkcy56O1xcbiAgICAgICAgaW50IGQgPSBjb29yZHMudztcXG5cXG4gICAgICAgIGJvb2wgaGFzTmV4dENvbCA9IGQgPCBcIit0aGlzLm91dHB1dFNoYXBlWzNdK1wiO1xcbiAgICAgICAgYm9vbCBoYXNOZXh0Um93ID0gYyA8IFwiK3RoaXMub3V0cHV0U2hhcGVbMl0rXCI7XFxuXFxuICAgICAgICB2ZWM0IHN1bSA9IHZlYzQoMC4pO1xcbiAgICAgICAgdmVjNCB4RnJhZ0F0T3V0cHV0Q29vcmRzID0gZ2V0WChiLCByLCBjLCBkKTtcXG5cXG4gICAgICAgIHZlYzQgeEF0T3V0cHV0Q29vcmRzID0gdmVjNChcXG4gICAgICAgICAgZ2V0Q2hhbm5lbCh4RnJhZ0F0T3V0cHV0Q29vcmRzLCB2ZWMyKGMsIGQpKSxcXG4gICAgICAgICAgaGFzTmV4dENvbCA/XFxuICAgICAgICAgICAgZ2V0Q2hhbm5lbCh4RnJhZ0F0T3V0cHV0Q29vcmRzLCB2ZWMyKGMsIGQgKyAxKSkgOiAwLjAsXFxuICAgICAgICAgIGhhc05leHRSb3cgP1xcbiAgICAgICAgICAgIGdldENoYW5uZWwoeEZyYWdBdE91dHB1dENvb3JkcyAsIHZlYzIoYyArIDEsIGQpKSA6IDAuMCxcXG4gICAgICAgICAgKGhhc05leHRSb3cgJiYgaGFzTmV4dENvbCkgP1xcbiAgICAgICAgICAgIGdldENoYW5uZWwoeEZyYWdBdE91dHB1dENvb3JkcywgdmVjMihjICsgMSwgZCArIDEpKSA6IDAuMFxcbiAgICAgICAgKTtcXG5cXG4gICAgICAgIGludCBmaXJzdENoYW5uZWwgPSBkIC0gXCIraStcIjtcXG4gICAgICAgIHZlYzIgY2FjaGUgPSB2ZWMyKDAuKTtcXG4gICAgICAgIGlmKGZpcnN0Q2hhbm5lbCA+PSAwKXtcXG4gICAgICAgICAgdmVjNCBmaXJzdENoYW5uZWxGcmFnID0gZ2V0WChiLCByLCBjLCBmaXJzdENoYW5uZWwpO1xcbiAgICAgICAgICBjYWNoZS54ID0gZ2V0Q2hhbm5lbChmaXJzdENoYW5uZWxGcmFnLCB2ZWMyKGMsIGZpcnN0Q2hhbm5lbCkpO1xcbiAgICAgICAgICAgIGlmKGhhc05leHRSb3cpe1xcbiAgICAgICAgICAgICAgY2FjaGUueSA9IGdldENoYW5uZWwoZmlyc3RDaGFubmVsRnJhZywgdmVjMihjICsgMSwgZmlyc3RDaGFubmVsKSk7XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgfVxcblxcbiAgICAgICAgaXZlYzIgZGVwdGggPSBpdmVjMihkLCBkICsgMSk7XFxuICAgICAgICBmb3IgKGludCBqID0gLSBcIitpK1wiOyBqIDw9IFwiK2krXCI7IGorKykge1xcbiAgICAgICAgICBpdmVjMiBpZHggPSBkZXB0aCArIGo7XFxuICAgICAgICAgIGJ2ZWMyIGFib3ZlTG93ZXJCb3VuZCA9IGdyZWF0ZXJUaGFuRXF1YWwoaWR4LCBpdmVjMigwKSk7XFxuICAgICAgICAgIGJ2ZWMyIGJlbG93VXBwZXJCb3VuZCA9IGxlc3NUaGFuRXF1YWwoaWR4LCBpdmVjMihcIitzK1wiKSk7XFxuXFxuICAgICAgICAgIGJvb2wgZGVwdGhJblJhbmdlID0gYWJvdmVMb3dlckJvdW5kLnggJiYgYmVsb3dVcHBlckJvdW5kLng7XFxuICAgICAgICAgIGJvb2wgZGVwdGhQbHVzT25lSW5SYW5nZSA9IGFib3ZlTG93ZXJCb3VuZC55ICYmIGJlbG93VXBwZXJCb3VuZC55O1xcblxcbiAgICAgICAgICBpZihkZXB0aEluUmFuZ2UgfHwgZGVwdGhQbHVzT25lSW5SYW5nZSl7XFxuICAgICAgICAgICAgdmVjNCB6ID0gdmVjNCgwLik7XFxuICAgICAgICAgICAgdmVjNCB4RnJhZ0F0Q3VycmVudERlcHRoO1xcbiAgICAgICAgICAgIHoueHogPSBjYWNoZS54eTtcXG4gICAgICAgICAgICBpZihkZXB0aFBsdXNPbmVJblJhbmdlICYmIGhhc05leHRDb2wpe1xcbiAgICAgICAgICAgICAgeEZyYWdBdEN1cnJlbnREZXB0aCA9IGlkeC55ICE9IGQgP1xcbiAgICAgICAgICAgICAgICBnZXRYKGIsIHIsIGMsIGlkeC55KSA6IHhGcmFnQXRPdXRwdXRDb29yZHM7XFxuICAgICAgICAgICAgICB6LnkgPSBnZXRDaGFubmVsKHhGcmFnQXRDdXJyZW50RGVwdGgsIHZlYzIoYywgaWR4LnkpKTtcXG4gICAgICAgICAgICAgIGlmKGhhc05leHRSb3cpe1xcbiAgICAgICAgICAgICAgICB6LncgPSBnZXRDaGFubmVsKHhGcmFnQXRDdXJyZW50RGVwdGgsIHZlYzIoYyArIDEsIGlkeC55KSk7XFxuICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgICAgIGNhY2hlLnh5ID0gei55dztcXG4gICAgICAgICAgICBzdW0gKz0geiAqIHo7XFxuICAgICAgICAgIH1cXG4gICAgICAgIH1cXG4gICAgICAgIHZlYzQgcmVzdWx0ID0geEF0T3V0cHV0Q29vcmRzICogXCIrYStcIjtcXG4gICAgICAgIHNldE91dHB1dChyZXN1bHQpO1xcbiAgICAgIH1cXG4gICAgXCJ9LHppPWZ1bmN0aW9uKHQpe3RoaXMudmFyaWFibGVOYW1lcz1bXCJkeVwiLFwibWF4UG9zXCJdLHRoaXMub3V0cHV0U2hhcGU9dC5pblNoYXBlO3ZhciBlPXQuc3RyaWRlSGVpZ2h0LG49dC5zdHJpZGVXaWR0aCxyPXQuZGlsYXRpb25IZWlnaHQsbz10LmVmZmVjdGl2ZUZpbHRlckhlaWdodCxhPXQuZWZmZWN0aXZlRmlsdGVyV2lkdGgsaT1vLTEtdC5wYWRJbmZvLnRvcCxzPWEtMS10LnBhZEluZm8ubGVmdCx1PW8qYS0xO3RoaXMudXNlckNvZGU9XCJcXG4gICAgICBjb25zdCBpdmVjMiBwYWRzID0gaXZlYzIoXCIraStcIiwgXCIrcytcIik7XFxuXFxuICAgICAgdm9pZCBtYWluKCkge1xcbiAgICAgICAgaXZlYzQgY29vcmRzID0gZ2V0T3V0cHV0Q29vcmRzKCk7XFxuICAgICAgICBpbnQgYiA9IGNvb3Jkc1swXTtcXG4gICAgICAgIGludCBkID0gY29vcmRzWzNdO1xcblxcbiAgICAgICAgaXZlYzIgZHlSQ0Nvcm5lciA9IGNvb3Jkcy55eiAtIHBhZHM7XFxuICAgICAgICBpbnQgZHlSQ29ybmVyID0gZHlSQ0Nvcm5lci54O1xcbiAgICAgICAgaW50IGR5Q0Nvcm5lciA9IGR5UkNDb3JuZXIueTtcXG5cXG4gICAgICAgIC8vIENvbnZvbHZlIGR5KD8sID8sIGQpIHdpdGggcG9zIG1hc2soOiwgOiwgZCkgdG8gZ2V0IGR4KHhSLCB4QywgZCkuXFxuICAgICAgICAvLyA/ID0gdG8gYmUgZGV0ZXJtaW5lZC4gOiA9IGFjcm9zcyBhbGwgdmFsdWVzIGluIHRoYXQgYXhpcy5cXG4gICAgICAgIGZsb2F0IGRvdFByb2QgPSAwLjA7XFxuICAgICAgICBmb3IgKGludCB3UiA9IDA7IHdSIDwgXCIrbytcIjtcXG4gICAgICAgICAgd1IgKz0gXCIrcitcIikge1xcbiAgICAgICAgICBmbG9hdCBkeVIgPSBmbG9hdChkeVJDb3JuZXIgKyB3UikgLyBcIitlK1wiLjA7XFxuXFxuICAgICAgICAgIGlmIChkeVIgPCAwLjAgfHwgZHlSID49IFwiK3Qub3V0SGVpZ2h0K1wiLjAgfHwgZnJhY3QoZHlSKSA+IDAuMCkge1xcbiAgICAgICAgICAgIGNvbnRpbnVlO1xcbiAgICAgICAgICB9XFxuICAgICAgICAgIGludCBpZHlSID0gaW50KGR5Uik7XFxuXFxuICAgICAgICAgIGZvciAoaW50IHdDID0gMDsgd0MgPCBcIithK1wiOyB3QysrKSB7XFxuICAgICAgICAgICAgZmxvYXQgZHlDID0gZmxvYXQoZHlDQ29ybmVyICsgd0MpIC8gXCIrbitcIi4wO1xcblxcbiAgICAgICAgICAgIGlmIChkeUMgPCAwLjAgfHwgZHlDID49IFwiK3Qub3V0V2lkdGgrXCIuMCB8fFxcbiAgICAgICAgICAgICAgICBmcmFjdChkeUMpID4gMC4wKSB7XFxuICAgICAgICAgICAgICBjb250aW51ZTtcXG4gICAgICAgICAgICB9XFxuICAgICAgICAgICAgaW50IGlkeUMgPSBpbnQoZHlDKTtcXG5cXG4gICAgICAgICAgICBmbG9hdCBkeVZhbHVlID0gZ2V0RHkoYiwgaWR5UiwgaWR5QywgZCk7XFxuICAgICAgICAgICAgaW50IG1heFBvc1ZhbHVlID0gXCIrdStcIiAtIGludChnZXRNYXhQb3MoYiwgaWR5UiwgaWR5QywgZCkpO1xcblxcbiAgICAgICAgICAgIC8vIEdldCB0aGUgY3VycmVudCB2YWx1ZSwgY2hlY2sgaXQgYWdhaW5zdCB0aGUgdmFsdWUgZnJvbSB0aGVcXG4gICAgICAgICAgICAvLyBwb3NpdGlvbiBtYXRyaXguXFxuICAgICAgICAgICAgaW50IGN1clBvc1ZhbHVlID0gd1IgKiBcIithK1wiICsgd0M7XFxuICAgICAgICAgICAgZmxvYXQgbWFzayA9IGZsb2F0KG1heFBvc1ZhbHVlID09IGN1clBvc1ZhbHVlID8gMS4wIDogMC4wKTtcXG5cXG4gICAgICAgICAgICBkb3RQcm9kICs9IGR5VmFsdWUgKiBtYXNrO1xcbiAgICAgICAgICB9XFxuICAgICAgICB9XFxuICAgICAgICBzZXRPdXRwdXQoZG90UHJvZCk7XFxuICAgICAgfVxcbiAgICBcIn0sR2k9ZnVuY3Rpb24odCl7dGhpcy52YXJpYWJsZU5hbWVzPVtcImR5XCIsXCJtYXhQb3NcIl0sdGhpcy5vdXRwdXRTaGFwZT10LmluU2hhcGU7dmFyIGU9dC5zdHJpZGVEZXB0aCxuPXQuc3RyaWRlSGVpZ2h0LHI9dC5zdHJpZGVXaWR0aCxvPXQuZGlsYXRpb25EZXB0aCxhPXQuZGlsYXRpb25IZWlnaHQsaT10LmRpbGF0aW9uV2lkdGgscz10LmVmZmVjdGl2ZUZpbHRlckRlcHRoLHU9dC5lZmZlY3RpdmVGaWx0ZXJIZWlnaHQsYz10LmVmZmVjdGl2ZUZpbHRlcldpZHRoLGw9cy0xLXQucGFkSW5mby5mcm9udCxoPXUtMS10LnBhZEluZm8udG9wLGY9Yy0xLXQucGFkSW5mby5sZWZ0LGQ9cyp1KmMtMTt0aGlzLnVzZXJDb2RlPVwiXFxuICAgICAgY29uc3QgaXZlYzMgcGFkcyA9IGl2ZWMzKFwiK2wrXCIsIFwiK2grXCIsIFwiK2YrXCIpO1xcblxcbiAgICAgIHZvaWQgbWFpbigpIHtcXG4gICAgICAgIGl2ZWM1IGNvb3JkcyA9IGdldE91dHB1dENvb3JkcygpO1xcbiAgICAgICAgaW50IGJhdGNoID0gY29vcmRzLng7XFxuICAgICAgICBpbnQgY2ggPSBjb29yZHMudTtcXG5cXG4gICAgICAgIGl2ZWMzIGR5Q29ybmVyID0gaXZlYzMoY29vcmRzLnksIGNvb3Jkcy56LCBjb29yZHMudykgLSBwYWRzO1xcbiAgICAgICAgaW50IGR5RENvcm5lciA9IGR5Q29ybmVyLng7XFxuICAgICAgICBpbnQgZHlSQ29ybmVyID0gZHlDb3JuZXIueTtcXG4gICAgICAgIGludCBkeUNDb3JuZXIgPSBkeUNvcm5lci56O1xcblxcbiAgICAgICAgLy8gQ29udm9sdmUgZHkoPywgPywgPywgY2gpIHdpdGggcG9zIG1hc2soOiwgOiwgOiwgZCkgdG8gZ2V0XFxuICAgICAgICAvLyBkeCh4RCwgeFIsIHhDLCBjaCkuXFxuICAgICAgICAvLyA/ID0gdG8gYmUgZGV0ZXJtaW5lZC4gOiA9IGFjcm9zcyBhbGwgdmFsdWVzIGluIHRoYXQgYXhpcy5cXG4gICAgICAgIGZsb2F0IGRvdFByb2QgPSAwLjA7XFxuXFxuICAgICAgICBmb3IgKGludCB3RCA9IDA7IHdEIDwgXCIrcytcIjtcXG4gICAgICAgICAgIHdEICs9IFwiK28rXCIpIHtcXG4gICAgICAgICAgZmxvYXQgZHlEID0gZmxvYXQoZHlEQ29ybmVyICsgd0QpIC8gXCIrZStcIi4wO1xcblxcbiAgICAgICAgICBpZiAoZHlEIDwgMC4wIHx8IGR5RCA+PSBcIit0Lm91dERlcHRoK1wiLjAgfHwgZnJhY3QoZHlEKSA+IDAuMCkge1xcbiAgICAgICAgICAgIGNvbnRpbnVlO1xcbiAgICAgICAgICB9XFxuICAgICAgICAgIGludCBpZHlEID0gaW50KGR5RCk7XFxuXFxuICAgICAgICAgIGZvciAoaW50IHdSID0gMDsgd1IgPCBcIit1K1wiO1xcbiAgICAgICAgICAgICAgd1IgKz0gXCIrYStcIikge1xcbiAgICAgICAgICAgIGZsb2F0IGR5UiA9IGZsb2F0KGR5UkNvcm5lciArIHdSKSAvIFwiK24rXCIuMDtcXG5cXG4gICAgICAgICAgICBpZiAoZHlSIDwgMC4wIHx8IGR5UiA+PSBcIit0Lm91dEhlaWdodCtcIi4wIHx8XFxuICAgICAgICAgICAgICAgIGZyYWN0KGR5UikgPiAwLjApIHtcXG4gICAgICAgICAgICAgIGNvbnRpbnVlO1xcbiAgICAgICAgICAgIH1cXG4gICAgICAgICAgICBpbnQgaWR5UiA9IGludChkeVIpO1xcblxcbiAgICAgICAgICAgIGZvciAoaW50IHdDID0gMDsgd0MgPCBcIitjK1wiO1xcbiAgICAgICAgICAgICAgICB3QyArPSBcIitpK1wiKSB7XFxuICAgICAgICAgICAgICBmbG9hdCBkeUMgPSBmbG9hdChkeUNDb3JuZXIgKyB3QykgLyBcIityK1wiLjA7XFxuXFxuICAgICAgICAgICAgICBpZiAoZHlDIDwgMC4wIHx8IGR5QyA+PSBcIit0Lm91dFdpZHRoK1wiLjAgfHxcXG4gICAgICAgICAgICAgICAgICBmcmFjdChkeUMpID4gMC4wKSB7XFxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xcbiAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgICAgaW50IGlkeUMgPSBpbnQoZHlDKTtcXG5cXG4gICAgICAgICAgICAgIGZsb2F0IGR5VmFsdWUgPSBnZXREeShiYXRjaCwgaWR5RCwgaWR5UiwgaWR5QywgY2gpO1xcbiAgICAgICAgICAgICAgaW50IG1heFBvc1ZhbHVlID0gXCIrZCtcIiAtXFxuICAgICAgICAgICAgICAgICAgaW50KGdldE1heFBvcyhiYXRjaCwgaWR5RCwgaWR5UiwgaWR5QywgY2gpKTtcXG5cXG4gICAgICAgICAgICAgIC8vIEdldCB0aGUgY3VycmVudCB2YWx1ZSwgY2hlY2sgaXQgYWdhaW5zdCB0aGUgdmFsdWUgZnJvbSB0aGVcXG4gICAgICAgICAgICAgIC8vIHBvc2l0aW9uIG1hdHJpeC5cXG4gICAgICAgICAgICAgIGludCBjdXJQb3NWYWx1ZSA9XFxuICAgICAgICAgICAgICAgICAgd0QgKiBcIit1K1wiICogXCIrYytcIiArXFxuICAgICAgICAgICAgICAgICAgd1IgKiBcIitjK1wiICsgd0M7XFxuICAgICAgICAgICAgICBmbG9hdCBtYXNrID0gZmxvYXQobWF4UG9zVmFsdWUgPT0gY3VyUG9zVmFsdWUgPyAxLjAgOiAwLjApO1xcblxcbiAgICAgICAgICAgICAgZG90UHJvZCArPSBkeVZhbHVlICogbWFzaztcXG4gICAgICAgICAgICB9XFxuICAgICAgICAgIH1cXG4gICAgICAgIH1cXG4gICAgICAgIHNldE91dHB1dChkb3RQcm9kKTtcXG4gICAgICB9XFxuICAgIFwifSxIaT1mdW5jdGlvbih0LGUsbixyLG8sYSxpKXt2b2lkIDA9PT1uJiYobj0hMSksdm9pZCAwPT09ciYmKHI9ITEpLHZvaWQgMD09PW8mJihvPSExKSx2b2lkIDA9PT1hJiYoYT1udWxsKSx2b2lkIDA9PT1pJiYoaT0hMSksdGhpcy52YXJpYWJsZU5hbWVzPVtcIm1hdHJpeEFcIixcIm1hdHJpeEJcIl0sdGhpcy5wYWNrZWRJbnB1dHM9ITAsdGhpcy5wYWNrZWRPdXRwdXQ9ITAsdGhpcy5vdXRwdXRTaGFwZT1lO3ZhciBzPW4/dFsxXTp0WzJdLHU9TWF0aC5jZWlsKHMvMiksYz1uP1wiaSAqIDIsIHJjLnlcIjpcInJjLnksIGkgKiAyXCIsbD1yP1wicmMueiwgaSAqIDJcIjpcImkgKiAyLCByYy56XCIsaD1uP1tcImEueHh5eVwiLFwiYS56end3XCJdOltcImEueHh6elwiLFwiYS55eXd3XCJdLGY9cj9bXCJiLnh6eHpcIixcImIueXd5d1wiXTpbXCJiLnh5eHlcIixcImIuend6d1wiXSxkPVwiXCIscD1cIlwiO2EmJihkPWk/XCJ2ZWM0IGFjdGl2YXRpb24odmVjNCBhKSB7XFxuICAgICAgICAgIHZlYzQgYiA9IGdldFByZWx1QWN0aXZhdGlvbldlaWdodHNBdE91dENvb3JkcygpO1xcbiAgICAgICAgICBcIithK1wiXFxuICAgICAgICB9XCI6XCJ2ZWM0IGFjdGl2YXRpb24odmVjNCB4KSB7XFxuICAgICAgICAgIFwiK2ErXCJcXG4gICAgICAgIH1cIixwPVwicmVzdWx0ID0gYWN0aXZhdGlvbihyZXN1bHQpO1wiKTt2YXIgdj1vP1wicmVzdWx0ICs9IGdldEJpYXNBdE91dENvb3JkcygpO1wiOlwiXCI7byYmdGhpcy52YXJpYWJsZU5hbWVzLnB1c2goXCJiaWFzXCIpLGkmJnRoaXMudmFyaWFibGVOYW1lcy5wdXNoKFwicHJlbHVBY3RpdmF0aW9uV2VpZ2h0c1wiKSx0aGlzLnVzZXJDb2RlPVwiXFxuICAgICAgXCIrZCtcIlxcblxcbiAgICAgIGNvbnN0IGZsb2F0IHNoYXJlZERpbWVuc2lvbiA9IFwiK3UrXCIuMDtcXG5cXG4gICAgICB2ZWM0IGRvdDJ4MkFSb3dCQ29sKGl2ZWMzIHJjKSB7XFxuICAgICAgICB2ZWM0IHJlc3VsdCA9IHZlYzQoMCk7XFxuICAgICAgICBmb3IgKGludCBpID0gMDsgaSA8IFwiK3UrXCI7IGkrKykge1xcbiAgICAgICAgICB2ZWM0IGEgPSBnZXRNYXRyaXhBKHJjLngsIFwiK2MrXCIpO1xcbiAgICAgICAgICB2ZWM0IGIgPSBnZXRNYXRyaXhCKHJjLngsIFwiK2wrXCIpO1xcblxcbiAgICAgICAgICAvLyBUaGVzZSBzd2l6emxlZCBwcm9kdWN0cyBuZWVkIHRvIGJlIHNlcGFyYXRlbHkgYWRkZWQuXFxuICAgICAgICAgIC8vIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL3RlbnNvcmZsb3cvdGZqcy9pc3N1ZXMvMTczNVxcbiAgICAgICAgICByZXN1bHQgKz0gKFwiK2hbMF0rXCIgKiBcIitmWzBdK1wiKTtcXG4gICAgICAgICAgcmVzdWx0ICs9IChcIitoWzFdK1wiICogXCIrZlsxXStcIik7XFxuICAgICAgICB9XFxuICAgICAgICByZXR1cm4gcmVzdWx0O1xcbiAgICAgIH1cXG5cXG4gICAgICB2b2lkIG1haW4oKSB7XFxuICAgICAgICBpdmVjMyByYyA9IGdldE91dHB1dENvb3JkcygpO1xcbiAgICAgICAgdmVjNCByZXN1bHQgPSBkb3QyeDJBUm93QkNvbChyYyk7XFxuXFxuICAgICAgICBcIit2K1wiXFxuXFxuICAgICAgICBcIitwK1wiXFxuXFxuICAgICAgICBzZXRPdXRwdXQocmVzdWx0KTtcXG4gICAgICB9XFxuICAgIFwifSxxaT1mdW5jdGlvbigpe2Z1bmN0aW9uIHQodCxlLG4pe3RoaXMudmFyaWFibGVOYW1lcz1bXCJwcm9ic1wiXSx0aGlzLm91dHB1dFNoYXBlPVt0LG5dLHRoaXMudXNlckNvZGU9XCJcXG4gICAgICB1bmlmb3JtIGZsb2F0IHNlZWQ7XFxuXFxuICAgICAgdm9pZCBtYWluKCkge1xcbiAgICAgICAgaXZlYzIgY29vcmRzID0gZ2V0T3V0cHV0Q29vcmRzKCk7XFxuICAgICAgICBpbnQgYmF0Y2ggPSBjb29yZHNbMF07XFxuXFxuICAgICAgICBmbG9hdCByID0gcmFuZG9tKHNlZWQpO1xcbiAgICAgICAgZmxvYXQgY2RmID0gMC4wO1xcblxcbiAgICAgICAgZm9yIChpbnQgaSA9IDA7IGkgPCBcIisoZS0xKStcIjsgaSsrKSB7XFxuICAgICAgICAgIGNkZiArPSBnZXRQcm9icyhiYXRjaCwgaSk7XFxuXFxuICAgICAgICAgIGlmIChyIDwgY2RmKSB7XFxuICAgICAgICAgICAgc2V0T3V0cHV0KGZsb2F0KGkpKTtcXG4gICAgICAgICAgICByZXR1cm47XFxuICAgICAgICAgIH1cXG4gICAgICAgIH1cXG5cXG4gICAgICAgIC8vIElmIG5vIG90aGVyIGV2ZW50IGhhcHBlbmVkLCBsYXN0IGV2ZW50IGhhcHBlbmVkLlxcbiAgICAgICAgc2V0T3V0cHV0KGZsb2F0KFwiKyhlLTEpK1wiKSk7XFxuICAgICAgfVxcbiAgICBcIn1yZXR1cm4gdC5wcm90b3R5cGUuZ2V0Q3VzdG9tU2V0dXBGdW5jPWZ1bmN0aW9uKHQpe3ZhciBlPXRoaXM7cmV0dXJuIGZ1bmN0aW9uKG4scil7bnVsbD09ZS5zZWVkTG9jJiYoZS5zZWVkTG9jPW4uZ2V0VW5pZm9ybUxvY2F0aW9uKHIsXCJzZWVkXCIpKSxuLmdsLnVuaWZvcm0xZihlLnNlZWRMb2MsdCl9fSx0fSgpLEtpPWZ1bmN0aW9uKHQsZSxuLHIpe3RoaXMudmFyaWFibGVOYW1lcz1bXCJpbmRpY2VzXCJdLHRoaXMub3V0cHV0U2hhcGU9W3QsZV0sdGhpcy51c2VyQ29kZT1cIlxcbiAgICAgIHZvaWQgbWFpbigpIHtcXG4gICAgICAgIGl2ZWMyIGNvb3JkcyA9IGdldE91dHB1dENvb3JkcygpO1xcbiAgICAgICAgaW50IGluZGV4ID0gcm91bmQoZ2V0SW5kaWNlcyhjb29yZHMueCkpO1xcbiAgICAgICAgc2V0T3V0cHV0KG1peChmbG9hdChcIityK1wiKSwgZmxvYXQoXCIrbitcIiksXFxuICAgICAgICAgICAgICAgICAgICAgIGZsb2F0KGluZGV4ID09IGNvb3Jkcy55KSkpO1xcbiAgICAgIH1cXG4gICAgXCJ9LGppPWZ1bmN0aW9uKHQpe3RoaXMudmFyaWFibGVOYW1lcz1bXCJBXCJdLHRoaXMucGFja2VkSW5wdXRzPSExLHRoaXMucGFja2VkT3V0cHV0PSEwLHRoaXMub3V0cHV0U2hhcGU9dDt2YXIgZT10Lmxlbmd0aDtpZigwPT09ZSl0aGlzLnVzZXJDb2RlPVwiXFxuICAgICAgICB2b2lkIG1haW4oKSB7XFxuICAgICAgICAgIHNldE91dHB1dCh2ZWM0KGdldEEoKSwgMC4sIDAuLCAwLikpO1xcbiAgICAgICAgfVxcbiAgICAgIFwiO2Vsc2V7dmFyIG49c2EoXCJyY1wiLGUpLHI9d2EoZSksbz1mdW5jdGlvbih0LGUsbil7aWYoMT09PXQpcmV0dXJuXCJyYyA+IFwiK2VbMF07Zm9yKHZhciByPVwiXCIsbz10LTI7bzx0O28rKylyKz1uW29dK1wiID49IFwiK2Vbb10sbzx0LTEmJihyKz1cInx8XCIpO3JldHVybiByfShlLHQsbiksYT1mdW5jdGlvbih0LGUsbixyKXtpZigxPT09dClyZXR1cm5cIlwiO3ZhciBvPXIuc2xpY2UoLTIpO3JldHVyblwiXFxuICAgIGludCByID0gXCIrb1swXStcIjtcXG4gICAgaW50IGMgPSBcIitvWzFdK1wiO1xcbiAgICBpbnQgcnAxID0gciArIDE7XFxuICAgIGludCBjcDEgPSBjICsgMTtcXG5cXG4gICAgYm9vbCBjRWRnZSA9IGNwMSA+PSBcIitlK1wiO1xcbiAgICBib29sIHJFZGdlID0gcnAxID49IFwiK24rXCI7XFxuICBcIn0oZSx0W3QubGVuZ3RoLTFdLHRbdC5sZW5ndGgtMl0sbiksaT1mdW5jdGlvbih0LGUpe3ZhciBuPXQubGVuZ3RoLHI9ZnVuY3Rpb24odCxlKXtmb3IodmFyIG49W10scj0wO3I8PTE7cisrKWZvcih2YXIgbz0wO288PTE7bysrKXtmb3IodmFyIGE9KDA9PT1yP1wiclwiOlwicnAxXCIpK1wiLCBcIisoMD09PW8/XCJjXCI6XCJjcDFcIiksaT0yO2k8dDtpKyspYT1lW2UubGVuZ3RoLTEtaV0rXCIsXCIrYTtuLnB1c2goYSl9cmV0dXJuIG59KG4sZSk7cmV0dXJuIDE9PT1uP1wiZ2V0QShyYyksXFxuICAgICAgICAgICAgcmMgKyAxID49IFwiK3RbMF0rXCIgPyAwLiA6IGdldEEocmMgKyAxKSxcXG4gICAgICAgICAgICAwLCAwXCI6XCJnZXRBKFwiK3JbMF0rXCIpLFxcbiAgICAgICAgICBjRWRnZSA/IDAuIDogZ2V0QShcIityWzFdK1wiKSxcXG4gICAgICAgICAgckVkZ2UgPyAwLiA6IGdldEEoXCIrclsyXStcIiksXFxuICAgICAgICAgIHJFZGdlIHx8IGNFZGdlID8gMC4gOiBnZXRBKFwiK3JbM10rXCIpXCJ9KHQsbik7dGhpcy51c2VyQ29kZT1cIlxcbiAgICAgICAgdm9pZCBtYWluKCkge1xcbiAgICAgICAgICBcIityK1wiIHJjID0gZ2V0T3V0cHV0Q29vcmRzKCk7XFxuXFxuICAgICAgICAgIGlmKFwiK28rXCIpIHtcXG4gICAgICAgICAgICBzZXRPdXRwdXQodmVjNCgwKSk7XFxuICAgICAgICAgIH0gZWxzZSB7XFxuICAgICAgICAgICAgXCIrYStcIlxcblxcbiAgICAgICAgICAgIHNldE91dHB1dCh2ZWM0KFwiK2krXCIpKTtcXG4gICAgICAgICAgfVxcbiAgICAgICAgfVxcbiAgICAgIFwifX07dmFyIFhpPWZ1bmN0aW9uKHQsZSxuKXt0aGlzLnZhcmlhYmxlTmFtZXM9W1wieFwiXSx0aGlzLm91dHB1dFNoYXBlPWUubWFwKChmdW5jdGlvbihlLG4pe3JldHVybiBlWzBdK3Rbbl0rZVsxXX0pKTt2YXIgcj10Lmxlbmd0aCxvPXdhKHIpLGE9ZS5tYXAoKGZ1bmN0aW9uKHQpe3JldHVybiB0WzBdfSkpLmpvaW4oXCIsXCIpLGk9ZS5tYXAoKGZ1bmN0aW9uKGUsbil7cmV0dXJuIGVbMF0rdFtuXX0pKS5qb2luKFwiLFwiKSxzPVtcImNvb3Jkc1swXVwiLFwiY29vcmRzWzFdXCIsXCJjb29yZHNbMl1cIixcImNvb3Jkc1szXVwiXS5zbGljZSgwLHIpO3RoaXMudXNlckNvZGU9MSE9PXI/XCJcXG4gICAgICBcIitvK1wiIHN0YXJ0ID0gXCIrbytcIihcIithK1wiKTtcXG4gICAgICBcIitvK1wiIGVuZCA9IFwiK28rXCIoXCIraStcIik7XFxuXFxuICAgICAgdm9pZCBtYWluKCkge1xcbiAgICAgICAgXCIrbytcIiBvdXRDID0gZ2V0T3V0cHV0Q29vcmRzKCk7XFxuICAgICAgICBpZiAoYW55KGxlc3NUaGFuKG91dEMsIHN0YXJ0KSkgfHwgYW55KGdyZWF0ZXJUaGFuRXF1YWwob3V0QywgZW5kKSkpIHtcXG4gICAgICAgICAgc2V0T3V0cHV0KGZsb2F0KFwiK24rXCIpKTtcXG4gICAgICAgIH0gZWxzZSB7XFxuICAgICAgICAgIFwiK28rXCIgY29vcmRzID0gb3V0QyAtIHN0YXJ0O1xcbiAgICAgICAgICBzZXRPdXRwdXQoZ2V0WChcIitzK1wiKSk7XFxuICAgICAgICB9XFxuICAgICAgfVxcbiAgICBcIjpcIlxcbiAgICAgICAgaW50IHN0YXJ0ID0gXCIrYStcIjtcXG4gICAgICAgIGludCBlbmQgPSBcIitpK1wiO1xcblxcbiAgICAgICAgdm9pZCBtYWluKCkge1xcbiAgICAgICAgICBpbnQgb3V0QyA9IGdldE91dHB1dENvb3JkcygpO1xcbiAgICAgICAgICBpZiAob3V0QyA8IHN0YXJ0IHx8IG91dEMgPj0gZW5kKSB7XFxuICAgICAgICAgICAgc2V0T3V0cHV0KGZsb2F0KFwiK24rXCIpKTtcXG4gICAgICAgICAgfSBlbHNlIHtcXG4gICAgICAgICAgICBzZXRPdXRwdXQoZ2V0WChvdXRDIC0gc3RhcnQpKTtcXG4gICAgICAgICAgfVxcbiAgICAgICAgfVxcbiAgICAgIFwifSxZaT1mdW5jdGlvbih0LGUsbil7dGhpcy52YXJpYWJsZU5hbWVzPVtcInhcIl0sdGhpcy5wYWNrZWRJbnB1dHM9ITAsdGhpcy5wYWNrZWRPdXRwdXQ9ITAsdGhpcy5vdXRwdXRTaGFwZT1lLm1hcCgoZnVuY3Rpb24oZSxuKXtyZXR1cm4gZVswXSt0W25dK2VbMV19KSk7Zm9yKHZhciByPXQubGVuZ3RoLG89d2EociksYT1lLm1hcCgoZnVuY3Rpb24odCl7cmV0dXJuIHRbMF19KSkuam9pbihcIixcIiksaT1lLm1hcCgoZnVuY3Rpb24oZSxuKXtyZXR1cm4gZVswXSt0W25dfSkpLmpvaW4oXCIsXCIpLHM9c2EoXCJyY1wiLHIpLHU9c2EoXCJzb3VyY2VcIixyKSxjPXNbci0xXStcIiA8IFwiK3RoaXMub3V0cHV0U2hhcGVbci0xXSxsPTE9PT1yP1wic291cmNlXCI6XCJ2ZWMyKFwiK3Uuc2xpY2UoLTIpLmpvaW4oKStcIilcIixoPVtvK1wiIHJjID0gb3V0cHV0TG9jO1wiLHNbci0xXStcIiArPSAxO1xcbiAgICAgICBpZihcIitjK1wiKSB7XFxuICAgICAgXCIsMT09PXI/XCJcIjpcIn1cXG4gICAgICAgcmMgPSBvdXRwdXRMb2M7XFxuICAgICAgIFwiK3Nbci0yXStcIiArPSAxO1xcbiAgICAgICBpZihcIitzW3ItMl0rXCIgPCBcIit0aGlzLm91dHB1dFNoYXBlW3ItMl0rXCIpIHtcIiwxPT09cj9cIlwiOlwiICBcIitzW3ItMV0rXCIgKz0gMTtcXG4gICAgICAgICBpZihcIitjK1wiKSB7XCJdLGY9MT09PXI/XCJyYyA8IHN0YXJ0IHx8IHJjID49IGVuZFwiOlwiYW55KGxlc3NUaGFuKHJjLCBzdGFydCkpIHx8IGFueShncmVhdGVyVGhhbkVxdWFsKHJjLCBlbmQpKVwiLGQ9XCJcIixwPTAsdj0xPT09cj8yOjQ7cDx2O3ArKylkKz1cIlxcbiAgICAgICAgXCIraFtwXStcIlxcbiAgICAgICAgaWYgKFwiK2YrXCIpIHtcXG4gICAgICAgICAgcmVzdWx0W1wiK3ArXCJdID0gZmxvYXQoXCIrbitcIik7XFxuICAgICAgICB9IGVsc2Uge1xcbiAgICAgICAgICBcIitvK1wiIHNvdXJjZSA9IHJjIC0gc3RhcnQ7XFxuICAgICAgICAgIHJlc3VsdFtcIitwK1wiXSA9IGdldENoYW5uZWwoZ2V0WChcIit1LmpvaW4oKStcIiksIFwiK2wrXCIpO1xcbiAgICAgICAgfVxcbiAgICAgIFwiO2QrPTE9PT1yP1wifSBcIjpcIn19XCIsdGhpcy51c2VyQ29kZT1cIlxcbiAgICAgIGNvbnN0IFwiK28rXCIgc3RhcnQgPSBcIitvK1wiKFwiK2ErXCIpO1xcbiAgICAgIGNvbnN0IFwiK28rXCIgZW5kID0gXCIrbytcIihcIitpK1wiKTtcXG5cXG4gICAgICB2b2lkIG1haW4oKSB7XFxuICAgICAgICBcIitvK1wiIG91dHB1dExvYyA9IGdldE91dHB1dENvb3JkcygpO1xcbiAgICAgICAgdmVjNCByZXN1bHQgPSB2ZWM0KDAuKTtcXG4gICAgICAgIFwiK2QrXCJcXG4gICAgICAgIHNldE91dHB1dChyZXN1bHQpO1xcbiAgICAgIH1cXG4gICAgXCJ9LCRpPWZ1bmN0aW9uKHQsZSxuKXtpZih0aGlzLnZhcmlhYmxlTmFtZXM9W1wieFwiXSxcImF2Z1wiPT09ZSYmbil0aHJvdyBuZXcgRXJyb3IoXCJDYW5ub3QgY29tcHV0ZSBwb3NpdGlvbnMgZm9yIGF2ZXJhZ2UgcG9vbC5cIik7dmFyIHI9dC5maWx0ZXJXaWR0aCxvPXQuc3RyaWRlSGVpZ2h0LGE9dC5zdHJpZGVXaWR0aCxpPXQuZGlsYXRpb25IZWlnaHQscz10LmRpbGF0aW9uV2lkdGgsdT10LmVmZmVjdGl2ZUZpbHRlckhlaWdodCxjPXQuZWZmZWN0aXZlRmlsdGVyV2lkdGgsbD10LnBhZEluZm8udG9wLGg9dC5wYWRJbmZvLmxlZnQ7dGhpcy5vdXRwdXRTaGFwZT10Lm91dFNoYXBlO3ZhciBmPVwiYXZnXCI9PT1lLGQ9XCIwLjBcIjtpZihmfHwoZD1cIi0xLjAgLyAxZS0yMFwiKSxuKXRoaXMudXNlckNvZGU9XCJcXG4gICAgICAgIGNvbnN0IGl2ZWMyIHN0cmlkZXMgPSBpdmVjMihcIitvK1wiLCBcIithK1wiKTtcXG4gICAgICAgIGNvbnN0IGl2ZWMyIHBhZHMgPSBpdmVjMihcIitsK1wiLCBcIitoK1wiKTtcXG5cXG4gICAgICAgIHZvaWQgbWFpbigpIHtcXG4gICAgICAgICAgaXZlYzQgY29vcmRzID0gZ2V0T3V0cHV0Q29vcmRzKCk7XFxuICAgICAgICAgIGludCBiYXRjaCA9IGNvb3Jkc1swXTtcXG4gICAgICAgICAgaW50IGQgPSBjb29yZHNbM107XFxuXFxuICAgICAgICAgIGl2ZWMyIHhSQ0Nvcm5lciA9IGNvb3Jkcy55eiAqIHN0cmlkZXMgLSBwYWRzO1xcbiAgICAgICAgICBpbnQgeFJDb3JuZXIgPSB4UkNDb3JuZXIueDtcXG4gICAgICAgICAgaW50IHhDQ29ybmVyID0geFJDQ29ybmVyLnk7XFxuXFxuICAgICAgICAgIC8vIG1heC9taW4geCg/LCA/LCBkKSB0byBnZXQgeSh5UiwgeUMsIGQpLlxcbiAgICAgICAgICAvLyA/ID0gdG8gYmUgZGV0ZXJtaW5lZFxcbiAgICAgICAgICBmbG9hdCBtaW5NYXhWYWx1ZSA9IDAuMDtcXG4gICAgICAgICAgZmxvYXQgbWluTWF4VmFsdWVGb3VuZCA9IDAuMDtcXG4gICAgICAgICAgaW50IG1pbk1heFBvc2l0aW9uID0gMDtcXG4gICAgICAgICAgZmxvYXQgYXZnVmFsdWUgPSAwLjA7XFxuXFxuICAgICAgICAgIGZvciAoaW50IHdSID0gMDsgd1IgPCBcIit1K1wiO1xcbiAgICAgICAgICAgICAgd1IgKz0gXCIraStcIikge1xcbiAgICAgICAgICAgIGludCB4UiA9IHhSQ29ybmVyICsgd1I7XFxuXFxuICAgICAgICAgICAgaWYgKHhSIDwgMCB8fCB4UiA+PSBcIit0LmluSGVpZ2h0K1wiKSB7XFxuICAgICAgICAgICAgICBjb250aW51ZTtcXG4gICAgICAgICAgICB9XFxuXFxuICAgICAgICAgICAgZm9yIChpbnQgd0MgPSAwOyB3QyA8IFwiK2MrXCI7XFxuICAgICAgICAgICAgICAgIHdDICs9IFwiK3MrXCIpIHtcXG4gICAgICAgICAgICAgIGludCB4QyA9IHhDQ29ybmVyICsgd0M7XFxuXFxuICAgICAgICAgICAgICBpZiAoeEMgPCAwIHx8IHhDID49IFwiK3QuaW5XaWR0aCtcIikge1xcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcXG4gICAgICAgICAgICAgIH1cXG5cXG4gICAgICAgICAgICAgIGZsb2F0IHZhbHVlID0gZ2V0WChiYXRjaCwgeFIsIHhDLCBkKTtcXG5cXG4gICAgICAgICAgICAgIC8vIElmIGEgbWluIC8gbWF4IHZhbHVlIGhhcyBhbHJlYWR5IGJlZW4gZm91bmQsIHVzZSBpdC4gSWYgbm90LFxcbiAgICAgICAgICAgICAgLy8gdXNlIHRoZSBjdXJyZW50IHZhbHVlLlxcbiAgICAgICAgICAgICAgZmxvYXQgY3Vyck1pbk1heFZhbHVlID0gbWl4KFxcbiAgICAgICAgICAgICAgICAgIHZhbHVlLCBtaW5NYXhWYWx1ZSwgbWluTWF4VmFsdWVGb3VuZCk7XFxuICAgICAgICAgICAgICBpZiAodmFsdWUgPj0gY3Vyck1pbk1heFZhbHVlKSB7XFxuICAgICAgICAgICAgICAgIG1pbk1heFZhbHVlID0gdmFsdWU7XFxuICAgICAgICAgICAgICAgIG1pbk1heFZhbHVlRm91bmQgPSAxLjA7XFxuICAgICAgICAgICAgICAgIG1pbk1heFBvc2l0aW9uID0gd1IgKiBcIitjK1wiICsgd0M7XFxuICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgICB9XFxuICAgICAgICAgIHNldE91dHB1dChmbG9hdChtaW5NYXhQb3NpdGlvbikpO1xcbiAgICAgICAgfVxcbiAgICAgIFwiO2Vsc2V7dmFyIHA9ZStcIihcIitlK1wiKFwiK2UrXCIobWluTWF4VmFsdWVbMF0sIG1pbk1heFZhbHVlWzFdKSwgbWluTWF4VmFsdWVbMl0pLCBtaW5NYXhWYWx1ZVszXSlcIjtcImF2Z1wiPT09ZSYmKHA9XCJhdmdWYWx1ZSAvIGNvdW50XCIpO3ZhciB2PTQqTWF0aC5mbG9vcihyLzQpLG09ciU0LGc9XCJcXG4gICAgICBpZiAoXCIrZitcIikge1xcbiAgICAgICAgYXZnVmFsdWUgKz0gZG90KHZhbHVlcywgb25lcyk7XFxuICAgICAgfSBlbHNlIHtcXG4gICAgICAgIG1pbk1heFZhbHVlID0gbWF4KHZhbHVlcywgbWluTWF4VmFsdWUpO1xcbiAgICAgIH1cXG4gICAgXCI7dGhpcy51c2VyQ29kZT1cIlxcbiAgICAgIGNvbnN0IGl2ZWMyIHN0cmlkZXMgPSBpdmVjMihcIitvK1wiLCBcIithK1wiKTtcXG4gICAgICBjb25zdCBpdmVjMiBwYWRzID0gaXZlYzIoXCIrbCtcIiwgXCIraCtcIik7XFxuICAgICAgY29uc3QgZmxvYXQgaW5pdGlhbGl6YXRpb25WYWx1ZSA9IFwiK2QrXCI7XFxuICAgICAgY29uc3QgdmVjNCBvbmVzID0gdmVjNCgxLjAsIDEuMCwgMS4wLCAxLjApO1xcblxcbiAgICAgIGZsb2F0IGNvdW50ID0gMC4wO1xcblxcbiAgICAgIGZsb2F0IGdldFZhbHVlKGludCBiYXRjaCwgaW50IHhSLCBpbnQgeEMsIGludCBkKSB7XFxuICAgICAgICBpZiAoeEMgPCAwIHx8IHhDID49IFwiK3QuaW5XaWR0aCtcIikge1xcbiAgICAgICAgICByZXR1cm4gaW5pdGlhbGl6YXRpb25WYWx1ZTtcXG4gICAgICAgIH1cXG4gICAgICAgIGNvdW50ICs9IDEuMDtcXG4gICAgICAgIHJldHVybiBnZXRYKGJhdGNoLCB4UiwgeEMsIGQpO1xcbiAgICAgIH1cXG5cXG4gICAgICB2b2lkIG1haW4oKSB7XFxuICAgICAgICBpdmVjNCBjb29yZHMgPSBnZXRPdXRwdXRDb29yZHMoKTtcXG4gICAgICAgIGludCBiYXRjaCA9IGNvb3Jkc1swXTtcXG4gICAgICAgIGludCBkID0gY29vcmRzWzNdO1xcblxcbiAgICAgICAgaXZlYzIgeFJDQ29ybmVyID0gY29vcmRzLnl6ICogc3RyaWRlcyAtIHBhZHM7XFxuICAgICAgICBpbnQgeFJDb3JuZXIgPSB4UkNDb3JuZXIueDtcXG4gICAgICAgIGludCB4Q0Nvcm5lciA9IHhSQ0Nvcm5lci55O1xcblxcbiAgICAgICAgLy8gbWF4L21pbiB4KD8sID8sIGQpIHRvIGdldCB5KHlSLCB5QywgZCkuXFxuICAgICAgICAvLyA/ID0gdG8gYmUgZGV0ZXJtaW5lZFxcbiAgICAgICAgdmVjNCBtaW5NYXhWYWx1ZSA9IHZlYzQoXCIrZCtcIik7XFxuICAgICAgICBmbG9hdCBhdmdWYWx1ZSA9IDAuMDtcXG4gICAgICAgIGNvdW50ID0gMC4wO1xcblxcbiAgICAgICAgZm9yIChpbnQgd1IgPSAwOyB3UiA8IFwiK3UrXCI7XFxuICAgICAgICAgICAgd1IgKz0gXCIraStcIikge1xcbiAgICAgICAgICBpbnQgeFIgPSB4UkNvcm5lciArIHdSO1xcblxcbiAgICAgICAgICBpZiAoeFIgPCAwIHx8IHhSID49IFwiK3QuaW5IZWlnaHQrXCIpIHtcXG4gICAgICAgICAgICBjb250aW51ZTtcXG4gICAgICAgICAgfVxcblxcbiAgICAgICAgICBmb3IgKGludCB3QyA9IDA7IHdDIDwgXCIrditcIjsgd0MgKz0gNCkge1xcbiAgICAgICAgICAgIGludCB4QyA9IHhDQ29ybmVyICsgd0MgKiBcIitzK1wiO1xcblxcbiAgICAgICAgICAgIHZlYzQgdmFsdWVzID0gdmVjNChcXG4gICAgICAgICAgICAgIGdldFZhbHVlKGJhdGNoLCB4UiwgeEMsIGQpLFxcbiAgICAgICAgICAgICAgZ2V0VmFsdWUoYmF0Y2gsIHhSLCB4QyArIFwiK3MrXCIsIGQpLFxcbiAgICAgICAgICAgICAgZ2V0VmFsdWUoYmF0Y2gsIHhSLCB4QyArIDIgKiBcIitzK1wiLCBkKSxcXG4gICAgICAgICAgICAgIGdldFZhbHVlKGJhdGNoLCB4UiwgeEMgKyAzICogXCIrcytcIiwgZClcXG4gICAgICAgICAgICApO1xcblxcbiAgICAgICAgICAgIFwiK2crXCJcXG4gICAgICAgICAgfVxcblxcbiAgICAgICAgICBpbnQgeEMgPSB4Q0Nvcm5lciArIFwiK3YrXCI7XFxuICAgICAgICAgIGlmIChcIisoMT09PW0pK1wiKSB7XFxuICAgICAgICAgICAgdmVjNCB2YWx1ZXMgPSB2ZWM0KFxcbiAgICAgICAgICAgICAgZ2V0VmFsdWUoYmF0Y2gsIHhSLCB4QywgZCksXFxuICAgICAgICAgICAgICBpbml0aWFsaXphdGlvblZhbHVlLFxcbiAgICAgICAgICAgICAgaW5pdGlhbGl6YXRpb25WYWx1ZSxcXG4gICAgICAgICAgICAgIGluaXRpYWxpemF0aW9uVmFsdWVcXG4gICAgICAgICAgICApO1xcblxcbiAgICAgICAgICAgIFwiK2crXCJcXG4gICAgICAgICAgfSBlbHNlIGlmIChcIisoMj09PW0pK1wiKSB7XFxuICAgICAgICAgICAgdmVjNCB2YWx1ZXMgPSB2ZWM0KFxcbiAgICAgICAgICAgICAgZ2V0VmFsdWUoYmF0Y2gsIHhSLCB4QywgZCksXFxuICAgICAgICAgICAgICBnZXRWYWx1ZShiYXRjaCwgeFIsIHhDICsgXCIrcytcIiwgZCksXFxuICAgICAgICAgICAgICBpbml0aWFsaXphdGlvblZhbHVlLFxcbiAgICAgICAgICAgICAgaW5pdGlhbGl6YXRpb25WYWx1ZVxcbiAgICAgICAgICAgICk7XFxuXFxuICAgICAgICAgICAgXCIrZytcIlxcbiAgICAgICAgICB9IGVsc2UgaWYgKFwiKygzPT09bSkrXCIpIHtcXG4gICAgICAgICAgICB2ZWM0IHZhbHVlcyA9IHZlYzQoXFxuICAgICAgICAgICAgICBnZXRWYWx1ZShiYXRjaCwgeFIsIHhDLCBkKSxcXG4gICAgICAgICAgICAgIGdldFZhbHVlKGJhdGNoLCB4UiwgeEMgKyBcIitzK1wiLCBkKSxcXG4gICAgICAgICAgICAgIGdldFZhbHVlKGJhdGNoLCB4UiwgeEMgKyAyICogXCIrcytcIiwgZCksXFxuICAgICAgICAgICAgICBpbml0aWFsaXphdGlvblZhbHVlXFxuICAgICAgICAgICAgKTtcXG5cXG4gICAgICAgICAgICBcIitnK1wiXFxuICAgICAgICAgIH1cXG4gICAgICAgIH1cXG4gICAgICAgIHNldE91dHB1dChcIitwK1wiKTtcXG4gICAgICB9XFxuICAgIFwifX0sUWk9ZnVuY3Rpb24odCxlLG4pe2lmKHRoaXMudmFyaWFibGVOYW1lcz1bXCJ4XCJdLFwiYXZnXCI9PT1lJiZuKXRocm93IG5ldyBFcnJvcihcIkNhbm5vdCBjb21wdXRlIHBvc2l0aW9ucyBmb3IgYXZlcmFnZSBwb29sLlwiKTt2YXIgcj10LmZpbHRlcldpZHRoLG89dC5zdHJpZGVEZXB0aCxhPXQuc3RyaWRlSGVpZ2h0LGk9dC5zdHJpZGVXaWR0aCxzPXQuZGlsYXRpb25EZXB0aCx1PXQuZGlsYXRpb25IZWlnaHQsYz10LmRpbGF0aW9uV2lkdGgsbD10LmVmZmVjdGl2ZUZpbHRlckRlcHRoLGg9dC5lZmZlY3RpdmVGaWx0ZXJIZWlnaHQsZj10LmVmZmVjdGl2ZUZpbHRlcldpZHRoLGQ9dC5wYWRJbmZvLmZyb250LHA9dC5wYWRJbmZvLnRvcCx2PXQucGFkSW5mby5sZWZ0O3RoaXMub3V0cHV0U2hhcGU9dC5vdXRTaGFwZTt2YXIgbT1cImF2Z1wiPT09ZSxnPVwiMC4wXCI7aWYobXx8KGc9XCItMS4wIC8gMWUtMjBcIiksbil0aGlzLnVzZXJDb2RlPVwiXFxuICAgICAgICBjb25zdCBpdmVjMyBzdHJpZGVzID1cXG4gICAgICAgICAgICBpdmVjMyhcIitvK1wiLCBcIithK1wiLCBcIitpK1wiKTtcXG4gICAgICAgIGNvbnN0IGl2ZWMzIHBhZHMgPSBpdmVjMyhcIitkK1wiLCBcIitwK1wiLCBcIit2K1wiKTtcXG5cXG4gICAgICAgIHZvaWQgbWFpbigpIHtcXG4gICAgICAgICAgaXZlYzUgY29vcmRzID0gZ2V0T3V0cHV0Q29vcmRzKCk7XFxuICAgICAgICAgIGludCBiYXRjaCA9IGNvb3Jkcy54O1xcbiAgICAgICAgICBpbnQgY2ggPSBjb29yZHMudTtcXG5cXG4gICAgICAgICAgaXZlYzMgeENvcm5lciA9IGl2ZWMzKGNvb3Jkcy55LCBjb29yZHMueiwgY29vcmRzLncpICogc3RyaWRlcyAtIHBhZHM7XFxuICAgICAgICAgIGludCB4RENvcm5lciA9IHhDb3JuZXIueDtcXG4gICAgICAgICAgaW50IHhSQ29ybmVyID0geENvcm5lci55O1xcbiAgICAgICAgICBpbnQgeENDb3JuZXIgPSB4Q29ybmVyLno7XFxuXFxuICAgICAgICAgIC8vIG1heC9taW4geCg/LCA/LCA/LCBjaCkgdG8gZ2V0IHkoeUQsIHlSLCB5QywgY2gpLlxcbiAgICAgICAgICAvLyA/ID0gdG8gYmUgZGV0ZXJtaW5lZFxcbiAgICAgICAgICBmbG9hdCBtaW5NYXhWYWx1ZSA9IDAuMDtcXG4gICAgICAgICAgZmxvYXQgbWluTWF4VmFsdWVGb3VuZCA9IDAuMDtcXG4gICAgICAgICAgaW50IG1pbk1heFBvc2l0aW9uID0gMDtcXG5cXG4gICAgICAgICAgZm9yIChpbnQgd0QgPSAwOyB3RCA8IFwiK2wrXCI7XFxuICAgICAgICAgICAgICB3RCArPSBcIitzK1wiKSB7XFxuICAgICAgICAgICAgaW50IHhEID0geERDb3JuZXIgKyB3RDtcXG5cXG4gICAgICAgICAgICBpZiAoeEQgPCAwIHx8IHhEID49IFwiK3QuaW5EZXB0aCtcIikge1xcbiAgICAgICAgICAgICAgY29udGludWU7XFxuICAgICAgICAgICAgfVxcblxcbiAgICAgICAgICAgIGZvciAoaW50IHdSID0gMDsgd1IgPCBcIitoK1wiO1xcbiAgICAgICAgICAgICAgICB3UiArPSBcIit1K1wiKSB7XFxuICAgICAgICAgICAgICBpbnQgeFIgPSB4UkNvcm5lciArIHdSO1xcblxcbiAgICAgICAgICAgICAgaWYgKHhSIDwgMCB8fCB4UiA+PSBcIit0LmluSGVpZ2h0K1wiKSB7XFxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xcbiAgICAgICAgICAgICAgfVxcblxcbiAgICAgICAgICAgICAgZm9yIChpbnQgd0MgPSAwOyB3QyA8IFwiK2YrXCI7XFxuICAgICAgICAgICAgICAgICAgd0MgKz0gXCIrYytcIikge1xcbiAgICAgICAgICAgICAgICBpbnQgeEMgPSB4Q0Nvcm5lciArIHdDO1xcblxcbiAgICAgICAgICAgICAgICBpZiAoeEMgPCAwIHx8IHhDID49IFwiK3QuaW5XaWR0aCtcIikge1xcbiAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xcbiAgICAgICAgICAgICAgICB9XFxuXFxuICAgICAgICAgICAgICAgIGZsb2F0IHZhbHVlID0gZ2V0WChiYXRjaCwgeEQsIHhSLCB4QywgY2gpO1xcblxcbiAgICAgICAgICAgICAgICAvLyBJZiBhIG1pbiAvIG1heCB2YWx1ZSBoYXMgYWxyZWFkeSBiZWVuIGZvdW5kLCB1c2UgaXQuIElmIG5vdCxcXG4gICAgICAgICAgICAgICAgLy8gdXNlIHRoZSBjdXJyZW50IHZhbHVlLlxcbiAgICAgICAgICAgICAgICBmbG9hdCBjdXJyTWluTWF4VmFsdWUgPSBtaXgoXFxuICAgICAgICAgICAgICAgICAgICB2YWx1ZSwgbWluTWF4VmFsdWUsIG1pbk1heFZhbHVlRm91bmQpO1xcbiAgICAgICAgICAgICAgICBpZiAodmFsdWUgPj0gY3Vyck1pbk1heFZhbHVlKSB7XFxuICAgICAgICAgICAgICAgICAgbWluTWF4VmFsdWUgPSB2YWx1ZTtcXG4gICAgICAgICAgICAgICAgICBtaW5NYXhWYWx1ZUZvdW5kID0gMS4wO1xcbiAgICAgICAgICAgICAgICAgIG1pbk1heFBvc2l0aW9uID1cXG4gICAgICAgICAgICAgICAgICAgICAgd0QgKiBcIitoK1wiICogXCIrZitcIiArXFxuICAgICAgICAgICAgICAgICAgICAgIHdSICogXCIrZitcIiArIHdDOztcXG4gICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgIH1cXG4gICAgICAgICAgfVxcbiAgICAgICAgICBzZXRPdXRwdXQoZmxvYXQobWluTWF4UG9zaXRpb24pKTtcXG4gICAgICAgIH1cXG4gICAgICBcIjtlbHNle3ZhciB5PWUrXCIoXCIrZStcIihcIitlK1wiKG1pbk1heFZhbHVlWzBdLCBtaW5NYXhWYWx1ZVsxXSksIG1pbk1heFZhbHVlWzJdKSwgbWluTWF4VmFsdWVbM10pXCI7XCJhdmdcIj09PWUmJih5PVwiYXZnVmFsdWUgLyBjb3VudFwiKTt2YXIgeD00Kk1hdGguZmxvb3Ioci80KSxiPXIlNCx3PVwiXFxuICAgICAgaWYgKFwiK20rXCIpIHtcXG4gICAgICAgIGF2Z1ZhbHVlICs9IGRvdCh2YWx1ZXMsIG9uZXMpO1xcbiAgICAgIH0gZWxzZSB7XFxuICAgICAgICBtaW5NYXhWYWx1ZSA9IG1heCh2YWx1ZXMsIG1pbk1heFZhbHVlKTtcXG4gICAgICB9XFxuICAgIFwiO3RoaXMudXNlckNvZGU9XCJcXG4gICAgICBjb25zdCBpdmVjMyBzdHJpZGVzID1cXG4gICAgICAgIGl2ZWMzKFwiK28rXCIsIFwiK2ErXCIsIFwiK2krXCIpO1xcbiAgICAgIGNvbnN0IGl2ZWMzIHBhZHMgPSBpdmVjMyhcIitkK1wiLCBcIitwK1wiLCBcIit2K1wiKTtcXG4gICAgICBjb25zdCBmbG9hdCBpbml0aWFsaXphdGlvblZhbHVlID0gXCIrZytcIjtcXG4gICAgICBjb25zdCB2ZWM0IG9uZXMgPSB2ZWM0KDEuMCwgMS4wLCAxLjAsIDEuMCk7XFxuXFxuICAgICAgZmxvYXQgY291bnQgPSAwLjA7XFxuXFxuICAgICAgZmxvYXQgZ2V0VmFsdWUoaW50IGJhdGNoLCBpbnQgeEQsIGludCB4UiwgaW50IHhDLCBpbnQgY2gpIHtcXG4gICAgICAgIGlmICh4QyA8IDAgfHwgeEMgPj0gXCIrdC5pbldpZHRoK1wiKSB7XFxuICAgICAgICAgIHJldHVybiBpbml0aWFsaXphdGlvblZhbHVlO1xcbiAgICAgICAgfVxcbiAgICAgICAgY291bnQgKz0gMS4wO1xcbiAgICAgICAgcmV0dXJuIGdldFgoYmF0Y2gsIHhELCB4UiwgeEMsIGNoKTtcXG4gICAgICB9XFxuXFxuICAgICAgdm9pZCBtYWluKCkge1xcbiAgICAgICAgaXZlYzUgY29vcmRzID0gZ2V0T3V0cHV0Q29vcmRzKCk7XFxuICAgICAgICBpbnQgYmF0Y2ggPSBjb29yZHMueDtcXG4gICAgICAgIGludCBjaCA9IGNvb3Jkcy51O1xcblxcbiAgICAgICAgaXZlYzMgeENvcm5lciA9IGl2ZWMzKGNvb3Jkcy55LCBjb29yZHMueiwgY29vcmRzLncpICogc3RyaWRlcyAtIHBhZHM7XFxuICAgICAgICBpbnQgeERDb3JuZXIgPSB4Q29ybmVyLng7XFxuICAgICAgICBpbnQgeFJDb3JuZXIgPSB4Q29ybmVyLnk7XFxuICAgICAgICBpbnQgeENDb3JuZXIgPSB4Q29ybmVyLno7XFxuXFxuICAgICAgICAvLyBtYXgvbWluIHgoPywgPywgPywgZCkgdG8gZ2V0IHkoeUQsIHlSLCB5QywgY2gpLlxcbiAgICAgICAgLy8gPyA9IHRvIGJlIGRldGVybWluZWRcXG4gICAgICAgIHZlYzQgbWluTWF4VmFsdWUgPSB2ZWM0KFwiK2crXCIpO1xcbiAgICAgICAgZmxvYXQgYXZnVmFsdWUgPSAwLjA7XFxuICAgICAgICBjb3VudCA9IDAuMDtcXG5cXG4gICAgICAgIGZvciAoaW50IHdEID0gMDsgd0QgPCBcIitsK1wiO1xcbiAgICAgICAgICAgIHdEICs9IFwiK3MrXCIpIHtcXG4gICAgICAgICAgaW50IHhEID0geERDb3JuZXIgKyB3RDtcXG5cXG4gICAgICAgICAgaWYgKHhEIDwgMCB8fCB4RCA+PSBcIit0LmluRGVwdGgrXCIpIHtcXG4gICAgICAgICAgICBjb250aW51ZTtcXG4gICAgICAgICAgfVxcblxcbiAgICAgICAgICBmb3IgKGludCB3UiA9IDA7IHdSIDwgXCIraCtcIjtcXG4gICAgICAgICAgICB3UiArPSBcIit1K1wiKSB7XFxuICAgICAgICAgICAgaW50IHhSID0geFJDb3JuZXIgKyB3UjtcXG5cXG4gICAgICAgICAgICBpZiAoeFIgPCAwIHx8IHhSID49IFwiK3QuaW5IZWlnaHQrXCIpIHtcXG4gICAgICAgICAgICAgIGNvbnRpbnVlO1xcbiAgICAgICAgICAgIH1cXG5cXG4gICAgICAgICAgICBmb3IgKGludCB3QyA9IDA7IHdDIDwgXCIreCtcIjsgd0MgKz0gNCkge1xcbiAgICAgICAgICAgICAgaW50IHhDID0geENDb3JuZXIgKyB3QyAqIFwiK2MrXCI7XFxuXFxuICAgICAgICAgICAgICB2ZWM0IHZhbHVlcyA9IHZlYzQoXFxuICAgICAgICAgICAgICAgIGdldFZhbHVlKGJhdGNoLCB4RCwgeFIsIHhDLCBjaCksXFxuICAgICAgICAgICAgICAgIGdldFZhbHVlKGJhdGNoLCB4RCwgeFIsIHhDICsgXCIrYytcIiwgY2gpLFxcbiAgICAgICAgICAgICAgICBnZXRWYWx1ZShiYXRjaCwgeEQsIHhSLCB4QyArIDIgKiBcIitjK1wiLCBjaCksXFxuICAgICAgICAgICAgICAgIGdldFZhbHVlKGJhdGNoLCB4RCwgeFIsIHhDICsgMyAqIFwiK2MrXCIsIGNoKVxcbiAgICAgICAgICAgICAgKTtcXG5cXG4gICAgICAgICAgICAgIFwiK3crXCJcXG4gICAgICAgICAgICB9XFxuXFxuICAgICAgICAgICAgaW50IHhDID0geENDb3JuZXIgKyBcIit4K1wiO1xcbiAgICAgICAgICAgIGlmIChcIisoMT09PWIpK1wiKSB7XFxuICAgICAgICAgICAgICB2ZWM0IHZhbHVlcyA9IHZlYzQoXFxuICAgICAgICAgICAgICAgIGdldFZhbHVlKGJhdGNoLCB4RCwgeFIsIHhDLCBjaCksXFxuICAgICAgICAgICAgICAgIGluaXRpYWxpemF0aW9uVmFsdWUsXFxuICAgICAgICAgICAgICAgIGluaXRpYWxpemF0aW9uVmFsdWUsXFxuICAgICAgICAgICAgICAgIGluaXRpYWxpemF0aW9uVmFsdWVcXG4gICAgICAgICAgICAgICk7XFxuXFxuICAgICAgICAgICAgICBcIit3K1wiXFxuICAgICAgICAgICAgfSBlbHNlIGlmIChcIisoMj09PWIpK1wiKSB7XFxuICAgICAgICAgICAgICB2ZWM0IHZhbHVlcyA9IHZlYzQoXFxuICAgICAgICAgICAgICAgIGdldFZhbHVlKGJhdGNoLCB4RCwgeFIsIHhDLCBjaCksXFxuICAgICAgICAgICAgICAgIGdldFZhbHVlKGJhdGNoLCB4RCwgeFIsIHhDICsgXCIrYytcIiwgY2gpLFxcbiAgICAgICAgICAgICAgICBpbml0aWFsaXphdGlvblZhbHVlLFxcbiAgICAgICAgICAgICAgICBpbml0aWFsaXphdGlvblZhbHVlXFxuICAgICAgICAgICAgICApO1xcblxcbiAgICAgICAgICAgICAgXCIrdytcIlxcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoXCIrKDM9PT1iKStcIikge1xcbiAgICAgICAgICAgICAgdmVjNCB2YWx1ZXMgPSB2ZWM0KFxcbiAgICAgICAgICAgICAgICBnZXRWYWx1ZShiYXRjaCwgeEQsIHhSLCB4QywgY2gpLFxcbiAgICAgICAgICAgICAgICBnZXRWYWx1ZShiYXRjaCwgeEQsIHhSLCB4QyArIFwiK2MrXCIsIGNoKSxcXG4gICAgICAgICAgICAgICAgZ2V0VmFsdWUoYmF0Y2gsIHhELCB4UiwgeEMgKyAyICogXCIrYytcIiwgY2gpLFxcbiAgICAgICAgICAgICAgICBpbml0aWFsaXphdGlvblZhbHVlXFxuICAgICAgICAgICAgICApO1xcblxcbiAgICAgICAgICAgICAgXCIrdytcIlxcbiAgICAgICAgICAgIH1cXG4gICAgICAgICAgfVxcbiAgICAgICAgICBzZXRPdXRwdXQoXCIreStcIik7XFxuICAgICAgICB9XFxuICAgICAgfVxcbiAgICBcIn19LEppPWZ1bmN0aW9uKHQsZSl7dGhpcy52YXJpYWJsZU5hbWVzPVtcInhcIl07dmFyIG49dC53aW5kb3dTaXplLHI9dC5iYXRjaFNpemUsbz10LmluU2l6ZSxhPU1hdGguY2VpbChvL24pO3RoaXMub3V0cHV0U2hhcGU9W3IsYV07dmFyIGk9XCIwLjBcIixzPVwiXCI7XCJwcm9kXCI9PT1lP2k9XCIxLjBcIjpcIm1pblwiPT09ZT8oaT1cIjEuMCAvIDFlLTIwXCIscz1cIm1pblwiKTpcIm1heFwiPT09ZSYmKGk9XCItMS4wIC8gMWUtMjBcIixzPVwibWF4XCIpO3ZhciB1PWUrXCIoXCIrZStcIihcIitlK1wiKG1pbk1heFZhbHVlWzBdLCBtaW5NYXhWYWx1ZVsxXSksIG1pbk1heFZhbHVlWzJdKSwgbWluTWF4VmFsdWVbM10pXCI7XCJzdW1cIj09PWU/dT1cInN1bVZhbHVlXCI6XCJwcm9kXCI9PT1lP3U9XCJwcm9kVmFsdWVcIjpcImFsbFwiPT09ZT91PVwiYWxsVmFsdWVcIjpcImFueVwiPT09ZSYmKHU9XCJhbnlWYWx1ZVwiKTt2YXIgYz00Kk1hdGguZmxvb3Iobi80KSxsPW4lNCxoPVwiXFxuICAgICAgaWYgKFwiKyhcInN1bVwiPT09ZSkrXCIpIHtcXG4gICAgICAgIHN1bVZhbHVlICs9IGRvdCh2YWx1ZXMsIG9uZXMpO1xcbiAgICAgIH0gZWxzZSBpZiAoXCIrKFwicHJvZFwiPT09ZSkrXCIpIHtcXG4gICAgICAgIHZlYzIgdG1wID0gdmVjMih2YWx1ZXNbMF0sIHZhbHVlc1sxXSkgKiB2ZWMyKHZhbHVlc1syXSwgdmFsdWVzWzNdKTtcXG4gICAgICAgIHByb2RWYWx1ZSAqPSB0bXBbMF0gKiB0bXBbMV07XFxuICAgICAgfSBlbHNlIHtcXG4gICAgICAgIG1pbk1heFZhbHVlID0gXCIrcytcIih2YWx1ZXMsIG1pbk1heFZhbHVlKTtcXG4gICAgICB9XFxuICAgIFwiLGY9XCJ2ZWM0XCI7XCJhbGxcIj09PWU/KGk9XCIxLjBcIixoPVwiXFxuICAgICAgICBib29sIHJlZHVjZWRBbGxWYWx1ZSA9IGFsbCh2YWx1ZXMpO1xcbiAgICAgICAgZmxvYXQgZmxvYXRlZFJlZHVjZWRBbGxWYWx1ZSA9IGZsb2F0KHJlZHVjZWRBbGxWYWx1ZSk7XFxuICAgICAgICBhbGxWYWx1ZSA9IGZsb2F0KGFsbFZhbHVlID49IDEuMCAmJiBmbG9hdGVkUmVkdWNlZEFsbFZhbHVlID49IDEuMCk7XFxuICAgICAgXCIsZj1cImJ2ZWM0XCIpOlwiYW55XCI9PT1lJiYoaT1cIjAuMFwiLGg9XCJcXG4gICAgICAgIGJvb2wgcmVkdWNlZEFueVZhbHVlID0gYW55KHZhbHVlcyk7XFxuICAgICAgICBmbG9hdCBmbG9hdGVkUmVkdWNlZEFueVZhbHVlID0gZmxvYXQocmVkdWNlZEFueVZhbHVlKTtcXG4gICAgICAgIGFueVZhbHVlID0gZmxvYXQoYW55VmFsdWUgPj0gMS4wIHx8IGZsb2F0ZWRSZWR1Y2VkQW55VmFsdWUgPj0gMS4wKTtcXG4gICAgICBcIixmPVwiYnZlYzRcIik7dmFyIGQ9XCJcIjtvJW4+MCYmKGQ9XCJcXG4gICAgICAgIGlmIChpbklkeCA8IDAgfHwgaW5JZHggPj0gXCIrbytcIikge1xcbiAgICAgICAgICByZXR1cm4gaW5pdGlhbGl6YXRpb25WYWx1ZTtcXG4gICAgICAgIH1cXG4gICAgICBcIiksdGhpcy51c2VyQ29kZT1cIlxcbiAgICAgIGNvbnN0IGZsb2F0IGluaXRpYWxpemF0aW9uVmFsdWUgPSBcIitpK1wiO1xcbiAgICAgIGNvbnN0IHZlYzQgb25lcyA9IHZlYzQoMS4wLCAxLjAsIDEuMCwgMS4wKTtcXG5cXG4gICAgICBmbG9hdCBnZXRWYWx1ZShpbnQgYmF0Y2gsIGludCBpbklkeCkge1xcbiAgICAgICAgXCIrZCtcIlxcbiAgICAgICAgcmV0dXJuIGdldFgoYmF0Y2gsIGluSWR4KTtcXG4gICAgICB9XFxuXFxuICAgICAgdm9pZCBtYWluKCkge1xcbiAgICAgICAgaXZlYzIgY29vcmRzID0gZ2V0T3V0cHV0Q29vcmRzKCk7XFxuICAgICAgICBpbnQgYmF0Y2ggPSBjb29yZHNbMF07XFxuICAgICAgICBpbnQgb3V0SWR4ID0gY29vcmRzWzFdO1xcbiAgICAgICAgaW50IGluT2Zmc2V0ID0gb3V0SWR4ICogXCIrbitcIjtcXG5cXG4gICAgICAgIHZlYzQgbWluTWF4VmFsdWUgPSB2ZWM0KFwiK2krXCIpO1xcbiAgICAgICAgZmxvYXQgcHJvZFZhbHVlID0gMS4wO1xcbiAgICAgICAgZmxvYXQgc3VtVmFsdWUgPSAwLjA7XFxuICAgICAgICBmbG9hdCBhbGxWYWx1ZSA9IDEuMDtcXG4gICAgICAgIGZsb2F0IGFueVZhbHVlID0gMC4wO1xcblxcbiAgICAgICAgZm9yIChpbnQgaSA9IDA7IGkgPCBcIitjK1wiOyBpICs9IDQpIHtcXG4gICAgICAgICAgaW50IGluSWR4ID0gaW5PZmZzZXQgKyBpO1xcbiAgICAgICAgICBcIitmK1wiIHZhbHVlcyA9IFwiK2YrXCIoXFxuICAgICAgICAgICAgZ2V0VmFsdWUoYmF0Y2gsIGluSWR4KSxcXG4gICAgICAgICAgICBnZXRWYWx1ZShiYXRjaCwgaW5JZHggKyAxKSxcXG4gICAgICAgICAgICBnZXRWYWx1ZShiYXRjaCwgaW5JZHggKyAyKSxcXG4gICAgICAgICAgICBnZXRWYWx1ZShiYXRjaCwgaW5JZHggKyAzKVxcbiAgICAgICAgICApO1xcblxcbiAgICAgICAgICBcIitoK1wiXFxuICAgICAgICB9XFxuXFxuICAgICAgICBpbnQgaW5JZHggPSBpbk9mZnNldCArIFwiK2MrXCI7XFxuICAgICAgICBpZiAoXCIrKDE9PT1sKStcIikge1xcbiAgICAgICAgICBcIitmK1wiIHZhbHVlcyA9IFwiK2YrXCIoXFxuICAgICAgICAgICAgZ2V0VmFsdWUoYmF0Y2gsIGluSWR4KSxcXG4gICAgICAgICAgICBpbml0aWFsaXphdGlvblZhbHVlLFxcbiAgICAgICAgICAgIGluaXRpYWxpemF0aW9uVmFsdWUsXFxuICAgICAgICAgICAgaW5pdGlhbGl6YXRpb25WYWx1ZVxcbiAgICAgICAgICApO1xcblxcbiAgICAgICAgICBcIitoK1wiXFxuICAgICAgICB9IGVsc2UgaWYgKFwiKygyPT09bCkrXCIpIHtcXG4gICAgICAgICAgXCIrZitcIiB2YWx1ZXMgPSBcIitmK1wiKFxcbiAgICAgICAgICAgIGdldFZhbHVlKGJhdGNoLCBpbklkeCksXFxuICAgICAgICAgICAgZ2V0VmFsdWUoYmF0Y2gsIGluSWR4ICsgMSksXFxuICAgICAgICAgICAgaW5pdGlhbGl6YXRpb25WYWx1ZSxcXG4gICAgICAgICAgICBpbml0aWFsaXphdGlvblZhbHVlXFxuICAgICAgICAgICk7XFxuXFxuICAgICAgICAgIFwiK2grXCJcXG4gICAgICAgIH0gZWxzZSBpZiAoXCIrKDM9PT1sKStcIikge1xcbiAgICAgICAgICBcIitmK1wiIHZhbHVlcyA9IFwiK2YrXCIoXFxuICAgICAgICAgICAgZ2V0VmFsdWUoYmF0Y2gsIGluSWR4KSxcXG4gICAgICAgICAgICBnZXRWYWx1ZShiYXRjaCwgaW5JZHggKyAxKSxcXG4gICAgICAgICAgICBnZXRWYWx1ZShiYXRjaCwgaW5JZHggKyAyKSxcXG4gICAgICAgICAgICBpbml0aWFsaXphdGlvblZhbHVlXFxuICAgICAgICAgICk7XFxuXFxuICAgICAgICAgIFwiK2grXCJcXG4gICAgICAgIH1cXG4gICAgICAgIHNldE91dHB1dChcIit1K1wiKTtcXG4gICAgICB9XFxuICAgIFwifSxaaT1mdW5jdGlvbih0LGUpe3RoaXMudmFyaWFibGVOYW1lcz1bXCJBXCJdLHRoaXMucGFja2VkSW5wdXRzPSEwLHRoaXMucGFja2VkT3V0cHV0PSEwLHRoaXMub3V0cHV0U2hhcGU9dDtmb3IodmFyIG49XCJcIixyPTA7cjw0O3IrKyl7dmFyIG89XCJ0aGlzUkMgPSByYztcIjtyJTI9PTEmJihvKz1cInRoaXNSQy56ICs9IDE7XCIpLHI+MSYmKG8rPVwidGhpc1JDLnkgKz0gMTtcIiksbis9XCJcXG4gICAgICAgIFwiK28rXCJcXG4gICAgICAgIFwiKyhyPjA/XCJpZih0aGlzUkMueSA8IHJvd3MgJiYgdGhpc1JDLnogPCBjb2xzKXtcIjpcIlwiKStcIlxcbiAgICAgICAgICBpbnQgZmxhdEluZGV4ID0gZ2V0RmxhdEluZGV4KHRoaXNSQyk7XFxuXFxuICAgICAgICAgIGl2ZWMzIGlucHV0UkMgPSBpbnB1dENvb3Jkc0Zyb21SZXNoYXBlZE91dENvb3JkcyhmbGF0SW5kZXgpO1xcbiAgICAgICAgICB2ZWMyIGlucHV0UkNJbm5lckRpbXMgPSB2ZWMyKGZsb2F0KGlucHV0UkMueSksZmxvYXQoaW5wdXRSQy56KSk7XFxuXFxuICAgICAgICAgIHJlc3VsdFtcIityK1wiXSA9XFxuICAgICAgICAgICAgZ2V0Q2hhbm5lbChnZXRBKGlucHV0UkMueCwgaW5wdXRSQy55LCBpbnB1dFJDLnopLCBpbnB1dFJDSW5uZXJEaW1zKTtcXG4gICAgICAgIFwiKyhyPjA/XCJ9XCI6XCJcIikrXCJcXG4gICAgICBcIn10aGlzLnVzZXJDb2RlPVwiXFxuICAgICAgXFxuICAgIGl2ZWMzIGlucHV0Q29vcmRzRnJvbVJlc2hhcGVkT3V0Q29vcmRzKGludCBpbmRleCkge1xcbiAgICAgIFwiK2NhKFtcInJcIixcImNcIixcImRcIl0sZSkrXCJcXG4gICAgICByZXR1cm4gaXZlYzMociwgYywgZCk7XFxuICAgIH1cXG4gIFxcbiAgICAgIFwiK2xhKHQpK1wiXFxuXFxuICAgICAgdm9pZCBtYWluKCkge1xcbiAgICAgICAgaXZlYzMgcmMgPSBnZXRPdXRwdXRDb29yZHMoKTtcXG5cXG4gICAgICAgIHZlYzQgcmVzdWx0ID0gdmVjNCgwLik7XFxuXFxuICAgICAgICBpdmVjMyB0aGlzUkM7XFxuICAgICAgICBpbnQgcm93cyA9IFwiK3RbMV0rXCI7XFxuICAgICAgICBpbnQgY29scyA9IFwiK3RbMl0rXCI7XFxuXFxuICAgICAgICBcIituK1wiXFxuXFxuICAgICAgICBzZXRPdXRwdXQocmVzdWx0KTtcXG4gICAgICB9XFxuICAgIFwifTt2YXIgdHM9ZnVuY3Rpb24odCxlLG4pe3RoaXMudmFyaWFibGVOYW1lcz1bXCJkeVwiXSx0aGlzLm91dHB1dFNoYXBlPVtdLHRoaXMub3V0cHV0U2hhcGU9ZS5zaGFwZTt2YXIgcj1lLnNoYXBlLG89clsxXSxhPXJbMl0saT10LnNoYXBlLHM9aVsxXSx1PWlbMl0sYz1bbiYmcz4xP28tMTpvLG4mJnU+MT9hLTE6YV0sbD1bbiYmcz4xP3MtMTpzLG4mJnU+MT91LTE6dV0saD1jWzBdL2xbMF0sZj1jWzFdL2xbMV0sZD0xL2gscD0xL2Ysdj0yKk1hdGguY2VpbChkKSsyLG09MipNYXRoLmNlaWwocCkrMjt0aGlzLnVzZXJDb2RlPVwiXFxuICAgICAgdm9pZCBtYWluKCkge1xcbiAgICAgICAgaXZlYzQgY29vcmRzID0gZ2V0T3V0cHV0Q29vcmRzKCk7XFxuICAgICAgICBpbnQgYiA9IGNvb3Jkc1swXTtcXG4gICAgICAgIGludCBkID0gY29vcmRzWzNdO1xcbiAgICAgICAgaW50IHIgPSBjb29yZHNbMV07XFxuICAgICAgICBpbnQgYyA9IGNvb3Jkc1syXTtcXG5cXG4gICAgICAgIGZsb2F0IGFjY3VtdWxhdG9yID0gMC4wO1xcblxcbiAgICAgICAgY29uc3QgZmxvYXQgaGVpZ2h0U2NhbGUgPSBmbG9hdChcIitoK1wiKTtcXG4gICAgICAgIGNvbnN0IGZsb2F0IHdpZHRoU2NhbGUgPSBmbG9hdChcIitmK1wiKTtcXG5cXG4gICAgICAgIGNvbnN0IGZsb2F0IGludkhlaWdodFNjYWxlID0gZmxvYXQoXCIrZCtcIik7XFxuICAgICAgICBjb25zdCBmbG9hdCBpbnZXaWR0aFNjYWxlID0gZmxvYXQoXCIrcCtcIik7XFxuXFxuICAgICAgICBjb25zdCBpbnQgd2luSGVpZ2h0ID0gaW50KFwiK3YrXCIpO1xcbiAgICAgICAgY29uc3QgaW50IHdpbldpZHRoID0gaW50KFwiK20rXCIpO1xcblxcbiAgICAgICAgLy8gQ29tcHV0ZSBib3VuZHMgZm9yIHdoZXJlIGluIGR5IHdlIHdpbGwgbG9va1xcbiAgICAgICAgZmxvYXQgc3RhcnRSTGVycCA9IGZsb29yKGZsb2F0KHIpICogaW52SGVpZ2h0U2NhbGUpO1xcbiAgICAgICAgaW50IHN0YXJ0RHlSID0gaW50KHN0YXJ0UkxlcnAgLSBmbG9hdCh3aW5IZWlnaHQgLyAyKSk7XFxuXFxuICAgICAgICBmbG9hdCBzdGFydENMZXJwID0gZmxvb3IoZmxvYXQoYykgKiBpbnZXaWR0aFNjYWxlKTtcXG4gICAgICAgIGludCBzdGFydER5QyA9IGludChzdGFydENMZXJwIC0gZmxvYXQod2luV2lkdGggLyAyKSk7XFxuXFxuICAgICAgICAvLyBMb29wIG92ZXIgZHlcXG4gICAgICAgIGZvciAoaW50IGR5Uk9mZnNldCA9IDA7IGR5Uk9mZnNldCA8IHdpbkhlaWdodDsgZHlST2Zmc2V0KyspIHtcXG4gICAgICAgICAgaW50IGR5UiA9IGR5Uk9mZnNldCArIHN0YXJ0RHlSO1xcblxcbiAgICAgICAgICAvLyBHdWFyZCBhZ2FpbnN0IHRoZSB3aW5kb3cgZXhjZWVkaW5nIHRoZSBib3VuZHMgb2YgZHlcXG4gICAgICAgICAgaWYgKGR5UiA8IDAgfHwgZHlSID49IFwiK3MrXCIpIHtcXG4gICAgICAgICAgICBjb250aW51ZTtcXG4gICAgICAgICAgfVxcblxcbiAgICAgICAgICBmb3IgKGludCBkeUNPZmZzZXQgPSAwOyBkeUNPZmZzZXQgPCB3aW5XaWR0aDsgZHlDT2Zmc2V0KyspIHtcXG4gICAgICAgICAgICBpbnQgZHlDID0gZHlDT2Zmc2V0ICsgc3RhcnREeUM7XFxuXFxuICAgICAgICAgICAgLy8gR3VhcmQgYWdhaW5zdCB0aGUgd2luZG93IGV4Y2VlZGluZyB0aGUgYm91bmRzIG9mIGR5XFxuICAgICAgICAgICAgaWYgKGR5QyA8IDAgfHwgZHlDID49IFwiK3UrXCIpIHtcXG4gICAgICAgICAgICAgIGNvbnRpbnVlO1xcbiAgICAgICAgICAgIH1cXG5cXG4gICAgICAgICAgICBmbG9hdCBkeFIgPSBmbG9hdChkeVIpICogaGVpZ2h0U2NhbGU7XFxuICAgICAgICAgICAgaW50IHRvcER4UkluZGV4ID0gaW50KGZsb29yKGR4UikpO1xcbiAgICAgICAgICAgIGludCBib3R0b21EeFJJbmRleCA9IGludChtaW4oY2VpbChkeFIpLCBcIisoby0xKStcIi4wKSk7XFxuICAgICAgICAgICAgZmxvYXQgZHhSTGVycCA9IGR4UiAtIGZsb2F0KHRvcER4UkluZGV4KTtcXG4gICAgICAgICAgICBmbG9hdCBpbnZlcnNlRHhSTGVycCA9IDEuMCAtIGR4UkxlcnA7XFxuXFxuICAgICAgICAgICAgZmxvYXQgZHhDID0gZmxvYXQoZHlDKSAqIHdpZHRoU2NhbGU7XFxuICAgICAgICAgICAgaW50IGxlZnREeENJbmRleCA9IGludChmbG9vcihkeEMpKTtcXG4gICAgICAgICAgICBpbnQgcmlnaHREeENJbmRleCA9IGludChtaW4oY2VpbChkeEMpLCBcIisoYS0xKStcIi4wKSk7XFxuICAgICAgICAgICAgZmxvYXQgZHhDTGVycCA9IGR4QyAtIGZsb2F0KGxlZnREeENJbmRleCk7XFxuICAgICAgICAgICAgZmxvYXQgaW52ZXJzZUR4Q0xlcnAgPSAxLjAgLSBkeENMZXJwO1xcblxcbiAgICAgICAgICAgIGlmIChyID09IHRvcER4UkluZGV4ICYmIGMgPT0gbGVmdER4Q0luZGV4KSB7XFxuICAgICAgICAgICAgICAvLyB0b3BMZWZ0XFxuICAgICAgICAgICAgICBhY2N1bXVsYXRvciArPVxcbiAgICAgICAgICAgICAgICBnZXREeShiLCBkeVIsIGR5QywgZCkgKiBpbnZlcnNlRHhSTGVycCAqIGludmVyc2VEeENMZXJwO1xcbiAgICAgICAgICAgIH1cXG5cXG4gICAgICAgICAgICBpZiAociA9PSB0b3BEeFJJbmRleCAmJiBjID09IHJpZ2h0RHhDSW5kZXgpIHtcXG4gICAgICAgICAgICAgIC8vIHRvcFJpZ2h0XFxuICAgICAgICAgICAgICBhY2N1bXVsYXRvciArPSBnZXREeShiLCBkeVIsIGR5QywgZCkgKiBpbnZlcnNlRHhSTGVycCAqIGR4Q0xlcnA7XFxuICAgICAgICAgICAgfVxcblxcbiAgICAgICAgICAgIGlmIChyID09IGJvdHRvbUR4UkluZGV4ICYmIGMgPT0gbGVmdER4Q0luZGV4KSB7XFxuICAgICAgICAgICAgICAvLyBib3R0b21MZWZ0XFxuICAgICAgICAgICAgICBhY2N1bXVsYXRvciArPSBnZXREeShiLCBkeVIsIGR5QywgZCkgKiBkeFJMZXJwICogaW52ZXJzZUR4Q0xlcnA7XFxuICAgICAgICAgICAgfVxcblxcbiAgICAgICAgICAgIGlmIChyID09IGJvdHRvbUR4UkluZGV4ICYmIGMgPT0gcmlnaHREeENJbmRleCkge1xcbiAgICAgICAgICAgICAgLy8gYm90dG9tUmlnaHRcXG4gICAgICAgICAgICAgIGFjY3VtdWxhdG9yICs9IGdldER5KGIsIGR5UiwgZHlDLCBkKSAqIGR4UkxlcnAgKiBkeENMZXJwO1xcbiAgICAgICAgICAgIH1cXG4gICAgICAgICAgfVxcbiAgICAgICAgfVxcbiAgICAgICAgLy8gRW5kIGxvb3Agb3ZlciBkeVxcblxcbiAgICAgICAgc2V0T3V0cHV0KGFjY3VtdWxhdG9yKTtcXG4gICAgICB9XFxuICAgIFwifSxlcz1mdW5jdGlvbih0LGUsbixyKXt0aGlzLnZhcmlhYmxlTmFtZXM9W1wiQVwiXSx0aGlzLm91dHB1dFNoYXBlPVtdO3ZhciBvPXRbMF0sYT10WzFdLGk9dFsyXSxzPXRbM107dGhpcy5vdXRwdXRTaGFwZT1bbyxlLG4sc107dmFyIHU9W3ImJmU+MT9hLTE6YSxyJiZuPjE/aS0xOmldLGM9W3ImJmU+MT9lLTE6ZSxyJiZuPjE/bi0xOm5dO3RoaXMudXNlckNvZGU9XCJcXG4gICAgICBjb25zdCB2ZWMyIGVmZmVjdGl2ZUlucHV0T3Zlck91dHB1dFJhdGlvUkMgPSB2ZWMyKFxcbiAgICAgICAgICBcIit1WzBdL2NbMF0rXCIsXFxuICAgICAgICAgIFwiK3VbMV0vY1sxXStcIik7XFxuICAgICAgY29uc3QgdmVjMiBpbnB1dFNoYXBlUkMgPSB2ZWMyKFwiK2ErXCIuMCwgXCIraStcIi4wKTtcXG5cXG4gICAgICB2b2lkIG1haW4oKSB7XFxuICAgICAgICBpdmVjNCBjb29yZHMgPSBnZXRPdXRwdXRDb29yZHMoKTtcXG4gICAgICAgIGludCBiID0gY29vcmRzWzBdO1xcbiAgICAgICAgaW50IGQgPSBjb29yZHNbM107XFxuICAgICAgICBpdmVjMiB5UkMgPSBjb29yZHMueXo7XFxuXFxuICAgICAgICAvLyBGcmFjdGlvbmFsIHNvdXJjZSBpbmRleC5cXG4gICAgICAgIHZlYzIgc291cmNlRnJhY0luZGV4UkMgPSB2ZWMyKHlSQykgKiBlZmZlY3RpdmVJbnB1dE92ZXJPdXRwdXRSYXRpb1JDO1xcblxcbiAgICAgICAgLy8gQ29tcHV0ZSB0aGUgZm91ciBpbnRlZ2VyIGluZGljZXMuXFxuICAgICAgICBpdmVjMiBzb3VyY2VGbG9vclJDID0gaXZlYzIoc291cmNlRnJhY0luZGV4UkMpO1xcbiAgICAgICAgaXZlYzIgc291cmNlQ2VpbFJDID0gaXZlYzIoXFxuICAgICAgICAgIG1pbihpbnB1dFNoYXBlUkMgLSAxLjAsIGNlaWwoc291cmNlRnJhY0luZGV4UkMpKSk7XFxuXFxuICAgICAgICBmbG9hdCB0b3BMZWZ0ID0gZ2V0QShiLCBzb3VyY2VGbG9vclJDLngsIHNvdXJjZUZsb29yUkMueSwgZCk7XFxuICAgICAgICBmbG9hdCBib3R0b21MZWZ0ID0gZ2V0QShiLCBzb3VyY2VDZWlsUkMueCwgc291cmNlRmxvb3JSQy55LCBkKTtcXG4gICAgICAgIGZsb2F0IHRvcFJpZ2h0ID0gZ2V0QShiLCBzb3VyY2VGbG9vclJDLngsIHNvdXJjZUNlaWxSQy55LCBkKTtcXG4gICAgICAgIGZsb2F0IGJvdHRvbVJpZ2h0ID0gZ2V0QShiLCBzb3VyY2VDZWlsUkMueCwgc291cmNlQ2VpbFJDLnksIGQpO1xcblxcbiAgICAgICAgdmVjMiBmcmFjUkMgPSBzb3VyY2VGcmFjSW5kZXhSQyAtIHZlYzIoc291cmNlRmxvb3JSQyk7XFxuXFxuICAgICAgICBmbG9hdCB0b3AgPSB0b3BMZWZ0ICsgKHRvcFJpZ2h0IC0gdG9wTGVmdCkgKiBmcmFjUkMueTtcXG4gICAgICAgIGZsb2F0IGJvdHRvbSA9IGJvdHRvbUxlZnQgKyAoYm90dG9tUmlnaHQgLSBib3R0b21MZWZ0KSAqIGZyYWNSQy55O1xcbiAgICAgICAgZmxvYXQgbmV3VmFsdWUgPSB0b3AgKyAoYm90dG9tIC0gdG9wKSAqIGZyYWNSQy54O1xcblxcbiAgICAgICAgc2V0T3V0cHV0KG5ld1ZhbHVlKTtcXG4gICAgICB9XFxuICAgIFwifSxucz1mdW5jdGlvbih0LGUsbixyKXt0aGlzLnZhcmlhYmxlTmFtZXM9W1wiQVwiXSx0aGlzLnBhY2tlZElucHV0cz0hMCx0aGlzLnBhY2tlZE91dHB1dD0hMCx0aGlzLm91dHB1dFNoYXBlPVtdO3ZhciBvPXRbMF0sYT10WzFdLGk9dFsyXSxzPXRbM107dGhpcy5vdXRwdXRTaGFwZT1bbyxlLG4sc107dmFyIHU9W3ImJmU+MT9hLTE6YSxyJiZuPjE/aS0xOmldLGM9W3ImJmU+MT9lLTE6ZSxyJiZuPjE/bi0xOm5dO3RoaXMudXNlckNvZGU9XCJcXG4gICAgICBjb25zdCB2ZWMzIGVmZmVjdGl2ZUlucHV0T3Zlck91dHB1dFJhdGlvUkMgPSB2ZWMzKFxcbiAgICAgICAgICBcIit1WzBdL2NbMF0rXCIsXFxuICAgICAgICAgIFwiK3VbMV0vY1sxXStcIixcXG4gICAgICAgICAgXCIrdVsxXS9jWzFdK1wiKTtcXG4gICAgICBjb25zdCB2ZWMzIGlucHV0U2hhcGVSQyA9IHZlYzMoXCIrYStcIi4wLCBcIitpK1wiLjAsXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiK2krXCIuMCk7XFxuXFxuICAgICAgZmxvYXQgZ2V0QVZhbHVlKGludCBiLCBpbnQgciwgaW50IGMsIGludCBkKSB7XFxuICAgICAgICByZXR1cm4gZ2V0Q2hhbm5lbChnZXRBKGIsIHIsIGMsIGQpLCB2ZWMyKGMsIGQpKTtcXG4gICAgICB9XFxuXFxuICAgICAgdm9pZCBtYWluKCkge1xcbiAgICAgICAgaXZlYzQgY29vcmRzID0gZ2V0T3V0cHV0Q29vcmRzKCk7XFxuICAgICAgICBpbnQgYiA9IGNvb3Jkc1swXTtcXG4gICAgICAgIGludCBkID0gY29vcmRzWzNdO1xcbiAgICAgICAgLy8gQ2FsY3VsYXRlIHZhbHVlcyBmb3IgbmV4dCBjb2x1bW4gaW4geVJDLnouXFxuICAgICAgICBpdmVjMyB5UkMgPSBjb29yZHMueXp6ICsgaXZlYzMoMCwgMCwgMSk7XFxuXFxuICAgICAgICAvLyBGcmFjdGlvbmFsIHNvdXJjZSBpbmRleC5cXG4gICAgICAgIHZlYzMgc291cmNlRnJhY0luZGV4UkMgPSB2ZWMzKHlSQykgKiBlZmZlY3RpdmVJbnB1dE92ZXJPdXRwdXRSYXRpb1JDO1xcblxcbiAgICAgICAgLy8gQ29tcHV0ZSB0aGUgZm91ciBpbnRlZ2VyIGluZGljZXMuXFxuICAgICAgICBpdmVjMyBzb3VyY2VGbG9vclJDID0gaXZlYzMoc291cmNlRnJhY0luZGV4UkMpO1xcbiAgICAgICAgaXZlYzMgc291cmNlQ2VpbFJDID0gaXZlYzMoXFxuICAgICAgICAgIG1pbihpbnB1dFNoYXBlUkMgLSAxLjAsIGNlaWwoc291cmNlRnJhY0luZGV4UkMpKSk7XFxuXFxuICAgICAgICAvLyBTaG91bGQgd2UgY2FsY3VsYXRlIG5leHQgY29sdW1uIGFuZCByb3cgZWxlbWVudHMgaW4gMngyIHBhY2tlZCBjZWxsLlxcbiAgICAgICAgYm9vbCBoYXNOZXh0Q29sID0gZCA8IFwiKyhzLTEpK1wiO1xcbiAgICAgICAgYm9vbCBoYXNOZXh0Um93ID0gY29vcmRzLnogPCBcIisobi0xKStcIjtcXG5cXG4gICAgICAgIC8vIEluIHBhcmFsbGVsLCBjb25zdHJ1Y3QgZm91ciBjb3JuZXJzIGZvciBhbGwgZm91ciBjb21wb25lbnRzIGluXFxuICAgICAgICAvLyBwYWNrZWQgMngyIGNlbGwuXFxuICAgICAgICB2ZWM0IHRvcExlZnQgPSB2ZWM0KFxcbiAgICAgICAgICBnZXRBVmFsdWUoYiwgc291cmNlRmxvb3JSQy54LCBzb3VyY2VGbG9vclJDLnksIGQpLFxcbiAgICAgICAgICBoYXNOZXh0Q29sID8gZ2V0QVZhbHVlKGIsIHNvdXJjZUZsb29yUkMueCwgc291cmNlRmxvb3JSQy55LCBkICsgMSlcXG4gICAgICAgICAgICAgICAgICAgICA6IDAuMCxcXG4gICAgICAgICAgaGFzTmV4dFJvdyA/IGdldEFWYWx1ZShiLCBzb3VyY2VGbG9vclJDLngsIHNvdXJjZUZsb29yUkMueiwgZClcXG4gICAgICAgICAgICAgICAgICAgICA6IDAuMCxcXG4gICAgICAgICAgKGhhc05leHRSb3cgJiYgaGFzTmV4dENvbCkgP1xcbiAgICAgICAgICAgIGdldEFWYWx1ZShiLCBzb3VyY2VGbG9vclJDLngsIHNvdXJjZUZsb29yUkMueiwgZCArIDEpIDogMC4wKTtcXG5cXG4gICAgICAgIHZlYzQgYm90dG9tTGVmdCA9IHZlYzQoXFxuICAgICAgICAgIGdldEFWYWx1ZShiLCBzb3VyY2VDZWlsUkMueCwgc291cmNlRmxvb3JSQy55LCBkKSxcXG4gICAgICAgICAgaGFzTmV4dENvbCA/IGdldEFWYWx1ZShiLCBzb3VyY2VDZWlsUkMueCwgc291cmNlRmxvb3JSQy55LCBkICsgMSlcXG4gICAgICAgICAgICAgICAgICAgICA6IDAuMCxcXG4gICAgICAgICAgaGFzTmV4dFJvdyA/IGdldEFWYWx1ZShiLCBzb3VyY2VDZWlsUkMueCwgc291cmNlRmxvb3JSQy56LCBkKVxcbiAgICAgICAgICAgICAgICAgICAgIDogMC4wLFxcbiAgICAgICAgICAoaGFzTmV4dFJvdyAmJiBoYXNOZXh0Q29sKSA/XFxuICAgICAgICAgICAgZ2V0QVZhbHVlKGIsIHNvdXJjZUNlaWxSQy54LCBzb3VyY2VGbG9vclJDLnosIGQgKyAxKSA6IDAuMCk7XFxuXFxuICAgICAgICB2ZWM0IHRvcFJpZ2h0ID0gdmVjNChcXG4gICAgICAgICAgZ2V0QVZhbHVlKGIsIHNvdXJjZUZsb29yUkMueCwgc291cmNlQ2VpbFJDLnksIGQpLFxcbiAgICAgICAgICBoYXNOZXh0Q29sID8gZ2V0QVZhbHVlKGIsIHNvdXJjZUZsb29yUkMueCwgc291cmNlQ2VpbFJDLnksIGQgKyAxKVxcbiAgICAgICAgICAgICAgICAgICAgIDogMC4wLFxcbiAgICAgICAgICBoYXNOZXh0Um93ID8gZ2V0QVZhbHVlKGIsIHNvdXJjZUZsb29yUkMueCwgc291cmNlQ2VpbFJDLnosIGQpXFxuICAgICAgICAgICAgICAgICAgICAgOiAwLjAsXFxuICAgICAgICAgIChoYXNOZXh0Um93ICYmIGhhc05leHRDb2wpID9cXG4gICAgICAgICAgICBnZXRBVmFsdWUoYiwgc291cmNlRmxvb3JSQy54LCBzb3VyY2VDZWlsUkMueiwgZCArIDEpIDogMC4wKTtcXG5cXG4gICAgICAgIHZlYzQgYm90dG9tUmlnaHQgPSB2ZWM0KFxcbiAgICAgICAgICBnZXRBVmFsdWUoYiwgc291cmNlQ2VpbFJDLngsIHNvdXJjZUNlaWxSQy55LCBkKSxcXG4gICAgICAgICAgaGFzTmV4dENvbCA/IGdldEFWYWx1ZShiLCBzb3VyY2VDZWlsUkMueCwgc291cmNlQ2VpbFJDLnksIGQgKyAxKVxcbiAgICAgICAgICAgICAgICAgICAgIDogMC4wLFxcbiAgICAgICAgICBoYXNOZXh0Um93ID8gZ2V0QVZhbHVlKGIsIHNvdXJjZUNlaWxSQy54LCBzb3VyY2VDZWlsUkMueiwgZClcXG4gICAgICAgICAgICAgICAgICAgICA6IDAuMCxcXG4gICAgICAgICAgKGhhc05leHRSb3cgJiYgaGFzTmV4dENvbCkgP1xcbiAgICAgICAgICAgIGdldEFWYWx1ZShiLCBzb3VyY2VDZWlsUkMueCwgc291cmNlQ2VpbFJDLnosIGQgKyAxKSA6IDAuMCk7XFxuXFxuICAgICAgICB2ZWMzIGZyYWNSQyA9IHNvdXJjZUZyYWNJbmRleFJDIC0gdmVjMyhzb3VyY2VGbG9vclJDKTtcXG5cXG4gICAgICAgIHZlYzQgdG9wID0gbWl4KHRvcExlZnQsIHRvcFJpZ2h0LCBmcmFjUkMueXl6eik7XFxuICAgICAgICB2ZWM0IGJvdHRvbSA9IG1peChib3R0b21MZWZ0LCBib3R0b21SaWdodCwgZnJhY1JDLnl5enopO1xcbiAgICAgICAgdmVjNCBuZXdWYWx1ZSA9IG1peCh0b3AsIGJvdHRvbSwgZnJhY1JDLngpO1xcblxcbiAgICAgICAgc2V0T3V0cHV0KG5ld1ZhbHVlKTtcXG4gICAgICB9XFxuICAgIFwifSxycz1mdW5jdGlvbih0LGUsbil7dGhpcy52YXJpYWJsZU5hbWVzPVtcImR5XCJdLHRoaXMub3V0cHV0U2hhcGU9W10sdGhpcy5vdXRwdXRTaGFwZT1lLnNoYXBlO3ZhciByPWUuc2hhcGUsbz1yWzFdLGE9clsyXSxpPXQuc2hhcGUscz1pWzFdLHU9aVsyXSxjPVtuJiZzPjE/by0xOm8sbiYmdT4xP2EtMTphXSxsPVtuJiZzPjE/cy0xOnMsbiYmdT4xP3UtMTp1XSxoPWNbMF0vbFswXSxmPWNbMV0vbFsxXSxkPTEvaCxwPTEvZix2PTIqTWF0aC5jZWlsKGQpKzIsbT0yKk1hdGguY2VpbChwKSsyO3RoaXMudXNlckNvZGU9XCJcXG4gICAgICB2b2lkIG1haW4oKSB7XFxuICAgICAgICBpdmVjNCBjb29yZHMgPSBnZXRPdXRwdXRDb29yZHMoKTtcXG4gICAgICAgIGludCBiID0gY29vcmRzWzBdO1xcbiAgICAgICAgaW50IGQgPSBjb29yZHNbM107XFxuICAgICAgICBpbnQgciA9IGNvb3Jkc1sxXTtcXG4gICAgICAgIGludCBjID0gY29vcmRzWzJdO1xcblxcbiAgICAgICAgZmxvYXQgYWNjdW11bGF0b3IgPSAwLjA7XFxuXFxuICAgICAgICBjb25zdCBmbG9hdCBoZWlnaHRTY2FsZSA9IGZsb2F0KFwiK2grXCIpO1xcbiAgICAgICAgY29uc3QgZmxvYXQgd2lkdGhTY2FsZSA9IGZsb2F0KFwiK2YrXCIpO1xcblxcbiAgICAgICAgY29uc3QgZmxvYXQgaW52SGVpZ2h0U2NhbGUgPSBmbG9hdChcIitkK1wiKTtcXG4gICAgICAgIGNvbnN0IGZsb2F0IGludldpZHRoU2NhbGUgPSBmbG9hdChcIitwK1wiKTtcXG5cXG4gICAgICAgIGNvbnN0IGludCB3aW5IZWlnaHQgPSBpbnQoXCIrditcIik7XFxuICAgICAgICBjb25zdCBpbnQgd2luV2lkdGggPSBpbnQoXCIrbStcIik7XFxuXFxuICAgICAgICAvLyBDb21wdXRlIGJvdW5kcyBmb3Igd2hlcmUgaW4gZHkgd2Ugd2lsbCBsb29rXFxuICAgICAgICBmbG9hdCBzdGFydFJMZXJwID0gZmxvb3IoZmxvYXQocikgKiBpbnZIZWlnaHRTY2FsZSk7XFxuICAgICAgICBpbnQgc3RhcnREeVIgPSBpbnQoZmxvb3Ioc3RhcnRSTGVycCAtIGZsb2F0KHdpbkhlaWdodCAvIDIpKSk7XFxuXFxuICAgICAgICBmbG9hdCBzdGFydENMZXJwID0gZmxvb3IoZmxvYXQoYykgKiBpbnZXaWR0aFNjYWxlKTtcXG4gICAgICAgIGludCBzdGFydER5QyA9IGludChmbG9vcihzdGFydENMZXJwIC0gZmxvYXQod2luV2lkdGggLyAyKSkpO1xcblxcbiAgICAgICAgLy8gTG9vcCBvdmVyIGR5XFxuICAgICAgICBmb3IgKGludCBkeVJPZmZzZXQgPSAwOyBkeVJPZmZzZXQgPCB3aW5IZWlnaHQ7IGR5Uk9mZnNldCsrKSB7XFxuICAgICAgICAgIGludCBkeVIgPSBkeVJPZmZzZXQgKyBzdGFydER5UjtcXG5cXG4gICAgICAgICAgLy8gR3VhcmQgYWdhaW5zdCB0aGUgd2luZG93IGV4Y2VlZGluZyB0aGUgYm91bmRzIG9mIGR5XFxuICAgICAgICAgIGlmIChkeVIgPCAwIHx8IGR5UiA+PSBcIitzK1wiKSB7XFxuICAgICAgICAgICAgY29udGludWU7XFxuICAgICAgICAgIH1cXG5cXG4gICAgICAgICAgZm9yIChpbnQgZHlDT2Zmc2V0ID0gMDsgZHlDT2Zmc2V0IDwgd2luV2lkdGg7IGR5Q09mZnNldCsrKSB7XFxuICAgICAgICAgICAgaW50IGR5QyA9IGR5Q09mZnNldCArIHN0YXJ0RHlDO1xcblxcbiAgICAgICAgICAgIC8vIEd1YXJkIGFnYWluc3QgdGhlIHdpbmRvdyBleGNlZWRpbmcgdGhlIGJvdW5kcyBvZiBkeVxcbiAgICAgICAgICAgIGlmIChkeUMgPCAwIHx8IGR5QyA+PSBcIit1K1wiKSB7XFxuICAgICAgICAgICAgICBjb250aW51ZTtcXG4gICAgICAgICAgICB9XFxuXFxuICAgICAgICAgICAgZmxvYXQgc291cmNlRnJhY1JvdyA9XFxuICAgICAgICAgICAgICBmbG9hdChcIitjWzBdK1wiKSAqXFxuICAgICAgICAgICAgICAgIChmbG9hdChkeVIpIC8gZmxvYXQoXCIrbFswXStcIikpO1xcblxcbiAgICAgICAgICAgIGZsb2F0IHNvdXJjZUZyYWNDb2wgPVxcbiAgICAgICAgICAgICAgICBmbG9hdChcIitjWzFdK1wiKSAqXFxuICAgICAgICAgICAgICAgICAgKGZsb2F0KGR5QykgLyBmbG9hdChcIitsWzFdK1wiKSk7XFxuXFxuICAgICAgICAgICAgaW50IHNvdXJjZU5lYXJlc3RSb3cgPSBpbnQobWluKFxcbiAgICAgICAgICAgICAgICBmbG9hdChpbnQoXCIrbytcIikgLSAxKSxcXG4gICAgICAgICAgICAgICAgXCIrbitcIiA/IGZsb2F0KHJvdW5kKHNvdXJjZUZyYWNSb3cpKSA6XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZsb2F0KGZsb29yKHNvdXJjZUZyYWNSb3cpKSkpO1xcblxcbiAgICAgICAgICAgIGludCBzb3VyY2VOZWFyZXN0Q29sID0gaW50KG1pbihcXG4gICAgICAgICAgICAgICAgZmxvYXQoaW50KFwiK2ErXCIpIC0gMSksXFxuICAgICAgICAgICAgICAgIFwiK24rXCIgPyBmbG9hdChyb3VuZChzb3VyY2VGcmFjQ29sKSkgOlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmbG9hdChmbG9vcihzb3VyY2VGcmFjQ29sKSkpKTtcXG5cXG4gICAgICAgICAgICBpZiAociA9PSBzb3VyY2VOZWFyZXN0Um93ICYmIGMgPT0gc291cmNlTmVhcmVzdENvbCkge1xcbiAgICAgICAgICAgICAgYWNjdW11bGF0b3IgKz0gZ2V0RHkoYiwgZHlSLCBkeUMsIGQpO1xcbiAgICAgICAgICAgIH1cXG4gICAgICAgICAgfVxcbiAgICAgICAgfVxcbiAgICAgICAgLy8gRW5kIGxvb3Agb3ZlciBkeVxcblxcbiAgICAgICAgc2V0T3V0cHV0KGFjY3VtdWxhdG9yKTtcXG4gICAgICB9XFxuICAgIFwifSxvcz1mdW5jdGlvbih0LGUsbixyKXt0aGlzLnZhcmlhYmxlTmFtZXM9W1wiQVwiXSx0aGlzLm91dHB1dFNoYXBlPVtdO3ZhciBvPXRbMF0sYT10WzFdLGk9dFsyXSxzPXRbM107dGhpcy5vdXRwdXRTaGFwZT1bbyxlLG4sc107dmFyIHU9W3ImJmU+MT9hLTE6YSxyJiZuPjE/aS0xOmldLGM9W3ImJmU+MT9lLTE6ZSxyJiZuPjE/bi0xOm5dLGw9cj9cIjAuNVwiOlwiMC4wXCI7dGhpcy51c2VyQ29kZT1cIlxcbiAgICAgIGNvbnN0IHZlYzIgZWZmZWN0aXZlSW5wdXRPdmVyT3V0cHV0UmF0aW9SQyA9IHZlYzIoXFxuICAgICAgICAgIFwiK3VbMF0vY1swXStcIixcXG4gICAgICAgICAgXCIrdVsxXS9jWzFdK1wiKTtcXG4gICAgICBjb25zdCB2ZWMyIGlucHV0U2hhcGVSQyA9IHZlYzIoXCIrYStcIi4wLCBcIitpK1wiLjApO1xcblxcbiAgICAgIHZvaWQgbWFpbigpIHtcXG4gICAgICAgIGl2ZWM0IGNvb3JkcyA9IGdldE91dHB1dENvb3JkcygpO1xcbiAgICAgICAgaW50IGIgPSBjb29yZHNbMF07XFxuICAgICAgICBpbnQgZCA9IGNvb3Jkc1szXTtcXG4gICAgICAgIGl2ZWMyIHlSQyA9IGNvb3Jkcy55ejtcXG5cXG4gICAgICAgIC8vIEZyYWN0aW9uYWwgc291cmNlIGluZGV4LlxcbiAgICAgICAgdmVjMiBzb3VyY2VGcmFjSW5kZXhSQyA9IHZlYzIoeVJDKSAqIGVmZmVjdGl2ZUlucHV0T3Zlck91dHB1dFJhdGlvUkM7XFxuXFxuICAgICAgICAvLyBDb21wdXRlIHRoZSBjb29yZGluYXRvcnMgb2YgbmVhcmVzdCBuZWlnaGJvciBwb2ludC5cXG4gICAgICAgIGl2ZWMyIHNvdXJjZU5lYXJlc3RSQyA9IGl2ZWMyKFxcbiAgICAgICAgICBtaW4oaW5wdXRTaGFwZVJDIC0gMS4wLCBmbG9vcihzb3VyY2VGcmFjSW5kZXhSQyArIFwiK2wrXCIpKSk7XFxuXFxuICAgICAgICBmbG9hdCBuZXdWYWx1ZSA9IGdldEEoYiwgc291cmNlTmVhcmVzdFJDLngsIHNvdXJjZU5lYXJlc3RSQy55LCBkKTtcXG5cXG4gICAgICAgIHNldE91dHB1dChuZXdWYWx1ZSk7XFxuICAgICAgfVxcbiAgICBcIn0sYXM9ZnVuY3Rpb24odCxlKXt0aGlzLnZhcmlhYmxlTmFtZXM9W1wieFwiXTt2YXIgbj10Lmxlbmd0aDtpZihuPjQpdGhyb3cgbmV3IEVycm9yKFwiV2ViR0wgYmFja2VuZDogUmV2ZXJzZSBvZiByYW5rLVwiK24rXCIgdGVuc29yIGlzIG5vdCB5ZXQgc3VwcG9ydGVkXCIpO2lmKHRoaXMub3V0cHV0U2hhcGU9dCwxIT09bil7dmFyIHI9dC5tYXAoKGZ1bmN0aW9uKG4scil7cmV0dXJuIGZ1bmN0aW9uKG4pe3JldHVybi0xIT09ZS5pbmRleE9mKG4pJiYxIT09dFtuXT90W25dK1wiIC0gY29vcmRzW1wiK24rXCJdIC0gMVwiOlwiY29vcmRzW1wiK24rXCJdXCJ9KHIpfSkpLmpvaW4oXCIsXCIpLG89d2Eobik7dGhpcy51c2VyQ29kZT1cIlxcbiAgICAgIHZvaWQgbWFpbigpIHtcXG4gICAgICAgIFwiK28rXCIgY29vcmRzID0gZ2V0T3V0cHV0Q29vcmRzKCk7XFxuICAgICAgICBzZXRPdXRwdXQoZ2V0WChcIityK1wiKSk7XFxuICAgICAgfVxcbiAgICBcIn1lbHNlIHRoaXMudXNlckNvZGU9XCJcXG4gICAgICAgIHZvaWQgbWFpbigpIHtcXG4gICAgICAgICAgaW50IGNvb3JkID0gZ2V0T3V0cHV0Q29vcmRzKCk7XFxuICAgICAgICAgIHNldE91dHB1dChnZXRYKFwiK3RbMF0rXCIgLSBjb29yZCAtIDEpKTtcXG4gICAgICAgIH1cXG4gICAgICBcIn0saXM9ZnVuY3Rpb24odCxlKXt0aGlzLnZhcmlhYmxlTmFtZXM9W1wieFwiXSx0aGlzLnBhY2tlZElucHV0cz0hMCx0aGlzLnBhY2tlZE91dHB1dD0hMDt2YXIgbj10Lmxlbmd0aDtpZihuPjQpdGhyb3cgbmV3IEVycm9yKFwiV2ViR0wgYmFja2VuZDogUmV2ZXJzZSBvZiByYW5rLVwiK24rXCIgdGVuc29yIGlzIG5vdCB5ZXQgc3VwcG9ydGVkXCIpO3RoaXMub3V0cHV0U2hhcGU9dDt2YXIgcj1zYShcInJjXCIsbiksbz1yW24tMV0rXCIgKyAxIDwgXCIrdGhpcy5vdXRwdXRTaGFwZVtuLTFdLGE9cltuLTJdK1wiICsgMSA8IFwiK3RoaXMub3V0cHV0U2hhcGVbbi0yXSxpPXdhKG4pO2Z1bmN0aW9uIHMobil7dmFyIHI9dC5tYXAoKGZ1bmN0aW9uKHIsbyl7cmV0dXJuIGZ1bmN0aW9uKG4scil7cmV0dXJuLTEhPT1lLmluZGV4T2YobikmJjEhPT10W25dP3Rbbl0rXCIgLSBcIityW25dK1wiIC0gMVwiOlwiXCIrcltuXX0obyxuKX0pKTtyZXR1cm5cImdldENoYW5uZWwoZ2V0WChcIityLmpvaW4oXCIsXCIpK1wiKSwgdmVjMihcIityLnNsaWNlKC0yKS5qb2luKFwiLFwiKStcIikpXCJ9dGhpcy51c2VyQ29kZT0xPT09bj9cIlxcbiAgICAgICAgdm9pZCBtYWluKCl7XFxuICAgICAgICAgIGludCByYyA9IGdldE91dHB1dENvb3JkcygpO1xcbiAgICAgICAgICB2ZWM0IHJlc3VsdCA9IHZlYzQoMC4pO1xcbiAgICAgICAgICByZXN1bHQuciA9IGdldENoYW5uZWwoZ2V0WChcIit0WzBdK1wiIC0gcmMgLSAxKSxcXG4gICAgICAgICAgICBcIit0WzBdK1wiIC0gcmMgLSAxKTtcXG4gICAgICAgICAgaWYoXCIrbytcIil7XFxuICAgICAgICAgICAgICByZXN1bHQuZyA9IGdldENoYW5uZWwoZ2V0WChcIit0WzBdK1wiIC0gKHJjICArIDEpIC0gMSksXFxuICAgICAgICAgICAgICAgIFwiK3RbMF0rXCIgLSAocmMgICsgMSkgLSAxKTtcXG4gICAgICAgICAgfVxcbiAgICAgICAgICBzZXRPdXRwdXQocmVzdWx0KTtcXG4gICAgICAgIH1cXG4gICAgICBcIjpcIlxcbiAgICAgICAgdm9pZCBtYWluKCkge1xcbiAgICAgICAgICBcIitpK1wiIHJjID0gZ2V0T3V0cHV0Q29vcmRzKCk7XFxuICAgICAgICAgIHZlYzQgcmVzdWx0ID0gdmVjNCgwLik7XFxuICAgICAgICAgIHJlc3VsdC5yID0gXCIrZnVuY3Rpb24odCl7cmV0dXJuIHModCl9KHIuc2xpY2UoKSkrXCI7XFxuICAgICAgICAgIGlmKFwiK28rXCIpe1xcbiAgICAgICAgICAgIHJlc3VsdC5nID0gXCIrZnVuY3Rpb24odCl7cmV0dXJuIHRbbi0xXT1cIihcIit0W24tMV0rXCIgKyAxKVwiLHModCl9KHIuc2xpY2UoKSkrXCI7XFxuICAgICAgICAgIH1cXG4gICAgICAgICAgaWYoXCIrYStcIikge1xcbiAgICAgICAgICAgIHJlc3VsdC5iID0gXCIrZnVuY3Rpb24odCl7cmV0dXJuIHRbbi0yXT1cIihcIit0W24tMl0rXCIgKyAxKVwiLHModCl9KHIuc2xpY2UoKSkrXCI7XFxuICAgICAgICAgICAgaWYoXCIrbytcIikge1xcbiAgICAgICAgICAgICAgcmVzdWx0LmEgPSBcIitmdW5jdGlvbih0KXtyZXR1cm4gdFtuLTFdPVwiKFwiK3Rbbi0xXStcIiArIDEpXCIsdFtuLTJdPVwiKFwiK3Rbbi0yXStcIiArIDEpXCIscyh0KX0oci5zbGljZSgpKStcIjtcXG4gICAgICAgICAgICB9XFxuICAgICAgICAgIH1cXG4gICAgICAgICAgc2V0T3V0cHV0KHJlc3VsdCk7XFxuICAgICAgICB9XFxuICAgIFwifSxzcz1mdW5jdGlvbih0LGUsbixyLG8sYSxpKXt2b2lkIDA9PT1pJiYoaT0hMCksdGhpcy52YXJpYWJsZU5hbWVzPVtcInVwZGF0ZXNcIixcImluZGljZXNcIixcImRlZmF1bHRWYWx1ZVwiXSx0aGlzLm91dHB1dFNoYXBlPWE7dmFyIHM9d2Eoby5sZW5ndGgpLHU9d2EoYS5sZW5ndGgpLGM9XCJcIjsxPT09bj9jPVwiaVwiOjI9PT1uJiYoYz1cImksIGpcIik7dmFyIGw9XCJnZXRJbmRpY2VzKFwiK2MrXCIpXCIsaD1cIlwiOzE9PT1yP2g9XCJpXCI6Mj09PXImJihoPVwiaSwgY29vcmRzWzFdXCIpO3ZhciBmPVwiZ2V0VXBkYXRlcyhcIitoK1wiKVwiLGQ9ZT4xP1wic3RyaWRlc1tqXVwiOlwic3RyaWRlc1wiO3RoaXMudXNlckNvZGU9XCJcXG4gICAgICAgIFwiK3MrXCIgc3RyaWRlcyA9IFwiK3MrXCIoXCIrbytcIik7XFxuXFxuICAgICAgICB2b2lkIG1haW4oKSB7XFxuICAgICAgICAgIFwiK3UrXCIgY29vcmRzID0gZ2V0T3V0cHV0Q29vcmRzKCk7XFxuICAgICAgICAgIGZsb2F0IHN1bSA9IDAuMDtcXG4gICAgICAgICAgYm9vbCBmb3VuZCA9IGZhbHNlO1xcbiAgICAgICAgICBmb3IgKGludCBpID0gMDsgaSA8IFwiK3QrXCI7IGkrKykge1xcbiAgICAgICAgICAgIGludCBmbGF0dGVuZWRJbmRleCA9IDA7XFxuICAgICAgICAgICAgZm9yIChpbnQgaiA9IDA7IGogPCBcIitlK1wiOyBqKyspIHtcXG4gICAgICAgICAgICAgIGludCBpbmRleCA9IHJvdW5kKFwiK2wrXCIpO1xcbiAgICAgICAgICAgICAgZmxhdHRlbmVkSW5kZXggKz0gaW5kZXggKiBcIitkK1wiO1xcbiAgICAgICAgICAgIH1cXG4gICAgICAgICAgICBpZiAoZmxhdHRlbmVkSW5kZXggPT0gY29vcmRzWzBdKSB7XFxuICAgICAgICAgICAgICBzdW0gKz0gXCIrZitcIjtcXG4gICAgICAgICAgICAgIGZvdW5kID0gdHJ1ZTtcXG4gICAgICAgICAgICB9XFxuICAgICAgICAgIH1cXG4gICAgICAgICAgc2V0T3V0cHV0KG1peChnZXREZWZhdWx0VmFsdWUoKSwgc3VtLCBmbG9hdChmb3VuZCkpKTtcXG4gICAgICAgIH1cXG4gICAgICBcIn0sdXM9ZnVuY3Rpb24odCxlKXt0aGlzLnZhcmlhYmxlTmFtZXM9W1wieFwiLFwic2VnbWVudElkc1wiXTt2YXIgbj10LndpbmRvd1NpemUscj10LmJhdGNoU2l6ZSxvPXQuaW5TaXplLGE9dC5udW1TZWdtZW50cyxpPWEqTWF0aC5jZWlsKG8vbik7dGhpcy5vdXRwdXRTaGFwZT1bcixpXTt2YXIgcz00Kk1hdGguZmxvb3Iobi80KSx1PW4lNCxjPVwiXFxuICAgICAgICBzdW1WYWx1ZSArPSBkb3QodmFsdWVzLCBzZWdGaWx0ZXIpO1xcbiAgICBcIixsPVwiXCI7byVuPjAmJihsPVwiXFxuICAgICAgICBpZiAoaW5JZHggPCAwIHx8IGluSWR4ID49IFwiK28rXCIpIHtcXG4gICAgICAgICAgcmV0dXJuIGluaXRpYWxpemF0aW9uVmFsdWU7XFxuICAgICAgICB9XFxuICAgICAgXCIpO3ZhciBoPVwiXCI7byVuPjAmJihoPVwiXFxuICAgICAgICBpZiAoaW5JZHggPCAwIHx8IGluSWR4ID49IFwiK28rXCIpIHtcXG4gICAgICAgICAgcmV0dXJuIC0xLjA7XFxuICAgICAgICB9XFxuICAgICAgXCIpLHRoaXMudXNlckNvZGU9XCJcXG4gICAgICBjb25zdCBmbG9hdCBpbml0aWFsaXphdGlvblZhbHVlID0gMC4wO1xcblxcbiAgICAgIGZsb2F0IGdldFZhbHVlKGludCBiYXRjaCwgaW50IGluSWR4KSB7XFxuICAgICAgICBcIitsK1wiXFxuICAgICAgICByZXR1cm4gZ2V0WChiYXRjaCwgaW5JZHgpO1xcbiAgICAgIH1cXG5cXG4gICAgICBmbG9hdCBnZXRTZWdtZW50SWRBdEluZGV4KGludCBpbklkeCkge1xcbiAgICAgICAgXCIraCtcIlxcbiAgICAgICAgcmV0dXJuIGdldFNlZ21lbnRJZHMoaW5JZHgpO1xcbiAgICAgIH1cXG5cXG4gICAgICB2b2lkIG1haW4oKSB7XFxuICAgICAgICBpdmVjMiBjb29yZHMgPSBnZXRPdXRwdXRDb29yZHMoKTtcXG4gICAgICAgIGludCBiYXRjaCA9IGNvb3Jkc1swXTtcXG4gICAgICAgIGludCBvdXRJZHggPSBjb29yZHNbMV07XFxuICAgICAgICBpbnQgaW5PZmZzZXQgPSBpbnQoZmxvb3IoZmxvYXQob3V0SWR4KSAvIGZsb2F0KFxcbiAgICAgICAgICBcIithK1wiKSkgKiBmbG9hdChcIituK1wiKSk7XFxuICAgICAgICBpbnQgY3VycmVudFNlZyA9IGludChtb2QoZmxvYXQob3V0SWR4KSwgZmxvYXQoXCIrYStcIikpKTtcXG5cXG4gICAgICAgIGZsb2F0IHN1bVZhbHVlID0gMC4wO1xcblxcbiAgICAgICAgZm9yIChpbnQgaSA9IDA7IGkgPCBcIitzK1wiOyBpICs9IDQpIHtcXG4gICAgICAgICAgaW50IGluSWR4ID0gaW5PZmZzZXQgKyBpO1xcbiAgICAgICAgICB2ZWM0IHZhbHVlcyA9IHZlYzQoXFxuICAgICAgICAgICAgZ2V0VmFsdWUoYmF0Y2gsIGluSWR4KSxcXG4gICAgICAgICAgICBnZXRWYWx1ZShiYXRjaCwgaW5JZHggKyAxKSxcXG4gICAgICAgICAgICBnZXRWYWx1ZShiYXRjaCwgaW5JZHggKyAyKSxcXG4gICAgICAgICAgICBnZXRWYWx1ZShiYXRjaCwgaW5JZHggKyAzKVxcbiAgICAgICAgICApO1xcblxcbiAgICAgICAgICB2ZWM0IHNlZ0ZpbHRlciA9IHZlYzQoXFxuICAgICAgICAgICAgaW50KGdldFNlZ21lbnRJZEF0SW5kZXgoaW5JZHgpKSA9PSBjdXJyZW50U2VnID8gMSA6IDAsXFxuICAgICAgICAgICAgaW50KGdldFNlZ21lbnRJZEF0SW5kZXgoaW5JZHggKyAxKSkgPT0gY3VycmVudFNlZyA/IDEgOiAwLFxcbiAgICAgICAgICAgIGludChnZXRTZWdtZW50SWRBdEluZGV4KGluSWR4ICsgMikpID09IGN1cnJlbnRTZWcgPyAxIDogMCxcXG4gICAgICAgICAgICBpbnQoZ2V0U2VnbWVudElkQXRJbmRleChpbklkeCArIDMpKSA9PSBjdXJyZW50U2VnID8gMSA6IDBcXG4gICAgICAgICAgKTtcXG5cXG4gICAgICAgICAgXCIrYytcIlxcbiAgICAgICAgfVxcblxcbiAgICAgICAgaW50IGluSWR4ID0gaW5PZmZzZXQgKyBcIitzK1wiO1xcbiAgICAgICAgaWYgKFwiKygxPT09dSkrXCIpIHtcXG4gICAgICAgICAgdmVjNCB2YWx1ZXMgPSB2ZWM0KFxcbiAgICAgICAgICAgIGdldFZhbHVlKGJhdGNoLCBpbklkeCksXFxuICAgICAgICAgICAgaW5pdGlhbGl6YXRpb25WYWx1ZSxcXG4gICAgICAgICAgICBpbml0aWFsaXphdGlvblZhbHVlLFxcbiAgICAgICAgICAgIGluaXRpYWxpemF0aW9uVmFsdWVcXG4gICAgICAgICAgKTtcXG5cXG4gICAgICAgICAgaW50IGluSWR4U2VnID0gaW50KGdldFNlZ21lbnRJZEF0SW5kZXgoaW5JZHgpKTtcXG5cXG4gICAgICAgICAgdmVjNCBzZWdGaWx0ZXIgPSB2ZWM0KFxcbiAgICAgICAgICAgIGludChnZXRTZWdtZW50SWRBdEluZGV4KGluSWR4KSkgPT0gY3VycmVudFNlZyA/IDEgOiAwLFxcbiAgICAgICAgICAgIDAsXFxuICAgICAgICAgICAgMCxcXG4gICAgICAgICAgICAwXFxuICAgICAgICAgICk7XFxuXFxuICAgICAgICAgIFwiK2MrXCJcXG4gICAgICAgIH0gZWxzZSBpZiAoXCIrKDI9PT11KStcIikge1xcbiAgICAgICAgICB2ZWM0IHZhbHVlcyA9IHZlYzQoXFxuICAgICAgICAgICAgZ2V0VmFsdWUoYmF0Y2gsIGluSWR4KSxcXG4gICAgICAgICAgICBnZXRWYWx1ZShiYXRjaCwgaW5JZHggKyAxKSxcXG4gICAgICAgICAgICBpbml0aWFsaXphdGlvblZhbHVlLFxcbiAgICAgICAgICAgIGluaXRpYWxpemF0aW9uVmFsdWVcXG4gICAgICAgICAgKTtcXG5cXG4gICAgICAgICAgdmVjNCBzZWdGaWx0ZXIgPSB2ZWM0KFxcbiAgICAgICAgICAgIGludChnZXRTZWdtZW50SWRBdEluZGV4KGluSWR4KSkgPT0gY3VycmVudFNlZyA/IDEgOiAwLFxcbiAgICAgICAgICAgIGludChnZXRTZWdtZW50SWRBdEluZGV4KGluSWR4ICsgMSkpID09IGN1cnJlbnRTZWcgPyAxIDogMCxcXG4gICAgICAgICAgICAgIDAsXFxuICAgICAgICAgICAgICAwXFxuICAgICAgICAgICk7XFxuXFxuICAgICAgICAgIFwiK2MrXCJcXG4gICAgICAgIH0gZWxzZSBpZiAoXCIrKDM9PT11KStcIikge1xcbiAgICAgICAgICB2ZWM0IHZhbHVlcyA9IHZlYzQoXFxuICAgICAgICAgICAgZ2V0VmFsdWUoYmF0Y2gsIGluSWR4KSxcXG4gICAgICAgICAgICBnZXRWYWx1ZShiYXRjaCwgaW5JZHggKyAxKSxcXG4gICAgICAgICAgICBnZXRWYWx1ZShiYXRjaCwgaW5JZHggKyAyKSxcXG4gICAgICAgICAgICBpbml0aWFsaXphdGlvblZhbHVlXFxuICAgICAgICAgICk7XFxuXFxuICAgICAgICAgIHZlYzQgc2VnRmlsdGVyID0gdmVjNChcXG4gICAgICAgICAgICBpbnQoZ2V0U2VnbWVudElkQXRJbmRleChpbklkeCkpID09IGN1cnJlbnRTZWcgPyAxIDogMCxcXG4gICAgICAgICAgICBpbnQoZ2V0U2VnbWVudElkQXRJbmRleChpbklkeCArIDEpKSA9PSBjdXJyZW50U2VnID8gMSA6IDAsXFxuICAgICAgICAgICAgaW50KGdldFNlZ21lbnRJZEF0SW5kZXgoaW5JZHggKyAyKSkgPT0gY3VycmVudFNlZyA/IDEgOiAwLFxcbiAgICAgICAgICAgIDBcXG4gICAgICAgICAgKTtcXG5cXG4gICAgICAgICAgXCIrYytcIlxcbiAgICAgICAgfVxcbiAgICAgICAgc2V0T3V0cHV0KHN1bVZhbHVlKTtcXG4gICAgICB9XFxuICAgIFwifSxjcz1mdW5jdGlvbih0LGUsbil7dmFyIHIsbztpZih0aGlzLnZhcmlhYmxlTmFtZXM9W1wiY1wiLFwiYVwiLFwiYlwiXSx0aGlzLm91dHB1dFNoYXBlPWUsbj40KXRocm93IEVycm9yKFwiV2hlcmUgZm9yIHJhbmsgXCIrbitcIiBpcyBub3QgeWV0IHN1cHBvcnRlZFwiKTtpZigxPT09bilvPVwicmVzUkNcIixyPVwicmVzUkNcIjtlbHNle2Zvcih2YXIgYT1bXCJyZXNSQy54XCIsXCJyZXNSQy55XCIsXCJyZXNSQy56XCIsXCJyZXNSQy53XCJdLGk9W10scz1bXSx1PTA7dTxlLmxlbmd0aDt1Kyspcy5wdXNoKFwiXCIrYVt1XSksdTx0JiZpLnB1c2goXCJcIithW3VdKTtyPWkuam9pbigpLG89cy5qb2luKCl9dmFyIGM9d2Eobik7dGhpcy51c2VyQ29kZT1cIlxcbiAgICAgIHZvaWQgbWFpbigpIHtcXG4gICAgICAgIFwiK2MrXCIgcmVzUkMgPSBnZXRPdXRwdXRDb29yZHMoKTtcXG4gICAgICAgIGZsb2F0IGNWYWwgPSBnZXRDKFwiK3IrXCIpO1xcbiAgICAgICAgaWYgKGNWYWwgPj0gMS4wKSB7XFxuICAgICAgICAgIHNldE91dHB1dChnZXRBKFwiK28rXCIpKTtcXG4gICAgICAgIH0gZWxzZSB7XFxuICAgICAgICAgIHNldE91dHB1dChnZXRCKFwiK28rXCIpKTtcXG4gICAgICAgIH1cXG4gICAgICB9XFxuICAgIFwifSxscz1mdW5jdGlvbigpe2Z1bmN0aW9uIHQodCl7dGhpcy52YXJpYWJsZU5hbWVzPVtcInNvdXJjZVwiXSx0aGlzLm91dHB1dFNoYXBlPXQsdGhpcy5yYW5rPXQubGVuZ3RoO3ZhciBlLG49d2EodGhpcy5yYW5rKSxyPVwidW5pZm9ybSBpbnQgc3RhcnRbXCIrdGhpcy5yYW5rK1wiXTtcIixvPWZ1bmN0aW9uKHQpe2lmKDE9PT10KXJldHVyblwic291cmNlTG9jXCI7aWYodDw9NilyZXR1cm4gaHMuc2xpY2UoMCx0KS5tYXAoKGZ1bmN0aW9uKHQpe3JldHVyblwic291cmNlTG9jLlwiK3R9KSkuam9pbihcIixcIik7dGhyb3cgRXJyb3IoXCJTbGljaW5nIGZvciByYW5rIFwiK3QrXCIgaXMgbm90IHlldCBzdXBwb3J0ZWRcIil9KHRoaXMucmFuayk7ZT1cIlxcbiAgICAgICAgXCIrbitcIiBzb3VyY2VMb2M7XFxuICAgICAgICBcIituK1wiIGNvb3JkcyA9IGdldE91dHB1dENvb3JkcygpO1xcbiAgICAgICAgXCIrdC5tYXAoKGZ1bmN0aW9uKHQsZSl7cmV0dXJuXCJzb3VyY2VMb2MuXCIraHNbZV0rXCIgPSBzdGFydFtcIitlK1wiXSArIGNvb3Jkcy5cIitoc1tlXStcIjtcIn0pKS5qb2luKFwiXFxuXCIpK1wiXFxuICAgICAgXCIsdGhpcy51c2VyQ29kZT1cIlxcbiAgICAgIFwiK3IrXCJcXG4gICAgICB2b2lkIG1haW4oKSB7XFxuICAgICAgICBcIitlK1wiXFxuICAgICAgICBzZXRPdXRwdXQoZ2V0U291cmNlKFwiK28rXCIpKTtcXG4gICAgICB9XFxuICAgIFwifXJldHVybiB0LnByb3RvdHlwZS5nZXRDdXN0b21TZXR1cEZ1bmM9ZnVuY3Rpb24odCl7dmFyIGU9dGhpcztpZih0Lmxlbmd0aCE9PXRoaXMucmFuayl0aHJvdyBFcnJvcihcIlRoZSByYW5rIChcIit0aGlzLnJhbmsrXCIpIG9mIHRoZSBwcm9ncmFtIG11c3QgbWF0Y2ggdGhlIGxlbmd0aCBvZiBzdGFydCAoXCIrdC5sZW5ndGgrXCIpXCIpO3JldHVybiBmdW5jdGlvbihuLHIpe251bGw9PWUuc3RhcnRMb2MmJihlLnN0YXJ0TG9jPW4uZ2V0VW5pZm9ybUxvY2F0aW9uTm9UaHJvdyhyLFwic3RhcnRcIiksbnVsbD09ZS5zdGFydExvYyl8fG4uZ2wudW5pZm9ybTFpdihlLnN0YXJ0TG9jLHQpfX0sdH0oKSxocz1bXCJ4XCIsXCJ5XCIsXCJ6XCIsXCJ3XCIsXCJ1XCIsXCJ2XCJdO3ZhciBmcz1mdW5jdGlvbigpe2Z1bmN0aW9uIHQodCl7dGhpcy52YXJpYWJsZU5hbWVzPVtcInNvdXJjZVwiXSx0aGlzLnBhY2tlZElucHV0cz0hMCx0aGlzLnBhY2tlZE91dHB1dD0hMCx0aGlzLm91dHB1dFNoYXBlPXQsdGhpcy5yYW5rPXQubGVuZ3RoO3ZhciBlPXdhKHRoaXMucmFuayksbj1zYShcImNvb3Jkc1wiLHRoaXMucmFuaykscj1zYShcInNvdXJjZUxvY1wiLHRoaXMucmFuayksbz0xPT09dGhpcy5yYW5rP1wic291cmNlTG9jXCI6XCJ2ZWMyKFwiK3Iuc2xpY2UoLTIpLmpvaW4oKStcIilcIixhPVwiZ2V0Q2hhbm5lbChnZXRTb3VyY2UoXCIrci5qb2luKCkrXCIpLCBcIitvK1wiKVwiLGk9XCJcXG4gICAgICByZXN1bHQueCA9IFwiK2ErXCI7XFxuICAgICAgaWYgKCsrXCIrblt0aGlzLnJhbmstMV0rXCIgPCBcIit0W3RoaXMucmFuay0xXStcIikge1xcbiAgICAgICAgKytcIityW3RoaXMucmFuay0xXStcIjtcXG4gICAgICAgIHJlc3VsdC55ID0gXCIrYStcIjtcXG4gICAgICAgIC0tXCIrclt0aGlzLnJhbmstMV0rXCI7XFxuICAgICAgfVxcbiAgICBcIixzPTE9PT10aGlzLnJhbms/XCJcIjpcIlxcbiAgICAgIC0tXCIrblt0aGlzLnJhbmstMV0rXCI7XFxuICAgICAgaWYgKCsrXCIrblt0aGlzLnJhbmstMl0rXCIgPCBcIit0W3RoaXMucmFuay0yXStcIikge1xcbiAgICAgICAgKytcIityW3RoaXMucmFuay0yXStcIjtcXG4gICAgICAgIHJlc3VsdC56ID0gXCIrYStcIjtcXG4gICAgICAgIGlmICgrK1wiK25bdGhpcy5yYW5rLTFdK1wiIDwgXCIrdFt0aGlzLnJhbmstMV0rXCIpIHtcXG4gICAgICAgICAgKytcIityW3RoaXMucmFuay0xXStcIjtcXG4gICAgICAgICAgcmVzdWx0LncgPSBcIithK1wiO1xcbiAgICAgICAgfVxcbiAgICAgIH1cXG4gICAgXCIsdT10aGlzLnJhbms8PTQ/XCJzb3VyY2VMb2MgPSBjb29yZHMgK1xcbiAgICAgICAgICAgIFwiK2UrXCIoXCIrdC5tYXAoKGZ1bmN0aW9uKHQsZSl7cmV0dXJuXCJzdGFydFtcIitlK1wiXVwifSkpLmpvaW4oKStcIik7XCI6dC5tYXAoKGZ1bmN0aW9uKHQsZSl7cmV0dXJuIHJbZV0rXCIgPSBcIituW2VdK1wiICsgc3RhcnRbXCIrZStcIl07XCJ9KSkuam9pbihcIlxcblwiKTt0aGlzLnVzZXJDb2RlPVwiXFxuICAgICAgdW5pZm9ybSBpbnQgc3RhcnRbXCIrdGhpcy5yYW5rK1wiXTtcXG4gICAgICB2b2lkIG1haW4oKSB7XFxuICAgICAgICBcIitlK1wiIGNvb3JkcyA9IGdldE91dHB1dENvb3JkcygpO1xcbiAgICAgICAgXCIrZStcIiBzb3VyY2VMb2M7XFxuICAgICAgICBcIit1K1wiXFxuICAgICAgICB2ZWM0IHJlc3VsdCA9IHZlYzQoMC4pO1xcbiAgICAgICAgXCIraStcIlxcbiAgICAgICAgXCIrcytcIlxcbiAgICAgICAgc2V0T3V0cHV0KHJlc3VsdCk7XFxuICAgICAgfVxcbiAgICBcIn1yZXR1cm4gdC5wcm90b3R5cGUuZ2V0Q3VzdG9tU2V0dXBGdW5jPWZ1bmN0aW9uKHQpe3ZhciBlPXRoaXM7aWYodC5sZW5ndGghPT10aGlzLnJhbmspdGhyb3cgRXJyb3IoXCJUaGUgcmFuayAoXCIrdGhpcy5yYW5rK1wiKSBvZiB0aGUgcHJvZ3JhbSBtdXN0IG1hdGNoIHRoZSBsZW5ndGggb2Ygc3RhcnQgKFwiK3QubGVuZ3RoK1wiKVwiKTtyZXR1cm4gZnVuY3Rpb24obixyKXtudWxsPT1lLnN0YXJ0TG9jJiYoZS5zdGFydExvYz1uLmdldFVuaWZvcm1Mb2NhdGlvbk5vVGhyb3cocixcInN0YXJ0XCIpLG51bGw9PWUuc3RhcnRMb2MpfHxuLmdsLnVuaWZvcm0xaXYoZS5zdGFydExvYyx0KX19LHR9KCksZHM9ZnVuY3Rpb24odCxlLG4pe3RoaXMudmFyaWFibGVOYW1lcz1bXCJ4XCJdLHRoaXMub3V0cHV0U2hhcGU9bjt2YXIgcj1uLmxlbmd0aCxvPXdhKG4ubGVuZ3RoKSxhPXdhKG4ubGVuZ3RoKSxpPVwiXCI7aWYoMT09PXIpaT1cImNvb3JkcyAqIHN0cmlkZXMgKyBiZWdpblwiO2Vsc2V7dmFyIHM9MDtpPW4ubWFwKChmdW5jdGlvbih0LGUpe3JldHVybiBzKyssMT09PW4ubGVuZ3RoP1wiY29vcmRzICogc3RyaWRlc1tcIitlK1wiXSArIGJlZ2luW1wiK2UrXCJdXCI6XCJjb29yZHNbXCIrKHMtMSkrXCJdICogc3RyaWRlc1tcIitlK1wiXSArIGJlZ2luW1wiK2UrXCJdXCJ9KSkuam9pbihcIixcIil9dGhpcy51c2VyQ29kZT1cIlxcbiAgICAgIFwiK28rXCIgYmVnaW4gPSBcIitvK1wiKFwiK3QrXCIpO1xcbiAgICAgIFwiK28rXCIgc3RyaWRlcyA9IFwiK28rXCIoXCIrZStcIik7XFxuXFxuICAgICAgdm9pZCBtYWluKCkge1xcbiAgICAgICAgXCIrYStcIiBjb29yZHMgPSBnZXRPdXRwdXRDb29yZHMoKTtcXG4gICAgICAgIHNldE91dHB1dChnZXRYKFwiK2krXCIpKTtcXG4gICAgICB9XFxuICAgIFwifSxwcz1mdW5jdGlvbigpe2Z1bmN0aW9uIHQodCl7dGhpcy5ncGdwdT10LHRoaXMubnVtVXNlZFRleHR1cmVzPTAsdGhpcy5udW1GcmVlVGV4dHVyZXM9MCx0aGlzLmZyZWVUZXh0dXJlcz17fSx0aGlzLmxvZ0VuYWJsZWQ9ITEsdGhpcy51c2VkVGV4dHVyZXM9e319cmV0dXJuIHQucHJvdG90eXBlLmFjcXVpcmVUZXh0dXJlPWZ1bmN0aW9uKHQsZSxuKXt2YXIgcixvPXZzKGUsbiksYT1tcyh0LG8sbik7aWYoYSBpbiB0aGlzLmZyZWVUZXh0dXJlc3x8KHRoaXMuZnJlZVRleHR1cmVzW2FdPVtdKSxhIGluIHRoaXMudXNlZFRleHR1cmVzfHwodGhpcy51c2VkVGV4dHVyZXNbYV09W10pLHRoaXMuZnJlZVRleHR1cmVzW2FdLmxlbmd0aD4wKXt0aGlzLm51bUZyZWVUZXh0dXJlcy0tLHRoaXMubnVtVXNlZFRleHR1cmVzKyssdGhpcy5sb2coKTt2YXIgaT10aGlzLmZyZWVUZXh0dXJlc1thXS5zaGlmdCgpO3JldHVybiB0aGlzLnVzZWRUZXh0dXJlc1thXS5wdXNoKGkpLGl9cmV0dXJuIHRoaXMubnVtVXNlZFRleHR1cmVzKyssdGhpcy5sb2coKSxvPT09R3QuUEFDS0VEXzJYMl9GTE9BVDMyP3I9dGhpcy5ncGdwdS5jcmVhdGVQYWNrZWRNYXRyaXhUZXh0dXJlKHRbMF0sdFsxXSk6bz09PUd0LlBBQ0tFRF8yWDJfRkxPQVQxNj9yPXRoaXMuZ3BncHUuY3JlYXRlRmxvYXQxNlBhY2tlZE1hdHJpeFRleHR1cmUodFswXSx0WzFdKTpvPT09R3QuVU5QQUNLRURfRkxPQVQzMj9yPXRoaXMuZ3BncHUuY3JlYXRlRmxvYXQzMk1hdHJpeFRleHR1cmUodFswXSx0WzFdKTpvPT09R3QuVU5QQUNLRURfRkxPQVQxNj9yPXRoaXMuZ3BncHUuY3JlYXRlRmxvYXQxNk1hdHJpeFRleHR1cmUodFswXSx0WzFdKTpvPT09R3QuUEFDS0VEXzRYMV9VTlNJR05FRF9CWVRFJiYocj10aGlzLmdwZ3B1LmNyZWF0ZVVuc2lnbmVkQnl0ZXNNYXRyaXhUZXh0dXJlKHRbMF0sdFsxXSkpLHRoaXMudXNlZFRleHR1cmVzW2FdLnB1c2gocikscn0sdC5wcm90b3R5cGUucmVsZWFzZVRleHR1cmU9ZnVuY3Rpb24odCxlLG4scil7aWYobnVsbCE9dGhpcy5mcmVlVGV4dHVyZXMpe3ZhciBvPW1zKGUsdnMobixyKSxyKTtvIGluIHRoaXMuZnJlZVRleHR1cmVzfHwodGhpcy5mcmVlVGV4dHVyZXNbb109W10pLHRoaXMuZnJlZVRleHR1cmVzW29dLnB1c2godCksdGhpcy5udW1GcmVlVGV4dHVyZXMrKyx0aGlzLm51bVVzZWRUZXh0dXJlcy0tO3ZhciBhPXRoaXMudXNlZFRleHR1cmVzW29dLGk9YS5pbmRleE9mKHQpO2lmKGk8MCl0aHJvdyBuZXcgRXJyb3IoXCJDYW5ub3QgcmVsZWFzZSBhIHRleHR1cmUgdGhhdCB3YXMgbmV2ZXIgcHJvdmlkZWQgYnkgdGhpcyB0ZXh0dXJlIG1hbmFnZXJcIik7YS5zcGxpY2UoaSwxKSx0aGlzLmxvZygpfX0sdC5wcm90b3R5cGUubG9nPWZ1bmN0aW9uKCl7aWYodGhpcy5sb2dFbmFibGVkKXt2YXIgdD10aGlzLm51bUZyZWVUZXh0dXJlcyt0aGlzLm51bVVzZWRUZXh0dXJlcztjb25zb2xlLmxvZyhcIkZyZWUvVXNlZFwiLHRoaXMubnVtRnJlZVRleHR1cmVzK1wiIC8gXCIrdGhpcy5udW1Vc2VkVGV4dHVyZXMsXCIoXCIrdCtcIilcIil9fSx0LnByb3RvdHlwZS5nZXROdW1Vc2VkVGV4dHVyZXM9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5udW1Vc2VkVGV4dHVyZXN9LHQucHJvdG90eXBlLmdldE51bUZyZWVUZXh0dXJlcz1mdW5jdGlvbigpe3JldHVybiB0aGlzLm51bUZyZWVUZXh0dXJlc30sdC5wcm90b3R5cGUuZGlzcG9zZT1mdW5jdGlvbigpe3ZhciB0PXRoaXM7aWYobnVsbCE9dGhpcy5mcmVlVGV4dHVyZXMpe2Zvcih2YXIgZSBpbiB0aGlzLmZyZWVUZXh0dXJlcyl0aGlzLmZyZWVUZXh0dXJlc1tlXS5mb3JFYWNoKChmdW5jdGlvbihlKXt0LmdwZ3B1LmRlbGV0ZU1hdHJpeFRleHR1cmUoZSl9KSk7Zm9yKHZhciBlIGluIHRoaXMudXNlZFRleHR1cmVzKXRoaXMudXNlZFRleHR1cmVzW2VdLmZvckVhY2goKGZ1bmN0aW9uKGUpe3QuZ3BncHUuZGVsZXRlTWF0cml4VGV4dHVyZShlKX0pKTt0aGlzLmZyZWVUZXh0dXJlcz1udWxsLHRoaXMudXNlZFRleHR1cmVzPW51bGwsdGhpcy5udW1Vc2VkVGV4dHVyZXM9MCx0aGlzLm51bUZyZWVUZXh0dXJlcz0wfX0sdH0oKTtmdW5jdGlvbiB2cyh0LGUpe2lmKHQ9PT16dC5VUExPQUQpcmV0dXJuIEd0LlBBQ0tFRF8yWDJfRkxPQVQzMjtpZih0PT09enQuUkVOREVSfHxudWxsPT10KXJldHVybiBmdW5jdGlvbih0KXtyZXR1cm4gaSgpLmdldEJvb2woXCJXRUJHTF9SRU5ERVJfRkxPQVQzMl9FTkFCTEVEXCIpP3Q/R3QuUEFDS0VEXzJYMl9GTE9BVDMyOkd0LlVOUEFDS0VEX0ZMT0FUMzI6dD9HdC5QQUNLRURfMlgyX0ZMT0FUMTY6R3QuVU5QQUNLRURfRkxPQVQxNn0oZSk7aWYodD09PXp0LkRPV05MT0FEfHx0PT09enQuUElYRUxTKXJldHVybiBHdC5QQUNLRURfNFgxX1VOU0lHTkVEX0JZVEU7dGhyb3cgbmV3IEVycm9yKFwiVW5rbm93biBsb2dpY2FsIHRleHR1cmUgdHlwZSBcIit0KX1mdW5jdGlvbiBtcyh0LGUsbil7cmV0dXJuIHRbMF0rXCJfXCIrdFsxXStcIl9cIitlK1wiX1wiK259dmFyIGdzPWZ1bmN0aW9uKHQsZSl7dGhpcy52YXJpYWJsZU5hbWVzPVtcIkFcIl07Zm9yKHZhciBuPW5ldyBBcnJheSh0Lmxlbmd0aCkscj0wO3I8bi5sZW5ndGg7cisrKW5bcl09dFtyXSplW3JdO3RoaXMub3V0cHV0U2hhcGU9bix0aGlzLnJhbms9bi5sZW5ndGg7dmFyIG89d2EodGhpcy5yYW5rKSxhPWZ1bmN0aW9uKHQpe3ZhciBlPXQubGVuZ3RoO2lmKGU+NSl0aHJvdyBFcnJvcihcIlRpbGUgZm9yIHJhbmsgXCIrZStcIiBpcyBub3QgeWV0IHN1cHBvcnRlZFwiKTtpZigxPT09ZSlyZXR1cm5cImltb2QocmVzUkMsIFwiK3RbMF0rXCIpXCI7Zm9yKHZhciBuPVtcInJlc1JDLnhcIixcInJlc1JDLnlcIixcInJlc1JDLnpcIixcInJlc1JDLndcIixcInJlc1JDLnVcIl0scj1bXSxvPTA7bzx0Lmxlbmd0aDtvKyspci5wdXNoKFwiaW1vZChcIituW29dK1wiLCBcIit0W29dK1wiKVwiKTtyZXR1cm4gci5qb2luKCl9KHQpO3RoaXMudXNlckNvZGU9XCJcXG4gICAgICB2b2lkIG1haW4oKSB7XFxuICAgICAgICBcIitvK1wiIHJlc1JDID0gZ2V0T3V0cHV0Q29vcmRzKCk7XFxuICAgICAgICBzZXRPdXRwdXQoZ2V0QShcIithK1wiKSk7XFxuICAgICAgfVxcbiAgICBcIn07dmFyIHlzPWZ1bmN0aW9uKHQsZSl7dGhpcy52YXJpYWJsZU5hbWVzPVtcIkFcIl07Zm9yKHZhciBuPW5ldyBBcnJheSh0Lmxlbmd0aCkscj0wO3I8bi5sZW5ndGg7cisrKW5bcl09dFtlW3JdXTt0aGlzLm91dHB1dFNoYXBlPW4sdGhpcy5yYW5rPW4ubGVuZ3RoO3ZhciBvPXdhKHRoaXMucmFuayksYT1mdW5jdGlvbih0KXt2YXIgZT10Lmxlbmd0aDtpZihlPjYpdGhyb3cgRXJyb3IoXCJUcmFuc3Bvc2UgZm9yIHJhbmsgXCIrZStcIiBpcyBub3QgeWV0IHN1cHBvcnRlZFwiKTtmb3IodmFyIG49W1wicmVzUkMueFwiLFwicmVzUkMueVwiLFwicmVzUkMuelwiLFwicmVzUkMud1wiLFwicmVzUkMudVwiLFwicmVzUkMudlwiXSxyPW5ldyBBcnJheShlKSxvPTA7bzx0Lmxlbmd0aDtvKyspclt0W29dXT1uW29dO3JldHVybiByLmpvaW4oKX0oZSk7dGhpcy51c2VyQ29kZT1cIlxcbiAgICB2b2lkIG1haW4oKSB7XFxuICAgICAgXCIrbytcIiByZXNSQyA9IGdldE91dHB1dENvb3JkcygpO1xcbiAgICAgIHNldE91dHB1dChnZXRBKFwiK2ErXCIpKTtcXG4gICAgfVxcbiAgICBcIn07dmFyIHhzPWZ1bmN0aW9uKHQsZSl7dGhpcy52YXJpYWJsZU5hbWVzPVtcIkFcIl0sdGhpcy5wYWNrZWRJbnB1dHM9ITAsdGhpcy5wYWNrZWRPdXRwdXQ9ITA7Zm9yKHZhciBuPW5ldyBBcnJheSh0Lmxlbmd0aCkscj0wO3I8bi5sZW5ndGg7cisrKW5bcl09dFtlW3JdXTtpZih0aGlzLm91dHB1dFNoYXBlPW4sdGhpcy5yYW5rPW4ubGVuZ3RoLHRoaXMucmFuaz42KXRocm93IEVycm9yKFwiUGFja2VkIHRyYW5zcG9zZSBmb3IgcmFuayBcIit0aGlzLnJhbmsrXCIgaXMgbm90IHlldCBzdXBwb3J0ZWQuXCIpO3ZhciBvPXdhKHRoaXMucmFuayksYT1pYShcInJjXCIsdGhpcy5yYW5rKSxpPW5ldyBBcnJheSh0aGlzLnJhbmspO2ZvcihyPTA7cjxlLmxlbmd0aDtyKyspaVtlW3JdXT1hW3JdO3ZhciBzPVwidmVjMihcIitpLnNsaWNlKC0yKS5qb2luKCkrXCIpXCIsdT1cIisrXCIrYVt0aGlzLnJhbmstMV0rXCIgPCBcIituW3RoaXMucmFuay0xXSxjPVwiZ2V0Q2hhbm5lbChnZXRBKFwiK2kuam9pbigpK1wiKSwgXCIrcytcIilcIjt0aGlzLnVzZXJDb2RlPVwiXFxuICAgIHZvaWQgbWFpbigpIHtcXG4gICAgICBcIitvK1wiIHJjID0gZ2V0T3V0cHV0Q29vcmRzKCk7XFxuICAgICAgdmVjNCByZXN1bHQgPSB2ZWM0KDAuKTtcXG4gICAgICByZXN1bHRbMF0gPSBcIitjK1wiO1xcbiAgICAgIGlmKFwiK3UrXCIpIHtcXG4gICAgICAgIHJlc3VsdFsxXSA9IFwiK2MrXCI7XFxuICAgICAgfVxcbiAgICAgIC0tXCIrYVt0aGlzLnJhbmstMV0rXCI7XFxuICAgICAgaWYoKytcIithW3RoaXMucmFuay0yXStcIiA8IFwiK25bdGhpcy5yYW5rLTJdK1wiKSB7XFxuICAgICAgICByZXN1bHRbMl0gPSBcIitjK1wiO1xcbiAgICAgICAgaWYoXCIrdStcIikge1xcbiAgICAgICAgICByZXN1bHRbM10gPSBcIitjK1wiO1xcbiAgICAgICAgfVxcbiAgICAgIH1cXG4gICAgICBzZXRPdXRwdXQocmVzdWx0KTtcXG4gICAgfVxcbiAgICBcIn0sYnM9MS43NTgwOTkzNDA4NDczNzY4LHdzPTEuMDUwNzAwOTg3MzU1NDgwNSxDcz1mdW5jdGlvbih0LGUpe3RoaXMudmFyaWFibGVOYW1lcz1bXCJBXCJdLHRoaXMub3V0cHV0U2hhcGU9dCx0aGlzLnVzZXJDb2RlPVwiXFxuICAgICAgZmxvYXQgdW5hcnlPcGVyYXRpb24oZmxvYXQgeCkge1xcbiAgICAgICAgXCIrZStcIlxcbiAgICAgIH1cXG5cXG4gICAgICB2b2lkIG1haW4oKSB7XFxuICAgICAgICBmbG9hdCB4ID0gZ2V0QUF0T3V0Q29vcmRzKCk7XFxuICAgICAgICBmbG9hdCB5ID0gdW5hcnlPcGVyYXRpb24oeCk7XFxuXFxuICAgICAgICBzZXRPdXRwdXQoeSk7XFxuICAgICAgfVxcbiAgICBcIn0sRXM9XCJpZiAoaXNuYW4oeCkpIHJldHVybiB4O1wiLFJzPVwicmV0dXJuIHg7XCIsSXM9XCJyZXR1cm4gYWJzKHgpO1wiLGtzPUVzK1wiXFxuICByZXR1cm4gKHggPCAwLjApID8gMC4wIDogeDtcXG5cIixTcz1FcytcIlxcbiAgcmV0dXJuICh4IDwgMC4wKSA/IDAuMCA6IG1pbig2LjAsIHgpO1xcblwiLEFzPVwicmV0dXJuICh4ID49IDAuMCkgPyB4IDogKGV4cCh4KSAtIDEuMCk7XCIsRHM9XCJcXG4gIC8vIFN0YWJsZSBhbmQgQXR0cmFjdGluZyBGaXhlZCBQb2ludCAoMCwgMSkgZm9yIE5vcm1hbGl6ZWQgV2VpZ2h0cy5cXG4gIC8vIHNlZTogaHR0cHM6Ly9hcnhpdi5vcmcvYWJzLzE3MDYuMDI1MTVcXG4gIGZsb2F0IHNjYWxlQWxwaGEgPSBcIiticytcIjtcXG4gIGZsb2F0IHNjYWxlID0gXCIrd3MrXCI7XFxuICByZXR1cm4gKHggPj0gMC4wKSA/IHNjYWxlICogeCA6IHNjYWxlQWxwaGEgKiAoZXhwKHgpIC0gMS4wKTtcXG5cIjt2YXIgVHM9XCJyZXR1cm4gLXg7XCIsTnM9XCJyZXR1cm4gY2VpbCh4KTtcIixGcz1cInJldHVybiBmbG9vcih4KTtcIixfcz1cInJldHVybiBleHAoeCk7XCIsT3M9XCJyZXR1cm4gZXhwKHgpIC0gMS4wO1wiLE1zPUVzK1wiXFxuICByZXR1cm4gc2luKHgpO1xcblwiLEJzPUVzK1wiXFxuICByZXR1cm4gY29zKHgpO1xcblwiLFBzPUVzK1wiXFxuICBpZiAoYWJzKHgpID4gMS4pIHtcXG4gICAgcmV0dXJuIE5BTjtcXG4gIH1cXG4gIHJldHVybiBhc2luKHgpO1xcblwiLExzPUVzK1wiXFxuICBpZiAoYWJzKHgpID4gMS4pIHtcXG4gICAgcmV0dXJuIE5BTjtcXG4gIH1cXG4gIHJldHVybiBhY29zKHgpO1xcblwiLFdzPUVzK1wiXFxuICByZXR1cm4gYXRhbih4KTtcXG5cIixVcz1FcytcInJldHVybiBsb2coeCArIHNxcnQoeCAqIHggKyAxLjApKTtcIixWcz1FcytcIlxcbiAgaWYgKHggPCAxLjApIHJldHVybiBOQU47XFxuICByZXR1cm4gbG9nKHggKyBzcXJ0KHggKiB4IC0gMS4wKSk7XCIsenM9RXMrXCJcXG4gIGlmICgoeCA8IC0xLjApIHx8ICh4ID4gMS4wKSkgcmV0dXJuIE5BTjtcXG4gIHJldHVybiAobG9nKDEuMCArIHgpIC0gbG9nKDEuMCAtIHgpKSAvIDIuMDtcIixHcz1cInJldHVybiB4O1wiLEhzPVwicmV0dXJuIHg7XCIscXM9XCJcXG4gIHZlYzQgcmVzdWx0ID0geCAqIHZlYzQoZ3JlYXRlclRoYW5FcXVhbCh4LCB2ZWM0KDAuMCkpKTtcXG4gIGJ2ZWM0IGlzTmFOID0gaXNuYW4oeCk7XFxuXFxuICByZXN1bHQuciA9IGlzTmFOLnIgPyB4LnIgOiByZXN1bHQucjtcXG4gIHJlc3VsdC5nID0gaXNOYU4uZyA/IHguZyA6IHJlc3VsdC5nO1xcbiAgcmVzdWx0LmIgPSBpc05hTi5iID8geC5iIDogcmVzdWx0LmI7XFxuICByZXN1bHQuYSA9IGlzTmFOLmEgPyB4LmEgOiByZXN1bHQuYTtcXG5cXG4gIHJldHVybiByZXN1bHQ7XFxuXCIsS3M9XCJcXG4gIHZlYzQgcmVzdWx0ID0gbWluKHgsIHZlYzQoNi4pKSAqIHZlYzQoZ3JlYXRlclRoYW5FcXVhbCh4LCB2ZWM0KDAuMCkpKTtcXG4gIGJ2ZWM0IGlzTmFOID0gaXNuYW4oeCk7XFxuXFxuICByZXN1bHQuciA9IGlzTmFOLnIgPyB4LnIgOiByZXN1bHQucjtcXG4gIHJlc3VsdC5nID0gaXNOYU4uZyA/IHguZyA6IHJlc3VsdC5nO1xcbiAgcmVzdWx0LmIgPSBpc05hTi5iID8geC5iIDogcmVzdWx0LmI7XFxuICByZXN1bHQuYSA9IGlzTmFOLmEgPyB4LmEgOiByZXN1bHQuYTtcXG5cXG4gIHJldHVybiByZXN1bHQ7XFxuXCIsanM9XCJcXG4gIHZlYzQgcmVzdWx0O1xcblxcbiAgcmVzdWx0LnIgPSAoeC5yID49IDAuMCkgPyB4LnIgOiAoZXhwKHgucikgLSAxLjApO1xcbiAgcmVzdWx0LmcgPSAoeC5nID49IDAuMCkgPyB4LmcgOiAoZXhwKHguZykgLSAxLjApO1xcbiAgcmVzdWx0LmIgPSAoeC5iID49IDAuMCkgPyB4LmIgOiAoZXhwKHguYikgLSAxLjApO1xcbiAgcmVzdWx0LmEgPSAoeC5hID49IDAuMCkgPyB4LmEgOiAoZXhwKHguYSkgLSAxLjApO1xcblxcbiAgcmV0dXJuIHJlc3VsdDtcXG5cIixYcz1mdW5jdGlvbih0LGUpe3RoaXMudmFyaWFibGVOYW1lcz1bXCJBXCJdLHRoaXMucGFja2VkSW5wdXRzPSEwLHRoaXMucGFja2VkT3V0cHV0PSEwLHRoaXMub3V0cHV0U2hhcGU9dCx0aGlzLnVzZXJDb2RlPVwiXFxuICAgICAgdmVjNCB1bmFyeU9wZXJhdGlvbih2ZWM0IHgpIHtcXG4gICAgICAgIFwiK2UrXCJcXG4gICAgICB9XFxuXFxuICAgICAgdm9pZCBtYWluKCkge1xcbiAgICAgICAgdmVjNCB4ID0gZ2V0QUF0T3V0Q29vcmRzKCk7XFxuICAgICAgICB2ZWM0IHkgPSB1bmFyeU9wZXJhdGlvbih4KTtcXG5cXG4gICAgICAgIHNldE91dHB1dCh5KTtcXG4gICAgICB9XFxuICAgIFwifSxZcz1mdW5jdGlvbih0KXt0aGlzLnZhcmlhYmxlTmFtZXM9W1wiQVwiXSx0aGlzLnBhY2tlZElucHV0cz0hMCx0aGlzLnBhY2tlZE91dHB1dD0hMSx0aGlzLm91dHB1dFNoYXBlPXQ7dmFyIGU9dC5sZW5ndGgsbj1zYShcInJjXCIsZSkscj13YShlKSxvPWZ1bmN0aW9uKHQsZSl7aWYoMT09PXQpcmV0dXJuXCJyY1wiO2Zvcih2YXIgbj1cIlwiLHI9MDtyPHQ7cisrKW4rPWVbcl0scjx0LTEmJihuKz1cIixcIik7cmV0dXJuIG59KGUsbiksYT1uLnNsaWNlKC0yKSxpPWU8PTE/XCJyY1wiOlwidmVjMihcIithLmpvaW4oXCIsXCIpK1wiKVwiO3RoaXMudXNlckNvZGU9XCJcXG4gICAgICB2b2lkIG1haW4oKSB7XFxuICAgICAgICBcIityK1wiIHJjID0gZ2V0T3V0cHV0Q29vcmRzKCk7XFxuICAgICAgICB2ZWM0IHBhY2tlZElucHV0ID0gZ2V0QShcIitvK1wiKTtcXG5cXG4gICAgICAgIHNldE91dHB1dChnZXRDaGFubmVsKHBhY2tlZElucHV0LCBcIitpK1wiKSk7XFxuICAgICAgfVxcbiAgICBcIn0sJHM9e307ZnVuY3Rpb24gUXModCxlKXtpZih2b2lkIDA9PT1lJiYoZT0hMSksXCJsaW5lYXJcIj09PXQpcmV0dXJuIGU/SHM6UnM7aWYoXCJyZWx1XCI9PT10KXJldHVybiBlP3FzOmtzO2lmKFwiZWx1XCI9PT10KXJldHVybiBlP2pzOkFzO2lmKFwicmVsdTZcIj09PXQpcmV0dXJuIGU/S3M6U3M7aWYoXCJwcmVsdVwiPT09dClyZXR1cm4gZT9QYTpNYTt0aHJvdyBuZXcgRXJyb3IoXCJBY3RpdmF0aW9uIFwiK3QrXCIgaGFzIG5vdCBiZWVuIGltcGxlbWVudGVkIGZvciB0aGUgV2ViR0wgYmFja2VuZC5cIil9dmFyIEpzPTYwMDt2YXIgWnM9ZnVuY3Rpb24odCl7ZnVuY3Rpb24gbyhlKXt2YXIgbixyPXQuY2FsbCh0aGlzKXx8dGhpcztpZihyLnBlbmRpbmdSZWFkPW5ldyBXZWFrTWFwLHIucGVuZGluZ0Rpc3Bvc2FsPW5ldyBXZWFrU2V0LHIuZGF0YVJlZkNvdW50PW5ldyBXZWFrTWFwLHIubnVtQnl0ZXNJbkdQVT0wLHIudXBsb2FkV2FpdE1zPTAsci5kb3dubG9hZFdhaXRNcz0wLHIud2FybmVkQWJvdXRNZW1vcnk9ITEsci5wZW5kaW5nRGVsZXRlcz0wLHIuZGlzcG9zZWQ9ITEsIWkoKS5nZXRCb29sKFwiSEFTX1dFQkdMXCIpKXRocm93IG5ldyBFcnJvcihcIldlYkdMIGlzIG5vdCBzdXBwb3J0ZWQgb24gdGhpcyBkZXZpY2VcIik7aWYobnVsbD09ZSl7dmFyIG89anQoaSgpLmdldE51bWJlcihcIldFQkdMX1ZFUlNJT05cIikpO3IuYmluYXJ5Q2FjaGU9KG49aSgpLmdldE51bWJlcihcIldFQkdMX1ZFUlNJT05cIikpaW4gJHM/JHNbbl06KCRzW25dPXt9LCRzW25dKSxyLmdwZ3B1PW5ldyBCaShvKSxyLmNhbnZhcz1vLmNhbnZhcyxyLmdwZ3B1Q3JlYXRlZExvY2FsbHk9ITB9ZWxzZSByLmdwZ3B1PWUsci5iaW5hcnlDYWNoZT17fSxyLmdwZ3B1Q3JlYXRlZExvY2FsbHk9ITEsci5jYW52YXM9ZS5nbC5jYW52YXM7cmV0dXJuIHIudGV4dHVyZU1hbmFnZXI9bmV3IHBzKHIuZ3BncHUpLHIubnVtTUJCZWZvcmVXYXJuaW5nPW51bGw9PWkoKS5nbG9iYWwuc2NyZWVuPzEwMjQ6aSgpLmdsb2JhbC5zY3JlZW4uaGVpZ2h0KmkoKS5nbG9iYWwuc2NyZWVuLndpZHRoKndpbmRvdy5kZXZpY2VQaXhlbFJhdGlvKkpzLzEwMjQvMTAyNCxyLnRleERhdGE9bmV3IHhvKHIsTHQpLHJ9cmV0dXJuIGUobyx0KSxvLnByb3RvdHlwZS5udW1EYXRhSWRzPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMudGV4RGF0YS5udW1EYXRhSWRzKCkrKHRoaXMuY3B1QmFja2VuZD90aGlzLmNwdUJhY2tlbmQubnVtRGF0YUlkcygpOjApLXRoaXMucGVuZGluZ0RlbGV0ZXN9LG8ucHJvdG90eXBlLndyaXRlPWZ1bmN0aW9uKHQsZSxuKXtpZihpKCkuZ2V0Qm9vbChcIkRFQlVHXCIpJiZ0aGlzLmNoZWNrTnVtZXJpY2FsUHJvYmxlbXModCksXCJjb21wbGV4NjRcIj09PW4mJm51bGwhPXQpdGhyb3cgbmV3IEVycm9yKFwiQ2Fubm90IHdyaXRlIHRvIGEgY29tcGxleDY0IGR0eXBlLiBQbGVhc2UgdXNlIHRmLmNvbXBsZXgocmVhbCwgaW1hZykuXCIpO3ZhciByPXt9O3JldHVybiB0aGlzLnRleERhdGEuc2V0KHIse3NoYXBlOmUsZHR5cGU6bix2YWx1ZXM6dCx1c2FnZTp6dC5VUExPQUR9KSxyfSxvLnByb3RvdHlwZS5tb3ZlPWZ1bmN0aW9uKHQsZSxuLHIpe2lmKGkoKS5nZXRCb29sKFwiREVCVUdcIikmJnRoaXMuY2hlY2tOdW1lcmljYWxQcm9ibGVtcyhlKSxcImNvbXBsZXg2NFwiPT09cil0aHJvdyBuZXcgRXJyb3IoXCJDYW5ub3Qgd3JpdGUgdG8gYSBjb21wbGV4NjQgZHR5cGUuIFBsZWFzZSB1c2UgdGYuY29tcGxleChyZWFsLCBpbWFnKS5cIik7dGhpcy50ZXhEYXRhLnNldCh0LHtzaGFwZTpuLGR0eXBlOnIsdmFsdWVzOmUsdXNhZ2U6enQuVVBMT0FEfSl9LG8ucHJvdG90eXBlLnJlYWRTeW5jPWZ1bmN0aW9uKHQpe3ZhciBlPXRoaXMudGV4RGF0YS5nZXQodCksbj1lLnZhbHVlcyxyPWUuZHR5cGUsbz1lLmNvbXBsZXhUZW5zb3JzLGE9ZS5zbGljZSxpPWUuc2hhcGUscz1lLmlzUGFja2VkO2lmKG51bGwhPWEpe3ZhciB1PXZvaWQgMDt1PXM/bmV3IFhzKGksR3MpOm5ldyBDcyhpLEdzKTt2YXIgYz10aGlzLnJ1bldlYkdMUHJvZ3JhbSh1LFt7ZGF0YUlkOnQsc2hhcGU6aSxkdHlwZTpyfV0sciksbD10aGlzLnJlYWRTeW5jKGMuZGF0YUlkKTtyZXR1cm4gdGhpcy5kaXNwb3NlRGF0YShjLmRhdGFJZCksbH1pZihudWxsIT1uKXJldHVybiB0aGlzLmNvbnZlcnRBbmRDYWNoZU9uQ1BVKHQpO2lmKFwic3RyaW5nXCI9PT1yKXJldHVybiBuO3ZhciBoLGYsZD1udWxsIT10aGlzLmFjdGl2ZVRpbWVyczsoZCYmKGg9ZXQoKSksXCJjb21wbGV4NjRcIj09PXIpP2Y9Vm8oby5yZWFsLmRhdGFTeW5jKCksby5pbWFnLmRhdGFTeW5jKCkpOmY9dGhpcy5nZXRWYWx1ZXNGcm9tVGV4dHVyZSh0KTtyZXR1cm4gZCYmKHRoaXMuZG93bmxvYWRXYWl0TXMrPWV0KCktaCksdGhpcy5jb252ZXJ0QW5kQ2FjaGVPbkNQVSh0LGYpfSxvLnByb3RvdHlwZS5yZWFkPWZ1bmN0aW9uKHQpe3JldHVybiBuKHRoaXMsdm9pZCAwLHZvaWQgMCwoZnVuY3Rpb24oKXt2YXIgZSxuLG8sYSxzLHUsYyxsLGgsZixkLHAsdixtLGcseSx4LGIsdyxDLEUsUjtyZXR1cm4gcih0aGlzLChmdW5jdGlvbihyKXtzd2l0Y2goci5sYWJlbCl7Y2FzZSAwOmlmKHRoaXMucGVuZGluZ1JlYWQuaGFzKHQpKXJldHVybiBlPXRoaXMucGVuZGluZ1JlYWQuZ2V0KHQpLFsyLG5ldyBQcm9taXNlKChmdW5jdGlvbih0KXtyZXR1cm4gZS5wdXNoKHQpfSkpXTtpZihuPXRoaXMudGV4RGF0YS5nZXQodCksbz1uLnZhbHVlcyxhPW4uc2hhcGUscz1uLnNsaWNlLHU9bi5kdHlwZSxjPW4uY29tcGxleFRlbnNvcnMsbD1uLmlzUGFja2VkLG51bGwhPXMpcmV0dXJuIGg9dm9pZCAwLGg9bD9uZXcgWHMoYSxHcyk6bmV3IENzKGEsR3MpLGY9dGhpcy5ydW5XZWJHTFByb2dyYW0oaCxbe2RhdGFJZDp0LHNoYXBlOmEsZHR5cGU6dX1dLHUpLGQ9dGhpcy5yZWFkKGYuZGF0YUlkKSx0aGlzLmRpc3Bvc2VEYXRhKGYuZGF0YUlkKSxbMixkXTtpZihudWxsIT1vKXJldHVyblsyLHRoaXMuY29udmVydEFuZENhY2hlT25DUFUodCldO2lmKCFpKCkuZ2V0Qm9vbChcIldFQkdMX0RPV05MT0FEX0ZMT0FUX0VOQUJMRURcIikmJjI9PT1pKCkuZ2V0TnVtYmVyKFwiV0VCR0xfVkVSU0lPTlwiKSl0aHJvdyBuZXcgRXJyb3IoXCJ0ZW5zb3IuZGF0YSgpIHdpdGggV0VCR0xfRE9XTkxPQURfRkxPQVRfRU5BQkxFRD1mYWxzZSBhbmQgV0VCR0xfVkVSU0lPTj0yIG5vdCB5ZXQgc3VwcG9ydGVkLlwiKTtyZXR1cm4gcD1udWxsLFwiY29tcGxleDY0XCIhPT11JiZpKCkuZ2V0KFwiV0VCR0xfQlVGRkVSX1NVUFBPUlRFRFwiKSYmKHY9dGhpcy5kZWNvZGUodCksbT10aGlzLnRleERhdGEuZ2V0KHYuZGF0YUlkKSxwPShSPXRoaXMuZ3BncHUpLmNyZWF0ZUJ1ZmZlckZyb21UZXh0dXJlLmFwcGx5KFIsW20udGV4dHVyZV0uY29uY2F0KFl0KGEpKSkpLHRoaXMucGVuZGluZ1JlYWQuc2V0KHQsW10pLFwiY29tcGxleDY0XCI9PT11P1szLDJdOls0LHRoaXMuZ3BncHUuY3JlYXRlQW5kV2FpdEZvckZlbmNlKCldO2Nhc2UgMTpyLnNlbnQoKSxyLmxhYmVsPTI7Y2FzZSAyOnJldHVyblwiY29tcGxleDY0XCIhPT11P1szLDRdOls0LFByb21pc2UuYWxsKFtjLnJlYWwuZGF0YSgpLGMuaW1hZy5kYXRhKCldKV07Y2FzZSAzOnJldHVybiB5PXIuc2VudCgpLHg9eVswXSxiPXlbMV0sZz1Wbyh4LGIpLFszLDVdO2Nhc2UgNDpudWxsPT1wP2c9dGhpcy5nZXRWYWx1ZXNGcm9tVGV4dHVyZSh0KToodz1rKGEpLGc9dGhpcy5ncGdwdS5kb3dubG9hZEZsb2F0MzJNYXRyaXhGcm9tQnVmZmVyKHAsdykpLHIubGFiZWw9NTtjYXNlIDU6cmV0dXJuIG51bGwhPXYmJnRoaXMuZGlzcG9zZURhdGEodi5kYXRhSWQpLEM9dGhpcy5jb252ZXJ0QW5kQ2FjaGVPbkNQVSh0LGcpLEU9dGhpcy5wZW5kaW5nUmVhZC5nZXQodCksdGhpcy5wZW5kaW5nUmVhZC5kZWxldGUodCksRS5mb3JFYWNoKChmdW5jdGlvbih0KXtyZXR1cm4gdChDKX0pKSx0aGlzLnBlbmRpbmdEaXNwb3NhbC5oYXModCkmJih0aGlzLnBlbmRpbmdEaXNwb3NhbC5kZWxldGUodCksdGhpcy5kaXNwb3NlRGF0YSh0KSx0aGlzLnBlbmRpbmdEZWxldGVzLS0pLFsyLENdfX0pKX0pKX0sby5wcm90b3R5cGUuY2hlY2tOdW1lcmljYWxQcm9ibGVtcz1mdW5jdGlvbih0KXtpZihudWxsIT10KWZvcih2YXIgZT0wO2U8dC5sZW5ndGg7ZSsrKXt2YXIgbj10W2VdO2lmKCFlZShuKSl7aWYoaSgpLmdldEJvb2woXCJXRUJHTF9SRU5ERVJfRkxPQVQzMl9DQVBBQkxFXCIpKXRocm93IEVycm9yKFwiVGhlIHZhbHVlIFwiK24rXCIgY2Fubm90IGJlIHJlcHJlc2VudGVkIHdpdGggeW91ciBjdXJyZW50IHNldHRpbmdzLiBDb25zaWRlciBlbmFibGluZyBmbG9hdDMyIHJlbmRlcmluZzogJ3RmLmVudigpLnNldCgnV0VCR0xfUkVOREVSX0ZMT0FUMzJfRU5BQkxFRCcsIHRydWUpOydcIik7dGhyb3cgRXJyb3IoXCJUaGUgdmFsdWUgXCIrbitcIiBjYW5ub3QgYmUgcmVwcmVzZW50ZWQgb24gdGhpcyBkZXZpY2UuXCIpfX19LG8ucHJvdG90eXBlLmdldFZhbHVlc0Zyb21UZXh0dXJlPWZ1bmN0aW9uKHQpe3ZhciBlLG49dGhpcy50ZXhEYXRhLmdldCh0KSxyPW4uc2hhcGUsbz1uLmR0eXBlLGE9bi5pc1BhY2tlZCxzPWsocik7aWYoaSgpLmdldEJvb2woXCJXRUJHTF9ET1dOTE9BRF9GTE9BVF9FTkFCTEVEXCIpKXt2YXIgdT10aGlzLmRlY29kZSh0KSxjPXRoaXMudGV4RGF0YS5nZXQodS5kYXRhSWQpLGw9KGU9dGhpcy5ncGdwdSkuZG93bmxvYWRNYXRyaXhGcm9tUGFja2VkVGV4dHVyZS5hcHBseShlLFtjLnRleHR1cmVdLmNvbmNhdChZdChyKSkpLnN1YmFycmF5KDAscyk7cmV0dXJuIHRoaXMuZGlzcG9zZURhdGEodS5kYXRhSWQpLGx9dmFyIGg9aSgpLmdldEJvb2woXCJXRUJHTF9QQUNLXCIpJiYhMD09PWEsZj1oP1RlKHIpOnIsZD1oP25ldyBjaShmKTpuZXcgdWkoZikscD10aGlzLnJ1bldlYkdMUHJvZ3JhbShkLFt7c2hhcGU6ZixkdHlwZTpvLGRhdGFJZDp0fV0sXCJmbG9hdDMyXCIpLHY9dGhpcy50ZXhEYXRhLmdldChwLmRhdGFJZCksbT10aGlzLmdwZ3B1LmRvd25sb2FkQnl0ZUVuY29kZWRGbG9hdE1hdHJpeEZyb21PdXRwdXRUZXh0dXJlKHYudGV4dHVyZSx2LnRleFNoYXBlWzBdLHYudGV4U2hhcGVbMV0pLnN1YmFycmF5KDAscyk7cmV0dXJuIHRoaXMuZGlzcG9zZURhdGEocC5kYXRhSWQpLG19LG8ucHJvdG90eXBlLnRpbWU9ZnVuY3Rpb24odCl7cmV0dXJuIG4odGhpcyx2b2lkIDAsdm9pZCAwLChmdW5jdGlvbigpe3ZhciBlLG4sbyxhLHMsdSxjO3JldHVybiByKHRoaXMsKGZ1bmN0aW9uKHIpe3N3aXRjaChyLmxhYmVsKXtjYXNlIDA6cmV0dXJuIGU9dGhpcy5hY3RpdmVUaW1lcnMsbj1bXSxvPSExLG51bGw9PXRoaXMucHJvZ3JhbVRpbWVyc1N0YWNrPyh0aGlzLnByb2dyYW1UaW1lcnNTdGFjaz1uLG89ITApOnRoaXMuYWN0aXZlVGltZXJzLnB1c2gobiksdGhpcy5hY3RpdmVUaW1lcnM9bix0KCksYT1JKHRoaXMuYWN0aXZlVGltZXJzLm1hcCgoZnVuY3Rpb24odCl7cmV0dXJuIHQucXVlcnl9KSkpLmZpbHRlcigoZnVuY3Rpb24odCl7cmV0dXJuIG51bGwhPXR9KSkscz1JKHRoaXMuYWN0aXZlVGltZXJzLm1hcCgoZnVuY3Rpb24odCl7cmV0dXJuIHQubmFtZX0pKSkuZmlsdGVyKChmdW5jdGlvbih0KXtyZXR1cm4gbnVsbCE9dH0pKSx0aGlzLmFjdGl2ZVRpbWVycz1lLG8mJih0aGlzLnByb2dyYW1UaW1lcnNTdGFjaz1udWxsKSx1PXt1cGxvYWRXYWl0TXM6dGhpcy51cGxvYWRXYWl0TXMsZG93bmxvYWRXYWl0TXM6dGhpcy5kb3dubG9hZFdhaXRNcyxrZXJuZWxNczpudWxsLHdhbGxNczpudWxsfSxpKCkuZ2V0TnVtYmVyKFwiV0VCR0xfRElTSk9JTlRfUVVFUllfVElNRVJfRVhURU5TSU9OX1JFTElBQkxFXCIpPjA/WzQsUHJvbWlzZS5hbGwoYSldOlszLDJdO2Nhc2UgMTpyZXR1cm4gYz1yLnNlbnQoKSx1Lmtlcm5lbE1zPXcoYyksdS5nZXRFeHRyYVByb2ZpbGVJbmZvPWZ1bmN0aW9uKCl7cmV0dXJuIGMubWFwKChmdW5jdGlvbih0LGUpe3JldHVybntuYW1lOnNbZV0sbXM6dH19KSkubWFwKChmdW5jdGlvbih0KXtyZXR1cm4gdC5uYW1lK1wiOiBcIit0Lm1zfSkpLmpvaW4oXCIsIFwiKX0sWzMsM107Y2FzZSAyOnUua2VybmVsTXM9e2Vycm9yOlwiV2ViR0wgcXVlcnkgdGltZXJzIGFyZSBub3Qgc3VwcG9ydGVkIGluIHRoaXMgZW52aXJvbm1lbnQuXCJ9LHIubGFiZWw9MztjYXNlIDM6cmV0dXJuIHRoaXMudXBsb2FkV2FpdE1zPTAsdGhpcy5kb3dubG9hZFdhaXRNcz0wLFsyLHVdfX0pKX0pKX0sby5wcm90b3R5cGUubWVtb3J5PWZ1bmN0aW9uKCl7cmV0dXJue3VucmVsaWFibGU6ITEsbnVtQnl0ZXNJbkdQVTp0aGlzLm51bUJ5dGVzSW5HUFV9fSxvLnByb3RvdHlwZS5zdGFydFRpbWVyPWZ1bmN0aW9uKCl7cmV0dXJuIGkoKS5nZXROdW1iZXIoXCJXRUJHTF9ESVNKT0lOVF9RVUVSWV9USU1FUl9FWFRFTlNJT05fUkVMSUFCTEVcIik+MD90aGlzLmdwZ3B1LmJlZ2luUXVlcnkoKTp7c3RhcnRNczpldCgpLGVuZE1zOm51bGx9fSxvLnByb3RvdHlwZS5lbmRUaW1lcj1mdW5jdGlvbih0KXtyZXR1cm4gaSgpLmdldE51bWJlcihcIldFQkdMX0RJU0pPSU5UX1FVRVJZX1RJTUVSX0VYVEVOU0lPTl9SRUxJQUJMRVwiKT4wPyh0aGlzLmdwZ3B1LmVuZFF1ZXJ5KCksdCk6KHQuZW5kTXM9ZXQoKSx0KX0sby5wcm90b3R5cGUuZ2V0UXVlcnlUaW1lPWZ1bmN0aW9uKHQpe3JldHVybiBuKHRoaXMsdm9pZCAwLHZvaWQgMCwoZnVuY3Rpb24oKXt2YXIgZTtyZXR1cm4gcih0aGlzLChmdW5jdGlvbihuKXtyZXR1cm4gaSgpLmdldE51bWJlcihcIldFQkdMX0RJU0pPSU5UX1FVRVJZX1RJTUVSX0VYVEVOU0lPTl9SRUxJQUJMRVwiKT4wP1syLHRoaXMuZ3BncHUud2FpdEZvclF1ZXJ5QW5kR2V0VGltZSh0KV06WzIsKGU9dCkuZW5kTXMtZS5zdGFydE1zXX0pKX0pKX0sby5wcm90b3R5cGUuZGlzcG9zZURhdGE9ZnVuY3Rpb24odCl7aWYoIXRoaXMucGVuZGluZ0Rpc3Bvc2FsLmhhcyh0KSl7aWYodGhpcy5wZW5kaW5nUmVhZC5oYXModCkpcmV0dXJuIHRoaXMucGVuZGluZ0Rpc3Bvc2FsLmFkZCh0KSx2b2lkIHRoaXMucGVuZGluZ0RlbGV0ZXMrKztpZih0aGlzLnRleERhdGEuaGFzKHQpKXt0aGlzLnJlbGVhc2VHUFVEYXRhKHQpO3ZhciBlPXRoaXMudGV4RGF0YS5nZXQodCkuY29tcGxleFRlbnNvcnM7bnVsbCE9ZSYmKGUucmVhbC5kaXNwb3NlKCksZS5pbWFnLmRpc3Bvc2UoKSksdGhpcy50ZXhEYXRhLmRlbGV0ZSh0KX19fSxvLnByb3RvdHlwZS5yZWxlYXNlR1BVRGF0YT1mdW5jdGlvbih0KXt2YXIgZT10aGlzLnRleERhdGEuZ2V0KHQpLG49ZS50ZXh0dXJlLHI9ZS5kdHlwZSxvPWUudGV4U2hhcGUsYT1lLnVzYWdlLGk9ZS5pc1BhY2tlZCxzPWUuc2xpY2UsdT1zJiZzLm9yaWdEYXRhSWR8fHQsYz10aGlzLmRhdGFSZWZDb3VudC5nZXQodSk7Yz4xP3RoaXMuZGF0YVJlZkNvdW50LnNldCh1LGMtMSk6KHRoaXMuZGF0YVJlZkNvdW50LmRlbGV0ZSh1KSxudWxsIT1uJiYodGhpcy5udW1CeXRlc0luR1BVLT10aGlzLmNvbXB1dGVCeXRlcyhvLHIpLHRoaXMudGV4dHVyZU1hbmFnZXIucmVsZWFzZVRleHR1cmUobixvLGEsaSkpKTt2YXIgbD10aGlzLnRleERhdGEuZ2V0KHQpO2wudGV4dHVyZT1udWxsLGwudGV4U2hhcGU9bnVsbCxsLmlzUGFja2VkPSExLGwuc2xpY2U9bnVsbH0sby5wcm90b3R5cGUuZ2V0VGV4dHVyZT1mdW5jdGlvbih0KXtyZXR1cm4gdGhpcy51cGxvYWRUb0dQVSh0KSx0aGlzLnRleERhdGEuZ2V0KHQpLnRleHR1cmV9LG8ucHJvdG90eXBlLmdldERhdGFJbmZvPWZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLnRleERhdGEuZ2V0KHQpfSxvLnByb3RvdHlwZS5nZXRDUFVCYWNrZW5kPWZ1bmN0aW9uKCl7cmV0dXJuIGkoKS5nZXRCb29sKFwiV0VCR0xfQ1BVX0ZPUldBUkRcIik/KG51bGw9PXRoaXMuY3B1QmFja2VuZCYmKHRoaXMuY3B1QmFja2VuZD1MdC5maW5kQmFja2VuZChcImNwdVwiKSksdGhpcy5jcHVCYWNrZW5kKTpudWxsfSxvLnByb3RvdHlwZS5zaG91bGRFeGVjdXRlT25DUFU9ZnVuY3Rpb24odCxlKXt2YXIgbj10aGlzO3JldHVybiB2b2lkIDA9PT1lJiYoZT0xMjgpLG51bGwhPXRoaXMuZ2V0Q1BVQmFja2VuZCgpJiZ0LmV2ZXJ5KChmdW5jdGlvbih0KXtyZXR1cm4gbnVsbD09bi50ZXhEYXRhLmdldCh0LmRhdGFJZCkudGV4dHVyZSYmdC5zaXplPGV9KSl9LG8ucHJvdG90eXBlLmdldEdQR1BVQ29udGV4dD1mdW5jdGlvbigpe3JldHVybiB0aGlzLmdwZ3B1fSxvLnByb3RvdHlwZS5jb21wbGV4PWZ1bmN0aW9uKHQsZSl7dmFyIG49dGhpcy5tYWtlT3V0cHV0KHQuc2hhcGUsXCJjb21wbGV4NjRcIik7cmV0dXJuIHRoaXMudGV4RGF0YS5nZXQobi5kYXRhSWQpLmNvbXBsZXhUZW5zb3JzPXtyZWFsOkx0LmtlZXAodC5jbG9uZSgpKSxpbWFnOkx0LmtlZXAoZS5jbG9uZSgpKX0sbn0sby5wcm90b3R5cGUucmVhbD1mdW5jdGlvbih0KXtyZXR1cm4gdGhpcy50ZXhEYXRhLmdldCh0LmRhdGFJZCkuY29tcGxleFRlbnNvcnMucmVhbC5jbG9uZSgpfSxvLnByb3RvdHlwZS5pbWFnPWZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLnRleERhdGEuZ2V0KHQuZGF0YUlkKS5jb21wbGV4VGVuc29ycy5pbWFnLmNsb25lKCl9LG8ucHJvdG90eXBlLnNsaWNlPWZ1bmN0aW9uKHQsZSxuKXtpZih0aGlzLnNob3VsZEV4ZWN1dGVPbkNQVShbdF0pKXJldHVybiB0aGlzLmNwdUJhY2tlbmQuc2xpY2UodCxlLG4pO2lmKDA9PT1rKG4pKXJldHVybiBGbihbXSxuLHQuZHR5cGUpO3ZhciByPXRoaXMudGV4RGF0YS5nZXQodC5kYXRhSWQpLmlzUGFja2VkLG89aW8odC5zaGFwZSxlLG4pO2lmKHJ8fCFvKXt2YXIgYT1pKCkuZ2V0Qm9vbChcIldFQkdMX1BBQ0tfQVJSQVlfT1BFUkFUSU9OU1wiKT9uZXcgZnMobik6bmV3IGxzKG4pLHM9YS5nZXRDdXN0b21TZXR1cEZ1bmMoZSk7cmV0dXJuIHRoaXMuY29tcGlsZUFuZFJ1bihhLFt0XSxudWxsLHMpfXJldHVybiB0aGlzLnVwbG9hZFRvR1BVKHQuZGF0YUlkKSx0aGlzLnNoYWxsb3dTbGljZSh0LGUsbil9LG8ucHJvdG90eXBlLnNoYWxsb3dTbGljZT1mdW5jdGlvbih0LGUsbil7dmFyIHI9dGhpcy50ZXhEYXRhLmdldCh0LmRhdGFJZCksbz10aGlzLm1ha2VPdXRwdXQobix0LmR0eXBlKSxhPXRoaXMudGV4RGF0YS5nZXQoby5kYXRhSWQpO09iamVjdC5hc3NpZ24oYSxyKSxhLnNoYXBlPW4sYS5kdHlwZT10LmR0eXBlO3ZhciBpPXNvKGUsdC5zdHJpZGVzKTtyLnNsaWNlJiYoaSs9ci5zbGljZS5mbGF0T2Zmc2V0KSxhLnNsaWNlPXtmbGF0T2Zmc2V0Omksb3JpZ0RhdGFJZDpyLnNsaWNlJiZyLnNsaWNlLm9yaWdEYXRhSWR8fHQuZGF0YUlkfTt2YXIgcz10aGlzLmRhdGFSZWZDb3VudC5nZXQoYS5zbGljZS5vcmlnRGF0YUlkKXx8MTtyZXR1cm4gdGhpcy5kYXRhUmVmQ291bnQuc2V0KGEuc2xpY2Uub3JpZ0RhdGFJZCxzKzEpLG99LG8ucHJvdG90eXBlLnN0cmlkZWRTbGljZT1mdW5jdGlvbih0LGUsbixyKXtpZih0aGlzLnNob3VsZEV4ZWN1dGVPbkNQVShbdF0pKXJldHVybiB0aGlzLmNwdUJhY2tlbmQuc3RyaWRlZFNsaWNlKHQsZSxuLHIpO3ZhciBvPXJvKGUsbixyKTtpZihvLnNvbWUoKGZ1bmN0aW9uKHQpe3JldHVybiAwPT09dH0pKSlyZXR1cm4gRm4oW10sbyk7dmFyIGE9bmV3IGRzKGUscixvKTtyZXR1cm4gdGhpcy5jb21waWxlQW5kUnVuKGEsW3RdKX0sby5wcm90b3R5cGUucmV2ZXJzZT1mdW5jdGlvbih0LGUpe3ZhciBuPWkoKS5nZXRCb29sKFwiV0VCR0xfUEFDS19BUlJBWV9PUEVSQVRJT05TXCIpP25ldyBpcyh0LnNoYXBlLGUpOm5ldyBhcyh0LnNoYXBlLGUpO3JldHVybiB0aGlzLmNvbXBpbGVBbmRSdW4obixbdF0pfSxvLnByb3RvdHlwZS5jb25jYXQ9ZnVuY3Rpb24odCxlKXtpZihcImNvbXBsZXg2NFwiPT09dFswXS5kdHlwZSl7dmFyIG49dC5tYXAoKGZ1bmN0aW9uKHQpe3JldHVybiBUbih0KX0pKSxyPXQubWFwKChmdW5jdGlvbih0KXtyZXR1cm4gTm4odCl9KSk7cmV0dXJuIERuKHRoaXMuY29uY2F0KG4sZSksdGhpcy5jb25jYXQocixlKSl9aWYodGhpcy5zaG91bGRFeGVjdXRlT25DUFUodCkpcmV0dXJuIHRoaXMuY3B1QmFja2VuZC5jb25jYXQodCxlKTtpZigxPT09dC5sZW5ndGgpcmV0dXJuIHRbMF07aWYodC5sZW5ndGg+aSgpLmdldE51bWJlcihcIldFQkdMX01BWF9URVhUVVJFU19JTl9TSEFERVJcIikpe3ZhciBvPU1hdGguZmxvb3IodC5sZW5ndGgvMiksYT10aGlzLmNvbmNhdCh0LnNsaWNlKDAsbyksZSkscz10aGlzLmNvbmNhdCh0LnNsaWNlKG8pLGUpO3JldHVybiB0aGlzLmNvbmNhdChbYSxzXSxlKX1pZihpKCkuZ2V0Qm9vbChcIldFQkdMX1BBQ0tfQVJSQVlfT1BFUkFUSU9OU1wiKSYmdFswXS5yYW5rPjEpe3ZhciB1PW5ldyBHYSh0Lm1hcCgoZnVuY3Rpb24odCl7cmV0dXJuIHQuc2hhcGV9KSksZSk7cmV0dXJuIHRoaXMuY29tcGlsZUFuZFJ1bih1LHQpfXZhciBjPVNuKHQubWFwKChmdW5jdGlvbih0KXtyZXR1cm4gdC5zaGFwZX0pKSxlKSxsPXQubWFwKChmdW5jdGlvbih0KXtyZXR1cm4gdC5hczJEKC0xLGsodC5zaGFwZS5zbGljZShlKSkpfSkpLGg9bmV3IHphKGwubWFwKChmdW5jdGlvbih0KXtyZXR1cm4gdC5zaGFwZX0pKSk7cmV0dXJuIHRoaXMuY29tcGlsZUFuZFJ1bihoLGwpLnJlc2hhcGUoYyl9LG8ucHJvdG90eXBlLm5lZz1mdW5jdGlvbih0KXtpZih0aGlzLnNob3VsZEV4ZWN1dGVPbkNQVShbdF0pKXJldHVybiB0aGlzLmNwdUJhY2tlbmQubmVnKHQpO2lmKGkoKS5nZXRCb29sKFwiV0VCR0xfUEFDS19VTkFSWV9PUEVSQVRJT05TXCIpKXJldHVybiB0aGlzLnBhY2tlZFVuYXJ5T3AodCxUcyx0LmR0eXBlKTt2YXIgZT1uZXcgQ3ModC5zaGFwZSxUcyk7cmV0dXJuIHRoaXMuY29tcGlsZUFuZFJ1bihlLFt0XSl9LG8ucHJvdG90eXBlLmJhdGNoTWF0TXVsPWZ1bmN0aW9uKHQsZSxuLHIpe3ZhciBvPW4/dC5zaGFwZVsyXTp0LnNoYXBlWzFdLGE9cj9lLnNoYXBlWzFdOmUuc2hhcGVbMl0saT1uP3Quc2hhcGVbMV06dC5zaGFwZVsyXSxzPXQuc2hhcGVbMF07aWYoKDE9PT1vfHwxPT09YSkmJmk+MWUzKXtuJiYodD10LnRyYW5zcG9zZShbMCwyLDFdKSksciYmKGU9ZS50cmFuc3Bvc2UoWzAsMiwxXSkpO3ZhciB1PTE9PT1hP3Q6dC5hczNEKHMsaSwxKSxjPTE9PT1hPzI6MSxsPTE9PT1hP2UuYXMzRChzLDEsaSk6ZTtyZXR1cm4gdGhpcy5tdWx0aXBseSh1LGwpLnN1bShjLCEwKX12YXIgaD1EdCh0LmR0eXBlLGUuZHR5cGUpLGY9bmV3IEhpKHQuc2hhcGUsW3MsbyxhXSxuLHIpO3JldHVybiB0aGlzLmNvbXBpbGVBbmRSdW4oZixbdCxlXSxoKX0sby5wcm90b3R5cGUuZnVzZWRCYXRjaE1hdE11bD1mdW5jdGlvbih0KXt2YXIgZT10LmEsbj10LmIscj10LnRyYW5zcG9zZUEsbz10LnRyYW5zcG9zZUIsYT10LmJpYXMsaT10LmFjdGl2YXRpb24scz10LnByZWx1QWN0aXZhdGlvbldlaWdodHMsdT1yP2Uuc2hhcGVbMl06ZS5zaGFwZVsxXSxjPW8/bi5zaGFwZVsxXTpuLnNoYXBlWzJdLGw9ZS5zaGFwZVswXSxoPUR0KGUuZHR5cGUsbi5kdHlwZSksZj1udWxsIT1hLGQ9bnVsbCE9cyxwPWk/UXMoaSwhMCk6bnVsbCx2PW5ldyBIaShlLnNoYXBlLFtsLHUsY10scixvLGYscCxkKSxtPVtlLG5dO3JldHVybiBhJiZtLnB1c2goYSkscyYmbS5wdXNoKHMpLHRoaXMuY29tcGlsZUFuZFJ1bih2LG0saCl9LG8ucHJvdG90eXBlLm11bHRpcGx5PWZ1bmN0aW9uKHQsZSl7aWYoXCJjb21wbGV4NjRcIj09PXQuZHR5cGUpe3ZhciBuPXRoaXMudGV4RGF0YS5nZXQodC5kYXRhSWQpLHI9dGhpcy50ZXhEYXRhLmdldChlLmRhdGFJZCksbz1uZXcgTmEoRGEsdC5zaGFwZSxlLnNoYXBlKSxhPW5ldyBOYShUYSx0LnNoYXBlLGUuc2hhcGUpLHM9W3RoaXMubWFrZUNvbXBsZXhDb21wb25lbnRUZW5zb3JJbmZvKHQsbi5jb21wbGV4VGVuc29ycy5yZWFsKSx0aGlzLm1ha2VDb21wbGV4Q29tcG9uZW50VGVuc29ySW5mbyh0LG4uY29tcGxleFRlbnNvcnMuaW1hZyksdGhpcy5tYWtlQ29tcGxleENvbXBvbmVudFRlbnNvckluZm8oZSxyLmNvbXBsZXhUZW5zb3JzLnJlYWwpLHRoaXMubWFrZUNvbXBsZXhDb21wb25lbnRUZW5zb3JJbmZvKGUsci5jb21wbGV4VGVuc29ycy5pbWFnKV0sdT10aGlzLmNvbXBpbGVBbmRSdW4obyxzKSxjPXRoaXMuY29tcGlsZUFuZFJ1bihhLHMpLGw9dGhpcy5jb21wbGV4KHUsYyk7cmV0dXJuIHUuZGlzcG9zZSgpLGMuZGlzcG9zZSgpLGx9aWYodGhpcy5zaG91bGRFeGVjdXRlT25DUFUoW3QsZV0pKXJldHVybiB0aGlzLmNwdUJhY2tlbmQubXVsdGlwbHkodCxlKTtpZihpKCkuZ2V0Qm9vbChcIldFQkdMX1BBQ0tfQklOQVJZX09QRVJBVElPTlNcIikpcmV0dXJuIHRoaXMucGFja2VkQmluYXJ5T3AodCxlLE9hLHQuZHR5cGUpO3ZhciBoPW5ldyBCYShPYSx0LnNoYXBlLGUuc2hhcGUpO3JldHVybiB0aGlzLmNvbXBpbGVBbmRSdW4oaCxbdCxlXSx0LmR0eXBlKX0sby5wcm90b3R5cGUuYmF0Y2hOb3JtYWxpemF0aW9uPWZ1bmN0aW9uKHQsZSxuLHIsbyxhKXt2YXIgcz1bdCxlLG5dLHU9bnVsbDtudWxsIT1hJiYodT1hLnNoYXBlLHMucHVzaChhKSk7dmFyIGM9bnVsbDtpZihudWxsIT1vJiYoYz1vLnNoYXBlLHMucHVzaChvKSksaSgpLmdldEJvb2woXCJXRUJHTF9QQUNLX05PUk1BTElaQVRJT05cIikpe3ZhciBsPW5ldyBBYSh0LnNoYXBlLGUuc2hhcGUsbi5zaGFwZSx1LGMscik7cmV0dXJuIHRoaXMuY29tcGlsZUFuZFJ1bihsLHMpfXZhciBoPW5ldyBTYSh0LnNoYXBlLGUuc2hhcGUsbi5zaGFwZSx1LGMscik7cmV0dXJuIHRoaXMuY29tcGlsZUFuZFJ1bihoLHMpfSxvLnByb3RvdHlwZS5sb2NhbFJlc3BvbnNlTm9ybWFsaXphdGlvbjREPWZ1bmN0aW9uKHQsZSxuLHIsbyl7dmFyIGE9aSgpLmdldEJvb2woXCJXRUJHTF9QQUNLX05PUk1BTElaQVRJT05cIik/bmV3IFZpKHQuc2hhcGUsZSxuLHIsbyk6bmV3IFdpKHQuc2hhcGUsZSxuLHIsbyk7cmV0dXJuIHRoaXMuY29tcGlsZUFuZFJ1bihhLFt0XSl9LG8ucHJvdG90eXBlLkxSTkdyYWQ9ZnVuY3Rpb24odCxlLG4scixvLGEsaSl7dmFyIHM9bmV3IFVpKGUuc2hhcGUscixvLGEsaSk7cmV0dXJuIHRoaXMuY29tcGlsZUFuZFJ1bihzLFtlLG4sdF0pfSxvLnByb3RvdHlwZS50aWxlPWZ1bmN0aW9uKHQsZSl7aWYoXCJzdHJpbmdcIj09PXQuZHR5cGUpe3ZhciBuPXRoaXMucmVhZFN5bmModC5kYXRhSWQpLm1hcCgoZnVuY3Rpb24odCl7cmV0dXJuIG90KHQpfSkpO3JldHVybiB0YShkcih0LnNoYXBlLHQuZHR5cGUsbiksZSl9dmFyIHI9bmV3IGdzKHQuc2hhcGUsZSk7cmV0dXJuIHRoaXMuY29tcGlsZUFuZFJ1bihyLFt0XSl9LG8ucHJvdG90eXBlLnBhZD1mdW5jdGlvbih0LGUsbil7dmFyIHI9aSgpLmdldEJvb2woXCJXRUJHTF9QQUNLX0FSUkFZX09QRVJBVElPTlNcIik/bmV3IFlpKHQuc2hhcGUsZSxuKTpuZXcgWGkodC5zaGFwZSxlLG4pO3JldHVybiB0aGlzLmNvbXBpbGVBbmRSdW4ocixbdF0pfSxvLnByb3RvdHlwZS50cmFuc3Bvc2U9ZnVuY3Rpb24odCxlKXtpZih0aGlzLnNob3VsZEV4ZWN1dGVPbkNQVShbdF0pKXJldHVybiB0aGlzLmNwdUJhY2tlbmQudHJhbnNwb3NlKHQsZSk7dmFyIG49aSgpLmdldEJvb2woXCJXRUJHTF9QQUNLX0FSUkFZX09QRVJBVElPTlNcIik/bmV3IHhzKHQuc2hhcGUsZSk6bmV3IHlzKHQuc2hhcGUsZSk7cmV0dXJuIHRoaXMuY29tcGlsZUFuZFJ1bihuLFt0XSl9LG8ucHJvdG90eXBlLmdhdGhlcj1mdW5jdGlvbih0LGUsbil7aWYodGhpcy5zaG91bGRFeGVjdXRlT25DUFUoW3QsZV0pKXJldHVybiB0aGlzLmNwdUJhY2tlbmQuZ2F0aGVyKHQsZSxuKTt2YXIgcj1uZXcgbWkodC5zaGFwZSxlLnNpemUsbik7cmV0dXJuIHRoaXMuY29tcGlsZUFuZFJ1bihyLFt0LGVdKX0sby5wcm90b3R5cGUuYmF0Y2hUb1NwYWNlTkQ9ZnVuY3Rpb24odCxlLG4pe0ModC5yYW5rPD00LChmdW5jdGlvbigpe3JldHVyblwiYmF0Y2hUb1NwYWNlTkQgZm9yIHJhbmsgPiA0IHdpdGggYSBXZWJHTCBiYWNrZW5kIG5vdCBpbXBsZW1lbnRlZCB5ZXRcIn0pKTt2YXIgcj1lLnJlZHVjZSgoZnVuY3Rpb24odCxlKXtyZXR1cm4gdCplfSkpLG89enIodC5zaGFwZSxlLHIpLGE9R3Ioby5sZW5ndGgsZS5sZW5ndGgpLGk9SHIodC5zaGFwZSxlLHIpLHM9cXIobixlLmxlbmd0aCksdT1LcihpLG4sZS5sZW5ndGgpO3JldHVybiB0LnJlc2hhcGUobykudHJhbnNwb3NlKGEpLnJlc2hhcGUoaSkuc2xpY2Uocyx1KX0sby5wcm90b3R5cGUuc3BhY2VUb0JhdGNoTkQ9ZnVuY3Rpb24odCxlLG4pe0ModC5yYW5rPD00LChmdW5jdGlvbigpe3JldHVyblwic3BhY2VUb0JhdGNoTkQgZm9yIHJhbmsgPiA0IHdpdGggYSBXZWJHTCBiYWNrZW5kIG5vdCBpbXBsZW1lbnRlZCB5ZXRcIn0pKTt2YXIgcj1lLnJlZHVjZSgoZnVuY3Rpb24odCxlKXtyZXR1cm4gdCplfSkpLG89W1swLDBdXTtvLnB1c2guYXBwbHkobyxuKTtmb3IodmFyIGE9MStlLmxlbmd0aDthPHQuc2hhcGUubGVuZ3RoOysrYSlvLnB1c2goWzAsMF0pO3ZhciBpPXQucGFkKG8pLHM9enIoaS5zaGFwZSxlLHIsITEpLHU9R3Iocy5sZW5ndGgsZS5sZW5ndGgsITEpLGM9SHIoaS5zaGFwZSxlLHIsITEpO3JldHVybiBpLnJlc2hhcGUocykudHJhbnNwb3NlKHUpLnJlc2hhcGUoYyl9LG8ucHJvdG90eXBlLnJlZHVjZT1mdW5jdGlvbih0LGUsbil7dmFyIHI9dC5zaGFwZVswXSxvPXQuc2hhcGVbMV0sYT0kcihvKSxpPW5ldyBKaSh7d2luZG93U2l6ZTphLGluU2l6ZTpvLGJhdGNoU2l6ZTpyfSxlKSxzPXRoaXMuY29tcGlsZUFuZFJ1bihpLFt0XSxuKTtyZXR1cm4gMT09PXMuc2hhcGVbMV0/czp0aGlzLnJlZHVjZShzLGUsbil9LG8ucHJvdG90eXBlLmFyZ1JlZHVjZT1mdW5jdGlvbih0LGUsbil7dm9pZCAwPT09biYmKG49bnVsbCk7dmFyIHI9dC5zaGFwZVswXSxvPXQuc2hhcGVbMV07bnVsbCE9biYmKHI9bi5zaGFwZVswXSxvPW4uc2hhcGVbMV0pO3ZhciBhPSRyKG8pLGk9bmV3IGFhKHt3aW5kb3dTaXplOmEsaW5TaXplOm8sYmF0Y2hTaXplOnJ9LGUsbnVsbD09bikscz1bdF07bnVsbCE9biYmcy5wdXNoKG4pO3ZhciB1PXRoaXMuY29tcGlsZUFuZFJ1bihpLHMsXCJpbnQzMlwiKTtyZXR1cm4gMT09PXUuc2hhcGVbMV0/dTp0aGlzLmFyZ1JlZHVjZSh0LGUsdSl9LG8ucHJvdG90eXBlLmFyZ1JlZHVjZVBhY2tlZD1mdW5jdGlvbih0LGUsbil7dm9pZCAwPT09biYmKG49bnVsbCk7dmFyIHI9bnVsbCE9bj9uLnNoYXBlOnQuc2hhcGUsbz0kcihyW3IubGVuZ3RoLTFdKSxhPW5ldyBSYShyLG8sZSxudWxsPT1uKSxpPW51bGw9PW4/W3RdOlt0LG5dLHM9dGhpcy5jb21waWxlQW5kUnVuKGEsaSxcImludDMyXCIpO3JldHVybiBzLnJhbms9PT10LnJhbms/dGhpcy5hcmdSZWR1Y2VQYWNrZWQodCxlLHMpOnN9LG8ucHJvdG90eXBlLnN1bT1mdW5jdGlvbih0LGUpe0NuKFwic3VtXCIsZSx0LnJhbmspO3ZhciBuPWJuKHQuc2hhcGUsZSkscj1uWzBdLG89ayhuWzFdKSxhPXQuYXMyRCgtMSxvKSxpPVR0KHQuZHR5cGUpO3JldHVybiB0aGlzLnJlZHVjZShhLFwic3VtXCIsaSkucmVzaGFwZShyKX0sby5wcm90b3R5cGUucHJvZD1mdW5jdGlvbih0LGUpe2lmKHRoaXMuc2hvdWxkRXhlY3V0ZU9uQ1BVKFt0XSkpcmV0dXJuIHRoaXMuY3B1QmFja2VuZC5wcm9kKHQsZSk7dmFyIG49Ym4odC5zaGFwZSxlKSxyPW5bMF0sbz1rKG5bMV0pLGE9dC5hczJEKC0xLG8pLGk9VHQodC5kdHlwZSk7cmV0dXJuIHRoaXMucmVkdWNlKGEsXCJwcm9kXCIsaSkucmVzaGFwZShyKX0sby5wcm90b3R5cGUudW5zb3J0ZWRTZWdtZW50U3VtPWZ1bmN0aW9uKHQsZSxuKXt2YXIgcj0wLG89RW4oW3JdLHQucmFuayksYT10O251bGwhPW8mJihhPXQudHJhbnNwb3NlKG8pLHI9SW4oMSx0LnJhbmspWzBdKTt2YXIgaT1mdW5jdGlvbih0LGUsbil7Zm9yKHZhciByPVtdLG89dC5sZW5ndGgsYT0wO2E8bzthKyspYSE9PWU/ci5wdXNoKHRbYV0pOnIucHVzaChuKTtyZXR1cm4gcn0oYS5zaGFwZSxyLG4pLHM9ayhbYS5zaGFwZVtyXV0pLHU9YS5hczJEKC0xLHMpLGM9VHQodC5kdHlwZSksbD10aGlzLnNlZ09wQ29tcHV0ZSh1LFwidW5zb3J0ZWRTZWdtZW50U3VtXCIsZSxjLG4pLnJlc2hhcGUoaSk7cmV0dXJuIG51bGwhPW8mJihsPWwudHJhbnNwb3NlKFJuKG8pKSksbH0sby5wcm90b3R5cGUuc2VnT3BDb21wdXRlPWZ1bmN0aW9uKHQsZSxuLHIsbyl7dmFyIGE9dC5zaGFwZVswXSxpPXQuc2hhcGVbMV0scz1mdW5jdGlvbih0LGUpe3ZhciBuLHI9ITE7Zm9yKHQ8PVlyPyhuPXQscj0hMCk6bj1ZKHQsTWF0aC5mbG9vcihNYXRoLnNxcnQodCkpKTshcjspbj5lfHxuPT09dD9yPSEwOm49WSh0LG4rMSk7cmV0dXJuIG59KGksbyksdT1uZXcgdXMoe3dpbmRvd1NpemU6cyxpblNpemU6aSxiYXRjaFNpemU6YSxudW1TZWdtZW50czpvfSxlKSxjPXRoaXMuY29tcGlsZUFuZFJ1bih1LFt0LG5dLHIpO3JldHVybiBjLnNoYXBlWzFdPT09bz9jOihuPUtuKDAsbykudGlsZShbaS9zXSksdGhpcy5zZWdPcENvbXB1dGUoYyxlLG4scixvKSl9LG8ucHJvdG90eXBlLmFyZ01pbk1heFJlZHVjZT1mdW5jdGlvbih0LGUsbil7dmFyIHI9W2VdO2lmKENuKFwiYXJnXCIrbi5jaGFyQXQoMCkudG9VcHBlckNhc2UoKStuLnNsaWNlKDEpLHIsdC5yYW5rKSwhaSgpLmdldEJvb2woXCJXRUJHTF9QQUNLX1JFRFVDRVwiKXx8dC5yYW5rPD0yKXt2YXIgbz1ibih0LnNoYXBlLHIpLGE9b1swXSxzPWsob1sxXSksdT10LmFzMkQoLTEscyk7cmV0dXJuIHRoaXMuYXJnUmVkdWNlKHUsbikucmVzaGFwZShhKX1yZXR1cm4gdGhpcy5hcmdSZWR1Y2VQYWNrZWQodCxuKX0sby5wcm90b3R5cGUuYXJnTWluPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIHRoaXMuYXJnTWluTWF4UmVkdWNlKHQsZSxcIm1pblwiKX0sby5wcm90b3R5cGUuYXJnTWF4PWZ1bmN0aW9uKHQsZSl7cmV0dXJuIHRoaXMuYXJnTWluTWF4UmVkdWNlKHQsZSxcIm1heFwiKX0sby5wcm90b3R5cGUuY3Vtc3VtPWZ1bmN0aW9uKHQsZSxuLHIpe2lmKGUhPT10LnJhbmstMSl0aHJvdyBuZXcgRXJyb3IoXCJXZWJHTCBjdW1zdW0gc2hhZGVyIGV4cGVjdHMgYW4gaW5uZXItbW9zdCBheGlzPVwiKyh0LnJhbmstMSkrXCIgYnV0IGdvdCBheGlzPVwiK2UpO3ZhciBvPW5ldyBuaSh0LnNoYXBlLG4scik7cmV0dXJuIHRoaXMuY29tcGlsZUFuZFJ1bihvLFt0XSl9LG8ucHJvdG90eXBlLmVxdWFsPWZ1bmN0aW9uKHQsZSl7aWYoaSgpLmdldEJvb2woXCJXRUJHTF9QQUNLX0JJTkFSWV9PUEVSQVRJT05TXCIpKXJldHVybiB0aGlzLnBhY2tlZEJpbmFyeU9wKHQsZSxcIlxcbiAgcmV0dXJuIHZlYzQoZXF1YWwoYSwgYikpO1xcblwiLFwiYm9vbFwiKTt2YXIgbj1uZXcgQmEoXCJyZXR1cm4gZmxvYXQoYSA9PSBiKTtcIix0LnNoYXBlLGUuc2hhcGUpO3JldHVybiB0aGlzLmNvbXBpbGVBbmRSdW4obixbdCxlXSxcImJvb2xcIil9LG8ucHJvdG90eXBlLm5vdEVxdWFsPWZ1bmN0aW9uKHQsZSl7aWYoaSgpLmdldEJvb2woXCJXRUJHTF9QQUNLX0JJTkFSWV9PUEVSQVRJT05TXCIpKXJldHVybiB0aGlzLnBhY2tlZEJpbmFyeU9wKHQsZSxcIlxcbiAgcmV0dXJuIHZlYzQobm90RXF1YWwoYSwgYikpO1xcblwiLFwiYm9vbFwiKTt2YXIgbj1uZXcgQmEoXCJyZXR1cm4gZmxvYXQoYSAhPSBiKTtcIix0LnNoYXBlLGUuc2hhcGUpO3JldHVybiB0aGlzLmNvbXBpbGVBbmRSdW4obixbdCxlXSxcImJvb2xcIil9LG8ucHJvdG90eXBlLmxlc3M9ZnVuY3Rpb24odCxlKXtpZih0aGlzLnNob3VsZEV4ZWN1dGVPbkNQVShbdCxlXSkpcmV0dXJuIHRoaXMuY3B1QmFja2VuZC5sZXNzKHQsZSk7aWYoaSgpLmdldEJvb2woXCJXRUJHTF9QQUNLX0JJTkFSWV9PUEVSQVRJT05TXCIpKXJldHVybiB0aGlzLnBhY2tlZEJpbmFyeU9wKHQsZSxcIlxcbiAgcmV0dXJuIHZlYzQobGVzc1RoYW4oYSwgYikpO1xcblwiLFwiYm9vbFwiKTt2YXIgbj1uZXcgQmEoXCJyZXR1cm4gZmxvYXQoYSA8IGIpO1wiLHQuc2hhcGUsZS5zaGFwZSk7cmV0dXJuIHRoaXMuY29tcGlsZUFuZFJ1bihuLFt0LGVdLFwiYm9vbFwiKX0sby5wcm90b3R5cGUubGVzc0VxdWFsPWZ1bmN0aW9uKHQsZSl7aWYoaSgpLmdldEJvb2woXCJXRUJHTF9QQUNLX0JJTkFSWV9PUEVSQVRJT05TXCIpKXJldHVybiB0aGlzLnBhY2tlZEJpbmFyeU9wKHQsZSxcIlxcbiAgcmV0dXJuIHZlYzQobGVzc1RoYW5FcXVhbChhLCBiKSk7XFxuXCIsXCJib29sXCIpO3ZhciBuPW5ldyBCYShcInJldHVybiBmbG9hdChhIDw9IGIpO1wiLHQuc2hhcGUsZS5zaGFwZSk7cmV0dXJuIHRoaXMuY29tcGlsZUFuZFJ1bihuLFt0LGVdLFwiYm9vbFwiKX0sby5wcm90b3R5cGUuZ3JlYXRlcj1mdW5jdGlvbih0LGUpe2lmKHRoaXMuc2hvdWxkRXhlY3V0ZU9uQ1BVKFt0LGVdKSlyZXR1cm4gdGhpcy5jcHVCYWNrZW5kLmdyZWF0ZXIodCxlKTtpZihpKCkuZ2V0Qm9vbChcIldFQkdMX1BBQ0tfQklOQVJZX09QRVJBVElPTlNcIikpcmV0dXJuIHRoaXMucGFja2VkQmluYXJ5T3AodCxlLFwiXFxuICByZXR1cm4gdmVjNChncmVhdGVyVGhhbihhLCBiKSk7XFxuXCIsXCJib29sXCIpO3ZhciBuPW5ldyBCYShcInJldHVybiBmbG9hdChhID4gYik7XCIsdC5zaGFwZSxlLnNoYXBlKTtyZXR1cm4gdGhpcy5jb21waWxlQW5kUnVuKG4sW3QsZV0sXCJib29sXCIpfSxvLnByb3RvdHlwZS5ncmVhdGVyRXF1YWw9ZnVuY3Rpb24odCxlKXtpZihpKCkuZ2V0Qm9vbChcIldFQkdMX1BBQ0tfQklOQVJZX09QRVJBVElPTlNcIikpcmV0dXJuIHRoaXMucGFja2VkQmluYXJ5T3AodCxlLFwiXFxuICByZXR1cm4gdmVjNChncmVhdGVyVGhhbkVxdWFsKGEsIGIpKTtcXG5cIixcImJvb2xcIik7dmFyIG49bmV3IEJhKFwicmV0dXJuIGZsb2F0KGEgPj0gYik7XCIsdC5zaGFwZSxlLnNoYXBlKTtyZXR1cm4gdGhpcy5jb21waWxlQW5kUnVuKG4sW3QsZV0sXCJib29sXCIpfSxvLnByb3RvdHlwZS5sb2dpY2FsTm90PWZ1bmN0aW9uKHQpe3ZhciBlPW5ldyBDcyh0LnNoYXBlLFwicmV0dXJuIGZsb2F0KCEoeCA+PSAxLjApKTtcIik7cmV0dXJuIHRoaXMuY29tcGlsZUFuZFJ1bihlLFt0XSl9LG8ucHJvdG90eXBlLmxvZ2ljYWxBbmQ9ZnVuY3Rpb24odCxlKXtpZihpKCkuZ2V0Qm9vbChcIldFQkdMX1BBQ0tfQklOQVJZX09QRVJBVElPTlNcIikpcmV0dXJuIHRoaXMucGFja2VkQmluYXJ5T3AodCxlLFwiXFxuICByZXR1cm4gdmVjNChcXG4gICAgdmVjNChncmVhdGVyVGhhbkVxdWFsKGEsIHZlYzQoMS4wKSkpICpcXG4gICAgdmVjNChncmVhdGVyVGhhbkVxdWFsKGIsIHZlYzQoMS4wKSkpKTtcXG5cIixcImJvb2xcIik7dmFyIG49bmV3IEJhKFwicmV0dXJuIGZsb2F0KGEgPj0gMS4wICYmIGIgPj0gMS4wKTtcIix0LnNoYXBlLGUuc2hhcGUpO3JldHVybiB0aGlzLmNvbXBpbGVBbmRSdW4obixbdCxlXSxcImJvb2xcIil9LG8ucHJvdG90eXBlLmxvZ2ljYWxPcj1mdW5jdGlvbih0LGUpe2lmKGkoKS5nZXRCb29sKFwiV0VCR0xfUEFDS19CSU5BUllfT1BFUkFUSU9OU1wiKSlyZXR1cm4gdGhpcy5wYWNrZWRCaW5hcnlPcCh0LGUsXCJcXG4gIHJldHVybiBtaW4oXFxuICAgIHZlYzQoZ3JlYXRlclRoYW5FcXVhbChhLCB2ZWM0KDEuMCkpKSArXFxuICAgIHZlYzQoZ3JlYXRlclRoYW5FcXVhbChiLCB2ZWM0KDEuMCkpKSxcXG4gICAgdmVjNCgxLjApKTtcXG5cIixcImJvb2xcIik7dmFyIG49bmV3IEJhKFwicmV0dXJuIGZsb2F0KGEgPj0gMS4wIHx8IGIgPj0gMS4wKTtcIix0LnNoYXBlLGUuc2hhcGUpO3JldHVybiB0aGlzLmNvbXBpbGVBbmRSdW4obixbdCxlXSxcImJvb2xcIil9LG8ucHJvdG90eXBlLnNlbGVjdD1mdW5jdGlvbih0LGUsbil7dmFyIHI9bmV3IGNzKHQucmFuayxlLnNoYXBlLGUucmFuayk7cmV0dXJuIHRoaXMuY29tcGlsZUFuZFJ1bihyLFt0LGUsbl0sRHQoZS5kdHlwZSxuLmR0eXBlKSl9LG8ucHJvdG90eXBlLndoZXJlPWZ1bmN0aW9uKHQpe2RuKFwidGYud2hlcmUoKSBpbiB3ZWJnbCBsb2NrcyB0aGUgVUkgdGhyZWFkLiBDYWxsIHRmLndoZXJlQXN5bmMoKSBpbnN0ZWFkXCIpO3ZhciBlPXQuZGF0YVN5bmMoKTtyZXR1cm4gbmEodC5zaGFwZSxlKX0sby5wcm90b3R5cGUudG9waz1mdW5jdGlvbih0LGUsbil7cmV0dXJuIGVhKHQuZGF0YVN5bmMoKSx0LnNoYXBlLHQuZHR5cGUsZSl9LG8ucHJvdG90eXBlLm1pbj1mdW5jdGlvbih0LGUpe0NuKFwibWluXCIsZSx0LnJhbmspO3ZhciBuPWJuKHQuc2hhcGUsZSkscj1uWzBdLG89ayhuWzFdKSxhPXQuYXMyRCgtMSxvKTtyZXR1cm4gdGhpcy5yZWR1Y2UoYSxcIm1pblwiLGEuZHR5cGUpLnJlc2hhcGUocil9LG8ucHJvdG90eXBlLm1pbmltdW09ZnVuY3Rpb24odCxlKXtpZih0aGlzLnNob3VsZEV4ZWN1dGVPbkNQVShbdCxlXSkpcmV0dXJuIHRoaXMuY3B1QmFja2VuZC5taW5pbXVtKHQsZSk7dmFyIG49aSgpLmdldEJvb2woXCJXRUJHTF9QQUNLX0JJTkFSWV9PUEVSQVRJT05TXCIpP25ldyBMYShcIlxcbiAgdmVjNCByZXN1bHQgPSB2ZWM0KG1pbihhLCBiKSk7XFxuICB2ZWM0IGlzTmFOID0gbWluKHZlYzQoaXNuYW4oYSkpICsgdmVjNChpc25hbihiKSksIHZlYzQoMS4wKSk7XFxuICBcXG4gIHJlc3VsdC5yID0gaXNOYU4uciA+IDAuID8gTkFOIDogcmVzdWx0LnI7XFxuICByZXN1bHQuZyA9IGlzTmFOLmcgPiAwLiA/IE5BTiA6IHJlc3VsdC5nO1xcbiAgcmVzdWx0LmIgPSBpc05hTi5iID4gMC4gPyBOQU4gOiByZXN1bHQuYjtcXG4gIHJlc3VsdC5hID0gaXNOYU4uYSA+IDAuID8gTkFOIDogcmVzdWx0LmE7XFxuXFxuICByZXR1cm4gcmVzdWx0O1xcblwiLHQuc2hhcGUsZS5zaGFwZSk6bmV3IEJhKFwiXFxuICBpZiAoaXNuYW4oYSkpIHJldHVybiBhO1xcbiAgaWYgKGlzbmFuKGIpKSByZXR1cm4gYjtcXG5cXG4gIHJldHVybiBtaW4oYSwgYik7XFxuXCIsdC5zaGFwZSxlLnNoYXBlKTtyZXR1cm4gdGhpcy5jb21waWxlQW5kUnVuKG4sW3QsZV0pfSxvLnByb3RvdHlwZS5tb2Q9ZnVuY3Rpb24odCxlKXt2YXIgbj1pKCkuZ2V0Qm9vbChcIldFQkdMX1BBQ0tfQklOQVJZX09QRVJBVElPTlNcIik/bmV3IExhKFwiXFxuICB2ZWM0IHJlc3VsdCA9IG1vZChhLCBiKTtcXG4gIHZlYzQgaXNOYU4gPSB2ZWM0KGVxdWFsKGIsIHZlYzQoMC4wKSkpO1xcbiAgXFxuICByZXN1bHQuciA9IGlzTmFOLnIgPiAwLiA/IE5BTiA6IHJlc3VsdC5yO1xcbiAgcmVzdWx0LmcgPSBpc05hTi5nID4gMC4gPyBOQU4gOiByZXN1bHQuZztcXG4gIHJlc3VsdC5iID0gaXNOYU4uYiA+IDAuID8gTkFOIDogcmVzdWx0LmI7XFxuICByZXN1bHQuYSA9IGlzTmFOLmEgPiAwLiA/IE5BTiA6IHJlc3VsdC5hO1xcblxcbiAgcmV0dXJuIHJlc3VsdDtcXG5cIix0LnNoYXBlLGUuc2hhcGUpOm5ldyBCYShcImlmIChiID09IDAuMCkgcmV0dXJuIE5BTjtcXG4gIHJldHVybiBtb2QoYSwgYik7XCIsdC5zaGFwZSxlLnNoYXBlKTtyZXR1cm4gdGhpcy5jb21waWxlQW5kUnVuKG4sW3QsZV0pfSxvLnByb3RvdHlwZS5tYXg9ZnVuY3Rpb24odCxlKXtpZih0aGlzLnNob3VsZEV4ZWN1dGVPbkNQVShbdF0pKXJldHVybiB0aGlzLmNwdUJhY2tlbmQubWF4KHQsZSk7Q24oXCJtYXhcIixlLHQucmFuayk7dmFyIG49Ym4odC5zaGFwZSxlKSxyPW5bMF0sbz1rKG5bMV0pLGE9dC5hczJEKC0xLG8pO3JldHVybiB0aGlzLnJlZHVjZShhLFwibWF4XCIsYS5kdHlwZSkucmVzaGFwZShyKX0sby5wcm90b3R5cGUubWF4aW11bT1mdW5jdGlvbih0LGUpe2lmKHRoaXMuc2hvdWxkRXhlY3V0ZU9uQ1BVKFt0LGVdKSlyZXR1cm4gdGhpcy5jcHVCYWNrZW5kLm1heGltdW0odCxlKTt2YXIgbj1pKCkuZ2V0Qm9vbChcIldFQkdMX1BBQ0tfQklOQVJZX09QRVJBVElPTlNcIik/bmV3IExhKFwiXFxuICB2ZWM0IHJlc3VsdCA9IHZlYzQobWF4KGEsIGIpKTtcXG4gIHZlYzQgaXNOYU4gPSBtaW4odmVjNChpc25hbihhKSkgKyB2ZWM0KGlzbmFuKGIpKSwgdmVjNCgxLjApKTtcXG4gIFxcbiAgcmVzdWx0LnIgPSBpc05hTi5yID4gMC4gPyBOQU4gOiByZXN1bHQucjtcXG4gIHJlc3VsdC5nID0gaXNOYU4uZyA+IDAuID8gTkFOIDogcmVzdWx0Lmc7XFxuICByZXN1bHQuYiA9IGlzTmFOLmIgPiAwLiA/IE5BTiA6IHJlc3VsdC5iO1xcbiAgcmVzdWx0LmEgPSBpc05hTi5hID4gMC4gPyBOQU4gOiByZXN1bHQuYTtcXG5cXG4gIHJldHVybiByZXN1bHQ7XFxuXCIsdC5zaGFwZSxlLnNoYXBlKTpuZXcgQmEoXCJcXG4gIGlmIChpc25hbihhKSkgcmV0dXJuIGE7XFxuICBpZiAoaXNuYW4oYikpIHJldHVybiBiO1xcblxcbiAgcmV0dXJuIG1heChhLCBiKTtcXG5cIix0LnNoYXBlLGUuc2hhcGUpO3JldHVybiB0aGlzLmNvbXBpbGVBbmRSdW4obixbdCxlXSl9LG8ucHJvdG90eXBlLmFsbD1mdW5jdGlvbih0LGUpe0NuKFwiYWxsXCIsZSx0LnJhbmspO3ZhciBuPWJuKHQuc2hhcGUsZSkscj1uWzBdLG89ayhuWzFdKSxhPXQuYXMyRCgtMSxvKTtyZXR1cm4gdGhpcy5yZWR1Y2UoYSxcImFsbFwiLGEuZHR5cGUpLnJlc2hhcGUocil9LG8ucHJvdG90eXBlLmFueT1mdW5jdGlvbih0LGUpe0NuKFwiYW55XCIsZSx0LnJhbmspO3ZhciBuPWJuKHQuc2hhcGUsZSkscj1uWzBdLG89ayhuWzFdKSxhPXQuYXMyRCgtMSxvKTtyZXR1cm4gdGhpcy5yZWR1Y2UoYSxcImFueVwiLGEuZHR5cGUpLnJlc2hhcGUocil9LG8ucHJvdG90eXBlLnJlYWxEaXZpZGU9ZnVuY3Rpb24odCxlKXtpZihpKCkuZ2V0Qm9vbChcIldFQkdMX1BBQ0tfQklOQVJZX09QRVJBVElPTlNcIikpe3JldHVybiB0aGlzLnBhY2tlZEJpbmFyeU9wKHQsZSxcIlxcbiAgLy8gdmVjNCBvbmUgPSB2ZWM0KGVxdWFsKGEsIGIpKTtcXG4gIC8vIHJldHVybiBvbmUgKyAodmVjNCgxLjApIC0gb25lKSAqIGEgLyBiO1xcbiAgdmVjNCByZXN1bHQgPSBhIC8gYjtcXG4gIGlmKGEueCA9PSBiLngpIHtcXG4gICAgcmVzdWx0LnggPSAxLjtcXG4gIH1cXG4gIGlmKGEueSA9PSBiLnkpIHtcXG4gICAgcmVzdWx0LnkgPSAxLjtcXG4gIH1cXG4gIGlmKGEueiA9PSBiLnopIHtcXG4gICAgcmVzdWx0LnogPSAxLjtcXG4gIH1cXG4gIGlmKGEudyA9PSBiLncpIHtcXG4gICAgcmVzdWx0LncgPSAxLjtcXG4gIH1cXG5cXG4gIHJldHVybiByZXN1bHQ7XFxuXCIsXCJmbG9hdDMyXCIsITApfXZhciBuPW5ldyBCYShcIlxcbmlmIChhID09IGIpIHtcXG4gIHJldHVybiAxLjA7XFxufTtcXG5yZXR1cm4gYSAvIGI7XCIsdC5zaGFwZSxlLnNoYXBlKTtyZXR1cm4gdGhpcy5jb21waWxlQW5kUnVuKG4sW3QsZV0sXCJmbG9hdDMyXCIpfSxvLnByb3RvdHlwZS5mbG9vckRpdj1mdW5jdGlvbih0LGUpe2lmKGkoKS5nZXRCb29sKFwiV0VCR0xfUEFDS19CSU5BUllfT1BFUkFUSU9OU1wiKSlyZXR1cm4gdGhpcy5wYWNrZWRCaW5hcnlPcCh0LGUsXCJcXG4gIGl2ZWM0IGlhID0gcm91bmQoYSk7XFxuICBpdmVjNCBpYiA9IHJvdW5kKGIpO1xcbiAgYnZlYzQgY29uZCA9IG5vdEVxdWFsKGliLCBpdmVjNCgwKSk7XFxuICBpdmVjNCByZXN1bHQgPSBpdmVjNCgwKTtcXG4gIHZlYzQgcyA9IHNpZ24oYSkgKiBzaWduKGIpO1xcblxcbiAgLy8gV2luZG93cyAoRDNEKSB3YW50cyBndWFyYW50ZWVkIG5vbi16ZXJvIGludCBkaXZpc2lvbiBhdCBjb21waWxlLXRpbWUuXFxuICBpZiAoY29uZFswXSkge1xcbiAgICByZXN1bHRbMF0gPSBpZGl2KGlhWzBdLCBpYlswXSwgc1swXSk7XFxuICB9XFxuICBpZiAoY29uZFsxXSkge1xcbiAgICByZXN1bHRbMV0gPSBpZGl2KGlhWzFdLCBpYlsxXSwgc1sxXSk7XFxuICB9XFxuICBpZiAoY29uZFsyXSkge1xcbiAgICByZXN1bHRbMl0gPSBpZGl2KGlhWzJdLCBpYlsyXSwgc1syXSk7XFxuICB9XFxuICBpZiAoY29uZFszXSkge1xcbiAgICByZXN1bHRbM10gPSBpZGl2KGlhWzNdLCBpYlszXSwgc1szXSk7XFxuICB9XFxuICByZXR1cm4gdmVjNChyZXN1bHQpO1xcblwiLFwiaW50MzJcIik7dmFyIG49bmV3IEJhKFwiXFxuICBmbG9hdCBzID0gc2lnbihhKSAqIHNpZ24oYik7XFxuICBpbnQgaWEgPSByb3VuZChhKTtcXG4gIGludCBpYiA9IHJvdW5kKGIpO1xcbiAgaWYgKGliICE9IDApIHtcXG4gICAgLy8gV2luZG93cyAoRDNEKSB3YW50cyBndWFyYW50ZWVkIG5vbi16ZXJvIGludCBkaXZpc2lvbiBhdCBjb21waWxlLXRpbWUuXFxuICAgIHJldHVybiBmbG9hdChpZGl2KGlhLCBpYiwgcykpO1xcbiAgfSBlbHNlIHtcXG4gICAgcmV0dXJuIE5BTjtcXG4gIH1cXG5cIix0LnNoYXBlLGUuc2hhcGUpO3JldHVybiB0aGlzLmNvbXBpbGVBbmRSdW4obixbdCxlXSxcImludDMyXCIpfSxvLnByb3RvdHlwZS5hZGQ9ZnVuY3Rpb24odCxlKXtpZihcImNvbXBsZXg2NFwiPT09dC5kdHlwZSYmXCJjb21wbGV4NjRcIj09PWUuZHR5cGUpcmV0dXJuIHRoaXMuY29tcGxleFNlcGFyYWJsZUJpbmFyeU9wKHQsZSxGYSk7aWYodGhpcy5zaG91bGRFeGVjdXRlT25DUFUoW3QsZV0pKXJldHVybiB0aGlzLmNwdUJhY2tlbmQuYWRkKHQsZSk7dmFyIG49RHQodC5kdHlwZSxlLmR0eXBlKTtpZihpKCkuZ2V0Qm9vbChcIldFQkdMX1BBQ0tfQklOQVJZX09QRVJBVElPTlNcIikpcmV0dXJuIHRoaXMucGFja2VkQmluYXJ5T3AodCxlLEZhLG4pO3ZhciByPW5ldyBCYShGYSx0LnNoYXBlLGUuc2hhcGUpO3JldHVybiB0aGlzLmNvbXBpbGVBbmRSdW4ocixbdCxlXSxuKX0sby5wcm90b3R5cGUucGFja2VkVW5hcnlPcD1mdW5jdGlvbih0LGUsbil7dmFyIHI9bmV3IFhzKHQuc2hhcGUsZSk7cmV0dXJuIHRoaXMuY29tcGlsZUFuZFJ1bihyLFt0XSxuKX0sby5wcm90b3R5cGUucGFja2VkQmluYXJ5T3A9ZnVuY3Rpb24odCxlLG4scixvKXt2b2lkIDA9PT1vJiYobz0hMSk7dmFyIGE9bmV3IExhKG4sdC5zaGFwZSxlLnNoYXBlLG8pO3JldHVybiB0aGlzLmNvbXBpbGVBbmRSdW4oYSxbdCxlXSxyKX0sby5wcm90b3R5cGUuY29tcGxleFNlcGFyYWJsZUJpbmFyeU9wPWZ1bmN0aW9uKHQsZSxuKXt2YXIgcj10aGlzLG89dGhpcy50ZXhEYXRhLmdldCh0LmRhdGFJZCksYT10aGlzLnRleERhdGEuZ2V0KGUuZGF0YUlkKSxpPVtbby5jb21wbGV4VGVuc29ycy5yZWFsLGEuY29tcGxleFRlbnNvcnMucmVhbF0sW28uY29tcGxleFRlbnNvcnMuaW1hZyxhLmNvbXBsZXhUZW5zb3JzLmltYWddXS5tYXAoKGZ1bmN0aW9uKG8pe3ZhciBhPW9bMF0saT1vWzFdLHM9ci5tYWtlQ29tcGxleENvbXBvbmVudFRlbnNvckluZm8odCxhKSx1PXIubWFrZUNvbXBsZXhDb21wb25lbnRUZW5zb3JJbmZvKGUsaSksYz1uZXcgQmEobix0LnNoYXBlLGUuc2hhcGUpO3JldHVybiByLmNvbXBpbGVBbmRSdW4oYyxbcyx1XSxEdChhLmR0eXBlLGkuZHR5cGUpKX0pKSxzPWlbMF0sdT1pWzFdLGM9dGhpcy5jb21wbGV4KHMsdSk7cmV0dXJuIHMuZGlzcG9zZSgpLHUuZGlzcG9zZSgpLGN9LG8ucHJvdG90eXBlLm1ha2VDb21wbGV4Q29tcG9uZW50VGVuc29ySW5mbz1mdW5jdGlvbih0LGUpe3JldHVybntkYXRhSWQ6ZS5kYXRhSWQsZHR5cGU6ZS5kdHlwZSxzaGFwZTp0LnNoYXBlfX0sby5wcm90b3R5cGUuYWRkTj1mdW5jdGlvbih0KXtpZigxPT09dC5sZW5ndGgpcmV0dXJuIHRbMF07aWYodC5sZW5ndGg+aSgpLmdldChcIldFQkdMX01BWF9URVhUVVJFU19JTl9TSEFERVJcIikpe3ZhciBlPU1hdGguZmxvb3IodC5sZW5ndGgvMiksbj10aGlzLmFkZE4odC5zbGljZSgwLGUpKSxyPXRoaXMuYWRkTih0LnNsaWNlKGUpKTtyZXR1cm4gdGhpcy5hZGROKFtuLHJdKX12YXIgbz10Lm1hcCgoZnVuY3Rpb24odCl7cmV0dXJuIHQuZHR5cGV9KSkucmVkdWNlKChmdW5jdGlvbih0LGUpe3JldHVybiBEdCh0LGUpfSkpLGE9dC5tYXAoKGZ1bmN0aW9uKHQpe3JldHVybiB0LnNoYXBlfSkpLHM9aSgpLmdldEJvb2woXCJXRUJHTF9QQUNLXCIpP25ldyBvYSh0WzBdLnNoYXBlLGEpOm5ldyByYSh0WzBdLnNoYXBlLGEpO3JldHVybiB0aGlzLmNvbXBpbGVBbmRSdW4ocyx0LG8pfSxvLnByb3RvdHlwZS5zdWJ0cmFjdD1mdW5jdGlvbih0LGUpe2lmKFwiY29tcGxleDY0XCI9PT10LmR0eXBlJiZcImNvbXBsZXg2NFwiPT09ZS5kdHlwZSlyZXR1cm4gdGhpcy5jb21wbGV4U2VwYXJhYmxlQmluYXJ5T3AodCxlLF9hKTtpZih0aGlzLnNob3VsZEV4ZWN1dGVPbkNQVShbdCxlXSkpcmV0dXJuIHRoaXMuY3B1QmFja2VuZC5zdWJ0cmFjdCh0LGUpO3ZhciBuPUR0KHQuZHR5cGUsZS5kdHlwZSk7aWYoaSgpLmdldEJvb2woXCJXRUJHTF9QQUNLX0JJTkFSWV9PUEVSQVRJT05TXCIpKXJldHVybiB0aGlzLnBhY2tlZEJpbmFyeU9wKHQsZSxfYSx0LmR0eXBlKTt2YXIgcj1uZXcgQmEoX2EsdC5zaGFwZSxlLnNoYXBlKTtyZXR1cm4gdGhpcy5jb21waWxlQW5kUnVuKHIsW3QsZV0sbil9LG8ucHJvdG90eXBlLnBvdz1mdW5jdGlvbih0LGUpe3ZhciBuPWkoKS5nZXRCb29sKFwiV0VCR0xfUEFDS19CSU5BUllfT1BFUkFUSU9OU1wiKT9uZXcgTGEoXCJcXG4gIC8vIGlzTW9kUm91bmQxIGhhcyAxIGZvciBjb21wb25lbnRzIHdpdGggcm91bmQobW9kKGIsIDIuMCkpID09IDEsIDAgb3RoZXJ3aXNlLlxcbiAgdmVjNCBpc01vZFJvdW5kMSA9IHZlYzQoZXF1YWwocm91bmQobW9kKGIsIDIuMCkpLCBpdmVjNCgxKSkpO1xcbiAgdmVjNCBtdWx0aXBsaWVyID0gc2lnbihhKSAqIGlzTW9kUm91bmQxICsgKHZlYzQoMS4wKSAtIGlzTW9kUm91bmQxKTtcXG4gIHZlYzQgcmVzdWx0ID0gbXVsdGlwbGllciAqIHBvdyhhYnMoYSksIGIpO1xcblxcbiAgLy8gRW5zdXJlIHRoYXQgYV4wID0gMSwgaW5jbHVkaW5nIDBeMCA9IDEgYXMgdGhpcyBjb3JyZXNwb25kIHRvIFRGIGFuZCBKU1xcbiAgYnZlYzQgaXNFeHBaZXJvID0gZXF1YWwoYiwgdmVjNCgwLjApKTtcXG4gIHJlc3VsdC5yID0gaXNFeHBaZXJvLnIgPyAxLjAgOiByZXN1bHQucjtcXG4gIHJlc3VsdC5nID0gaXNFeHBaZXJvLmcgPyAxLjAgOiByZXN1bHQuZztcXG4gIHJlc3VsdC5iID0gaXNFeHBaZXJvLmIgPyAxLjAgOiByZXN1bHQuYjtcXG4gIHJlc3VsdC5hID0gaXNFeHBaZXJvLmEgPyAxLjAgOiByZXN1bHQuYTtcXG5cXG4gIHZlYzQgaXNOYU4gPSB2ZWM0KGxlc3NUaGFuKGEsIHZlYzQoMC4wKSkpICogdmVjNChsZXNzVGhhbihmbG9vcihiKSwgYikpO1xcbiAgXFxuICByZXN1bHQuciA9IGlzTmFOLnIgPiAwLiA/IE5BTiA6IHJlc3VsdC5yO1xcbiAgcmVzdWx0LmcgPSBpc05hTi5nID4gMC4gPyBOQU4gOiByZXN1bHQuZztcXG4gIHJlc3VsdC5iID0gaXNOYU4uYiA+IDAuID8gTkFOIDogcmVzdWx0LmI7XFxuICByZXN1bHQuYSA9IGlzTmFOLmEgPiAwLiA/IE5BTiA6IHJlc3VsdC5hO1xcblxcbiAgcmV0dXJuIHJlc3VsdDtcXG5cIix0LnNoYXBlLGUuc2hhcGUpOm5ldyBCYShcIlxcbmlmKGEgPCAwLjAgJiYgZmxvb3IoYikgPCBiKXtcXG4gIHJldHVybiBOQU47XFxufVxcbmlmIChiID09IDAuMCkge1xcbiAgcmV0dXJuIDEuMDtcXG59XFxucmV0dXJuIChyb3VuZChtb2QoYiwgMi4wKSkgIT0gMSkgP1xcbiAgICBwb3coYWJzKGEpLCBiKSA6IHNpZ24oYSkgKiBwb3coYWJzKGEpLCBiKTtcXG5cIix0LnNoYXBlLGUuc2hhcGUpLHI9RHQodC5kdHlwZSxlLmR0eXBlKTtyZXR1cm4gdGhpcy5jb21waWxlQW5kUnVuKG4sW3QsZV0scil9LG8ucHJvdG90eXBlLmNlaWw9ZnVuY3Rpb24odCl7aWYodGhpcy5zaG91bGRFeGVjdXRlT25DUFUoW3RdKSlyZXR1cm4gdGhpcy5jcHVCYWNrZW5kLmNlaWwodCk7aWYoaSgpLmdldEJvb2woXCJXRUJHTF9QQUNLX1VOQVJZX09QRVJBVElPTlNcIikpcmV0dXJuIHRoaXMucGFja2VkVW5hcnlPcCh0LE5zLHQuZHR5cGUpO3ZhciBlPW5ldyBDcyh0LnNoYXBlLE5zKTtyZXR1cm4gdGhpcy5jb21waWxlQW5kUnVuKGUsW3RdKX0sby5wcm90b3R5cGUuZmxvb3I9ZnVuY3Rpb24odCl7aWYodGhpcy5zaG91bGRFeGVjdXRlT25DUFUoW3RdKSlyZXR1cm4gdGhpcy5jcHVCYWNrZW5kLmZsb29yKHQpO2lmKGkoKS5nZXRCb29sKFwiV0VCR0xfUEFDS19VTkFSWV9PUEVSQVRJT05TXCIpKXJldHVybiB0aGlzLnBhY2tlZFVuYXJ5T3AodCxGcyx0LmR0eXBlKTt2YXIgZT1uZXcgQ3ModC5zaGFwZSxGcyk7cmV0dXJuIHRoaXMuY29tcGlsZUFuZFJ1bihlLFt0XSl9LG8ucHJvdG90eXBlLnNpZ249ZnVuY3Rpb24odCl7dmFyIGU9bmV3IENzKHQuc2hhcGUsXCJcXG4gIGlmIChpc25hbih4KSkgeyByZXR1cm4gMC4wOyB9XFxuICByZXR1cm4gc2lnbih4KTtcXG5cIik7cmV0dXJuIHRoaXMuY29tcGlsZUFuZFJ1bihlLFt0XSl9LG8ucHJvdG90eXBlLmlzTmFOPWZ1bmN0aW9uKHQpe3ZhciBlPW5ldyBDcyh0LnNoYXBlLFwicmV0dXJuIGZsb2F0KGlzbmFuKHgpKTtcIik7cmV0dXJuIHRoaXMuY29tcGlsZUFuZFJ1bihlLFt0XSxcImJvb2xcIil9LG8ucHJvdG90eXBlLmlzSW5mPWZ1bmN0aW9uKHQpe3ZhciBlPW5ldyBDcyh0LnNoYXBlLFwicmV0dXJuIGZsb2F0KGlzaW5mKHgpKTtcIik7cmV0dXJuIHRoaXMuY29tcGlsZUFuZFJ1bihlLFt0XSxcImJvb2xcIil9LG8ucHJvdG90eXBlLmlzRmluaXRlPWZ1bmN0aW9uKHQpe3ZhciBlPW5ldyBDcyh0LnNoYXBlLFwicmV0dXJuIGZsb2F0KCFpc25hbih4KSAmJiAhaXNpbmYoeCkpO1wiKTtyZXR1cm4gdGhpcy5jb21waWxlQW5kUnVuKGUsW3RdLFwiYm9vbFwiKX0sby5wcm90b3R5cGUucm91bmQ9ZnVuY3Rpb24odCl7dmFyIGU9bmV3IENzKHQuc2hhcGUsXCJcXG4gIC8vIE9wZW5HTCBFUyBkb2VzIG5vdCBzdXBwb3J0IHJvdW5kIGZ1bmN0aW9uLlxcbiAgLy8gVGhlIGFsZ29yaXRobSBpcyBiYXNlZCBvbiBiYW5rZXIncyByb3VuZGluZy5cXG4gIGZsb2F0IGJhc2UgPSBmbG9vcih4KTtcXG4gIGlmICgoeCAtIGJhc2UpIDwgMC41KSB7XFxuICAgIHJldHVybiBmbG9vcih4KTtcXG4gIH0gZWxzZSBpZiAoKHggLSBiYXNlKSA+IDAuNSkge1xcbiAgICByZXR1cm4gY2VpbCh4KTtcXG4gIH0gZWxzZSB7XFxuICAgIGlmIChtb2QoYmFzZSwgMi4wKSA9PSAwLjApIHtcXG4gICAgICByZXR1cm4gYmFzZTtcXG4gICAgfSBlbHNlIHtcXG4gICAgICByZXR1cm4gYmFzZSArIDEuMDtcXG4gICAgfVxcbiAgfVxcblwiKTtyZXR1cm4gdGhpcy5jb21waWxlQW5kUnVuKGUsW3RdKX0sby5wcm90b3R5cGUuZXhwPWZ1bmN0aW9uKHQpe2lmKHRoaXMuc2hvdWxkRXhlY3V0ZU9uQ1BVKFt0XSkpcmV0dXJuIHRoaXMuY3B1QmFja2VuZC5leHAodCk7aWYoaSgpLmdldEJvb2woXCJXRUJHTF9QQUNLX1VOQVJZX09QRVJBVElPTlNcIikpcmV0dXJuIHRoaXMucGFja2VkVW5hcnlPcCh0LF9zLHQuZHR5cGUpO3ZhciBlPW5ldyBDcyh0LnNoYXBlLF9zKTtyZXR1cm4gdGhpcy5jb21waWxlQW5kUnVuKGUsW3RdKX0sby5wcm90b3R5cGUuZXhwbTE9ZnVuY3Rpb24odCl7aWYodGhpcy5zaG91bGRFeGVjdXRlT25DUFUoW3RdKSlyZXR1cm4gdGhpcy5jcHVCYWNrZW5kLmV4cG0xKHQpO2lmKGkoKS5nZXRCb29sKFwiV0VCR0xfUEFDS19VTkFSWV9PUEVSQVRJT05TXCIpKXJldHVybiB0aGlzLnBhY2tlZFVuYXJ5T3AodCxPcyx0LmR0eXBlKTt2YXIgZT1uZXcgQ3ModC5zaGFwZSxPcyk7cmV0dXJuIHRoaXMuY29tcGlsZUFuZFJ1bihlLFt0XSl9LG8ucHJvdG90eXBlLnNvZnRtYXg9ZnVuY3Rpb24odCxlKXt2YXIgbj1PKFtlXSx0LnNoYXBlKSxyPXRoaXMubWF4KHQsbiksbz13bihyLnNoYXBlLG4pLGE9dGhpcy5zdWJ0cmFjdCh0LHIucmVzaGFwZShvKSksaT10aGlzLmV4cChhKSxzPXRoaXMuc3VtKGksbikucmVzaGFwZShvKTtyZXR1cm4gdGhpcy5yZWFsRGl2aWRlKGkscyl9LG8ucHJvdG90eXBlLmxvZz1mdW5jdGlvbih0KXtpZih0aGlzLnNob3VsZEV4ZWN1dGVPbkNQVShbdF0pKXJldHVybiB0aGlzLmNwdUJhY2tlbmQubG9nKHQpO2lmKGkoKS5nZXRCb29sKFwiV0VCR0xfUEFDS19VTkFSWV9PUEVSQVRJT05TXCIpKXJldHVybiB0aGlzLnBhY2tlZFVuYXJ5T3AodCxcIlxcbiAgdmVjNCByZXN1bHQgPSBsb2coeCk7XFxuICB2ZWM0IGlzTmFOID0gdmVjNChsZXNzVGhhbih4LCB2ZWM0KDAuMCkpKTtcXG4gIHJlc3VsdC5yID0gaXNOYU4uciA9PSAxLjAgPyBOQU4gOiByZXN1bHQucjtcXG4gIHJlc3VsdC5nID0gaXNOYU4uZyA9PSAxLjAgPyBOQU4gOiByZXN1bHQuZztcXG4gIHJlc3VsdC5iID0gaXNOYU4uYiA9PSAxLjAgPyBOQU4gOiByZXN1bHQuYjtcXG4gIHJlc3VsdC5hID0gaXNOYU4uYSA9PSAxLjAgPyBOQU4gOiByZXN1bHQuYTtcXG5cXG4gIHJldHVybiByZXN1bHQ7XFxuXCIsdC5kdHlwZSk7dmFyIGU9bmV3IENzKHQuc2hhcGUsXCJpZiAoeCA8IDAuMCkgcmV0dXJuIE5BTjtcXG4gIHJldHVybiBsb2coeCk7XCIpO3JldHVybiB0aGlzLmNvbXBpbGVBbmRSdW4oZSxbdF0pfSxvLnByb3RvdHlwZS5sb2cxcD1mdW5jdGlvbih0KXt2YXIgZT1uZXcgQ3ModC5zaGFwZSxcInJldHVybiBsb2coMS4wICsgeCk7XCIpO3JldHVybiB0aGlzLmNvbXBpbGVBbmRSdW4oZSxbdF0pfSxvLnByb3RvdHlwZS5zcXJ0PWZ1bmN0aW9uKHQpe3ZhciBlPW5ldyBDcyh0LnNoYXBlLFwicmV0dXJuIHNxcnQoeCk7XCIpO3JldHVybiB0aGlzLmNvbXBpbGVBbmRSdW4oZSxbdF0pfSxvLnByb3RvdHlwZS5yc3FydD1mdW5jdGlvbih0KXtpZih0aGlzLnNob3VsZEV4ZWN1dGVPbkNQVShbdF0pKXJldHVybiB0aGlzLmNwdUJhY2tlbmQucnNxcnQodCk7dmFyIGU9bmV3IENzKHQuc2hhcGUsXCJyZXR1cm4gaW52ZXJzZXNxcnQoeCk7XCIpO3JldHVybiB0aGlzLmNvbXBpbGVBbmRSdW4oZSxbdF0pfSxvLnByb3RvdHlwZS5yZWNpcHJvY2FsPWZ1bmN0aW9uKHQpe3ZhciBlPW5ldyBDcyh0LnNoYXBlLFwicmV0dXJuIDEuMCAvIHg7XCIpO3JldHVybiB0aGlzLmNvbXBpbGVBbmRSdW4oZSxbdF0pfSxvLnByb3RvdHlwZS5yZWx1PWZ1bmN0aW9uKHQpe3ZhciBlO3JldHVybiBlPWkoKS5nZXRCb29sKFwiV0VCR0xfUEFDS1wiKT9uZXcgWHModC5zaGFwZSxxcyk6bmV3IENzKHQuc2hhcGUsa3MpLHRoaXMuY29tcGlsZUFuZFJ1bihlLFt0XSl9LG8ucHJvdG90eXBlLnJlbHU2PWZ1bmN0aW9uKHQpe3ZhciBlO3JldHVybiBlPWkoKS5nZXRCb29sKFwiV0VCR0xfUEFDS1wiKT9uZXcgWHModC5zaGFwZSxLcyk6bmV3IENzKHQuc2hhcGUsU3MpLHRoaXMuY29tcGlsZUFuZFJ1bihlLFt0XSl9LG8ucHJvdG90eXBlLnByZWx1PWZ1bmN0aW9uKHQsZSl7dmFyIG49aSgpLmdldEJvb2woXCJXRUJHTF9QQUNLX0JJTkFSWV9PUEVSQVRJT05TXCIpP25ldyBMYShQYSx0LnNoYXBlLGUuc2hhcGUpOm5ldyBCYShNYSx0LnNoYXBlLGUuc2hhcGUpO3JldHVybiB0aGlzLmNvbXBpbGVBbmRSdW4obixbdCxlXSl9LG8ucHJvdG90eXBlLmVsdT1mdW5jdGlvbih0KXtpZihpKCkuZ2V0Qm9vbChcIldFQkdMX1BBQ0tfVU5BUllfT1BFUkFUSU9OU1wiKSlyZXR1cm4gdGhpcy5wYWNrZWRVbmFyeU9wKHQsanMsdC5kdHlwZSk7dmFyIGU9bmV3IENzKHQuc2hhcGUsQXMpO3JldHVybiB0aGlzLmNvbXBpbGVBbmRSdW4oZSxbdF0pfSxvLnByb3RvdHlwZS5lbHVEZXI9ZnVuY3Rpb24odCxlKXt2YXIgbj1pKCkuZ2V0Qm9vbChcIldFQkdMX1BBQ0tfQklOQVJZX09QRVJBVElPTlNcIik/bmV3IExhKFwiXFxuICB2ZWM0IGJHVEVaZXJvID0gdmVjNChncmVhdGVyVGhhbkVxdWFsKGIsIHZlYzQoMC4pKSk7XFxuICByZXR1cm4gKGJHVEVaZXJvICogYSkgKyAoKHZlYzQoMS4wKSAtIGJHVEVaZXJvKSAqIChhICogKGIgKyB2ZWM0KDEuMCkpKSk7XFxuXCIsdC5zaGFwZSxlLnNoYXBlKTpuZXcgQmEoXCJyZXR1cm4gKGIgPj0gMS4wKSA/IGEgOiBhICogKGIgKyAxLjApO1wiLHQuc2hhcGUsZS5zaGFwZSk7cmV0dXJuIHRoaXMuY29tcGlsZUFuZFJ1bihuLFt0LGVdKX0sby5wcm90b3R5cGUuc2VsdT1mdW5jdGlvbih0KXt2YXIgZT1uZXcgQ3ModC5zaGFwZSxEcyk7cmV0dXJuIHRoaXMuY29tcGlsZUFuZFJ1bihlLFt0XSl9LG8ucHJvdG90eXBlLmludD1mdW5jdGlvbih0KXt2YXIgZT1uZXcgQ3ModC5zaGFwZSxcInJldHVybiBmbG9hdChpbnQoeCkpO1wiKTtyZXR1cm4gdGhpcy5jb21waWxlQW5kUnVuKGUsW3RdLFwiaW50MzJcIil9LG8ucHJvdG90eXBlLmNsaXA9ZnVuY3Rpb24odCxlLG4pe3ZhciByLG89KHI9aSgpLmdldEJvb2woXCJXRUJHTF9QQUNLX0NMSVBcIik/bmV3IFVhKHQuc2hhcGUpOm5ldyBXYSh0LnNoYXBlKSkuZ2V0Q3VzdG9tU2V0dXBGdW5jKGUsbik7cmV0dXJuIHRoaXMuY29tcGlsZUFuZFJ1bihyLFt0XSxudWxsLG8pfSxvLnByb3RvdHlwZS5hYnM9ZnVuY3Rpb24odCl7aWYodGhpcy5zaG91bGRFeGVjdXRlT25DUFUoW3RdKSlyZXR1cm4gdGhpcy5jcHVCYWNrZW5kLmFicyh0KTtpZihpKCkuZ2V0Qm9vbChcIldFQkdMX1BBQ0tfVU5BUllfT1BFUkFUSU9OU1wiKSlyZXR1cm4gdGhpcy5wYWNrZWRVbmFyeU9wKHQsSXMsdC5kdHlwZSk7dmFyIGU9bmV3IENzKHQuc2hhcGUsSXMpO3JldHVybiB0aGlzLmNvbXBpbGVBbmRSdW4oZSxbdF0pfSxvLnByb3RvdHlwZS5jb21wbGV4QWJzPWZ1bmN0aW9uKHQpe3ZhciBlPXRoaXMudGV4RGF0YS5nZXQodC5kYXRhSWQpLG49bmV3IFZhKHQuc2hhcGUpLHI9W3RoaXMubWFrZUNvbXBsZXhDb21wb25lbnRUZW5zb3JJbmZvKHQsZS5jb21wbGV4VGVuc29ycy5yZWFsKSx0aGlzLm1ha2VDb21wbGV4Q29tcG9uZW50VGVuc29ySW5mbyh0LGUuY29tcGxleFRlbnNvcnMuaW1hZyldO3JldHVybiB0aGlzLmNvbXBpbGVBbmRSdW4obixyKX0sby5wcm90b3R5cGUuc2lnbW9pZD1mdW5jdGlvbih0KXt2YXIgZT1uZXcgQ3ModC5zaGFwZSxcInJldHVybiAxLjAgLyAoMS4wICsgZXhwKC0xLjAgKiB4KSk7XCIpO3JldHVybiB0aGlzLmNvbXBpbGVBbmRSdW4oZSxbdF0pfSxvLnByb3RvdHlwZS5zb2Z0cGx1cz1mdW5jdGlvbih0KXt2YXIgZT1uZXcgQ3ModC5zaGFwZSxcIlxcbiAgZmxvYXQgZXBzaWxvbiA9IDEuMTkyMDkyODk1NTA3ODEyNWUtNztcXG4gIGZsb2F0IHRocmVzaG9sZCA9IGxvZyhlcHNpbG9uKSArIDIuMDtcXG5cXG4gIGJvb2wgdG9vX2xhcmdlID0geCA+IC10aHJlc2hvbGQ7XFxuICBib29sIHRvb19zbWFsbCA9IHggPCB0aHJlc2hvbGQ7XFxuXFxuICBmbG9hdCByZXN1bHQ7XFxuICBmbG9hdCBleHBfeCA9IGV4cCh4KTtcXG5cXG4gIGlmICh0b29fbGFyZ2Upe1xcbiAgICByZXN1bHQgPSB4O1xcbiAgfVxcbiAgZWxzZSBpZiAodG9vX3NtYWxsKXtcXG4gICAgcmVzdWx0ID0gZXhwX3g7XFxuICB9XFxuICBlbHNle1xcbiAgICByZXN1bHQgPSBsb2coZXhwX3ggKyAxLjApO1xcbiAgfVxcbiAgcmV0dXJuIHJlc3VsdDtcXG5cIik7cmV0dXJuIHRoaXMuY29tcGlsZUFuZFJ1bihlLFt0XSl9LG8ucHJvdG90eXBlLnNpbj1mdW5jdGlvbih0KXt2YXIgZT1uZXcgQ3ModC5zaGFwZSxNcyk7cmV0dXJuIHRoaXMuY29tcGlsZUFuZFJ1bihlLFt0XSl9LG8ucHJvdG90eXBlLmNvcz1mdW5jdGlvbih0KXt2YXIgZT1uZXcgQ3ModC5zaGFwZSxCcyk7cmV0dXJuIHRoaXMuY29tcGlsZUFuZFJ1bihlLFt0XSl9LG8ucHJvdG90eXBlLnRhbj1mdW5jdGlvbih0KXt2YXIgZT1uZXcgQ3ModC5zaGFwZSxcInJldHVybiB0YW4oeCk7XCIpO3JldHVybiB0aGlzLmNvbXBpbGVBbmRSdW4oZSxbdF0pfSxvLnByb3RvdHlwZS5hc2luPWZ1bmN0aW9uKHQpe3ZhciBlPW5ldyBDcyh0LnNoYXBlLFBzKTtyZXR1cm4gdGhpcy5jb21waWxlQW5kUnVuKGUsW3RdKX0sby5wcm90b3R5cGUuYWNvcz1mdW5jdGlvbih0KXt2YXIgZT1uZXcgQ3ModC5zaGFwZSxMcyk7cmV0dXJuIHRoaXMuY29tcGlsZUFuZFJ1bihlLFt0XSl9LG8ucHJvdG90eXBlLmF0YW49ZnVuY3Rpb24odCl7dmFyIGU9bmV3IENzKHQuc2hhcGUsV3MpO3JldHVybiB0aGlzLmNvbXBpbGVBbmRSdW4oZSxbdF0pfSxvLnByb3RvdHlwZS5hdGFuMj1mdW5jdGlvbih0LGUpe3ZhciBuPWkoKS5nZXRCb29sKFwiV0VCR0xfUEFDS19CSU5BUllfT1BFUkFUSU9OU1wiKT9uZXcgTGEoXCJcXG4gIHZlYzQgcmVzdWx0ID0gYXRhbihhLCBiKTtcXG4gIHZlYzQgaXNOYU4gPSBtaW4odmVjNChpc25hbihhKSkgKyB2ZWM0KGlzbmFuKGIpKSwgdmVjNCgxLjApKTtcXG4gIFxcbiAgcmVzdWx0LnIgPSBpc05hTi5yID4gMC4gPyBOQU4gOiByZXN1bHQucjtcXG4gIHJlc3VsdC5nID0gaXNOYU4uZyA+IDAuID8gTkFOIDogcmVzdWx0Lmc7XFxuICByZXN1bHQuYiA9IGlzTmFOLmIgPiAwLiA/IE5BTiA6IHJlc3VsdC5iO1xcbiAgcmVzdWx0LmEgPSBpc05hTi5hID4gMC4gPyBOQU4gOiByZXN1bHQuYTtcXG5cXG4gIHJldHVybiByZXN1bHQ7XFxuXCIsdC5zaGFwZSxlLnNoYXBlKTpuZXcgQmEoXCJcXG4gIGlmIChpc25hbihhKSkgcmV0dXJuIGE7XFxuICBpZiAoaXNuYW4oYikpIHJldHVybiBiO1xcblxcbiAgcmV0dXJuIGF0YW4oYSwgYik7XFxuXCIsdC5zaGFwZSxlLnNoYXBlKTtyZXR1cm4gdGhpcy5jb21waWxlQW5kUnVuKG4sW3QsZV0pfSxvLnByb3RvdHlwZS5zaW5oPWZ1bmN0aW9uKHQpe3ZhciBlPW5ldyBDcyh0LnNoYXBlLFwiXFxuICBmbG9hdCBlMnggPSBleHAoeCk7XFxuICByZXR1cm4gKGUyeCAtIDEuMCAvIGUyeCkgLyAyLjA7XFxuXCIpO3JldHVybiB0aGlzLmNvbXBpbGVBbmRSdW4oZSxbdF0pfSxvLnByb3RvdHlwZS5jb3NoPWZ1bmN0aW9uKHQpe3ZhciBlPW5ldyBDcyh0LnNoYXBlLFwiXFxuICBmbG9hdCBlMnggPSBleHAoLXgpO1xcbiAgcmV0dXJuIChlMnggKyAxLjAgLyBlMngpIC8gMi4wO1xcblwiKTtyZXR1cm4gdGhpcy5jb21waWxlQW5kUnVuKGUsW3RdKX0sby5wcm90b3R5cGUudGFuaD1mdW5jdGlvbih0KXt2YXIgZT1uZXcgQ3ModC5zaGFwZSxcIlxcbiAgZmxvYXQgZTJ4ID0gZXhwKC0yLjAgKiBhYnMoeCkpO1xcbiAgcmV0dXJuIHNpZ24oeCkgKiAoMS4wIC0gZTJ4KSAvICgxLjAgKyBlMngpO1xcblwiKTtyZXR1cm4gdGhpcy5jb21waWxlQW5kUnVuKGUsW3RdKX0sby5wcm90b3R5cGUuYXNpbmg9ZnVuY3Rpb24odCl7dmFyIGU9bmV3IENzKHQuc2hhcGUsVXMpO3JldHVybiB0aGlzLmNvbXBpbGVBbmRSdW4oZSxbdF0pfSxvLnByb3RvdHlwZS5hY29zaD1mdW5jdGlvbih0KXt2YXIgZT1uZXcgQ3ModC5zaGFwZSxWcyk7cmV0dXJuIHRoaXMuY29tcGlsZUFuZFJ1bihlLFt0XSl9LG8ucHJvdG90eXBlLmF0YW5oPWZ1bmN0aW9uKHQpe3ZhciBlPW5ldyBDcyh0LnNoYXBlLHpzKTtyZXR1cm4gdGhpcy5jb21waWxlQW5kUnVuKGUsW3RdKX0sby5wcm90b3R5cGUuZXJmPWZ1bmN0aW9uKHQpe3ZhciBlPW5ldyBDcyh0LnNoYXBlLCdcXG4gIC8vIEVycm9yIGZ1bmN0aW9uIGlzIGNhbGN1bGF0ZWQgYXBwcm94aW1hdGVseSB3aXRoIGVsZW1lbnRhcnkgZnVuY3Rpb24uXFxuICAvLyBTZWUgXCJIYW5kYm9vayBvZiBNYXRoZW1hdGljYWwgRnVuY3Rpb25zIHdpdGggRm9ybXVsYXMsXFxuICAvLyBHcmFwaHMsIGFuZCBNYXRoZW1hdGljYWwgVGFibGVzXCIsIEFicmFtb3dpdHogYW5kIFN0ZWd1bi5cXG4gIGZsb2F0IHAgPSAwLjMyNzU5MTE7XFxuICBmbG9hdCBhMSA9IDAuMjU0ODI5NTkyO1xcbiAgZmxvYXQgYTIgPSAtMC4yODQ0OTY3MzY7XFxuICBmbG9hdCBhMyA9IDEuNDIxNDEzNzQxO1xcbiAgZmxvYXQgYTQgPSAtMS40NTMxNTIwMjc7XFxuICBmbG9hdCBhNSA9IDEuMDYxNDA1NDI5O1xcblxcbiAgZmxvYXQgc2lnbiA9IHNpZ24oeCk7XFxuICB4ID0gYWJzKHgpO1xcbiAgZmxvYXQgdCA9IDEuMCAvICgxLjAgKyBwICogeCk7XFxuICByZXR1cm4gc2lnbiAqICgxLjAgLSAoKCgoKGE1KnQgKyBhNCkqdCkgKyBhMykqdCArIGEyKSp0ICsgYTEpKnQqZXhwKC14KngpKTtcXG4nKTtyZXR1cm4gdGhpcy5jb21waWxlQW5kUnVuKGUsW3RdKX0sby5wcm90b3R5cGUuc3RlcD1mdW5jdGlvbih0LGUpe3ZhciBuPW5ldyBDcyh0LnNoYXBlLGZ1bmN0aW9uKHQpe3JldHVybiB2b2lkIDA9PT10JiYodD0wKSxFcytcIlxcbiAgICByZXR1cm4geCA+IDAuMCA/IDEuMCA6IGZsb2F0KFwiK3QrXCIpO1xcbiAgXCJ9KGUpKTtyZXR1cm4gdGhpcy5jb21waWxlQW5kUnVuKG4sW3RdKX0sby5wcm90b3R5cGUuY29udjJkQnlNYXRNdWw9ZnVuY3Rpb24odCxlLG4scixvLGEpe3ZhciBzPXQuc2hhcGUsdT10aGlzLnRleERhdGEuZ2V0KHQuZGF0YUlkKSxjPW4uaW5DaGFubmVscyxsPXNbMF0qc1sxXSpzWzJdLGg9bi5vdXRDaGFubmVscyxmPVwiY2hhbm5lbHNMYXN0XCI9PT1uLmRhdGFGb3JtYXQsZD0oMT09PWx8fDE9PT1oKSYmYz4xZTMscD1zWzJdJTIhPTAmJiEhdS5pc1BhY2tlZDtpZihkfHwhaSgpLmdldEJvb2woXCJXRUJHTF9MQVpJTFlfVU5QQUNLXCIpfHwhaSgpLmdldEJvb2woXCJXRUJHTF9QQUNLX0JJTkFSWV9PUEVSQVRJT05TXCIpfHwhcCl7dmFyIHY9Zj9zWzBdKnNbMV0qc1syXTpzWzBdKnNbMl0qc1szXSxtPXRoaXMucmVzaGFwZSh0LFsxLHYsbi5pbkNoYW5uZWxzXSksZz10aGlzLnJlc2hhcGUoZSxbMSxuLmluQ2hhbm5lbHMsbi5vdXRDaGFubmVsc10pO3JldHVybiB0aGlzLnJlc2hhcGUodGhpcy5mdXNlZEJhdGNoTWF0TXVsKHthOm0sYjpnLHRyYW5zcG9zZUE6ITEsdHJhbnNwb3NlQjohMSxiaWFzOnIsYWN0aXZhdGlvbjpvLHByZWx1QWN0aXZhdGlvbldlaWdodHM6YX0pLG4ub3V0U2hhcGUpfXZhciB5PWY/c1swXSpzWzFdKihzWzJdKzEpOnNbMF0qc1syXSooc1szXSsxKSx4PXtkYXRhSWQ6dC5kYXRhSWQsc2hhcGU6WzEseSxuLmluQ2hhbm5lbHNdLGR0eXBlOnQuZHR5cGV9LGI9dS5zaGFwZTt1LnNoYXBlPXUuc2hhcGUuc2xpY2UoKSx1LnNoYXBlW3Uuc2hhcGUubGVuZ3RoLTJdKyssQyhfZSh1LnNoYXBlLHguc2hhcGUpLChmdW5jdGlvbigpe3JldHVyblwicGFja2VkIHJlc2hhcGUgXCIrdS5zaGFwZStcIiB0byBcIit4LnNoYXBlK1wiIGlzbid0IGZyZWVcIn0pKTt2YXIgdz10aGlzLnJlc2hhcGUoZSxbMSxuLmluQ2hhbm5lbHMsbi5vdXRDaGFubmVsc10pLEU9dGhpcy5mdXNlZEJhdGNoTWF0TXVsKHthOngsYjp3LHRyYW5zcG9zZUE6ITEsdHJhbnNwb3NlQjohMSxiaWFzOnIsYWN0aXZhdGlvbjpvLHByZWx1QWN0aXZhdGlvbldlaWdodHM6YX0pLFI9dGhpcy50ZXhEYXRhLmdldChFLmRhdGFJZCk7cmV0dXJuIEMoUi5pc1BhY2tlZCwoZnVuY3Rpb24oKXtyZXR1cm5cImJhdGNoTWF0TXVsIHJlc3VsdCBpcyBleHBlY3RlZCB0byBiZSBwYWNrZWRcIn0pKSx1LnNoYXBlPWIsUi5zaGFwZT1uLm91dFNoYXBlLEx0Lm1ha2VUZW5zb3JGcm9tRGF0YUlkKEUuZGF0YUlkLG4ub3V0U2hhcGUsRS5kdHlwZSl9LG8ucHJvdG90eXBlLmNvbnYyZFdpdGhJbTJSb3c9ZnVuY3Rpb24odCxlLG4scixvLGEpe3ZhciBpPW4uZmlsdGVyV2lkdGgscz1uLmZpbHRlckhlaWdodCx1PW4uaW5DaGFubmVscyxjPW4ub3V0V2lkdGgsbD1uLm91dEhlaWdodCxoPVwiY2hhbm5lbHNMYXN0XCI9PT1uLmRhdGFGb3JtYXQsZj1pKnMqdSxkPWwqYyxwPVtmLGRdLHY9dC5zcXVlZXplKFswXSksbT1lLnJlc2hhcGUoWzEsZiwtMV0pLGc9bmV3IExpKHAsdi5zaGFwZSxuKSx5PXRoaXMuY29tcGlsZUFuZFJ1bihnLFt2XSkucmVzaGFwZShbMSxwWzBdLHBbMV1dKSx4PW51bGwhPXIsYj1udWxsIT1hLHc9bz9RcyhvLCEwKTpudWxsLEM9bmV3IEhpKHkuc2hhcGUsWzEsZCxuLm91dENoYW5uZWxzXSwhMCwhMSx4LHcsYiksRT1beSxtXTtyJiZFLnB1c2gociksYiYmRS5wdXNoKGEpO3ZhciBSPXRoaXMuY29tcGlsZUFuZFJ1bihDLEUpO3JldHVybiBoP1IucmVzaGFwZShbMSxsLGMsbi5vdXRDaGFubmVsc10pOlIucmVzaGFwZShbMSxuLm91dENoYW5uZWxzLGwsY10pfSxvLnByb3RvdHlwZS5mdXNlZENvbnYyZD1mdW5jdGlvbih0KXt2YXIgZT10LmlucHV0LG49dC5maWx0ZXIscj10LmNvbnZJbmZvLG89dC5iaWFzLGE9dC5hY3RpdmF0aW9uLHM9dC5wcmVsdUFjdGl2YXRpb25XZWlnaHRzO2lmKDE9PT1yLmZpbHRlckhlaWdodCYmMT09PXIuZmlsdGVyV2lkdGgmJjE9PT1yLmRpbGF0aW9uSGVpZ2h0JiYxPT09ci5kaWxhdGlvbldpZHRoJiYxPT09ci5zdHJpZGVIZWlnaHQmJjE9PT1yLnN0cmlkZVdpZHRoJiYoXCJTQU1FXCI9PT1yLnBhZEluZm8udHlwZXx8XCJWQUxJRFwiPT09ci5wYWRJbmZvLnR5cGUpKXJldHVybiB0aGlzLmNvbnYyZEJ5TWF0TXVsKGUsbixyLG8sYSxzKTtpZihpKCkuZ2V0Qm9vbChcIldFQkdMX0NPTlZfSU0yQ09MXCIpJiYxPT09ZS5zaGFwZVswXSlyZXR1cm4gdGhpcy5jb252MmRXaXRoSW0yUm93KGUsbixyLG8sYSxzKTt2YXIgdT1udWxsIT1vLGM9bnVsbCE9cyxsPWE/UXMoYSwhMSk6bnVsbCxoPW5ldyBRYShyLHUsbCxjKSxmPVtlLG5dO3JldHVybiBvJiZmLnB1c2gobykscyYmZi5wdXNoKHMpLHRoaXMuY29tcGlsZUFuZFJ1bihoLGYpfSxvLnByb3RvdHlwZS5jb252MmQ9ZnVuY3Rpb24odCxlLG4pe2lmKDE9PT1uLmZpbHRlckhlaWdodCYmMT09PW4uZmlsdGVyV2lkdGgmJjE9PT1uLmRpbGF0aW9uSGVpZ2h0JiYxPT09bi5kaWxhdGlvbldpZHRoJiYxPT09bi5zdHJpZGVIZWlnaHQmJjE9PT1uLnN0cmlkZVdpZHRoJiYoXCJTQU1FXCI9PT1uLnBhZEluZm8udHlwZXx8XCJWQUxJRFwiPT09bi5wYWRJbmZvLnR5cGUpKXJldHVybiB0aGlzLmNvbnYyZEJ5TWF0TXVsKHQsZSxuKTtpZihpKCkuZ2V0Qm9vbChcIldFQkdMX0NPTlZfSU0yQ09MXCIpJiYxPT09dC5zaGFwZVswXSlyZXR1cm4gdGhpcy5jb252MmRXaXRoSW0yUm93KHQsZSxuKTt2YXIgcj1uZXcgUWEobik7cmV0dXJuIHRoaXMuY29tcGlsZUFuZFJ1bihyLFt0LGVdKX0sby5wcm90b3R5cGUuY29udjJkRGVySW5wdXQ9ZnVuY3Rpb24odCxlLG4pe3ZhciByPW5ldyBLYShuKTtyZXR1cm4gdGhpcy5jb21waWxlQW5kUnVuKHIsW3QsZV0pfSxvLnByb3RvdHlwZS5jb252MmREZXJGaWx0ZXI9ZnVuY3Rpb24odCxlLG4pe3ZhciByPW5ldyBxYShuKTtyZXR1cm4gdGhpcy5jb21waWxlQW5kUnVuKHIsW3QsZV0pfSxvLnByb3RvdHlwZS5mdXNlZERlcHRod2lzZUNvbnYyRD1mdW5jdGlvbih0KXt2YXIgZSxuPXQuaW5wdXQscj10LmZpbHRlcixvPXQuY29udkluZm8sYT10LmJpYXMscz10LmFjdGl2YXRpb24sdT10LnByZWx1QWN0aXZhdGlvbldlaWdodHMsYz1pKCkuZ2V0Qm9vbChcIldFQkdMX1BBQ0tfREVQVEhXSVNFQ09OVlwiKSYmby5zdHJpZGVXaWR0aDw9MiYmby5vdXRDaGFubmVscy9vLmluQ2hhbm5lbHM9PTEsbD1zP1FzKHMsYyk6bnVsbCxoPVtuLHJdLGY9bnVsbCE9YSxkPW51bGwhPXU7cmV0dXJuIGYmJmgucHVzaChhKSxkJiZoLnB1c2godSksYz8oZT1uZXcgdGkobyxmLGwsZCksdGhpcy5jb21waWxlQW5kUnVuKGUsaCkpOihlPW5ldyBaYShvLGYsbCxkKSx0aGlzLmNvbXBpbGVBbmRSdW4oZSxoKSl9LG8ucHJvdG90eXBlLmRlcHRod2lzZUNvbnYyRD1mdW5jdGlvbih0LGUsbil7dmFyIHI7cmV0dXJuIGkoKS5nZXRCb29sKFwiV0VCR0xfUEFDS19ERVBUSFdJU0VDT05WXCIpJiZuLnN0cmlkZVdpZHRoPD0yJiZuLm91dENoYW5uZWxzL24uaW5DaGFubmVscz09MT8ocj1uZXcgdGkobiksdGhpcy5jb21waWxlQW5kUnVuKHIsW3QsZV0pKToocj1uZXcgWmEobiksdGhpcy5jb21waWxlQW5kUnVuKHIsW3QsZV0pKX0sby5wcm90b3R5cGUuZGVwdGh3aXNlQ29udjJERGVySW5wdXQ9ZnVuY3Rpb24odCxlLG4pe3ZhciByPW5ldyAkYShuKTtyZXR1cm4gdGhpcy5jb21waWxlQW5kUnVuKHIsW3QsZV0pfSxvLnByb3RvdHlwZS5kZXB0aHdpc2VDb252MkREZXJGaWx0ZXI9ZnVuY3Rpb24odCxlLG4pe3ZhciByPW5ldyBZYShuKTtyZXR1cm4gdGhpcy5jb21waWxlQW5kUnVuKHIsW3QsZV0pfSxvLnByb3RvdHlwZS5jb252M2Q9ZnVuY3Rpb24odCxlLG4pe3ZhciByPW5ldyBKYShuKTtyZXR1cm4gdGhpcy5jb21waWxlQW5kUnVuKHIsW3QsZV0pfSxvLnByb3RvdHlwZS5jb252M2REZXJJbnB1dD1mdW5jdGlvbih0LGUsbil7dmFyIHI9bmV3IFhhKG4pO3JldHVybiB0aGlzLmNvbXBpbGVBbmRSdW4ocixbdCxlXSl9LG8ucHJvdG90eXBlLmNvbnYzZERlckZpbHRlcj1mdW5jdGlvbih0LGUsbil7dmFyIHI9bmV3IGphKG4pO3JldHVybiB0aGlzLmNvbXBpbGVBbmRSdW4ocixbdCxlXSl9LG8ucHJvdG90eXBlLm1heFBvb2w9ZnVuY3Rpb24odCxlKXt2YXIgbj1uZXcgJGkoZSxcIm1heFwiLCExKTtyZXR1cm4gdGhpcy5jb21waWxlQW5kUnVuKG4sW3RdKX0sby5wcm90b3R5cGUuYXZnUG9vbD1mdW5jdGlvbih0LGUpe3ZhciBuPW5ldyAkaShlLFwiYXZnXCIsITEpO3JldHVybiB0aGlzLmNvbXBpbGVBbmRSdW4obixbdF0sXCJmbG9hdDMyXCIpfSxvLnByb3RvdHlwZS5tYXhQb29sQmFja3Byb3A9ZnVuY3Rpb24odCxlLG4scil7dmFyIG89bmV3ICRpKHIsXCJtYXhcIiwhMCksYT10aGlzLmNvbXBpbGVBbmRSdW4obyxbZV0pLGk9bmV3IHppKHIpLHM9dGhpcy5jb21waWxlQW5kUnVuKGksW3QsYV0sZS5kdHlwZSk7cmV0dXJuIGEuZGlzcG9zZSgpLHN9LG8ucHJvdG90eXBlLmF2Z1Bvb2xCYWNrcHJvcD1mdW5jdGlvbih0LGUsbil7dmFyIHI9bmV3IElhKG4pO3JldHVybiB0aGlzLmNvbXBpbGVBbmRSdW4ocixbdF0sZS5kdHlwZSl9LG8ucHJvdG90eXBlLmNhc3Q9ZnVuY3Rpb24odCxlKXtyZXR1cm4gUG8odCxlLHRoaXMpfSxvLnByb3RvdHlwZS51bnN0YWNrPWZ1bmN0aW9uKHQsZSl7Zm9yKHZhciBuPXQuc2hhcGVbZV0scj1uZXcgQXJyYXkodC5yYW5rLTEpLG89MCxhPTA7YTx0LnJhbms7YSsrKWEhPT1lJiYocltvKytdPXQuc2hhcGVbYV0pO3ZhciBpPW5ldyBBcnJheSh0LnJhbmspLmZpbGwoMCkscz10LnNoYXBlLnNsaWNlKCk7c1tlXT0xO3ZhciB1PW5ldyBBcnJheShuKTtmb3IoYT0wO2E8dS5sZW5ndGg7YSsrKWlbZV09YSx1W2FdPXRoaXMuc2xpY2UodCxpLHMpLnJlc2hhcGUocik7cmV0dXJuIHV9LG8ucHJvdG90eXBlLmF2Z1Bvb2wzZD1mdW5jdGlvbih0LGUpe3ZhciBuPW5ldyBRaShlLFwiYXZnXCIsITEpO3JldHVybiB0aGlzLmNvbXBpbGVBbmRSdW4obixbdF0sXCJmbG9hdDMyXCIpfSxvLnByb3RvdHlwZS5hdmdQb29sM2RCYWNrcHJvcD1mdW5jdGlvbih0LGUsbil7dmFyIHI9bmV3IGthKG4pO3JldHVybiB0aGlzLmNvbXBpbGVBbmRSdW4ocixbdF0sZS5kdHlwZSl9LG8ucHJvdG90eXBlLm1heFBvb2wzZD1mdW5jdGlvbih0LGUpe3ZhciBuPW5ldyBRaShlLFwibWF4XCIsITEpO3JldHVybiB0aGlzLmNvbXBpbGVBbmRSdW4obixbdF0sXCJmbG9hdDMyXCIpfSxvLnByb3RvdHlwZS5tYXhQb29sM2RCYWNrcHJvcD1mdW5jdGlvbih0LGUsbixyKXt2YXIgbz1uZXcgUWkocixcIm1heFwiLCEwKSxhPXRoaXMuY29tcGlsZUFuZFJ1bihvLFtlXSksaT1uZXcgR2kocikscz10aGlzLmNvbXBpbGVBbmRSdW4oaSxbdCxhXSxlLmR0eXBlKTtyZXR1cm4gYS5kaXNwb3NlKCksc30sby5wcm90b3R5cGUucmVzaGFwZT1mdW5jdGlvbih0LGUpe3ZhciBuPXRoaXMudGV4RGF0YS5nZXQodC5kYXRhSWQpO2lmKG4uaXNQYWNrZWQmJiFfZSh0LnNoYXBlLGUpJiYobnVsbD09PW4udGV4dHVyZXx8IV9lKG4uc2hhcGUsZSkpKXt2YXIgcj10aGlzLnBhY2tlZFJlc2hhcGUodCxlKTtyZXR1cm4gTHQubWFrZVRlbnNvckZyb21EYXRhSWQoci5kYXRhSWQsci5zaGFwZSxyLmR0eXBlKX1yZXR1cm4gTG8odCxlKX0sby5wcm90b3R5cGUucmVzaXplQmlsaW5lYXI9ZnVuY3Rpb24odCxlLG4scil7dmFyIG89aSgpLmdldEJvb2woXCJXRUJHTF9QQUNLX0lNQUdFX09QRVJBVElPTlNcIik/bmV3IG5zKHQuc2hhcGUsZSxuLHIpOm5ldyBlcyh0LnNoYXBlLGUsbixyKTtyZXR1cm4gdGhpcy5jb21waWxlQW5kUnVuKG8sW3RdLFwiZmxvYXQzMlwiKX0sby5wcm90b3R5cGUucmVzaXplQmlsaW5lYXJCYWNrcHJvcD1mdW5jdGlvbih0LGUsbil7dmFyIHI9bmV3IHRzKHQsZSxuKTtyZXR1cm4gdGhpcy5jb21waWxlQW5kUnVuKHIsW3RdKX0sby5wcm90b3R5cGUucmVzaXplTmVhcmVzdE5laWdoYm9yPWZ1bmN0aW9uKHQsZSxuLHIpe3ZhciBvPW5ldyBvcyh0LnNoYXBlLGUsbixyKTtyZXR1cm4gdGhpcy5jb21waWxlQW5kUnVuKG8sW3RdKX0sby5wcm90b3R5cGUucmVzaXplTmVhcmVzdE5laWdoYm9yQmFja3Byb3A9ZnVuY3Rpb24odCxlLG4pe3ZhciByPW5ldyBycyh0LGUsbik7cmV0dXJuIHRoaXMuY29tcGlsZUFuZFJ1bihyLFt0XSl9LG8ucHJvdG90eXBlLm11bHRpbm9taWFsPWZ1bmN0aW9uKHQsZSxuLHIpe3ZhciBvPWU/dDpnbyh0KSxhPW8uc2hhcGVbMF0saT1vLnNoYXBlWzFdLHM9bmV3IHFpKGEsaSxuKSx1PXMuZ2V0Q3VzdG9tU2V0dXBGdW5jKHIpO3JldHVybiB0aGlzLmNvbXBpbGVBbmRSdW4ocyxbb10sXCJpbnQzMlwiLHUpfSxvLnByb3RvdHlwZS5vbmVIb3Q9ZnVuY3Rpb24odCxlLG4scil7dmFyIG89bmV3IEtpKHQuc2l6ZSxlLG4scik7cmV0dXJuIHRoaXMuY29tcGlsZUFuZFJ1bihvLFt0XSl9LG8ucHJvdG90eXBlLmRpYWc9ZnVuY3Rpb24odCl7dmFyIGU9bmV3IHNpKHQuc2l6ZSk7cmV0dXJuIHRoaXMuY29tcGlsZUFuZFJ1bihlLFt0XSl9LG8ucHJvdG90eXBlLm5vbk1heFN1cHByZXNzaW9uPWZ1bmN0aW9uKHQsZSxuLHIsbyl7cmV0dXJuIGRuKFwidGYubm9uTWF4U3VwcHJlc3Npb24oKSBpbiB3ZWJnbCBsb2NrcyB0aGUgVUkgdGhyZWFkLiBDYWxsIHRmLm5vbk1heFN1cHByZXNzaW9uQXN5bmMoKSBpbnN0ZWFkXCIpLGpvKHQuZGF0YVN5bmMoKSxlLmRhdGFTeW5jKCksbixyLG8pfSxvLnByb3RvdHlwZS5jcm9wQW5kUmVzaXplPWZ1bmN0aW9uKHQsZSxuLHIsbyxhKXt2YXIgaT1uZXcgZWkodC5zaGFwZSxlLnNoYXBlLHIsbyxhKTtyZXR1cm4gdGhpcy5jb21waWxlQW5kUnVuKGksW3QsZSxuXSxcImZsb2F0MzJcIil9LG8ucHJvdG90eXBlLmRlcHRoVG9TcGFjZT1mdW5jdGlvbih0LGUsbil7QyhlPjEsKGZ1bmN0aW9uKCl7cmV0dXJuXCJibG9ja1NpemUgc2hvdWxkIGJlID4gMSBmb3IgZGVwdGhUb1NwYWNlLCBidXQgd2FzOiBcIitlfSkpO3ZhciByPXQuc2hhcGVbMF0sbz1cIk5IV0NcIj09PW4/dC5zaGFwZVsxXTp0LnNoYXBlWzJdLGE9XCJOSFdDXCI9PT1uP3Quc2hhcGVbMl06dC5zaGFwZVszXSxpPVwiTkhXQ1wiPT09bj90LnNoYXBlWzNdOnQuc2hhcGVbMV0scz1vKmUsdT1hKmUsYz1pLyhlKmUpLGw9bmV3IGlpKFwiTkhXQ1wiPT09bj9bcixzLHUsY106W3IsYyxzLHVdLGUsbik7cmV0dXJuIHRoaXMuY29tcGlsZUFuZFJ1bihsLFt0XSl9LG8ucHJvdG90eXBlLnNwbGl0PWZ1bmN0aW9uKHQsZSxuKXtyZXR1cm4gWm8odCxlLG4pfSxvLnByb3RvdHlwZS5zY2F0dGVyTkQ9ZnVuY3Rpb24odCxlLG4pe3ZhciByPVpyKDAsdCxuKSxvPXIuc2xpY2VSYW5rLGE9ci5udW1VcGRhdGVzLGk9ci5zbGljZVNpemUscz1yLnN0cmlkZXMsdT1yLm91dHB1dFNpemUsYz1bdS9pLGldLGw9dC5yZXNoYXBlKFthLG9dKSxoPWUucmVzaGFwZShbYSxpXSk7aWYoMD09PXUpcmV0dXJuIExvKEZuKFtdKSxuKTt2YXIgZj1PbigwKSxkPW5ldyBzcyhhLG8sbC5yYW5rLGgucmFuayxzLGMpO3JldHVybiB0aGlzLmNvbXBpbGVBbmRSdW4oZCxbaCxsLGZdKS5yZXNoYXBlKG4pfSxvLnByb3RvdHlwZS5zcGFyc2VUb0RlbnNlPWZ1bmN0aW9uKHQsZSxuLHIpe3ZhciBvPVpyKDAsdCxuKSxhPW8uc2xpY2VSYW5rLGk9by5udW1VcGRhdGVzLHM9by5zdHJpZGVzLHU9by5vdXRwdXRTaXplLGM9bmV3IHNzKGksYSx0LnJhbmssZS5yYW5rLHMsW3UsMV0sITEpO3JldHVybiB0aGlzLmNvbXBpbGVBbmRSdW4oYyxbZSx0LHJdKS5yZXNoYXBlKG4pfSxvLnByb3RvdHlwZS5mZnQ9ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMuZmZ0SW1wbCh0LCExKX0sby5wcm90b3R5cGUuaWZmdD1mdW5jdGlvbih0KXtyZXR1cm4gdGhpcy5mZnRJbXBsKHQsITApfSxvLnByb3RvdHlwZS5mZnRJbXBsPWZ1bmN0aW9uKHQsZSl7dmFyIG49dGhpcy50ZXhEYXRhLmdldCh0LmRhdGFJZCkscj1uZXcgcGkoZmksdC5zaGFwZSxlKSxvPW5ldyBwaShkaSx0LnNoYXBlLGUpLGE9W3RoaXMubWFrZUNvbXBsZXhDb21wb25lbnRUZW5zb3JJbmZvKHQsbi5jb21wbGV4VGVuc29ycy5yZWFsKSx0aGlzLm1ha2VDb21wbGV4Q29tcG9uZW50VGVuc29ySW5mbyh0LG4uY29tcGxleFRlbnNvcnMuaW1hZyldLGk9dGhpcy5jb21waWxlQW5kUnVuKHIsYSkscz10aGlzLmNvbXBpbGVBbmRSdW4obyxhKSx1PXRoaXMuY29tcGxleChpLHMpLmFzMkQodC5zaGFwZVswXSx0LnNoYXBlWzFdKTtyZXR1cm4gaS5kaXNwb3NlKCkscy5kaXNwb3NlKCksdX0sby5wcm90b3R5cGUuZ2F0aGVyTkQ9ZnVuY3Rpb24odCxlKXt2YXIgbj1lLnNoYXBlLHI9bltuLmxlbmd0aC0xXSxvPWpyKHQsZSksYT1vWzBdLGk9b1sxXSxzPW9bMl0sdT1vWzNdLGM9ZS5yZXNoYXBlKFtpLHJdKSxsPXQucmVzaGFwZShbdC5zaXplL3Msc10pLGg9bmV3IGdpKHIsdSxbaSxzXSk7cmV0dXJuIHRoaXMuY29tcGlsZUFuZFJ1bihoLFtsLGNdKS5yZXNoYXBlKGEpfSxvLnByb3RvdHlwZS5maWxsPWZ1bmN0aW9uKHQsZSxuKXtpZihcInN0cmluZ1wiPT09KG49bnx8aihlKSkpe3ZhciByPVAobixrKHQpKTtyZXR1cm4gci5maWxsKGUpLEx0Lm1ha2VUZW5zb3Iocix0LG4sdGhpcyl9dmFyIG89bmV3IHZpKHQsZSksYT1vLmdldEN1c3RvbVNldHVwRnVuYyhlKTtyZXR1cm4gdGhpcy5jb21waWxlQW5kUnVuKG8sW10sbixhKX0sby5wcm90b3R5cGUub25lc0xpa2U9ZnVuY3Rpb24odCl7aWYoXCJzdHJpbmdcIj09PXQuZHR5cGUpdGhyb3cgbmV3IEVycm9yKFwib25lc0xpa2UgaXMgbm90IHN1cHBvcnRlZCB1bmRlciBzdHJpbmcgZHR5cGVcIik7cmV0dXJuIHRoaXMuZmlsbCh0LnNoYXBlLDEsdC5kdHlwZSl9LG8ucHJvdG90eXBlLnplcm9zTGlrZT1mdW5jdGlvbih0KXtyZXR1cm4gdGhpcy5maWxsKHQuc2hhcGUsXCJzdHJpbmdcIj09PXQuZHR5cGU/XCJcIjowLHQuZHR5cGUpfSxvLnByb3RvdHlwZS5saW5zcGFjZT1mdW5jdGlvbih0LGUsbil7cmV0dXJuIFdvKHQsZSxuKX0sby5wcm90b3R5cGUubWFrZVRlbnNvckluZm89ZnVuY3Rpb24odCxlKXt2YXIgbj10aGlzLndyaXRlKG51bGwsdCxlKTtyZXR1cm4gdGhpcy50ZXhEYXRhLmdldChuKS51c2FnZT1udWxsLHtkYXRhSWQ6bixzaGFwZTp0LGR0eXBlOmV9fSxvLnByb3RvdHlwZS5tYWtlT3V0cHV0PWZ1bmN0aW9uKHQsZSl7dmFyIG49dGhpcy5tYWtlVGVuc29ySW5mbyh0LGUpLmRhdGFJZDtyZXR1cm4gTHQubWFrZVRlbnNvckZyb21EYXRhSWQobix0LGUsdGhpcyl9LG8ucHJvdG90eXBlLnVucGFja1RlbnNvcj1mdW5jdGlvbih0KXt2YXIgZT1uZXcgWXModC5zaGFwZSk7cmV0dXJuIHRoaXMucnVuV2ViR0xQcm9ncmFtKGUsW3RdLHQuZHR5cGUpfSxvLnByb3RvdHlwZS5wYWNrVGVuc29yPWZ1bmN0aW9uKHQpe3ZhciBlPW5ldyBqaSh0LnNoYXBlKTtyZXR1cm4gdGhpcy5ydW5XZWJHTFByb2dyYW0oZSxbdF0sdC5kdHlwZSxudWxsLCEwKX0sby5wcm90b3R5cGUucGFja2VkUmVzaGFwZT1mdW5jdGlvbih0LGUpe3ZhciBuPVtBZSh0LnNoYXBlKV0uY29uY2F0KERlKHQuc2hhcGUpKSxyPXtkdHlwZTp0LmR0eXBlLHNoYXBlOm4sZGF0YUlkOnQuZGF0YUlkfSxvPVtBZShlKV0uY29uY2F0KERlKGUpKSxhPW5ldyBaaShvLG4pLGk9dGhpcy5ydW5XZWJHTFByb2dyYW0oYSxbcl0sdC5kdHlwZSxudWxsLCEwKTtyZXR1cm57ZGF0YUlkOmkuZGF0YUlkLHNoYXBlOmUsZHR5cGU6aS5kdHlwZX19LG8ucHJvdG90eXBlLmRlY29kZT1mdW5jdGlvbih0KXt2YXIgZSxuPXRoaXMudGV4RGF0YS5nZXQodCkscj1uLmlzUGFja2VkLG89bi5zaGFwZSxhPW4uZHR5cGUsaT1UZShvKTtlPXI/bmV3IGFpKGkpOm5ldyBvaShpKTtyZXR1cm57ZHR5cGU6YSxzaGFwZTpvLGRhdGFJZDp0aGlzLnJ1bldlYkdMUHJvZ3JhbShlLFt7c2hhcGU6aSxkdHlwZTphLGRhdGFJZDp0fV0sYSxudWxsLCEwKS5kYXRhSWR9fSxvLnByb3RvdHlwZS5ydW5XZWJHTFByb2dyYW09ZnVuY3Rpb24odCxlLG4scixvKXt2YXIgYT10aGlzO3ZvaWQgMD09PW8mJihvPSExKTt2YXIgcz10aGlzLm1ha2VUZW5zb3JJbmZvKHQub3V0cHV0U2hhcGUsbiksdT10aGlzLnRleERhdGEuZ2V0KHMuZGF0YUlkKTtpZih0LnBhY2tlZE91dHB1dCYmKHUuaXNQYWNrZWQ9ITApLHQub3V0UGFja2luZ1NjaGVtZT09PVZ0LkRFTlNFKXt2YXIgYz1ZdCh0Lm91dHB1dFNoYXBlKTt1LnRleFNoYXBlPWMubWFwKChmdW5jdGlvbih0KXtyZXR1cm4gMip0fSkpfWlmKG51bGwhPXQub3V0VGV4VXNhZ2UmJih1LnVzYWdlPXQub3V0VGV4VXNhZ2UpLDA9PT1rKHMuc2hhcGUpKXJldHVybiB1LnZhbHVlcz1CKHMuZHR5cGUsMCksczt2YXIgbD1bXSxoPWUubWFwKChmdW5jdGlvbihlKXtpZihcImNvbXBsZXg2NFwiPT09ZS5kdHlwZSl0aHJvdyBuZXcgRXJyb3IoXCJHUEdQVVByb2dyYW0gZG9lcyBub3Qgc3VwcG9ydCBjb21wbGV4NjQgaW5wdXQuIEZvciBjb21wbGV4NjQgZHR5cGVzLCBwbGVhc2Ugc2VwYXJhdGUgdGhlIHByb2dyYW0gaW50byByZWFsIGFuZCBpbWFnaW5hcnkgcGFydHMuXCIpO3ZhciBuPWEudGV4RGF0YS5nZXQoZS5kYXRhSWQpO2lmKG51bGw9PW4udGV4dHVyZSl7aWYoIXQucGFja2VkSW5wdXRzJiZrKGUuc2hhcGUpPD1pKCkuZ2V0TnVtYmVyKFwiV0VCR0xfU0laRV9VUExPQURfVU5JRk9STVwiKSlyZXR1cm57c2hhcGU6ZS5zaGFwZSx0ZXhEYXRhOm51bGwsaXNVbmlmb3JtOiEwLHVuaWZvcm1WYWx1ZXM6bi52YWx1ZXN9O3QucGFja2VkSW5wdXRzJiYobi5pc1BhY2tlZD0hMCxuLnNoYXBlPWUuc2hhcGUpfWVsc2UgaWYoISFuLmlzUGFja2VkIT0hIXQucGFja2VkSW5wdXRzKWU9bi5pc1BhY2tlZD9hLnVucGFja1RlbnNvcihlKTphLnBhY2tUZW5zb3IoZSksbC5wdXNoKGUpLG49YS50ZXhEYXRhLmdldChlLmRhdGFJZCk7ZWxzZSBpZihuLmlzUGFja2VkJiYhX2Uobi5zaGFwZSxlLnNoYXBlKSl7dmFyIHI9ZSxvPWUuc2hhcGU7ZS5zaGFwZT1uLnNoYXBlLGU9YS5wYWNrZWRSZXNoYXBlKGUsbyksbC5wdXNoKGUpLG49YS50ZXhEYXRhLmdldChlLmRhdGFJZCksci5zaGFwZT1vfXJldHVybiBhLnVwbG9hZFRvR1BVKGUuZGF0YUlkKSx7c2hhcGU6ZS5zaGFwZSx0ZXhEYXRhOm4saXNVbmlmb3JtOiExfX0pKTt0aGlzLnVwbG9hZFRvR1BVKHMuZGF0YUlkKTt2YXIgZixkPXtzaGFwZTpzLnNoYXBlLHRleERhdGE6dSxpc1VuaWZvcm06ITF9LHA9ZnVuY3Rpb24odCxlLG4pe3ZhciByPVwiXCI7ZS5jb25jYXQobikuZm9yRWFjaCgoZnVuY3Rpb24odCl7dmFyIGU9bnVsbCE9dC50ZXhEYXRhJiZudWxsIT10LnRleERhdGEuc2xpY2UmJnQudGV4RGF0YS5zbGljZS5mbGF0T2Zmc2V0PjAsbj10LmlzVW5pZm9ybT9cInVuaWZvcm1cIjp0LnRleERhdGEudGV4U2hhcGU7cis9dC5zaGFwZStcIl9cIituK1wiX1wiK2V9KSk7dmFyIG89dC51c2VyQ29kZSxhPXQuY29uc3RydWN0b3IubmFtZTtyZXR1cm4gYSs9XCJfXCIrcitcIl9cIitvfSh0LGgsZCksdj10aGlzLmdldEFuZFNhdmVCaW5hcnkocCwoZnVuY3Rpb24oKXtyZXR1cm4gZnVuY3Rpb24odCxlLG4scil7dmFyIG89ZS51c2VyQ29kZSxhPW4ubWFwKChmdW5jdGlvbih0LG4pe3ZhciByPXtsb2dpY2FsU2hhcGU6dC5zaGFwZSx0ZXhTaGFwZTp0LmlzVW5pZm9ybT9udWxsOnQudGV4RGF0YS50ZXhTaGFwZSxpc1VuaWZvcm06dC5pc1VuaWZvcm0saXNQYWNrZWQ6IXQuaXNVbmlmb3JtJiZ0LnRleERhdGEuaXNQYWNrZWQsZmxhdE9mZnNldDpudWxsfTtyZXR1cm4gbnVsbCE9dC50ZXhEYXRhJiZudWxsIT10LnRleERhdGEuc2xpY2UmJnQudGV4RGF0YS5zbGljZS5mbGF0T2Zmc2V0PjAmJihyLmZsYXRPZmZzZXQ9dC50ZXhEYXRhLnNsaWNlLmZsYXRPZmZzZXQpLHtuYW1lOmUudmFyaWFibGVOYW1lc1tuXSxzaGFwZUluZm86cn19KSkscz1hLm1hcCgoZnVuY3Rpb24odCl7cmV0dXJuIHQuc2hhcGVJbmZvfSkpLHU9e2xvZ2ljYWxTaGFwZTpyLnNoYXBlLHRleFNoYXBlOnIudGV4RGF0YS50ZXhTaGFwZSxpc1VuaWZvcm06ITEsaXNQYWNrZWQ6ci50ZXhEYXRhLmlzUGFja2VkLGZsYXRPZmZzZXQ6bnVsbH0sYz1mYShhLHUsbyxlLnBhY2tlZElucHV0cyksbD10LmNyZWF0ZVByb2dyYW0oYyksaD1udWxsLGY9dC5nZXRVbmlmb3JtTG9jYXRpb24obCxcIk5BTlwiLCExKTsxPT09aSgpLmdldE51bWJlcihcIldFQkdMX1ZFUlNJT05cIikmJihoPXQuZ2V0VW5pZm9ybUxvY2F0aW9uKGwsXCJJTkZJTklUWVwiLCExKSk7Zm9yKHZhciBkPXt9LHA9MDtwPGUudmFyaWFibGVOYW1lcy5sZW5ndGg7cCsrKXt2YXIgdj1lLnZhcmlhYmxlTmFtZXNbcF07ZFt2XT10LmdldFVuaWZvcm1Mb2NhdGlvbihsLHYsITEpLGRbXCJvZmZzZXRcIit2XT10LmdldFVuaWZvcm1Mb2NhdGlvbihsLFwib2Zmc2V0XCIrdiwhMSl9cmV0dXJue3Byb2dyYW06ZSxzb3VyY2U6Yyx3ZWJHTFByb2dyYW06bCx1bmlmb3JtTG9jYXRpb25zOmQsaW5TaGFwZUluZm9zOnMsb3V0U2hhcGVJbmZvOnUsaW5mTG9jOmgsbmFuTG9jOmZ9fShhLmdwZ3B1LHQsaCxkKX0pKSxtPW51bGwhPXRoaXMuYWN0aXZlVGltZXJzO2lmKG0mJihmPXRoaXMuc3RhcnRUaW1lcigpKSxmdW5jdGlvbih0LGUsbixyLG8pe1BpKGUuaW5TaGFwZUluZm9zLG4pLFBpKFtlLm91dFNoYXBlSW5mb10sW3JdKTt2YXIgYT1yLnRleERhdGEudGV4dHVyZSxzPXIudGV4RGF0YS50ZXhTaGFwZTtyLnRleERhdGEuaXNQYWNrZWQ/dC5zZXRPdXRwdXRQYWNrZWRNYXRyaXhUZXh0dXJlKGEsc1swXSxzWzFdKTp0LnNldE91dHB1dE1hdHJpeFRleHR1cmUoYSxzWzBdLHNbMV0pLHQuc2V0UHJvZ3JhbShlLndlYkdMUHJvZ3JhbSksMT09PWkoKS5nZXROdW1iZXIoXCJXRUJHTF9WRVJTSU9OXCIpJiZudWxsIT09ZS5pbmZMb2MmJnQuZ2wudW5pZm9ybTFmKGUuaW5mTG9jLDEvMCksbnVsbCE9PWUubmFuTG9jJiZ0LmdsLnVuaWZvcm0xZihlLm5hbkxvYyxOYU4pLG4uZm9yRWFjaCgoZnVuY3Rpb24obixyKXt2YXIgbz1lLnByb2dyYW0udmFyaWFibGVOYW1lc1tyXSxhPWUudW5pZm9ybUxvY2F0aW9uc1tvXSxpPWUudW5pZm9ybUxvY2F0aW9uc1tcIm9mZnNldFwiK29dO2lmKG51bGwhPWEpaWYobi5pc1VuaWZvcm0paWYoayhuLnNoYXBlKTwyKXQuZ2wudW5pZm9ybTFmKGEsbi51bmlmb3JtVmFsdWVzWzBdKTtlbHNle3ZhciBzPW4udW5pZm9ybVZhbHVlcztzIGluc3RhbmNlb2YgRmxvYXQzMkFycmF5fHwocz1uZXcgRmxvYXQzMkFycmF5KHMpKSx0LmdsLnVuaWZvcm0xZnYoYSxzKX1lbHNlIG51bGwhPW4udGV4RGF0YS5zbGljZSYmbnVsbCE9aSYmdC5nbC51bmlmb3JtMWkoaSxuLnRleERhdGEuc2xpY2UuZmxhdE9mZnNldCksdC5zZXRJbnB1dE1hdHJpeFRleHR1cmUobi50ZXhEYXRhLnRleHR1cmUsYSxyKX0pKSxudWxsIT1vJiZvKHQsZS53ZWJHTFByb2dyYW0pLHQuZXhlY3V0ZVByb2dyYW0oKX0odGhpcy5ncGdwdSx2LGgsZCxyKSxsLmZvckVhY2goKGZ1bmN0aW9uKHQpe3JldHVybiBhLmRpc3Bvc2VEYXRhKHQuZGF0YUlkKX0pKSxtJiYoZj10aGlzLmVuZFRpbWVyKGYpLHRoaXMuYWN0aXZlVGltZXJzLnB1c2goe25hbWU6dC5jb25zdHJ1Y3Rvci5uYW1lLHF1ZXJ5OnRoaXMuZ2V0UXVlcnlUaW1lKGYpfSkpLCFpKCkuZ2V0Qm9vbChcIldFQkdMX0xBWklMWV9VTlBBQ0tcIikmJnUuaXNQYWNrZWQmJiExPT09byl7dmFyIGc9dGhpcy51bnBhY2tUZW5zb3Iocyk7cmV0dXJuIHRoaXMuZGlzcG9zZURhdGEocy5kYXRhSWQpLGd9cmV0dXJuIHN9LG8ucHJvdG90eXBlLmNvbXBpbGVBbmRSdW49ZnVuY3Rpb24odCxlLG4scixvKXt2b2lkIDA9PT1vJiYobz0hMSksbj1ufHxlWzBdLmR0eXBlO3ZhciBhPXRoaXMucnVuV2ViR0xQcm9ncmFtKHQsZSxuLHIsbyk7cmV0dXJuIEx0Lm1ha2VUZW5zb3JGcm9tRGF0YUlkKGEuZGF0YUlkLGEuc2hhcGUsYS5kdHlwZSl9LG8ucHJvdG90eXBlLmdldEFuZFNhdmVCaW5hcnk9ZnVuY3Rpb24odCxlKXtyZXR1cm4gdCBpbiB0aGlzLmJpbmFyeUNhY2hlfHwodGhpcy5iaW5hcnlDYWNoZVt0XT1lKCkpLHRoaXMuYmluYXJ5Q2FjaGVbdF19LG8ucHJvdG90eXBlLmdldFRleHR1cmVNYW5hZ2VyPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMudGV4dHVyZU1hbmFnZXJ9LG8ucHJvdG90eXBlLmRpc3Bvc2U9ZnVuY3Rpb24oKXt2YXIgdD10aGlzO2lmKCF0aGlzLmRpc3Bvc2VkKXtpZighaSgpLmdldEJvb2woXCJJU19URVNUXCIpKU9iamVjdC5rZXlzKHRoaXMuYmluYXJ5Q2FjaGUpLmZvckVhY2goKGZ1bmN0aW9uKGUpe3QuZ3BncHUuZGVsZXRlUHJvZ3JhbSh0LmJpbmFyeUNhY2hlW2VdLndlYkdMUHJvZ3JhbSksZGVsZXRlIHQuYmluYXJ5Q2FjaGVbZV19KSk7dGhpcy50ZXh0dXJlTWFuYWdlci5kaXNwb3NlKCksbnVsbCE9dGhpcy5jYW52YXMmJlwidW5kZWZpbmVkXCIhPXR5cGVvZiBIVE1MQ2FudmFzRWxlbWVudCYmdGhpcy5jYW52YXMgaW5zdGFuY2VvZiBIVE1MQ2FudmFzRWxlbWVudD90aGlzLmNhbnZhcy5yZW1vdmUoKTp0aGlzLmNhbnZhcz1udWxsLHRoaXMuZ3BncHVDcmVhdGVkTG9jYWxseSYmKHRoaXMuZ3BncHUucHJvZ3JhbT1udWxsLHRoaXMuZ3BncHUuZGlzcG9zZSgpKSx0aGlzLmRpc3Bvc2VkPSEwfX0sby5wcm90b3R5cGUuZmxvYXRQcmVjaXNpb249ZnVuY3Rpb24oKXt2YXIgdD10aGlzO3JldHVybiBudWxsPT10aGlzLmZsb2F0UHJlY2lzaW9uVmFsdWUmJih0aGlzLmZsb2F0UHJlY2lzaW9uVmFsdWU9WmUoKGZ1bmN0aW9uKCl7aWYoIWkoKS5nZXQoXCJXRUJHTF9SRU5ERVJfRkxPQVQzMl9FTkFCTEVEXCIpKXt2YXIgZT1pKCkuZ2V0Qm9vbChcIkRFQlVHXCIpO2koKS5zZXQoXCJERUJVR1wiLCExKTt2YXIgbj10LmFicyhPbigxZS04KSkuZGF0YVN5bmMoKVswXTtpZihpKCkuc2V0KFwiREVCVUdcIixlKSxuPjApcmV0dXJuIDMyfXJldHVybiAxNn0pKSksdGhpcy5mbG9hdFByZWNpc2lvblZhbHVlfSxvLnByb3RvdHlwZS5lcHNpbG9uPWZ1bmN0aW9uKCl7cmV0dXJuIDMyPT09dGhpcy5mbG9hdFByZWNpc2lvbigpPzFlLTc6MWUtNH0sby5wcm90b3R5cGUudXBsb2FkVG9HUFU9ZnVuY3Rpb24odCl7dmFyIGUsbj10aGlzLnRleERhdGEuZ2V0KHQpLHI9bi5zaGFwZSxvPW4uZHR5cGUsYT1uLnZhbHVlcyxpPW4udGV4dHVyZSxzPW4udXNhZ2UsdT1uLmlzUGFja2VkO2lmKG51bGw9PWkpe3ZhciBjLGw9bnVsbCE9dGhpcy5hY3RpdmVUaW1lcnM7bCYmKGM9ZXQoKSk7dmFyIGg9bi50ZXhTaGFwZTtpZihudWxsPT1oJiYoaD1OZShyLHUpLG4udGV4U2hhcGU9aCksbnVsbCE9YSl7dmFyIGY9VGUociksZD12b2lkIDAscD1oWzFdLHY9aFswXSxtPWEgaW5zdGFuY2VvZiBVaW50OEFycmF5O3U/KHA9KGU9JHQoaFswXSxoWzFdKSlbMF0sdj1lWzFdLGQ9bmV3IGhpKGYsW3YscF0sbSkpOmQ9bmV3IGxpKGYsW3YscF0sbSk7dmFyIGc9dGhpcy5tYWtlVGVuc29ySW5mbyhbdixwXSxvKTt0aGlzLnRleERhdGEuZ2V0KGcuZGF0YUlkKS51c2FnZT1tP3p0LlBJWEVMUzp6dC5VUExPQUQsdGhpcy5ncGdwdS51cGxvYWREZW5zZU1hdHJpeFRvVGV4dHVyZSh0aGlzLmdldFRleHR1cmUoZy5kYXRhSWQpLHAsdixhKTt2YXIgeT10aGlzLnJ1bldlYkdMUHJvZ3JhbShkLFtnXSxvLG51bGwsITApLHg9dGhpcy50ZXhEYXRhLmdldCh5LmRhdGFJZCk7bi50ZXh0dXJlPXgudGV4dHVyZSxuLnRleFNoYXBlPXgudGV4U2hhcGUsbi5pc1BhY2tlZD14LmlzUGFja2VkLG4udXNhZ2U9eC51c2FnZSx0aGlzLmRpc3Bvc2VEYXRhKGcuZGF0YUlkKSx0aGlzLnRleERhdGEuZGVsZXRlKHkuZGF0YUlkKSxuLnZhbHVlcz1udWxsLGwmJih0aGlzLnVwbG9hZFdhaXRNcys9ZXQoKS1jKX1lbHNle3ZhciBiPXRoaXMuYWNxdWlyZVRleHR1cmUoaCxzLG8sdSk7bi50ZXh0dXJlPWJ9fX0sby5wcm90b3R5cGUuY29udmVydEFuZENhY2hlT25DUFU9ZnVuY3Rpb24odCxlKXt2YXIgbj10aGlzLnRleERhdGEuZ2V0KHQpLHI9bi5kdHlwZTtyZXR1cm4gdGhpcy5yZWxlYXNlR1BVRGF0YSh0KSxudWxsIT1lJiYobi52YWx1ZXM9ZnVuY3Rpb24odCxlKXtpZihcImZsb2F0MzJcIj09PWV8fFwiY29tcGxleDY0XCI9PT1lKXJldHVybiB0O2lmKFwiaW50MzJcIj09PWV8fFwiYm9vbFwiPT09ZSl7Zm9yKHZhciBuPVwiaW50MzJcIj09PWU/bmV3IEludDMyQXJyYXkodC5sZW5ndGgpOm5ldyBVaW50OEFycmF5KHQubGVuZ3RoKSxyPTA7cjxuLmxlbmd0aDsrK3IpbltyXT1NYXRoLnJvdW5kKHRbcl0pO3JldHVybiBufXRocm93IG5ldyBFcnJvcihcIlVua25vd24gZHR5cGUgXCIrZSl9KGUscikpLG4udmFsdWVzfSxvLnByb3RvdHlwZS5hY3F1aXJlVGV4dHVyZT1mdW5jdGlvbih0LGUsbixyKXtpZih0aGlzLm51bUJ5dGVzSW5HUFUrPXRoaXMuY29tcHV0ZUJ5dGVzKHQsbiksIXRoaXMud2FybmVkQWJvdXRNZW1vcnkmJnRoaXMubnVtQnl0ZXNJbkdQVT4xMDI0KnRoaXMubnVtTUJCZWZvcmVXYXJuaW5nKjEwMjQpe3ZhciBvPSh0aGlzLm51bUJ5dGVzSW5HUFUvMTAyNC8xMDI0KS50b0ZpeGVkKDIpO3RoaXMud2FybmVkQWJvdXRNZW1vcnk9ITAsY29uc29sZS53YXJuKFwiSGlnaCBtZW1vcnkgdXNhZ2UgaW4gR1BVOiBcIitvK1wiIE1CLCBtb3N0IGxpa2VseSBkdWUgdG8gYSBtZW1vcnkgbGVha1wiKX1yZXR1cm4gdGhpcy50ZXh0dXJlTWFuYWdlci5hY3F1aXJlVGV4dHVyZSh0LGUscil9LG8ucHJvdG90eXBlLmNvbXB1dGVCeXRlcz1mdW5jdGlvbih0LGUpe3JldHVybiB0WzBdKnRbMV0qeihlKX0sb30oYm8pO1d0KCkmJkx0LnJlZ2lzdGVyQmFja2VuZChcIndlYmdsXCIsKGZ1bmN0aW9uKCl7cmV0dXJuIG5ldyBac30pLDIpO3ZhciB0dT1Bbih7c3F1YXJlXzpmdW5jdGlvbih0KXt2YXIgZT1tbih0LFwieFwiLFwic3F1YXJlXCIpLG49W2VdO3JldHVybiBMdC5ydW5LZXJuZWxGdW5jKChmdW5jdGlvbih0LG4pe3JldHVybiBuKFtlXSksdC5zcXVhcmUoZSl9KSx7eDplfSxudWxsLFwiU3F1YXJlXCIse30sbixbXSl9fSksZXU9XCJTcXVhcmVkRGlmZmVyZW5jZVwiO3ZhciBudT1Bbih7c3F1YXJlZERpZmZlcmVuY2VfOmZ1bmN0aW9uKHQsZSl7dmFyIG4scj1tbih0LFwiYVwiLFwic3F1YXJlZERpZmZlcmVuY2VcIiksbz1tbihlLFwiYlwiLFwic3F1YXJlZERpZmZlcmVuY2VcIik7bj1OdChyLG8pLHI9blswXSxvPW5bMV0sUm8oci5zaGFwZSxvLnNoYXBlKTt2YXIgYT17YTpyLGI6b30saT1bcixvXTtyZXR1cm4gTHQucnVuS2VybmVsRnVuYygoZnVuY3Rpb24odCxlKXt2YXIgbj10LnNxdWFyZWREaWZmZXJlbmNlKHIsbyk7cmV0dXJuIGUoW3Isb10pLG59KSxhLChmdW5jdGlvbih0LGUpe3ZhciBuPWVbMF0scj1lWzFdLG89T24oMik7cmV0dXJue2E6ZnVuY3Rpb24oKXtyZXR1cm4gdC5tdWwobi5zdWIocikubXVsKG8pKX0sYjpmdW5jdGlvbigpe3JldHVybiB0Lm11bChyLnN1YihuKS5tdWwobykpfX19KSxldSx7fSxpLFtdKX19KTt2YXIgcnU9QW4oe2Fic186ZnVuY3Rpb24odCl7dmFyIGU9bW4odCxcInhcIixcImFic1wiKTtyZXR1cm5cImNvbXBsZXg2NFwiPT09ZS5kdHlwZT9MdC5ydW5LZXJuZWxGdW5jKChmdW5jdGlvbih0KXtyZXR1cm4gdC5jb21wbGV4QWJzKGUpfSkseyR4OmV9KTpMdC5ydW5LZXJuZWxGdW5jKChmdW5jdGlvbih0LG4pe3ZhciByPXQuYWJzKGUpO3JldHVybiBuKFtlXSkscn0pLHt4OmV9LChmdW5jdGlvbih0LGUpe3ZhciBuPWVbMF07cmV0dXJue3g6ZnVuY3Rpb24oKXtyZXR1cm4gdC5tdWwobi50b0Zsb2F0KCkuc3RlcCgtMSkpfX19KSxcIkFic1wiKX19KSxvdT1Bbih7YWNvc186ZnVuY3Rpb24odCl7dmFyIGU9bW4odCxcInhcIixcImFjb3NcIik7cmV0dXJuIEx0LnJ1bktlcm5lbEZ1bmMoKGZ1bmN0aW9uKHQsbil7dmFyIHI9dC5hY29zKGUpO3JldHVybiBuKFtlXSkscn0pLHskeDplfSwoZnVuY3Rpb24odCxlKXt2YXIgbj1lWzBdO3JldHVybnskeDpmdW5jdGlvbigpe3JldHVybiB0LmRpdlN0cmljdChPbigxKS5zdWIobi50b0Zsb2F0KCkuc3F1YXJlKCkpLnNxcnQoKSkubmVnKCl9fX0pKX19KSxhdT1Bbih7YWNvc2hfOmZ1bmN0aW9uKHQpe3ZhciBlPW1uKHQsXCJ4XCIsXCJhY29zaFwiKTtyZXR1cm4gTHQucnVuS2VybmVsRnVuYygoZnVuY3Rpb24odCxuKXt2YXIgcj10LmFjb3NoKGUpO3JldHVybiBuKFtlXSkscn0pLHskeDplfSwoZnVuY3Rpb24odCxlKXt2YXIgbj1lWzBdO3JldHVybnskeDpmdW5jdGlvbigpe3JldHVybiB0LmRpdlN0cmljdChuLnRvRmxvYXQoKS5zcXVhcmUoKS5zdWIoMSkuc3FydCgpKX19fSkpfX0pLGl1PUFuKHthc2luXzpmdW5jdGlvbih0KXt2YXIgZT1tbih0LFwieFwiLFwiYXNpblwiKTtyZXR1cm4gTHQucnVuS2VybmVsRnVuYygoZnVuY3Rpb24odCxuKXt2YXIgcj10LmFzaW4oZSk7cmV0dXJuIG4oW2VdKSxyfSkseyR4OmV9LChmdW5jdGlvbih0LGUpe3ZhciBuPWVbMF07cmV0dXJueyR4OmZ1bmN0aW9uKCl7cmV0dXJuIHQuZGl2U3RyaWN0KE9uKDEpLnN1YihuLnRvRmxvYXQoKS5zcXVhcmUoKSkuc3FydCgpKX19fSkpfX0pLHN1PUFuKHthc2luaF86ZnVuY3Rpb24odCl7dmFyIGU9bW4odCxcInhcIixcImFzaW5oXCIpO3JldHVybiBMdC5ydW5LZXJuZWxGdW5jKChmdW5jdGlvbih0LG4pe3ZhciByPXQuYXNpbmgoZSk7cmV0dXJuIG4oW2VdKSxyfSkseyR4OmV9LChmdW5jdGlvbih0LGUpe3ZhciBuPWVbMF07cmV0dXJueyR4OmZ1bmN0aW9uKCl7cmV0dXJuIHQuZGl2U3RyaWN0KE9uKDEpLmFkZChuLnRvRmxvYXQoKS5zcXVhcmUoKSkuc3FydCgpKX19fSkpfX0pLHV1PUFuKHthdGFuXzpmdW5jdGlvbih0KXt2YXIgZT1tbih0LFwieFwiLFwiYXRhblwiKTtyZXR1cm4gTHQucnVuS2VybmVsRnVuYygoZnVuY3Rpb24odCxuKXt2YXIgcj10LmF0YW4oZSk7cmV0dXJuIG4oW2VdKSxyfSkseyR4OmV9LChmdW5jdGlvbih0LGUpe3ZhciBuPWVbMF07cmV0dXJueyR4OmZ1bmN0aW9uKCl7cmV0dXJuIHQuZGl2KG4udG9GbG9hdCgpLnNxdWFyZSgpLmFkZCgxKSl9fX0pKX19KSxjdT1Bbih7YXRhbmhfOmZ1bmN0aW9uKHQpe3ZhciBlPW1uKHQsXCJ4XCIsXCJhdGFuaFwiKTtyZXR1cm4gTHQucnVuS2VybmVsRnVuYygoZnVuY3Rpb24odCxuKXt2YXIgcj10LmF0YW5oKGUpO3JldHVybiBuKFtlXSkscn0pLHskeDplfSwoZnVuY3Rpb24odCxlKXt2YXIgbj1lWzBdO3JldHVybnskeDpmdW5jdGlvbigpe3JldHVybiB0LmRpdihPbigxKS5zdWIobi50b0Zsb2F0KCkuc3F1YXJlKCkpKX19fSkpfX0pLGx1PUFuKHtjZWlsXzpmdW5jdGlvbih0KXt2YXIgZT1tbih0LFwieFwiLFwiY2VpbFwiKTtyZXR1cm4gTHQucnVuS2VybmVsRnVuYygoZnVuY3Rpb24odCl7cmV0dXJuIHQuY2VpbChlKX0pLHskeDplfSwoZnVuY3Rpb24odCl7cmV0dXJueyR4OmZ1bmN0aW9uKCl7cmV0dXJuIFhuKHQpfX19KSl9fSksaHU9QW4oe2NsaXBCeVZhbHVlXzpmdW5jdGlvbih0LGUsbil7dmFyIHI9bW4odCxcInhcIixcImNsaXBCeVZhbHVlXCIpO0MoZTw9biwoZnVuY3Rpb24oKXtyZXR1cm5cIkVycm9yIGluIGNsaXA6IG1pbiAoXCIrZStcIikgbXVzdCBiZSBsZXNzIHRoYW4gb3IgZXF1YWwgdG8gbWF4IChcIituK1wiKS5cIn0pKTt2YXIgbz1bcl0sYT17bWluOmUsbWF4Om59O3JldHVybiBMdC5ydW5LZXJuZWxGdW5jKChmdW5jdGlvbih0LG8pe3ZhciBhPXQuY2xpcChyLGUsbik7cmV0dXJuIG8oW3JdKSxhfSkse3g6cn0sKGZ1bmN0aW9uKHQscil7dmFyIG89clswXTtyZXR1cm57eDpmdW5jdGlvbigpe3JldHVybiB0LndoZXJlKG8uZ3JlYXRlckVxdWFsKGUpLmxvZ2ljYWxBbmQoby5sZXNzRXF1YWwobikpLFhuKHQpKX19fSksXCJDbGlwQnlWYWx1ZVwiLGEsbyl9fSksZnU9QW4oe2Nvc186ZnVuY3Rpb24odCl7dmFyIGU9bW4odCxcInhcIixcImNvc1wiKSxuPVtlXTtyZXR1cm4gTHQucnVuS2VybmVsRnVuYygoZnVuY3Rpb24odCxuKXt2YXIgcj10LmNvcyhlKTtyZXR1cm4gbihbZV0pLHJ9KSx7eDplfSwoZnVuY3Rpb24odCxlKXt2YXIgbj1lWzBdO3JldHVybnt4OmZ1bmN0aW9uKCl7cmV0dXJuIG4udG9GbG9hdCgpLnNpbigpLm5lZygpLm11bCh0KX19fSksXCJDb3NcIix7fSxuKX19KSxkdT1Bbih7Y29zaF86ZnVuY3Rpb24odCl7dmFyIGU9bW4odCxcInhcIixcImNvc2hcIik7cmV0dXJuIEx0LnJ1bktlcm5lbEZ1bmMoKGZ1bmN0aW9uKHQsbil7dmFyIHI9dC5jb3NoKGUpO3JldHVybiBuKFtlXSkscn0pLHskeDplfSwoZnVuY3Rpb24odCxlKXt2YXIgbj1lWzBdO3JldHVybnskeDpmdW5jdGlvbigpe3JldHVybiBuLnRvRmxvYXQoKS5zaW5oKCkubXVsU3RyaWN0KHQpfX19KSl9fSkscHU9QW4oe2VyZl86ZnVuY3Rpb24odCl7dmFyIGU9bW4odCxcInhcIixcImVyZlwiKTtyZXR1cm4gQyhcImludDMyXCI9PT1lLmR0eXBlfHxcImZsb2F0MzJcIj09PWUuZHR5cGUsKGZ1bmN0aW9uKCl7cmV0dXJuXCJJbnB1dCBkdHlwZSBtdXN0IGJlIGBpbnQzMmAgb3IgYGZsb2F0MzJgLlwifSkpLFwiaW50MzJcIj09PWUuZHR5cGUmJihlPWUudG9GbG9hdCgpKSxMdC5ydW5LZXJuZWxGdW5jKChmdW5jdGlvbih0LG4pe3ZhciByPXQuZXJmKGUpO3JldHVybiBuKFtlXSkscn0pLHskeDplfSwoZnVuY3Rpb24odCxlKXt2YXIgbj1lWzBdO3JldHVybnskeDpmdW5jdGlvbigpe3JldHVybiB0Lm11bChuLnNxdWFyZSgpLm5lZygpLmV4cCgpLm11bCgyL01hdGguc3FydChNYXRoLlBJKSkpfX19KSl9fSksdnU9QW4oe2V4cF86ZnVuY3Rpb24odCl7dmFyIGU9bW4odCxcInhcIixcImV4cFwiKTtyZXR1cm4gTHQucnVuS2VybmVsRnVuYygoZnVuY3Rpb24odCxuKXt2YXIgcj10LmV4cChlKTtyZXR1cm4gbihbcl0pLHJ9KSx7eDplfSwoZnVuY3Rpb24odCxlKXtyZXR1cm57eDpmdW5jdGlvbigpe3JldHVybiB0Lm11bFN0cmljdChlWzBdKX19fSksXCJFeHBcIix7fSxbXSxbITBdKX19KSxtdT1Bbih7ZXhwbTFfOmZ1bmN0aW9uKHQpe3ZhciBlPW1uKHQsXCJ4XCIsXCJleHBtMVwiKTtyZXR1cm4gTHQucnVuS2VybmVsRnVuYygoZnVuY3Rpb24odCxuKXt2YXIgcj10LmV4cG0xKGUpO3JldHVybiBuKFtlXSkscn0pLHskeDplfSwoZnVuY3Rpb24odCxlKXt2YXIgbj1lWzBdO3JldHVybnskeDpmdW5jdGlvbigpe3JldHVybiB0Lm11bChuLmV4cCgpKX19fSkpfX0pLGd1PUFuKHtmbG9vcl86ZnVuY3Rpb24odCl7dmFyIGU9bW4odCxcInhcIixcImZsb29yXCIpO3JldHVybiBMdC5ydW5LZXJuZWxGdW5jKChmdW5jdGlvbih0KXtyZXR1cm4gdC5mbG9vcihlKX0pLHskeDplfSwoZnVuY3Rpb24odCl7cmV0dXJueyR4OmZ1bmN0aW9uKCl7cmV0dXJuIFhuKHQpfX19KSl9fSkseXU9QW4oe2xvZ186ZnVuY3Rpb24odCl7dmFyIGU9bW4odCxcInhcIixcImxvZ1wiKSxuPVtlXTtyZXR1cm4gTHQucnVuS2VybmVsRnVuYygoZnVuY3Rpb24odCxuKXt2YXIgcj10LmxvZyhlKTtyZXR1cm4gbihbZV0pLHJ9KSx7eDplfSwoZnVuY3Rpb24odCxlKXt2YXIgbj1lWzBdO3JldHVybnt4OmZ1bmN0aW9uKCl7cmV0dXJuIHQuZGl2KG4udG9GbG9hdCgpKX19fSksXCJMb2dcIix7fSxuKX19KSx4dT1Bbih7bG9nMXBfOmZ1bmN0aW9uKHQpe3ZhciBlPW1uKHQsXCJ4XCIsXCJsb2cxcFwiKTtyZXR1cm4gTHQucnVuS2VybmVsRnVuYygoZnVuY3Rpb24odCxuKXt2YXIgcj10LmxvZzFwKGUpO3JldHVybiBuKFtlXSkscn0pLHskeDplfSwoZnVuY3Rpb24odCxlKXt2YXIgbj1lWzBdO3JldHVybnskeDpmdW5jdGlvbigpe3JldHVybiB0LmRpdihuLmFkZCgxKSl9fX0pKX19KSxidT1Bbih7bG9nU2lnbW9pZF86ZnVuY3Rpb24odCl7dmFyIGU9bW4odCxcInhcIixcImxvZ1NpZ21vaWRcIik7cmV0dXJuIEx0LnJ1bktlcm5lbEZ1bmMoKGZ1bmN0aW9uKHQsbil7dmFyIHI9dC5zb2Z0cGx1cyhlLm5lZygpKS5uZWcoKTtyZXR1cm4gbihbZV0pLHJ9KSx7JHg6ZX0sKGZ1bmN0aW9uKHQsZSl7dmFyIG49ZVswXTtyZXR1cm57JHg6ZnVuY3Rpb24oKXtyZXR1cm4gdC5tdWwobi5uZWcoKS5zaWdtb2lkKCkpfX19KSl9fSksd3U9QW4oe25lZ186ZnVuY3Rpb24odCl7dmFyIGU9bW4odCxcInhcIixcIm5lZ1wiKSxuPVtlXTtyZXR1cm4gTHQucnVuS2VybmVsRnVuYygoZnVuY3Rpb24odCl7cmV0dXJuIHQubmVnKGUpfSkse3g6ZX0sKGZ1bmN0aW9uKHQpe3JldHVybnt4OmZ1bmN0aW9uKCl7cmV0dXJuIHQubmVnKCl9fX0pLFwiTmVnXCIse30sbil9fSksQ3U9QW4oe3JlY2lwcm9jYWxfOmZ1bmN0aW9uKHQpe3ZhciBlPW1uKHQsXCJ4XCIsXCJyZWNpcHJvY2FsXCIpO3JldHVybiBMdC5ydW5LZXJuZWxGdW5jKChmdW5jdGlvbih0LG4pe3ZhciByPXQucmVjaXByb2NhbChlKTtyZXR1cm4gbihbZV0pLHJ9KSx7JHg6ZX0sKGZ1bmN0aW9uKHQsZSl7dmFyIG49ZVswXTtyZXR1cm57JHg6ZnVuY3Rpb24oKXtyZXR1cm4gdC5kaXYobi5zcXVhcmUoKS5uZWcoKSl9fX0pKX19KSxFdT1Bbih7cm91bmRfOmZ1bmN0aW9uKHQpe3ZhciBlPW1uKHQsXCJ4XCIsXCJyb3VuZFwiKTtyZXR1cm4gTHQucnVuS2VybmVsRnVuYygoZnVuY3Rpb24odCl7cmV0dXJuIHQucm91bmQoZSl9KSx7JHg6ZX0sKGZ1bmN0aW9uKHQpe3JldHVybnskeDpmdW5jdGlvbigpe3JldHVybiBYbih0KX19fSkpfX0pLFJ1PUFuKHtyc3FydF86ZnVuY3Rpb24odCl7dmFyIGU9bW4odCxcInhcIixcInJzcXJ0XCIpLG49W2VdO3JldHVybiBMdC5ydW5LZXJuZWxGdW5jKChmdW5jdGlvbih0LG4pe3ZhciByPXQucnNxcnQoZSk7cmV0dXJuIG4oW2VdKSxyfSkse3g6ZX0sKGZ1bmN0aW9uKHQsZSl7dmFyIG49ZVswXTtyZXR1cm57eDpmdW5jdGlvbigpe3JldHVybiB0LmRpdihuLnBvdygxLjUpLm11bCgyKSkubmVnKCl9fX0pLFwiUnNxcnRcIix7fSxuKX19KSxJdT1Bbih7c2lnbW9pZF86ZnVuY3Rpb24odCl7dmFyIGU9bW4odCxcInhcIixcInNpZ21vaWRcIik7cmV0dXJuIEx0LnJ1bktlcm5lbEZ1bmMoKGZ1bmN0aW9uKHQsbil7dmFyIHI9dC5zaWdtb2lkKGUpO3JldHVybiBuKFtyXSkscn0pLHt4OmV9LChmdW5jdGlvbih0LGUpe3ZhciBuPWVbMF07cmV0dXJue3g6ZnVuY3Rpb24oKXtyZXR1cm4gdC5tdWwobi5tdWwoT24oMSkuc3ViKG4pKSl9fX0pLFwiU2lnbW9pZFwiKX19KSxrdT1Bbih7c2lnbl86ZnVuY3Rpb24odCl7dmFyIGU9bW4odCxcInhcIixcInNpZ25cIik7cmV0dXJuIEx0LnJ1bktlcm5lbEZ1bmMoKGZ1bmN0aW9uKHQpe3JldHVybiB0LnNpZ24oZSl9KSx7JHg6ZX0sKGZ1bmN0aW9uKHQpe3JldHVybnskeDpmdW5jdGlvbigpe3JldHVybiBYbih0KX19fSkpfX0pLFN1PUFuKHtpc05hTl86ZnVuY3Rpb24odCl7dmFyIGU9bW4odCxcInhcIixcImlzTmFOXCIpO3JldHVybiBMdC5ydW5LZXJuZWxGdW5jKChmdW5jdGlvbih0KXtyZXR1cm4gdC5pc05hTihlKX0pLHskeDplfSwoZnVuY3Rpb24odCl7cmV0dXJueyR4OmZ1bmN0aW9uKCl7cmV0dXJuIFhuKHQpfX19KSl9fSksQXU9QW4oe2lzSW5mXzpmdW5jdGlvbih0KXt2YXIgZT1tbih0LFwieFwiLFwiaXNJbmZcIik7cmV0dXJuIEx0LnJ1bktlcm5lbEZ1bmMoKGZ1bmN0aW9uKHQpe3JldHVybiB0LmlzSW5mKGUpfSkseyR4OmV9LChmdW5jdGlvbih0KXtyZXR1cm57JHg6ZnVuY3Rpb24oKXtyZXR1cm4gWG4odCl9fX0pKX19KSxEdT1Bbih7aXNGaW5pdGVfOmZ1bmN0aW9uKHQpe3ZhciBlPW1uKHQsXCJ4XCIsXCJpc0Zpbml0ZVwiKTtyZXR1cm4gTHQucnVuS2VybmVsRnVuYygoZnVuY3Rpb24odCl7cmV0dXJuIHQuaXNGaW5pdGUoZSl9KSx7JHg6ZX0sKGZ1bmN0aW9uKHQpe3JldHVybnskeDpmdW5jdGlvbigpe3JldHVybiBYbih0KX19fSkpfX0pLFR1PUFuKHtzaW5fOmZ1bmN0aW9uKHQpe3ZhciBlPW1uKHQsXCJ4XCIsXCJzaW5cIiksbj1bZV07cmV0dXJuIEx0LnJ1bktlcm5lbEZ1bmMoKGZ1bmN0aW9uKHQsbil7dmFyIHI9dC5zaW4oZSk7cmV0dXJuIG4oW2VdKSxyfSkse3g6ZX0sKGZ1bmN0aW9uKHQsZSl7dmFyIG49ZVswXTtyZXR1cm57eDpmdW5jdGlvbigpe3JldHVybiBuLnRvRmxvYXQoKS5jb3MoKS5tdWwodCl9fX0pLFwiU2luXCIse30sbil9fSksTnU9QW4oe3NpbmhfOmZ1bmN0aW9uKHQpe3ZhciBlPW1uKHQsXCJ4XCIsXCJzaW5oXCIpO3JldHVybiBMdC5ydW5LZXJuZWxGdW5jKChmdW5jdGlvbih0LG4pe3ZhciByPXQuc2luaChlKTtyZXR1cm4gbihbZV0pLHJ9KSx7JHg6ZX0sKGZ1bmN0aW9uKHQsZSl7dmFyIG49ZVswXTtyZXR1cm57JHg6ZnVuY3Rpb24oKXtyZXR1cm4gbi50b0Zsb2F0KCkuY29zaCgpLm11bFN0cmljdCh0KX19fSkpfX0pLEZ1PUFuKHtzb2Z0cGx1c186ZnVuY3Rpb24odCl7dmFyIGU9bW4odCxcInhcIixcInNvZnRwbHVzXCIpO3JldHVybiBMdC5ydW5LZXJuZWxGdW5jKChmdW5jdGlvbih0LG4pe3ZhciByPXQuc29mdHBsdXMoZSk7cmV0dXJuIG4oW2VdKSxyfSkseyR4OmV9LChmdW5jdGlvbih0LGUpe3ZhciBuPWVbMF07cmV0dXJueyR4OmZ1bmN0aW9uKCl7cmV0dXJuIHQubXVsKG4uc2lnbW9pZCgpKX19fSkpfX0pLF91PUFuKHtzcXJ0XzpmdW5jdGlvbih0KXt2YXIgZT1tbih0LFwieFwiLFwic3FydFwiKTtyZXR1cm4gTHQucnVuS2VybmVsRnVuYygoZnVuY3Rpb24odCxuKXt2YXIgcj10LnNxcnQoZSk7cmV0dXJuIG4oW2VdKSxyfSkseyR4OmV9LChmdW5jdGlvbih0LGUpe3ZhciBuPWVbMF07cmV0dXJueyR4OmZ1bmN0aW9uKCl7cmV0dXJuIHQuZGl2KG4udG9GbG9hdCgpLnNxcnQoKS5tdWwoMikpfX19KSl9fSksT3U9QW4oe3N0ZXBfOmZ1bmN0aW9uKHQsZSl7dm9pZCAwPT09ZSYmKGU9MCk7dmFyIG49bW4odCxcInhcIixcInN0ZXBcIik7cmV0dXJuIEx0LnJ1bktlcm5lbEZ1bmMoKGZ1bmN0aW9uKHQpe3JldHVybiB0LnN0ZXAobixlKX0pLHskeDpufSwoZnVuY3Rpb24odCl7cmV0dXJueyR4OmZ1bmN0aW9uKCl7cmV0dXJuIFhuKHQpfX19KSl9fSksTXU9QW4oe3Rhbl86ZnVuY3Rpb24odCl7dmFyIGU9bW4odCxcInhcIixcInRhblwiKTtyZXR1cm4gTHQucnVuS2VybmVsRnVuYygoZnVuY3Rpb24odCxuKXt2YXIgcj10LnRhbihlKTtyZXR1cm4gbihbZV0pLHJ9KSx7JHg6ZX0sKGZ1bmN0aW9uKHQsZSl7dmFyIG49ZVswXTtyZXR1cm57JHg6ZnVuY3Rpb24oKXtyZXR1cm4gdC5kaXYobi5jb3MoKS5zcXVhcmUoKSl9fX0pKX19KSxCdT1Bbih7dGFuaF86ZnVuY3Rpb24odCl7dmFyIGU9bW4odCxcInhcIixcInRhbmhcIik7cmV0dXJuIEx0LnJ1bktlcm5lbEZ1bmMoKGZ1bmN0aW9uKHQsbil7dmFyIHI9dC50YW5oKGUpO3JldHVybiBuKFtyXSkscn0pLHt4OmV9LChmdW5jdGlvbih0LGUpe3ZhciBuPWVbMF07cmV0dXJue3g6ZnVuY3Rpb24oKXtyZXR1cm4gT24oMSkuc3ViKG4uc3F1YXJlKCkpLm11bFN0cmljdCh0KX19fSksXCJUYW5oXCIse30sbnVsbCxbITBdKX19KTtmdW5jdGlvbiBQdSh0LGUsbixyLG8sYSl7dmFyIGkscyx1PW1uKHQsXCJ4XCIsXCJiYXRjaE5vcm1cIiksYz1tbihlLFwibWVhblwiLFwiYmF0Y2hOb3JtXCIpLGw9bW4obixcInZhcmlhbmNlXCIsXCJiYXRjaE5vcm1cIik7cmV0dXJuIG51bGwhPW8mJihpPW1uKG8sXCJzY2FsZVwiLFwiYmF0Y2hOb3JtXCIpKSxudWxsIT1yJiYocz1tbihyLFwib2Zmc2V0XCIsXCJiYXRjaE5vcm1cIikpLEMoMj09PXUucmFuaywoZnVuY3Rpb24oKXtyZXR1cm5cIkVycm9yIGluIGJhdGNoTm9ybTNEOiB4IG11c3QgYmUgcmFuayAzIGJ1dCBnb3QgcmFuayBcIit1LnJhbmsrXCIuXCJ9KSksQygyPT09Yy5yYW5rfHwxPT09Yy5yYW5rLChmdW5jdGlvbigpe3JldHVyblwiRXJyb3IgaW4gYmF0Y2hOb3JtMkQ6IG1lYW4gbXVzdCBiZSByYW5rIDIgb3IgcmFuayAxIGJ1dCBnb3QgcmFuayBcIitjLnJhbmsrXCIuXCJ9KSksQygyPT09bC5yYW5rfHwxPT09bC5yYW5rLChmdW5jdGlvbigpe3JldHVyblwiRXJyb3IgaW4gYmF0Y2hOb3JtMkQ6IHZhcmlhbmNlIG11c3QgYmUgcmFuayAyIG9yIHJhbmsgMSBidXQgZ290IHJhbmsgXCIrbC5yYW5rK1wiLlwifSkpLG51bGwhPWkmJkMoMj09PWkucmFua3x8MT09PWkucmFuaywoZnVuY3Rpb24oKXtyZXR1cm5cIkVycm9yIGluIGJhdGNoTm9ybTJEOiBzY2FsZSBtdXN0IGJlIHJhbmsgMiBvciByYW5rIDEgYnV0IGdvdCByYW5rIFwiK2kucmFuaytcIi5cIn0pKSxudWxsIT1zJiZDKDI9PT1zLnJhbmt8fDE9PT1zLnJhbmssKGZ1bmN0aW9uKCl7cmV0dXJuXCJFcnJvciBpbiBiYXRjaE5vcm0yRDogb2Zmc2V0IG11c3QgYmUgcmFuayAyIG9yIHJhbmsgMSBidXQgZ290IHJhbmsgXCIrcy5yYW5rK1wiLlwifSkpLFV1KHUsYyxsLHMsaSxhKX1mdW5jdGlvbiBMdSh0LGUsbixyLG8sYSl7dmFyIGkscyx1PW1uKHQsXCJ4XCIsXCJiYXRjaE5vcm1cIiksYz1tbihlLFwibWVhblwiLFwiYmF0Y2hOb3JtXCIpLGw9bW4obixcInZhcmlhbmNlXCIsXCJiYXRjaE5vcm1cIik7cmV0dXJuIG51bGwhPW8mJihpPW1uKG8sXCJzY2FsZVwiLFwiYmF0Y2hOb3JtXCIpKSxudWxsIT1yJiYocz1tbihyLFwib2Zmc2V0XCIsXCJiYXRjaE5vcm1cIikpLEMoMz09PXUucmFuaywoZnVuY3Rpb24oKXtyZXR1cm5cIkVycm9yIGluIGJhdGNoTm9ybTNEOiB4IG11c3QgYmUgcmFuayAzIGJ1dCBnb3QgcmFuayBcIit1LnJhbmsrXCIuXCJ9KSksQygzPT09Yy5yYW5rfHwxPT09Yy5yYW5rLChmdW5jdGlvbigpe3JldHVyblwiRXJyb3IgaW4gYmF0Y2hOb3JtM0Q6IG1lYW4gbXVzdCBiZSByYW5rIDMgb3IgcmFuayAxIGJ1dCBnb3QgcmFuayBcIitjLnJhbmsrXCIuXCJ9KSksQygzPT09bC5yYW5rfHwxPT09bC5yYW5rLChmdW5jdGlvbigpe3JldHVyblwiRXJyb3IgaW4gYmF0Y2hOb3JtM0Q6IHZhcmlhbmNlIG11c3QgYmUgcmFuayAzIG9yIHJhbmsgMSBidXQgZ290IHJhbmsgXCIrbC5yYW5rK1wiLlwifSkpLG51bGwhPWkmJkMoMz09PWkucmFua3x8MT09PWkucmFuaywoZnVuY3Rpb24oKXtyZXR1cm5cIkVycm9yIGluIGJhdGNoTm9ybTNEOiBzY2FsZSBtdXN0IGJlIHJhbmsgMyBvciByYW5rIDEgYnV0IGdvdCByYW5rIFwiK2kucmFuaytcIi5cIn0pKSxudWxsIT1zJiZDKDM9PT1zLnJhbmt8fDE9PT1zLnJhbmssKGZ1bmN0aW9uKCl7cmV0dXJuXCJFcnJvciBpbiBiYXRjaE5vcm0zRDogb2Zmc2V0IG11c3QgYmUgcmFuayAzIG9yIHJhbmsgMSBidXQgZ290IHJhbmsgXCIrcy5yYW5rK1wiLlwifSkpLFV1KHUsYyxsLHMsaSxhKX1mdW5jdGlvbiBXdSh0LGUsbixyLG8sYSl7dmFyIGkscyx1PW1uKHQsXCJ4XCIsXCJiYXRjaE5vcm1cIiksYz1tbihlLFwibWVhblwiLFwiYmF0Y2hOb3JtXCIpLGw9bW4obixcInZhcmlhbmNlXCIsXCJiYXRjaE5vcm1cIik7cmV0dXJuIG51bGwhPW8mJihpPW1uKG8sXCJzY2FsZVwiLFwiYmF0Y2hOb3JtXCIpKSxudWxsIT1yJiYocz1tbihyLFwib2Zmc2V0XCIsXCJiYXRjaE5vcm1cIikpLEMoND09PXUucmFuaywoZnVuY3Rpb24oKXtyZXR1cm5cIkVycm9yIGluIGJhdGNoTm9ybTREOiB4IG11c3QgYmUgcmFuayA0IGJ1dCBnb3QgcmFuayBcIit1LnJhbmsrXCIuXCJ9KSksQyg0PT09Yy5yYW5rfHwxPT09Yy5yYW5rLChmdW5jdGlvbigpe3JldHVyblwiRXJyb3IgaW4gYmF0Y2hOb3JtNEQ6IG1lYW4gbXVzdCBiZSByYW5rIDQgb3IgcmFuayAxIGJ1dCBnb3QgcmFuayBcIitjLnJhbmsrXCIuXCJ9KSksQyg0PT09bC5yYW5rfHwxPT09bC5yYW5rLChmdW5jdGlvbigpe3JldHVyblwiRXJyb3IgaW4gYmF0Y2hOb3JtNEQ6IHZhcmlhbmNlIG11c3QgYmUgcmFuayA0IG9yIHJhbmsgMSBidXQgZ290IHJhbmsgXCIrbC5yYW5rK1wiLlwifSkpLG51bGwhPWkmJkMoND09PWkucmFua3x8MT09PWkucmFuaywoZnVuY3Rpb24oKXtyZXR1cm5cIkVycm9yIGluIGJhdGNoTm9ybTREOiBzY2FsZSBtdXN0IGJlIHJhbmsgNCBvciByYW5rIDEgYnV0IGdvdCByYW5rIFwiK2kucmFuaytcIi5cIn0pKSxudWxsIT1zJiZDKDQ9PT1zLnJhbmt8fDE9PT1zLnJhbmssKGZ1bmN0aW9uKCl7cmV0dXJuXCJFcnJvciBpbiBiYXRjaE5vcm00RDogb2Zmc2V0IG11c3QgYmUgcmFuayA0IG9yIHJhbmsgMSBidXQgZ290IHJhbmsgXCIrcy5yYW5rK1wiLlwifSkpLFV1KHUsYyxsLHMsaSxhKX1mdW5jdGlvbiBVdSh0LGUsbixyLG8sYSl7bnVsbD09YSYmKGE9LjAwMSk7dmFyIGkscyx1LGM9bW4odCxcInhcIixcImJhdGNoTm9ybVwiKSxsPW1uKGUsXCJtZWFuXCIsXCJiYXRjaE5vcm1cIiksaD1tbihuLFwidmFyaWFuY2VcIixcImJhdGNoTm9ybVwiKTtudWxsIT1vJiYoaT1tbihvLFwic2NhbGVcIixcImJhdGNoTm9ybVwiKSksbnVsbCE9ciYmKHM9bW4ocixcIm9mZnNldFwiLFwiYmF0Y2hOb3JtXCIpKSxDKGwucmFuaz09PWgucmFuaywoZnVuY3Rpb24oKXtyZXR1cm5cIkJhdGNoIG5vcm1hbGl6YXRpb24gZ3JhZGllbnQgcmVxdWlyZXMgbWVhbiBhbmQgdmFyaWFuY2UgdG8gaGF2ZSBlcXVhbCByYW5rcy5cIn0pKSxDKG51bGw9PXN8fGwucmFuaz09PXMucmFuaywoZnVuY3Rpb24oKXtyZXR1cm5cIkJhdGNoIG5vcm1hbGl6YXRpb24gZ3JhZGllbnQgcmVxdWlyZXMgbWVhbiBhbmQgb2Zmc2V0IHRvIGhhdmUgZXF1YWwgcmFua3MuXCJ9KSksQyhudWxsPT1pfHxsLnJhbms9PT1pLnJhbmssKGZ1bmN0aW9uKCl7cmV0dXJuXCJCYXRjaCBub3JtYWxpemF0aW9uIGdyYWRpZW50IHJlcXVpcmVzIG1lYW4gYW5kIHNjYWxlIHRvIGhhdmUgZXF1YWwgcmFua3MuXCJ9KSksdT0wPT09Yy5yYW5rfHwxPT09Yy5yYW5rP2MuYXM0RCgxLDEsMSxjLnNpemUpOjI9PT1jLnJhbms/Yy5hczREKDEsMSxjLnNoYXBlWzBdLGMuc2hhcGVbMV0pOjM9PT1jLnJhbms/Yy5hczREKDEsYy5zaGFwZVswXSxjLnNoYXBlWzFdLGMuc2hhcGVbMl0pOmM7dmFyIGY9W2MsbCxoLGldO3JldHVybiBMdC5ydW5LZXJuZWxGdW5jKChmdW5jdGlvbih0LGUpe3ZhciBuPXQuYmF0Y2hOb3JtYWxpemF0aW9uKHUsVnUobCksVnUoaCksYSxWdShpKSxWdShzKSk7cmV0dXJuIGUoW2MsbCxoLGldKSxufSkse3g6YyxtZWFuOmwsdmFyaWFuY2U6aCxzY2FsZTppLG9mZnNldDpzfSwoZnVuY3Rpb24odCxlKXt2YXIgbj1lLHI9blswXSxvPW5bMV0saT1uWzJdLHM9blszXSxjPW51bGw9PXM/T24oMSk6cyxsPUVvKG8uc2hhcGUsdS5zaGFwZSksaD1bXTtpZigxPT09by5yYW5rKXtmb3IodmFyIGY9MDtmPHUuc2hhcGUubGVuZ3RoLTE7KytmKWgucHVzaCh1LnNoYXBlW2ZdKTtoLnB1c2goMSl9dmFyIGQ9ci5zdWIobykscD10Lm11bChjKSx2PVJ1KGkuYWRkKE9uKGEpKSksbT12Lm11bCh2KS5tdWwodikubXVsKE9uKC0uNSkpO3JldHVybnt4OmZ1bmN0aW9uKCl7cmV0dXJuIDE9PT1vLnJhbms/dC5tdWwoTHIodi5hczREKDEsMSwxLG8uc2hhcGVbMF0pLGgpKS5tdWwoYykucmVzaGFwZShyLnNoYXBlKTp0Lm11bCh2KS5tdWwoYykucmVzaGFwZShyLnNoYXBlKX0sbWVhbjpmdW5jdGlvbigpe3ZhciB0PXYubXVsKE9uKC0xKSkubXVsKHApO3JldHVybiAxPT09by5yYW5rJiYodD10LnN1bShsKSksdC5yZXNoYXBlKG8uc2hhcGUpfSx2YXJpYW5jZTpmdW5jdGlvbigpe3ZhciB0PW0ubXVsKGQpLm11bChwKTtyZXR1cm4gMT09PW8ucmFuayYmKHQ9dC5zdW0obCkpLHQucmVzaGFwZShvLnNoYXBlKX0sc2NhbGU6ZnVuY3Rpb24oKXt2YXIgZT1kLm11bCh2KSxuPXQubXVsKGUpO3JldHVybiAxPT09by5yYW5rJiYobj1uLnN1bShsKSksbi5yZXNoYXBlKG8uc2hhcGUpfSxvZmZzZXQ6ZnVuY3Rpb24oKXt2YXIgZT10O3JldHVybiAxPT09by5yYW5rJiYoZT1lLnN1bShsKSksZS5yZXNoYXBlKG8uc2hhcGUpfX19KSxcIkJhdGNoTm9ybWFsaXphdGlvblwiLHt2YXJpYW5jZUVwc2lsb246YX0sZikucmVzaGFwZShjLnNoYXBlKX1mdW5jdGlvbiBWdSh0KXtyZXR1cm4gbnVsbD09dD9udWxsOjA9PT10LnJhbms/dC5hczFEKCk6MT09PXQucmFuaz90OjI9PT10LnJhbms/dC5hczREKDEsMSx0LnNoYXBlWzBdLHQuc2hhcGVbMV0pOjM9PT10LnJhbms/dC5hczREKDEsdC5zaGFwZVswXSx0LnNoYXBlWzFdLHQuc2hhcGVbMl0pOnR9ZnVuY3Rpb24genUoKXtYZShcInRmLmJhdGNoTm9ybWFsaXphdGlvbigpIGlzIGdvaW5nIGF3YXkuIFVzZSB0Zi5iYXRjaE5vcm0oKSBpbnN0ZWFkLCBhbmQgbm90ZSB0aGUgcG9zaXRpb25hbCBhcmd1bWVudCBjaGFuZ2Ugb2Ygc2NhbGUsIG9mZnNldCwgYW5kIHZhcmlhbmNlRXBzaWxvblwiKX12YXIgR3U9QW4oe2JhdGNoTm9ybWFsaXphdGlvbjJkXzpmdW5jdGlvbih0LGUsbixyLG8sYSl7cmV0dXJuIHZvaWQgMD09PXImJihyPS4wMDEpLHp1KCksUHUodCxlLG4sYSxvLHIpfX0pLEh1PUFuKHtiYXRjaE5vcm1hbGl6YXRpb24zZF86ZnVuY3Rpb24odCxlLG4scixvLGEpe3JldHVybiB2b2lkIDA9PT1yJiYocj0uMDAxKSx6dSgpLEx1KHQsZSxuLGEsbyxyKX19KSxxdT1Bbih7YmF0Y2hOb3JtYWxpemF0aW9uNGRfOmZ1bmN0aW9uKHQsZSxuLHIsbyxhKXtyZXR1cm4gdm9pZCAwPT09ciYmKHI9LjAwMSksenUoKSxXdSh0LGUsbixhLG8scil9fSksS3U9QW4oe2JhdGNoTm9ybWFsaXphdGlvbl86ZnVuY3Rpb24odCxlLG4scixvLGEpe3JldHVybiB2b2lkIDA9PT1yJiYocj0uMDAxKSx6dSgpLFV1KHQsZSxuLGEsbyxyKX19KSxqdT1Bbih7YmF0Y2hOb3JtXzpVdX0pLFh1PUFuKHtiYXRjaE5vcm0yZF86UHV9KSxZdT1Bbih7YmF0Y2hOb3JtM2RfOkx1fSksJHU9QW4oe2JhdGNoTm9ybTRkXzpXdX0pO3ZhciBRdT1Bbih7bG9naWNhbEFuZF86ZnVuY3Rpb24odCxlKXt2YXIgbj1tbih0LFwiYVwiLFwibG9naWNhbEFuZFwiLFwiYm9vbFwiKSxyPW1uKGUsXCJiXCIsXCJsb2dpY2FsQW5kXCIsXCJib29sXCIpO3JldHVybiBSbyhuLnNoYXBlLHIuc2hhcGUpLEx0LnJ1bktlcm5lbEZ1bmMoKGZ1bmN0aW9uKHQpe3JldHVybiB0LmxvZ2ljYWxBbmQobixyKX0pLHthOm4sYjpyfSxudWxsLFwiTG9naWNhbEFuZFwiKX19KSxKdT1Bbih7bG9naWNhbE5vdF86ZnVuY3Rpb24odCl7dmFyIGU9bW4odCxcInhcIixcImxvZ2ljYWxOb3RcIixcImJvb2xcIik7cmV0dXJuIEx0LnJ1bktlcm5lbEZ1bmMoKGZ1bmN0aW9uKHQpe3JldHVybiB0LmxvZ2ljYWxOb3QoZSl9KSx7JHg6ZX0pfX0pLFp1PUFuKHtsb2dpY2FsT3JfOmZ1bmN0aW9uKHQsZSl7dmFyIG49bW4odCxcImFcIixcImxvZ2ljYWxPclwiLFwiYm9vbFwiKSxyPW1uKGUsXCJiXCIsXCJsb2dpY2FsT3JcIixcImJvb2xcIik7cmV0dXJuIFJvKG4uc2hhcGUsci5zaGFwZSksTHQucnVuS2VybmVsRnVuYygoZnVuY3Rpb24odCl7cmV0dXJuIHQubG9naWNhbE9yKG4scil9KSx7JGE6biwkYjpyfSl9fSksdGM9QW4oe2xvZ2ljYWxYb3JfOmZ1bmN0aW9uKHQsZSl7dmFyIG49bW4odCxcImFcIixcImxvZ2ljYWxYb3JcIixcImJvb2xcIikscj1tbihlLFwiYlwiLFwibG9naWNhbFhvclwiLFwiYm9vbFwiKTtyZXR1cm4gUm8obi5zaGFwZSxyLnNoYXBlKSxadSh0LGUpLmxvZ2ljYWxBbmQoUXUodCxlKS5sb2dpY2FsTm90KCkpfX0pLGVjPUFuKHt3aGVyZV86ZnVuY3Rpb24odCxlLG4pe3ZhciByPW1uKGUsXCJhXCIsXCJ3aGVyZVwiKSxvPW1uKG4sXCJiXCIsXCJ3aGVyZVwiKSxhPW1uKHQsXCJjb25kaXRpb25cIixcIndoZXJlXCIsXCJib29sXCIpO3JldHVybiBFKHIuc2hhcGUsby5zaGFwZSxcIkVycm9yIGluIHdoZXJlOiBcIiksMT09PWEucmFuaz9DKGEuc2hhcGVbMF09PT1yLnNoYXBlWzBdLChmdW5jdGlvbigpe3JldHVyblwiVGhlIGZpcnN0IGRpbWVuc2lvbiBvZiBgYWAgbXVzdCBtYXRjaCB0aGUgc2l6ZSBvZiBgY29uZGl0aW9uYC5cIn0pKTpFKGEuc2hhcGUsby5zaGFwZSxcIkVycm9yIGluIHdoZXJlOiBcIiksTHQucnVuS2VybmVsRnVuYygoZnVuY3Rpb24odCxlKXt2YXIgbj10LnNlbGVjdChhLHIsbyk7cmV0dXJuIGUoW2FdKSxufSkseyRjb25kaXRpb246YSwkYTpyLCRiOm99LChmdW5jdGlvbih0LGUpe3ZhciBuPWVbMF07cmV0dXJueyRjb25kaXRpb246ZnVuY3Rpb24oKXtyZXR1cm4gWG4obikudG9GbG9hdCgpfSwkYTpmdW5jdGlvbigpe3JldHVybiB0Lm11bChuLmNhc3QodC5kdHlwZSkpfSwkYjpmdW5jdGlvbigpe3JldHVybiB0Lm11bChuLmxvZ2ljYWxOb3QoKS5jYXN0KHQuZHR5cGUpKX19fSkpfX0pLG5jPWZ1bmN0aW9uKHQpe3JldHVybiBuKHRoaXMsdm9pZCAwLHZvaWQgMCwoZnVuY3Rpb24oKXt2YXIgZSxuLG87cmV0dXJuIHIodGhpcywoZnVuY3Rpb24ocil7c3dpdGNoKHIubGFiZWwpe2Nhc2UgMDpyZXR1cm5bNCwoZT1tbih0LFwiY29uZGl0aW9uXCIsXCJ3aGVyZUFzeW5jXCIsXCJib29sXCIpKS5kYXRhKCldO2Nhc2UgMTpyZXR1cm4gbj1yLnNlbnQoKSxvPW5hKGUuc2hhcGUsbiksdCE9PWUmJmUuZGlzcG9zZSgpLFsyLG9dfX0pKX0pKX07dmFyIHJjPUFuKHthZGRfOmZ1bmN0aW9uKHQsZSl7dmFyIG4scj1tbih0LFwiYVwiLFwiYWRkXCIpLG89bW4oZSxcImJcIixcImFkZFwiKTtuPU50KHIsbykscj1uWzBdLG89blsxXTt2YXIgYT1SbyhyLnNoYXBlLG8uc2hhcGUpO3JldHVybiBMdC5ydW5LZXJuZWxGdW5jKChmdW5jdGlvbih0KXtyZXR1cm4gdC5hZGQocixvKX0pLHthOnIsYjpvfSwoZnVuY3Rpb24odCl7cmV0dXJue2E6ZnVuY3Rpb24oKXt2YXIgZT10LG49RW8oci5zaGFwZSxhKTtyZXR1cm4gbi5sZW5ndGg+MCYmKGU9ZS5zdW0obikpLGUucmVzaGFwZShyLnNoYXBlKX0sYjpmdW5jdGlvbigpe3ZhciBlPXQsbj1FbyhvLnNoYXBlLGEpO3JldHVybiBuLmxlbmd0aD4wJiYoZT1lLnN1bShuKSksZS5yZXNoYXBlKG8uc2hhcGUpfX19KSxcIkFkZFwiKX19KSxvYz1Bbih7YWRkTl86ZnVuY3Rpb24odCl7QyhBcnJheS5pc0FycmF5KHQpLChmdW5jdGlvbigpe3JldHVyblwiVGhlIGFyZ3VtZW50IHBhc3NlZCB0byB0Zi5hZGROKCkgbXVzdCBiZSBhIGxpc3Qgb2YgdGVuc29yc1wifSkpLEModC5sZW5ndGg+PTEsKGZ1bmN0aW9uKCl7cmV0dXJuXCJNdXN0IHBhc3MgYXQgbGVhc3Qgb25lIHRlbnNvciB0byB0Zi5hZGROKCksIGJ1dCBnb3QgXCIrdC5sZW5ndGh9KSk7dmFyIGU9dC5tYXAoKGZ1bmN0aW9uKHQsZSl7cmV0dXJuIG1uKHQsXCJ0ZW5zb3JzXCIrZSxcImFkZE5cIil9KSksbj1lWzBdO2UuZm9yRWFjaCgoZnVuY3Rpb24odCl7aWYodC5kdHlwZSE9PW4uZHR5cGUpdGhyb3cgbmV3IEVycm9yKFwiQWxsIHRlbnNvcnMgcGFzc2VkIHRvIHRmLmFkZE4oKSBtdXN0IGhhdmUgdGhlIHNhbWUgZHR5cGVcIil9KSksZS5mb3JFYWNoKChmdW5jdGlvbih0KXtpZighUyh0LnNoYXBlLG4uc2hhcGUpKXRocm93IG5ldyBFcnJvcihcIkFsbCB0ZW5zb3JzIHBhc3NlZCB0byB0Zi5hZGROKCkgbXVzdCBoYXZlIHRoZSBzYW1lIHNoYXBlXCIpfSkpO3ZhciByPWU7cmV0dXJuIEx0LnJ1bktlcm5lbEZ1bmMoKGZ1bmN0aW9uKHQpe3JldHVybiB0LmFkZE4oZSl9KSxyLChmdW5jdGlvbih0KXt2YXIgbj17fTtyZXR1cm4gZS5mb3JFYWNoKChmdW5jdGlvbihlLHIpe25bcl09ZnVuY3Rpb24oKXtyZXR1cm4gdC5jbG9uZSgpfX0pKSxufSksXCJBZGROXCIpfX0pLGFjPUFuKHthZGRTdHJpY3RfOmZ1bmN0aW9uKHQsZSl7dmFyIG49bW4odCxcImFcIixcImFkZFN0cmljdFwiKSxyPW1uKGUsXCJiXCIsXCJhZGRTdHJpY3RcIik7cmV0dXJuIEUobi5zaGFwZSxyLnNoYXBlLFwiRXJyb3IgaW4gYWRkU3RyaWN0OiBcIiksbi5hZGQocil9fSksaWM9QW4oe2F0YW4yXzpmdW5jdGlvbih0LGUpe3ZhciBuLHI9bW4odCxcImFcIixcImF0YW4yXCIpLG89bW4oZSxcImJcIixcImF0YW4yXCIpO249TnQocixvKSxyPW5bMF0sbz1uWzFdO3ZhciBhPVJvKHIuc2hhcGUsby5zaGFwZSk7cmV0dXJuIEx0LnJ1bktlcm5lbEZ1bmMoKGZ1bmN0aW9uKHQsZSl7dmFyIG49dC5hdGFuMihyLG8pO3JldHVybiBlKFtyLG9dKSxufSkseyRhOnIsJGI6b30sKGZ1bmN0aW9uKHQsZSl7dmFyIG49ZVswXSxyPWVbMV07cmV0dXJueyRhOmZ1bmN0aW9uKCl7dmFyIGU9cmMobi5zcXVhcmUoKSxyLnNxdWFyZSgpKSxvPXQubXVsKHIuZGl2KGUpKSxpPUVvKG4uc2hhcGUsYSk7cmV0dXJuIGkubGVuZ3RoPjAmJihvPW8uc3VtKGkpKSxvLnJlc2hhcGUobi5zaGFwZSl9LCRiOmZ1bmN0aW9uKCl7dmFyIGU9cmMobi5zcXVhcmUoKSxyLnNxdWFyZSgpKSxvPXd1KHQubXVsKG4uZGl2KGUpKSksaT1FbyhyLnNoYXBlLGEpO3JldHVybiBpLmxlbmd0aD4wJiYobz1vLnN1bShpKSksby5yZXNoYXBlKHIuc2hhcGUpfX19KSl9fSksc2M9QW4oe2Rpdl86ZnVuY3Rpb24odCxlKXt2YXIgbixyPW1uKHQsXCJhXCIsXCJkaXZcIiksbz1tbihlLFwiYlwiLFwiZGl2XCIpO2lmKG49TnQocixvKSxyPW5bMF0sbz1uWzFdLFwiaW50MzJcIj09PXIuZHR5cGUmJlwiaW50MzJcIj09PW8uZHR5cGUpcmV0dXJuIGxjKHIsbyk7dmFyIGE9Um8oci5zaGFwZSxvLnNoYXBlKTtyZXR1cm4gTHQucnVuS2VybmVsRnVuYygoZnVuY3Rpb24odCxlKXt2YXIgbj10LnJlYWxEaXZpZGUocixvKTtyZXR1cm4gZShbcixvXSksbn0pLHthOnIsYjpvfSwoZnVuY3Rpb24odCxlKXt2YXIgbj1lWzBdLHI9ZVsxXTtyZXR1cm57YTpmdW5jdGlvbigpe3ZhciBlPXQuZGl2KHIudG9GbG9hdCgpKSxvPUVvKG4uc2hhcGUsYSk7cmV0dXJuIG8ubGVuZ3RoPjA/ZS5zdW0obykucmVzaGFwZShuLnNoYXBlKTplfSxiOmZ1bmN0aW9uKCl7dmFyIGU9dC5tdWwobi50b0Zsb2F0KCkpLG89RW8oci5zaGFwZSxhKTtvLmxlbmd0aD4wJiYoZT1lLnN1bShvKS5yZXNoYXBlKHIuc2hhcGUpKTt2YXIgaT1yLnNxdWFyZSgpO3JldHVybiBlLmRpdihpLnRvRmxvYXQoKSkubmVnKCl9fX0pLFwiRGl2XCIpfX0pLHVjPUFuKHtkaXZOb05hbl86ZnVuY3Rpb24odCxlKXt2YXIgbixyPW1uKHQsXCJhXCIsXCJkaXZcIiksbz1tbihlLFwiYlwiLFwiZGl2XCIpO3I9KG49TnQocixvKSlbMF0sbz1uWzFdO3ZhciBhPXNjKHIsbyksaT1YbihhKSxzPW8uZXF1YWwoaSk7cmV0dXJuIGVjKHMsaSxhKX19KSxjYz1Bbih7ZGl2U3RyaWN0XzpmdW5jdGlvbih0LGUpe3ZhciBuPW1uKHQsXCJhXCIsXCJkaXZcIikscj1tbihlLFwiYlwiLFwiZGl2XCIpO3JldHVybiBFKG4uc2hhcGUsci5zaGFwZSxcIkVycm9yIGluIGRpdmlkZVN0cmljdDogXCIpLG4uZGl2KHIpfX0pLGxjPUFuKHtmbG9vckRpdl86ZnVuY3Rpb24odCxlKXt2YXIgbixyPW1uKHQsXCJhXCIsXCJmbG9vckRpdlwiKSxvPW1uKGUsXCJiXCIsXCJmbG9vckRpdlwiKTtuPU50KHIsbykscj1uWzBdLG89blsxXTt2YXIgYT1SbyhyLnNoYXBlLG8uc2hhcGUpO3JldHVybiBMdC5ydW5LZXJuZWxGdW5jKChmdW5jdGlvbih0LGUpe3ZhciBuPXQuZmxvb3JEaXYocixvKTtyZXR1cm4gZShbcixvXSksbn0pLHthOnIsYjpvfSwoZnVuY3Rpb24odCxlKXt2YXIgbj1lWzBdLHI9ZVsxXTtyZXR1cm57YTpmdW5jdGlvbigpe3ZhciBlPXQuZGl2KHIudG9GbG9hdCgpKSxvPUVvKG4uc2hhcGUsYSk7cmV0dXJuIG8ubGVuZ3RoPjA/ZS5zdW0obykucmVzaGFwZShuLnNoYXBlKTplfSxiOmZ1bmN0aW9uKCl7dmFyIGU9dC5tdWwobi50b0Zsb2F0KCkpLG89RW8oci5zaGFwZSxhKTtvLmxlbmd0aD4wJiYoZT1lLnN1bShvKS5yZXNoYXBlKHIuc2hhcGUpKTt2YXIgaT1yLnNxdWFyZSgpO3JldHVybiBlLmRpdihpLnRvRmxvYXQoKSkubmVnKCl9fX0pLFwiRmxvb3JEaXZcIil9fSksaGM9QW4oe21heGltdW1fOmZ1bmN0aW9uKHQsZSl7dmFyIG4scj1tbih0LFwiYVwiLFwibWF4aW11bVwiKSxvPW1uKGUsXCJiXCIsXCJtYXhpbXVtXCIpO3JldHVybiBuPU50KHIsbykscj1uWzBdLG89blsxXSxcImJvb2xcIj09PXIuZHR5cGUmJihyPXIudG9JbnQoKSxvPW8udG9JbnQoKSksUm8oci5zaGFwZSxvLnNoYXBlKSxMdC5ydW5LZXJuZWxGdW5jKChmdW5jdGlvbih0LGUpe3ZhciBuPXQubWF4aW11bShyLG8pO3JldHVybiBlKFtyLG9dKSxufSkse2E6cixiOm99LChmdW5jdGlvbih0LGUpe3ZhciBuPWVbMF0scj1lWzFdO3JldHVybnthOmZ1bmN0aW9uKCl7cmV0dXJuIHQubXVsKG4uZ3JlYXRlckVxdWFsKHIpLnRvRmxvYXQoKSl9LGI6ZnVuY3Rpb24oKXtyZXR1cm4gdC5tdWwobi5sZXNzKHIpLnRvRmxvYXQoKSl9fX0pLFwiTWF4aW11bVwiKX19KSxmYz1Bbih7bWF4aW11bVN0cmljdF86ZnVuY3Rpb24odCxlKXt2YXIgbj1tbih0LFwiYVwiLFwibWF4aW11bVN0cmljdFwiKSxyPW1uKGUsXCJiXCIsXCJtYXhpbXVtU3RyaWN0XCIpO3JldHVybiBFKG4uc2hhcGUsci5zaGFwZSxcIkVycm9yIGluIG1heGltdW1TdHJpY3Q6IFwiKSxuLm1heGltdW0ocil9fSksZGM9QW4oe21pbmltdW1fOmZ1bmN0aW9uKHQsZSl7dmFyIG4scj1tbih0LFwiYVwiLFwibWluaW11bVwiKSxvPW1uKGUsXCJiXCIsXCJtaW5pbXVtXCIpO3JldHVybiBuPU50KHIsbykscj1uWzBdLG89blsxXSxcImJvb2xcIj09PXIuZHR5cGUmJihyPXIudG9JbnQoKSxvPW8udG9JbnQoKSksUm8oci5zaGFwZSxvLnNoYXBlKSxMdC5ydW5LZXJuZWxGdW5jKChmdW5jdGlvbih0LGUpe3ZhciBuPXQubWluaW11bShyLG8pO3JldHVybiBlKFtyLG9dKSxufSkse2E6cixiOm99LChmdW5jdGlvbih0LGUpe3ZhciBuPWVbMF0scj1lWzFdO3JldHVybnthOmZ1bmN0aW9uKCl7cmV0dXJuIHQubXVsKG4ubGVzc0VxdWFsKHIpLnRvRmxvYXQoKSl9LGI6ZnVuY3Rpb24oKXtyZXR1cm4gdC5tdWwobi5ncmVhdGVyKHIpLnRvRmxvYXQoKSl9fX0pLFwiTWluaW11bVwiKX19KSxwYz1Bbih7bWluaW11bVN0cmljdF86ZnVuY3Rpb24odCxlKXt2YXIgbj1tbih0LFwiYVwiLFwibWluaW11bVN0cmljdFwiKSxyPW1uKGUsXCJiXCIsXCJtaW5pbXVtU3RyaWN0XCIpO3JldHVybiBFKG4uc2hhcGUsci5zaGFwZSxcIkVycm9yIGluIG1pbmltdW1TdHJpY3Q6IFwiKSxuLm1pbmltdW0ocil9fSksdmM9QW4oe21vZF86ZnVuY3Rpb24odCxlKXt2YXIgbixyPW1uKHQsXCJhXCIsXCJtb2RcIiksbz1tbihlLFwiYlwiLFwibW9kXCIpO249TnQocixvKSxyPW5bMF0sbz1uWzFdO3ZhciBhPVJvKHIuc2hhcGUsby5zaGFwZSk7cmV0dXJuIEx0LnJ1bktlcm5lbEZ1bmMoKGZ1bmN0aW9uKHQsZSl7dmFyIG49dC5tb2QocixvKTtyZXR1cm4gZShbcixvXSksbn0pLHskYTpyLCRiOm99LChmdW5jdGlvbih0LGUpe3ZhciBuPWVbMF0scj1lWzFdO3JldHVybnskYTpmdW5jdGlvbigpe3ZhciBlPUVvKG4uc2hhcGUsYSk7cmV0dXJuIGUubGVuZ3RoPjA/dC5zdW0oZSkucmVzaGFwZShuLnNoYXBlKTp0fSwkYjpmdW5jdGlvbigpe3ZhciBlPXQubXVsKG4uZGl2KHIpLmZsb29yKCkubmVnKCkpLG89RW8oci5zaGFwZSxhKTtyZXR1cm4gby5sZW5ndGg+MD9lLnN1bShvKS5yZXNoYXBlKHIuc2hhcGUpOmV9fX0pKX19KSxtYz1Bbih7bW9kU3RyaWN0XzpmdW5jdGlvbih0LGUpe3ZhciBuPW1uKHQsXCJhXCIsXCJtb2RTdHJpY3RcIikscj1tbihlLFwiYlwiLFwibW9kU3RyaWN0XCIpO3JldHVybiBFKG4uc2hhcGUsci5zaGFwZSxcIkVycm9yIGluIG1vZFN0cmljdDogXCIpLG4ubW9kKHIpfX0pLGdjPUFuKHttdWxfOmZ1bmN0aW9uKHQsZSl7dmFyIG4scj1tbih0LFwiYVwiLFwibXVsXCIpLG89bW4oZSxcImJcIixcIm11bFwiKTtuPU50KHIsbykscj1uWzBdLG89blsxXTt2YXIgYT1SbyhyLnNoYXBlLG8uc2hhcGUpO3JldHVybiBMdC5ydW5LZXJuZWxGdW5jKChmdW5jdGlvbih0LGUpe3ZhciBuPXQubXVsdGlwbHkocixvKTtyZXR1cm4gZShbcixvXSksbn0pLHthOnIsYjpvfSwoZnVuY3Rpb24odCxlKXt2YXIgbj1lWzBdLHI9ZVsxXTtyZXR1cm57YTpmdW5jdGlvbigpe3ZhciBlPXQubXVsKHIudG9GbG9hdCgpKSxvPUVvKG4uc2hhcGUsYSk7cmV0dXJuIG8ubGVuZ3RoPjA/ZS5zdW0obykucmVzaGFwZShuLnNoYXBlKTplfSxiOmZ1bmN0aW9uKCl7dmFyIGU9dC5tdWwobi50b0Zsb2F0KCkpLG89RW8oci5zaGFwZSxhKTtyZXR1cm4gby5sZW5ndGg+MD9lLnN1bShvKS5yZXNoYXBlKHIuc2hhcGUpOmV9fX0pLFwiTXVsXCIpfX0pLHljPUFuKHttdWxTdHJpY3RfOmZ1bmN0aW9uKHQsZSl7dmFyIG49bW4odCxcImFcIixcIm11bFwiKSxyPW1uKGUsXCJiXCIsXCJtdWxcIik7cmV0dXJuIEUobi5zaGFwZSxyLnNoYXBlLFwiRXJyb3IgaW4gbXVsdGlwbHlTdHJpY3Q6IFwiKSxuLm11bChyKX19KSx4Yz1Bbih7cG93XzpmdW5jdGlvbih0LGUpe3ZhciBuLHI9bW4odCxcImJhc2VcIixcInBvd1wiKSxvPW1uKGUsXCJleHBcIixcInBvd1wiKTtuPU50KHIsbykscj1uWzBdLG89blsxXTt2YXIgYT1SbyhyLnNoYXBlLG8uc2hhcGUpLGk9W3Isb107cmV0dXJuIEx0LnJ1bktlcm5lbEZ1bmMoKGZ1bmN0aW9uKHQsZSl7dmFyIG49dC5wb3cocixvKTtyZXR1cm4gZShbcixvLG5dKSxufSkse2E6cixiOm99LChmdW5jdGlvbih0LGUpe3ZhciBuPWVbMF0scj1lWzFdLG89ZVsyXTtyZXR1cm57YTpmdW5jdGlvbigpe3ZhciBlPXIudG9GbG9hdCgpLG89dC5tdWwoZS5tdWwobi5wb3coZS5zdWIoT24oMSkpKSkpLGk9RW8obi5zaGFwZSxhKTtyZXR1cm4gaS5sZW5ndGg+MCYmKG89by5zdW0oaSkpLG8ucmVzaGFwZShuLnNoYXBlKX0sYjpmdW5jdGlvbigpe3ZhciBlPW4uZ3JlYXRlcigwKSxpPW4ubG9nKCkud2hlcmUoZSxYbihuKSkscz10Lm11bChvLm11bChpKSksdT1FbyhyLnNoYXBlLGEpO3JldHVybiB1Lmxlbmd0aD4wJiYocz1zLnN1bSh1KSkscy5yZXNoYXBlKHIuc2hhcGUpfX19KSxcIlBvd1wiLHt9LGksWyEwXSl9fSksYmM9QW4oe3Bvd1N0cmljdF86ZnVuY3Rpb24odCxlKXtyZXR1cm4gRSh0LnNoYXBlLGUuc2hhcGUsXCJFcnJvciBpbiBwb3dTdHJpY3Q6IFwiKSx0LnBvdyhlKX19KSx3Yz1Bbih7c3F1YXJlZERpZmZlcmVuY2VTdHJpY3RfOmZ1bmN0aW9uKHQsZSl7dmFyIG49bW4odCxcImFcIixcInNxdWFyZWREaWZmZXJlbmNlU3RyaWN0XCIpLHI9bW4oZSxcImJcIixcInNxdWFyZWREaWZmZXJlbmNlU3RyaWN0XCIpO3JldHVybiBFKG4uc2hhcGUsci5zaGFwZSxcIkVycm9yIGluIHNxdWFyZWREaWZmZXJlbmNlU3RyaWN0OiBcIiksbi5zcXVhcmVkRGlmZmVyZW5jZShyKX19KSxDYz1Bbih7c3ViXzpmdW5jdGlvbih0LGUpe3ZhciBuLHI9bW4odCxcImFcIixcInN1YlwiKSxvPW1uKGUsXCJiXCIsXCJzdWJcIik7bj1OdChyLG8pLHI9blswXSxvPW5bMV07dmFyIGE9Um8oci5zaGFwZSxvLnNoYXBlKTtyZXR1cm4gTHQucnVuS2VybmVsRnVuYygoZnVuY3Rpb24odCl7cmV0dXJuIHQuc3VidHJhY3QocixvKX0pLHthOnIsYjpvfSwoZnVuY3Rpb24odCl7cmV0dXJue2E6ZnVuY3Rpb24oKXt2YXIgZT10LG49RW8oci5zaGFwZSxhKTtyZXR1cm4gbi5sZW5ndGg+MCYmKGU9ZS5zdW0obikpLGUucmVzaGFwZShyLnNoYXBlKX0sYjpmdW5jdGlvbigpe3ZhciBlPXQsbj1FbyhvLnNoYXBlLGEpO3JldHVybiBuLmxlbmd0aD4wJiYoZT1lLnN1bShuKSksZS5uZWcoKS5yZXNoYXBlKG8uc2hhcGUpfX19KSxcIlN1YlwiKX19KSxFYz1Bbih7c3ViU3RyaWN0XzpmdW5jdGlvbih0LGUpe3ZhciBuPW1uKHQsXCJhXCIsXCJzdWJTdHJpY3RcIikscj1tbihlLFwiYlwiLFwic3ViU3RyaWN0XCIpO3JldHVybiBFKG4uc2hhcGUsci5zaGFwZSxcIkVycm9yIGluIHN1YlN0cmljdDogXCIpLG4uc3ViKHIpfX0pO3ZhciBSYz1Bbih7ZXF1YWxfOmZ1bmN0aW9uKHQsZSl7dmFyIG4scj1tbih0LFwiYVwiLFwiZXF1YWxcIiksbz1tbihlLFwiYlwiLFwiZXF1YWxcIik7cmV0dXJuIG49TnQocixvKSxyPW5bMF0sbz1uWzFdLFJvKHIuc2hhcGUsby5zaGFwZSksTHQucnVuS2VybmVsRnVuYygoZnVuY3Rpb24odCl7cmV0dXJuIHQuZXF1YWwocixvKX0pLHskYTpyLCRiOm99KX19KSxJYz1Bbih7ZXF1YWxTdHJpY3RfOmZ1bmN0aW9uKHQsZSl7dmFyIG49bW4odCxcImFcIixcImVxdWFsU3RyaWN0XCIpLHI9bW4oZSxcImJcIixcImVxdWFsU3RyaWN0XCIpO3JldHVybiBFKG4uc2hhcGUsci5zaGFwZSxcIkVycm9yIGluIGVxdWFsU3RyaWN0OiBcIiksbi5lcXVhbChyKX19KSxrYz1Bbih7Z3JlYXRlcl86ZnVuY3Rpb24odCxlKXt2YXIgbixyPW1uKHQsXCJhXCIsXCJncmVhdGVyXCIpLG89bW4oZSxcImJcIixcImdyZWF0ZXJcIik7cmV0dXJuIG49TnQocixvKSxyPW5bMF0sbz1uWzFdLFJvKHIuc2hhcGUsby5zaGFwZSksTHQucnVuS2VybmVsRnVuYygoZnVuY3Rpb24odCl7cmV0dXJuIHQuZ3JlYXRlcihyLG8pfSkse2E6cixiOm99LG51bGwsXCJHcmVhdGVyXCIpfX0pLFNjPUFuKHtncmVhdGVyRXF1YWxfOmZ1bmN0aW9uKHQsZSl7dmFyIG4scj1tbih0LFwiYVwiLFwiZ3JlYXRlckVxdWFsXCIpLG89bW4oZSxcImJcIixcImdyZWF0ZXJFcXVhbFwiKTtyZXR1cm4gbj1OdChyLG8pLHI9blswXSxvPW5bMV0sUm8oci5zaGFwZSxvLnNoYXBlKSxMdC5ydW5LZXJuZWxGdW5jKChmdW5jdGlvbih0LGUpe3ZhciBuPXQuZ3JlYXRlckVxdWFsKHIsbyk7cmV0dXJuIGUoW3Isb10pLG59KSx7YTpyLGI6b30sKGZ1bmN0aW9uKHQsZSl7dmFyIG49ZVswXSxyPWVbMV07cmV0dXJue2E6ZnVuY3Rpb24oKXtyZXR1cm4gWG4obil9LGI6ZnVuY3Rpb24oKXtyZXR1cm4gWG4ocil9fX0pLFwiR3JlYXRlckVxdWFsXCIpfX0pLEFjPUFuKHtncmVhdGVyRXF1YWxTdHJpY3RfOmZ1bmN0aW9uKHQsZSl7dmFyIG49bW4odCxcImFcIixcImdyZWF0ZXJFcXVhbFN0cmljdFwiKSxyPW1uKGUsXCJiXCIsXCJncmVhdGVyRXF1YWxTdHJpY3RcIik7cmV0dXJuIEUobi5zaGFwZSxyLnNoYXBlLFwiRXJyb3IgaW4gZ3JlYXRlckVxdWFsU3RyaWN0OiBcIiksbi5ncmVhdGVyRXF1YWwocil9fSksRGM9QW4oe2dyZWF0ZXJTdHJpY3RfOmZ1bmN0aW9uKHQsZSl7dmFyIG49bW4odCxcImFcIixcImdyZWF0ZXJTdHJpY3RcIikscj1tbihlLFwiYlwiLFwiZ3JlYXRlclN0cmljdFwiKTtyZXR1cm4gRShuLnNoYXBlLHIuc2hhcGUsXCJFcnJvciBpbiBncmVhdGVyU3RyaWN0OiBcIiksbi5ncmVhdGVyKHIpfX0pLFRjPUFuKHtsZXNzXzpmdW5jdGlvbih0LGUpe3ZhciBuLHI9bW4odCxcImFcIixcImxlc3NcIiksbz1tbihlLFwiYlwiLFwibGVzc1wiKTtyZXR1cm4gbj1OdChyLG8pLHI9blswXSxvPW5bMV0sUm8oci5zaGFwZSxvLnNoYXBlKSxMdC5ydW5LZXJuZWxGdW5jKChmdW5jdGlvbih0KXtyZXR1cm4gdC5sZXNzKHIsbyl9KSx7YTpyLGI6b30sbnVsbCxcIkxlc3NcIil9fSksTmM9QW4oe2xlc3NFcXVhbF86ZnVuY3Rpb24odCxlKXt2YXIgbixyPW1uKHQsXCJhXCIsXCJsZXNzRXF1YWxcIiksbz1tbihlLFwiYlwiLFwibGVzc0VxdWFsXCIpO3JldHVybiBuPU50KHIsbykscj1uWzBdLG89blsxXSxSbyhyLnNoYXBlLG8uc2hhcGUpLEx0LnJ1bktlcm5lbEZ1bmMoKGZ1bmN0aW9uKHQsZSl7dmFyIG49dC5sZXNzRXF1YWwocixvKTtyZXR1cm4gZShbcixvXSksbn0pLHthOnIsYjpvfSxudWxsLFwiTGVzc0VxdWFsXCIpfX0pLEZjPUFuKHtsZXNzRXF1YWxTdHJpY3RfOmZ1bmN0aW9uKHQsZSl7dmFyIG49bW4odCxcImFcIixcImxlc3NFcXVhbFN0cmljdFwiKSxyPW1uKGUsXCJiXCIsXCJsZXNzRXF1YWxTdHJpY3RcIik7cmV0dXJuIEUobi5zaGFwZSxyLnNoYXBlLFwiRXJyb3IgaW4gbGVzc0VxdWFsU3RyaWN0OiBcIiksbi5sZXNzRXF1YWwocil9fSksX2M9QW4oe2xlc3NTdHJpY3RfOmZ1bmN0aW9uKHQsZSl7dmFyIG49bW4odCxcImFcIixcImxlc3NTdHJpY3RcIikscj1tbihlLFwiYlwiLFwibGVzc1N0cmljdFwiKTtyZXR1cm4gRShuLnNoYXBlLHIuc2hhcGUsXCJFcnJvciBpbiBsZXNzU3RyaWN0OiBcIiksbi5sZXNzKHIpfX0pLE9jPUFuKHtub3RFcXVhbF86ZnVuY3Rpb24odCxlKXt2YXIgbixyPW1uKHQsXCJhXCIsXCJub3RFcXVhbFwiKSxvPW1uKGUsXCJiXCIsXCJub3RFcXVhbFwiKTtyZXR1cm4gbj1OdChyLG8pLHI9blswXSxvPW5bMV0sUm8oci5zaGFwZSxvLnNoYXBlKSxMdC5ydW5LZXJuZWxGdW5jKChmdW5jdGlvbih0KXtyZXR1cm4gdC5ub3RFcXVhbChyLG8pfSkse2E6cixiOm99LG51bGwsXCJOb3RFcXVhbFwiKX19KSxNYz1Bbih7bm90RXF1YWxTdHJpY3RfOmZ1bmN0aW9uKHQsZSl7dmFyIG49bW4odCxcImFcIixcIm5vdEVxdWFsU3RyaWN0XCIpLHI9bW4oZSxcImJcIixcIm5vdEVxdWFsU3RyaWN0XCIpO3JldHVybiBFKG4uc2hhcGUsci5zaGFwZSxcIkVycm9yIGluIG5vdEVxdWFsU3RyaWN0OiBcIiksbi5ub3RFcXVhbChyKX19KTtmdW5jdGlvbiBCYyh0LGUpe2Zvcih2YXIgbj1bXSxyPXQ7cjxlOysrciluLnB1c2gocik7cmV0dXJuIG59ZnVuY3Rpb24gUGModCl7Zm9yKHZhciBlPVtdLG49MDtuPHQubGVuZ3RoOysrbilmb3IodmFyIHI9MDtyPHRbbl0ubGVuZ3RoOysrcillLnB1c2godFtuXVtyXSk7cmV0dXJuIGV9dmFyIExjPUFuKHtnYXRoZXJfOmZ1bmN0aW9uKHQsZSxuKXt2b2lkIDA9PT1uJiYobj0wKTt2YXIgcj1tbih0LFwieFwiLFwiZ2F0aGVyXCIpLG89bW4oZSxcImluZGljZXNcIixcImdhdGhlclwiLFwiaW50MzJcIik7bj1PKG4sci5zaGFwZSlbMF07dmFyIGE9ZnVuY3Rpb24odCxlLG4pe2Zvcih2YXIgcj10LnNoYXBlW25dLG89W10sYT0xLGk9MSxzPTA7czxuO3MrKylvLnB1c2godC5zaGFwZVtzXSksYSo9dC5zaGFwZVtzXTtmb3Iocz0wO3M8ZS5yYW5rO3MrKylvLnB1c2goZS5zaGFwZVtzXSk7Zm9yKHM9bisxO3M8dC5yYW5rO3MrKylvLnB1c2godC5zaGFwZVtzXSksaSo9dC5zaGFwZVtzXTtyZXR1cm57YmF0Y2hTaXplOmEsc2xpY2VTaXplOmksZGltU2l6ZTpyLG91dHB1dFNoYXBlOm99fShyLG8sbik7cmV0dXJuIEx0LnJ1bktlcm5lbEZ1bmMoKGZ1bmN0aW9uKHQsZSl7dmFyIGE9dC5nYXRoZXIocixvLmZsYXR0ZW4oKSxuKTtyZXR1cm4gZShbb10pLGF9KSx7eDpyLGluZGljZXM6b30sKGZ1bmN0aW9uKHQsZSl7dmFyIG89ZVswXTtyZXR1cm57eDpmdW5jdGlvbigpe3ZhciBlPXIuc2hhcGUsYT1vLnNpemUsaT1lLnNsaWNlKDAsbikscz1pLmxlbmd0aCx1PWUuc2xpY2UobixlLmxlbmd0aCkuc2xpY2UoMSksYz11Lmxlbmd0aCxsPUJjKDAscyksaD1CYyhzKzEscysxK2MpLGY9UGMoW2ksW2FdLHVdKSxkPXQucmVzaGFwZShmKSxwPW8ucmVzaGFwZShbYV0pLHY9UGMoW1tzXSxsLGhdKSxtPWQudHJhbnNwb3NlKHYpLGc9V2MobSxwLHIuc2hhcGVbbl0pLHk9Um4odik7cmV0dXJuIGc9Zy50cmFuc3Bvc2UoeSl9LGluZGljZXM6ZnVuY3Rpb24oKXtyZXR1cm4gb319fSksXCJHYXRoZXJcIix7YXhpczpufSkucmVzaGFwZShhLm91dHB1dFNoYXBlKX19KSxXYz1Bbih7dW5zb3J0ZWRTZWdtZW50U3VtXzpmdW5jdGlvbih0LGUsbil7dmFyIHI9bW4odCxcInhcIixcInVuc29ydGVkU2VnbWVudFN1bVwiKSxvPW1uKGUsXCJzZWdtZW50SWRzXCIsXCJ1bnNvcnRlZFNlZ21lbnRTdW1cIixcImludDMyXCIpO3JldHVybiBDKEEobiksKGZ1bmN0aW9uKCl7cmV0dXJuXCJudW1TZWdtZW50cyBtdXN0IGJlIG9mIGR0eXBlIGludFwifSkpLEx0LnJ1bktlcm5lbEZ1bmMoKGZ1bmN0aW9uKHQsZSl7dmFyIGE9dC51bnNvcnRlZFNlZ21lbnRTdW0ocixvLG4pO3JldHVybiBlKFtvXSksYX0pLHskeDpyfSwoZnVuY3Rpb24odCxlKXt2YXIgbj1lWzBdO3JldHVybnskeDpmdW5jdGlvbigpe3JldHVybiBmdW5jdGlvbih0LGUpe2Zvcih2YXIgbj1oYyhlLFhuKGUpKSxyPUxjKHQsbiksbz1TYyhlLE9uKDAsXCJpbnQzMlwiKSksYT1yLnJhbmstby5yYW5rLGk9MDtpPGE7KytpKW89d3IobyxpKzEpO289UXUobyx6bihyLnNoYXBlLFwiYm9vbFwiKSk7dmFyIHM9WG4ocik7cmV0dXJuIGVjKG8scixzKX0odCxuKX19fSkpfX0pO3ZhciBVYz1mdW5jdGlvbih0LGUsbyl7cmV0dXJuIG4odGhpcyx2b2lkIDAsdm9pZCAwLChmdW5jdGlvbigpe3ZhciBuLGEsaSxzLHUsYyxsLGgsZixkLHAsdixtO3JldHVybiByKHRoaXMsKGZ1bmN0aW9uKHIpe3N3aXRjaChyLmxhYmVsKXtjYXNlIDA6Zm9yKG49bW4odCxcInRlbnNvclwiLFwiYm9vbE1hc2tcIiksYT1tbihlLFwibWFza1wiLFwiYm9vbE1hc2tcIixcImJvb2xcIiksaT1udWxsPT1vPzA6byxzPWEucmFuayx1PW4uc2hhcGUsQyhzPjAsKGZ1bmN0aW9uKCl7cmV0dXJuXCJtYXNrIGNhbm5vdCBiZSBzY2FsYXJcIn0pKSxFKHUuc2xpY2UoaSxpK3MpLGEuc2hhcGUsXCJtYXNrJ3Mgc2hhcGUgbXVzdCBtYXRjaCB0aGUgZmlyc3QgSyBkaW1lbnNpb25zIG9mIHRlbnNvcidzIHNoYXBlLFwiKSxjPTEsbD1pO2w8aStzO2wrKyljKj11W2xdO3JldHVybiBoPXUuc2xpY2UoMCxpKS5jb25jYXQoW2NdLHUuc2xpY2UoaStzKSksZj1uLnJlc2hhcGUoaCksZD1hLnJlc2hhcGUoWy0xXSksWzQsbmMoZCldO2Nhc2UgMTpyZXR1cm4gcD1yLnNlbnQoKSx2PXAuc3F1ZWV6ZShbMV0pLG09TGMoZix2LGkpLHQhPT1uJiZuLmRpc3Bvc2UoKSxlIT09YSYmYS5kaXNwb3NlKCksdi5kaXNwb3NlKCksZi5kaXNwb3NlKCksZC5kaXNwb3NlKCkscC5kaXNwb3NlKCksWzIsbV19fSkpfSkpfTtmdW5jdGlvbiBWYyh0LGUsbixyLG8sYSxpKXt2b2lkIDA9PT1hJiYoYT1cIk5IV0NcIiksQyh0Lmxlbmd0aD09PWUucmFuaywoZnVuY3Rpb24oKXtyZXR1cm5cIkxlbmd0aCBvZiBpblNoYXBlIChcIit0Lmxlbmd0aCtcIikgYW5kIHJhbmsgb2YgZHkgKFwiK2UucmFuaytcIikgbXVzdCBtYXRjaFwifSkpO3ZhciBzPXQsdT1lLGM9ITE7Mz09PWUucmFuayYmKGM9ITAsdT1lLmFzNEQoMSxlLnNoYXBlWzBdLGUuc2hhcGVbMV0sZS5zaGFwZVsyXSkscz1bMSx0WzBdLHRbMV0sdFsyXV0pLEMoND09PXMubGVuZ3RoLChmdW5jdGlvbigpe3JldHVyblwiRXJyb3IgaW4gY29udjJkRGVySW5wdXQ6IGluU2hhcGUgbXVzdCBiZSBsZW5ndGggNCwgYnV0IGdvdCBsZW5ndGggXCIrcy5sZW5ndGgrXCIuXCJ9KSksQyg0PT09dS5yYW5rLChmdW5jdGlvbigpe3JldHVyblwiRXJyb3IgaW4gY29udjJkRGVySW5wdXQ6IGR5IG11c3QgYmUgcmFuayA0LCBidXQgZ290IHJhbmsgXCIrdS5yYW5rfSkpLEMoND09PW4ucmFuaywoZnVuY3Rpb24oKXtyZXR1cm5cIkVycm9yIGluIGNvbnYyZERlcklucHV0OiBmaWx0ZXIgbXVzdCBiZSByYW5rIDQsIGJ1dCBnb3QgcmFuayBcIituLnJhbmt9KSk7dmFyIGw9XCJOSFdDXCI9PT1hP3NbM106c1sxXSxoPVwiTkhXQ1wiPT09YT91LnNoYXBlWzNdOnUuc2hhcGVbMV07QyhsPT09bi5zaGFwZVsyXSwoZnVuY3Rpb24oKXtyZXR1cm5cIkVycm9yIGluIGNvbnYyZERlcklucHV0OiBkZXB0aCBvZiBpbnB1dCAoXCIrbCtcIikgbXVzdCBtYXRjaCBpbnB1dCBkZXB0aCBmb3IgZmlsdGVyIFwiK24uc2hhcGVbMl0rXCIuXCJ9KSksQyhoPT09bi5zaGFwZVszXSwoZnVuY3Rpb24oKXtyZXR1cm5cIkVycm9yIGluIGNvbnYyZERlcklucHV0OiBkZXB0aCBvZiBvdXRwdXQgKFwiK2grXCIpIG11c3QgbWF0Y2ggb3V0cHV0IGRlcHRoIGZvciBmaWx0ZXIgXCIrbi5zaGFwZVszXStcIi5cIn0pKSxudWxsIT1pJiZDKEEobyksKGZ1bmN0aW9uKCl7cmV0dXJuXCJFcnJvciBpbiBjb252MmREZXJJbnB1dDogcGFkIG11c3QgYmUgYW4gaW50ZWdlciB3aGVuIHVzaW5nLCBkaW1Sb3VuZGluZ01vZGUgXCIraStcIiBidXQgZ290IHBhZCBcIitvK1wiLlwifSkpO3ZhciBmPUJvKGEpLGQ9U28ocyxuLnNoYXBlLHIsMSxvLGksITEsZikscD1MdC5ydW5LZXJuZWxGdW5jKChmdW5jdGlvbih0LGUpe3ZhciByPXQuY29udjJkRGVySW5wdXQodSxuLGQpO3JldHVybiBlKFtuLHVdKSxyfSkse2R5NEQ6dSxmaWx0ZXI6bn0sKGZ1bmN0aW9uKHQsZSl7dmFyIG49ZVswXSxzPWVbMV07cmV0dXJue2R5NEQ6ZnVuY3Rpb24oKXtyZXR1cm4gcWModCxuLHIsbyxhLDEsaSl9LGZpbHRlcjpmdW5jdGlvbigpe3JldHVybiBqYyh0LHMsbi5zaGFwZSxyLG8sYSxpKX19fSkpO3JldHVybiBjP3AuYXMzRChwLnNoYXBlWzFdLHAuc2hhcGVbMl0scC5zaGFwZVszXSk6cH1mdW5jdGlvbiB6Yyh0KXt2YXIgZT1mdW5jdGlvbih0KXtyZXR1cm5cIm51bWJlclwiPT10eXBlb2YgdD9bdCx0LHRdOjI9PT10Lmxlbmd0aD9bdFswXSx0WzFdLDFdOnR9KHQpLG49ZVswXSxyPWVbMV0sbz1lWzJdO3JldHVybiAxPT09biYmMT09PXImJjE9PT1vfWZ1bmN0aW9uIEdjKHQsZSxuLHIsbyl7Qyh0Lmxlbmd0aD09PWUucmFuaywoZnVuY3Rpb24oKXtyZXR1cm5cIkxlbmd0aCBvZiBpblNoYXBlIChcIit0Lmxlbmd0aCtcIikgYW5kIHJhbmsgb2YgZHkgKFwiK2UucmFuaytcIikgbXVzdCBtYXRjaFwifSkpO3ZhciBhPXQsaT1lLHM9ITE7ND09PWUucmFuayYmKHM9ITAsaT1lLmFzNUQoMSxlLnNoYXBlWzBdLGUuc2hhcGVbMV0sZS5zaGFwZVsyXSxlLnNoYXBlWzNdKSxhPVsxLHRbMF0sdFsxXSx0WzJdLHRbM11dKTt2YXIgdT1hWzRdLGM9aS5zaGFwZVs0XTtDKDU9PT1hLmxlbmd0aCwoZnVuY3Rpb24oKXtyZXR1cm5cIkVycm9yIGluIGNvbnYzZERlcklucHV0OiBpblNoYXBlIG11c3QgYmUgbGVuZ3RoIDUsIGJ1dCBnb3QgbGVuZ3RoIFwiK2EubGVuZ3RoK1wiLlwifSkpLEMoNT09PWkucmFuaywoZnVuY3Rpb24oKXtyZXR1cm5cIkVycm9yIGluIGNvbnYzZERlcklucHV0OiBkeSBtdXN0IGJlIHJhbmsgNSwgYnV0IGdvdCByYW5rIFwiK2kucmFua30pKSxDKDU9PT1uLnJhbmssKGZ1bmN0aW9uKCl7cmV0dXJuXCJFcnJvciBpbiBjb252M2REZXJJbnB1dDogZmlsdGVyIG11c3QgYmUgcmFuayA1LCBidXQgZ290IHJhbmsgXCIrbi5yYW5rfSkpLEModT09PW4uc2hhcGVbM10sKGZ1bmN0aW9uKCl7cmV0dXJuXCJFcnJvciBpbiBjb252M2REZXJJbnB1dDogZGVwdGggb2YgaW5wdXQgKFwiK3UrXCIpIG11c3QgbWF0Y2ggaW5wdXQgZGVwdGggZm9yIGZpbHRlciBcIituLnNoYXBlWzNdK1wiLlwifSkpLEMoYz09PW4uc2hhcGVbNF0sKGZ1bmN0aW9uKCl7cmV0dXJuXCJFcnJvciBpbiBjb252M2REZXJJbnB1dDogZGVwdGggb2Ygb3V0cHV0IChcIitjK1wiKSBtdXN0IG1hdGNoIG91dHB1dCBkZXB0aCBmb3IgZmlsdGVyIFwiK24uc2hhcGVbNF0rXCIuXCJ9KSk7dmFyIGw9QW8oYSxuLnNoYXBlLHIsMSxvKSxoPUx0LnJ1bktlcm5lbEZ1bmMoKGZ1bmN0aW9uKHQpe3JldHVybiB0LmNvbnYzZERlcklucHV0KGksbixsKX0pLHtkeTVEOml9KTtyZXR1cm4gcz9oLmFzNEQoaC5zaGFwZVsxXSxoLnNoYXBlWzJdLGguc2hhcGVbM10saC5zaGFwZVs0XSk6aH12YXIgSGM9QW4oe2NvbnYxZF86ZnVuY3Rpb24odCxlLG4scixvLGEsaSl7dm9pZCAwPT09byYmKG89XCJOV0NcIiksdm9pZCAwPT09YSYmKGE9MSk7dmFyIHM9bW4odCxcInhcIixcImNvbnYxZFwiKSx1PW1uKGUsXCJmaWx0ZXJcIixcImNvbnYxZFwiKSxjPXMsbD0hMTsyPT09cy5yYW5rJiYobD0hMCxjPXMuYXMzRCgxLHMuc2hhcGVbMF0scy5zaGFwZVsxXSkpLEMoMz09PWMucmFuaywoZnVuY3Rpb24oKXtyZXR1cm5cIkVycm9yIGluIGNvbnYxZDogaW5wdXQgbXVzdCBiZSByYW5rIDMsIGJ1dCBnb3QgcmFuayBcIitjLnJhbmsrXCIuXCJ9KSksQygzPT09dS5yYW5rLChmdW5jdGlvbigpe3JldHVyblwiRXJyb3IgaW4gY29udjFkOiBmaWx0ZXIgbXVzdCBiZSByYW5rIDMsIGJ1dCBnb3QgcmFuayBcIit1LnJhbmsrXCIuXCJ9KSksbnVsbCE9aSYmQyhBKHIpLChmdW5jdGlvbigpe3JldHVyblwiRXJyb3IgaW4gY29udjFkOiBwYWQgbXVzdCBiZSBhbiBpbnRlZ2VyIHdoZW4gdXNpbmcsIGRpbVJvdW5kaW5nTW9kZSBcIitpK1wiIGJ1dCBnb3QgcGFkIFwiK3IrXCIuXCJ9KSksQyhjLnNoYXBlWzJdPT09dS5zaGFwZVsxXSwoZnVuY3Rpb24oKXtyZXR1cm5cIkVycm9yIGluIGNvbnYxZDogZGVwdGggb2YgaW5wdXQgKFwiK2Muc2hhcGVbMl0rXCIpIG11c3QgbWF0Y2ggaW5wdXQgZGVwdGggZm9yIGZpbHRlciBcIit1LnNoYXBlWzFdK1wiLlwifSkpLEMoTW8obixhKSwoZnVuY3Rpb24oKXtyZXR1cm5cIkVycm9yIGluIGNvbnYxRDogRWl0aGVyIHN0cmlkZSBvciBkaWxhdGlvbiBtdXN0IGJlIDEuIEdvdCBzdHJpZGUgXCIrbitcIiBhbmQgZGlsYXRpb24gJ1wiK2ErXCInXCJ9KSksQyhcIk5XQ1wiPT09bywoZnVuY3Rpb24oKXtyZXR1cm5cIkVycm9yIGluIGNvbnYxZDogZ290IGRhdGFGb3JtYXQgb2YgXCIrbytcIiBidXQgb25seSBOV0MgaXMgY3VycmVudGx5IHN1cHBvcnRlZC5cIn0pKTt2YXIgaD11LmFzNEQoMSx1LnNoYXBlWzBdLHUuc2hhcGVbMV0sdS5zaGFwZVsyXSksZj1jLmFzNEQoYy5zaGFwZVswXSwxLGMuc2hhcGVbMV0sYy5zaGFwZVsyXSksZD1xYyhmLGgsWzEsbl0scixcIk5IV0NcIixbMSxhXSxpKTtyZXR1cm4gbD9kLmFzMkQoZC5zaGFwZVsyXSxkLnNoYXBlWzNdKTpkLmFzM0QoZC5zaGFwZVswXSxkLnNoYXBlWzJdLGQuc2hhcGVbM10pfX0pLHFjPUFuKHtjb252MmRfOmZ1bmN0aW9uKHQsZSxuLHIsbyxhLGkpe3ZvaWQgMD09PW8mJihvPVwiTkhXQ1wiKSx2b2lkIDA9PT1hJiYoYT1bMSwxXSk7dmFyIHM9bW4odCxcInhcIixcImNvbnYyZFwiKSx1PW1uKGUsXCJmaWx0ZXJcIixcImNvbnYyZFwiKSxjPXMsbD0hMTszPT09cy5yYW5rJiYobD0hMCxjPXMuYXM0RCgxLHMuc2hhcGVbMF0scy5zaGFwZVsxXSxzLnNoYXBlWzJdKSksQyg0PT09Yy5yYW5rLChmdW5jdGlvbigpe3JldHVyblwiRXJyb3IgaW4gY29udjJkOiBpbnB1dCBtdXN0IGJlIHJhbmsgNCwgYnV0IGdvdCByYW5rIFwiK2MucmFuaytcIi5cIn0pKSxDKDQ9PT11LnJhbmssKGZ1bmN0aW9uKCl7cmV0dXJuXCJFcnJvciBpbiBjb252MmQ6IGZpbHRlciBtdXN0IGJlIHJhbmsgNCwgYnV0IGdvdCByYW5rIFwiK3UucmFuaytcIi5cIn0pKSxudWxsIT1pJiZDKEEociksKGZ1bmN0aW9uKCl7cmV0dXJuXCJFcnJvciBpbiBjb252MmQ6IHBhZCBtdXN0IGJlIGFuIGludGVnZXIgd2hlbiB1c2luZywgZGltUm91bmRpbmdNb2RlIFwiK2krXCIgYnV0IGdvdCBwYWQgXCIrcitcIi5cIn0pKTt2YXIgaD1cIk5IV0NcIj09PW8/Yy5zaGFwZVszXTpjLnNoYXBlWzFdO0MoaD09PXUuc2hhcGVbMl0sKGZ1bmN0aW9uKCl7cmV0dXJuXCJFcnJvciBpbiBjb252MmQ6IGRlcHRoIG9mIGlucHV0IChcIitoK1wiKSBtdXN0IG1hdGNoIGlucHV0IGRlcHRoIGZvciBmaWx0ZXIgXCIrdS5zaGFwZVsyXStcIi5cIn0pKSxDKE1vKG4sYSksKGZ1bmN0aW9uKCl7cmV0dXJuXCJFcnJvciBpbiBjb252MkQ6IEVpdGhlciBzdHJpZGVzIG9yIGRpbGF0aW9ucyBtdXN0IGJlIDEuIEdvdCBzdHJpZGVzIFwiK24rXCIgYW5kIGRpbGF0aW9ucyAnXCIrYStcIidcIn0pKTt2YXIgZj1CbyhvKSxkPVNvKGMuc2hhcGUsdS5zaGFwZSxuLGEscixpLCExLGYpLHA9W3UsY10sdj1MdC5ydW5LZXJuZWxGdW5jKChmdW5jdGlvbih0LGUpe3ZhciBuPXQuY29udjJkKGMsdSxkKTtyZXR1cm4gZShbdSxjXSksbn0pLHt4OmMsZmlsdGVyOnV9LChmdW5jdGlvbih0LGUpe3ZhciBpPWUscz1pWzBdLHU9aVsxXTtyZXR1cm4gQyhPbyhhKSwoZnVuY3Rpb24oKXtyZXR1cm5cIkVycm9yIGluIGdyYWRpZW50IG9mIGNvbnYyRDogZGlsYXRpb24gcmF0ZXMgZ3JlYXRlciB0aGFuIDEgYXJlIG5vdCB5ZXQgc3VwcG9ydGVkIGluIGdyYWRpZW50cy4gR290IGRpbGF0aW9ucyAnXCIrYStcIidcIn0pKSx7eDpmdW5jdGlvbigpe3JldHVybiBYYyh1LnNoYXBlLHQscyxuLHIsbyl9LGZpbHRlcjpmdW5jdGlvbigpe3JldHVybiBqYyh1LHQscy5zaGFwZSxuLHIsbyl9fX0pLFwiQ29udjJEXCIsZCxwKTtyZXR1cm4gbD92LmFzM0Qodi5zaGFwZVsxXSx2LnNoYXBlWzJdLHYuc2hhcGVbM10pOnZ9fSksS2M9QW4oe2NvbnYzZF86ZnVuY3Rpb24odCxlLG4scixvLGEpe3ZvaWQgMD09PW8mJihvPVwiTkRIV0NcIiksdm9pZCAwPT09YSYmKGE9WzEsMSwxXSk7dmFyIGk9bW4odCxcInhcIixcImNvbnYzZFwiKSxzPW1uKGUsXCJmaWx0ZXJcIixcImNvbnYzZFwiKSx1PWksYz0hMTs0PT09aS5yYW5rJiYoYz0hMCx1PWkuYXM1RCgxLGkuc2hhcGVbMF0saS5zaGFwZVsxXSxpLnNoYXBlWzJdLGkuc2hhcGVbM10pKSxDKDU9PT11LnJhbmssKGZ1bmN0aW9uKCl7cmV0dXJuXCJFcnJvciBpbiBjb252M2Q6IGlucHV0IG11c3QgYmUgcmFuayA1LCBidXQgZ290IHJhbmsgXCIrdS5yYW5rK1wiLlwifSkpLEMoNT09PXMucmFuaywoZnVuY3Rpb24oKXtyZXR1cm5cIkVycm9yIGluIGNvbnYzZDogZmlsdGVyIG11c3QgYmUgcmFuayA1LCBidXQgZ290IHJhbmsgXCIrcy5yYW5rK1wiLlwifSkpLEModS5zaGFwZVs0XT09PXMuc2hhcGVbM10sKGZ1bmN0aW9uKCl7cmV0dXJuXCJFcnJvciBpbiBjb252M2Q6IGRlcHRoIG9mIGlucHV0IChcIit1LnNoYXBlWzRdK1wiKSBtdXN0IG1hdGNoIGlucHV0IGRlcHRoIGZvciBmaWx0ZXIgXCIrcy5zaGFwZVszXStcIi5cIn0pKSxDKGZ1bmN0aW9uKHQsZSl7cmV0dXJuIHpjKHQpfHx6YyhlKX0obixhKSwoZnVuY3Rpb24oKXtyZXR1cm5cIkVycm9yIGluIGNvbnYzRDogRWl0aGVyIHN0cmlkZXMgb3IgZGlsYXRpb25zIG11c3QgYmUgMS4gR290IHN0cmlkZXMgXCIrbitcIiBhbmQgZGlsYXRpb25zICdcIithK1wiJ1wifSkpLEMoXCJOREhXQ1wiPT09bywoZnVuY3Rpb24oKXtyZXR1cm5cIkVycm9yIGluIGNvbnYzZDogZ290IGRhdGFGb3JtYXQgb2YgXCIrbytcIiBidXQgb25seSBOREhXQyBpcyBjdXJyZW50bHkgc3VwcG9ydGVkLlwifSkpO3ZhciBsPUFvKHUuc2hhcGUscy5zaGFwZSxuLGEsciksaD1MdC5ydW5LZXJuZWxGdW5jKChmdW5jdGlvbih0LGUpe3ZhciBuPXQuY29udjNkKHUscyxsKTtyZXR1cm4gZShbdSxzXSksbn0pLHt4OnUsJGZpbHRlcjpzfSwoZnVuY3Rpb24odCxlKXtDKHpjKGEpLChmdW5jdGlvbigpe3JldHVyblwiRXJyb3IgaW4gZ3JhZGllbnQgb2YgY29udjNEOiBkaWxhdGlvbiByYXRlcyBncmVhdGVyIHRoYW4gMSBhcmUgbm90IHlldCBzdXBwb3J0ZWQgaW4gZ3JhZGllbnRzLiBHb3QgZGlsYXRpb25zICdcIithK1wiJ1wifSkpO3ZhciBvPWVbMF0saT1lWzFdO3JldHVybnt4OmZ1bmN0aW9uKCl7cmV0dXJuIEdjKG8uc2hhcGUsdCxpLG4scil9LCRmaWx0ZXI6ZnVuY3Rpb24oKXtyZXR1cm4gZnVuY3Rpb24odCxlLG4scixvKXt2YXIgYT10OzQ9PT10LnJhbmsmJihhPXQuYXM1RCgxLHQuc2hhcGVbMF0sdC5zaGFwZVsxXSx0LnNoYXBlWzJdLHQuc2hhcGVbM10pKTt2YXIgaT1lOzQ9PT1pLnJhbmsmJihpPWUuYXM1RCgxLGUuc2hhcGVbMF0sZS5zaGFwZVsxXSxlLnNoYXBlWzJdLGUuc2hhcGVbM10pKTtDKDU9PT1hLnJhbmssKGZ1bmN0aW9uKCl7cmV0dXJuXCJFcnJvciBpbiBjb252M2REZXJGaWx0ZXI6IGlucHV0IG11c3QgYmUgcmFuayA1LCBidXQgZ290IHNoYXBlIFwiK2Euc2hhcGUrXCIuXCJ9KSksQyg1PT09aS5yYW5rLChmdW5jdGlvbigpe3JldHVyblwiRXJyb3IgaW4gY29udjNkRGVyRmlsdGVyOiBkeSBtdXN0IGJlIHJhbmsgNSwgYnV0IGdvdCBzaGFwZSBcIitpLnNoYXBlK1wiLlwifSkpLEMoNT09PW4ubGVuZ3RoLChmdW5jdGlvbigpe3JldHVyblwiRXJyb3IgaW4gY29udjNkRGVyRmlsdGVyOiBmaWx0ZXJTaGFwZSBtdXN0IGJlIGxlbmd0aCA1LCBidXQgZ290IFwiK24rXCIuXCJ9KSksQyhhLnNoYXBlWzRdPT09blszXSwoZnVuY3Rpb24oKXtyZXR1cm5cIkVycm9yIGluIGNvbnYzZERlckZpbHRlcjogZGVwdGggb2YgaW5wdXQgXCIrYS5zaGFwZVs0XStcIikgbXVzdCBtYXRjaCBpbnB1dCBkZXB0aCBpbiBmaWx0ZXIgKFwiK25bM10rXCIuXCJ9KSksQyhpLnNoYXBlWzRdPT09bls0XSwoZnVuY3Rpb24oKXtyZXR1cm5cIkVycm9yIGluIGNvbnYzZERlckZpbHRlcjogZGVwdGggb2YgZHkgKFwiK2kuc2hhcGVbNF0rXCIpIG11c3QgbWF0Y2ggb3V0cHV0IGRlcHRoIGZvciBmaWx0ZXIgKFwiK25bNF0rXCIpLlwifSkpO3ZhciBzPUFvKGEuc2hhcGUsbixyLDEsbyk7cmV0dXJuIEx0LnJ1bktlcm5lbEZ1bmMoKGZ1bmN0aW9uKHQpe3JldHVybiB0LmNvbnYzZERlckZpbHRlcihhLGkscyl9KSx7eDVEOmEsZHk1RDppfSl9KG8sdCxpLnNoYXBlLG4scil9fX0pKTtyZXR1cm4gYz9oLmFzNEQoaC5zaGFwZVsxXSxoLnNoYXBlWzJdLGguc2hhcGVbM10saC5zaGFwZVs0XSk6aH19KSxqYz1Bbih7Y29udjJkRGVyRmlsdGVyXzpmdW5jdGlvbih0LGUsbixyLG8sYSxpKXt2b2lkIDA9PT1hJiYoYT1cIk5IV0NcIik7dmFyIHM9dDszPT09dC5yYW5rJiYocz10LmFzNEQoMSx0LnNoYXBlWzBdLHQuc2hhcGVbMV0sdC5zaGFwZVsyXSkpO3ZhciB1PWU7Mz09PXUucmFuayYmKHU9ZS5hczREKDEsZS5zaGFwZVswXSxlLnNoYXBlWzFdLGUuc2hhcGVbMl0pKSxDKDQ9PT1zLnJhbmssKGZ1bmN0aW9uKCl7cmV0dXJuXCJFcnJvciBpbiBjb252MmREZXJGaWx0ZXI6IGlucHV0IG11c3QgYmUgcmFuayA0LCBidXQgZ290IHNoYXBlIFwiK3Muc2hhcGUrXCIuXCJ9KSksQyg0PT09dS5yYW5rLChmdW5jdGlvbigpe3JldHVyblwiRXJyb3IgaW4gY29udjJkRGVyRmlsdGVyOiBkeSBtdXN0IGJlIHJhbmsgNCwgYnV0IGdvdCBzaGFwZSBcIit1LnNoYXBlK1wiLlwifSkpLEMoND09PW4ubGVuZ3RoLChmdW5jdGlvbigpe3JldHVyblwiRXJyb3IgaW4gY29udjJkRGVyRmlsdGVyOiBmaWx0ZXJTaGFwZSBtdXN0IGJlIGxlbmd0aCA0LCBidXQgZ290IFwiK24rXCIuXCJ9KSk7dmFyIGM9XCJOSFdDXCI9PT1hP3Muc2hhcGVbM106cy5zaGFwZVsxXSxsPVwiTkhXQ1wiPT09YT91LnNoYXBlWzNdOnUuc2hhcGVbMV07QyhjPT09blsyXSwoZnVuY3Rpb24oKXtyZXR1cm5cIkVycm9yIGluIGNvbnYyZERlckZpbHRlcjogZGVwdGggb2YgaW5wdXQgXCIrYytcIikgbXVzdCBtYXRjaCBpbnB1dCBkZXB0aCBpbiBmaWx0ZXIgKFwiK25bMl0rXCIuXCJ9KSksQyhsPT09blszXSwoZnVuY3Rpb24oKXtyZXR1cm5cIkVycm9yIGluIGNvbnYyZERlckZpbHRlcjogZGVwdGggb2YgZHkgKFwiK2wrXCIpIG11c3QgbWF0Y2ggb3V0cHV0IGRlcHRoIGZvciBmaWx0ZXIgKFwiK25bM10rXCIpLlwifSkpLG51bGwhPWkmJkMoQShvKSwoZnVuY3Rpb24oKXtyZXR1cm5cIkVycm9yIGluIGNvbnYyZERlckZpbHRlcjogcGFkIG11c3QgYmUgYW4gaW50ZWdlciB3aGVuIHVzaW5nLCBkaW1Sb3VuZGluZ01vZGUgXCIraStcIiBidXQgZ290IHBhZCBcIitvK1wiLlwifSkpO3ZhciBoPUJvKGEpLGY9U28ocy5zaGFwZSxuLHIsMSxvLGksITEsaCk7cmV0dXJuIEx0LnJ1bktlcm5lbEZ1bmMoKGZ1bmN0aW9uKHQpe3JldHVybiB0LmNvbnYyZERlckZpbHRlcihzLHUsZil9KSx7eDREOnMsZHk0RDp1fSl9fSksWGM9QW4oe2NvbnYyZERlcklucHV0XzpWY30pLFljPUFuKHtkZXB0aHdpc2VDb252MmRfOmZ1bmN0aW9uKHQsZSxuLHIsbyxhLGkpe3ZvaWQgMD09PW8mJihvPVwiTkhXQ1wiKSx2b2lkIDA9PT1hJiYoYT1bMSwxXSk7dmFyIHM9bW4odCxcInhcIixcImRlcHRod2lzZUNvbnYyZFwiKSx1PW1uKGUsXCJmaWx0ZXJcIixcImRlcHRod2lzZUNvbnYyZFwiKSxjPXMsbD0hMTszPT09cy5yYW5rJiYobD0hMCxjPXMuYXM0RCgxLHMuc2hhcGVbMF0scy5zaGFwZVsxXSxzLnNoYXBlWzJdKSksQyg0PT09Yy5yYW5rLChmdW5jdGlvbigpe3JldHVyblwiRXJyb3IgaW4gZGVwdGh3aXNlQ29udjJkOiBpbnB1dCBtdXN0IGJlIHJhbmsgNCwgYnV0IGdvdCByYW5rIFwiK2MucmFuaytcIi5cIn0pKSxDKDQ9PT11LnJhbmssKGZ1bmN0aW9uKCl7cmV0dXJuXCJFcnJvciBpbiBkZXB0aHdpc2VDb252MmQ6IGZpbHRlciBtdXN0IGJlIHJhbmsgNCwgYnV0IGdvdCByYW5rIFwiK3UucmFuaytcIi5cIn0pKSxDKGMuc2hhcGVbM109PT11LnNoYXBlWzJdLChmdW5jdGlvbigpe3JldHVyblwiRXJyb3IgaW4gZGVwdGh3aXNlQ29udjJkOiBudW1iZXIgb2YgaW5wdXQgY2hhbm5lbHMgKFwiK2Muc2hhcGVbM10rXCIpIG11c3QgbWF0Y2ggdGhlIGluQ2hhbm5lbHMgZGltZW5zaW9uIGluIGZpbHRlciBcIit1LnNoYXBlWzJdK1wiLlwifSkpLG51bGw9PWEmJihhPVsxLDFdKSxDKE1vKG4sYSksKGZ1bmN0aW9uKCl7cmV0dXJuXCJFcnJvciBpbiBkZXB0aHdpc2VDb252MmQ6IEVpdGhlciBzdHJpZGVzIG9yIGRpbGF0aW9ucyBtdXN0IGJlIDEuIEdvdCBzdHJpZGVzIFwiK24rXCIgYW5kIGRpbGF0aW9ucyAnXCIrYStcIidcIn0pKSxudWxsIT1pJiZDKEEociksKGZ1bmN0aW9uKCl7cmV0dXJuXCJFcnJvciBpbiBkZXB0aHdpc2VDb252MmQ6IHBhZCBtdXN0IGJlIGFuIGludGVnZXIgd2hlbiB1c2luZywgZGltUm91bmRpbmdNb2RlIFwiK2krXCIgYnV0IGdvdCBwYWQgXCIrcitcIi5cIn0pKTt2YXIgaD1TbyhjLnNoYXBlLHUuc2hhcGUsbixhLHIsaSwhMCksZj1bYyx1XSxkPUx0LnJ1bktlcm5lbEZ1bmMoKGZ1bmN0aW9uKHQsZSl7dmFyIG49dC5kZXB0aHdpc2VDb252MkQoYyx1LGgpO3JldHVybiBlKFtjLHVdKSxufSkse3g6YyxmaWx0ZXI6dX0sKGZ1bmN0aW9uKHQsZSl7QyhPbyhhKSwoZnVuY3Rpb24oKXtyZXR1cm5cIkVycm9yIGluIGdyYWRpZW50IG9mIGRlcHRod2lzZUNvbnYyZDogZGlsYXRpb24gcmF0ZXMgZ3JlYXRlciB0aGFuIDEgYXJlIG5vdCB5ZXQgc3VwcG9ydGVkLiBHb3QgZGlsYXRpb25zICdcIithK1wiJ1wifSkpO3ZhciBuPWVbMF0scj1lWzFdO3JldHVybnt4OmZ1bmN0aW9uKCl7cmV0dXJuICRjKG4uc2hhcGUsdCxyLGgpfSxmaWx0ZXI6ZnVuY3Rpb24oKXtyZXR1cm4gUWMobix0LHIuc2hhcGUsaCl9fX0pLFwiRGVwdGh3aXNlQ29udjJkTmF0aXZlXCIsaCxmKTtyZXR1cm4gbD9kLmFzM0QoZC5zaGFwZVsxXSxkLnNoYXBlWzJdLGQuc2hhcGVbM10pOmR9fSksJGM9QW4oe2RlcHRod2lzZUNvbnYyZERlcklucHV0XzpmdW5jdGlvbih0LGUsbixyKXt2YXIgbz1lLGE9ITE7Mz09PWUucmFuayYmKGE9ITAsbz1lLmFzNEQoMSxlLnNoYXBlWzBdLGUuc2hhcGVbMV0sZS5zaGFwZVsyXSkpO3ZhciBpPUx0LnJ1bktlcm5lbEZ1bmMoKGZ1bmN0aW9uKHQpe3JldHVybiB0LmRlcHRod2lzZUNvbnYyRERlcklucHV0KG8sbixyKX0pLHtkeTREOm99KTtyZXR1cm4gYT9pLmFzM0QoaS5zaGFwZVsxXSxpLnNoYXBlWzJdLGkuc2hhcGVbM10pOml9fSksUWM9QW4oe2RlcHRod2lzZUNvbnYyZERlckZpbHRlcl86ZnVuY3Rpb24odCxlLG4scil7dmFyIG89dDszPT09dC5yYW5rJiYobz10LmFzNEQoMSx0LnNoYXBlWzBdLHQuc2hhcGVbMV0sdC5zaGFwZVsyXSkpO3ZhciBhPWU7cmV0dXJuIDM9PT1hLnJhbmsmJihhPWUuYXM0RCgxLGUuc2hhcGVbMF0sZS5zaGFwZVsxXSxlLnNoYXBlWzJdKSksTHQucnVuS2VybmVsRnVuYygoZnVuY3Rpb24odCl7cmV0dXJuIHQuZGVwdGh3aXNlQ29udjJERGVyRmlsdGVyKG8sYSxyKX0pLHt4NEQ6byxkeTREOmF9KX19KSxKYz1Bbih7c2VwYXJhYmxlQ29udjJkXzpmdW5jdGlvbih0LGUsbixyLG8sYSxpKXt2b2lkIDA9PT1hJiYoYT1bMSwxXSksdm9pZCAwPT09aSYmKGk9XCJOSFdDXCIpO3ZhciBzPW1uKHQsXCJ4XCIsXCJzZXBhcmFibGVDb252MmRcIiksdT1tbihlLFwiZGVwdGh3aXNlRmlsdGVyXCIsXCJzZXBhcmFibGVDb252MmRcIiksYz1tbihuLFwicG9pbnR3aXNlRmlsdGVyXCIsXCJzZXBhcmFibGVDb252MmRcIiksbD1zLGg9ITE7aWYoMz09PXMucmFuayYmKGg9ITAsbD1zLmFzNEQoMSxzLnNoYXBlWzBdLHMuc2hhcGVbMV0scy5zaGFwZVsyXSkpLFwiTkNIV1wiPT09aSl0aHJvdyBuZXcgRXJyb3IoXCJzZXBhcmFibGVDb252MmQgY3VycmVudGx5IGRvZXMgbm90IHN1cHBvcnQgZGF0YUZvcm1hdCBOQ0hXOyBvbmx5IE5IV0MgaXMgc3VwcG9ydGVkXCIpO0MoND09PWwucmFuaywoZnVuY3Rpb24oKXtyZXR1cm5cIkVycm9yIGluIHNlcGFyYWJsZUNvbnYyZDogaW5wdXQgbXVzdCBiZSByYW5rIDQsIGJ1dCBnb3QgcmFuayBcIitsLnJhbmsrXCIuXCJ9KSksQyg0PT09dS5yYW5rLChmdW5jdGlvbigpe3JldHVyblwiRXJyb3IgaW4gc2VwYXJhYmxlQ29udjJkOiBkZXB0aHdpc2UgZmlsdGVyIG11c3QgYmUgcmFuayA0LCBidXQgZ290IHJhbmsgXCIrdS5yYW5rK1wiLlwifSkpLEMoND09PWMucmFuaywoZnVuY3Rpb24oKXtyZXR1cm5cIkVycm9yIGluIHNlcGFyYWJsZUNvbnYyZDogcG9pbnR3aXNlIGZpbHRlciBtdXN0IGJlIHJhbmsgNCwgYnV0IGdvdCByYW5rIFwiK3UucmFuaytcIi5cIn0pKSxDKDE9PT1jLnNoYXBlWzBdLChmdW5jdGlvbigpe3JldHVyblwiRXJyb3IgaW4gc2VwYXJhYmxlQ29udjJkOiB0aGUgZmlyc3QgZGltZW5zaW9uIG9mIHBvaW50d2lzZSBmaWx0ZXIgIG11c3QgYmUgMSwgYnV0IGdvdCBcIitjLnNoYXBlWzBdK1wiLlwifSkpLEMoMT09PWMuc2hhcGVbMV0sKGZ1bmN0aW9uKCl7cmV0dXJuXCJFcnJvciBpbiBzZXBhcmFibGVDb252MmQ6IHRoZSBzZWNvbmQgZGltZW5zaW9uIG9mIHBvaW50d2lzZSBmaWx0ZXIgbXVzdCBiZSAxLCBidXQgZ290IFwiK2Muc2hhcGVbMV0rXCIuXCJ9KSk7dmFyIGY9dS5zaGFwZVsyXSxkPXUuc2hhcGVbM107QyhjLnNoYXBlWzJdPT09ZipkLChmdW5jdGlvbigpe3JldHVyblwiRXJyb3IgaW4gc2VwYXJhYmxlQ29udjJkOiB0aGUgdGhpcmQgZGltZW5zaW9uIG9mIHBvaW50d2lzZSBmaWx0ZXIgbXVzdCBiZSBcIitmKmQrXCIsIGJ1dCBnb3QgXCIrYy5zaGFwZVsyXStcIi5cIn0pKTt2YXIgcD1ZYyhsLHUscixvLGksYSksdj1xYyhwLGMsMSxcInZhbGlkXCIsaSk7cmV0dXJuIGg/di5hczNEKHYuc2hhcGVbMV0sdi5zaGFwZVsyXSx2LnNoYXBlWzNdKTp2fX0pLFpjPUFuKHtjb252MmRUcmFuc3Bvc2VfOmZ1bmN0aW9uKHQsZSxuLHIsbyxhKXtyZXR1cm4gVmMobixtbih0LFwieFwiLFwiY29udjJkVHJhbnNwb3NlXCIpLG1uKGUsXCJmaWx0ZXJcIixcImNvbnYyZFRyYW5zcG9zZVwiKSxyLG8sXCJOSFdDXCIsYSl9fSksdGw9QW4oe2NvbnYzZFRyYW5zcG9zZV86ZnVuY3Rpb24odCxlLG4scixvKXtyZXR1cm4gR2Mobixtbih0LFwieFwiLFwiY29udjNkVHJhbnNwb3NlXCIpLG1uKGUsXCJmaWx0ZXJcIixcImNvbnYzZFRyYW5zcG9zZVwiKSxyLG8pfX0pO3ZhciBlbD1Bbih7bWF0TXVsXzpmdW5jdGlvbih0LGUsbixyKXt2YXIgbzt2b2lkIDA9PT1uJiYobj0hMSksdm9pZCAwPT09ciYmKHI9ITEpO3ZhciBhPW1uKHQsXCJhXCIsXCJtYXRNdWxcIiksaT1tbihlLFwiYlwiLFwibWF0TXVsXCIpO289TnQoYSxpKSxhPW9bMF0saT1vWzFdO3ZhciBzPW4/YS5zaGFwZVthLnJhbmstMl06YS5zaGFwZVthLnJhbmstMV0sdT1yP2kuc2hhcGVbaS5yYW5rLTFdOmkuc2hhcGVbaS5yYW5rLTJdLGM9bj9hLnNoYXBlW2EucmFuay0xXTphLnNoYXBlW2EucmFuay0yXSxsPXI/aS5zaGFwZVtpLnJhbmstMl06aS5zaGFwZVtpLnJhbmstMV0saD1hLnNoYXBlLnNsaWNlKDAsLTIpLGY9aS5zaGFwZS5zbGljZSgwLC0yKSxkPWsoaCkscD1rKGYpO0MoYS5yYW5rPj0yJiZpLnJhbms+PTImJmEucmFuaz09PWkucmFuaywoZnVuY3Rpb24oKXtyZXR1cm5cIkVycm9yIGluIG1hdE11bDogaW5wdXRzIG11c3QgaGF2ZSB0aGUgc2FtZSByYW5rIG9mIGF0IGxlYXN0IDIsIGdvdCByYW5rcyBcIithLnJhbmsrXCIgYW5kIFwiK2kucmFuaytcIi5cIn0pKSxDKFMoaCxmKSwoZnVuY3Rpb24oKXtyZXR1cm5cIkVycm9yIGluIG1hdE11bDogb3V0ZXIgZGltZW5zaW9ucyAoXCIraCtcIikgYW5kIChcIitmK1wiKSBvZiBUZW5zb3JzIHdpdGggc2hhcGVzIFwiK2Euc2hhcGUrXCIgYW5kIFwiK2kuc2hhcGUrXCIgbXVzdCBtYXRjaC5cIn0pKSxDKHM9PT11LChmdW5jdGlvbigpe3JldHVyblwiRXJyb3IgaW4gbWF0TXVsOiBpbm5lciBzaGFwZXMgKFwiK3MrXCIpIGFuZCAoXCIrdStcIikgb2YgVGVuc29ycyB3aXRoIHNoYXBlcyBcIithLnNoYXBlK1wiIGFuZCBcIitpLnNoYXBlK1wiIGFuZCB0cmFuc3Bvc2VBPVwiK24rXCIgYW5kIHRyYW5zcG9zZUI9XCIrcitcIiBtdXN0IG1hdGNoLlwifSkpO3ZhciB2PWEuc2hhcGUuc2xpY2UoMCwtMikuY29uY2F0KFtjLGxdKSxtPW4/YS5hczNEKGQscyxjKTphLmFzM0QoZCxjLHMpLGc9cj9pLmFzM0QocCxsLHUpOmkuYXMzRChwLHUsbCkseT17dHJhbnNwb3NlQTpuLHRyYW5zcG9zZUI6cn07cmV0dXJuIEx0LnJ1bktlcm5lbEZ1bmMoKGZ1bmN0aW9uKHQsZSl7dmFyIG89dC5iYXRjaE1hdE11bChtLGcsbixyKTtyZXR1cm4gZShbbSxnXSksb30pLHthOm0sYjpnfSwoZnVuY3Rpb24odCxlKXt2YXIgbz1lLGE9b1swXSxpPW9bMV07cmV0dXJuIG58fHI/IW4mJnI/e2E6ZnVuY3Rpb24oKXtyZXR1cm4gdC5tYXRNdWwoaSwhMSwhMSl9LGI6ZnVuY3Rpb24oKXtyZXR1cm4gdC5tYXRNdWwoYSwhMCwhMSl9fTpuJiYhcj97YTpmdW5jdGlvbigpe3JldHVybiBpLm1hdE11bCh0LCExLCEwKX0sYjpmdW5jdGlvbigpe3JldHVybiBhLm1hdE11bCh0LCExLCExKX19OnthOmZ1bmN0aW9uKCl7cmV0dXJuIGkubWF0TXVsKHQsITAsITApfSxiOmZ1bmN0aW9uKCl7cmV0dXJuIHQubWF0TXVsKGEsITAsITApfX06e2E6ZnVuY3Rpb24oKXtyZXR1cm4gdC5tYXRNdWwoaSwhMSwhMCl9LGI6ZnVuY3Rpb24oKXtyZXR1cm4gYS5tYXRNdWwodCwhMCwhMSl9fX0pLFwiQmF0Y2hNYXRNdWxcIix5KS5yZXNoYXBlKHYpfX0pLG5sPUFuKHtkb3RfOmZ1bmN0aW9uKHQsZSl7dmFyIG49bW4odCxcInQxXCIsXCJkb3RcIikscj1tbihlLFwidDJcIixcImRvdFwiKTtDKCEoMSE9PW4ucmFuayYmMiE9PW4ucmFua3x8MSE9PXIucmFuayYmMiE9PXIucmFuayksKGZ1bmN0aW9uKCl7cmV0dXJuXCJFcnJvciBpbiBkb3Q6IGlucHV0cyBtdXN0IGFsbCBiZSByYW5rIDEgb3IgMiwgYnV0IGdvdCByYW5rcyBcIituLnJhbmsrXCIgYW5kIFwiK3IucmFuaytcIi5cIn0pKTt2YXIgbz0xPT09bi5yYW5rP24uc2l6ZTpuLnNoYXBlWzFdLGE9MT09PXIucmFuaz9yLnNpemU6ci5zaGFwZVswXTtyZXR1cm4gQyhvPT09YSwoZnVuY3Rpb24oKXtyZXR1cm5cIkVycm9yIGluIGRvdDogaW5uZXIgZGltZW5zaW9ucyBvZiBpbnB1dHMgbXVzdCBtYXRjaCwgYnV0IGdvdCBcIitvK1wiIGFuZCBcIithK1wiLlwifSkpLDE9PT1uLnJhbmsmJjE9PT1yLnJhbms/bi5hczJEKDEsLTEpLm1hdE11bChyLmFzMkQoLTEsMSkpLmFzU2NhbGFyKCk6MT09PW4ucmFuayYmMj09PXIucmFuaz9uLmFzMkQoMSwtMSkubWF0TXVsKHIuYXMyRChyLnNoYXBlWzBdLHIuc2hhcGVbMV0pKS5hczFEKCk6Mj09PW4ucmFuayYmMT09PXIucmFuaz9uLm1hdE11bChyLmFzMkQoLTEsMSkpLmFzMUQoKTpuLm1hdE11bChyLmFzMkQoci5zaGFwZVswXSxyLnNoYXBlWzFdKSl9fSkscmw9QW4oe291dGVyUHJvZHVjdF86ZnVuY3Rpb24odCxlKXt2YXIgbj1tbih0LFwidjFcIixcIm91dGVyUHJvZHVjdFwiKSxyPW1uKGUsXCJ2MlwiLFwib3V0ZXJQcm9kdWN0XCIpO3JldHVybiBDKDE9PT1uLnJhbmsmJjE9PT1yLnJhbmssKGZ1bmN0aW9uKCl7cmV0dXJuXCJFcnJvciBpbiBvdXRlclByb2R1Y3Q6IGlucHV0cyBtdXN0IGJlIHJhbmsgMSwgYnV0IGdvdCByYW5rcyBcIituLnJhbmsrXCIgYW5kIFwiK3IucmFuaytcIi5cIn0pKSxuLmFzMkQoLTEsMSkubWF0TXVsKHIuYXMyRCgxLC0xKSl9fSk7dmFyIG9sPUFuKHtyZXZlcnNlXzpmdW5jdGlvbih0LGUpe3ZhciBuPW1uKHQsXCJ4XCIsXCJyZXZlcnNlXCIpO2lmKDA9PT1uLnJhbmspcmV0dXJuIG4uY2xvbmUoKTt2YXIgcj1PKGUsbi5zaGFwZSk7cmV0dXJuIEx0LnJ1bktlcm5lbEZ1bmMoKGZ1bmN0aW9uKHQpe3JldHVybiB0LnJldmVyc2UobixyKX0pLHskeDpufSwoZnVuY3Rpb24odCl7cmV0dXJueyR4OmZ1bmN0aW9uKCl7cmV0dXJuIHQucmV2ZXJzZShyKX19fSkpLnJlc2hhcGVBcyhuKX19KSxhbD1Bbih7cmV2ZXJzZTFkXzpmdW5jdGlvbih0KXt2YXIgZT1tbih0LFwieFwiLFwicmV2ZXJzZVwiKTtyZXR1cm4gQygxPT09ZS5yYW5rLChmdW5jdGlvbigpe3JldHVyblwiRXJyb3IgaW4gcmV2ZXJzZTFEOiB4IG11c3QgYmUgcmFuayAxIGJ1dCBnb3QgcmFuayBcIitlLnJhbmsrXCIuXCJ9KSksb2woZSwwKX19KSxpbD1Bbih7cmV2ZXJzZTJkXzpmdW5jdGlvbih0LGUpe3ZhciBuPW1uKHQsXCJ4XCIsXCJyZXZlcnNlXCIpO3JldHVybiBDKDI9PT1uLnJhbmssKGZ1bmN0aW9uKCl7cmV0dXJuXCJFcnJvciBpbiByZXZlcnNlMkQ6IHggbXVzdCBiZSByYW5rIDIgYnV0IGdvdCByYW5rIFwiK24ucmFuaytcIi5cIn0pKSxvbChuLGUpfX0pLHNsPUFuKHtyZXZlcnNlM2RfOmZ1bmN0aW9uKHQsZSl7dmFyIG49bW4odCxcInhcIixcInJldmVyc2VcIik7cmV0dXJuIEMoMz09PW4ucmFuaywoZnVuY3Rpb24oKXtyZXR1cm5cIkVycm9yIGluIHJldmVyc2UzRDogeCBtdXN0IGJlIHJhbmsgMyBidXQgZ290IHJhbmsgXCIrbi5yYW5rK1wiLlwifSkpLG9sKG4sZSl9fSksdWw9QW4oe3JldmVyc2U0ZF86ZnVuY3Rpb24odCxlKXt2YXIgbj1tbih0LFwieFwiLFwicmV2ZXJzZVwiKTtyZXR1cm4gQyg0PT09bi5yYW5rLChmdW5jdGlvbigpe3JldHVyblwiRXJyb3IgaW4gcmV2ZXJzZTREOiB4IG11c3QgYmUgcmFuayA0IGJ1dCBnb3QgcmFuayBcIituLnJhbmsrXCIuXCJ9KSksb2wobixlKX19KTtmdW5jdGlvbiBjbCh0LGUsbixyLG8sYSl7dmFyIGk9bW4odCxcInhcIixcIm1heFBvb2xcIikscz1pLHU9ITE7Mz09PWkucmFuayYmKHU9ITAscz1pLmFzNEQoMSxpLnNoYXBlWzBdLGkuc2hhcGVbMV0saS5zaGFwZVsyXSkpLG51bGw9PXImJihyPVsxLDFdKSxDKDQ9PT1zLnJhbmssKGZ1bmN0aW9uKCl7cmV0dXJuXCJFcnJvciBpbiBtYXhQb29sOiBpbnB1dCBtdXN0IGJlIHJhbmsgNCBidXQgZ290IHJhbmsgXCIrcy5yYW5rK1wiLlwifSkpLEMoTW8obixyKSwoZnVuY3Rpb24oKXtyZXR1cm5cIkVycm9yIGluIG1heFBvb2w6IEVpdGhlciBzdHJpZGVzIG9yIGRpbGF0aW9ucyBtdXN0IGJlIDEuIEdvdCBzdHJpZGVzIFwiK24rXCIgYW5kIGRpbGF0aW9ucyAnXCIrcitcIidcIn0pKSxudWxsIT1hJiZDKEEobyksKGZ1bmN0aW9uKCl7cmV0dXJuXCJFcnJvciBpbiBtYXhQb29sOiBwYWQgbXVzdCBiZSBhbiBpbnRlZ2VyIHdoZW4gdXNpbmcsIGRpbVJvdW5kaW5nTW9kZSBcIithK1wiIGJ1dCBnb3QgcGFkIFwiK28rXCIuXCJ9KSk7dmFyIGM9SW8ocy5zaGFwZSxlLG4scixvLGEpO2lmKDE9PT1jLmZpbHRlcldpZHRoJiYxPT09Yy5maWx0ZXJIZWlnaHQmJlMoYy5pblNoYXBlLGMub3V0U2hhcGUpKXJldHVybiBpLmNsb25lKCk7dmFyIGw9W3NdLGg9THQucnVuS2VybmVsRnVuYygoZnVuY3Rpb24odCxlKXt2YXIgbj10Lm1heFBvb2wocyxjKTtyZXR1cm4gZShbcyxuXSksbn0pLHt4OnN9LChmdW5jdGlvbih0LGEpe3ZhciBpPWFbMF0scz1hWzFdO3JldHVybnt4OmZ1bmN0aW9uKCl7cmV0dXJuIGZ1bmN0aW9uKHQsZSxuLHIsbyxhLGkscyl7dmFyIHU9bW4odCxcImR5XCIsXCJtYXhQb29sQmFja3Byb3BcIiksYz1tbihlLFwiaW5wdXRcIixcIm1heFBvb2xCYWNrcHJvcFwiKSxsPW1uKG4sXCJvdXRwdXRcIixcIm1heFBvb2xCYWNrcHJvcFwiKTtDKGMucmFuaz09PXUucmFuaywoZnVuY3Rpb24oKXtyZXR1cm5cIlJhbmsgb2YgaW5wdXQgKFwiK2MucmFuaytcIikgZG9lcyBub3QgbWF0Y2ggcmFuayBvZiBkeSAoXCIrdS5yYW5rK1wiKVwifSkpLG51bGw9PWEmJihhPVsxLDFdKTtDKE1vKG8sYSksKGZ1bmN0aW9uKCl7cmV0dXJuXCJFcnJvciBpbiBtYXhQb29sQmFja1Byb3A6IEVpdGhlciBzdHJpZGVzIG9yIGRpbGF0aW9ucyBtdXN0IGJlIDEuIEdvdCBzdHJpZGVzIFwiK28rXCIgYW5kIGRpbGF0aW9ucyAnXCIrYStcIidcIn0pKSxDKDQ9PT11LnJhbmssKGZ1bmN0aW9uKCl7cmV0dXJuXCJFcnJvciBpbiBtYXhQb29sQmFja3Byb3A6IGR5IG11c3QgYmUgcmFuayA0IGJ1dCBnb3QgcmFuayBcIit1LnJhbmsrXCIuXCJ9KSksQyg0PT09Yy5yYW5rLChmdW5jdGlvbigpe3JldHVyblwiRXJyb3IgaW4gbWF4UG9vbEJhY2twcm9wOiBpbnB1dCBtdXN0IGJlIHJhbmsgNCBidXQgZ290IHJhbmsgXCIrYy5yYW5rK1wiLlwifSkpLG51bGwhPXMmJkMoQShpKSwoZnVuY3Rpb24oKXtyZXR1cm5cIkVycm9yIGluIG1heFBvb2xCYWNrcHJvcDogcGFkIG11c3QgYmUgYW4gaW50ZWdlciB3aGVuIHVzaW5nLCBkaW1Sb3VuZGluZ01vZGUgXCIrcytcIiBidXQgZ290IHBhZCBcIitpK1wiLlwifSkpO3ZhciBoPUlvKGMuc2hhcGUscixvLGEsaSxzKTtyZXR1cm4gTHQucnVuS2VybmVsRnVuYygoZnVuY3Rpb24odCl7cmV0dXJuIHQubWF4UG9vbEJhY2twcm9wKHUsYyxsLGgpfSkseyRkeTp1LCRpbnB1dDpjfSl9KHQsaSxzLGUsbixyLG8pfX19KSxcIk1heFBvb2xcIixjLGwpO3JldHVybiB1P2guYXMzRChoLnNoYXBlWzFdLGguc2hhcGVbMl0saC5zaGFwZVszXSk6aH1mdW5jdGlvbiBsbCh0LGUsbixyLG8sYSl7dmFyIGk9bW4odCxcInhcIixcImF2Z1Bvb2xcIixcImZsb2F0MzJcIik7bnVsbD09ciYmKHI9WzEsMV0pLEMoTW8obixyKSwoZnVuY3Rpb24oKXtyZXR1cm5cIkVycm9yIGluIGF2Z1Bvb2w6IEVpdGhlciBzdHJpZGVzIG9yIGRpbGF0aW9ucyBtdXN0IGJlIDEuIEdvdCBzdHJpZGVzIFwiK24rXCIgYW5kIGRpbGF0aW9ucyAnXCIrcitcIidcIn0pKTt2YXIgcz1pLHU9ITE7Mz09PWkucmFuayYmKHU9ITAscz1pLmFzNEQoMSxpLnNoYXBlWzBdLGkuc2hhcGVbMV0saS5zaGFwZVsyXSkpLEMoND09PXMucmFuaywoZnVuY3Rpb24oKXtyZXR1cm5cIkVycm9yIGluIGF2Z1Bvb2w6IHggbXVzdCBiZSByYW5rIDQgYnV0IGdvdCByYW5rIFwiK3MucmFuaytcIi5cIn0pKSxudWxsIT1hJiZDKEEobyksKGZ1bmN0aW9uKCl7cmV0dXJuXCJFcnJvciBpbiBhdmdQb29sOiBwYWQgbXVzdCBiZSBhbiBpbnRlZ2VyIHdoZW4gdXNpbmcsIGRpbVJvdW5kaW5nTW9kZSBcIithK1wiIGJ1dCBnb3QgcGFkIFwiK28rXCIuXCJ9KSk7dmFyIGM9SW8ocy5zaGFwZSxlLG4scixvLGEpO2lmKDE9PT1jLmZpbHRlcldpZHRoJiYxPT09Yy5maWx0ZXJIZWlnaHQmJlMoYy5pblNoYXBlLGMub3V0U2hhcGUpKXJldHVybiBpLmNsb25lKCk7dmFyIGw9THQucnVuS2VybmVsRnVuYygoZnVuY3Rpb24odCl7cmV0dXJuIHQuYXZnUG9vbChzLGMpfSkse3g6c30sKGZ1bmN0aW9uKHQpe3JldHVybnt4OmZ1bmN0aW9uKCl7cmV0dXJuIGZ1bmN0aW9uKHQsZSxuLHIsbyxhKXt2YXIgaT1tbih0LFwiZHlcIixcImF2Z1Bvb2xCYWNrcHJvcFwiKSxzPW1uKGUsXCJpbnB1dFwiLFwiYXZnUG9vbEJhY2twcm9wXCIpO0Mocy5yYW5rPT09aS5yYW5rLChmdW5jdGlvbigpe3JldHVyblwiUmFuayBvZiBpbnB1dCAoXCIrcy5yYW5rK1wiKSBkb2VzIG5vdCBtYXRjaCByYW5rIG9mIGR5IChcIitpLnJhbmsrXCIpXCJ9KSksbnVsbD09byYmKG89WzEsMV0pO0MoTW8ocixvKSwoZnVuY3Rpb24oKXtyZXR1cm5cIkVycm9yIGluIGF2Z1Bvb2xCYWNrcHJvcDogRWl0aGVyIHN0cmlkZXMgb3IgZGlsYXRpb25zIG11c3QgYmUgMS4gR290IHN0cmlkZXMgXCIrcitcIiBhbmQgZGlsYXRpb25zICdcIitvK1wiJ1wifSkpO3ZhciB1PXMsYz1pLGw9ITE7Mz09PXMucmFuayYmKGw9ITAsdT1zLmFzNEQoMSxzLnNoYXBlWzBdLHMuc2hhcGVbMV0scy5zaGFwZVsyXSksYz1pLmFzNEQoMSxpLnNoYXBlWzBdLGkuc2hhcGVbMV0saS5zaGFwZVsyXSkpO0MoND09PWMucmFuaywoZnVuY3Rpb24oKXtyZXR1cm5cIkVycm9yIGluIGF2Z1Bvb2xCYWNrcHJvcDogZHkgbXVzdCBiZSByYW5rIDQgYnV0IGdvdCByYW5rIFwiK2MucmFuaytcIi5cIn0pKSxDKDQ9PT11LnJhbmssKGZ1bmN0aW9uKCl7cmV0dXJuXCJFcnJvciBpbiBhdmdQb29sQmFja3Byb3A6IGlucHV0IG11c3QgYmUgcmFuayA0IGJ1dCBnb3QgcmFuayBcIit1LnJhbmsrXCIuXCJ9KSk7dmFyIGg9SW8odS5zaGFwZSxuLHIsbyxhKSxmPUx0LnJ1bktlcm5lbEZ1bmMoKGZ1bmN0aW9uKHQpe3JldHVybiB0LmF2Z1Bvb2xCYWNrcHJvcChjLHUsaCl9KSx7ZHk0RDpjLGlucHV0NEQ6dX0pO2lmKGwpcmV0dXJuIGYuYXMzRChmLnNoYXBlWzFdLGYuc2hhcGVbMl0sZi5zaGFwZVszXSk7cmV0dXJuIGZ9KHQscyxlLG4scixvKX19fSksXCJBdmdQb29sXCIsYyk7cmV0dXJuIGw9bC5jYXN0KGkuZHR5cGUpLHU/bC5hczNEKGwuc2hhcGVbMV0sbC5zaGFwZVsyXSxsLnNoYXBlWzNdKTpsfXZhciBobD1Bbih7bWF4UG9vbF86ZnVuY3Rpb24odCxlLG4scixvKXtyZXR1cm4gY2wodCxlLG4sMSxyLG8pfX0pLGZsPUFuKHthdmdQb29sXzpmdW5jdGlvbih0LGUsbixyLG8pe3JldHVybiBsbCh0LGUsbiwxLHIsbyl9fSksZGw9QW4oe3Bvb2xfOmZ1bmN0aW9uKHQsZSxuLHIsbyxhKXtudWxsPT1vJiYobz1bMSwxXSksbnVsbD09YSYmKGE9MSksMD09PXImJihyPVwidmFsaWRcIik7dmFyIGk9bW4odCxcInhcIixcIm1heFBvb2xcIikscz1pLHU9ITE7Mz09PWkucmFuayYmKHU9ITAscz1pLmFzNEQoMSxpLnNoYXBlWzBdLGkuc2hhcGVbMV0saS5zaGFwZVsyXSkpLEMoTW8oYSxvKSwoZnVuY3Rpb24oKXtyZXR1cm5cIkVycm9yIGluIHBvb2w6IEVpdGhlciBzdHJpZGVzIG9yIGRpbGF0aW9ucyBtdXN0IGJlIDEuIEdvdCBzdHJpZGVzIFwiK2ErXCIgYW5kIGRpbGF0aW9ucyAnXCIrbytcIidcIn0pKTt2YXIgYyxsPUlvKHMuc2hhcGUsZSxhLG8sciksaD1bbC5kaWxhdGlvbkhlaWdodCxsLmRpbGF0aW9uV2lkdGhdO2M9XCJzYW1lXCI9PT1yP2Z1bmN0aW9uKHQsZSl7dmFyIG49dC5tYXAoKGZ1bmN0aW9uKHQsbil7cmV0dXJuIHQrKHQtMSkqKGVbbl0tMSl9KSkubWFwKChmdW5jdGlvbih0KXtyZXR1cm4gdC0xfSkpLHI9bi5tYXAoKGZ1bmN0aW9uKHQpe3JldHVybiBNYXRoLmZsb29yKHQvMil9KSksbz1uLm1hcCgoZnVuY3Rpb24odCxlKXtyZXR1cm4gdC1yW2VdfSkpO3JldHVybiBuLm1hcCgoZnVuY3Rpb24odCxlKXtyZXR1cm5bcltlXSxvW2VdXX0pKX0oW2wuZmlsdGVySGVpZ2h0LGwuZmlsdGVyV2lkdGhdLGgpOltbMCwwXSxbMCwwXV07dmFyIGY9MT09PWhbMF0mJjE9PT1oWzFdLGQ9ZnVuY3Rpb24odCxlLG4pe3ZhciByPW4ubWFwKChmdW5jdGlvbih0KXtyZXR1cm4gdFswXX0pKSxvPW4ubWFwKChmdW5jdGlvbih0KXtyZXR1cm4gdFsxXX0pKSxhPXQuY29uY2F0KHIsbyksaT1lLm1hcCgoZnVuY3Rpb24odCxlKXtyZXR1cm4odC1hW2VdJXQpJXR9KSkscz1vLm1hcCgoZnVuY3Rpb24odCxlKXtyZXR1cm4gdCtpW2VdfSkpLHU9ZS5tYXAoKGZ1bmN0aW9uKHQsZSl7cmV0dXJuW3JbZV0sc1tlXV19KSksYz1lLm1hcCgoZnVuY3Rpb24odCxlKXtyZXR1cm5bMCxpW2VdXX0pKTtyZXR1cm5bdSxjXX0oW2wuaW5IZWlnaHQsbC5pbldpZHRoXSxoLGMpLHA9ZFswXSx2PWRbMV0sbT1mP3I6XCJ2YWxpZFwiLGc9Zj9zOk1yKHMsaCxwKSx5PShcImF2Z1wiPT09bj9mdW5jdGlvbigpe3JldHVybiBsbChnLGUsYSwxLG0pfTpmdW5jdGlvbigpe3JldHVybiBjbChnLGUsYSwxLG0pfSkoKSx4PWY/eTp2cih5LGgsdik7cmV0dXJuIHU/eC5hczNEKHguc2hhcGVbMV0seC5zaGFwZVsyXSx4LnNoYXBlWzNdKTp4fX0pLHBsPUFuKHttYXhQb29sM2RfOmZ1bmN0aW9uKHQsZSxuLHIsbyxhLGkpe3ZvaWQgMD09PWEmJihhPVwiTkRIV0NcIik7dmFyIHM9bW4odCxcInhcIixcIm1heFBvb2wzZFwiKSx1PXMsYz0hMTs0PT09cy5yYW5rJiYoYz0hMCx1PXMuYXM1RCgxLHMuc2hhcGVbMF0scy5zaGFwZVsxXSxzLnNoYXBlWzJdLHMuc2hhcGVbM10pKSxudWxsPT1pJiYoaT1bMSwxLDFdKSxDKDU9PT11LnJhbmssKGZ1bmN0aW9uKCl7cmV0dXJuXCJFcnJvciBpbiBtYXhQb29sM2Q6IHggbXVzdCBiZSByYW5rIDUgYnV0IGdvdCByYW5rIFwiK3UucmFuaytcIi5cIn0pKSxDKFwiTkRIV0NcIj09PWEsKGZ1bmN0aW9uKCl7cmV0dXJuXCJFcnJvciBpbiBtYXhQb29sM2Q6IE9ubHkgTkRIV0MgaXMgY3VycmVudGx5IHN1cHBvcnRlZCwgYnV0IGdvdCBkYXRhRm9ybWF0IG9mIFwiK2F9KSksQyhNbyhuLGkpLChmdW5jdGlvbigpe3JldHVyblwiRXJyb3IgaW4gbWF4UG9vbDNkOiBFaXRoZXIgc3RyaWRlcyBvciBkaWxhdGlvbnMgbXVzdCBiZSAxLiBHb3Qgc3RyaWRlcyBcIituK1wiIGFuZCBkaWxhdGlvbnMgJ1wiK2krXCInXCJ9KSksbnVsbCE9byYmQyhBKHIpLChmdW5jdGlvbigpe3JldHVyblwiRXJyb3IgaW4gbWF4UG9vbDNkOiBwYWQgbXVzdCBiZSBhbiBpbnRlZ2VyIHdoZW4gdXNpbmcsIGRpbVJvdW5kaW5nTW9kZSBcIitvK1wiIGJ1dCBnb3QgcGFkIFwiK3IrXCIuXCJ9KSk7dmFyIGw9a28odS5zaGFwZSxlLG4saSxyLG8sYSksaD1MdC5ydW5LZXJuZWxGdW5jKChmdW5jdGlvbih0LGUpe3ZhciBuPXQubWF4UG9vbDNkKHUsbCk7cmV0dXJuIGUoW3Usbl0pLG59KSx7eDp1fSwoZnVuY3Rpb24odCxhKXt2YXIgcz1hWzBdLHU9YVsxXTtyZXR1cm57eDpmdW5jdGlvbigpe3JldHVybiBmdW5jdGlvbih0LGUsbixyLG8sYSxpLHMpe3ZhciB1PW1uKHQsXCJkeVwiLFwibWF4UG9vbDNkQmFja3Byb3BcIiksYz1tbihlLFwiaW5wdXRcIixcIm1heFBvb2wzZEJhY2twcm9wXCIpLGw9bW4obixcIm91dHB1dFwiLFwibWF4UG9vbDNkQmFja3Byb3BcIiksaD11LGY9YyxkPWwscD0hMTs0PT09Yy5yYW5rJiYocD0hMCxoPXUuYXM1RCgxLHUuc2hhcGVbMF0sdS5zaGFwZVsxXSx1LnNoYXBlWzJdLHUuc2hhcGVbM10pLGY9Yy5hczVEKDEsYy5zaGFwZVswXSxjLnNoYXBlWzFdLGMuc2hhcGVbMl0sYy5zaGFwZVszXSksZD1sLmFzNUQoMSxsLnNoYXBlWzBdLGwuc2hhcGVbMV0sbC5zaGFwZVsyXSxsLnNoYXBlWzNdKSk7Qyg1PT09aC5yYW5rLChmdW5jdGlvbigpe3JldHVyblwiRXJyb3IgaW4gbWF4UG9vbDNkQmFja3Byb3A6IGR5IG11c3QgYmUgcmFuayA1IGJ1dCBnb3QgcmFuayBcIitoLnJhbmsrXCIuXCJ9KSksQyg1PT09Zi5yYW5rLChmdW5jdGlvbigpe3JldHVyblwiRXJyb3IgaW4gbWF4UG9vbDNkQmFja3Byb3A6IGlucHV0IG11c3QgYmUgcmFuayA1IGJ1dCBnb3QgcmFuayBcIitmLnJhbmsrXCIuXCJ9KSksQyg1PT09ZC5yYW5rLChmdW5jdGlvbigpe3JldHVyblwiRXJyb3IgaW4gbWF4UG9vbDNkQmFja3Byb3A6IG91dHB1dCBtdXN0IGJlIHJhbmsgNSBidXQgZ290IHJhbmsgXCIrZC5yYW5rK1wiLlwifSkpLG51bGw9PWEmJihhPVsxLDEsMV0pO0MoTW8obyxhKSwoZnVuY3Rpb24oKXtyZXR1cm5cIkVycm9yIGluIG1heFBvb2wzZEJhY2twcm9wOiBFaXRoZXIgc3RyaWRlcyBvciBkaWxhdGlvbnMgbXVzdCBiZSAxLiBHb3Qgc3RyaWRlcyBcIitvK1wiIGFuZCBkaWxhdGlvbnMgJ1wiK2ErXCInXCJ9KSksbnVsbCE9cyYmQyhBKGkpLChmdW5jdGlvbigpe3JldHVyblwiRXJyb3IgaW4gbWF4UG9vbDNkQmFja3Byb3A6IHBhZCBtdXN0IGJlIGFuIGludGVnZXIgd2hlbiB1c2luZywgZGltUm91bmRpbmdNb2RlIFwiK3MrXCIgYnV0IGdvdCBwYWQgXCIraStcIi5cIn0pKTt2YXIgdj1rbyhmLnNoYXBlLHIsbyxhLGkscyksbT1MdC5ydW5LZXJuZWxGdW5jKChmdW5jdGlvbih0KXtyZXR1cm4gdC5tYXhQb29sM2RCYWNrcHJvcChoLGYsZCx2KX0pLHtkeTVEOmgsaW5wdXQ1RDpmfSk7aWYocClyZXR1cm4gbS5hczREKG0uc2hhcGVbMV0sbS5zaGFwZVsyXSxtLnNoYXBlWzNdLG0uc2hhcGVbNF0pO3JldHVybiBtfSh0LHMsdSxlLG4saSxyLG8pfX19KSk7cmV0dXJuIGM/aC5hczREKGguc2hhcGVbMV0saC5zaGFwZVsyXSxoLnNoYXBlWzNdLGguc2hhcGVbNF0pOmh9fSksdmw9QW4oe2F2Z1Bvb2wzZF86ZnVuY3Rpb24odCxlLG4scixvLGEsaSl7dm9pZCAwPT09YSYmKGE9XCJOREhXQ1wiKTt2YXIgcz1tbih0LFwieFwiLFwiYXZnUG9vbDNkXCIsXCJmbG9hdDMyXCIpLHU9cyxjPSExOzQ9PT1zLnJhbmsmJihjPSEwLHU9cy5hczVEKDEscy5zaGFwZVswXSxzLnNoYXBlWzFdLHMuc2hhcGVbMl0scy5zaGFwZVszXSkpLG51bGw9PWkmJihpPVsxLDEsMV0pLEMoNT09PXUucmFuaywoZnVuY3Rpb24oKXtyZXR1cm5cIkVycm9yIGluIGF2Z1Bvb2wzZDogeCBtdXN0IGJlIHJhbmsgNSBidXQgZ290IHJhbmsgXCIrdS5yYW5rK1wiLlwifSkpLEMoXCJOREhXQ1wiPT09YSwoZnVuY3Rpb24oKXtyZXR1cm5cIkVycm9yIGluIGF2Z1Bvb2wzZDogT25seSBOREhXQyBpcyBjdXJyZW50bHkgc3VwcG9ydGVkLCBidXQgZ290IGRhdGFGb3JtYXQgb2YgXCIrYX0pKSxDKE1vKG4saSksKGZ1bmN0aW9uKCl7cmV0dXJuXCJFcnJvciBpbiBhdmdQb29sM2Q6IEVpdGhlciBzdHJpZGVzIG9yIGRpbGF0aW9ucyBtdXN0IGJlIDEuIEdvdCBzdHJpZGVzIFwiK24rXCIgYW5kIGRpbGF0aW9ucyAnXCIraStcIidcIn0pKSxudWxsIT1vJiZDKEEociksKGZ1bmN0aW9uKCl7cmV0dXJuXCJFcnJvciBpbiBhdmdQb29sM2Q6IHBhZCBtdXN0IGJlIGFuIGludGVnZXIgd2hlbiB1c2luZywgZGltUm91bmRpbmdNb2RlIFwiK28rXCIgYnV0IGdvdCBwYWQgXCIrcitcIi5cIn0pKTt2YXIgbD1rbyh1LnNoYXBlLGUsbixpLHIsbyxhKSxoPUx0LnJ1bktlcm5lbEZ1bmMoKGZ1bmN0aW9uKHQpe3JldHVybiB0LmF2Z1Bvb2wzZCh1LGwpfSkse3g6dX0sKGZ1bmN0aW9uKHQpe3JldHVybnt4OmZ1bmN0aW9uKCl7cmV0dXJuIGZ1bmN0aW9uKHQsZSxuLHIsbyxhLGkpe3ZhciBzPW1uKHQsXCJkeVwiLFwiYXZnUG9vbDNkQmFja3Byb3BcIiksdT1tbihlLFwiaW5wdXRcIixcImF2Z1Bvb2wzZEJhY2twcm9wXCIpLGM9cyxsPXUsaD0hMTs0PT09dS5yYW5rJiYoaD0hMCxjPXMuYXM1RCgxLHMuc2hhcGVbMF0scy5zaGFwZVsxXSxzLnNoYXBlWzJdLHMuc2hhcGVbM10pLGw9dS5hczVEKDEsdS5zaGFwZVswXSx1LnNoYXBlWzFdLHUuc2hhcGVbMl0sdS5zaGFwZVszXSkpO0MoNT09PWMucmFuaywoZnVuY3Rpb24oKXtyZXR1cm5cIkVycm9yIGluIGF2Z1Bvb2wzZEJhY2twcm9wOiBkeSBtdXN0IGJlIHJhbmsgNSBidXQgZ290IHJhbmsgXCIrYy5yYW5rK1wiLlwifSkpLEMoNT09PWwucmFuaywoZnVuY3Rpb24oKXtyZXR1cm5cIkVycm9yIGluIGF2Z1Bvb2wzZEJhY2twcm9wOiBpbnB1dCBtdXN0IGJlIHJhbmsgNSBidXQgZ290IHJhbmsgXCIrbC5yYW5rK1wiLlwifSkpLG51bGw9PW8mJihvPVsxLDEsMV0pO0MoTW8ocixvKSwoZnVuY3Rpb24oKXtyZXR1cm5cIkVycm9yIGluIGF2Z1Bvb2wzZEJhY2twcm9wOiBFaXRoZXIgc3RyaWRlcyBvciBkaWxhdGlvbnMgbXVzdCBiZSAxLiBHb3Qgc3RyaWRlcyBcIityK1wiIGFuZCBkaWxhdGlvbnMgJ1wiK28rXCInXCJ9KSksbnVsbCE9aSYmQyhBKGEpLChmdW5jdGlvbigpe3JldHVyblwiRXJyb3IgaW4gbWF4UG9vbDNkQmFja3Byb3A6IHBhZCBtdXN0IGJlIGFuIGludGVnZXIgd2hlbiB1c2luZywgZGltUm91bmRpbmdNb2RlIFwiK2krXCIgYnV0IGdvdCBwYWQgXCIrYStcIi5cIn0pKTt2YXIgZj1rbyhsLnNoYXBlLG4scixvLGEsaSksZD1MdC5ydW5LZXJuZWxGdW5jKChmdW5jdGlvbih0KXtyZXR1cm4gdC5hdmdQb29sM2RCYWNrcHJvcChjLGwsZil9KSx7ZHk1RDpjLGlucHV0NUQ6bH0pO2lmKGgpcmV0dXJuIGQuYXM0RChkLnNoYXBlWzFdLGQuc2hhcGVbMl0sZC5zaGFwZVszXSxkLnNoYXBlWzRdKTtyZXR1cm4gZH0odCx1LGUsbixpLHIsbyl9fX0pKTtyZXR1cm4gaD1oLmNhc3QodS5kdHlwZSksYz9oLmFzNEQoaC5zaGFwZVsxXSxoLnNoYXBlWzJdLGguc2hhcGVbM10saC5zaGFwZVs0XSk6aH19KTt2YXIgbWw9QW4oe3NsaWNlXzpmdW5jdGlvbih0LGUsbil7dmFyIHIsbyxhPW1uKHQsXCJ4XCIsXCJzbGljZVwiKTtpZigwPT09YS5yYW5rKXRocm93IG5ldyBFcnJvcihcIlNsaWNpbmcgc2NhbGFyIGlzIG5vdCBwb3NzaWJsZVwiKTsocj1cIm51bWJlclwiPT10eXBlb2YgZT9bZV0uY29uY2F0KG5ldyBBcnJheShhLnJhbmstMSkuZmlsbCgwKSk6ZS5sZW5ndGg8YS5yYW5rP2UuY29uY2F0KG5ldyBBcnJheShhLnJhbmstZS5sZW5ndGgpLmZpbGwoMCkpOmUuc2xpY2UoKSkuZm9yRWFjaCgoZnVuY3Rpb24odCl7QygtMSE9PXQsKGZ1bmN0aW9uKCl7cmV0dXJuXCJzbGljZSgpIGRvZXMgbm90IHN1cHBvcnQgbmVnYXRpdmUgYmVnaW4gaW5kZXhpbmcuXCJ9KSl9KSksbz0obz1udWxsPT1uP25ldyBBcnJheShhLnJhbmspLmZpbGwoLTEpOlwibnVtYmVyXCI9PXR5cGVvZiBuP1tuXS5jb25jYXQobmV3IEFycmF5KGEucmFuay0xKS5maWxsKC0xKSk6bi5sZW5ndGg8YS5yYW5rP24uY29uY2F0KG5ldyBBcnJheShhLnJhbmstbi5sZW5ndGgpLmZpbGwoLTEpKTpuKS5tYXAoKGZ1bmN0aW9uKHQsZSl7cmV0dXJuIHQ+PTA/dDooQygtMT09PXQsKGZ1bmN0aW9uKCl7cmV0dXJuXCJOZWdhdGl2ZSBzaXplIHZhbHVlcyBzaG91bGQgYmUgZXhhY3RseSAtMSBidXQgZ290IFwiK3QrXCIgZm9yIHRoZSBzbGljZSgpIHNpemUgYXQgaW5kZXggXCIrZStcIi5cIn0pKSxhLnNoYXBlW2VdLXJbZV0pfSkpLGVvKGEscixvKTt2YXIgaT1hLnNoYXBlLHM9e2JlZ2luOnIsc2l6ZTpvfTtyZXR1cm4gTHQucnVuS2VybmVsRnVuYygoZnVuY3Rpb24odCl7cmV0dXJuIHQuc2xpY2UoYSxyLG8pfSkse3g6YX0sKGZ1bmN0aW9uKHQpe2Zvcih2YXIgZT1bXSxuPTA7bjx0LnJhbms7bisrKWUucHVzaChbcltuXSxpW25dLXJbbl0tb1tuXV0pO3JldHVybnt4OmZ1bmN0aW9uKCl7cmV0dXJuIHQucGFkKGUpfX19KSxcIlNsaWNlXCIscyl9fSksZ2w9QW4oe3NsaWNlMWRfOmZ1bmN0aW9uKHQsZSxuKXt2YXIgcj1tbih0LFwieFwiLFwic2xpY2UxZFwiKTtyZXR1cm4gQygxPT09ci5yYW5rLChmdW5jdGlvbigpe3JldHVyblwic2xpY2UxZCBleHBlY3RzIGEgcmFuay0xIHRlbnNvciwgYnV0IGdvdCBhIHJhbmstXCIrci5yYW5rK1wiIHRlbnNvclwifSkpLG1sKHIsW2VdLFtuXSl9fSkseWw9QW4oe3NsaWNlMmRfOmZ1bmN0aW9uKHQsZSxuKXt2YXIgcj1tbih0LFwieFwiLFwic2xpY2UyZFwiKTtyZXR1cm4gQygyPT09ci5yYW5rLChmdW5jdGlvbigpe3JldHVyblwic2xpY2UyZCBleHBlY3RzIGEgcmFuay0yIHRlbnNvciwgYnV0IGdvdCBhIHJhbmstXCIrci5yYW5rK1wiIHRlbnNvclwifSkpLG1sKHIsZSxuKX19KSx4bD1Bbih7c2xpY2UzZF86ZnVuY3Rpb24odCxlLG4pe3ZhciByPW1uKHQsXCJ4XCIsXCJzbGljZTNkXCIpO3JldHVybiBDKDM9PT1yLnJhbmssKGZ1bmN0aW9uKCl7cmV0dXJuXCJzbGljZTNkIGV4cGVjdHMgYSByYW5rLTMgdGVuc29yLCBidXQgZ290IGEgcmFuay1cIityLnJhbmsrXCIgdGVuc29yXCJ9KSksbWwocixlLG4pfX0pLGJsPUFuKHtzbGljZTRkXzpmdW5jdGlvbih0LGUsbil7dmFyIHI9bW4odCxcInhcIixcInNsaWNlNGRcIik7cmV0dXJuIEMoND09PXIucmFuaywoZnVuY3Rpb24oKXtyZXR1cm5cInNsaWNlNGQgZXhwZWN0cyBhIHJhbmstNCB0ZW5zb3IsIGJ1dCBnb3QgYSByYW5rLVwiK3IucmFuaytcIiB0ZW5zb3JcIn0pKSxtbChyLGUsbil9fSk7ZnVuY3Rpb24gd2wodCxlLG4scixvKXtyZXR1cm4gZS5yYW5rPG4ucmFuayYmKGU9ZS5yZXNoYXBlKHduKGUuc2hhcGUscikpKSx0LnJhbms8bi5yYW5rJiYodD10LnJlc2hhcGUod24odC5zaGFwZSxyKSkpLHt4OmZ1bmN0aW9uKCl7dmFyIHI9dC5tdWwobi5lcXVhbChlKS5jYXN0KHQuZHR5cGUpKTtyZXR1cm4gbnVsbD09bz9yOnIudHJhbnNwb3NlKG8pfX19dmFyIENsPUFuKHthbGxfOmZ1bmN0aW9uKHQsZSxuKXt2b2lkIDA9PT1lJiYoZT1udWxsKSx2b2lkIDA9PT1uJiYobj0hMSk7dmFyIHI9bW4odCxcInhcIixcImFsbFwiLFwiYm9vbFwiKSxvPU8oZSxyLnNoYXBlKSxhPW8saT1FbihhLHIucmFuayk7bnVsbCE9aSYmKHI9ci50cmFuc3Bvc2UoaSksYT1JbihhLmxlbmd0aCxyLnJhbmspKTt2YXIgcz1MdC5ydW5LZXJuZWxGdW5jKChmdW5jdGlvbih0KXtyZXR1cm4gdC5hbGwocixhKX0pLHskeDpyfSk7aWYobil7dmFyIHU9d24ocy5zaGFwZSxvKTtyZXR1cm4gcy5yZXNoYXBlKHUpfXJldHVybiBzfX0pLEVsPUFuKHthbnlfOmZ1bmN0aW9uKHQsZSxuKXt2b2lkIDA9PT1lJiYoZT1udWxsKSx2b2lkIDA9PT1uJiYobj0hMSk7dmFyIHI9bW4odCxcInhcIixcImFueVwiLFwiYm9vbFwiKSxvPU8oZSxyLnNoYXBlKSxhPW8saT1FbihhLHIucmFuayk7bnVsbCE9aSYmKHI9ci50cmFuc3Bvc2UoaSksYT1JbihhLmxlbmd0aCxyLnJhbmspKTt2YXIgcz1MdC5ydW5LZXJuZWxGdW5jKChmdW5jdGlvbih0KXtyZXR1cm4gdC5hbnkocixhKX0pLHskeDpyfSk7aWYobil7dmFyIHU9d24ocy5zaGFwZSxvKTtyZXR1cm4gcy5yZXNoYXBlKHUpfXJldHVybiBzfX0pLFJsPUFuKHthcmdNYXhfOmZ1bmN0aW9uKHQsZSl7dm9pZCAwPT09ZSYmKGU9MCk7dmFyIG49bW4odCxcInhcIixcImFyZ01heFwiKTtudWxsPT1lJiYoZT0wKTt2YXIgcj1PKGUsbi5zaGFwZSksbz1FbihyLG4ucmFuayk7bnVsbCE9byYmKG49bi50cmFuc3Bvc2Uobykscj1JbihyLmxlbmd0aCxuLnJhbmspKTt2YXIgYT17YXhpczpyWzBdfSxpPVtuXTtyZXR1cm4gTHQucnVuS2VybmVsRnVuYygoZnVuY3Rpb24odCxlKXt2YXIgbz10LmFyZ01heChuLHJbMF0pO3JldHVybiBlKFtuXSksb30pLHt4Om59LChmdW5jdGlvbih0LGUpe3ZhciBuPWVbMF07cmV0dXJue3g6ZnVuY3Rpb24oKXtyZXR1cm4gWG4obil9fX0pLFwiQXJnTWF4XCIsYSxpKX19KSxJbD1Bbih7YXJnTWluXzpmdW5jdGlvbih0LGUpe3ZvaWQgMD09PWUmJihlPTApO3ZhciBuPW1uKHQsXCJ4XCIsXCJhcmdNaW5cIik7bnVsbD09ZSYmKGU9MCk7dmFyIHI9TyhlLG4uc2hhcGUpLG89RW4ocixuLnJhbmspO3JldHVybiBudWxsIT1vJiYobj1uLnRyYW5zcG9zZShvKSxyPUluKHIubGVuZ3RoLG4ucmFuaykpLEx0LnJ1bktlcm5lbEZ1bmMoKGZ1bmN0aW9uKHQsZSl7dmFyIG89dC5hcmdNaW4obixyWzBdKTtyZXR1cm4gZShbbl0pLG99KSx7JHg6bn0sKGZ1bmN0aW9uKHQsZSl7dmFyIG49ZVswXTtyZXR1cm57JHg6ZnVuY3Rpb24oKXtyZXR1cm4gWG4obil9fX0pKX19KSxrbD1Bbih7bG9nU3VtRXhwXzpmdW5jdGlvbih0LGUsbil7dm9pZCAwPT09ZSYmKGU9bnVsbCksdm9pZCAwPT09biYmKG49ITEpO3ZhciByPW1uKHQsXCJ4XCIsXCJsb2dTdW1FeHBcIiksbz1PKGUsci5zaGFwZSksYT1yLm1heChvLCEwKSxpPXIuc3ViKGEpLmV4cCgpLnN1bShvKS5sb2coKSxzPWEucmVzaGFwZShpLnNoYXBlKS5hZGQoaSk7aWYobil7dmFyIHU9d24ocy5zaGFwZSxvKTtyZXR1cm4gcy5yZXNoYXBlKHUpfXJldHVybiBzfX0pLFNsPUFuKHttYXhfOmZ1bmN0aW9uKHQsZSxuKXt2b2lkIDA9PT1lJiYoZT1udWxsKSx2b2lkIDA9PT1uJiYobj0hMSk7dmFyIHI9bW4odCxcInhcIixcIm1heFwiKSxvPXIsYT1PKGUsci5zaGFwZSksaT1hLHM9RW4oaSxyLnJhbmspO251bGwhPXMmJihyPXIudHJhbnNwb3NlKHMpLGk9SW4oaS5sZW5ndGgsci5yYW5rKSk7dmFyIHU9W3JdLGM9THQucnVuS2VybmVsRnVuYygoZnVuY3Rpb24odCxlKXt2YXIgbj10Lm1heChyLGkpO3JldHVybiBlKFtvLG5dKSxufSkse3g6cn0sKGZ1bmN0aW9uKHQsZSl7cmV0dXJuIHdsKHQsZVsxXSxlWzBdLGEscyl9KSxcIk1heFwiLHtheGVzOml9LHUsWyEwXSk7aWYobil7dmFyIGw9d24oYy5zaGFwZSxhKTtjPWMucmVzaGFwZShsKX1yZXR1cm4gY319KSxBbD1Bbih7bWVhbl86ZnVuY3Rpb24odCxlLG4pe3ZvaWQgMD09PWUmJihlPW51bGwpLHZvaWQgMD09PW4mJihuPSExKTt2YXIgcj1tbih0LFwieFwiLFwibWVhblwiKSxvPU8oZSxyLnNoYXBlKSxhPWsoYm4oci5zaGFwZSxvKVsxXSk7cmV0dXJuIHZvKChmdW5jdGlvbih0KXt2YXIgcj1PbihhKTtyZXR1cm57dmFsdWU6KHIuZHR5cGU9PT10LmR0eXBlP3Q6dC5jYXN0KHIuZHR5cGUpKS5kaXYocikuc3VtKGUsbiksZ3JhZEZ1bmM6ZnVuY3Rpb24oZSl7dmFyIG49dC5zaGFwZS5zbGljZSgpO3JldHVybiBvLmZvckVhY2goKGZ1bmN0aW9uKHQpe25bdF09MX0pKSxlLnJlc2hhcGUobikubXVsKHpuKHQuc2hhcGUsXCJmbG9hdDMyXCIpKS5kaXYoYSl9fX0pKShyKX19KSxEbD1Bbih7bWluXzpmdW5jdGlvbih0LGUsbil7dm9pZCAwPT09ZSYmKGU9bnVsbCksdm9pZCAwPT09biYmKG49ITEpO3ZhciByPW1uKHQsXCJ4XCIsXCJtaW5cIiksbz1yLGE9TyhlLHIuc2hhcGUpLGk9YSxzPUVuKGksci5yYW5rKTtudWxsIT1zJiYocj1yLnRyYW5zcG9zZShzKSxpPUluKGkubGVuZ3RoLHIucmFuaykpO3ZhciB1PVtyXSxjPUx0LnJ1bktlcm5lbEZ1bmMoKGZ1bmN0aW9uKHQsZSl7dmFyIG49dC5taW4ocixpKTtyZXR1cm4gZShbbyxuXSksbn0pLHt4OnJ9LChmdW5jdGlvbih0LGUpe3JldHVybiB3bCh0LGVbMV0sZVswXSxhLHMpfSksXCJNaW5cIix7YXhlczppfSx1LFshMF0pO2lmKG4pe3ZhciBsPXduKGMuc2hhcGUsYSk7Yz1jLnJlc2hhcGUobCl9cmV0dXJuIGN9fSksVGw9QW4oe21vbWVudHNfOmZ1bmN0aW9uKHQsZSxuKXt2b2lkIDA9PT1lJiYoZT1udWxsKSx2b2lkIDA9PT1uJiYobj0hMSk7dmFyIHI9TyhlLCh0PW1uKHQsXCJ4XCIsXCJtb21lbnRzXCIpKS5zaGFwZSksbz10Lm1lYW4ocixuKSxhPW8uc2hhcGU7bnx8KGE9d24oby5zaGFwZSxyKSk7dmFyIGk9dC50b0Zsb2F0KCkuc3ViKG8ucmVzaGFwZShhKSkuc3F1YXJlKCk7cmV0dXJue21lYW46byx2YXJpYW5jZTppLm1lYW4ocixuKX19fSksTmw9QW4oe3N1bV86ZnVuY3Rpb24odCxlLG4pe3ZvaWQgMD09PWUmJihlPW51bGwpLHZvaWQgMD09PW4mJihuPSExKTt2YXIgcj1tbih0LFwieFwiLFwic3VtXCIpO1wiYm9vbFwiPT09ci5kdHlwZSYmKHI9ci50b0ludCgpKTt2YXIgbz1PKGUsci5zaGFwZSk7cmV0dXJuIHZvKChmdW5jdGlvbih0KXt2YXIgZT1FbihvLHQucmFuaykscj1vLGE9dDtudWxsIT1lJiYoYT10LnRyYW5zcG9zZShlKSxyPUluKHIubGVuZ3RoLHQucmFuaykpO3ZhciBpPWZ1bmN0aW9uKGUpe3ZhciBuPXQuc2hhcGUuc2xpY2UoKTtyZXR1cm4gby5mb3JFYWNoKChmdW5jdGlvbih0KXtuW3RdPTF9KSksZS5yZXNoYXBlKG4pLm11bCh6bih0LnNoYXBlLFwiZmxvYXQzMlwiKSl9LHM9e2F4ZXM6cn0sdT1MdC5ydW5LZXJuZWxGdW5jKChmdW5jdGlvbih0KXtyZXR1cm4gdC5zdW0oYSxyKX0pLHt4OmF9LChmdW5jdGlvbih0KXtyZXR1cm57eDpmdW5jdGlvbigpe3JldHVybiBpKHQpfX19KSxcIlN1bVwiLHMpO2lmKG4pe3ZhciBjPXduKHUuc2hhcGUsbyk7dT11LnJlc2hhcGUoYyl9cmV0dXJue3ZhbHVlOnUsZ3JhZEZ1bmM6aX19KSkocil9fSksRmw9QW4oe3Byb2RfOmZ1bmN0aW9uKHQsZSxuKXt2b2lkIDA9PT1lJiYoZT1udWxsKSx2b2lkIDA9PT1uJiYobj0hMSk7dmFyIHI9bW4odCxcInhcIixcInByb2RcIik7XCJib29sXCI9PT1yLmR0eXBlJiYocj1yLnRvSW50KCkpO3ZhciBvPU8oZSxyLnNoYXBlKSxhPUVuKG8sci5yYW5rKSxpPW8scz1yO251bGwhPWEmJihzPXIudHJhbnNwb3NlKGEpLGk9SW4oaS5sZW5ndGgsci5yYW5rKSk7dmFyIHU9THQucnVuS2VybmVsRnVuYygoZnVuY3Rpb24odCl7cmV0dXJuIHQucHJvZChzLGkpfSkse3Blcm11dGVkWDpzfSk7aWYobil7dmFyIGM9d24odS5zaGFwZSxvKTt1PXUucmVzaGFwZShjKX1yZXR1cm4gdX19KTt2YXIgX2w9QW4oe2VsdV86ZnVuY3Rpb24odCl7dmFyIGU9bW4odCxcInhcIixcImVsdVwiKTtyZXR1cm4gTHQucnVuS2VybmVsRnVuYygoZnVuY3Rpb24odCxuKXt2YXIgcj10LmVsdShlKTtyZXR1cm4gbihbcl0pLHJ9KSx7JHg6ZX0sKGZ1bmN0aW9uKHQsZSl7dmFyIG49ZVswXTtyZXR1cm57JHg6ZnVuY3Rpb24oKXtyZXR1cm4gTHQucnVuS2VybmVsRnVuYygoZnVuY3Rpb24oZSl7cmV0dXJuIGUuZWx1RGVyKHQsbil9KSx7ZHk6dCx5Om59KX19fSkpfX0pLE9sPUFuKHtsZWFreVJlbHVfOmZ1bmN0aW9uKHQsZSl7dm9pZCAwPT09ZSYmKGU9LjIpO3ZhciBuPW1uKHQsXCJ4XCIsXCJsZWFreVJlbHVcIik7cmV0dXJuIGhjKE9uKGUpLm11bChuKSxuKX19KSxNbD1Bbih7cHJlbHVfOmZ1bmN0aW9uKHQsZSl7dmFyIG49bW4odCxcInhcIixcInByZWx1XCIpLHI9bW4oZSxcImFscGhhXCIsXCJwcmVsdVwiKTtyZXR1cm4gTHQucnVuS2VybmVsRnVuYygoZnVuY3Rpb24odCxlKXt2YXIgbz10LnByZWx1KG4scik7cmV0dXJuIGUoW24scl0pLG99KSx7eDpuLGFscGhhOnJ9LChmdW5jdGlvbih0LGUpe3ZhciBuPWVbMF0scj1lWzFdLG89bi5ncmVhdGVyKDApO3JldHVybnt4OmZ1bmN0aW9uKCl7cmV0dXJuIGVjKG8sdCx0Lm11bChyKSl9LGFscGhhOmZ1bmN0aW9uKCl7dmFyIGU9ZWMobyxYbih0KSx0Lm11bChuKSksYT1FbyhyLnNoYXBlLHQuc2hhcGUpO3JldHVybiBhLmxlbmd0aD4wJiYoZT1lLnN1bShhKSksZS5yZXNoYXBlKHIuc2hhcGUpfX19KSxcIlByZWx1XCIpfX0pLEJsPUFuKHtyZWx1XzpmdW5jdGlvbih0KXt2YXIgZT1tbih0LFwieFwiLFwicmVsdVwiKTtyZXR1cm5cImJvb2xcIj09PWUuZHR5cGU/ZS50b0ludCgpOkx0LnJ1bktlcm5lbEZ1bmMoKGZ1bmN0aW9uKHQsbil7dmFyIHI9dC5yZWx1KGUpO3JldHVybiBuKFtlXSkscn0pLHt4OmV9LChmdW5jdGlvbih0LGUpe3ZhciBuPWVbMF07cmV0dXJue3g6ZnVuY3Rpb24oKXtyZXR1cm4gdC5tdWxTdHJpY3Qobi5zdGVwKCkudG9GbG9hdCgpKX19fSksXCJSZWx1XCIpfX0pLFBsPUFuKHtyZWx1Nl86ZnVuY3Rpb24odCl7dmFyIGU9bW4odCxcInhcIixcInJlbHU2XCIpO3JldHVyblwiYm9vbFwiPT09ZS5kdHlwZT9lLnRvSW50KCk6THQucnVuS2VybmVsRnVuYygoZnVuY3Rpb24odCxuKXt2YXIgcj10LnJlbHU2KGUpO3JldHVybiBuKFtlXSkscn0pLHt4OmV9LChmdW5jdGlvbih0LGUpe3ZhciBuPWVbMF0scj1uLmxlc3NFcXVhbCg2KS5tdWwobi5zdGVwKCkpO3JldHVybnt4OmZ1bmN0aW9uKCl7cmV0dXJuIHQubXVsU3RyaWN0KHIudG9GbG9hdCgpKX19fSksXCJSZWx1NlwiKX19KSxMbD1Bbih7c2VsdV86ZnVuY3Rpb24odCl7dmFyIGU9bW4odCxcInhcIixcInNlbHVcIik7cmV0dXJuIEx0LnJ1bktlcm5lbEZ1bmMoKGZ1bmN0aW9uKHQsbil7dmFyIHI9dC5zZWx1KGUpO3JldHVybiBuKFtlXSkscn0pLHskeDplfSwoZnVuY3Rpb24odCxlKXt2YXIgbj1lWzBdO3JldHVybnskeDpmdW5jdGlvbigpe3ZhciBlPW4uZ3JlYXRlcihPbigwKSkscj1Pbihicyksbz1Pbih3cyksYT10Lm11bChvKSxpPXQubXVsKHIpLm11bChuLnRvRmxvYXQoKS5leHAoKSk7cmV0dXJuIGVjKGUsYSxpKX19fSkpfX0pO3ZhciBXbD1Bbih7dHJhbnNwb3NlXzpmdW5jdGlvbih0LGUpe3ZhciBuPW1uKHQsXCJ4XCIsXCJ0cmFuc3Bvc2VcIik7aWYobnVsbD09ZSYmKGU9bi5zaGFwZS5tYXAoKGZ1bmN0aW9uKHQsZSl7cmV0dXJuIGV9KSkucmV2ZXJzZSgpKSxDKG4ucmFuaz09PWUubGVuZ3RoLChmdW5jdGlvbigpe3JldHVyblwiRXJyb3IgaW4gdHJhbnNwb3NlOiByYW5rIG9mIGlucHV0IFwiK24ucmFuaytcIiBtdXN0IG1hdGNoIGxlbmd0aCBvZiBwZXJtIFwiK2UrXCIuXCJ9KSksZS5mb3JFYWNoKChmdW5jdGlvbih0KXtDKHQ+PTAmJnQ8bi5yYW5rLChmdW5jdGlvbigpe3JldHVyblwiQWxsIGVudHJpZXMgaW4gJ3Blcm0nIG11c3QgYmUgYmV0d2VlbiAwIGFuZCBcIisobi5yYW5rLTEpK1wiIGJ1dCBnb3QgXCIrZX0pKX0pKSxuLnJhbms8PTEpcmV0dXJuIG4uY2xvbmUoKTt2YXIgcj17cGVybTplfTtyZXR1cm4gTHQucnVuS2VybmVsRnVuYygoZnVuY3Rpb24odCl7cmV0dXJuIHQudHJhbnNwb3NlKG4sZSl9KSx7eDpufSwoZnVuY3Rpb24odCl7dmFyIG49Um4oZSk7cmV0dXJue3g6ZnVuY3Rpb24oKXtyZXR1cm4gdC50cmFuc3Bvc2Uobil9fX0pLFwiVHJhbnNwb3NlXCIscil9fSk7dmFyIFVsPUFuKHtsb2NhbFJlc3BvbnNlTm9ybWFsaXphdGlvbl86ZnVuY3Rpb24odCxlLG4scixvKXt2b2lkIDA9PT1lJiYoZT01KSx2b2lkIDA9PT1uJiYobj0xKSx2b2lkIDA9PT1yJiYocj0xKSx2b2lkIDA9PT1vJiYobz0uNSk7dmFyIGE9bW4odCxcInhcIixcImxvY2FsUmVzcG9uc2VOb3JtYWxpemF0aW9uXCIpO0MoND09PWEucmFua3x8Mz09PWEucmFuaywoZnVuY3Rpb24oKXtyZXR1cm5cIkVycm9yIGluIGxvY2FsUmVzcG9uc2VOb3JtYWxpemF0aW9uOiB4IG11c3QgYmUgcmFuayAzIG9yIDQgYnV0IGdvdFxcbiAgICAgICAgICAgICAgIHJhbmsgXCIrYS5yYW5rK1wiLlwifSkpLEMoQShlKSwoZnVuY3Rpb24oKXtyZXR1cm5cIkVycm9yIGluIGxvY2FsUmVzcG9uc2VOb3JtYWxpemF0aW9uOiBkZXB0aFJhZGl1cyBtdXN0IGJlIGFuIGludGVnZXIgYnV0IGdvdCBkZXB0aFJhZGl1cyBcIitlK1wiLlwifSkpO3ZhciBpPWEscz0hMTszPT09YS5yYW5rJiYocz0hMCxpPWEuYXM0RCgxLGEuc2hhcGVbMF0sYS5zaGFwZVsxXSxhLnNoYXBlWzJdKSk7dmFyIHU9THQucnVuS2VybmVsRnVuYygoZnVuY3Rpb24odCxhKXt2YXIgcz10LmxvY2FsUmVzcG9uc2VOb3JtYWxpemF0aW9uNEQoaSxlLG4scixvKTtyZXR1cm4gYShbaSxzXSksc30pLHt4NEQ6aX0sKGZ1bmN0aW9uKHQsYSl7dmFyIGk9YVswXSxzPWFbMV07cmV0dXJue3g0RDpmdW5jdGlvbigpe3JldHVybiBMdC5ydW5LZXJuZWxGdW5jKChmdW5jdGlvbihhKXtyZXR1cm4gYS5MUk5HcmFkKHQsaSxzLGUsbixyLG8pfSkse30pfX19KSk7cmV0dXJuIHM/dS5hczNEKHUuc2hhcGVbMV0sdS5zaGFwZVsyXSx1LnNoYXBlWzNdKTp1fX0pO3ZhciBWbD1Bbih7bm9ybV86ZnVuY3Rpb24odCxlLG4scil7dm9pZCAwPT09ZSYmKGU9XCJldWNsaWRlYW5cIiksdm9pZCAwPT09biYmKG49bnVsbCksdm9pZCAwPT09ciYmKHI9ITEpO3ZhciBvPWZ1bmN0aW9uIHQoZSxuLHIpe3ZvaWQgMD09PXImJihyPW51bGwpO2lmKDA9PT1lLnJhbmspcmV0dXJuIGUuYWJzKCk7aWYoMSE9PWUucmFuayYmbnVsbD09PXIpcmV0dXJuIHQoZS5yZXNoYXBlKFstMV0pLG4scik7aWYoMT09PWUucmFua3x8XCJudW1iZXJcIj09dHlwZW9mIHJ8fEFycmF5LmlzQXJyYXkocikmJjE9PT1yLmxlbmd0aCl7aWYoMT09PW4pcmV0dXJuIGUuYWJzKCkuc3VtKHIpO2lmKG49PT0xLzApcmV0dXJuIGUuYWJzKCkubWF4KHIpO2lmKG49PT0tMS8wKXJldHVybiBlLmFicygpLm1pbihyKTtpZihcImV1Y2xpZGVhblwiPT09bnx8Mj09PW4pcmV0dXJuIGUuYWJzKCkucG93KE9uKDIsXCJpbnQzMlwiKSkuc3VtKHIpLnNxcnQoKTt0aHJvdyBuZXcgRXJyb3IoXCJFcnJvciBpbiBub3JtOiBpbnZhbGlkIG9yZCB2YWx1ZTogXCIrbil9aWYoQXJyYXkuaXNBcnJheShyKSYmMj09PXIubGVuZ3RoKXtpZigxPT09bilyZXR1cm4gZS5hYnMoKS5zdW0oclswXSkubWF4KHJbMV0tMSk7aWYobj09PTEvMClyZXR1cm4gZS5hYnMoKS5zdW0oclsxXSkubWF4KHJbMF0pO2lmKG49PT0tMS8wKXJldHVybiBlLmFicygpLnN1bShyWzFdKS5taW4oclswXSk7aWYoXCJmcm9cIj09PW58fFwiZXVjbGlkZWFuXCI9PT1uKXJldHVybiBlLnNxdWFyZSgpLnN1bShyKS5zcXJ0KCk7dGhyb3cgbmV3IEVycm9yKFwiRXJyb3IgaW4gbm9ybTogaW52YWxpZCBvcmQgdmFsdWU6IFwiK24pfXRocm93IG5ldyBFcnJvcihcIkVycm9yIGluIG5vcm06IGludmFsaWQgYXhpczogXCIrcil9KHQ9bW4odCxcInhcIixcIm5vcm1cIiksZSxuKSxhPW8uc2hhcGU7aWYocil7dmFyIGk9TyhuLHQuc2hhcGUpO2E9d24oby5zaGFwZSxpKX1yZXR1cm4gby5yZXNoYXBlKGEpfX0pO3ZhciB6bD1Bbih7YmFzaWNMU1RNQ2VsbF86ZnVuY3Rpb24odCxlLG4scixvLGEpe3ZhciBpPW1uKHQsXCJmb3JnZXRCaWFzXCIsXCJiYXNpY0xTVE1DZWxsXCIpLHM9bW4oZSxcImxzdG1LZXJuZWxcIixcImJhc2ljTFNUTUNlbGxcIiksdT1tbihuLFwibHN0bUJpYXNcIixcImJhc2ljTFNUTUNlbGxcIiksYz1tbihyLFwiZGF0YVwiLFwiYmFzaWNMU1RNQ2VsbFwiKSxsPW1uKG8sXCJjXCIsXCJiYXNpY0xTVE1DZWxsXCIpLGg9bW4oYSxcImhcIixcImJhc2ljTFNUTUNlbGxcIiksZj1jLmNvbmNhdChoLDEpLm1hdE11bChzKS5hZGQodSksZD1mLnNoYXBlWzBdLHA9Zi5zaGFwZVsxXS80LHY9W2QscF0sbT1mLnNsaWNlKFswLDBdLHYpLGc9Zi5zbGljZShbMCxwXSx2KSx5PWYuc2xpY2UoWzAsMipwXSx2KSx4PWYuc2xpY2UoWzAsMypwXSx2KSxiPW0uc2lnbW9pZCgpLm11bFN0cmljdChnLnRhbmgoKSkuYWRkU3RyaWN0KGwubXVsU3RyaWN0KGkuYWRkKHkpLnNpZ21vaWQoKSkpLHc9Yi50YW5oKCkubXVsU3RyaWN0KHguc2lnbW9pZCgpKTtyZXR1cm5bYix3XX19KSxHbD1Bbih7bXVsdGlSTk5DZWxsXzpmdW5jdGlvbih0LGUsbixyKXtmb3IodmFyIG89bW4oZSxcImRhdGFcIixcIm11bHRpUk5OQ2VsbFwiKSxhPWduKG4sXCJjXCIsXCJtdWx0aVJOTkNlbGxcIiksaT1nbihyLFwiaFwiLFwibXVsdGlSTk5DZWxsXCIpLHM9byx1PVtdLGM9MDtjPHQubGVuZ3RoO2MrKyl7dmFyIGw9dFtjXShzLGFbY10saVtjXSk7dS5wdXNoKGxbMF0pLHUucHVzaChsWzFdKSxzPWxbMV19dmFyIGg9W10sZj1bXTtmb3IoYz0wO2M8dS5sZW5ndGg7Yys9MiloLnB1c2godVtjXSksZi5wdXNoKHVbYysxXSk7cmV0dXJuW2gsZl19fSk7dmFyIEhsPUFuKHttb3ZpbmdBdmVyYWdlXzpmdW5jdGlvbih0LGUsbixyLG8pe3ZvaWQgMD09PW8mJihvPSEwKTt2YXIgYT1tbih0LFwidlwiLFwibW92aW5nQXZlcmFnZVwiKSxpPW1uKGUsXCJ4XCIsXCJtb3ZpbmdBdmVyYWdlXCIpLHM9bW4obixcImRlY2F5XCIsXCJtb3ZpbmdBdmVyYWdlXCIpO0Z0KGEsaSksQyhTKGEuc2hhcGUsaS5zaGFwZSksKGZ1bmN0aW9uKCl7cmV0dXJuXCJTaGFwZSBtaXNtYXRjaCBpbiB2IGFuZCB4XCJ9KSk7dmFyIHU9T24oMSksYz11LnN1YihzKSxsPWkuc3ViKGEpLm11bChjKTtpZihvKXtDKG51bGwhPXIsKGZ1bmN0aW9uKCl7cmV0dXJuXCJXaGVuIHVzaW5nIHplcm9EZWJpYXM6IHRydWUsIHN0ZXAgaXMgcmVxdWlyZWQuXCJ9KSk7dmFyIGg9bW4ocixcInN0ZXBcIixcIm1vdmluZ0F2ZXJhZ2VcIik7bD1sLmRpdih1LnN1Yih4YyhzLGgpKSl9cmV0dXJuIGEuYWRkKGwpfX0pO3ZhciBxbD1Bbih7c3RyaWRlZFNsaWNlXzpmdW5jdGlvbih0LGUsbixyLG8sYSxpLHMsdSl7aWYodm9pZCAwPT09byYmKG89MCksdm9pZCAwPT09YSYmKGE9MCksdm9pZCAwPT09aSYmKGk9MCksdm9pZCAwPT09cyYmKHM9MCksdm9pZCAwPT09dSYmKHU9MCksbnVsbD09ciYmKHI9bmV3IEFycmF5KGUubGVuZ3RoKSksMCE9PWkpdGhyb3cgbmV3IEVycm9yKFwiZWxsaXBzaXMgbWFzayBpcyBub3QgeWV0IHN1cHBvcnRlZFwiKTt2YXIgYz1tbih0LFwieFwiLFwic3RyaWRlZFNsaWNlXCIpLGw9bm8ocyksaD1jLnNoYXBlLnNsaWNlKCk7bC5mb3JFYWNoKChmdW5jdGlvbih0KXtlW3RdPTAsblt0XT0xLGguc3BsaWNlKHQsMCwxKX0pKSxjPWMucmVzaGFwZShoKTtmb3IodmFyIGY9MDtmPGMucmFuaztmKyspZVtmXT1vbyhvLGUscixjLnNoYXBlLGYpLG5bZl09YW8oYSxuLHIsYy5zaGFwZSxmKSxyW2ZdPXJbZl18fDE7dmFyIGQ9bm8odSk7ZC5mb3JFYWNoKChmdW5jdGlvbih0KXtuW3RdPWVbdF0rMSxyW3RdPTF9KSk7dmFyIHA9cm8oZSxuLHIpLHY9cC5maWx0ZXIoKGZ1bmN0aW9uKHQsZSl7cmV0dXJuLTE9PT1kLmluZGV4T2YoZSl9KSk7cmV0dXJuIHIuZXZlcnkoKGZ1bmN0aW9uKHQpe3JldHVybiAxPT09dH0pKT9tbChjLGUscCkucmVzaGFwZSh2KTpMdC5ydW5LZXJuZWxGdW5jKChmdW5jdGlvbih0KXtyZXR1cm4gdC5zdHJpZGVkU2xpY2UoYyxlLG4scil9KSx7JHg6Y30pLnJlc2hhcGUodil9fSk7dmFyIEtsPUFuKHt0b3BrXzpmdW5jdGlvbih0LGUsbil7dm9pZCAwPT09ZSYmKGU9MSksdm9pZCAwPT09biYmKG49ITApO3ZhciByPW1uKHQsXCJ4XCIsXCJ0b3BrXCIpO2lmKDA9PT1yLnJhbmspdGhyb3cgbmV3IEVycm9yKFwidG9waygpIGV4cGVjdHMgdGhlIGlucHV0IHRvIGJlIG9mIHJhbmsgMSBvciBoaWdoZXJcIik7dmFyIG89ci5zaGFwZVtyLnNoYXBlLmxlbmd0aC0xXTtpZihlPm8pdGhyb3cgbmV3IEVycm9yKFwiJ2snIHBhc3NlZCB0byB0b3BrKCkgbXVzdCBiZSA8PSB0aGUgbGFzdCBkaW1lbnNpb24gKFwiK28rXCIpIGJ1dCBnb3QgXCIrZSk7dmFyIGE9THQucnVuS2VybmVsRnVuYygoZnVuY3Rpb24odCl7cmV0dXJuIHQudG9wayhyLGUsbil9KSx7JHg6cn0pO3JldHVybnt2YWx1ZXM6YVswXSxpbmRpY2VzOmFbMV19fX0pO3ZhciBqbD1Bbih7c2NhdHRlck5EXzpmdW5jdGlvbih0LGUsbil7dmFyIHI9bW4odCxcImluZGljZXNcIixcInNjYXR0ZXJORFwiLFwiaW50MzJcIiksbz1tbihlLFwidXBkYXRlc1wiLFwic2NhdHRlck5EXCIpO3JldHVybiBKcihvLHIsbiksTHQucnVuS2VybmVsRnVuYygoZnVuY3Rpb24odCl7cmV0dXJuIHQuc2NhdHRlck5EKHIsbyxuKX0pLHtpbmRpY2VzOnIsdXBkYXRlczpvfSxudWxsLFwiU2NhdHRlck5kXCIse3NoYXBlOm59KX19KTt2YXIgWGw9QW4oe2ZmdF86ZnVuY3Rpb24odCl7QyhcImNvbXBsZXg2NFwiPT09dC5kdHlwZSwoZnVuY3Rpb24oKXtyZXR1cm5cIlRoZSBkdHlwZSBmb3IgdGYuc3BlY3RyYWwuZmZ0KCkgbXVzdCBiZSBjb21wbGV4NjQgYnV0IGdvdCBcIit0LmR0eXBlK1wiLlwifSkpO3ZhciBlPXQuc2hhcGVbdC5zaGFwZS5sZW5ndGgtMV0sbj10LnNpemUvZSxyPXQuYXMyRChuLGUpO3JldHVybiBMdC5ydW5LZXJuZWxGdW5jKChmdW5jdGlvbih0KXtyZXR1cm4gdC5mZnQocil9KSx7aW5wdXQ6dH0pLnJlc2hhcGUodC5zaGFwZSl9fSksWWw9QW4oe2lmZnRfOmZ1bmN0aW9uKHQpe0MoXCJjb21wbGV4NjRcIj09PXQuZHR5cGUsKGZ1bmN0aW9uKCl7cmV0dXJuXCJUaGUgZHR5cGUgZm9yIHRmLnNwZWN0cmFsLmlmZnQoKSBtdXN0IGJlIGNvbXBsZXg2NCBidXQgZ290IFwiK3QuZHR5cGUrXCIuXCJ9KSk7dmFyIGU9dC5zaGFwZVt0LnNoYXBlLmxlbmd0aC0xXSxuPXQuc2l6ZS9lLHI9dC5hczJEKG4sZSk7cmV0dXJuIEx0LnJ1bktlcm5lbEZ1bmMoKGZ1bmN0aW9uKHQpe3JldHVybiB0LmlmZnQocil9KSx7aW5wdXQ6dH0pLnJlc2hhcGUodC5zaGFwZSl9fSksJGw9QW4oe3JmZnRfOmZ1bmN0aW9uKHQsZSl7QyhcImZsb2F0MzJcIj09PXQuZHR5cGUsKGZ1bmN0aW9uKCl7cmV0dXJuXCJUaGUgZHR5cGUgZm9yIHJmZnQoKSBtdXN0IGJlIHJlYWwgdmFsdWUgYnV0IGdvdCBcIit0LmR0eXBlfSkpO3ZhciBuLHI9dC5zaGFwZVt0LnNoYXBlLmxlbmd0aC0xXSxvPXQuc2l6ZS9yO2lmKG51bGwhPWUmJmU8cil7dmFyIGE9dC5zaGFwZS5tYXAoKGZ1bmN0aW9uKHQpe3JldHVybiAwfSkpLGk9dC5zaGFwZS5tYXAoKGZ1bmN0aW9uKHQpe3JldHVybiB0fSkpO2lbdC5zaGFwZS5sZW5ndGgtMV09ZSxuPXQuc2xpY2UoYSxpKSxyPWV9ZWxzZSBpZihudWxsIT1lJiZlPnIpe3ZhciBzPXQuc2hhcGUubWFwKChmdW5jdGlvbih0KXtyZXR1cm4gdH0pKTtzW3Quc2hhcGUubGVuZ3RoLTFdPWUtcixuPXQuY29uY2F0KEduKHMpLHQuc2hhcGUubGVuZ3RoLTEpLHI9ZX1lbHNlIG49dDt2YXIgdT1uLnplcm9zTGlrZSgpLGM9RG4obix1KS5hczJEKG8sciksbD1YbChjKSxoPU1hdGguZmxvb3Ioci8yKSsxLGY9VG4obCksZD1ObihsKSxwPWYuc3BsaXQoW2gsci1oXSxmLnNoYXBlLmxlbmd0aC0xKSx2PWQuc3BsaXQoW2gsci1oXSxkLnNoYXBlLmxlbmd0aC0xKSxtPW4uc2hhcGUuc2xpY2UoKTtyZXR1cm4gbVtuLnNoYXBlLmxlbmd0aC0xXT1oLERuKHBbMF0sdlswXSkucmVzaGFwZShtKX19KSxRbD1Bbih7aXJmZnRfOmZ1bmN0aW9uKHQpe3ZhciBlPXQuc2hhcGVbdC5zaGFwZS5sZW5ndGgtMV0sbj10LnNpemUvZTtpZihlPD0yKXt2YXIgcj10LmFzMkQobixlKSxvPVlsKHIpO3JldHVybiBUbihvKX12YXIgYT1bbiwyKihlLTEpXSxpPVRuKHQpLmFzMkQobixlKSxzPU5uKHQpLmFzMkQobixlKSx1PWkuc2xpY2UoWzAsMV0sW24sZS0yXSkucmV2ZXJzZSgxKSxjPXMuc2xpY2UoWzAsMV0sW24sZS0yXSkucmV2ZXJzZSgxKS5tdWwoT24oLTEpKSxsPWkuY29uY2F0KHUsMSksaD1zLmNvbmNhdChjLDEpO3JldHVybiByPURuKGwsaCkuYXMyRChhWzBdLGFbMV0pLG89WWwociksVG4obyl9fSksSmw9T2JqZWN0LmZyZWV6ZSh7ZmZ0OlhsLGlmZnQ6WWwscmZmdDokbCxpcmZmdDpRbH0pO3ZhciBabD1Bbih7c3BhcnNlVG9EZW5zZV86ZnVuY3Rpb24odCxlLG4scil7dm9pZCAwPT09ciYmKHI9MCk7dmFyIG89bW4odCxcInNwYXJzZUluZGljZXNcIixcInNwYXJzZVRvRGVuc2VcIixcImludDMyXCIpLGE9bW4oZSxcInNwYXJzZVZhbHVlc1wiLFwic3BhcnNlVG9EZW5zZVwiKSxpPW1uKHIsXCJkZWZhdWx0VmFsdWVcIixcInNwYXJzZVRvRGVuc2VcIixhLmR0eXBlKTtyZXR1cm4gZnVuY3Rpb24odCxlLG4scil7aWYoXCJpbnQzMlwiIT09dC5kdHlwZSl0aHJvdyBuZXcgRXJyb3IoXCJ0Zi5zcGFyc2VUb0RlbnNlKCkgZXhwZWN0cyB0aGUgaW5kaWNlcyB0byBiZSBpbnQzMiB0eXBlLCBidXQgdGhlIGR0eXBlIHdhcyBcIit0LmR0eXBlK1wiLlwiKTtpZih0LnJhbms+Mil0aHJvdyBuZXcgRXJyb3IoXCJzcGFyc2VJbmRpY2VzIHNob3VsZCBiZSBhIHNjYWxhciwgdmVjdG9yLCBvciBtYXRyaXgsIGJ1dCBnb3Qgc2hhcGUgXCIrdC5zaGFwZStcIi5cIik7dmFyIG89dC5yYW5rPjA/dC5zaGFwZVswXToxLGE9dC5yYW5rPjE/dC5zaGFwZVsxXToxO2lmKG4ubGVuZ3RoIT09YSl0aHJvdyBuZXcgRXJyb3IoXCJvdXRwdXRTaGFwZSBoYXMgaW5jb3JyZWN0IG51bWJlciBvZiBlbGVtZW50czosIFwiK24ubGVuZ3RoK1wiLCBzaG91bGQgYmU6IFwiK2ErXCIuXCIpO3ZhciBpPWUuc2l6ZTtpZigwIT09ZS5yYW5rJiYoMSE9PWUucmFua3x8aSE9PW8pKXRocm93IG5ldyBFcnJvcihcInNwYXJzZVZhbHVlcyBoYXMgaW5jb3JyZWN0IHNoYXBlIFwiK2Uuc2hhcGUrXCIsIHNob3VsZCBiZSBbXSBvciBbXCIrbytcIl1cIik7aWYoZS5kdHlwZSE9PXIuZHR5cGUpdGhyb3cgbmV3IEVycm9yKFwic3BhcnNlVmFsdWVzLmR0eXBlIG11c3QgbWF0Y2ggZGVmYXVsdFZhbHVlcy5kdHlwZVwiKX0obyxhLG4saSksTHQucnVuS2VybmVsRnVuYygoZnVuY3Rpb24odCl7cmV0dXJuIHQuc3BhcnNlVG9EZW5zZShvLGEsbixpKX0pLHskc3BhcnNlSW5kaWNlczpvLCRzcGFyc2VWYWx1ZXM6YSwkZGVmYXVsdFZhbHVlOml9KX19KTt2YXIgdGg9QW4oe2dhdGhlck5EXzpmdW5jdGlvbih0LGUpe3ZhciBuPW1uKGUsXCJpbmRpY2VzXCIsXCJnYXRoZXJORFwiLFwiaW50MzJcIikscj1tbih0LFwieFwiLFwiZ2F0aGVyTkRcIik7cmV0dXJuIEx0LnJ1bktlcm5lbEZ1bmMoKGZ1bmN0aW9uKHQpe3JldHVybiB0LmdhdGhlck5EKHIsbil9KSx7eDpyLGluZGljZXM6bn0sbnVsbCxcIkdhdGhlck5kXCIpfX0pO3ZhciBlaD1Bbih7ZGlhZ186ZnVuY3Rpb24odCl7dmFyIGU9bW4odCxcInhcIixcImRpYWdcIikuZmxhdHRlbigpLG49dC5zaGFwZS5jb25jYXQodC5zaGFwZSk7cmV0dXJuIEx0LnJ1bktlcm5lbEZ1bmMoKGZ1bmN0aW9uKHQpe3JldHVybiB0LmRpYWcoZSl9KSx7JHg6ZX0pLnJlc2hhcGUobil9fSk7dmFyIG5oPUFuKHtkcm9wb3V0XzpmdW5jdGlvbih0LGUsbixyKXt2YXIgbz1tbih0LFwieFwiLFwiZHJvcG91dFwiKTtpZihDKFwiZmxvYXQzMlwiPT09by5kdHlwZSwoZnVuY3Rpb24oKXtyZXR1cm5cInggaGFzIHRvIGJlIGEgZmxvYXRpbmcgcG9pbnQgdGVuc29yIHNpbmNlIGl0J3MgZ29pbmcgdG8gYmUgc2NhbGVkLCBidXQgZ290IGEgXCIrby5kdHlwZStcIiB0ZW5zb3IgaW5zdGVhZC5cIn0pKSxDKGU+PTAmJmU8MSwoZnVuY3Rpb24oKXtyZXR1cm5cInJhdGUgbXVzdCBiZSBhIGZsb2F0IGluIHRoZSByYW5nZSBbMCwgMSksIGJ1dCBnb3QgXCIrZStcIi5cIn0pKSwwPT09ZSlyZXR1cm4gdCBpbnN0YW5jZW9mIHd0P28uY2xvbmUoKTpvO3ZhciBhPWZ1bmN0aW9uKHQsZSl7aWYobnVsbD09ZSlyZXR1cm4gdC5zaGFwZS5zbGljZSgpO2lmKFModC5zaGFwZSxlKSlyZXR1cm4gZTtpZih0LnNoYXBlLmxlbmd0aD09PWUubGVuZ3RoKXtmb3IodmFyIG49W10scj0wO3I8dC5zaGFwZS5sZW5ndGg7cisrKW51bGw9PWVbcl0mJm51bGwhPXQuc2hhcGVbcl0/bi5wdXNoKHQuc2hhcGVbcl0pOm4ucHVzaChlW3JdKTtyZXR1cm4gbn1yZXR1cm4gZX0obyxuKSxpPTEtZSxzPV9yKGEsMCwxLFwiZmxvYXQzMlwiLHIpLmFkZChpKS5mbG9vcigpLmRpdihpKTtyZXR1cm4gby5tdWwocyl9fSk7ZnVuY3Rpb24gcmgodCxlLG4pe2Zvcih2YXIgcj0xLXQlMixvPW5ldyBGbG9hdDMyQXJyYXkodCksYT0wO2E8dDsrK2Epe3ZhciBpPTIqTWF0aC5QSSphLyh0K3ItMSk7b1thXT1lLW4qTWF0aC5jb3MoaSl9cmV0dXJuIE1uKG8sXCJmbG9hdDMyXCIpfXZhciBvaD1Bbih7aGFubldpbmRvd186ZnVuY3Rpb24odCl7cmV0dXJuIHJoKHQsLjUsLjUpfX0pLGFoPUFuKHtoYW1taW5nV2luZG93XzpmdW5jdGlvbih0KXtyZXR1cm4gcmgodCwuNTQsLjQ2KX19KSxpaD1Bbih7ZnJhbWVfOmZ1bmN0aW9uKHQsZSxuLHIsbyl7dm9pZCAwPT09ciYmKHI9ITEpLHZvaWQgMD09PW8mJihvPTApO2Zvcih2YXIgYT0wLGk9W107YStlPD10LnNpemU7KWkucHVzaChtbCh0LGEsZSkpLGErPW47aWYocilmb3IoO2E8dC5zaXplOyl7dmFyIHM9YStlLXQuc2l6ZSx1PVluKFttbCh0LGEsZS1zKSxIbihbc10sbyldKTtpLnB1c2godSksYSs9bn1yZXR1cm4gMD09PWkubGVuZ3RoP0JuKFtdLFswLGVdKTpZbihpKS5hczJEKGkubGVuZ3RoLGUpfX0pLHNoPUFuKHtzdGZ0XzpmdW5jdGlvbih0LGUsbixyLG8pe3ZhciBhO3ZvaWQgMD09PW8mJihvPW9oKSxudWxsPT1yJiYoYT1lLHI9TWF0aC5mbG9vcihNYXRoLnBvdygyLE1hdGguY2VpbChNYXRoLmxvZyhhKS9NYXRoLmxvZygyKSkpKSk7Zm9yKHZhciBpPWloKHQsZSxuKSxzPWdjKGksbyhlKSksdT1bXSxjPTA7YzxpLnNoYXBlWzBdO2MrKyl1LnB1c2goJGwocy5zbGljZShbYywwXSxbMSxlXSkscikpO3JldHVybiBZbih1KX19KSx1aD1PYmplY3QuZnJlZXplKHtoYW5uV2luZG93Om9oLGhhbW1pbmdXaW5kb3c6YWgsZnJhbWU6aWgsc3RmdDpzaH0pO3ZhciBjaCxsaD1mdW5jdGlvbih0LGUsbyl7cmV0dXJuIHZvaWQgMD09PW8mJihvPTEpLG4odGhpcyx2b2lkIDAsdm9pZCAwLChmdW5jdGlvbigpe3ZhciBuLGEsaSxzLHUsYyxsLGgsZixkLHAsdixtLGc7cmV0dXJuIHIodGhpcywoZnVuY3Rpb24ocil7c3dpdGNoKHIubGFiZWwpe2Nhc2UgMDpyZXR1cm4gbj1tbih0LFwicHJlZGljdGlvbnNcIixcImluVG9wS1wiKSxhPW1uKGUsXCJ0YXJnZXRzXCIsXCJpblRvcEtcIiksQyhuLnJhbms+MSwoZnVuY3Rpb24oKXtyZXR1cm5cImluVG9wSygpIGV4cGVjdHMgdGhlIHByZWRpY3Rpb25zIHRvIGJlIG9mIHJhbmsgMiBvciBoaWdoZXIsIGJ1dCBnb3QgXCIrbi5yYW5rfSkpLEMobi5yYW5rLTE9PT1hLnJhbmssKGZ1bmN0aW9uKCl7cmV0dXJuXCJwcmVkaWN0aW9ucyByYW5rIHNob3VsZCBiZSAxIGxhcmdlciB0aGFuIHRhcmdldHMgcmFuaywgYnV0IGdvdCBwcmVkaWN0aW9ucyByYW5rIFwiK24ucmFuaytcIiBhbmQgdGFyZ2V0cyByYW5rIFwiK2EucmFua30pKSxFKG4uc2hhcGUuc2xpY2UoMCxuLnNoYXBlLmxlbmd0aC0xKSxhLnNoYXBlLFwicHJlZGljdGlvbnMncyBzaGFwZSBzaG91bGQgYmUgYWxpZ24gd2l0aCB0aGUgdGFyZ2V0cycgc2hhcGUsIGV4Y2VwdCB0aGUgbGFzdCBkaW1lbnNpb24uXCIpLGk9bi5zaGFwZVtuLnNoYXBlLmxlbmd0aC0xXSxDKG8+MCYmbzw9aSwoZnVuY3Rpb24oKXtyZXR1cm5cIidrJyBwYXNzZWQgdG8gaW5Ub3BLKCkgbXVzdCBiZSA+IDAgJiYgPD0gdGhlIHByZWRpY3Rpb25zIGxhc3QgZGltZW5zaW9uIChcIitpK1wiKSwgYnV0IGdvdCBcIitvfSkpLFs0LG4uZGF0YSgpXTtjYXNlIDE6cmV0dXJuIHM9ci5zZW50KCksWzQsYS5kYXRhKCldO2Nhc2UgMjpmb3IodT1yLnNlbnQoKSxjPVtzLmxlbmd0aC9pLGldLGg9Y1sxXSxmPUIoXCJib29sXCIsbD1jWzBdKSxkPTA7ZDxsO2QrKyl7Zm9yKHA9ZCpoLHY9cy5zdWJhcnJheShwLHAraCksbT1bXSxnPTA7Zzx2Lmxlbmd0aDtnKyspbS5wdXNoKHt2YWx1ZTp2W2ddLGluZGV4Omd9KTtmb3IobS5zb3J0KChmdW5jdGlvbih0LGUpe3JldHVybiBlLnZhbHVlLXQudmFsdWV9KSksZltkXT0wLGc9MDtnPG87ZysrKWlmKG1bZ10uaW5kZXg9PT11W2RdKXtmW2RdPTE7YnJlYWt9fXJldHVybiB0IT09biYmbi5kaXNwb3NlKCksZSE9PWEmJmEuZGlzcG9zZSgpLFsyLEZuKGYsYS5zaGFwZSxcImJvb2xcIildfX0pKX0pKX07IWZ1bmN0aW9uKHQpe3RbdC5OT05FPTBdPVwiTk9ORVwiLHRbdC5NRUFOPTFdPVwiTUVBTlwiLHRbdC5TVU09Ml09XCJTVU1cIix0W3QuU1VNX0JZX05PTlpFUk9fV0VJR0hUUz0zXT1cIlNVTV9CWV9OT05aRVJPX1dFSUdIVFNcIn0oY2h8fChjaD17fSkpO3ZhciBoaD1Bbih7YWJzb2x1dGVEaWZmZXJlbmNlXzpmdW5jdGlvbih0LGUsbixyKXt2b2lkIDA9PT1yJiYocj1jaC5TVU1fQllfTk9OWkVST19XRUlHSFRTKTt2YXIgbz1tbih0LFwibGFiZWxzXCIsXCJhYnNvbHV0ZURpZmZlcmVuY2VcIiksYT1tbihlLFwicHJlZGljdGlvbnNcIixcImFic29sdXRlRGlmZmVyZW5jZVwiKSxpPW51bGw7bnVsbCE9biYmKGk9bW4obixcIndlaWdodHNcIixcImFic29sdXRlRGlmZmVyZW5jZVwiKSksRShvLnNoYXBlLGEuc2hhcGUsXCJFcnJvciBpbiBhYnNvbHV0ZURpZmZlcmVuY2U6IFwiKTt2YXIgcz1vLnN1YihhKS5hYnMoKTtyZXR1cm4gZmgocyxpLHIpfX0pLGZoPUFuKHtjb21wdXRlV2VpZ2h0ZWRMb3NzXzpmdW5jdGlvbih0LGUsbil7dm9pZCAwPT09biYmKG49Y2guU1VNX0JZX05PTlpFUk9fV0VJR0hUUyk7dmFyIHI9bW4odCxcImxvc3Nlc1wiLFwiY29tcHV0ZVdlaWdodGVkTG9zc1wiKSxvPW51bGw7bnVsbCE9ZSYmKG89bW4oZSxcIndlaWdodHNcIixcImNvbXB1dGVXZWlnaHRlZExvc3NcIikpO3ZhciBhPW51bGw9PW8/cjpyLm11bChvKTtpZihuPT09Y2guTk9ORSlyZXR1cm4gYTtpZihuPT09Y2guU1VNKXJldHVybiBhLnN1bSgpO2lmKG49PT1jaC5NRUFOKXtpZihudWxsPT1vKXJldHVybiBhLm1lYW4oKTt2YXIgaT1yLnNpemUvby5zaXplLHM9YS5zdW0oKS5kaXYoby5zdW0oKSk7cmV0dXJuIGk+MT9zLmRpdihPbihpKSk6c31pZihuPT09Y2guU1VNX0JZX05PTlpFUk9fV0VJR0hUUyl7aWYobnVsbD09bylyZXR1cm4gYS5zdW0oKS5kaXYoT24oci5zaXplKSk7dmFyIHU9by5tdWwoem4oci5zaGFwZSkpLm5vdEVxdWFsKE9uKDApKS5zdW0oKS50b0Zsb2F0KCk7cmV0dXJuIGEuc3VtKCkuZGl2KHUpfXRocm93IEVycm9yKFwiVW5rbm93biByZWR1Y3Rpb246IFwiK24pfX0pLGRoPUFuKHtjb3NpbmVEaXN0YW5jZV86ZnVuY3Rpb24odCxlLG4scixvKXt2b2lkIDA9PT1vJiYobz1jaC5TVU1fQllfTk9OWkVST19XRUlHSFRTKTt2YXIgYT1tbih0LFwibGFiZWxzXCIsXCJjb3NpbmVEaXN0YW5jZVwiKSxpPW1uKGUsXCJwcmVkaWN0aW9uc1wiLFwiY29zaW5lRGlzdGFuY2VcIikscz1udWxsO251bGwhPXImJihzPW1uKHIsXCJ3ZWlnaHRzXCIsXCJjb3NpbmVEaXN0YW5jZVwiKSksRShhLnNoYXBlLGkuc2hhcGUsXCJFcnJvciBpbiBjb3NpbmVEaXN0YW5jZTogXCIpO3ZhciB1PU9uKDEpLnN1YihhLm11bChpKS5zdW0obiwhMCkpO3JldHVybiBmaCh1LHMsbyl9fSkscGg9QW4oe2hpbmdlTG9zc186ZnVuY3Rpb24odCxlLG4scil7dm9pZCAwPT09ciYmKHI9Y2guU1VNX0JZX05PTlpFUk9fV0VJR0hUUyk7dmFyIG89bW4odCxcImxhYmVsc1wiLFwiaGluZ2VMb3NzXCIpLGE9bW4oZSxcInByZWRpY3Rpb25zXCIsXCJoaW5nZUxvc3NcIiksaT1udWxsO251bGwhPW4mJihpPW1uKG4sXCJ3ZWlnaHRzXCIsXCJoaW5nZUxvc3NcIikpLEUoby5zaGFwZSxhLnNoYXBlLFwiRXJyb3IgaW4gaGluZ2VMb3NzOiBcIik7dmFyIHM9T24oMSk7bz1PbigyKS5tdWwobykuc3ViKHMpO3ZhciB1PXMuc3ViKG8ubXVsKGEpKS5yZWx1KCk7cmV0dXJuIGZoKHUsaSxyKX19KSx2aD1Bbih7aHViZXJMb3NzXzpmdW5jdGlvbih0LGUsbixyLG8pe3ZvaWQgMD09PXImJihyPTEpLHZvaWQgMD09PW8mJihvPWNoLlNVTV9CWV9OT05aRVJPX1dFSUdIVFMpO3ZhciBhPW1uKHQsXCJsYWJlbHNcIixcImh1YmVyTG9zc1wiKSxpPW1uKGUsXCJwcmVkaWN0aW9uc1wiLFwiaHViZXJMb3NzXCIpLHM9bnVsbDtudWxsIT1uJiYocz1tbihuLFwid2VpZ2h0c1wiLFwiaHViZXJMb3NzXCIpKSxFKGEuc2hhcGUsaS5zaGFwZSxcIkVycm9yIGluIGh1YmVyTG9zczogXCIpO3ZhciB1PU9uKHIpLGM9aS5zdWIoYSkuYWJzKCksbD1kYyhjLHUpLGg9Yy5zdWIobCksZj1PbiguNSkubXVsKGwuc3F1YXJlKCkpLmFkZCh1Lm11bChoKSk7cmV0dXJuIGZoKGYscyxvKX19KSxtaD1Bbih7bG9nTG9zc186ZnVuY3Rpb24odCxlLG4scixvKXt2b2lkIDA9PT1yJiYocj0xZS03KSx2b2lkIDA9PT1vJiYobz1jaC5TVU1fQllfTk9OWkVST19XRUlHSFRTKTt2YXIgYT1tbih0LFwibGFiZWxzXCIsXCJsb2dMb3NzXCIpLGk9bW4oZSxcInByZWRpY3Rpb25zXCIsXCJsb2dMb3NzXCIpLHM9bnVsbDtudWxsIT1uJiYocz1tbihuLFwid2VpZ2h0c1wiLFwibG9nTG9zc1wiKSksRShhLnNoYXBlLGkuc2hhcGUsXCJFcnJvciBpbiBsb2dMb3NzOiBcIik7dmFyIHU9T24oMSksYz1PbihyKSxsPWEubXVsKGkuYWRkKGMpLmxvZygpKS5uZWcoKS5zdWIodS5zdWIoYSkubXVsKHUuc3ViKGkpLmFkZChjKS5sb2coKSkpO3JldHVybiBmaChsLHMsbyl9fSksZ2g9QW4oe21lYW5TcXVhcmVkRXJyb3JfOmZ1bmN0aW9uKHQsZSxuLHIpe3ZvaWQgMD09PXImJihyPWNoLlNVTV9CWV9OT05aRVJPX1dFSUdIVFMpO3ZhciBvPW1uKHQsXCJsYWJlbHNcIixcIm1lYW5TcXVhcmVkRXJyb3JcIiksYT1tbihlLFwicHJlZGljdGlvbnNcIixcIm1lYW5TcXVhcmVkRXJyb3JcIiksaT1udWxsO251bGwhPW4mJihpPW1uKG4sXCJ3ZWlnaHRzXCIsXCJtZWFuU3F1YXJlZEVycm9yXCIpKSxFKG8uc2hhcGUsYS5zaGFwZSxcIkVycm9yIGluIG1lYW5TcXVhcmVkRXJyb3I6IFwiKTt2YXIgcz1vLnNxdWFyZWREaWZmZXJlbmNlKGEpO3JldHVybiBmaChzLGkscil9fSkseWg9QW4oe3NpZ21vaWRDcm9zc0VudHJvcHlfOmZ1bmN0aW9uKHQsZSxuLHIsbyl7dm9pZCAwPT09ciYmKHI9MCksdm9pZCAwPT09byYmKG89Y2guU1VNX0JZX05PTlpFUk9fV0VJR0hUUyk7dmFyIGE9bW4odCxcIm11bHRpQ2xhc3NMYWJlbHNcIixcInNpZ21vaWRDcm9zc0VudHJvcHlcIiksaT1tbihlLFwibG9naXRzXCIsXCJzaWdtb2lkQ3Jvc3NFbnRyb3B5XCIpLHM9bnVsbDtpZihudWxsIT1uJiYocz1tbihuLFwid2VpZ2h0c1wiLFwic2lnbW9pZENyb3NzRW50cm9weVwiKSksRShhLnNoYXBlLGkuc2hhcGUsXCJFcnJvciBpbiBzaWdtb2lkQ3Jvc3NFbnRyb3B5OiBcIikscj4wKXt2YXIgdT1PbihyKSxjPU9uKDEpLGw9T24oLjUpO2E9YS5tdWwoYy5zdWIodSkpLmFkZChsLm11bCh1KSl9dmFyIGg9ZnVuY3Rpb24odCxlKXt2YXIgbj1tbih0LFwibGFiZWxzXCIsXCJzaWdtb2lkQ3Jvc3NFbnRyb3B5V2l0aExvZ2l0c1wiKSxyPW1uKGUsXCJsb2dpdHNcIixcInNpZ21vaWRDcm9zc0VudHJvcHlXaXRoTG9naXRzXCIpO0Uobi5zaGFwZSxyLnNoYXBlLFwiRXJyb3IgaW4gc2lnbW9pZENyb3NzRW50cm9weVdpdGhMb2dpdHM6IFwiKTt2YXIgbz1yLnJlbHUoKSxhPXIubXVsKG4pLGk9ci5hYnMoKS5uZWcoKS5leHAoKS5sb2cxcCgpO3JldHVybiBvLnN1YihhKS5hZGQoaSl9KGEsaSk7cmV0dXJuIGZoKGgscyxvKX19KSx4aD1Bbih7c29mdG1heENyb3NzRW50cm9weV86ZnVuY3Rpb24odCxlLG4scixvKXt2b2lkIDA9PT1yJiYocj0wKSx2b2lkIDA9PT1vJiYobz1jaC5TVU1fQllfTk9OWkVST19XRUlHSFRTKTt2YXIgYT1tbih0LFwib25laG90TGFiZWxzXCIsXCJzb2Z0bWF4Q3Jvc3NFbnRyb3B5XCIpLGk9bW4oZSxcImxvZ2l0c1wiLFwic29mdG1heENyb3NzRW50cm9weVwiKSxzPW51bGw7aWYobnVsbCE9biYmKHM9bW4obixcIndlaWdodHNcIixcInNvZnRtYXhDcm9zc0VudHJvcHlcIikpLEUoYS5zaGFwZSxpLnNoYXBlLFwiRXJyb3IgaW4gc29mdG1heENyb3NzRW50cm9weTogXCIpLHI+MCl7dmFyIHU9T24ociksYz1PbigxKSxsPU9uKGEuc2hhcGVbMV0pO2E9YS5tdWwoYy5zdWIodSkpLmFkZCh1LmRpdihsKSl9dmFyIGg9ZnVuY3Rpb24odCxlLG4pe2lmKHZvaWQgMD09PW4mJihuPS0xKSwtMT09PW4mJihuPWUucmFuay0xKSxuIT09ZS5yYW5rLTEpdGhyb3cgRXJyb3IoXCJTb2Z0bWF4IGNyb3NzIGVudHJvcHkgYWxvbmcgYSBub24tbGFzdCBkaW1lbnNpb24gaXMgbm90IHlldCBzdXBwb3J0ZWQuIExhYmVscyAvIGxvZ2l0cyB3YXMgcmFuayBcIitlLnJhbmsrXCIgYW5kIGRpbSB3YXMgXCIrbik7cmV0dXJuIHZvKChmdW5jdGlvbih0LGUscil7dmFyIG89ZS5sb2dTdW1FeHAoW25dLCEwKSxhPWUudG9GbG9hdCgpLnN1YihvKTtyKFt0LGFdKTtyZXR1cm57dmFsdWU6YS5tdWwodCkubmVnKCkuc3VtKFtuXSksZ3JhZEZ1bmM6ZnVuY3Rpb24odCxlKXt2YXIgcj1lWzBdLG89ZVsxXSxhPXduKHQuc2hhcGUsW25dKTtyZXR1cm5bdC5yZXNoYXBlKGEpLm11bChyLnRvRmxvYXQoKS5zdWIoby5leHAoKSkpLHQucmVzaGFwZShhKS5tdWwoby5leHAoKS5zdWIoci50b0Zsb2F0KCkpKV19fX0pKSh0LGUpfShhLGkpO3JldHVybiBmaChoLHMsbyl9fSksYmg9T2JqZWN0LmZyZWV6ZSh7Z2V0IFJlZHVjdGlvbigpe3JldHVybiBjaH0sYWJzb2x1dGVEaWZmZXJlbmNlOmhoLGNvbXB1dGVXZWlnaHRlZExvc3M6ZmgsY29zaW5lRGlzdGFuY2U6ZGgsaGluZ2VMb3NzOnBoLGh1YmVyTG9zczp2aCxsb2dMb3NzOm1oLG1lYW5TcXVhcmVkRXJyb3I6Z2gsc2lnbW9pZENyb3NzRW50cm9weTp5aCxzb2Z0bWF4Q3Jvc3NFbnRyb3B5OnhofSk7ZnVuY3Rpb24gd2godCxlKXtyZXR1cm4gdm9pZCAwPT09ZSYmKGU9ITEpLEx0LnRpZHkoKGZ1bmN0aW9uKCl7aWYoMiE9PXQuc2hhcGUubGVuZ3RoKXRocm93IG5ldyBFcnJvcihcInFyMmQoKSByZXF1aXJlcyBhIDJEIFRlbnNvciwgYnV0IGdvdCBhIFwiK3Quc2hhcGUubGVuZ3RoK1wiRCBUZW5zb3IuXCIpO2Zvcih2YXIgbj10LnNoYXBlWzBdLHI9dC5zaGFwZVsxXSxvPUNyKG4pLGE9dC5jbG9uZSgpLGk9Qm4oW1sxXV0sWzEsMV0pLHM9aS5jbG9uZSgpLHU9bj49cj9yOm4sYz1mdW5jdGlvbih0KXt2YXIgZSx1PWEsYz1zLGw9bztlPUx0LnRpZHkoKGZ1bmN0aW9uKCl7dmFyIGU9YS5zbGljZShbdCx0XSxbbi10LDFdKSx1PWUubm9ybSgpLGM9YS5zbGljZShbdCx0XSxbMSwxXSksbD1CbihbWy0xXV0pLndoZXJlKGMuZ3JlYXRlcigwKSxCbihbWzFdXSkpLGg9Yy5zdWIobC5tdWwodSkpLGY9ZS5kaXYoaCk7cz0xPT09Zi5zaGFwZVswXT9pLmNsb25lKCk6aS5jb25jYXQoZi5zbGljZShbMSwwXSxbZi5zaGFwZVswXS0xLGYuc2hhcGVbMV1dKSwwKTt2YXIgZD1sLm1hdE11bChoKS5kaXYodSkubmVnKCkscD1hLnNsaWNlKFt0LDBdLFtuLXQscl0pLHY9ZC5tdWwocyk7aWYoMD09PXQpYT1wLnN1Yih2Lm1hdE11bChzLnRyYW5zcG9zZSgpLm1hdE11bChwKSkpO2Vsc2V7dmFyIG09cC5zdWIodi5tYXRNdWwocy50cmFuc3Bvc2UoKS5tYXRNdWwocCkpKTthPWEuc2xpY2UoWzAsMF0sW3Qscl0pLmNvbmNhdChtLDApfXZhciBnPW8uc2xpY2UoWzAsdF0sW24sby5zaGFwZVsxXS10XSk7aWYoMD09PXQpbz1nLnN1YihnLm1hdE11bChzKS5tYXRNdWwodi50cmFuc3Bvc2UoKSkpO2Vsc2V7dmFyIHk9Zy5zdWIoZy5tYXRNdWwocykubWF0TXVsKHYudHJhbnNwb3NlKCkpKTtvPW8uc2xpY2UoWzAsMF0sW24sdF0pLmNvbmNhdCh5LDEpfXJldHVybltzLGEsb119KSkscz1lWzBdLGE9ZVsxXSxvPWVbMl0sdG4oW3UsYyxsXSl9LGw9MDtsPHU7KytsKWMobCk7cmV0dXJuIWUmJm4+ciYmKG89by5zbGljZShbMCwwXSxbbixyXSksYT1hLnNsaWNlKFswLDBdLFtyLHJdKSksW28sYV19KSl9dmFyIENoPUFuKHtiYW5kUGFydF86ZnVuY3Rpb24odCxlLG4pe2lmKGUlMSE9MCl0aHJvdyBuZXcgRXJyb3IoXCJiYW5kUGFydCgpOiBudW1Mb3dlciBtdXN0IGJlIGFuIGludGVnZXIsIGdvdCBcIitlK1wiLlwiKTtpZihuJTEhPTApdGhyb3cgbmV3IEVycm9yKFwiYmFuZFBhcnQoKTogbnVtVXBwZXIgbXVzdCBiZSBhbiBpbnRlZ2VyLCBnb3QgXCIrbitcIi5cIik7dmFyIHI9bW4odCxcImFcIixcImJhbmRQYXJ0XCIpO2lmKHIucmFuazwyKXRocm93IG5ldyBFcnJvcihcImJhbmRQYXJ0KCk6IFJhbmsgbXVzdCBiZSBhdCBsZWFzdCAyLCBnb3QgXCIrci5yYW5rK1wiLlwiKTt2YXIgbz1yLnNoYXBlLGE9ci5zaGFwZS5zbGljZSgtMiksaT1hWzBdLHM9YVsxXTtpZighKGU8PWkpKXRocm93IG5ldyBFcnJvcihcImJhbmRQYXJ0KCk6IG51bUxvd2VyIChcIitlK1wiKSBtdXN0IG5vdCBiZSBncmVhdGVyIHRoYW4gdGhlIG51bWJlciBvZiByb3dzIChcIitpK1wiKS5cIik7aWYoIShuPD1zKSl0aHJvdyBuZXcgRXJyb3IoXCJiYW5kUGFydCgpOiBudW1VcHBlciAoXCIrbitcIikgbXVzdCBub3QgYmUgZ3JlYXRlciB0aGFuIHRoZSBudW1iZXIgb2YgY29sdW1ucyAoXCIrcytcIikuXCIpO2U8MCYmKGU9aSksbjwwJiYobj1zKTt2YXIgdT1LbigwLGksMSxcImludDMyXCIpLnJlc2hhcGUoWy0xLDFdKSxjPUtuKDAscywxLFwiaW50MzJcIiksbD1DYyh1LGMpLGg9UXUobC5sZXNzRXF1YWwoT24oK2UsXCJpbnQzMlwiKSksbC5ncmVhdGVyRXF1YWwoT24oLW4sXCJpbnQzMlwiKSkpLGY9R24oW2ksc10sci5kdHlwZSk7cmV0dXJuIFByKFVyKHIucmVzaGFwZShbLTEsaSxzXSkpLm1hcCgoZnVuY3Rpb24odCl7cmV0dXJuIGVjKGgsdCxmKX0pKSkucmVzaGFwZShvKX19KSxFaD1Bbih7Z3JhbVNjaG1pZHRfOmZ1bmN0aW9uKHQpe3ZhciBlO2lmKEFycmF5LmlzQXJyYXkodCkpe2U9ITEsQyhudWxsIT10JiZ0Lmxlbmd0aD4wLChmdW5jdGlvbigpe3JldHVyblwiR3JhbS1TY2htaWR0IHByb2Nlc3M6IGlucHV0IG11c3Qgbm90IGJlIG51bGwsIHVuZGVmaW5lZCwgb3IgZW1wdHlcIn0pKTtmb3IodmFyIG49dFswXS5zaGFwZVswXSxyPWZ1bmN0aW9uKGUpe0ModFtlXS5zaGFwZVswXT09PW4sKGZ1bmN0aW9uKCl7cmV0dXJuXCJHcmFtLVNjaG1pZHQ6IE5vbi11bmlxdWUgbGVuZ3RocyBmb3VuZCBpbiB0aGUgaW5wdXQgdmVjdG9yczogKFwiK3RbZV0uc2hhcGVbMF0rXCIgdnMuIFwiK24rXCIpXCJ9KSl9LG89MTtvPHQubGVuZ3RoOysrbylyKG8pfWVsc2UgZT0hMCx0PXRyKHQsdC5zaGFwZVswXSwwKS5tYXAoKGZ1bmN0aW9uKHQpe3JldHVybiBCcih0LFswXSl9KSk7Qyh0Lmxlbmd0aDw9dFswXS5zaGFwZVswXSwoZnVuY3Rpb24oKXtyZXR1cm5cIkdyYW0tU2NobWlkdDogTnVtYmVyIG9mIHZlY3RvcnMgKFwiK3QubGVuZ3RoK1wiKSBleGNlZWRzIG51bWJlciBvZiBkaW1lbnNpb25zIChcIit0WzBdLnNoYXBlWzBdK1wiKS5cIn0pKTt2YXIgYT1bXSxpPXQscz1mdW5jdGlvbih0KXthLnB1c2goTHQudGlkeSgoZnVuY3Rpb24oKXt2YXIgZT1pW3RdO2lmKHQ+MClmb3IodmFyIG49MDtuPHQ7KytuKXt2YXIgcj1ObChhW25dLm11bFN0cmljdChlKSkubXVsKGFbbl0pO2U9ZS5zdWIocil9cmV0dXJuIGUuZGl2KFZsKGUsXCJldWNsaWRlYW5cIikpfSkpKX07Zm9yKG89MDtvPHQubGVuZ3RoOysrbylzKG8pO3JldHVybiBlP1ByKGEsMCk6YX19KSxSaD1Bbih7cXJfOmZ1bmN0aW9uKHQsZSl7aWYodm9pZCAwPT09ZSYmKGU9ITEpLHQucmFuazwyKXRocm93IG5ldyBFcnJvcihcInFyKCkgcmVxdWlyZXMgaW5wdXQgdGVuc29yIHRvIGhhdmUgYSByYW5rID49IDIsIGJ1dCBnb3QgcmFuayBcIit0LnJhbmspO2lmKDI9PT10LnJhbmspcmV0dXJuIHdoKHQsZSk7dmFyIG49dC5zaGFwZS5zbGljZSgwLHQuc2hhcGUubGVuZ3RoLTIpLnJlZHVjZSgoZnVuY3Rpb24odCxlKXtyZXR1cm4gdCplfSkpLHI9VXIodC5yZXNoYXBlKFtuLHQuc2hhcGVbdC5zaGFwZS5sZW5ndGgtMl0sdC5zaGFwZVt0LnNoYXBlLmxlbmd0aC0xXV0pLDApLG89W10sYT1bXTtyZXR1cm4gci5mb3JFYWNoKChmdW5jdGlvbih0KXt2YXIgbj13aCh0LGUpLHI9blswXSxpPW5bMV07by5wdXNoKHIpLGEucHVzaChpKX0pKSxbUHIobywwKS5yZXNoYXBlKHQuc2hhcGUpLFByKGEsMCkucmVzaGFwZSh0LnNoYXBlKV19fSksSWg9T2JqZWN0LmZyZWV6ZSh7YmFuZFBhcnQ6Q2gsZ3JhbVNjaG1pZHQ6RWgscXI6Umh9KTtmdW5jdGlvbiBraCh0LGUsbixyLG8sYSl7bnVsbD09ciYmKHI9LjUpLG51bGw9PW8mJihvPU51bWJlci5ORUdBVElWRV9JTkZJTklUWSksbnVsbD09YSYmKGE9MCk7dmFyIGk9dC5zaGFwZVswXTtyZXR1cm4gbj1NYXRoLm1pbihuLGkpLEMoMDw9ciYmcjw9MSwoZnVuY3Rpb24oKXtyZXR1cm5cImlvdVRocmVzaG9sZCBtdXN0IGJlIGluIFswLCAxXSwgYnV0IHdhcyAnXCIrcitcIidcIn0pKSxDKDI9PT10LnJhbmssKGZ1bmN0aW9uKCl7cmV0dXJuXCJib3hlcyBtdXN0IGJlIGEgMkQgdGVuc29yLCBidXQgd2FzIG9mIHJhbmsgJ1wiK3QucmFuaytcIidcIn0pKSxDKDQ9PT10LnNoYXBlWzFdLChmdW5jdGlvbigpe3JldHVyblwiYm94ZXMgbXVzdCBoYXZlIDQgY29sdW1ucywgYnV0IDJuZCBkaW1lbnNpb24gd2FzIFwiK3Quc2hhcGVbMV19KSksQygxPT09ZS5yYW5rLChmdW5jdGlvbigpe3JldHVyblwic2NvcmVzIG11c3QgYmUgYSAxRCB0ZW5zb3JcIn0pKSxDKGUuc2hhcGVbMF09PT1pLChmdW5jdGlvbigpe3JldHVyblwic2NvcmVzIGhhcyBpbmNvbXBhdGlibGUgc2hhcGUgd2l0aCBib3hlcy4gRXhwZWN0ZWQgXCIraStcIiwgYnV0IHdhcyBcIitlLnNoYXBlWzBdfSkpLEMoMDw9YSYmYTw9MSwoZnVuY3Rpb24oKXtyZXR1cm5cInNvZnRObXNTaWdtYSBtdXN0IGJlIGluIFswLCAxXSwgYnV0IHdhcyAnXCIrYStcIidcIn0pKSx7bWF4T3V0cHV0U2l6ZTpuLGlvdVRocmVzaG9sZDpyLHNjb3JlVGhyZXNob2xkOm8sc29mdE5tc1NpZ21hOmF9fXZhciBTaD1Bbih7cmVzaXplQmlsaW5lYXJfOmZ1bmN0aW9uKHQsZSxuKXt2b2lkIDA9PT1uJiYobj0hMSk7dmFyIHI9bW4odCxcImltYWdlc1wiLFwicmVzaXplQmlsaW5lYXJcIik7QygzPT09ci5yYW5rfHw0PT09ci5yYW5rLChmdW5jdGlvbigpe3JldHVyblwiRXJyb3IgaW4gcmVzaXplQmlsaW5lYXI6IHggbXVzdCBiZSByYW5rIDMgb3IgNCwgYnV0IGdvdCByYW5rIFwiK3IucmFuaytcIi5cIn0pKSxDKDI9PT1lLmxlbmd0aCwoZnVuY3Rpb24oKXtyZXR1cm5cIkVycm9yIGluIHJlc2l6ZUJpbGluZWFyOiBuZXcgc2hhcGUgbXVzdCAyRCwgYnV0IGdvdCBzaGFwZSBcIitlK1wiLlwifSkpO3ZhciBvPXIsYT0hMTszPT09ci5yYW5rJiYoYT0hMCxvPXIuYXM0RCgxLHIuc2hhcGVbMF0sci5zaGFwZVsxXSxyLnNoYXBlWzJdKSk7dmFyIGk9ZVswXSxzPWVbMV0sdT1MdC5ydW5LZXJuZWxGdW5jKChmdW5jdGlvbih0LGUpe3JldHVybiBlKFtvXSksdC5yZXNpemVCaWxpbmVhcihvLGkscyxuKX0pLHt4Om99LChmdW5jdGlvbih0LGUpe3JldHVybnt4OmZ1bmN0aW9uKCl7cmV0dXJuIEx0LnJ1bktlcm5lbEZ1bmMoKGZ1bmN0aW9uKHIpe3JldHVybiByLnJlc2l6ZUJpbGluZWFyQmFja3Byb3AodCxlWzBdLG4pfSkse30pfX19KSxcIlJlc2l6ZUJpbGluZWFyXCIse2FsaWduQ29ybmVyczpuLG5ld0hlaWdodDppLG5ld1dpZHRoOnN9KTtyZXR1cm4gYT91LmFzM0QodS5zaGFwZVsxXSx1LnNoYXBlWzJdLHUuc2hhcGVbM10pOnV9fSksQWg9QW4oe3Jlc2l6ZU5lYXJlc3ROZWlnaGJvcl86ZnVuY3Rpb24odCxlLG4pe3ZvaWQgMD09PW4mJihuPSExKTt2YXIgcj1tbih0LFwiaW1hZ2VzXCIsXCJyZXNpemVOZWFyZXN0TmVpZ2hib3JcIik7QygzPT09ci5yYW5rfHw0PT09ci5yYW5rLChmdW5jdGlvbigpe3JldHVyblwiRXJyb3IgaW4gcmVzaXplTmVhcmVzdE5laWdoYm9yOiB4IG11c3QgYmUgcmFuayAzIG9yIDQsIGJ1dCBnb3QgcmFuayBcIityLnJhbmsrXCIuXCJ9KSksQygyPT09ZS5sZW5ndGgsKGZ1bmN0aW9uKCl7cmV0dXJuXCJFcnJvciBpbiByZXNpemVOZWFyZXN0TmVpZ2hib3I6IG5ldyBzaGFwZSBtdXN0IDJELCBidXQgZ290IHNoYXBlIFwiK2UrXCIuXCJ9KSksQyhcImZsb2F0MzJcIj09PXIuZHR5cGV8fFwiaW50MzJcIj09PXIuZHR5cGUsKGZ1bmN0aW9uKCl7cmV0dXJuXCJgaW1hZ2VzYCBtdXN0IGhhdmUgYGludDMyYCBvciBgZmxvYXQzMmAgYXMgZHR5cGVcIn0pKTt2YXIgbz1yLGE9ITE7Mz09PXIucmFuayYmKGE9ITAsbz1yLmFzNEQoMSxyLnNoYXBlWzBdLHIuc2hhcGVbMV0sci5zaGFwZVsyXSkpO3ZhciBpPWVbMF0scz1lWzFdLHU9THQucnVuS2VybmVsRnVuYygoZnVuY3Rpb24odCxlKXtyZXR1cm4gZShbb10pLHQucmVzaXplTmVhcmVzdE5laWdoYm9yKG8saSxzLG4pfSkse2JhdGNoSW1hZ2VzOm99LChmdW5jdGlvbih0LGUpe3JldHVybntiYXRjaEltYWdlczpmdW5jdGlvbigpe3JldHVybiBMdC5ydW5LZXJuZWxGdW5jKChmdW5jdGlvbihyKXtyZXR1cm4gci5yZXNpemVOZWFyZXN0TmVpZ2hib3JCYWNrcHJvcCh0LGVbMF0sbil9KSx7fSl9fX0pKTtyZXR1cm4gYT91LmFzM0QodS5zaGFwZVsxXSx1LnNoYXBlWzJdLHUuc2hhcGVbM10pOnV9fSksRGg9QW4oe25vbk1heFN1cHByZXNzaW9uXzpmdW5jdGlvbih0LGUsbixyLG8pe3ZvaWQgMD09PXImJihyPS41KSx2b2lkIDA9PT1vJiYobz1OdW1iZXIuTkVHQVRJVkVfSU5GSU5JVFkpO3ZhciBhPW1uKHQsXCJib3hlc1wiLFwibm9uTWF4U3VwcHJlc3Npb25cIiksaT1tbihlLFwic2NvcmVzXCIsXCJub25NYXhTdXBwcmVzc2lvblwiKSxzPWtoKGEsaSxuLHIsbyk7bj1zLm1heE91dHB1dFNpemUscj1zLmlvdVRocmVzaG9sZCxvPXMuc2NvcmVUaHJlc2hvbGQ7dmFyIHU9e21heE91dHB1dFNpemU6bixpb3VUaHJlc2hvbGQ6cixzY29yZVRocmVzaG9sZDpvfTtyZXR1cm4gTHQucnVuS2VybmVsRnVuYygoZnVuY3Rpb24odCl7cmV0dXJuIHQubm9uTWF4U3VwcHJlc3Npb24oYSxpLG4scixvKX0pLHtib3hlczphLHNjb3JlczppfSxudWxsLFwiTm9uTWF4U3VwcHJlc3Npb25WM1wiLHUpfX0pLFRoPWZ1bmN0aW9uKHQsZSxvLGEsaSl7cmV0dXJuIHZvaWQgMD09PWEmJihhPS41KSx2b2lkIDA9PT1pJiYoaT1OdW1iZXIuTkVHQVRJVkVfSU5GSU5JVFkpLG4odGhpcyx2b2lkIDAsdm9pZCAwLChmdW5jdGlvbigpe3ZhciBuLHMsdSxjLGwsaCxmO3JldHVybiByKHRoaXMsKGZ1bmN0aW9uKHIpe3N3aXRjaChyLmxhYmVsKXtjYXNlIDA6cmV0dXJuIG49bW4odCxcImJveGVzXCIsXCJub25NYXhTdXBwcmVzc2lvbkFzeW5jXCIpLHM9bW4oZSxcInNjb3Jlc1wiLFwibm9uTWF4U3VwcHJlc3Npb25Bc3luY1wiKSx1PWtoKG4scyxvLGEsaSksbz11Lm1heE91dHB1dFNpemUsYT11LmlvdVRocmVzaG9sZCxpPXUuc2NvcmVUaHJlc2hvbGQsWzQsUHJvbWlzZS5hbGwoW24uZGF0YSgpLHMuZGF0YSgpXSldO2Nhc2UgMTpyZXR1cm4gYz1yLnNlbnQoKSxsPWNbMF0saD1jWzFdLGY9am8obCxoLG8sYSxpKSxuIT09dCYmbi5kaXNwb3NlKCkscyE9PWUmJnMuZGlzcG9zZSgpLFsyLGZdfX0pKX0pKX0sTmg9QW4oe25vbk1heFN1cHByZXNzaW9uV2l0aFNjb3JlXzpmdW5jdGlvbih0LGUsbixyLG8sYSl7dm9pZCAwPT09ciYmKHI9LjUpLHZvaWQgMD09PW8mJihvPU51bWJlci5ORUdBVElWRV9JTkZJTklUWSksdm9pZCAwPT09YSYmKGE9MCk7dmFyIGk9bW4odCxcImJveGVzXCIsXCJub25NYXhTdXBwcmVzc2lvblwiKSxzPW1uKGUsXCJzY29yZXNcIixcIm5vbk1heFN1cHByZXNzaW9uXCIpLHU9a2goaSxzLG4scixvLGEpLGM9e21heE91dHB1dFNpemU6bj11Lm1heE91dHB1dFNpemUsaW91VGhyZXNob2xkOnI9dS5pb3VUaHJlc2hvbGQsc2NvcmVUaHJlc2hvbGQ6bz11LnNjb3JlVGhyZXNob2xkLHNvZnRObXNTaWdtYTphPXUuc29mdE5tc1NpZ21hfSxsPUx0LnJ1bktlcm5lbChcIk5vbk1heFN1cHByZXNzaW9uVjVcIix7Ym94ZXM6aSxzY29yZXM6c30sYyk7cmV0dXJue3NlbGVjdGVkSW5kaWNlczpsWzBdLHNlbGVjdGVkU2NvcmVzOmxbMV19fX0pLEZoPWZ1bmN0aW9uKHQsZSxvLGEsaSxzKXtyZXR1cm4gdm9pZCAwPT09YSYmKGE9LjUpLHZvaWQgMD09PWkmJihpPU51bWJlci5ORUdBVElWRV9JTkZJTklUWSksdm9pZCAwPT09cyYmKHM9MCksbih0aGlzLHZvaWQgMCx2b2lkIDAsKGZ1bmN0aW9uKCl7dmFyIG4sdSxjLGwsaCxmLGQ7cmV0dXJuIHIodGhpcywoZnVuY3Rpb24ocil7c3dpdGNoKHIubGFiZWwpe2Nhc2UgMDpyZXR1cm4gbj1tbih0LFwiYm94ZXNcIixcIm5vbk1heFN1cHByZXNzaW9uQXN5bmNcIiksdT1tbihlLFwic2NvcmVzXCIsXCJub25NYXhTdXBwcmVzc2lvbkFzeW5jXCIpLGM9a2gobix1LG8sYSxpLHMpLG89Yy5tYXhPdXRwdXRTaXplLGE9Yy5pb3VUaHJlc2hvbGQsaT1jLnNjb3JlVGhyZXNob2xkLHM9Yy5zb2Z0Tm1zU2lnbWEsWzQsUHJvbWlzZS5hbGwoW24uZGF0YSgpLHUuZGF0YSgpXSldO2Nhc2UgMTpyZXR1cm4gbD1yLnNlbnQoKSxoPWxbMF0sZj1sWzFdLGQ9WG8oaCxmLG8sYSxpLHMpLG4hPT10JiZuLmRpc3Bvc2UoKSx1IT09ZSYmdS5kaXNwb3NlKCksWzIsZF19fSkpfSkpfSxfaD1Bbih7Y3JvcEFuZFJlc2l6ZV86ZnVuY3Rpb24odCxlLG4scixvLGEpe3ZhciBpPW1uKHQsXCJpbWFnZVwiLFwiY3JvcEFuZFJlc2l6ZVwiKSxzPW1uKGUsXCJib3hlc1wiLFwiY3JvcEFuZFJlc2l6ZVwiLFwiZmxvYXQzMlwiKSx1PW1uKG4sXCJib3hJbmRcIixcImNyb3BBbmRSZXNpemVcIixcImludDMyXCIpO289b3x8XCJiaWxpbmVhclwiLGE9YXx8MDt2YXIgYz1zLnNoYXBlWzBdO3JldHVybiBDKDQ9PT1pLnJhbmssKGZ1bmN0aW9uKCl7cmV0dXJuXCJFcnJvciBpbiBjcm9wQW5kUmVzaXplOiBpbWFnZSBtdXN0IGJlIHJhbmsgNCxidXQgZ290IHJhbmsgXCIraS5yYW5rK1wiLlwifSkpLEMoMj09PXMucmFuayYmND09PXMuc2hhcGVbMV0sKGZ1bmN0aW9uKCl7cmV0dXJuXCJFcnJvciBpbiBjcm9wQW5kUmVzaXplOiBib3hlcyBtdXN0IGJlIGhhdmUgc2l6ZSBbXCIrYytcIiw0XSBidXQgaGFkIHNoYXBlIFwiK3Muc2hhcGUrXCIuXCJ9KSksQygxPT09dS5yYW5rJiZ1LnNoYXBlWzBdPT09YywoZnVuY3Rpb24oKXtyZXR1cm5cIkVycm9yIGluIGNyb3BBbmRSZXNpemU6IGJveEluZCBtdXN0IGJlIGhhdmUgc2l6ZSBbXCIrYytcIl0gYnV0IGhhZCBzaGFwZSBcIitzLnNoYXBlK1wiLlwifSkpLEMoMj09PXIubGVuZ3RoLChmdW5jdGlvbigpe3JldHVyblwiRXJyb3IgaW4gY3JvcEFuZFJlc2l6ZTogY3JvcFNpemUgbXVzdCBiZSBvZiBsZW5ndGggMiwgYnV0IGdvdCBsZW5ndGggXCIrci5sZW5ndGgrXCIuXCJ9KSksQyhyWzBdPj0xJiZyWzFdPj0xLChmdW5jdGlvbigpe3JldHVyblwiY3JvcFNpemUgbXVzdCBiZSBhdGxlYXN0IFsxLDFdLCBidXQgd2FzIFwiK3J9KSksQyhcImJpbGluZWFyXCI9PT1vfHxcIm5lYXJlc3RcIj09PW8sKGZ1bmN0aW9uKCl7cmV0dXJuXCJtZXRob2QgbXVzdCBiZSBiaWxpbmVhciBvciBuZWFyZXN0LCBidXQgd2FzIFwiK299KSksTHQucnVuS2VybmVsRnVuYygoZnVuY3Rpb24odCxlKXtyZXR1cm4gdC5jcm9wQW5kUmVzaXplKGkscyx1LHIsbyxhKX0pLHtpbWFnZXM6aSxib3hlczpzLGJveEluZDp1fSxudWxsLFwiQ3JvcEFuZFJlc2l6ZVwiLHttZXRob2Q6byxleHRyYXBvbGF0aW9uVmFsdWU6YSxjcm9wU2l6ZTpyfSl9fSksT2g9T2JqZWN0LmZyZWV6ZSh7cmVzaXplQmlsaW5lYXI6U2gscmVzaXplTmVhcmVzdE5laWdoYm9yOkFoLG5vbk1heFN1cHByZXNzaW9uOkRoLG5vbk1heFN1cHByZXNzaW9uQXN5bmM6VGgsbm9uTWF4U3VwcHJlc3Npb25XaXRoU2NvcmU6Tmgsbm9uTWF4U3VwcHJlc3Npb25XaXRoU2NvcmVBc3luYzpGaCxjcm9wQW5kUmVzaXplOl9ofSksTWg9ZnVuY3Rpb24odCxlKXtyZXR1cm4hKHQ+MCl8fFwibGluZWFyXCI9PT1lfSxCaD1mdW5jdGlvbih0LGUsbil7aWYobnVsbD09bnx8XCJsaW5lYXJcIj09PW4pcmV0dXJuIHQ7aWYoXCJyZWx1XCI9PT1uKXJldHVybiB0Lm11bChlLnN0ZXAoKSk7dGhyb3cgbmV3IEVycm9yKFwiR3JhZGllbnQgZm9yIGFjdGl2YXRpb24gXCIrbitcIiBoYXMgbm90IGJlZW4gaW1wbGVtZW50ZWQgeWV0LlwiKX0sUGg9ZnVuY3Rpb24odCxlKXt2YXIgbj1lLHI9RW8odC5zaGFwZSxlLnNoYXBlKTtyZXR1cm4gci5sZW5ndGg+MCYmKG49bi5zdW0ocikpLG4ucmVzaGFwZSh0LnNoYXBlKX0sTGg9ZnVuY3Rpb24odCxlLG4pe2lmKFwibGluZWFyXCI9PT1lKXJldHVybiB0O2lmKFwicmVsdVwiPT09ZSlyZXR1cm4gQmwodCk7aWYoXCJlbHVcIj09PWUpcmV0dXJuIF9sKHQpO2lmKFwicmVsdTZcIj09PWUpcmV0dXJuIFBsKHQpO2lmKFwicHJlbHVcIj09PWUpcmV0dXJuIE1sKHQsbik7dGhyb3cgbmV3IEVycm9yKFwiVW5rbm93biBmdXNlZCBhY3RpdmF0aW9uIFwiK2UrXCIuXCIpfTt2YXIgV2g9QW4oe2Z1c2VkTWF0TXVsXzpmdW5jdGlvbih0KXt2YXIgZSxuPXQuYSxyPXQuYixvPXQudHJhbnNwb3NlQSxhPXZvaWQgMCE9PW8mJm8saT10LnRyYW5zcG9zZUIscz12b2lkIDAhPT1pJiZpLHU9dC5iaWFzLGM9dC5hY3RpdmF0aW9uLGw9dm9pZCAwPT09Yz9cImxpbmVhclwiOmMsaD10LnByZWx1QWN0aXZhdGlvbldlaWdodHM7aWYoITE9PT1NaChMdC5zdGF0ZS5ncmFkaWVudERlcHRoLGwpKXt2YXIgZj1lbChuLHIsYSxzKTtyZXR1cm4gbnVsbCE9dSYmKGY9cmMoZix1KSksTGgoZixsLGgpfXZhciBkPW1uKG4sXCJhXCIsXCJmdXNlZCBtYXRNdWxcIikscD1tbihyLFwiYlwiLFwiZnVzZWQgbWF0TXVsXCIpO2U9TnQoZCxwKSxkPWVbMF0scD1lWzFdO3ZhciB2PWE/ZC5zaGFwZVtkLnJhbmstMl06ZC5zaGFwZVtkLnJhbmstMV0sbT1zP3Auc2hhcGVbcC5yYW5rLTFdOnAuc2hhcGVbcC5yYW5rLTJdLGc9YT9kLnNoYXBlW2QucmFuay0xXTpkLnNoYXBlW2QucmFuay0yXSx5PXM/cC5zaGFwZVtwLnJhbmstMl06cC5zaGFwZVtwLnJhbmstMV0seD1kLnNoYXBlLnNsaWNlKDAsLTIpLGI9cC5zaGFwZS5zbGljZSgwLC0yKSx3PWsoeCksRT1rKGIpO0MoZC5yYW5rPj0yJiZwLnJhbms+PTImJmQucmFuaz09PXAucmFuaywoZnVuY3Rpb24oKXtyZXR1cm5cIkVycm9yIGluIGZ1c2VkIG1hdE11bDogaW5wdXRzIG11c3QgaGF2ZSB0aGUgc2FtZSByYW5rIG9mIGF0IGxlYXN0IDIsIGdvdCByYW5rcyBcIitkLnJhbmsrXCIgYW5kIFwiK3AucmFuaytcIi5cIn0pKSxDKFMoeCxiKSwoZnVuY3Rpb24oKXtyZXR1cm5cIkVycm9yIGluIGZ1c2VkIG1hdE11bDogb3V0ZXIgZGltZW5zaW9ucyAoXCIreCtcIikgYW5kIChcIitiK1wiKSBvZiBUZW5zb3JzIHdpdGggc2hhcGVzIFwiK2Quc2hhcGUrXCIgYW5kIFwiK3Auc2hhcGUrXCIgbXVzdCBtYXRjaC5cIn0pKSxDKHY9PT1tLChmdW5jdGlvbigpe3JldHVyblwiRXJyb3IgaW4gZnVzZWQgbWF0TXVsOiBpbm5lciBzaGFwZXMgKFwiK3YrXCIpIGFuZCAoXCIrbStcIikgb2YgVGVuc29ycyB3aXRoIHNoYXBlcyBcIitkLnNoYXBlK1wiIGFuZCBcIitwLnNoYXBlK1wiIGFuZCB0cmFuc3Bvc2VBPVwiK2ErXCIgYW5kIHRyYW5zcG9zZUI9XCIrcytcIiBtdXN0IG1hdGNoLlwifSkpO3ZhciBSLEksQT1kLnNoYXBlLnNsaWNlKDAsLTIpLmNvbmNhdChbZyx5XSksRD1hP2QuYXMzRCh3LHYsZyk6ZC5hczNEKHcsZyx2KSxUPXM/cC5hczNEKEUseSxtKTpwLmFzM0QoRSxtLHkpO251bGwhPXUmJlJvKEEsKFI9TnQoUj1tbih1LFwiYmlhc1wiLFwiZnVzZWQgbWF0TXVsXCIpLGQpWzBdKS5zaGFwZSksbnVsbCE9aCYmKEk9bW4oaCxcInByZWx1IHdlaWdodHNcIixcImZ1c2VkIG1hdE11bFwiKSk7dmFyIE49e2E6RCxiOlR9O251bGwhPXUmJihOLmJpYXM9UiksbnVsbCE9aCYmKE4ucHJlbHVBY3RpdmF0aW9uV2VpZ2h0cz1JKTt2YXIgRj1bRCxUXTtyZXR1cm4gTHQucnVuS2VybmVsRnVuYygoZnVuY3Rpb24odCxlKXt2YXIgbj10LmZ1c2VkQmF0Y2hNYXRNdWwoe2E6RCxiOlQsdHJhbnNwb3NlQTphLHRyYW5zcG9zZUI6cyxiaWFzOlIsYWN0aXZhdGlvbjpsLHByZWx1QWN0aXZhdGlvbldlaWdodHM6SX0pO3JldHVybiBlKFtELFQsbl0pLG59KSxOLChmdW5jdGlvbih0LGUpe3ZhciBuPWVbMF0scj1lWzFdLG89ZVsyXSxpPUJoKHQsbyxsKSxjPXt9O3JldHVybiBudWxsIT11JiYoYz17YmlhczpmdW5jdGlvbigpe3JldHVybiBQaChSLGkpfX0pLGF8fHM/IWEmJnM/T2JqZWN0LmFzc2lnbih7YTpmdW5jdGlvbigpe3JldHVybiBpLm1hdE11bChyLCExLCExKX0sYjpmdW5jdGlvbigpe3JldHVybiBpLm1hdE11bChuLCEwLCExKX19LGMpOmEmJiFzP09iamVjdC5hc3NpZ24oe2E6ZnVuY3Rpb24oKXtyZXR1cm4gci5tYXRNdWwoaSwhMSwhMCl9LGI6ZnVuY3Rpb24oKXtyZXR1cm4gbi5tYXRNdWwoaSwhMSwhMSl9fSxjKTpPYmplY3QuYXNzaWduKHthOmZ1bmN0aW9uKCl7cmV0dXJuIHIubWF0TXVsKGksITAsITApfSxiOmZ1bmN0aW9uKCl7cmV0dXJuIGkubWF0TXVsKG4sITAsITApfX0sYyk6T2JqZWN0LmFzc2lnbih7YTpmdW5jdGlvbigpe3JldHVybiBpLm1hdE11bChyLCExLCEwKX0sYjpmdW5jdGlvbigpe3JldHVybiBuLm1hdE11bChpLCEwLCExKX19LGMpfSksXCJfRnVzZWRNYXRNdWxcIix7dHJhbnNwb3NlQTphLHRyYW5zcG9zZUI6cyxhY3RpdmF0aW9uOmx9LEYsWyEwXSkucmVzaGFwZShBKX19KSxVaD1Bbih7ZnVzZWRDb252MmRfOmZ1bmN0aW9uKHQpe3ZhciBlPXQueCxuPXQuZmlsdGVyLHI9dC5zdHJpZGVzLG89dC5wYWQsYT10LmRhdGFGb3JtYXQsaT12b2lkIDA9PT1hP1wiTkhXQ1wiOmEscz10LmRpbGF0aW9ucyx1PXZvaWQgMD09PXM/WzEsMV06cyxjPXQuZGltUm91bmRpbmdNb2RlLGw9dC5iaWFzLGg9dC5hY3RpdmF0aW9uLGY9dm9pZCAwPT09aD9cImxpbmVhclwiOmgsZD10LnByZWx1QWN0aXZhdGlvbldlaWdodHM7aWYoZj1mfHxcImxpbmVhclwiLCExPT09TWgoTHQuc3RhdGUuZ3JhZGllbnREZXB0aCxmKSl7dmFyIHA9cWMoZSxuLHIsbyxpLHUsYyk7cmV0dXJuIG51bGwhPWwmJihwPXJjKHAsbCkpLExoKHAsZixkKX12YXIgdj1tbihlLFwieFwiLFwiY29udjJkXCIpLG09bW4obixcImZpbHRlclwiLFwiY29udjJkXCIpLGc9dix5PSExOzM9PT12LnJhbmsmJih5PSEwLGc9di5hczREKDEsdi5zaGFwZVswXSx2LnNoYXBlWzFdLHYuc2hhcGVbMl0pKSxDKDQ9PT1nLnJhbmssKGZ1bmN0aW9uKCl7cmV0dXJuXCJFcnJvciBpbiBmdXNlZCBjb252MmQ6IGlucHV0IG11c3QgYmUgcmFuayA0LCBidXQgZ290IHJhbmsgXCIrZy5yYW5rK1wiLlwifSkpLEMoND09PW0ucmFuaywoZnVuY3Rpb24oKXtyZXR1cm5cIkVycm9yIGluIGZ1c2VkIGNvbnYyZDogZmlsdGVyIG11c3QgYmUgcmFuayA0LCBidXQgZ290IHJhbmsgXCIrbS5yYW5rK1wiLlwifSkpLG51bGwhPWMmJkMoQShvKSwoZnVuY3Rpb24oKXtyZXR1cm5cIkVycm9yIGluIGZ1c2VkIGNvbnYyZDogcGFkIG11c3QgYmUgYW4gaW50ZWdlciB3aGVuIHVzaW5nLCBkaW1Sb3VuZGluZ01vZGUgXCIrYytcIiBidXQgZ290IHBhZCBcIitvK1wiLlwifSkpLEMoZy5zaGFwZVszXT09PW0uc2hhcGVbMl0sKGZ1bmN0aW9uKCl7cmV0dXJuXCJFcnJvciBpbiBjb252MmQ6IGRlcHRoIG9mIGlucHV0IChcIitnLnNoYXBlWzNdK1wiKSBtdXN0IG1hdGNoIGlucHV0IGRlcHRoIGZvciBmaWx0ZXIgXCIrbS5zaGFwZVsyXStcIi5cIn0pKSxDKE1vKHIsdSksKGZ1bmN0aW9uKCl7cmV0dXJuXCJFcnJvciBpbiBjb252MkQ6IEVpdGhlciBzdHJpZGVzIG9yIGRpbGF0aW9ucyBtdXN0IGJlIDEuIEdvdCBzdHJpZGVzIFwiK3IrXCIgYW5kIGRpbGF0aW9ucyAnXCIrdStcIidcIn0pKSxDKFwiTkhXQ1wiPT09aSwoZnVuY3Rpb24oKXtyZXR1cm5cIkVycm9yIGluIGNvbnYyZDogZ290IGRhdGFGb3JtYXQgb2YgXCIraStcIiBidXQgb25seSBOSFdDIGlzIGN1cnJlbnRseSBzdXBwb3J0ZWQuXCJ9KSk7dmFyIHgsYix3PVNvKGcuc2hhcGUsbS5zaGFwZSxyLHUsbyxjKTtudWxsIT1sJiYoeD1OdCh4PW1uKGwsXCJiaWFzXCIsXCJmdXNlZCBjb252MmRcIiksdilbMF0sUm8ody5vdXRTaGFwZSx4LnNoYXBlKSksbnVsbCE9ZCYmKGI9bW4oZCxcInByZWx1IHdlaWdodHNcIixcImZ1c2VkIGNvbnYyZFwiKSk7dmFyIEU9e3g6ZyxmaWx0ZXI6bX07bnVsbCE9bCYmKEUuYmlhcz14KSxudWxsIT1kJiYoRS5wcmVsdUFjdGl2YXRpb25XZWlnaHRzPWIpO3ZhciBSPVttLGddLEk9THQucnVuS2VybmVsRnVuYygoZnVuY3Rpb24odCxlKXt2YXIgbj10LmZ1c2VkQ29udjJkKHtpbnB1dDpnLGZpbHRlcjptLGNvbnZJbmZvOncsYmlhczp4LGFjdGl2YXRpb246ZixwcmVsdUFjdGl2YXRpb25XZWlnaHRzOmJ9KTtyZXR1cm4gZShbbSxnLG5dKSxufSksRSwoZnVuY3Rpb24odCxlKXt2YXIgbj1lLGE9blswXSxpPW5bMV0scz1uWzJdLGM9QmgodCxzLGYpO0MoT28odSksKGZ1bmN0aW9uKCl7cmV0dXJuXCJFcnJvciBpbiBncmFkaWVudCBvZiBmdXNlZCBjb252MkQ6IGRpbGF0aW9uIHJhdGVzIGdyZWF0ZXIgdGhhbiAxIGFyZSBub3QgeWV0IHN1cHBvcnRlZCBpbiBncmFkaWVudHMuIEdvdCBkaWxhdGlvbnMgJ1wiK3UrXCInXCJ9KSk7dmFyIGg9e307cmV0dXJuIG51bGwhPWwmJihoPXtiaWFzOmZ1bmN0aW9uKCl7cmV0dXJuIFBoKHgsYyl9fSksT2JqZWN0LmFzc2lnbih7eDpmdW5jdGlvbigpe3JldHVybiBYYyhpLnNoYXBlLGMsYSxyLG8pfSxmaWx0ZXI6ZnVuY3Rpb24oKXtyZXR1cm4gamMoaSxjLGEuc2hhcGUscixvKX19LGgpfSksXCJGdXNlZENvbnYyRFwiLHtjb252SW5mbzp3LGFjdGl2YXRpb246Zn0sUixbITBdKTtyZXR1cm4geT9JLmFzM0QoSS5zaGFwZVsxXSxJLnNoYXBlWzJdLEkuc2hhcGVbM10pOkl9fSksVmg9QW4oe2Z1c2VkRGVwdGh3aXNlQ29udjJkXzpmdW5jdGlvbih0KXt2YXIgZT10Lngsbj10LmZpbHRlcixyPXQuc3RyaWRlcyxvPXQucGFkLGE9dC5kYXRhRm9ybWF0LGk9dm9pZCAwPT09YT9cIk5IV0NcIjphLHM9dC5kaWxhdGlvbnMsdT12b2lkIDA9PT1zP1sxLDFdOnMsYz10LmRpbVJvdW5kaW5nTW9kZSxsPXQuYmlhcyxoPXQuYWN0aXZhdGlvbixmPXZvaWQgMD09PWg/XCJsaW5lYXJcIjpoLGQ9dC5wcmVsdUFjdGl2YXRpb25XZWlnaHRzO2lmKCExPT09TWgoTHQuc3RhdGUuZ3JhZGllbnREZXB0aCxmKSl7dmFyIHA9WWMoZSxuLHIsbyxpLHUsYyk7cmV0dXJuIG51bGwhPWwmJihwPXJjKHAsbCkpLExoKHAsZixkKX12YXIgdj1tbihlLFwieFwiLFwiZGVwdGh3aXNlQ29udjJkXCIpLG09bW4obixcImZpbHRlclwiLFwiZGVwdGh3aXNlQ29udjJkXCIpLGc9dix5PSExOzM9PT12LnJhbmsmJih5PSEwLGc9di5hczREKDEsdi5zaGFwZVswXSx2LnNoYXBlWzFdLHYuc2hhcGVbMl0pKSxDKDQ9PT1nLnJhbmssKGZ1bmN0aW9uKCl7cmV0dXJuXCJFcnJvciBpbiBmdXNlZCBkZXB0aHdpc2VDb252MmQ6IGlucHV0IG11c3QgYmUgcmFuayA0LCBidXQgZ290IHJhbmsgXCIrZy5yYW5rK1wiLlwifSkpLEMoND09PW0ucmFuaywoZnVuY3Rpb24oKXtyZXR1cm5cIkVycm9yIGluIGZ1c2VkIGRlcHRod2lzZUNvbnYyZDogZmlsdGVyIG11c3QgYmUgcmFuayA0LCBidXQgZ290IHJhbmsgXCIrbS5yYW5rK1wiLlwifSkpLEMoZy5zaGFwZVszXT09PW0uc2hhcGVbMl0sKGZ1bmN0aW9uKCl7cmV0dXJuXCJFcnJvciBpbiBmdXNlZCBkZXB0aHdpc2VDb252MmQ6IG51bWJlciBvZiBpbnB1dCBjaGFubmVscyAoXCIrZy5zaGFwZVszXStcIikgbXVzdCBtYXRjaCB0aGUgaW5DaGFubmVscyBkaW1lbnNpb24gaW4gZmlsdGVyIFwiK20uc2hhcGVbMl0rXCIuXCJ9KSksbnVsbD09dSYmKHU9WzEsMV0pLEMoTW8ocix1KSwoZnVuY3Rpb24oKXtyZXR1cm5cIkVycm9yIGluIGZ1c2VkIGRlcHRod2lzZUNvbnYyZDogRWl0aGVyIHN0cmlkZXMgb3IgZGlsYXRpb25zIG11c3QgYmUgMS4gR290IHN0cmlkZXMgXCIrcitcIiBhbmQgZGlsYXRpb25zICdcIit1K1wiJ1wifSkpLG51bGwhPWMmJkMoQShvKSwoZnVuY3Rpb24oKXtyZXR1cm5cIkVycm9yIGluIGZ1c2VkIGRlcHRod2lzZUNvbnYyZDogcGFkIG11c3QgYmUgYW4gaW50ZWdlciB3aGVuIHVzaW5nIGRpbVJvdW5kaW5nTW9kZSBcIitjK1wiIGJ1dCBnb3QgcGFkIFwiK28rXCIuXCJ9KSk7dmFyIHgsYix3PVNvKGcuc2hhcGUsbS5zaGFwZSxyLHUsbyxjLCEwKTtudWxsIT1sJiYoeD1OdCh4PW1uKGwsXCJiaWFzXCIsXCJmdXNlZCBjb252MmRcIiksdilbMF0sUm8ody5vdXRTaGFwZSx4LnNoYXBlKSksbnVsbCE9ZCYmKGI9bW4oZCxcInByZWx1IHdlaWdodHNcIixcImZ1c2VkIGRlcHRod2lzZUNvbnYyZFwiKSk7dmFyIEU9e3g6ZyxmaWx0ZXI6bX07bnVsbCE9bCYmKEUuYmlhcz14KSxudWxsIT1kJiYoRS5wcmVsdUFjdGl2YXRpb25XZWlnaHRzPWIpO3ZhciBSPVttLGddLEk9THQucnVuS2VybmVsRnVuYygoZnVuY3Rpb24odCxlKXt2YXIgbj10LmZ1c2VkRGVwdGh3aXNlQ29udjJEKHtpbnB1dDpnLGZpbHRlcjptLGNvbnZJbmZvOncsYmlhczp4LGFjdGl2YXRpb246ZixwcmVsdUFjdGl2YXRpb25XZWlnaHRzOmJ9KTtyZXR1cm4gZShbbSxnLG5dKSxufSksRSwoZnVuY3Rpb24odCxlKXtDKE9vKHUpLChmdW5jdGlvbigpe3JldHVyblwiRXJyb3IgaW4gZ3JhZGllbnQgb2YgZnVzZWQgZGVwdGh3aXNlQ29udjJkOiBkaWxhdGlvbiByYXRlcyBncmVhdGVyIHRoYW4gMSBhcmUgbm90IHlldCBzdXBwb3J0ZWQuIEdvdCBkaWxhdGlvbnMgJ1wiK3UrXCInXCJ9KSk7dmFyIG49ZVswXSxyPWVbMV0sbz1lWzJdLGE9QmgodCxvLGYpLGk9e307cmV0dXJuIG51bGwhPWwmJihpPXtiaWFzOmZ1bmN0aW9uKCl7cmV0dXJuIFBoKHgsYSl9fSksT2JqZWN0LmFzc2lnbih7eDpmdW5jdGlvbigpe3JldHVybiAkYyhyLnNoYXBlLGEsbix3KX0sZmlsdGVyOmZ1bmN0aW9uKCl7cmV0dXJuIFFjKHIsYSxuLnNoYXBlLHcpfX0saSl9KSxcIkZ1c2VkRGVwdGh3aXNlQ29udjJEXCIse2NvbnZJbmZvOncsYWN0aXZhdGlvbjpmfSxSLFshMF0pO3JldHVybiB5P0kuYXMzRChJLnNoYXBlWzFdLEkuc2hhcGVbMl0sSS5zaGFwZVszXSk6SX19KSx6aD1PYmplY3QuZnJlZXplKHttYXRNdWw6V2gsY29udjJkOlVoLGRlcHRod2lzZUNvbnYyZDpWaH0pLEdoPU9iamVjdC5mcmVlemUoe2ltYWdlOk9oLGxpbmFsZzpJaCxsb3NzZXM6Ymgsc3BlY3RyYWw6SmwsZnVzZWQ6emgsc2lnbmFsOnVoLHNxdWFyZTp0dSxzcXVhcmVkRGlmZmVyZW5jZTpudSxjb252MWQ6SGMsY29udjJkOnFjLGNvbnYzZDpLYyxkZXB0aHdpc2VDb252MmQ6WWMsc2VwYXJhYmxlQ29udjJkOkpjLGNvbnYyZFRyYW5zcG9zZTpaYyxjb252M2RUcmFuc3Bvc2U6dGwsb3A6QW4sYmF0Y2hOb3JtYWxpemF0aW9uMmQ6R3UsYmF0Y2hOb3JtYWxpemF0aW9uM2Q6SHUsYmF0Y2hOb3JtYWxpemF0aW9uNGQ6cXUsYmF0Y2hOb3JtYWxpemF0aW9uOkt1LGJhdGNoTm9ybTpqdSxiYXRjaE5vcm0yZDpYdSxiYXRjaE5vcm0zZDpZdSxiYXRjaE5vcm00ZDokdSxib29sZWFuTWFza0FzeW5jOlVjLGNvbXBsZXg6RG4scmVhbDpUbixpbWFnOk5uLGNvbmNhdDpZbixjb25jYXQxZDokbixjb25jYXQyZDpRbixjb25jYXQzZDpKbixjb25jYXQ0ZDpabixzcGxpdDp0cixtYXRNdWw6ZWwsZG90Om5sLG91dGVyUHJvZHVjdDpybCxyZXZlcnNlOm9sLHJldmVyc2UxZDphbCxyZXZlcnNlMmQ6aWwscmV2ZXJzZTNkOnNsLHJldmVyc2U0ZDp1bCxtYXhQb29sOmhsLGF2Z1Bvb2w6ZmwscG9vbDpkbCxtYXhQb29sM2Q6cGwsYXZnUG9vbDNkOnZsLHNsaWNlOm1sLHNsaWNlMWQ6Z2wsc2xpY2UyZDp5bCxzbGljZTNkOnhsLHNsaWNlNGQ6YmwsYWJzOnJ1LGFjb3M6b3UsYWNvc2g6YXUsYXNpbjppdSxhc2luaDpzdSxhdGFuOnV1LGF0YW5oOmN1LGNlaWw6bHUsY2xpcEJ5VmFsdWU6aHUsY29zOmZ1LGNvc2g6ZHUsZXJmOnB1LGV4cDp2dSxleHBtMTptdSxmbG9vcjpndSxsb2c6eXUsbG9nMXA6eHUsbG9nU2lnbW9pZDpidSxuZWc6d3UscmVjaXByb2NhbDpDdSxyb3VuZDpFdSxyc3FydDpSdSxzaWdtb2lkOkl1LHNpZ246a3UsaXNOYU46U3UsaXNJbmY6QXUsaXNGaW5pdGU6RHUsc2luOlR1LHNpbmg6TnUsc29mdHBsdXM6RnUsc3FydDpfdSxzdGVwOk91LHRhbjpNdSx0YW5oOkJ1LGFsbDpDbCxhbnk6RWwsYXJnTWF4OlJsLGFyZ01pbjpJbCxsb2dTdW1FeHA6a2wsbWF4OlNsLG1lYW46QWwsbWluOkRsLG1vbWVudHM6VGwsc3VtOk5sLHByb2Q6RmwsZXF1YWw6UmMsZXF1YWxTdHJpY3Q6SWMsZ3JlYXRlcjprYyxncmVhdGVyRXF1YWw6U2MsZ3JlYXRlckVxdWFsU3RyaWN0OkFjLGdyZWF0ZXJTdHJpY3Q6RGMsbGVzczpUYyxsZXNzRXF1YWw6TmMsbGVzc0VxdWFsU3RyaWN0OkZjLGxlc3NTdHJpY3Q6X2Msbm90RXF1YWw6T2Msbm90RXF1YWxTdHJpY3Q6TWMsYWRkOnJjLGFkZE46b2MsYWRkU3RyaWN0OmFjLGF0YW4yOmljLGRpdjpzYyxkaXZOb05hbjp1YyxkaXZTdHJpY3Q6Y2MsZmxvb3JEaXY6bGMsbWF4aW11bTpoYyxtYXhpbXVtU3RyaWN0OmZjLG1pbmltdW06ZGMsbWluaW11bVN0cmljdDpwYyxtb2Q6dmMsbW9kU3RyaWN0Om1jLG11bDpnYyxtdWxTdHJpY3Q6eWMscG93OnhjLHBvd1N0cmljdDpiYyxzcXVhcmVkRGlmZmVyZW5jZVN0cmljdDp3YyxzdWI6Q2Msc3ViU3RyaWN0OkVjLGVsdTpfbCxsZWFreVJlbHU6T2wscHJlbHU6TWwscmVsdTpCbCxyZWx1NjpQbCxzZWx1OkxsLGxvZ2ljYWxBbmQ6UXUsbG9naWNhbE5vdDpKdSxsb2dpY2FsT3I6WnUsbG9naWNhbFhvcjp0Yyx3aGVyZTplYyx3aGVyZUFzeW5jOm5jLGJ1ZmZlcjpkcixwcmludDpwcixiYXRjaFRvU3BhY2VORDp2cixicm9hZGNhc3RUbzptcixjYXN0OmdyLGNsb25lOnlyLGN1bXN1bTp4cixkZXB0aFRvU3BhY2U6YnIsZXhwYW5kRGltczp3cixleWU6Q3IsbXVsdGlub21pYWw6RXIsb25lSG90OlJyLHBhZDpJcixwYWQxZDprcixwYWQyZDpTcixwYWQzZDpBcixwYWQ0ZDpEcixyYW5kOlRyLHJhbmRvbU5vcm1hbDpOcixyYW5kb21HYW1tYTpGcixyYW5kb21Vbmlmb3JtOl9yLHJlc2hhcGU6T3Isc3BhY2VUb0JhdGNoTkQ6TXIsc3F1ZWV6ZTpCcixzdGFjazpQcix0aWxlOkxyLHRydW5jYXRlZE5vcm1hbDpXcix1bnN0YWNrOlVyLHNldGRpZmYxZEFzeW5jOlZyLGZpbGw6SG4sbGluc3BhY2U6cW4sb25lczp6bixyYW5nZTpLbixzY2FsYXI6T24sdGVuc29yOkZuLHRlbnNvcjFkOk1uLHRlbnNvcjJkOkJuLHRlbnNvcjNkOlBuLHRlbnNvcjRkOkxuLHRlbnNvcjVkOlduLHRlbnNvcjZkOlVuLHZhcmlhYmxlOlZuLHplcm9zOkduLG9uZXNMaWtlOmpuLHplcm9zTGlrZTpYbix0cmFuc3Bvc2U6V2wsc29mdG1heDpnbyxsb2dTb2Z0bWF4OnlvLGxvY2FsUmVzcG9uc2VOb3JtYWxpemF0aW9uOlVsLG5vcm06VmwsZ2F0aGVyOkxjLHVuc29ydGVkU2VnbWVudFN1bTpXYyxiYXNpY0xTVE1DZWxsOnpsLG11bHRpUk5OQ2VsbDpHbCxtb3ZpbmdBdmVyYWdlOkhsLHN0cmlkZWRTbGljZTpxbCx0b3BrOktsLHNjYXR0ZXJORDpqbCxmZnQ6WGwsaWZmdDpZbCxyZmZ0OiRsLGlyZmZ0OlFsLHNwYXJzZVRvRGVuc2U6WmwsZ2F0aGVyTkQ6dGgsZGlhZzplaCxkcm9wb3V0Om5oLGhhbm5XaW5kb3c6b2gsaGFtbWluZ1dpbmRvdzphaCxmcmFtZTppaCxzdGZ0OnNoLGluVG9wS0FzeW5jOmxofSk7ZnVuY3Rpb24gSGgodCxlKXtBcnJheS5pc0FycmF5KHQpfHwodD1bdF0pLHQuZm9yRWFjaCgoZnVuY3Rpb24odCl7bnVsbCE9dCYmQyhcImNvbXBsZXg2NFwiIT09dC5kdHlwZSwoZnVuY3Rpb24oKXtyZXR1cm4gZStcIiBkb2VzIG5vdCBzdXBwb3J0IGNvbXBsZXg2NCB0ZW5zb3JzLlwifSkpfSkpfWZ1bmN0aW9uIHFoKHQsZSxuLHIpe2lmKFwibGluZWFyXCI9PT1uKXJldHVybiB0LmxpbmVhcihlKTtpZihcInJlbHVcIj09PW4pcmV0dXJuIHQucmVsdShlKTtpZihcImVsdVwiPT09bilyZXR1cm4gdC5lbHUoZSk7aWYoXCJyZWx1NlwiPT09bilyZXR1cm4gdC5yZWx1NihlKTtpZihcInByZWx1XCI9PT1uKXJldHVybiB0LnByZWx1KGUscik7dGhyb3cgbmV3IEVycm9yKFwiQWN0aXZhdGlvbiBcIituK1wiIGhhcyBub3QgYmVlbiBpbXBsZW1lbnRlZCBmb3IgdGhlIENQVSBiYWNrZW5kLlwiKX12YXIgS2g9ZnVuY3Rpb24odCl7ZnVuY3Rpb24gbygpe3ZhciBlPXQuY2FsbCh0aGlzKXx8dGhpcztyZXR1cm4gZS5ibG9ja1NpemU9NDgsZS5maXJzdFVzZT0hMCxlLmRhdGE9bmV3IHhvKGUsTHQpLGV9cmV0dXJuIGUobyx0KSxvLnByb3RvdHlwZS53cml0ZT1mdW5jdGlvbih0LGUsbil7dGhpcy5maXJzdFVzZSYmKHRoaXMuZmlyc3RVc2U9ITEsaSgpLmdldChcIklTX05PREVcIikmJmRuKFwiXFxuPT09PT09PT09PT09PT09PT09PT09PT09PT09PVxcbkhpIHRoZXJlIPCfkYsuIExvb2tzIGxpa2UgeW91IGFyZSBydW5uaW5nIFRlbnNvckZsb3cuanMgaW4gTm9kZS5qcy4gVG8gc3BlZWQgdGhpbmdzIHVwIGRyYW1hdGljYWxseSwgaW5zdGFsbCBvdXIgbm9kZSBiYWNrZW5kLCB3aGljaCBiaW5kcyB0byBUZW5zb3JGbG93IEMrKywgYnkgcnVubmluZyBucG0gaSBAdGVuc29yZmxvdy90ZmpzLW5vZGUsIG9yIG5wbSBpIEB0ZW5zb3JmbG93L3RmanMtbm9kZS1ncHUgaWYgeW91IGhhdmUgQ1VEQS4gVGhlbiBjYWxsIHJlcXVpcmUoJ0B0ZW5zb3JmbG93L3RmanMtbm9kZScpOyAoLWdwdSBzdWZmaXggZm9yIENVREEpIGF0IHRoZSBzdGFydCBvZiB5b3VyIHByb2dyYW0uIFZpc2l0IGh0dHBzOi8vZ2l0aHViLmNvbS90ZW5zb3JmbG93L3RmanMtbm9kZSBmb3IgbW9yZSBkZXRhaWxzLlxcbj09PT09PT09PT09PT09PT09PT09PT09PT09PT1cIikpO3ZhciByPXt9O3JldHVybiB0aGlzLmRhdGEuc2V0KHIse3ZhbHVlczp0LGR0eXBlOm59KSxyfSxvLnByb3RvdHlwZS5tb3ZlPWZ1bmN0aW9uKHQsZSxuLHIpe3RoaXMuZGF0YS5zZXQodCx7dmFsdWVzOmUsZHR5cGU6cn0pfSxvLnByb3RvdHlwZS5udW1EYXRhSWRzPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuZGF0YS5udW1EYXRhSWRzKCl9LG8ucHJvdG90eXBlLnJlYWQ9ZnVuY3Rpb24odCl7cmV0dXJuIG4odGhpcyx2b2lkIDAsdm9pZCAwLChmdW5jdGlvbigpe3JldHVybiByKHRoaXMsKGZ1bmN0aW9uKGUpe3JldHVyblsyLHRoaXMucmVhZFN5bmModCldfSkpfSkpfSxvLnByb3RvdHlwZS5yZWFkU3luYz1mdW5jdGlvbih0KXt2YXIgZT10aGlzLmRhdGEuZ2V0KHQpLG49ZS5kdHlwZSxyPWUuY29tcGxleFRlbnNvcnM7cmV0dXJuXCJjb21wbGV4NjRcIj09PW4/Vm8odGhpcy5yZWFkU3luYyhyLnJlYWwuZGF0YUlkKSx0aGlzLnJlYWRTeW5jKHIuaW1hZy5kYXRhSWQpKTp0aGlzLmRhdGEuZ2V0KHQpLnZhbHVlc30sby5wcm90b3R5cGUuYnVmZmVyU3luYz1mdW5jdGlvbih0KXt2YXIgZT10aGlzLnJlYWRTeW5jKHQuZGF0YUlkKSxuPWU7aWYoXCJzdHJpbmdcIj09PXQuZHR5cGUpdHJ5e249ZS5tYXAoKGZ1bmN0aW9uKHQpe3JldHVybiBvdCh0KX0pKX1jYXRjaCh0KXt0aHJvdyBuZXcgRXJyb3IoXCJGYWlsZWQgdG8gZGVjb2RlIGVuY29kZWQgc3RyaW5nIGJ5dGVzIGludG8gdXRmLThcIil9cmV0dXJuIGRyKHQuc2hhcGUsdC5kdHlwZSxuKX0sby5wcm90b3R5cGUubWFrZU91dHB1dD1mdW5jdGlvbih0LGUsbil7dmFyIHI9dGhpcy53cml0ZSh0LGUsbik7cmV0dXJuIEx0Lm1ha2VUZW5zb3JGcm9tRGF0YUlkKHIsZSxuLHRoaXMpfSxvLnByb3RvdHlwZS5kaXNwb3NlRGF0YT1mdW5jdGlvbih0KXtpZih0aGlzLmRhdGEuaGFzKHQpKXt2YXIgZT10aGlzLmRhdGEuZ2V0KHQpLmNvbXBsZXhUZW5zb3JzO251bGwhPWUmJihlLnJlYWwuZGlzcG9zZSgpLGUuaW1hZy5kaXNwb3NlKCkpLHRoaXMuZGF0YS5kZWxldGUodCl9fSxvLnByb3RvdHlwZS50aW1lPWZ1bmN0aW9uKHQpe3JldHVybiBuKHRoaXMsdm9pZCAwLHZvaWQgMCwoZnVuY3Rpb24oKXt2YXIgZTtyZXR1cm4gcih0aGlzLChmdW5jdGlvbihuKXtyZXR1cm4gZT1ldCgpLHQoKSxbMix7a2VybmVsTXM6ZXQoKS1lfV19KSl9KSl9LG8ucHJvdG90eXBlLm1lbW9yeT1mdW5jdGlvbigpe3JldHVybnt1bnJlbGlhYmxlOiEwLHJlYXNvbnM6W1wiVGhlIHJlcG9ydGVkIG1lbW9yeSBpcyBhbiB1cHBlciBib3VuZC4gRHVlIHRvIGF1dG9tYXRpYyBnYXJiYWdlIGNvbGxlY3Rpb24sIHRoZSB0cnVlIGFsbG9jYXRlZCBtZW1vcnkgbWF5IGJlIGxlc3MuXCJdfX0sby5wcm90b3R5cGUuY29tcGxleD1mdW5jdGlvbih0LGUpe3ZhciBuPXRoaXMubWFrZU91dHB1dChudWxsLHQuc2hhcGUsXCJjb21wbGV4NjRcIik7cmV0dXJuIHRoaXMuZGF0YS5nZXQobi5kYXRhSWQpLmNvbXBsZXhUZW5zb3JzPXtyZWFsOkx0LmtlZXAodC5jbG9uZSgpKSxpbWFnOkx0LmtlZXAoZS5jbG9uZSgpKX0sbn0sby5wcm90b3R5cGUucmVhbD1mdW5jdGlvbih0KXtyZXR1cm4gdGhpcy5kYXRhLmdldCh0LmRhdGFJZCkuY29tcGxleFRlbnNvcnMucmVhbC5jbG9uZSgpfSxvLnByb3RvdHlwZS5pbWFnPWZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLmRhdGEuZ2V0KHQuZGF0YUlkKS5jb21wbGV4VGVuc29ycy5pbWFnLmNsb25lKCl9LG8ucHJvdG90eXBlLnNsaWNlPWZ1bmN0aW9uKHQsZSxuKXtpZihIaCh0LFwic2xpY2VcIiksaW8odC5zaGFwZSxlLG4pKXt2YXIgcj1zbyhlLHQuc3RyaWRlcyksbz1rKG4pO3JldHVybiBGbih0aGlzLnJlYWRTeW5jKHQuZGF0YUlkKS5zdWJhcnJheShyLHIrbyksbix0LmR0eXBlKX1mb3IodmFyIGE9ZHIobix0LmR0eXBlKSxpPXRoaXMuYnVmZmVyU3luYyh0KSxzPTA7czxhLnNpemU7KytzKXt2YXIgdT1hLmluZGV4VG9Mb2MocykubWFwKChmdW5jdGlvbih0LG4pe3JldHVybiB0K2Vbbl19KSk7YS52YWx1ZXNbc109aS5nZXQuYXBwbHkoaSx1KX1yZXR1cm4gYS50b1RlbnNvcigpfSxvLnByb3RvdHlwZS5zdHJpZGVkU2xpY2U9ZnVuY3Rpb24odCxlLG4scil7SGgodCxcInN0cmlkZWRTbGljZVwiKTt2YXIgbz1ybyhlLG4scik7aWYoby5zb21lKChmdW5jdGlvbih0KXtyZXR1cm4gMD09PXR9KSkpcmV0dXJuIEZuKFtdLG8pO2Zvcih2YXIgYT1kcihvLHQuZHR5cGUpLGk9dGhpcy5idWZmZXJTeW5jKHQpLHM9MDtzPGEuc2l6ZTtzKyspe2Zvcih2YXIgdT1hLmluZGV4VG9Mb2MocyksYz1uZXcgQXJyYXkodS5sZW5ndGgpLGw9MDtsPGMubGVuZ3RoO2wrKyljW2xdPXVbbF0qcltsXStlW2xdO2Euc2V0LmFwcGx5KGEsW2kuZ2V0LmFwcGx5KGksYyldLmNvbmNhdCh1KSl9cmV0dXJuIGEudG9UZW5zb3IoKX0sby5wcm90b3R5cGUuZGlhZz1mdW5jdGlvbih0KXtmb3IodmFyIGU9dGhpcy5yZWFkU3luYyh0LmRhdGFJZCksbj1kcihbdC5zaXplLHQuc2l6ZV0sdC5kdHlwZSkscj1uLnZhbHVlcyxvPTA7bzxlLmxlbmd0aDtvKyspcltvKnQuc2l6ZStvXT1lW29dO3JldHVybiBuLnRvVGVuc29yKCl9LG8ucHJvdG90eXBlLnVuc3RhY2s9ZnVuY3Rpb24odCxlKXtmb3IodmFyIG49dC5zaGFwZVtlXSxyPW5ldyBBcnJheSh0LnJhbmstMSksbz0wLGE9MDthPHQucmFuazthKyspYSE9PWUmJihyW28rK109dC5zaGFwZVthXSk7dmFyIGk9bmV3IEFycmF5KHQucmFuaykuZmlsbCgwKSxzPXQuc2hhcGUuc2xpY2UoKTtzW2VdPTE7dmFyIHU9bmV3IEFycmF5KG4pO2ZvcihhPTA7YTx1Lmxlbmd0aDthKyspaVtlXT1hLHVbYV09dGhpcy5zbGljZSh0LGkscykucmVzaGFwZShyKTtyZXR1cm4gdX0sby5wcm90b3R5cGUucmV2ZXJzZT1mdW5jdGlvbih0LGUpe0hoKHQsXCJyZXZlcnNlXCIpO2Zvcih2YXIgbj1kcih0LnNoYXBlLHQuZHR5cGUpLHI9dGhpcy5idWZmZXJTeW5jKHQpLG89ZnVuY3Rpb24obyl7dmFyIGE9bi5pbmRleFRvTG9jKG8pLGk9YS5zbGljZSgpO2UuZm9yRWFjaCgoZnVuY3Rpb24oZSl7cmV0dXJuIGlbZV09dC5zaGFwZVtlXS0xLWlbZV19KSksbi5zZXQuYXBwbHkobixbci5nZXQuYXBwbHkocixpKV0uY29uY2F0KGEpKX0sYT0wO2E8bi5zaXplO2ErKylvKGEpO3JldHVybiBuLnRvVGVuc29yKCl9LG8ucHJvdG90eXBlLmNvbmNhdD1mdW5jdGlvbih0LGUpe3ZhciBuPXRoaXM7aWYoXCJjb21wbGV4NjRcIj09PXRbMF0uZHR5cGUpe3ZhciByPXQubWFwKChmdW5jdGlvbih0KXtyZXR1cm4gVG4odCl9KSksbz10Lm1hcCgoZnVuY3Rpb24odCl7cmV0dXJuIE5uKHQpfSkpO3JldHVybiBEbih0aGlzLmNvbmNhdChyLGUpLHRoaXMuY29uY2F0KG8sZSkpfXZhciBhPXQubWFwKChmdW5jdGlvbih0KXt2YXIgbj1rKHQuc2hhcGUuc2xpY2UoZSkpO3JldHVybiB0LmFzMkQoLTEsbil9KSksaT1TbihhLm1hcCgoZnVuY3Rpb24odCl7cmV0dXJuIHQuc2hhcGV9KSksMSkscz1kcihpLHRbMF0uZHR5cGUpLnZhbHVlcztpZigxPT09YVswXS5zaGFwZVswXSl7dmFyIHU9MDthLmZvckVhY2goKGZ1bmN0aW9uKHQpe3Muc2V0KG4ucmVhZFN5bmModC5kYXRhSWQpLHUpLHUrPXQuc2l6ZX0pKX1lbHNle3ZhciBjPTA7YS5mb3JFYWNoKChmdW5jdGlvbih0KXtmb3IodmFyIGU9bi5yZWFkU3luYyh0LmRhdGFJZCkscj0wLG89MDtvPHQuc2hhcGVbMF07KytvKWZvcih2YXIgYT1vKmlbMV0rYyx1PTA7dTx0LnNoYXBlWzFdOysrdSlzW2ErdV09ZVtyKytdO2MrPXQuc2hhcGVbMV19KSl9dmFyIGw9U24odC5tYXAoKGZ1bmN0aW9uKHQpe3JldHVybiB0LnNoYXBlfSkpLGUpO3JldHVybiBGbihzLGwsdFswXS5kdHlwZSl9LG8ucHJvdG90eXBlLm5lZz1mdW5jdGlvbih0KXtyZXR1cm4gSGgodCxcIm5lZ1wiKSx0aGlzLm11bHRpcGx5KE9uKC0xKSx0KX0sby5wcm90b3R5cGUuYWRkPWZ1bmN0aW9uKHQsZSl7cmV0dXJuXCJjb21wbGV4NjRcIj09PXQuZHR5cGV8fFwiY29tcGxleDY0XCI9PT1lLmR0eXBlP3RoaXMuYnJvYWRjYXN0ZWRCaW5hcnlDb21wbGV4T3AodC5jYXN0KFwiY29tcGxleDY0XCIpLGUuY2FzdChcImNvbXBsZXg2NFwiKSwoZnVuY3Rpb24odCxlLG4scil7cmV0dXJue3JlYWw6dCtuLGltYWc6ZStyfX0pKTp0aGlzLmJyb2FkY2FzdGVkQmluYXJ5T3AodCxlLER0KHQuZHR5cGUsZS5kdHlwZSksKGZ1bmN0aW9uKHQsZSl7cmV0dXJuIHQrZX0pKX0sby5wcm90b3R5cGUuYWRkTj1mdW5jdGlvbih0KXt2YXIgZT10aGlzO0hoKHQsXCJhZGROXCIpO2Zvcih2YXIgbj10Lm1hcCgoZnVuY3Rpb24odCl7cmV0dXJuIGUucmVhZFN5bmModC5kYXRhSWQpfSkpLHI9ZHIodFswXS5zaGFwZSx0WzBdLmR0eXBlKSxvPXIudmFsdWVzLGE9MDthPHQubGVuZ3RoO2ErKylmb3IodmFyIGk9blthXSxzPTA7czxvLmxlbmd0aDtzKyspb1tzXSs9aVtzXTtyZXR1cm4gci50b1RlbnNvcigpfSxvLnByb3RvdHlwZS5zb2Z0bWF4PWZ1bmN0aW9uKHQsZSl7dmFyIG49TyhbZV0sdC5zaGFwZSkscj10aGlzLm1heCh0LG4pLG89d24oci5zaGFwZSxuKSxhPXRoaXMuc3VidHJhY3QodCxyLnJlc2hhcGUobykpLGk9dGhpcy5leHAoYSkscz10aGlzLnN1bShpLG4pLnJlc2hhcGUobyk7cmV0dXJuIHRoaXMucmVhbERpdmlkZShpLHMpfSxvLnByb3RvdHlwZS5zdWJ0cmFjdD1mdW5jdGlvbih0LGUpe3JldHVyblwiY29tcGxleDY0XCI9PT10LmR0eXBlfHxcImNvbXBsZXg2NFwiPT09ZS5kdHlwZT90aGlzLmJyb2FkY2FzdGVkQmluYXJ5Q29tcGxleE9wKHQuY2FzdChcImNvbXBsZXg2NFwiKSxlLmNhc3QoXCJjb21wbGV4NjRcIiksKGZ1bmN0aW9uKHQsZSxuLHIpe3JldHVybntyZWFsOnQtbixpbWFnOmUtcn19KSk6dGhpcy5icm9hZGNhc3RlZEJpbmFyeU9wKHQsZSxEdCh0LmR0eXBlLGUuZHR5cGUpLChmdW5jdGlvbih0LGUpe3JldHVybiB0LWV9KSl9LG8ucHJvdG90eXBlLnBvdz1mdW5jdGlvbih0LGUpe3JldHVybiBIaChbdCxlXSxcInBvd1wiKSx0aGlzLmJyb2FkY2FzdGVkQmluYXJ5T3AodCxlLHQuZHR5cGUsKGZ1bmN0aW9uKHQsZSl7cmV0dXJuIE1hdGgucG93KHQsZSl9KSl9LG8ucHJvdG90eXBlLmJhdGNoTWF0TXVsPWZ1bmN0aW9uKHQsZSxuLHIpe0hoKFt0LGVdLFwibWF0TXVsXCIpO2Zvcih2YXIgbz1uP3Quc2hhcGVbMV06dC5zaGFwZVsyXSxhPW4/dC5zaGFwZVsyXTp0LnNoYXBlWzFdLGk9cj9lLnNoYXBlWzFdOmUuc2hhcGVbMl0scz10LnNoYXBlWzBdLHU9dGhpcy5yZWFkU3luYyh0LmRhdGFJZCksYz10aGlzLnJlYWRTeW5jKGUuZGF0YUlkKSxsPW4/W3Quc3RyaWRlc1swXSwxLHQuc3RyaWRlc1sxXV06W3Quc3RyaWRlc1swXSx0LnN0cmlkZXNbMV0sMV0saD1sWzBdLGY9bFsxXSxkPWxbMl0scD1yP1sxLGUuc3RyaWRlc1sxXSxlLnN0cmlkZXNbMF1dOltlLnN0cmlkZXNbMV0sMSxlLnN0cmlkZXNbMF1dLHY9cFswXSxtPXBbMV0sZz1wWzJdLHk9YSppLHg9ZHIoW3MsYSxpXSx0LmR0eXBlKSxiPXgudmFsdWVzLHc9dGhpcy5ibG9ja1NpemUsQz0wO0M8cztDKyspZm9yKHZhciBFPTA7RTxhO0UrPXcpZm9yKHZhciBSPTA7UjxpO1IrPXcpZm9yKHZhciBJPTA7STxvO0krPXcpZm9yKHZhciBrPU1hdGgubWluKEUrdyxhKSxTPU1hdGgubWluKFIrdyxpKSxBPU1hdGgubWluKEkrdyxvKSxEPUU7RDxrO0QrKylmb3IodmFyIFQ9UjtUPFM7VCsrKXtmb3IodmFyIE49MCxGPUk7RjxBO0YrKylOKz11W0MqaCtEKmYrRipkXSpjW0YqditUKm0rQypnXTtiW0MqeSsoRCppK1QpXSs9Tn1yZXR1cm4geC50b1RlbnNvcigpfSxvLnByb3RvdHlwZS5mdXNlZEJhdGNoTWF0TXVsPWZ1bmN0aW9uKHQpe3ZhciBlPXQuYSxuPXQuYixyPXQudHJhbnNwb3NlQSxvPXQudHJhbnNwb3NlQixhPXQuYmlhcyxpPXQuYWN0aXZhdGlvbixzPXQucHJlbHVBY3RpdmF0aW9uV2VpZ2h0cyx1PXRoaXMuYmF0Y2hNYXRNdWwoZSxuLHIsbyk7cmV0dXJuIGEmJih1PXRoaXMuYWRkKHUsYSkpLGkmJih1PXFoKHRoaXMsdSxpLHMpKSx1fSxvLnByb3RvdHlwZS5tdWx0aXBseT1mdW5jdGlvbih0LGUpe3JldHVyblwiY29tcGxleDY0XCI9PT10LmR0eXBlfHxcImNvbXBsZXg2NFwiPT09ZS5kdHlwZT90aGlzLmJyb2FkY2FzdGVkQmluYXJ5Q29tcGxleE9wKHQuY2FzdChcImNvbXBsZXg2NFwiKSxlLmNhc3QoXCJjb21wbGV4NjRcIiksKGZ1bmN0aW9uKHQsZSxuLHIpe3JldHVybntyZWFsOnQqbi1lKnIsaW1hZzp0KnIrZSpufX0pKTp0aGlzLmJyb2FkY2FzdGVkQmluYXJ5T3AodCxlLER0KHQuZHR5cGUsZS5kdHlwZSksKGZ1bmN0aW9uKHQsZSl7cmV0dXJuIHQqZX0pKX0sby5wcm90b3R5cGUucmVhbERpdmlkZT1mdW5jdGlvbih0LGUpe0hoKFt0LGVdLFwicmVhbERpdmlkZVwiKTtyZXR1cm4gdGhpcy5icm9hZGNhc3RlZEJpbmFyeU9wKHQsZSxcImZsb2F0MzJcIiwoZnVuY3Rpb24odCxlKXtyZXR1cm4gdC9lfSkpfSxvLnByb3RvdHlwZS5mbG9vckRpdj1mdW5jdGlvbih0LGUpe0hoKFt0LGVdLFwiZmxvb3JEaXZcIik7cmV0dXJuIHRoaXMuYnJvYWRjYXN0ZWRCaW5hcnlPcCh0LGUsXCJpbnQzMlwiLChmdW5jdGlvbih0LGUpe3JldHVybiBNYXRoLmZsb29yKHQvZSl9KSl9LG8ucHJvdG90eXBlLnN1bT1mdW5jdGlvbih0LGUpe0hoKHQsXCJzdW1cIiksQ24oXCJzdW1cIixlLHQucmFuayk7Zm9yKHZhciBuPWJuKHQuc2hhcGUsZSkscj1uWzBdLG89blsxXSxhPUduKHIsRHQodC5kdHlwZSxcImludDMyXCIpKSxpPWsobykscz10aGlzLnJlYWRTeW5jKGEuZGF0YUlkKSx1PXRoaXMucmVhZFN5bmModC5kYXRhSWQpLGM9MDtjPHMubGVuZ3RoOysrYyl7Zm9yKHZhciBsPWMqaSxoPTAsZj0wO2Y8aTsrK2YpaCs9dVtsK2ZdO3NbY109aH1yZXR1cm4gYX0sby5wcm90b3R5cGUucHJvZD1mdW5jdGlvbih0LGUpe0hoKHQsXCJzdW1cIik7Zm9yKHZhciBuPWJuKHQuc2hhcGUsZSkscj1uWzBdLG89blsxXSxhPUduKHIsRHQodC5kdHlwZSxcImludDMyXCIpKSxpPWsobykscz10aGlzLnJlYWRTeW5jKGEuZGF0YUlkKSx1PXRoaXMucmVhZFN5bmModC5kYXRhSWQpLGM9MDtjPHMubGVuZ3RoOysrYyl7Zm9yKHZhciBsPWMqaSxoPTEsZj0wO2Y8aTsrK2YpaCo9dVtsK2ZdO3NbY109aH1yZXR1cm4gYX0sby5wcm90b3R5cGUudW5zb3J0ZWRTZWdtZW50U3VtPWZ1bmN0aW9uKHQsZSxuKXtIaCh0LFwidW5zb3J0ZWRTZWdtZW50U3VtXCIpO2Zvcih2YXIgcj1bXSxvPXQucmFuay1lLnJhbmssYT0wO2E8bzsrK2EpZT1lLmV4cGFuZERpbXMoYSsxKTtmb3IoYT0wO2E8bjsrK2Epe3ZhciBpPU9uKGEsXCJpbnQzMlwiKSxzPVJjKGksZSkuYXNUeXBlKFwiZmxvYXQzMlwiKS5tdWwodCkuc3VtKDApO3IucHVzaChzKX1yZXR1cm4gUHIocil9LG8ucHJvdG90eXBlLmFyZ01pbj1mdW5jdGlvbih0LGUpe0hoKHQsXCJhcmdNaW5cIik7dmFyIG49W2VdO0NuKFwiYXJnTWluXCIsbix0LnJhbmspO2Zvcih2YXIgcj1ibih0LnNoYXBlLG4pLG89clswXSxhPXJbMV0saT1HbihvLFwiaW50MzJcIikscz1rKGEpLHU9dGhpcy5yZWFkU3luYyhpLmRhdGFJZCksYz10aGlzLnJlYWRTeW5jKHQuZGF0YUlkKSxsPTA7bDx1Lmxlbmd0aDsrK2wpe2Zvcih2YXIgaD1sKnMsZj1jW2hdLGQ9MCxwPTA7cDxzOysrcCl7dmFyIHY9Y1toK3BdO3Y8ZiYmKGY9dixkPXApfXVbbF09ZH1yZXR1cm4gaX0sby5wcm90b3R5cGUuYXJnTWF4PWZ1bmN0aW9uKHQsZSl7SGgodCxcImFyZ01heFwiKTt2YXIgbj1bZV07Q24oXCJhcmdNYXhcIixuLHQucmFuayk7Zm9yKHZhciByPWJuKHQuc2hhcGUsbiksbz1yWzBdLGE9clsxXSxpPUduKG8sXCJpbnQzMlwiKSxzPWsoYSksdT10aGlzLnJlYWRTeW5jKGkuZGF0YUlkKSxjPXRoaXMucmVhZFN5bmModC5kYXRhSWQpLGw9MDtsPHUubGVuZ3RoOysrbCl7Zm9yKHZhciBoPWwqcyxmPWNbaF0sZD0wLHA9MDtwPHM7KytwKXt2YXIgdj1jW2grcF07dj5mJiYoZj12LGQ9cCl9dVtsXT1kfXJldHVybiBpfSxvLnByb3RvdHlwZS5jdW1zdW09ZnVuY3Rpb24odCxlLG4scil7aWYoSGgodCxcImN1bXN1bVwiKSxlIT09dC5yYW5rLTEpdGhyb3cgbmV3IEVycm9yKFwiYmFja2VuZC5jdW1zdW0gaW4gQ1BVIGV4cGVjdHMgYW4gaW5uZXItbW9zdCBheGlzPVwiKyh0LnJhbmstMSkrXCIgYnV0IGdvdCBheGlzPVwiK2UpO2Zvcih2YXIgbz1EdCh0LmR0eXBlLFwiaW50MzJcIiksYT1Hbih0LnNoYXBlLG8pLGk9dGhpcy5yZWFkU3luYyhhLmRhdGFJZCkscz10aGlzLnJlYWRTeW5jKHQuZGF0YUlkKSx1PXQuc2hhcGVbdC5yYW5rLTFdLGM9cj9mdW5jdGlvbih0LGUpe3JldHVybiB0K3UtZS0xfTpmdW5jdGlvbih0LGUpe3JldHVybiB0K2V9LGw9MDtsPHMubGVuZ3RoO2wrPXUpZm9yKHZhciBoPTA7aDx1O2grKyl7dmFyIGY9YyhsLGgpO2lmKDA9PT1oKWlbZl09bj8wOnNbZl07ZWxzZXt2YXIgZD1jKGwsaC0xKTtpW2ZdPW4/c1tkXStpW2RdOnNbZl0raVtkXX19cmV0dXJuIGF9LG8ucHJvdG90eXBlLmVxdWFsPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIEhoKFt0LGVdLFwiZXF1YWxcIiksdGhpcy5icm9hZGNhc3RlZEJpbmFyeU9wKHQsZSxcImJvb2xcIiwoZnVuY3Rpb24odCxlKXtyZXR1cm4gdD09PWU/MTowfSkpfSxvLnByb3RvdHlwZS5ub3RFcXVhbD1mdW5jdGlvbih0LGUpe3JldHVybiBIaChbdCxlXSxcIm5vdEVxdWFsXCIpLHRoaXMuYnJvYWRjYXN0ZWRCaW5hcnlPcCh0LGUsXCJib29sXCIsKGZ1bmN0aW9uKHQsZSl7cmV0dXJuIHQhPT1lPzE6MH0pKX0sby5wcm90b3R5cGUubGVzcz1mdW5jdGlvbih0LGUpe3JldHVybiBIaChbdCxlXSxcImxlc3NcIiksdGhpcy5icm9hZGNhc3RlZEJpbmFyeU9wKHQsZSxcImJvb2xcIiwoZnVuY3Rpb24odCxlKXtyZXR1cm4gdDxlPzE6MH0pKX0sby5wcm90b3R5cGUubGVzc0VxdWFsPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIEhoKFt0LGVdLFwibGVzc0VxdWFsXCIpLHRoaXMuYnJvYWRjYXN0ZWRCaW5hcnlPcCh0LGUsXCJib29sXCIsKGZ1bmN0aW9uKHQsZSl7cmV0dXJuIHQ8PWU/MTowfSkpfSxvLnByb3RvdHlwZS5ncmVhdGVyPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIEhoKFt0LGVdLFwiZ3JlYXRlclwiKSx0aGlzLmJyb2FkY2FzdGVkQmluYXJ5T3AodCxlLFwiYm9vbFwiLChmdW5jdGlvbih0LGUpe3JldHVybiB0PmU/MTowfSkpfSxvLnByb3RvdHlwZS5ncmVhdGVyRXF1YWw9ZnVuY3Rpb24odCxlKXtyZXR1cm4gSGgoW3QsZV0sXCJncmVhdGVyRXF1YWxcIiksdGhpcy5icm9hZGNhc3RlZEJpbmFyeU9wKHQsZSxcImJvb2xcIiwoZnVuY3Rpb24odCxlKXtyZXR1cm4gdD49ZT8xOjB9KSl9LG8ucHJvdG90eXBlLmxvZ2ljYWxOb3Q9ZnVuY3Rpb24odCl7SGgodCxcImxvZ2ljYWxOb3RcIik7Zm9yKHZhciBlPXRoaXMucmVhZFN5bmModC5kYXRhSWQpLG49bmV3IFVpbnQ4QXJyYXkoZS5sZW5ndGgpLHI9MDtyPGUubGVuZ3RoOysrciluW3JdPWVbcl0/MDoxO3JldHVybiB0aGlzLm1ha2VPdXRwdXQobix0LnNoYXBlLFwiYm9vbFwiKX0sby5wcm90b3R5cGUubG9naWNhbEFuZD1mdW5jdGlvbih0LGUpe3JldHVybiBIaChbdCxlXSxcImxvZ2ljYWxBbmRcIiksdGhpcy5icm9hZGNhc3RlZEJpbmFyeU9wKHQsZSxcImJvb2xcIiwoZnVuY3Rpb24odCxlKXtyZXR1cm4gdCYmZX0pKX0sby5wcm90b3R5cGUubG9naWNhbE9yPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIEhoKFt0LGVdLFwibG9naWNhbE9yXCIpLHRoaXMuYnJvYWRjYXN0ZWRCaW5hcnlPcCh0LGUsXCJib29sXCIsKGZ1bmN0aW9uKHQsZSl7cmV0dXJuIHR8fGV9KSl9LG8ucHJvdG90eXBlLnNlbGVjdD1mdW5jdGlvbih0LGUsbil7SGgoW3QsZSxuXSxcInNlbGVjdFwiKTtmb3IodmFyIHI9dGhpcy5yZWFkU3luYyh0LmRhdGFJZCksbz10aGlzLnJlYWRTeW5jKGUuZGF0YUlkKSxhPXRoaXMucmVhZFN5bmMobi5kYXRhSWQpLGk9R24oZS5zaGFwZSxEdChlLmR0eXBlLG4uZHR5cGUpKSxzPXRoaXMucmVhZFN5bmMoaS5kYXRhSWQpLHU9MCxjPTA9PT10LnJhbmt8fHQucmFuaz4xfHwxPT09ZS5yYW5rPzE6ayhlLnNoYXBlLnNsaWNlKDEpKSxsPTA7bDxyLmxlbmd0aDtsKyspZm9yKHZhciBoPTA7aDxjO2grKykxPT09cltsXT9zW3UrK109b1tsXTpzW3UrK109YVtsXTtyZXR1cm4gaX0sby5wcm90b3R5cGUud2hlcmU9ZnVuY3Rpb24odCl7SGgoW3RdLFwid2hlcmVcIik7dmFyIGU9dGhpcy5yZWFkU3luYyh0LmRhdGFJZCk7cmV0dXJuIG5hKHQuc2hhcGUsZSl9LG8ucHJvdG90eXBlLnRvcGs9ZnVuY3Rpb24odCxlLG4pe3JldHVybiBIaCh0LFwidG9wa1wiKSxlYSh0aGlzLnJlYWRTeW5jKHQuZGF0YUlkKSx0LnNoYXBlLHQuZHR5cGUsZSl9LG8ucHJvdG90eXBlLm1pbj1mdW5jdGlvbih0LGUpe0hoKHQsXCJtaW5cIiksQ24oXCJtaW5cIixlLHQucmFuayk7Zm9yKHZhciBuPWJuKHQuc2hhcGUsZSkscj1uWzBdLG89blsxXSxhPUduKHIsdC5kdHlwZSksaT1rKG8pLHM9dGhpcy5yZWFkU3luYyhhLmRhdGFJZCksdT10aGlzLnJlYWRTeW5jKHQuZGF0YUlkKSxjPTA7YzxzLmxlbmd0aDsrK2Mpe2Zvcih2YXIgbD1jKmksaD11W2xdLGY9MDtmPGk7KytmKXt2YXIgZD11W2wrZl07ZDxoJiYoaD1kKX1zW2NdPWh9cmV0dXJuIGF9LG8ucHJvdG90eXBlLm1pbmltdW09ZnVuY3Rpb24odCxlKXtyZXR1cm4gSGgoW3QsZV0sXCJtaW5pbXVtXCIpLHRoaXMuYnJvYWRjYXN0ZWRCaW5hcnlPcCh0LGUsdC5kdHlwZSwoZnVuY3Rpb24odCxlKXtyZXR1cm4gTWF0aC5taW4odCxlKX0pKX0sby5wcm90b3R5cGUubW9kPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIEhoKFt0LGVdLFwibW9kXCIpLHRoaXMuYnJvYWRjYXN0ZWRCaW5hcnlPcCh0LGUsdC5kdHlwZSwoZnVuY3Rpb24odCxlKXt2YXIgbj10JWU7cmV0dXJuIHQ8MCYmZTwwfHx0Pj0wJiZlPj0wP246KG4rZSklZX0pKX0sby5wcm90b3R5cGUubWF4PWZ1bmN0aW9uKHQsZSl7SGgodCxcIm1heFwiKSxDbihcIm1heFwiLGUsdC5yYW5rKTtmb3IodmFyIG49Ym4odC5zaGFwZSxlKSxyPW5bMF0sbz1uWzFdLGE9R24ocix0LmR0eXBlKSxpPWsobykscz10aGlzLnJlYWRTeW5jKGEuZGF0YUlkKSx1PXRoaXMucmVhZFN5bmModC5kYXRhSWQpLGM9MDtjPHMubGVuZ3RoOysrYyl7Zm9yKHZhciBsPWMqaSxoPXVbbF0sZj0wO2Y8aTsrK2Ype3ZhciBkPXVbbCtmXTtkPmgmJihoPWQpfXNbY109aH1yZXR1cm4gYX0sby5wcm90b3R5cGUubWF4aW11bT1mdW5jdGlvbih0LGUpe3JldHVybiBIaChbdCxlXSxcIm1heGltdW1cIiksdGhpcy5icm9hZGNhc3RlZEJpbmFyeU9wKHQsZSx0LmR0eXBlLChmdW5jdGlvbih0LGUpe3JldHVybiBNYXRoLm1heCh0LGUpfSkpfSxvLnByb3RvdHlwZS5hbGw9ZnVuY3Rpb24odCxlKXtIaCh0LFwiYWxsXCIpLENuKFwiYWxsXCIsZSx0LnJhbmspO2Zvcih2YXIgbj1ibih0LnNoYXBlLGUpLHI9blswXSxvPW5bMV0sYT1HbihyLHQuZHR5cGUpLGk9ayhvKSxzPXRoaXMucmVhZFN5bmMoYS5kYXRhSWQpLHU9dGhpcy5yZWFkU3luYyh0LmRhdGFJZCksYz0wO2M8cy5sZW5ndGg7KytjKXtmb3IodmFyIGw9YyppLGg9dVtsXSxmPTA7ZjxpOysrZil7dmFyIGQ9dVtsK2ZdO2g9aCYmZH1zW2NdPWh9cmV0dXJuIGF9LG8ucHJvdG90eXBlLmFueT1mdW5jdGlvbih0LGUpe0hoKHQsXCJhbnlcIiksQ24oXCJhbnlcIixlLHQucmFuayk7Zm9yKHZhciBuPWJuKHQuc2hhcGUsZSkscj1uWzBdLG89blsxXSxhPUduKHIsdC5kdHlwZSksaT1rKG8pLHM9dGhpcy5yZWFkU3luYyhhLmRhdGFJZCksdT10aGlzLnJlYWRTeW5jKHQuZGF0YUlkKSxjPTA7YzxzLmxlbmd0aDsrK2Mpe2Zvcih2YXIgbD1jKmksaD11W2xdLGY9MDtmPGk7KytmKXt2YXIgZD11W2wrZl07aD1ofHxkfXNbY109aH1yZXR1cm4gYX0sby5wcm90b3R5cGUuc3F1YXJlZERpZmZlcmVuY2U9ZnVuY3Rpb24odCxlKXtyZXR1cm4gSGgoW3QsZV0sXCJzcXVhcmVkRGlmZmVyZW5jZVwiKSx0aGlzLmJyb2FkY2FzdGVkQmluYXJ5T3AodCxlLHQuZHR5cGUsKGZ1bmN0aW9uKHQsZSl7dmFyIG49dC1lO3JldHVybiBuKm59KSl9LG8ucHJvdG90eXBlLmNlaWw9ZnVuY3Rpb24odCl7SGgodCxcImNlaWxcIik7Zm9yKHZhciBlPXRoaXMucmVhZFN5bmModC5kYXRhSWQpLG49bmV3IEZsb2F0MzJBcnJheShlLmxlbmd0aCkscj0wO3I8ZS5sZW5ndGg7KytyKW5bcl09TWF0aC5jZWlsKGVbcl0pO3JldHVybiB0aGlzLm1ha2VPdXRwdXQobix0LnNoYXBlLFwiZmxvYXQzMlwiKX0sby5wcm90b3R5cGUuZmxvb3I9ZnVuY3Rpb24odCl7SGgodCxcImZsb29yXCIpO2Zvcih2YXIgZT10aGlzLnJlYWRTeW5jKHQuZGF0YUlkKSxuPW5ldyBGbG9hdDMyQXJyYXkoZS5sZW5ndGgpLHI9MDtyPGUubGVuZ3RoOysrciluW3JdPU1hdGguZmxvb3IoZVtyXSk7cmV0dXJuIHRoaXMubWFrZU91dHB1dChuLHQuc2hhcGUsXCJmbG9hdDMyXCIpfSxvLnByb3RvdHlwZS5zaWduPWZ1bmN0aW9uKHQpe0hoKHQsXCJ4XCIpO2Zvcih2YXIgZT10aGlzLnJlYWRTeW5jKHQuZGF0YUlkKSxuPW5ldyBGbG9hdDMyQXJyYXkoZS5sZW5ndGgpLHI9MDtyPGUubGVuZ3RoOysrcillW3JdPDA/bltyXT0tMTplW3JdPjA/bltyXT0xOm5bcl09MDtyZXR1cm4gdGhpcy5tYWtlT3V0cHV0KG4sdC5zaGFwZSxcImZsb2F0MzJcIil9LG8ucHJvdG90eXBlLmlzTmFOPWZ1bmN0aW9uKHQpe0hoKHQsXCJ4XCIpO2Zvcih2YXIgZT10aGlzLnJlYWRTeW5jKHQuZGF0YUlkKSxuPW5ldyBVaW50OEFycmF5KGUubGVuZ3RoKSxyPTA7cjxlLmxlbmd0aDsrK3IpTnVtYmVyLmlzTmFOKGVbcl0pJiYobltyXT0xKTtyZXR1cm4gdGhpcy5tYWtlT3V0cHV0KG4sdC5zaGFwZSxcImJvb2xcIil9LG8ucHJvdG90eXBlLmlzSW5mPWZ1bmN0aW9uKHQpe0hoKHQsXCJ4XCIpO2Zvcih2YXIgZT10aGlzLnJlYWRTeW5jKHQuZGF0YUlkKSxuPW5ldyBVaW50OEFycmF5KGUubGVuZ3RoKSxyPTA7cjxlLmxlbmd0aDsrK3IpTWF0aC5hYnMoZVtyXSk9PT0xLzAmJihuW3JdPTEpO3JldHVybiB0aGlzLm1ha2VPdXRwdXQobix0LnNoYXBlLFwiYm9vbFwiKX0sby5wcm90b3R5cGUuaXNGaW5pdGU9ZnVuY3Rpb24odCl7SGgodCxcInhcIik7Zm9yKHZhciBlPXRoaXMucmVhZFN5bmModC5kYXRhSWQpLG49bmV3IFVpbnQ4QXJyYXkoZS5sZW5ndGgpLHI9MDtyPGUubGVuZ3RoOysrcilOdW1iZXIuaXNGaW5pdGUoZVtyXSkmJihuW3JdPTEpO3JldHVybiB0aGlzLm1ha2VPdXRwdXQobix0LnNoYXBlLFwiYm9vbFwiKX0sby5wcm90b3R5cGUucm91bmQ9ZnVuY3Rpb24odCl7SGgodCxcInJvdW5kXCIpO2Zvcih2YXIgZT10aGlzLnJlYWRTeW5jKHQuZGF0YUlkKSxuPW5ldyBGbG9hdDMyQXJyYXkoZS5sZW5ndGgpLHI9MDtyPGUubGVuZ3RoOysrcil7dmFyIG89TWF0aC5mbG9vcihlW3JdKTtlW3JdLW88LjU/bltyXT1NYXRoLmZsb29yKGVbcl0pOmVbcl0tbz4uNT9uW3JdPU1hdGguY2VpbChlW3JdKTpuW3JdPW8lMj09MD9vOm8rMX1yZXR1cm4gdGhpcy5tYWtlT3V0cHV0KG4sdC5zaGFwZSxcImZsb2F0MzJcIil9LG8ucHJvdG90eXBlLmV4cD1mdW5jdGlvbih0KXtIaCh0LFwiZXhwXCIpO2Zvcih2YXIgZT10aGlzLnJlYWRTeW5jKHQuZGF0YUlkKSxuPW5ldyBGbG9hdDMyQXJyYXkoZS5sZW5ndGgpLHI9MDtyPGUubGVuZ3RoOysrciluW3JdPU1hdGguZXhwKGVbcl0pO3JldHVybiB0aGlzLm1ha2VPdXRwdXQobix0LnNoYXBlLFwiZmxvYXQzMlwiKX0sby5wcm90b3R5cGUuZXhwbTE9ZnVuY3Rpb24odCl7SGgodCxcImV4cG0xXCIpO2Zvcih2YXIgZT10aGlzLnJlYWRTeW5jKHQuZGF0YUlkKSxuPW5ldyBGbG9hdDMyQXJyYXkoZS5sZW5ndGgpLHI9MDtyPGUubGVuZ3RoOysrciluW3JdPU1hdGguZXhwbTEoZVtyXSk7cmV0dXJuIHRoaXMubWFrZU91dHB1dChuLHQuc2hhcGUsXCJmbG9hdDMyXCIpfSxvLnByb3RvdHlwZS5sb2c9ZnVuY3Rpb24odCl7SGgodCxcImxvZ1wiKTtmb3IodmFyIGU9dGhpcy5yZWFkU3luYyh0LmRhdGFJZCksbj1uZXcgRmxvYXQzMkFycmF5KGUubGVuZ3RoKSxyPTA7cjxlLmxlbmd0aDsrK3Ipe3ZhciBvPWVbcl07bltyXT1NYXRoLmxvZyhvKX1yZXR1cm4gdGhpcy5tYWtlT3V0cHV0KG4sdC5zaGFwZSxcImZsb2F0MzJcIil9LG8ucHJvdG90eXBlLmxvZzFwPWZ1bmN0aW9uKHQpe0hoKHQsXCJsb2cxcFwiKTtmb3IodmFyIGU9dGhpcy5yZWFkU3luYyh0LmRhdGFJZCksbj1uZXcgRmxvYXQzMkFycmF5KGUubGVuZ3RoKSxyPTA7cjxlLmxlbmd0aDsrK3Ipe3ZhciBvPWVbcl07bltyXT1NYXRoLmxvZzFwKG8pfXJldHVybiB0aGlzLm1ha2VPdXRwdXQobix0LnNoYXBlLFwiZmxvYXQzMlwiKX0sby5wcm90b3R5cGUuc3FydD1mdW5jdGlvbih0KXtIaCh0LFwic3FydFwiKTtmb3IodmFyIGU9dGhpcy5yZWFkU3luYyh0LmRhdGFJZCksbj1uZXcgRmxvYXQzMkFycmF5KGUubGVuZ3RoKSxyPTA7cjxlLmxlbmd0aDsrK3Ipe3ZhciBvPWVbcl07bltyXT1NYXRoLnNxcnQobyl9cmV0dXJuIHRoaXMubWFrZU91dHB1dChuLHQuc2hhcGUsXCJmbG9hdDMyXCIpfSxvLnByb3RvdHlwZS5yc3FydD1mdW5jdGlvbih0KXtIaCh0LFwicnNxcnRcIik7Zm9yKHZhciBlPXRoaXMucmVhZFN5bmModC5kYXRhSWQpLG49bmV3IEZsb2F0MzJBcnJheShlLmxlbmd0aCkscj0wO3I8ZS5sZW5ndGg7KytyKXt2YXIgbz1lW3JdO25bcl09MS9NYXRoLnNxcnQobyl9cmV0dXJuIHRoaXMubWFrZU91dHB1dChuLHQuc2hhcGUsXCJmbG9hdDMyXCIpfSxvLnByb3RvdHlwZS5yZWNpcHJvY2FsPWZ1bmN0aW9uKHQpe0hoKHQsXCJyZWNpcHJvY2FsXCIpO2Zvcih2YXIgZT10aGlzLnJlYWRTeW5jKHQuZGF0YUlkKSxuPW5ldyBGbG9hdDMyQXJyYXkoZS5sZW5ndGgpLHI9MDtyPGUubGVuZ3RoOysrciluW3JdPTEvZVtyXTtyZXR1cm4gdGhpcy5tYWtlT3V0cHV0KG4sdC5zaGFwZSxcImZsb2F0MzJcIil9LG8ucHJvdG90eXBlLmxpbmVhcj1mdW5jdGlvbih0KXtyZXR1cm4gdH0sby5wcm90b3R5cGUucmVsdT1mdW5jdGlvbih0KXtIaCh0LFwicmVsdVwiKTtmb3IodmFyIGU9R24odC5zaGFwZSx0LmR0eXBlKSxuPXRoaXMucmVhZFN5bmMoZS5kYXRhSWQpLHI9dGhpcy5yZWFkU3luYyh0LmRhdGFJZCksbz0wO288ci5sZW5ndGg7KytvKW5bb109TWF0aC5tYXgoMCxyW29dKTtyZXR1cm4gZX0sby5wcm90b3R5cGUucmVsdTY9ZnVuY3Rpb24odCl7SGgodCxcInJlbHVcIik7Zm9yKHZhciBlPUduKHQuc2hhcGUsdC5kdHlwZSksbj10aGlzLnJlYWRTeW5jKGUuZGF0YUlkKSxyPXRoaXMucmVhZFN5bmModC5kYXRhSWQpLG89MDtvPHIubGVuZ3RoOysrbyluW29dPU1hdGgubWluKE1hdGgubWF4KDAscltvXSksNik7cmV0dXJuIGV9LG8ucHJvdG90eXBlLnByZWx1PWZ1bmN0aW9uKHQsZSl7cmV0dXJuIEhoKFt0LGVdLFwicHJlbHVcIiksdGhpcy5icm9hZGNhc3RlZEJpbmFyeU9wKHQsZSx0LmR0eXBlLChmdW5jdGlvbih0LGUpe3JldHVybiB0PDA/ZSp0OnR9KSl9LG8ucHJvdG90eXBlLmVsdT1mdW5jdGlvbih0KXtIaCh0LFwiZWx1XCIpO2Zvcih2YXIgZT1uZXcgRmxvYXQzMkFycmF5KHQuc2l6ZSksbj10aGlzLnJlYWRTeW5jKHQuZGF0YUlkKSxyPTA7cjxuLmxlbmd0aDsrK3Ipe3ZhciBvPW5bcl07ZVtyXT1vPj0wP286TWF0aC5leHAobyktMX1yZXR1cm4gdGhpcy5tYWtlT3V0cHV0KGUsdC5zaGFwZSxcImZsb2F0MzJcIil9LG8ucHJvdG90eXBlLmVsdURlcj1mdW5jdGlvbih0LGUpe0hoKFt0LGVdLFwiZWx1RGVyXCIpO2Zvcih2YXIgbj1uZXcgRmxvYXQzMkFycmF5KGUuc2l6ZSkscj10aGlzLnJlYWRTeW5jKGUuZGF0YUlkKSxvPXRoaXMucmVhZFN5bmModC5kYXRhSWQpLGE9MDthPHIubGVuZ3RoOysrYSl7dmFyIGk9clthXTtuW2FdPWk+PTE/b1thXTpvW2FdKihpKzEpfXJldHVybiB0aGlzLm1ha2VPdXRwdXQobixlLnNoYXBlLFwiZmxvYXQzMlwiKX0sby5wcm90b3R5cGUuc2VsdT1mdW5jdGlvbih0KXtIaCh0LFwic2VsdVwiKTtmb3IodmFyIGU9YnMsbj13cyxyPW5ldyBGbG9hdDMyQXJyYXkodC5zaXplKSxvPXRoaXMucmVhZFN5bmModC5kYXRhSWQpLGE9MDthPG8ubGVuZ3RoOysrYSl7dmFyIGk9b1thXTtyW2FdPWk+PTA/bippOmUqKE1hdGguZXhwKGkpLTEpfXJldHVybiB0aGlzLm1ha2VPdXRwdXQocix0LnNoYXBlLFwiZmxvYXQzMlwiKX0sby5wcm90b3R5cGUuY2xpcD1mdW5jdGlvbih0LGUsbil7SGgodCxcImNsaXBcIik7Zm9yKHZhciByPW5ldyBGbG9hdDMyQXJyYXkodC5zaXplKSxvPXRoaXMucmVhZFN5bmModC5kYXRhSWQpLGE9MDthPG8ubGVuZ3RoOysrYSl7dmFyIGk9b1thXTtyW2FdPWk+bj9uOmk8ZT9lOml9cmV0dXJuIHRoaXMubWFrZU91dHB1dChyLHQuc2hhcGUsXCJmbG9hdDMyXCIpfSxvLnByb3RvdHlwZS5hYnM9ZnVuY3Rpb24odCl7Zm9yKHZhciBlPW5ldyBGbG9hdDMyQXJyYXkodC5zaXplKSxuPXRoaXMucmVhZFN5bmModC5kYXRhSWQpLHI9MDtyPG4ubGVuZ3RoOysrcillW3JdPU1hdGguYWJzKG5bcl0pO3JldHVybiB0aGlzLm1ha2VPdXRwdXQoZSx0LnNoYXBlLFwiZmxvYXQzMlwiKX0sby5wcm90b3R5cGUuY29tcGxleEFicz1mdW5jdGlvbih0KXtmb3IodmFyIGU9bmV3IEZsb2F0MzJBcnJheSh0LnNpemUpLG49dGhpcy5yZWFkU3luYyh0LmRhdGFJZCkscj0wO3I8dC5zaXplOysrcil7dmFyIG89blsyKnJdLGE9blsyKnIrMV07ZVtyXT1NYXRoLmh5cG90KG8sYSl9cmV0dXJuIHRoaXMubWFrZU91dHB1dChlLHQuc2hhcGUsXCJmbG9hdDMyXCIpfSxvLnByb3RvdHlwZS5pbnQ9ZnVuY3Rpb24odCl7SGgodCxcImludFwiKTtmb3IodmFyIGU9bmV3IEludDMyQXJyYXkodC5zaXplKSxuPXRoaXMucmVhZFN5bmModC5kYXRhSWQpLHI9MDtyPG4ubGVuZ3RoOysrcillW3JdPW5bcl07cmV0dXJuIHRoaXMubWFrZU91dHB1dChlLHQuc2hhcGUsXCJpbnQzMlwiKX0sby5wcm90b3R5cGUuc2lnbW9pZD1mdW5jdGlvbih0KXtIaCh0LFwic2lnbW9pZFwiKTtmb3IodmFyIGU9bmV3IEZsb2F0MzJBcnJheSh0LnNpemUpLG49dGhpcy5yZWFkU3luYyh0LmRhdGFJZCkscj0wO3I8bi5sZW5ndGg7KytyKWVbcl09MS8oMStNYXRoLmV4cCgtbltyXSkpO3JldHVybiB0aGlzLm1ha2VPdXRwdXQoZSx0LnNoYXBlLFwiZmxvYXQzMlwiKX0sby5wcm90b3R5cGUuc29mdHBsdXM9ZnVuY3Rpb24odCl7SGgodCxcInNvZnRwbHVzXCIpO2Zvcih2YXIgZT1NYXRoLmxvZygxLjE5MjA5Mjg5NTUwNzgxMjVlLTcpKzIsbj1uZXcgRmxvYXQzMkFycmF5KHQuc2l6ZSkscj10aGlzLnJlYWRTeW5jKHQuZGF0YUlkKSxvPTA7bzxyLmxlbmd0aDsrK28pe3ZhciBhPXJbb10+LWUsaT1yW29dPGUscz1NYXRoLmV4cChyW29dKSx1PXZvaWQgMDt1PWk/czphP3Jbb106TWF0aC5sb2coMStzKSxuW29dPXV9cmV0dXJuIHRoaXMubWFrZU91dHB1dChuLHQuc2hhcGUsXCJmbG9hdDMyXCIpfSxvLnByb3RvdHlwZS5zaW49ZnVuY3Rpb24odCl7SGgodCxcInNpblwiKTtmb3IodmFyIGU9bmV3IEZsb2F0MzJBcnJheSh0LnNpemUpLG49dGhpcy5yZWFkU3luYyh0LmRhdGFJZCkscj0wO3I8bi5sZW5ndGg7KytyKWVbcl09TWF0aC5zaW4obltyXSk7cmV0dXJuIHRoaXMubWFrZU91dHB1dChlLHQuc2hhcGUsXCJmbG9hdDMyXCIpfSxvLnByb3RvdHlwZS5jb3M9ZnVuY3Rpb24odCl7SGgodCxcImNvc1wiKTtmb3IodmFyIGU9bmV3IEZsb2F0MzJBcnJheSh0LnNpemUpLG49dGhpcy5yZWFkU3luYyh0LmRhdGFJZCkscj0wO3I8bi5sZW5ndGg7KytyKWVbcl09TWF0aC5jb3MobltyXSk7cmV0dXJuIHRoaXMubWFrZU91dHB1dChlLHQuc2hhcGUsXCJmbG9hdDMyXCIpfSxvLnByb3RvdHlwZS50YW49ZnVuY3Rpb24odCl7SGgodCxcInRhblwiKTtmb3IodmFyIGU9bmV3IEZsb2F0MzJBcnJheSh0LnNpemUpLG49dGhpcy5yZWFkU3luYyh0LmRhdGFJZCkscj0wO3I8bi5sZW5ndGg7KytyKWVbcl09TWF0aC50YW4obltyXSk7cmV0dXJuIHRoaXMubWFrZU91dHB1dChlLHQuc2hhcGUsXCJmbG9hdDMyXCIpfSxvLnByb3RvdHlwZS5hc2luPWZ1bmN0aW9uKHQpe0hoKHQsXCJhc2luXCIpO2Zvcih2YXIgZT1uZXcgRmxvYXQzMkFycmF5KHQuc2l6ZSksbj10aGlzLnJlYWRTeW5jKHQuZGF0YUlkKSxyPTA7cjxuLmxlbmd0aDsrK3IpZVtyXT1NYXRoLmFzaW4obltyXSk7cmV0dXJuIHRoaXMubWFrZU91dHB1dChlLHQuc2hhcGUsXCJmbG9hdDMyXCIpfSxvLnByb3RvdHlwZS5hY29zPWZ1bmN0aW9uKHQpe0hoKHQsXCJhY29zXCIpO2Zvcih2YXIgZT1uZXcgRmxvYXQzMkFycmF5KHQuc2l6ZSksbj10aGlzLnJlYWRTeW5jKHQuZGF0YUlkKSxyPTA7cjxuLmxlbmd0aDsrK3IpZVtyXT1NYXRoLmFjb3MobltyXSk7cmV0dXJuIHRoaXMubWFrZU91dHB1dChlLHQuc2hhcGUsXCJmbG9hdDMyXCIpfSxvLnByb3RvdHlwZS5hdGFuPWZ1bmN0aW9uKHQpe0hoKHQsXCJhdGFuXCIpO2Zvcih2YXIgZT1uZXcgRmxvYXQzMkFycmF5KHQuc2l6ZSksbj10aGlzLnJlYWRTeW5jKHQuZGF0YUlkKSxyPTA7cjxuLmxlbmd0aDsrK3IpZVtyXT1NYXRoLmF0YW4obltyXSk7cmV0dXJuIHRoaXMubWFrZU91dHB1dChlLHQuc2hhcGUsXCJmbG9hdDMyXCIpfSxvLnByb3RvdHlwZS5hdGFuMj1mdW5jdGlvbih0LGUpe3JldHVybiBIaChbdCxlXSxcImF0YW4yXCIpLHRoaXMuYnJvYWRjYXN0ZWRCaW5hcnlPcCh0LGUsdC5kdHlwZSwoZnVuY3Rpb24odCxlKXtyZXR1cm4gTWF0aC5hdGFuMih0LGUpfSkpfSxvLnByb3RvdHlwZS5zaW5oPWZ1bmN0aW9uKHQpe0hoKHQsXCJzaW5oXCIpO2Zvcih2YXIgZT1uZXcgRmxvYXQzMkFycmF5KHQuc2l6ZSksbj10aGlzLnJlYWRTeW5jKHQuZGF0YUlkKSxyPTA7cjxuLmxlbmd0aDsrK3IpZVtyXT1NYXRoLnNpbmgobltyXSk7cmV0dXJuIHRoaXMubWFrZU91dHB1dChlLHQuc2hhcGUsXCJmbG9hdDMyXCIpfSxvLnByb3RvdHlwZS5jb3NoPWZ1bmN0aW9uKHQpe0hoKHQsXCJjb3NoXCIpO2Zvcih2YXIgZT1uZXcgRmxvYXQzMkFycmF5KHQuc2l6ZSksbj10aGlzLnJlYWRTeW5jKHQuZGF0YUlkKSxyPTA7cjxuLmxlbmd0aDsrK3IpZVtyXT1NYXRoLmNvc2gobltyXSk7cmV0dXJuIHRoaXMubWFrZU91dHB1dChlLHQuc2hhcGUsXCJmbG9hdDMyXCIpfSxvLnByb3RvdHlwZS50YW5oPWZ1bmN0aW9uKHQpe0hoKHQsXCJ0YW5oXCIpO2Zvcih2YXIgZT1uZXcgRmxvYXQzMkFycmF5KHQuc2l6ZSksbj10aGlzLnJlYWRTeW5jKHQuZGF0YUlkKSxyPTA7cjxuLmxlbmd0aDsrK3IpZVtyXT1EKG5bcl0pO3JldHVybiB0aGlzLm1ha2VPdXRwdXQoZSx0LnNoYXBlLFwiZmxvYXQzMlwiKX0sby5wcm90b3R5cGUuYXNpbmg9ZnVuY3Rpb24odCl7SGgodCxcImFzaW5oXCIpO2Zvcih2YXIgZT1uZXcgRmxvYXQzMkFycmF5KHQuc2l6ZSksbj10aGlzLnJlYWRTeW5jKHQuZGF0YUlkKSxyPTA7cjxuLmxlbmd0aDsrK3IpZVtyXT1NYXRoLmFzaW5oKG5bcl0pO3JldHVybiB0aGlzLm1ha2VPdXRwdXQoZSx0LnNoYXBlLFwiZmxvYXQzMlwiKX0sby5wcm90b3R5cGUuYWNvc2g9ZnVuY3Rpb24odCl7SGgodCxcImFjb3NoXCIpO2Zvcih2YXIgZT1uZXcgRmxvYXQzMkFycmF5KHQuc2l6ZSksbj10aGlzLnJlYWRTeW5jKHQuZGF0YUlkKSxyPTA7cjxuLmxlbmd0aDsrK3IpZVtyXT1NYXRoLmFjb3NoKG5bcl0pO3JldHVybiB0aGlzLm1ha2VPdXRwdXQoZSx0LnNoYXBlLFwiZmxvYXQzMlwiKX0sby5wcm90b3R5cGUuYXRhbmg9ZnVuY3Rpb24odCl7SGgodCxcImF0YW5oXCIpO2Zvcih2YXIgZT1uZXcgRmxvYXQzMkFycmF5KHQuc2l6ZSksbj10aGlzLnJlYWRTeW5jKHQuZGF0YUlkKSxyPTA7cjxuLmxlbmd0aDsrK3IpZVtyXT1NYXRoLmF0YW5oKG5bcl0pO3JldHVybiB0aGlzLm1ha2VPdXRwdXQoZSx0LnNoYXBlLFwiZmxvYXQzMlwiKX0sby5wcm90b3R5cGUuZXJmPWZ1bmN0aW9uKHQpe0hoKHQsXCJlcmZcIik7Zm9yKHZhciBlPW5ldyBGbG9hdDMyQXJyYXkodC5zaXplKSxuPXRoaXMucmVhZFN5bmModC5kYXRhSWQpLHI9MDtyPG4ubGVuZ3RoOysrcil7dmFyIG89TWF0aC5zaWduKG5bcl0pLGE9TWF0aC5hYnMobltyXSksaT0xLygxKy4zMjc1OTExKmEpO2Vbcl09byooMS0oKCgoMS4wNjE0MDU0MjkqaS0xLjQ1MzE1MjAyNykqaSsxLjQyMTQxMzc0MSkqaS0uMjg0NDk2NzM2KSppKy4yNTQ4Mjk1OTIpKmkqTWF0aC5leHAoLWEqYSkpfXJldHVybiB0aGlzLm1ha2VPdXRwdXQoZSx0LnNoYXBlLFwiZmxvYXQzMlwiKX0sby5wcm90b3R5cGUuc3RlcD1mdW5jdGlvbih0LGUpe3ZvaWQgMD09PWUmJihlPTApLEhoKHQsXCJzdGVwXCIpO2Zvcih2YXIgbj1uZXcgRmxvYXQzMkFycmF5KHQuc2l6ZSkscj10aGlzLnJlYWRTeW5jKHQuZGF0YUlkKSxvPTA7bzxyLmxlbmd0aDsrK28pe3ZhciBhPXJbb107aXNOYU4oYSk/bltvXT1OYU46bltvXT1hPjA/MTplfXJldHVybiB0aGlzLm1ha2VPdXRwdXQobix0LnNoYXBlLFwiZmxvYXQzMlwiKX0sby5wcm90b3R5cGUuZnVzZWRDb252MmQ9ZnVuY3Rpb24odCl7dmFyIGU9dC5pbnB1dCxuPXQuZmlsdGVyLHI9dC5jb252SW5mbyxvPXQuYmlhcyxhPXQuYWN0aXZhdGlvbixpPXQucHJlbHVBY3RpdmF0aW9uV2VpZ2h0cyxzPXRoaXMuY29udjJkKGUsbixyKTtyZXR1cm4gbyYmKHM9dGhpcy5hZGQocyxvKSksYSYmKHM9cWgodGhpcyxzLGEsaSkpLHN9LG8ucHJvdG90eXBlLmNvbnYyZD1mdW5jdGlvbih0LGUsbil7SGgoW3QsZV0sXCJjb252MmRcIik7Zm9yKHZhciByPW4uZmlsdGVySGVpZ2h0LG89bi5maWx0ZXJXaWR0aCxhPW4uZGlsYXRpb25IZWlnaHQsaT1uLmRpbGF0aW9uV2lkdGgscz1uLnBhZEluZm8ubGVmdCx1PW4ucGFkSW5mby50b3AsYz1cImNoYW5uZWxzTGFzdFwiPT09bi5kYXRhRm9ybWF0LGw9ZHIobi5vdXRTaGFwZSx0LmR0eXBlKSxoPXQuc3RyaWRlc1swXSxmPWM/dC5zdHJpZGVzWzFdOnQuc3RyaWRlc1syXSxkPWM/dC5zdHJpZGVzWzJdOjEscD1jPzE6dC5zdHJpZGVzWzFdLHY9bC5zdHJpZGVzWzBdLG09Yz9sLnN0cmlkZXNbMV06bC5zdHJpZGVzWzJdLGc9Yz9sLnN0cmlkZXNbMl06MSx5PWM/MTpsLnN0cmlkZXNbMV0seD10aGlzLnJlYWRTeW5jKHQuZGF0YUlkKSxiPXRoaXMucmVhZFN5bmMoZS5kYXRhSWQpLHc9bC52YWx1ZXMsQz0wO0M8bi5iYXRjaFNpemU7KytDKWZvcih2YXIgRT1DKmgsUj1DKnYsST0wO0k8bi5vdXRIZWlnaHQ7KytJKWZvcih2YXIgaz1SK0kqbSxTPUkqbi5zdHJpZGVIZWlnaHQtdSxBPTA7QTxyO0ErKyl7dmFyIEQ9UytBKmE7aWYoIShEPDB8fEQ+PW4uaW5IZWlnaHQpKWZvcih2YXIgVD1BKmUuc3RyaWRlc1swXSxOPUUrRCpmLEY9MDtGPG4ub3V0V2lkdGg7KytGKWZvcih2YXIgXz1rK0YqZyxPPUYqbi5zdHJpZGVXaWR0aC1zLE09MDtNPG87TSsrKXt2YXIgQj1PK00qaTtpZighKEI8MHx8Qj49bi5pbldpZHRoKSlmb3IodmFyIFA9TitCKmQsTD1UK00qZS5zdHJpZGVzWzFdLFc9MDtXPG4uaW5DaGFubmVsczsrK1cpe2Zvcih2YXIgVT14W1ArVypwXSxWPTA7VjxuLm91dENoYW5uZWxzOysrVil3W18rVip5XSs9VSpiW0wrVl07TCs9bi5vdXRDaGFubmVsc319fXJldHVybiBsLnRvVGVuc29yKCl9LG8ucHJvdG90eXBlLmNvbnYzZD1mdW5jdGlvbih0LGUsbil7Zm9yKHZhciByPW4uZmlsdGVyRGVwdGgsbz1uLmZpbHRlckhlaWdodCxhPW4uZmlsdGVyV2lkdGgsaT1uLmRpbGF0aW9uRGVwdGgscz1uLmRpbGF0aW9uSGVpZ2h0LHU9bi5kaWxhdGlvbldpZHRoLGM9bi5wYWRJbmZvLmZyb250LGw9bi5wYWRJbmZvLmxlZnQsaD1uLnBhZEluZm8udG9wLGY9ZHIobi5vdXRTaGFwZSx0LmR0eXBlKSxkPXRoaXMucmVhZFN5bmModC5kYXRhSWQpLHA9dGhpcy5yZWFkU3luYyhlLmRhdGFJZCksdj1mLnZhbHVlcyxtPTA7bTxuLmJhdGNoU2l6ZTsrK20pZm9yKHZhciBnPW0qdC5zdHJpZGVzWzBdLHk9bSpmLnN0cmlkZXNbMF0seD0wO3g8bi5vdXREZXB0aDsrK3gpZm9yKHZhciBiPXkreCpmLnN0cmlkZXNbMV0sdz14Km4uc3RyaWRlRGVwdGgtYyxDPTA7QzxyO0MrKyl7dmFyIEU9dytDKmk7aWYoIShFPDB8fEU+PW4uaW5EZXB0aCkpZm9yKHZhciBSPUMqZS5zdHJpZGVzWzBdLEk9ZytFKnQuc3RyaWRlc1sxXSxrPTA7azxuLm91dEhlaWdodDsrK2spZm9yKHZhciBTPWIraypmLnN0cmlkZXNbMl0sQT1rKm4uc3RyaWRlSGVpZ2h0LWgsRD0wO0Q8bztEKyspe3ZhciBUPUErRCpzO2lmKCEoVDwwfHxUPj1uLmluSGVpZ2h0KSlmb3IodmFyIE49UitEKmUuc3RyaWRlc1sxXSxGPUkrVCp0LnN0cmlkZXNbMl0sXz0wO188bi5vdXRXaWR0aDsrK18pZm9yKHZhciBPPVMrXypuLm91dENoYW5uZWxzLE09XypuLnN0cmlkZVdpZHRoLWwsQj0wO0I8YTtCKyspe3ZhciBQPU0rQip1O2lmKCEoUDwwfHxQPj1uLmluV2lkdGgpKWZvcih2YXIgTD1OK0IqZS5zdHJpZGVzWzJdLFc9RitQKm4uaW5DaGFubmVscyxVPUwsVj0wO1Y8bi5pbkNoYW5uZWxzOysrVil7Zm9yKHZhciB6PWRbVytWXSxHPTA7RzxuLm91dENoYW5uZWxzOysrRyl2W08rR10rPXoqcFtVK0ddO1UrPW4ub3V0Q2hhbm5lbHN9fX19cmV0dXJuIGYudG9UZW5zb3IoKX0sby5wcm90b3R5cGUuY29udjJkRGVySW5wdXQ9ZnVuY3Rpb24odCxlLG4pe0hoKFt0LGVdLFwiY29udjJkRGVySW5wdXRcIik7Zm9yKHZhciByPWRyKG4uaW5TaGFwZSxcImZsb2F0MzJcIiksbz1yLnZhbHVlcyxhPXRoaXMucmVhZFN5bmModC5kYXRhSWQpLGk9dGhpcy5yZWFkU3luYyhlLmRhdGFJZCkscz1lLnN0cmlkZXMsdT1zWzBdLGM9c1sxXSxsPXNbMl0saD1uLmJhdGNoU2l6ZSxmPW4uZmlsdGVySGVpZ2h0LGQ9bi5maWx0ZXJXaWR0aCxwPW4uaW5DaGFubmVscyx2PW4uaW5IZWlnaHQsbT1uLmluV2lkdGgsZz1uLm91dENoYW5uZWxzLHk9bi5vdXRIZWlnaHQseD1uLm91dFdpZHRoLGI9bi5zdHJpZGVIZWlnaHQsdz1uLnN0cmlkZVdpZHRoLEM9bi5kYXRhRm9ybWF0LEU9Zi0xLW4ucGFkSW5mby50b3AsUj1kLTEtbi5wYWRJbmZvLmxlZnQsST1cImNoYW5uZWxzTGFzdFwiPT09QyxrPXIuc3RyaWRlc1swXSxTPUk/ci5zdHJpZGVzWzFdOnIuc3RyaWRlc1syXSxBPUk/ci5zdHJpZGVzWzJdOjEsRD1JPzE6ci5zdHJpZGVzWzFdLFQ9dC5zdHJpZGVzWzBdLE49ST90LnN0cmlkZXNbMV06dC5zdHJpZGVzWzJdLEY9ST90LnN0cmlkZXNbMl06MSxfPUk/MTp0LnN0cmlkZXNbMV0sTz0wO088aDsrK08pZm9yKHZhciBNPTA7TTxwOysrTSlmb3IodmFyIEI9MDtCPHY7KytCKWZvcih2YXIgUD1CLUUsTD1NYXRoLm1heCgwLE1hdGguY2VpbChQL2IpKSxXPU1hdGgubWluKHksKGYrUCkvYiksVT0wO1U8bTsrK1Upe2Zvcih2YXIgVj1VLVIsej1NYXRoLm1heCgwLE1hdGguY2VpbChWL3cpKSxHPU1hdGgubWluKHgsKGQrVikvdyksSD0wLHE9TDtxPFc7KytxKWZvcih2YXIgSz1xKmItUCxqPXo7ajxHOysrailmb3IodmFyIFg9VCpPK04qcStGKmosWT11KihmLTEtSykrYyooZC0xLShqKnctVikpK2wqTSwkPTA7JDxnOysrJCl7SCs9YVtYK18qJF0qaVtZKyRdfW9baypPK1MqQitBKlUrRCpNXT1IfXJldHVybiByLnRvVGVuc29yKCl9LG8ucHJvdG90eXBlLmNvbnYzZERlcklucHV0PWZ1bmN0aW9uKHQsZSxuKXtmb3IodmFyIHI9ZHIobi5pblNoYXBlLFwiZmxvYXQzMlwiKSxvPXIudmFsdWVzLGE9ci5zdHJpZGVzLGk9YVswXSxzPWFbMV0sdT1hWzJdLGM9YVszXSxsPXRoaXMucmVhZFN5bmModC5kYXRhSWQpLGg9dC5zdHJpZGVzLGY9aFswXSxkPWhbMV0scD1oWzJdLHY9aFszXSxtPXRoaXMucmVhZFN5bmMoZS5kYXRhSWQpLGc9ZS5zdHJpZGVzLHk9Z1swXSx4PWdbMV0sYj1nWzJdLHc9Z1szXSxDPW4uYmF0Y2hTaXplLEU9bi5maWx0ZXJEZXB0aCxSPW4uZmlsdGVySGVpZ2h0LEk9bi5maWx0ZXJXaWR0aCxrPW4uaW5DaGFubmVscyxTPW4uaW5EZXB0aCxBPW4uaW5IZWlnaHQsRD1uLmluV2lkdGgsVD1uLm91dENoYW5uZWxzLE49bi5vdXREZXB0aCxGPW4ub3V0SGVpZ2h0LF89bi5vdXRXaWR0aCxPPW4uc3RyaWRlRGVwdGgsTT1uLnN0cmlkZUhlaWdodCxCPW4uc3RyaWRlV2lkdGgsUD1FLTEtbi5wYWRJbmZvLmZyb250LEw9Ui0xLW4ucGFkSW5mby50b3AsVz1JLTEtbi5wYWRJbmZvLmxlZnQsVT0wO1U8QzsrK1UpZm9yKHZhciBWPTA7VjxrOysrVilmb3IodmFyIHo9MDt6PFM7Kyt6KWZvcih2YXIgRz16LVAsSD1NYXRoLm1heCgwLE1hdGguY2VpbChHL08pKSxxPU1hdGgubWluKE4sKEUrRykvTyksSz0wO0s8QTsrK0spZm9yKHZhciBqPUstTCxYPU1hdGgubWF4KDAsTWF0aC5jZWlsKGovTSkpLFk9TWF0aC5taW4oRiwoUitqKS9NKSwkPTA7JDxEOysrJCl7Zm9yKHZhciBRPSQtVyxKPU1hdGgubWF4KDAsTWF0aC5jZWlsKFEvQikpLFo9TWF0aC5taW4oXywoSStRKS9CKSx0dD0wLGV0PUg7ZXQ8cTsrK2V0KWZvcih2YXIgbnQ9ZXQqTy1HLHJ0PVg7cnQ8WTsrK3J0KWZvcih2YXIgb3Q9cnQqTS1qLGF0PUo7YXQ8WjsrK2F0KWZvcih2YXIgaXQ9ZipVK2QqZXQrcCpydCt2KmF0LHN0PXkqKEUtMS1udCkreCooUi0xLW90KStiKihJLTEtKGF0KkItUSkpK3cqVix1dD0wO3V0PFQ7Kyt1dCl7dHQrPWxbaXQrdXRdKm1bc3QrdXRdfW9baSpVK3Mqeit1KksrYyokK1ZdPXR0fXJldHVybiByLnRvVGVuc29yKCl9LG8ucHJvdG90eXBlLmNvbnYyZERlckZpbHRlcj1mdW5jdGlvbih0LGUsbil7SGgoW3QsZV0sXCJjb252MmREZXJGaWx0ZXJcIik7Zm9yKHZhciByPW4uc3RyaWRlSGVpZ2h0LG89bi5zdHJpZGVXaWR0aCxhPW4uZmlsdGVySGVpZ2h0LGk9bi5maWx0ZXJXaWR0aCxzPVwiY2hhbm5lbHNMYXN0XCI9PT1uLmRhdGFGb3JtYXQsdT1kcihuLmZpbHRlclNoYXBlLFwiZmxvYXQzMlwiKSxjPW4ucGFkSW5mby5sZWZ0LGw9bi5wYWRJbmZvLnRvcCxoPXRoaXMuYnVmZmVyU3luYyh0KSxmPXRoaXMuYnVmZmVyU3luYyhlKSxkPTA7ZDxhOysrZClmb3IodmFyIHA9TWF0aC5tYXgoMCxNYXRoLmNlaWwoKGwtZCkvcikpLHY9TWF0aC5taW4obi5vdXRIZWlnaHQsKG4uaW5IZWlnaHQrbC1kKS9yKSxtPTA7bTxpOysrbSlmb3IodmFyIGc9TWF0aC5tYXgoMCxNYXRoLmNlaWwoKGMtbSkvbykpLHk9TWF0aC5taW4obi5vdXRXaWR0aCwobi5pbldpZHRoK2MtbSkvbykseD0wO3g8bi5pbkNoYW5uZWxzOysreClmb3IodmFyIGI9MDtiPG4ub3V0Q2hhbm5lbHM7KytiKXtmb3IodmFyIHc9MCxDPTA7QzxuLmJhdGNoU2l6ZTsrK0MpZm9yKHZhciBFPXA7RTx2OysrRSlmb3IodmFyIFI9ZCtFKnItbCxJPWc7STx5OysrSSl7dmFyIGs9bStJKm8tYzt3Kz1zP2guZ2V0KEMsUixrLHgpKmYuZ2V0KEMsRSxJLGIpOmguZ2V0KEMseCxSLGspKmYuZ2V0KEMsYixFLEkpfXUuc2V0KHcsZCxtLHgsYil9cmV0dXJuIHUudG9UZW5zb3IoKX0sby5wcm90b3R5cGUuY29udjNkRGVyRmlsdGVyPWZ1bmN0aW9uKHQsZSxuKXtmb3IodmFyIHI9bi5zdHJpZGVEZXB0aCxvPW4uc3RyaWRlSGVpZ2h0LGE9bi5zdHJpZGVXaWR0aCxpPW4uZmlsdGVyRGVwdGgscz1uLmZpbHRlckhlaWdodCx1PW4uZmlsdGVyV2lkdGgsYz1kcihuLmZpbHRlclNoYXBlLFwiZmxvYXQzMlwiKSxsPWMudmFsdWVzLGg9Yy5zdHJpZGVzLGY9aFswXSxkPWhbMV0scD1oWzJdLHY9aFszXSxtPXRoaXMucmVhZFN5bmMoZS5kYXRhSWQpLGc9ZS5zdHJpZGVzLHk9Z1swXSx4PWdbMV0sYj1nWzJdLHc9Z1szXSxDPXRoaXMucmVhZFN5bmModC5kYXRhSWQpLEU9dC5zdHJpZGVzLFI9RVswXSxJPUVbMV0saz1FWzJdLFM9RVszXSxBPW4ucGFkSW5mby5mcm9udCxEPW4ucGFkSW5mby5sZWZ0LFQ9bi5wYWRJbmZvLnRvcCxOPTA7TjxpOysrTilmb3IodmFyIEY9TWF0aC5tYXgoMCxNYXRoLmNlaWwoKEEtTikvcikpLF89TWF0aC5taW4obi5vdXREZXB0aCwobi5pbkRlcHRoK0EtTikvciksTz1OKmYsTT0wO008czsrK00pZm9yKHZhciBCPU1hdGgubWF4KDAsTWF0aC5jZWlsKChULU0pL28pKSxQPU1hdGgubWluKG4ub3V0SGVpZ2h0LChuLmluSGVpZ2h0K1QtTSkvbyksTD1NKmQrTyxXPTA7Vzx1OysrVylmb3IodmFyIFU9TWF0aC5tYXgoMCxNYXRoLmNlaWwoKEQtVykvYSkpLFY9TWF0aC5taW4obi5vdXRXaWR0aCwobi5pbldpZHRoK0QtVykvYSksej1XKnArTCxHPTA7RzxuLmluQ2hhbm5lbHM7KytHKWZvcih2YXIgSD1HKnYreixxPTA7cTxuLm91dENoYW5uZWxzOysrcSl7Zm9yKHZhciBLPTAsaj0wO2o8bi5iYXRjaFNpemU7KytqKWZvcih2YXIgWD1qKlIsWT1qKnksJD1GOyQ8XzsrKyQpZm9yKHZhciBRPShOKyQqci1BKSpJK1gsSj0kKngrWSxaPUI7WjxQOysrWilmb3IodmFyIHR0PShNK1oqby1UKSprK1EsZXQ9WipiK0osbnQ9VTtudDxWOysrbnQpe3ZhciBydD1udCp3K2V0O0srPUNbKFcrbnQqYS1EKSpTK3R0K0ddKm1bcnQrcV19bFtIK3FdPUt9cmV0dXJuIGMudG9UZW5zb3IoKX0sby5wcm90b3R5cGUuZnVzZWREZXB0aHdpc2VDb252MkQ9ZnVuY3Rpb24odCl7dmFyIGU9dC5pbnB1dCxuPXQuZmlsdGVyLHI9dC5jb252SW5mbyxvPXQuYmlhcyxhPXQuYWN0aXZhdGlvbixpPXQucHJlbHVBY3RpdmF0aW9uV2VpZ2h0cyxzPXRoaXMuZGVwdGh3aXNlQ29udjJEKGUsbixyKTtyZXR1cm4gbyYmKHM9dGhpcy5hZGQocyxvKSksYSYmKHM9cWgodGhpcyxzLGEsaSkpLHN9LG8ucHJvdG90eXBlLmRlcHRod2lzZUNvbnYyRD1mdW5jdGlvbih0LGUsbil7SGgoW3QsZV0sXCJkZXB0aHdpc2VDb252MkRcIik7Zm9yKHZhciByPW4uZmlsdGVySGVpZ2h0LG89bi5maWx0ZXJXaWR0aCxhPW4uZGlsYXRpb25IZWlnaHQsaT1uLmRpbGF0aW9uV2lkdGgscz1uLnBhZEluZm8ubGVmdCx1PW4ucGFkSW5mby50b3AsYz1uLm91dENoYW5uZWxzL24uaW5DaGFubmVscyxsPWRyKG4ub3V0U2hhcGUsdC5kdHlwZSksaD10aGlzLnJlYWRTeW5jKHQuZGF0YUlkKSxmPXRoaXMucmVhZFN5bmMoZS5kYXRhSWQpLGQ9bC52YWx1ZXMscD0wO3A8bi5iYXRjaFNpemU7KytwKWZvcih2YXIgdj1wKnQuc3RyaWRlc1swXSxtPXAqbC5zdHJpZGVzWzBdLGc9MDtnPG4ub3V0SGVpZ2h0OysrZylmb3IodmFyIHk9bStnKmwuc3RyaWRlc1sxXSx4PWcqbi5zdHJpZGVIZWlnaHQtcyxiPTA7YjxyOysrYil7dmFyIHc9eCtiKmE7aWYoISh3PDB8fHc+PW4uaW5IZWlnaHQpKWZvcih2YXIgQz1iKmUuc3RyaWRlc1swXSxFPXYrdyp0LnN0cmlkZXNbMV0sUj0wO1I8bi5vdXRXaWR0aDsrK1IpZm9yKHZhciBJPXkrUipsLnN0cmlkZXNbMl0saz1SKm4uc3RyaWRlV2lkdGgtdSxTPTA7UzxvOysrUyl7dmFyIEE9aytTKmk7aWYoIShBPDB8fEE+PW4uaW5XaWR0aCkpZm9yKHZhciBEPUMrUyplLnN0cmlkZXNbMV0sVD1FK0Eqbi5pbkNoYW5uZWxzLE49SSxGPUQsXz0wO188bi5pbkNoYW5uZWxzOysrXyl7Zm9yKHZhciBPPWhbVCtfXSxNPTA7TTxjOysrTSlkW04rTV0rPU8qZltGK01dO04rPWMsRis9Y319fXJldHVybiBsLnRvVGVuc29yKCl9LG8ucHJvdG90eXBlLmRlcHRod2lzZUNvbnYyRERlcklucHV0PWZ1bmN0aW9uKHQsZSxuKXtIaChbdCxlXSxcImRlcHRod2lzZUNvbnYyRERlcklucHV0XCIpO2Zvcih2YXIgcj1kcihuLmluU2hhcGUsXCJmbG9hdDMyXCIpLG89ci52YWx1ZXMsYT1yLnN0cmlkZXMsaT1hWzBdLHM9YVsxXSx1PWFbMl0sYz10aGlzLnJlYWRTeW5jKHQuZGF0YUlkKSxsPXQuc3RyaWRlcyxoPWxbMF0sZj1sWzFdLGQ9bFsyXSxwPXRoaXMucmVhZFN5bmMoZS5kYXRhSWQpLHY9ZS5zdHJpZGVzLG09dlswXSxnPXZbMV0seT12WzJdLHg9bi5iYXRjaFNpemUsYj1uLmZpbHRlckhlaWdodCx3PW4uZmlsdGVyV2lkdGgsQz1uLmluQ2hhbm5lbHMsRT1uLmluSGVpZ2h0LFI9bi5pbldpZHRoLEk9bi5vdXRDaGFubmVscyxrPW4ub3V0SGVpZ2h0LFM9bi5vdXRXaWR0aCxBPW4uc3RyaWRlSGVpZ2h0LEQ9bi5zdHJpZGVXaWR0aCxUPWItMS1uLnBhZEluZm8udG9wLE49dy0xLW4ucGFkSW5mby5sZWZ0LEY9SS9DLF89MDtfPHg7KytfKWZvcih2YXIgTz0wO088QzsrK08pZm9yKHZhciBNPTA7TTxFOysrTSlmb3IodmFyIEI9TS1ULFA9TWF0aC5tYXgoMCxNYXRoLmNlaWwoQi9BKSksTD1NYXRoLm1pbihrLChiK0IpL0EpLFc9MDtXPFI7KytXKXtmb3IodmFyIFU9Vy1OLFY9TWF0aC5tYXgoMCxNYXRoLmNlaWwoVS9EKSksej1NYXRoLm1pbihTLCh3K1UpL0QpLEc9MCxIPVA7SDxMOysrSClmb3IodmFyIHE9SCpBLUIsSz1WO0s8ejsrK0spZm9yKHZhciBqPWgqXytmKkgrZCpLLFg9bSooYi0xLXEpK2cqKHctMS0oSypELVUpKSt5Kk8sWT0wO1k8RjsrK1kpe0crPWNbaisoTypGK1kpXSpwW1grWV19b1tpKl8rcypNK3UqVytPXT1HfXJldHVybiByLnRvVGVuc29yKCl9LG8ucHJvdG90eXBlLmRlcHRod2lzZUNvbnYyRERlckZpbHRlcj1mdW5jdGlvbih0LGUsbil7SGgoW3QsZV0sXCJkZXB0aHdpc2VDb252MkREZXJGaWx0ZXJcIik7Zm9yKHZhciByPW4uc3RyaWRlSGVpZ2h0LG89bi5zdHJpZGVXaWR0aCxhPW4uZmlsdGVySGVpZ2h0LGk9bi5maWx0ZXJXaWR0aCxzPWRyKG4uZmlsdGVyU2hhcGUsXCJmbG9hdDMyXCIpLHU9bi5wYWRJbmZvLmxlZnQsYz1uLnBhZEluZm8udG9wLGw9bi5vdXRDaGFubmVscy9uLmluQ2hhbm5lbHMsaD10aGlzLmJ1ZmZlclN5bmModCksZj10aGlzLmJ1ZmZlclN5bmMoZSksZD0wO2Q8YTsrK2QpZm9yKHZhciBwPU1hdGgubWF4KDAsTWF0aC5jZWlsKChjLWQpL3IpKSx2PU1hdGgubWluKG4ub3V0SGVpZ2h0LChuLmluSGVpZ2h0K2MtZCkvciksbT0wO208aTsrK20pZm9yKHZhciBnPU1hdGgubWF4KDAsTWF0aC5jZWlsKCh1LW0pL28pKSx5PU1hdGgubWluKG4ub3V0V2lkdGgsKG4uaW5XaWR0aCt1LW0pL28pLHg9MDt4PG4ub3V0Q2hhbm5lbHM7Kyt4KXtmb3IodmFyIGI9TWF0aC50cnVuYyh4L2wpLHc9eCVsLEM9MCxFPTA7RTxuLmJhdGNoU2l6ZTsrK0UpZm9yKHZhciBSPXA7Ujx2OysrUilmb3IodmFyIEk9ZCtSKnItYyxrPWc7azx5Oysrayl7dmFyIFM9bStrKm8tdTtDKz1oLmdldChFLEksUyxiKSpmLmdldChFLFIsayx4KX1zLnNldChDLGQsbSxiLHcpfXJldHVybiBzLnRvVGVuc29yKCl9LG8ucHJvdG90eXBlLnRpbGU9ZnVuY3Rpb24odCxlKXtyZXR1cm4gSGgodCxcInRpbGVcIiksdGEodGhpcy5idWZmZXJTeW5jKHQpLGUpfSxvLnByb3RvdHlwZS5wYWQ9ZnVuY3Rpb24odCxlLG4pe0hoKHQsXCJwYWRcIik7dmFyIHI9ZS5tYXAoKGZ1bmN0aW9uKGUsbil7cmV0dXJuIGVbMF0rdC5zaGFwZVtuXStlWzFdfSkpLG89ZS5tYXAoKGZ1bmN0aW9uKHQpe3JldHVybiB0WzBdfSkpLGE9dGhpcy5idWZmZXJTeW5jKHQpLGk9ZHIocix0LmR0eXBlKTswIT09biYmaS52YWx1ZXMuZmlsbChuKTtmb3IodmFyIHM9MDtzPHQuc2l6ZTtzKyspe3ZhciB1PWEuaW5kZXhUb0xvYyhzKSxjPXUubWFwKChmdW5jdGlvbih0LGUpe3JldHVybiB0K29bZV19KSk7aS5zZXQuYXBwbHkoaSxbYS5nZXQuYXBwbHkoYSx1KV0uY29uY2F0KGMpKX1yZXR1cm4gaS50b1RlbnNvcigpfSxvLnByb3RvdHlwZS50cmFuc3Bvc2U9ZnVuY3Rpb24odCxlKXtIaCh0LFwidHJhbnNwb3NlXCIpO2Zvcih2YXIgbj1uZXcgQXJyYXkodC5yYW5rKSxyPTA7cjxuLmxlbmd0aDtyKyspbltyXT10LnNoYXBlW2Vbcl1dO3ZhciBvPXRoaXMucmVhZFN5bmModC5kYXRhSWQpLGE9ZHIobix0LmR0eXBlKSxpPXRoaXMuYnVmZmVyU3luYyh0KTtmb3Iocj0wO3I8dC5zaXplOysrcil7Zm9yKHZhciBzPWkuaW5kZXhUb0xvYyhyKSx1PW5ldyBBcnJheShzLmxlbmd0aCksYz0wO2M8dS5sZW5ndGg7YysrKXVbY109c1tlW2NdXTt2YXIgbD1hLmxvY1RvSW5kZXgodSk7YS52YWx1ZXNbbF09b1tyXX1yZXR1cm4gYS50b1RlbnNvcigpfSxvLnByb3RvdHlwZS5nYXRoZXI9ZnVuY3Rpb24odCxlLG4pe0hoKFt0LGVdLFwiZ2F0aGVyXCIpO3ZhciByPXQuc2hhcGUuc2xpY2UoKSxvPXRoaXMucmVhZFN5bmMoZS5kYXRhSWQpO3Jbbl09by5sZW5ndGg7Zm9yKHZhciBhPWRyKHIsdC5kdHlwZSksaT10aGlzLmJ1ZmZlclN5bmModCkscz0wO3M8YS5zaXplOysrcyl7dmFyIHU9YS5pbmRleFRvTG9jKHMpLGM9dS5zbGljZSgpO2Nbbl09b1t1W25dXTt2YXIgbD1pLmxvY1RvSW5kZXgoYyk7YS52YWx1ZXNbc109aS52YWx1ZXNbbF19cmV0dXJuIGEudG9UZW5zb3IoKX0sby5wcm90b3R5cGUuYmF0Y2hUb1NwYWNlTkQ9ZnVuY3Rpb24odCxlLG4pe0hoKFt0XSxcImJhdGNoVG9TcGFjZU5EXCIpO3ZhciByPWUucmVkdWNlKChmdW5jdGlvbih0LGUpe3JldHVybiB0KmV9KSksbz16cih0LnNoYXBlLGUsciksYT1HcihvLmxlbmd0aCxlLmxlbmd0aCksaT1Icih0LnNoYXBlLGUscikscz1xcihuLGUubGVuZ3RoKSx1PUtyKGksbixlLmxlbmd0aCk7cmV0dXJuIHQucmVzaGFwZShvKS50cmFuc3Bvc2UoYSkucmVzaGFwZShpKS5zbGljZShzLHUpfSxvLnByb3RvdHlwZS5zcGFjZVRvQmF0Y2hORD1mdW5jdGlvbih0LGUsbil7SGgoW3RdLFwic3BhY2VUb0JhdGNoTkRcIik7dmFyIHI9ZS5yZWR1Y2UoKGZ1bmN0aW9uKHQsZSl7cmV0dXJuIHQqZX0pKSxvPVtbMCwwXV07by5wdXNoLmFwcGx5KG8sbik7Zm9yKHZhciBhPTErZS5sZW5ndGg7YTx0LnNoYXBlLmxlbmd0aDsrK2Epby5wdXNoKFswLDBdKTt2YXIgaT10LnBhZChvKSxzPXpyKGkuc2hhcGUsZSxyLCExKSx1PUdyKHMubGVuZ3RoLGUubGVuZ3RoLCExKSxjPUhyKGkuc2hhcGUsZSxyLCExKTtyZXR1cm4gaS5yZXNoYXBlKHMpLnRyYW5zcG9zZSh1KS5yZXNoYXBlKGMpfSxvLnByb3RvdHlwZS5wb29sPWZ1bmN0aW9uKHQsZSxuKXtIaCh0LFwicG9vbFwiKTtmb3IodmFyIHI9ZS5zdHJpZGVIZWlnaHQsbz1lLnN0cmlkZVdpZHRoLGE9ZS5kaWxhdGlvbkhlaWdodCxpPWUuZGlsYXRpb25XaWR0aCxzPWUuZWZmZWN0aXZlRmlsdGVySGVpZ2h0LHU9ZS5lZmZlY3RpdmVGaWx0ZXJXaWR0aCxjPWUucGFkSW5mby50b3AsbD1lLnBhZEluZm8ubGVmdCxoPVwibWF4XCI9PT1uP051bWJlci5ORUdBVElWRV9JTkZJTklUWTpOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFksZj10aGlzLnJlYWRTeW5jKHQuZGF0YUlkKSxkPWRyKGUub3V0U2hhcGUsdC5kdHlwZSkscD1kLnZhbHVlcyx2PWUub3V0U2hhcGVbMV0qZS5vdXRTaGFwZVsyXSplLm91dFNoYXBlWzNdLG09ZS5vdXRTaGFwZVsyXSplLm91dFNoYXBlWzNdLGc9ZS5vdXRTaGFwZVszXSx5PTA7eTxlLmJhdGNoU2l6ZTsrK3kpZm9yKHZhciB4PXkqdixiPXkqdC5zdHJpZGVzWzBdLHc9MDt3PGUuaW5DaGFubmVsczsrK3cpZm9yKHZhciBDPTA7QzxlLm91dEhlaWdodDsrK0MpZm9yKHZhciBFPUMqci1jLFI9TWF0aC5tYXgoMCxFKSxJPU1hdGgubWluKGUuaW5IZWlnaHQscytFKSxrPXgrQyptLFM9MDtTPGUub3V0V2lkdGg7KytTKXtmb3IodmFyIEE9UypvLWwsRD1NYXRoLm1heCgwLEEpLFQ9TWF0aC5taW4oZS5pbldpZHRoLHUrQSksTj1oLEY9MCxfPTAsTz1SO088STtPKz1hKXtmb3IodmFyIE09YitPKnQuc3RyaWRlc1sxXSxCPUQ7QjxUO0IrPWkpe3ZhciBQPWZbTStCKnQuc3RyaWRlc1syXSt3XTtcIm1heFwiPT09biYmUD5OP049UDpcImF2Z1wiPT09biYmKEYrPVAsXysrKX1pZihpc05hTihOKSlicmVha31wW2srUypnK3ddPVwiYXZnXCI9PT1uP0YvXzpOfXJldHVybiBkLnRvVGVuc29yKCl9LG8ucHJvdG90eXBlLm1heFBvb2w9ZnVuY3Rpb24odCxlKXtyZXR1cm4gdGhpcy5wb29sKHQsZSxcIm1heFwiKX0sby5wcm90b3R5cGUubWF4UG9vbFBvc2l0aW9ucz1mdW5jdGlvbih0LGUpe2Zvcih2YXIgbj1kcihlLm91dFNoYXBlLFwiaW50MzJcIikscj1lLnN0cmlkZUhlaWdodCxvPWUuc3RyaWRlV2lkdGgsYT1lLmRpbGF0aW9uSGVpZ2h0LGk9ZS5kaWxhdGlvbldpZHRoLHM9ZS5lZmZlY3RpdmVGaWx0ZXJIZWlnaHQsdT1lLmVmZmVjdGl2ZUZpbHRlcldpZHRoLGM9ZS5wYWRJbmZvLnRvcCxsPWUucGFkSW5mby5sZWZ0LGg9dGhpcy5idWZmZXJTeW5jKHQpLGY9MDtmPGUuYmF0Y2hTaXplOysrZilmb3IodmFyIGQ9MDtkPGUuaW5DaGFubmVsczsrK2QpZm9yKHZhciBwPTA7cDxlLm91dEhlaWdodDsrK3Ape2Zvcih2YXIgdj1wKnItYyxtPXY7bTwwOyltKz1hO2Zvcih2YXIgZz1NYXRoLm1pbihlLmluSGVpZ2h0LHMrdikseT0wO3k8ZS5vdXRXaWR0aDsrK3kpe2Zvcih2YXIgeD15Km8tbCxiPXg7YjwwOyliKz1pO2Zvcih2YXIgdz1NYXRoLm1pbihlLmluV2lkdGgsdSt4KSxDPU51bWJlci5ORUdBVElWRV9JTkZJTklUWSxFPS0xLFI9bTtSPGc7Uis9YSlmb3IodmFyIEk9Ui12LGs9YjtrPHc7ays9aSl7dmFyIFM9ay14LEE9aC5nZXQoZixSLGssZCk7QT5DJiYoQz1BLEU9SSp1K1MpfW4uc2V0KEUsZixwLHksZCl9fXJldHVybiBuLnRvVGVuc29yKCl9LG8ucHJvdG90eXBlLm1heFBvb2xCYWNrcHJvcD1mdW5jdGlvbih0LGUsbixyKXtIaChbZSxuXSxcIm1heFBvb2xCYWNrcHJvcFwiKTtmb3IodmFyIG89dGhpcy5tYXhQb29sUG9zaXRpb25zKGUsciksYT1yLnN0cmlkZUhlaWdodCxpPXIuc3RyaWRlV2lkdGgscz1yLmRpbGF0aW9uSGVpZ2h0LHU9ci5kaWxhdGlvbldpZHRoLGM9ci5lZmZlY3RpdmVGaWx0ZXJIZWlnaHQsbD1yLmVmZmVjdGl2ZUZpbHRlcldpZHRoLGg9bC0xLXIucGFkSW5mby5sZWZ0LGY9Yy0xLXIucGFkSW5mby50b3AsZD1kcihlLnNoYXBlLFwiZmxvYXQzMlwiKSxwPXRoaXMuYnVmZmVyU3luYyhvKSx2PXRoaXMuYnVmZmVyU3luYyh0KSxtPTA7bTxyLmJhdGNoU2l6ZTsrK20pZm9yKHZhciBnPTA7ZzxyLmluQ2hhbm5lbHM7KytnKWZvcih2YXIgeT0wO3k8ci5pbkhlaWdodDsrK3kpZm9yKHZhciB4PTA7eDxyLmluV2lkdGg7Kyt4KXtmb3IodmFyIGI9eS1mLHc9eC1oLEM9MCxFPTA7RTxjO0UrPXMpe3ZhciBSPShiK0UpL2E7aWYoIShSPDB8fFI+PXIub3V0SGVpZ2h0fHxNYXRoLmZsb29yKFIpIT09UikpZm9yKHZhciBJPTA7STxsO0krPXUpe3ZhciBrPSh3K0kpL2k7aWYoIShrPDB8fGs+PXIub3V0V2lkdGh8fE1hdGguZmxvb3IoaykhPT1rKSl7dmFyIFM9YypsLTEtcC5nZXQobSxSLGssZyk9PT1FKmwrST8xOjA7aWYoMCE9PVMpQys9di5nZXQobSxSLGssZykqU319fWQuc2V0KEMsbSx5LHgsZyl9cmV0dXJuIGQudG9UZW5zb3IoKX0sby5wcm90b3R5cGUuYXZnUG9vbEJhY2twcm9wPWZ1bmN0aW9uKHQsZSxuKXtIaChbdCxlXSxcImF2Z1Bvb2xCYWNrcHJvcFwiKTtmb3IodmFyIHI9bi5zdHJpZGVIZWlnaHQsbz1uLnN0cmlkZVdpZHRoLGE9bi5maWx0ZXJIZWlnaHQsaT1uLmZpbHRlcldpZHRoLHM9bi5kaWxhdGlvbkhlaWdodCx1PW4uZGlsYXRpb25XaWR0aCxjPW4uZWZmZWN0aXZlRmlsdGVySGVpZ2h0LGw9bi5lZmZlY3RpdmVGaWx0ZXJXaWR0aCxoPWwtMS1uLnBhZEluZm8ubGVmdCxmPWMtMS1uLnBhZEluZm8udG9wLGQ9ZHIoZS5zaGFwZSxcImZsb2F0MzJcIikscD0xLyhhKmkpLHY9dGhpcy5idWZmZXJTeW5jKHQpLG09MDttPG4uYmF0Y2hTaXplOysrbSlmb3IodmFyIGc9MDtnPG4uaW5DaGFubmVsczsrK2cpZm9yKHZhciB5PTA7eTxuLmluSGVpZ2h0OysreSlmb3IodmFyIHg9MDt4PG4uaW5XaWR0aDsrK3gpe2Zvcih2YXIgYj15LWYsdz14LWgsQz0wLEU9MDtFPGM7RSs9cyl7dmFyIFI9KGIrRSkvcjtpZighKFI8MHx8Uj49bi5vdXRIZWlnaHR8fE1hdGguZmxvb3IoUikhPT1SKSlmb3IodmFyIEk9MDtJPGw7SSs9dSl7dmFyIGs9KHcrSSkvbztpZighKGs8MHx8az49bi5vdXRXaWR0aHx8TWF0aC5mbG9vcihrKSE9PWspKUMrPXYuZ2V0KG0sUixrLGcpfX1kLnNldChDKnAsbSx5LHgsZyl9cmV0dXJuIGQudG9UZW5zb3IoKX0sby5wcm90b3R5cGUucG9vbDNkPWZ1bmN0aW9uKHQsZSxuKXtIaCh0LFwicG9vbDNkXCIpO2Zvcih2YXIgcj1lLnN0cmlkZURlcHRoLG89ZS5zdHJpZGVIZWlnaHQsYT1lLnN0cmlkZVdpZHRoLGk9ZS5kaWxhdGlvbkRlcHRoLHM9ZS5kaWxhdGlvbkhlaWdodCx1PWUuZGlsYXRpb25XaWR0aCxjPWUuZWZmZWN0aXZlRmlsdGVyRGVwdGgsbD1lLmVmZmVjdGl2ZUZpbHRlckhlaWdodCxoPWUuZWZmZWN0aXZlRmlsdGVyV2lkdGgsZj1lLnBhZEluZm8uZnJvbnQsZD1lLnBhZEluZm8udG9wLHA9ZS5wYWRJbmZvLmxlZnQsdj1cIm1heFwiPT09bj9OdW1iZXIuTkVHQVRJVkVfSU5GSU5JVFk6TnVtYmVyLlBPU0lUSVZFX0lORklOSVRZLG09dGhpcy5yZWFkU3luYyh0LmRhdGFJZCksZz1kcihlLm91dFNoYXBlLHQuZHR5cGUpLHk9Zy52YWx1ZXMseD1lLm91dFNoYXBlWzFdKmUub3V0U2hhcGVbMl0qZS5vdXRTaGFwZVszXSplLm91dFNoYXBlWzRdLGI9ZS5vdXRTaGFwZVsyXSplLm91dFNoYXBlWzNdKmUub3V0U2hhcGVbNF0sdz1lLm91dFNoYXBlWzNdKmUub3V0U2hhcGVbNF0sQz1lLm91dFNoYXBlWzRdLEU9MDtFPGUuYmF0Y2hTaXplOysrRSlmb3IodmFyIFI9RSp4LEk9RSp0LnN0cmlkZXNbMF0saz0wO2s8ZS5pbkNoYW5uZWxzOysraylmb3IodmFyIFM9MDtTPGUub3V0RGVwdGg7KytTKXtmb3IodmFyIEE9UypyLWYsRD1BO0Q8MDspRCs9aTtmb3IodmFyIFQ9TWF0aC5taW4oZS5pbkRlcHRoLGMrQSksTj1SK1MqYixGPTA7RjxlLm91dEhlaWdodDsrK0Ype2Zvcih2YXIgXz1GKm8tZCxPPV87TzwwOylPKz1zO2Zvcih2YXIgTT1NYXRoLm1pbihlLmluSGVpZ2h0LGwrXyksQj1OK0YqdyxQPTA7UDxlLm91dFdpZHRoOysrUCl7Zm9yKHZhciBMPVAqYS1wLFc9TDtXPDA7KVcrPXU7Zm9yKHZhciBVPU1hdGgubWluKGUuaW5XaWR0aCxoK0wpLFY9QitQKkMsej12LEc9MCxIPTAscT1EO3E8VDtxKz1pKXtmb3IodmFyIEs9SStxKnQuc3RyaWRlc1sxXSxqPU87ajxNO2orPXMpe2Zvcih2YXIgWD1LK2oqdC5zdHJpZGVzWzJdLFk9VztZPFU7WSs9dSl7dmFyICQ9bVtYK1kqdC5zdHJpZGVzWzNdK2tdO2lmKFwibWF4XCI9PT1uJiYkPno/ej0kOlwiYXZnXCI9PT1uJiYoRys9JCxIKyspLGlzTmFOKHopKWJyZWFrfWlmKGlzTmFOKHopKWJyZWFrfWlmKGlzTmFOKHopKWJyZWFrfXlbVitrXT1cImF2Z1wiPT09bj9HL0g6en19fXJldHVybiBnLnRvVGVuc29yKCl9LG8ucHJvdG90eXBlLmF2Z1Bvb2wzZD1mdW5jdGlvbih0LGUpe3JldHVybiBIaCh0LFwiYXZnUG9vbDNkXCIpLHRoaXMucG9vbDNkKHQsZSxcImF2Z1wiKS50b0Zsb2F0KCl9LG8ucHJvdG90eXBlLmF2Z1Bvb2wzZEJhY2twcm9wPWZ1bmN0aW9uKHQsZSxuKXtIaChbdCxlXSxcImF2Z1Bvb2wzZEJhY2twcm9wXCIpO2Zvcih2YXIgcj1uLnN0cmlkZURlcHRoLG89bi5zdHJpZGVIZWlnaHQsYT1uLnN0cmlkZVdpZHRoLGk9bi5maWx0ZXJEZXB0aCxzPW4uZmlsdGVySGVpZ2h0LHU9bi5maWx0ZXJXaWR0aCxjPW4uZGlsYXRpb25EZXB0aCxsPW4uZGlsYXRpb25IZWlnaHQsaD1uLmRpbGF0aW9uV2lkdGgsZj1uLmVmZmVjdGl2ZUZpbHRlckRlcHRoLGQ9bi5lZmZlY3RpdmVGaWx0ZXJIZWlnaHQscD1uLmVmZmVjdGl2ZUZpbHRlcldpZHRoLHY9Zi0xLW4ucGFkSW5mby5mcm9udCxtPXAtMS1uLnBhZEluZm8ubGVmdCxnPWQtMS1uLnBhZEluZm8udG9wLHk9ZHIoZS5zaGFwZSxcImZsb2F0MzJcIikseD0xLyhpKnMqdSksYj10aGlzLmJ1ZmZlclN5bmModCksdz0wO3c8bi5iYXRjaFNpemU7Kyt3KWZvcih2YXIgQz0wO0M8bi5pbkNoYW5uZWxzOysrQylmb3IodmFyIEU9MDtFPG4uaW5EZXB0aDsrK0UpZm9yKHZhciBSPTA7UjxuLmluSGVpZ2h0OysrUilmb3IodmFyIEk9MDtJPG4uaW5XaWR0aDsrK0kpe2Zvcih2YXIgaz1FLXYsUz1SLWcsQT1JLW0sRD0wLFQ9MDtUPGY7VCs9Yyl7dmFyIE49KGsrVCkvcjtpZighKE48MHx8Tj49bi5vdXREZXB0aHx8TWF0aC5mbG9vcihOKSE9PU4pKWZvcih2YXIgRj0wO0Y8ZDtGKz1sKXt2YXIgXz0oUytGKS9vO2lmKCEoXzwwfHxfPj1uLm91dEhlaWdodHx8TWF0aC5mbG9vcihfKSE9PV8pKWZvcih2YXIgTz0wO088cDtPKz1oKXt2YXIgTT0oQStPKS9hO2lmKCEoTTwwfHxNPj1uLm91dFdpZHRofHxNYXRoLmZsb29yKE0pIT09TSkpRCs9Yi5nZXQodyxOLF8sTSxDKX19fXkuc2V0KEQqeCx3LEUsUixJLEMpfXJldHVybiB5LnRvVGVuc29yKCl9LG8ucHJvdG90eXBlLm1heFBvb2wzZD1mdW5jdGlvbih0LGUpe3JldHVybiBIaCh0LFwibWF4UG9vbDNkXCIpLHRoaXMucG9vbDNkKHQsZSxcIm1heFwiKS50b0Zsb2F0KCl9LG8ucHJvdG90eXBlLm1heFBvb2wzZFBvc2l0aW9ucz1mdW5jdGlvbih0LGUpe2Zvcih2YXIgbj1kcihlLm91dFNoYXBlLFwiaW50MzJcIikscj1lLnN0cmlkZURlcHRoLG89ZS5zdHJpZGVIZWlnaHQsYT1lLnN0cmlkZVdpZHRoLGk9ZS5kaWxhdGlvbkRlcHRoLHM9ZS5kaWxhdGlvbkhlaWdodCx1PWUuZGlsYXRpb25XaWR0aCxjPWUuZWZmZWN0aXZlRmlsdGVyRGVwdGgsbD1lLmVmZmVjdGl2ZUZpbHRlckhlaWdodCxoPWUuZWZmZWN0aXZlRmlsdGVyV2lkdGgsZj1lLnBhZEluZm8uZnJvbnQsZD1lLnBhZEluZm8udG9wLHA9ZS5wYWRJbmZvLmxlZnQsdj10aGlzLmJ1ZmZlclN5bmModCksbT0wO208ZS5iYXRjaFNpemU7KyttKWZvcih2YXIgZz0wO2c8ZS5pbkNoYW5uZWxzOysrZylmb3IodmFyIHk9MDt5PGUub3V0RGVwdGg7Kyt5KXtmb3IodmFyIHg9eSpyLWYsYj14O2I8MDspYis9aTtmb3IodmFyIHc9TWF0aC5taW4oZS5pbkRlcHRoLGMreCksQz0wO0M8ZS5vdXRIZWlnaHQ7KytDKXtmb3IodmFyIEU9QypvLWQsUj1FO1I8MDspUis9cztmb3IodmFyIEk9TWF0aC5taW4oZS5pbkhlaWdodCxsK0UpLGs9MDtrPGUub3V0V2lkdGg7KytrKXtmb3IodmFyIFM9ayphLXAsQT1TO0E8MDspQSs9dTtmb3IodmFyIEQ9TWF0aC5taW4oZS5pbldpZHRoLGgrUyksVD1OdW1iZXIuTkVHQVRJVkVfSU5GSU5JVFksTj0tMSxGPWI7Rjx3O0YrPWkpZm9yKHZhciBfPUYteCxPPVI7TzxJO08rPXMpZm9yKHZhciBNPU8tRSxCPUE7QjxEO0IrPXUpe3ZhciBQPUItUyxMPXYuZ2V0KG0sRixPLEIsZyk7TD49VCYmKFQ9TCxOPV8qbCpoK00qbCtQKX1uLnNldChOLG0seSxDLGssZyl9fX1yZXR1cm4gbi50b1RlbnNvcigpfSxvLnByb3RvdHlwZS5tYXhQb29sM2RCYWNrcHJvcD1mdW5jdGlvbih0LGUsbixyKXtIaChbZSxuXSxcIm1heFBvb2wzZEJhY2twcm9wXCIpO2Zvcih2YXIgbz10aGlzLm1heFBvb2wzZFBvc2l0aW9ucyhlLHIpLGE9ci5zdHJpZGVEZXB0aCxpPXIuc3RyaWRlSGVpZ2h0LHM9ci5zdHJpZGVXaWR0aCx1PXIuZGlsYXRpb25EZXB0aCxjPXIuZGlsYXRpb25IZWlnaHQsbD1yLmRpbGF0aW9uV2lkdGgsaD1yLmVmZmVjdGl2ZUZpbHRlckRlcHRoLGY9ci5lZmZlY3RpdmVGaWx0ZXJIZWlnaHQsZD1yLmVmZmVjdGl2ZUZpbHRlcldpZHRoLHA9aC0xLXIucGFkSW5mby5mcm9udCx2PWQtMS1yLnBhZEluZm8ubGVmdCxtPWYtMS1yLnBhZEluZm8udG9wLGc9ZHIoZS5zaGFwZSxcImZsb2F0MzJcIikseT10aGlzLmJ1ZmZlclN5bmMobykseD10aGlzLmJ1ZmZlclN5bmModCksYj0wO2I8ci5iYXRjaFNpemU7KytiKWZvcih2YXIgdz0wO3c8ci5pbkNoYW5uZWxzOysrdylmb3IodmFyIEM9MDtDPHIuaW5EZXB0aDsrK0MpZm9yKHZhciBFPTA7RTxyLmluSGVpZ2h0OysrRSlmb3IodmFyIFI9MDtSPHIuaW5XaWR0aDsrK1Ipe2Zvcih2YXIgST1DLXAsaz1FLW0sUz1SLXYsQT0wLEQ9MDtEPGg7RCs9dSl7dmFyIFQ9KEkrRCkvYTtpZighKFQ8MHx8VD49ci5vdXREZXB0aHx8TWF0aC5mbG9vcihUKSE9PVQpKWZvcih2YXIgTj0wO048ZjtOKz1jKXt2YXIgRj0oaytOKS9pO2lmKCEoRjwwfHxGPj1yLm91dEhlaWdodHx8TWF0aC5mbG9vcihGKSE9PUYpKWZvcih2YXIgXz0wO188ZDtfKz1sKXt2YXIgTz0oUytfKS9zO2lmKCEoTzwwfHxPPj1yLm91dFdpZHRofHxNYXRoLmZsb29yKE8pIT09Tykpe3ZhciBNPWgqZipkLTEteS5nZXQoYixULEYsTyx3KT09PUQqZipkK04qZCtfPzE6MDtpZigwIT09TSlBKz14LmdldChiLFQsRixPLHcpKk19fX19Zy5zZXQoQSxiLEMsRSxSLHcpfXJldHVybiBnLnRvVGVuc29yKCl9LG8ucHJvdG90eXBlLmNhc3Q9ZnVuY3Rpb24odCxlKXtyZXR1cm4gUG8odCxlLHRoaXMpfSxvLnByb3RvdHlwZS5yZXNoYXBlPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIExvKHQsZSl9LG8ucHJvdG90eXBlLmF2Z1Bvb2w9ZnVuY3Rpb24odCxlKXtyZXR1cm4gSGgodCxcImF2Z1Bvb2xcIiksdGhpcy5wb29sKHQsZSxcImF2Z1wiKS50b0Zsb2F0KCl9LG8ucHJvdG90eXBlLnJlc2l6ZUJpbGluZWFyPWZ1bmN0aW9uKHQsZSxuLHIpe0hoKHQsXCJyZXNpemVCaWxpbmVhclwiKTtmb3IodmFyIG89dC5zaGFwZSxhPW9bMF0saT1vWzFdLHM9b1syXSx1PW9bM10sYz10aGlzLnJlYWRTeW5jKHQuZGF0YUlkKSxsPW5ldyBGbG9hdDMyQXJyYXkoayhbYSxlLG4sdV0pKSxoPVtyJiZlPjE/aS0xOmksciYmbj4xP3MtMTpzXSxmPVtyJiZlPjE/ZS0xOmUsciYmbj4xP24tMTpuXSxkPTAscD1oWzBdL2ZbMF0sdj1oWzFdL2ZbMV0sbT0wO208YTttKyspZm9yKHZhciBnPTA7ZzxlO2crKylmb3IodmFyIHk9cCpnLHg9TWF0aC5mbG9vcih5KSxiPXkteCx3PU1hdGgubWluKGktMSxNYXRoLmNlaWwoeSkpLEM9bSp0LnN0cmlkZXNbMF0reCp0LnN0cmlkZXNbMV0sRT1tKnQuc3RyaWRlc1swXSt3KnQuc3RyaWRlc1sxXSxSPTA7UjxuO1IrKylmb3IodmFyIEk9dipSLFM9TWF0aC5mbG9vcihJKSxBPUktUyxEPU1hdGgubWluKHMtMSxNYXRoLmNlaWwoSSkpLFQ9QytTKnQuc3RyaWRlc1syXSxOPUUrUyp0LnN0cmlkZXNbMl0sRj1DK0QqdC5zdHJpZGVzWzJdLF89RStEKnQuc3RyaWRlc1syXSxPPTA7Tzx1O08rKyl7dmFyIE09Y1tUK09dLEI9Y1tOK09dLFA9TSsoY1tGK09dLU0pKkEsTD1QKyhCKyhjW18rT10tQikqQS1QKSpiO2xbZCsrXT1MfXJldHVybiBGbihsLFthLGUsbix1XSl9LG8ucHJvdG90eXBlLnJlc2l6ZUJpbGluZWFyQmFja3Byb3A9ZnVuY3Rpb24odCxlLG4pe0hoKFt0LGVdLFwicmVzaXplQmlsaW5lYXJCYWNrcHJvcFwiKTtmb3IodmFyIHI9ZS5zaGFwZSxvPXJbMF0sYT1yWzFdLGk9clsyXSxzPXJbM10sdT10LnNoYXBlLGM9dVsxXSxsPXVbMl0saD1uZXcgRmxvYXQzMkFycmF5KG8qYSppKnMpLGY9W24mJmM+MT9hLTE6YSxuJiZsPjE/aS0xOmldLGQ9W24mJmM+MT9jLTE6YyxuJiZsPjE/bC0xOmxdLHA9ZlswXS9kWzBdLHY9ZlsxXS9kWzFdLG09dGhpcy5yZWFkU3luYyh0LmRhdGFJZCksZz0wLHk9MDt5PG87eSsrKWZvcih2YXIgeD15KmUuc3RyaWRlc1swXSxiPTA7YjxjO2IrKylmb3IodmFyIHc9YipwLEM9TWF0aC5mbG9vcih3KSxFPU1hdGgubWluKE1hdGguY2VpbCh3KSxhLTEpLFI9eCtDKmUuc3RyaWRlc1sxXSxJPXgrRSplLnN0cmlkZXNbMV0saz13LUMsUz0xLWssQT0wO0E8bDtBKyspZm9yKHZhciBEPUEqdixUPU1hdGguZmxvb3IoRCksTj1NYXRoLm1pbihNYXRoLmNlaWwoRCksaS0xKSxGPUQtVCxfPTEtRixPPVIrVCplLnN0cmlkZXNbMl0sTT1SK04qZS5zdHJpZGVzWzJdLEI9SStUKmUuc3RyaWRlc1syXSxQPUkrTiplLnN0cmlkZXNbMl0sTD1TKl8sVz1TKkYsVT1rKl8sVj1rKkYsej0wO3o8czt6Kyspe3ZhciBHPW1bZysrXTtoW08rel0rPUcqTCxoW00rel0rPUcqVyxoW0Irel0rPUcqVSxoW1Arel0rPUcqVn1yZXR1cm4gTG4oaCxbbyxpLGEsc10sZS5kdHlwZSl9LG8ucHJvdG90eXBlLnJlc2l6ZU5lYXJlc3ROZWlnaGJvcj1mdW5jdGlvbih0LGUsbixyKXtIaCh0LFwicmVzaXplTmVhcmVzdE5laWdoYm9yXCIpO2Zvcih2YXIgbz10LnNoYXBlLGE9b1swXSxpPW9bMV0scz1vWzJdLHU9b1szXSxjPXRoaXMucmVhZFN5bmModC5kYXRhSWQpLGw9bmV3IEZsb2F0MzJBcnJheShhKmUqbip1KSxoPVtyJiZlPjE/aS0xOmksciYmbj4xP3MtMTpzXSxmPVtyJiZlPjE/ZS0xOmUsciYmbj4xP24tMTpuXSxkPWhbMF0vZlswXSxwPWhbMV0vZlsxXSx2PTAsbT0wO208YTttKyspZm9yKHZhciBnPW0qdC5zdHJpZGVzWzBdLHk9MDt5PGU7eSsrKWZvcih2YXIgeD1kKnksYj1nK01hdGgubWluKGktMSxyP01hdGgucm91bmQoeCk6TWF0aC5mbG9vcih4KSkqdC5zdHJpZGVzWzFdLHc9MDt3PG47dysrKWZvcih2YXIgQz1wKncsRT1iK01hdGgubWluKHMtMSxyP01hdGgucm91bmQoQyk6TWF0aC5mbG9vcihDKSkqdC5zdHJpZGVzWzJdLFI9MDtSPHU7UisrKXt2YXIgST1jW0UrUl07bFt2KytdPUl9cmV0dXJuIEZuKGwsW2EsZSxuLHVdLHQuZHR5cGUpfSxvLnByb3RvdHlwZS5yZXNpemVOZWFyZXN0TmVpZ2hib3JCYWNrcHJvcD1mdW5jdGlvbih0LGUsbil7SGgoW3QsZV0sXCJyZXNpemVOZWFyZXN0TmVpZ2hib3JCYWNrcHJvcFwiKTtmb3IodmFyIHI9ZS5zaGFwZSxvPXJbMF0sYT1yWzFdLGk9clsyXSxzPXJbM10sdT10LnNoYXBlLGM9dVsxXSxsPXVbMl0saD1uZXcgRmxvYXQzMkFycmF5KG8qYSppKnMpLGY9dGhpcy5yZWFkU3luYyh0LmRhdGFJZCksZD1bbiYmYz4xP2EtMTphLG4mJmw+MT9pLTE6aV0scD1bbiYmYz4xP2MtMTpjLG4mJmw+MT9sLTE6bF0sdj1kWzBdL3BbMF0sbT1kWzFdL3BbMV0sZz0xL3YseT0xL20seD0yKk1hdGguY2VpbChnKSsyLGI9MipNYXRoLmNlaWwoeSkrMix3PTA7dzxvO3crKylmb3IodmFyIEM9dyplLnN0cmlkZXNbMF0sRT0wO0U8YTtFKyspZm9yKHZhciBSPUMrRSplLnN0cmlkZXNbMV0sST1NYXRoLmZsb29yKEUqZyksaz1NYXRoLmZsb29yKEkteC8yKSxTPTA7UzxpO1MrKylmb3IodmFyIEE9UitTKmUuc3RyaWRlc1syXSxEPU1hdGguZmxvb3IoUyp5KSxUPU1hdGguZmxvb3IoRC1iLzIpLE49MDtOPHM7TisrKXtmb3IodmFyIEY9MCxfPTA7Xzx4O18rKyl7dmFyIE89XytrO2lmKCEoTzwwfHxPPj1jKSl7dmFyIE09QytPKnQuc3RyaWRlc1sxXSxCPU8qdjtpZihFPT09TWF0aC5taW4oYS0xLG4/TWF0aC5yb3VuZChCKTpNYXRoLmZsb29yKEIpKSlmb3IodmFyIFA9MDtQPGI7UCsrKXt2YXIgTD1QK1Q7aWYoIShMPDB8fEw+PWwpKXt2YXIgVz1NK0wqdC5zdHJpZGVzWzJdLFU9TCptO1M9PT1NYXRoLm1pbihpLTEsbj9NYXRoLnJvdW5kKFUpOk1hdGguZmxvb3IoVSkpJiYoRis9ZltXK05dKX19fX1oW0ErTl09Rn1yZXR1cm4gTG4oaCxlLnNoYXBlLGUuZHR5cGUpfSxvLnByb3RvdHlwZS5iYXRjaE5vcm1hbGl6YXRpb249ZnVuY3Rpb24odCxlLG4scixvLGEpe0hoKFt0LGUsbixvLGFdLFwiYmF0Y2hOb3JtXCIpO2Zvcih2YXIgaT10aGlzLnJlYWRTeW5jKHQuZGF0YUlkKSxzPXRoaXMucmVhZFN5bmMoZS5kYXRhSWQpLHU9dGhpcy5yZWFkU3luYyhuLmRhdGFJZCksYz1vP3RoaXMucmVhZFN5bmMoby5kYXRhSWQpOm5ldyBGbG9hdDMyQXJyYXkoWzFdKSxsPWE/dGhpcy5yZWFkU3luYyhhLmRhdGFJZCk6bmV3IEZsb2F0MzJBcnJheShbMF0pLGg9bmV3IEZsb2F0MzJBcnJheShpLmxlbmd0aCksZj1sLmxlbmd0aCxkPWMubGVuZ3RoLHA9dS5sZW5ndGgsdj1zLmxlbmd0aCxtPTAsZz0wLHk9MCx4PTAsYj0wO2I8aS5sZW5ndGg7KytiKWhbYl09bFttKytdKyhpW2JdLXNbZysrXSkqY1t5KytdL01hdGguc3FydCh1W3grK10rciksbT49ZiYmKG09MCksZz49diYmKGc9MCkseT49ZCYmKHk9MCkseD49cCYmKHg9MCk7cmV0dXJuIExuKGgsdC5zaGFwZSl9LG8ucHJvdG90eXBlLmxvY2FsUmVzcG9uc2VOb3JtYWxpemF0aW9uNEQ9ZnVuY3Rpb24odCxlLG4scixvKXtIaCh0LFwibG9jYWxSZXNwb25zZU5vcm1hbGl6YXRpb240RFwiKTt2YXIgYT10LnNoYXBlWzNdLGk9YS0xLHM9dGhpcy5yZWFkU3luYyh0LmRhdGFJZCksdT10LnNpemUsYz1uZXcgRmxvYXQzMkFycmF5KHUpO2Z1bmN0aW9uIGwodCl7Zm9yKHZhciBuPXQlYSxyPXQtbitNYXRoLm1heCgwLG4tZSksbz10LW4rTWF0aC5taW4obitlLGkpLHU9MDtyPD1vO3IrKyl7dmFyIGM9c1tyXTt1Kz1jKmN9cmV0dXJuIHV9Zm9yKHZhciBoPTA7aDx1O2grKyl7dmFyIGY9bChoKSxkPXNbaF0qTWF0aC5wb3cobityKmYsLW8pO2NbaF09ZH1yZXR1cm4gTG4oYyx0LnNoYXBlKX0sby5wcm90b3R5cGUuTFJOR3JhZD1mdW5jdGlvbih0LGUsbixyLG8sYSxpKXtIaCh0LFwiTFJOR3JhZFwiKTtmb3IodmFyIHM9dC5zaGFwZVszXSx1PXRoaXMucmVhZFN5bmModC5kYXRhSWQpLGM9dGhpcy5yZWFkU3luYyhlLmRhdGFJZCksbD10aGlzLnJlYWRTeW5jKG4uZGF0YUlkKSxoPW5ldyBGbG9hdDMyQXJyYXkodC5zaXplKSxmPXQuc2l6ZSxkPTA7ZDxmO2QrKyl7Zm9yKHZhciBwPWQlcyx2PWQtcCtNYXRoLm1heCgwLHAtciksbT1kLXArTWF0aC5taW4ocyxwK3IrMSksZz0wLHk9djt5PG07eSsrKWcrPU1hdGgucG93KGNbeV0sMik7Zz1hKmcrbztmb3IoeT12O3k8bTt5Kyspe3ZhciB4PS0yKmEqaSpjW3ldKmxbZF0vZztkPT09eSYmKHgrPU1hdGgucG93KGcsLWkpKSx4Kj11W2RdLGhbeV0rPXh9fXJldHVybiBMbihoLHQuc2hhcGUpfSxvLnByb3RvdHlwZS5tdWx0aW5vbWlhbD1mdW5jdGlvbih0LGUsbixyKXtIaCh0LFwibXVsdGlub21pYWxcIik7Zm9yKHZhciBvPWU/dDpnbyh0KSxhPW8uc2hhcGVbMF0saT1vLnNoYXBlWzFdLHM9R24oW2Esbl0sXCJpbnQzMlwiKSx1PXRoaXMucmVhZFN5bmMocy5kYXRhSWQpLGM9dGhpcy5yZWFkU3luYyhvLmRhdGFJZCksbD0wO2w8YTsrK2wpe3ZhciBoPWwqaSxmPW5ldyBGbG9hdDMyQXJyYXkoaS0xKTtmWzBdPWNbaF07Zm9yKHZhciBkPTE7ZDxmLmxlbmd0aDsrK2QpZltkXT1mW2QtMV0rY1toK2RdO2Zvcih2YXIgcD1jcihyLnRvU3RyaW5nKCkpLHY9bCpuLG09MDttPG47KyttKXt2YXIgZz1wKCk7dVt2K21dPWYubGVuZ3RoO2Zvcih2YXIgeT0wO3k8Zi5sZW5ndGg7eSsrKWlmKGc8Zlt5XSl7dVt2K21dPXk7YnJlYWt9fX1yZXR1cm4gc30sby5wcm90b3R5cGUub25lSG90PWZ1bmN0aW9uKHQsZSxuLHIpe0hoKHQsXCJvbmVIb3RcIik7dmFyIG89bmV3IEZsb2F0MzJBcnJheSh0LnNpemUqZSk7by5maWxsKHIpO2Zvcih2YXIgYT10aGlzLnJlYWRTeW5jKHQuZGF0YUlkKSxpPTA7aTx0LnNpemU7KytpKWFbaV0+PTAmJmFbaV08ZSYmKG9baSplK2FbaV1dPW4pO3JldHVybiBCbihvLFt0LnNpemUsZV0sXCJpbnQzMlwiKX0sby5wcm90b3R5cGUubm9uTWF4U3VwcHJlc3Npb249ZnVuY3Rpb24odCxlLG4scixvKXtyZXR1cm4gSGgodCxcIm5vbk1heFN1cHByZXNzaW9uXCIpLGpvKHRoaXMucmVhZFN5bmModC5kYXRhSWQpLHRoaXMucmVhZFN5bmMoZS5kYXRhSWQpLG4scixvKX0sby5wcm90b3R5cGUuZmZ0PWZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLmZmdEJhdGNoKHQsITEpfSxvLnByb3RvdHlwZS5pZmZ0PWZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLmZmdEJhdGNoKHQsITApfSxvLnByb3RvdHlwZS5mZnRCYXRjaD1mdW5jdGlvbih0LGUpe2Zvcih2YXIgbj10LnNoYXBlWzBdLHI9dC5zaGFwZVsxXSxvPWRyKHQuc2hhcGUsXCJmbG9hdDMyXCIpLGE9ZHIodC5zaGFwZSxcImZsb2F0MzJcIiksaT1Ubih0KS5hczJEKG4scikscz1Obih0KS5hczJEKG4sciksdT0wO3U8bjt1KyspZm9yKHZhciBjPWkuc2xpY2UoW3UsMF0sWzEscl0pLGw9cy5zbGljZShbdSwwXSxbMSxyXSksaD1EbihjLGwpLGY9dGhpcy5yZWFkU3luYyh0aGlzLmZmdEltcGwoaCxlKS5kYXRhSWQpLGQ9MDtkPHI7ZCsrKXt2YXIgcD16byhmLGQpO28udmFsdWVzW3UqcitkXT1wLnJlYWwsYS52YWx1ZXNbdSpyK2RdPXAuaW1hZ31yZXR1cm4gRG4oby50b1RlbnNvcigpLGEudG9UZW5zb3IoKSkuYXMyRChuLHIpfSxvLnByb3RvdHlwZS5mZnRJbXBsPWZ1bmN0aW9uKHQsZSl7dmFyIG49dC5hczFEKCkscj1uLnNpemU7aWYodGhpcy5pc0V4cG9uZW50T2YyKHIpKXt2YXIgbz10aGlzLmZmdFJhZGl4MihuLHIsZSkuYXMyRCh0LnNoYXBlWzBdLHQuc2hhcGVbMV0pO3JldHVybiBlJiYobz1EbihUbihvKS5kaXYoT24ocikpLE5uKG8pLmRpdihPbihyKSkpKSxvfXZhciBhPXRoaXMucmVhZFN5bmModC5kYXRhSWQpLGk9ZnVuY3Rpb24odCl7Zm9yKHZhciBlPW5ldyBGbG9hdDMyQXJyYXkodC5sZW5ndGgvMiksbj1uZXcgRmxvYXQzMkFycmF5KHQubGVuZ3RoLzIpLHI9MDtyPHQubGVuZ3RoO3IrPTIpZVtyLzJdPXRbcl0sbltyLzJdPXRbcisxXTtyZXR1cm57cmVhbDplLGltYWc6bn19KHRoaXMuZm91cmllclRyYW5zZm9ybUJ5TWF0bXVsKGEscixlKSk7cmV0dXJuIERuKGkucmVhbCxpLmltYWcpLmFzMkQodC5zaGFwZVswXSx0LnNoYXBlWzFdKX0sby5wcm90b3R5cGUuaXNFeHBvbmVudE9mMj1mdW5jdGlvbih0KXtyZXR1cm4gMD09KHQmdC0xKX0sby5wcm90b3R5cGUuZmZ0UmFkaXgyPWZ1bmN0aW9uKHQsZSxuKXtpZigxPT09ZSlyZXR1cm4gdDt2YXIgcj10aGlzLnJlYWRTeW5jKHQuZGF0YUlkKSxvPWUvMixhPWZ1bmN0aW9uKHQpe2Zvcih2YXIgZT1NYXRoLmNlaWwodC5sZW5ndGgvNCksbj1uZXcgRmxvYXQzMkFycmF5KGUpLHI9bmV3IEZsb2F0MzJBcnJheShlKSxvPTA7bzx0Lmxlbmd0aDtvKz00KW5bTWF0aC5mbG9vcihvLzQpXT10W29dLHJbTWF0aC5mbG9vcihvLzQpXT10W28rMV07cmV0dXJue3JlYWw6bixpbWFnOnJ9fShyKSxpPURuKGEucmVhbCxhLmltYWcpLmFzMUQoKSxzPWZ1bmN0aW9uKHQpe2Zvcih2YXIgZT1NYXRoLmZsb29yKHQubGVuZ3RoLzQpLG49bmV3IEZsb2F0MzJBcnJheShlKSxyPW5ldyBGbG9hdDMyQXJyYXkoZSksbz0yO288dC5sZW5ndGg7bys9NCluW01hdGguZmxvb3Ioby80KV09dFtvXSxyW01hdGguZmxvb3Ioby80KV09dFtvKzFdO3JldHVybntyZWFsOm4saW1hZzpyfX0ociksdT1EbihzLnJlYWwscy5pbWFnKS5hczFEKCk7aT10aGlzLmZmdFJhZGl4MihpLG8sbiksdT10aGlzLmZmdFJhZGl4Mih1LG8sbik7dmFyIGM9ZnVuY3Rpb24odCxlKXtmb3IodmFyIG49bmV3IEZsb2F0MzJBcnJheSh0LzIpLHI9bmV3IEZsb2F0MzJBcnJheSh0LzIpLG89MDtvPE1hdGguY2VpbCh0LzIpO28rKyl7dmFyIGE9KGU/MjotMikqTWF0aC5QSSooby90KTtuW29dPU1hdGguY29zKGEpLHJbb109TWF0aC5zaW4oYSl9cmV0dXJue3JlYWw6bixpbWFnOnJ9fShlLG4pLGw9RG4oYy5yZWFsLGMuaW1hZykubXVsKHUpLGg9aS5hZGQobCksZj1pLnN1YihsKSxkPVRuKGgpLmNvbmNhdChUbihmKSkscD1ObihoKS5jb25jYXQoTm4oZikpO3JldHVybiBEbihkLHApLmFzMUQoKX0sby5wcm90b3R5cGUuZm91cmllclRyYW5zZm9ybUJ5TWF0bXVsPWZ1bmN0aW9uKHQsZSxuKXtmb3IodmFyIHI9bmV3IEZsb2F0MzJBcnJheSgyKmUpLG89MDtvPGU7bysrKXtmb3IodmFyIGE9MCxpPTAscz0wO3M8ZTtzKyspe3ZhciB1PUhvKG8qcyxlLG4pLGM9em8odCxzKTthKz1jLnJlYWwqdS5yZWFsLWMuaW1hZyp1LmltYWcsaSs9Yy5yZWFsKnUuaW1hZytjLmltYWcqdS5yZWFsfW4mJihhLz1lLGkvPWUpLEdvKHIsYSxpLG8pfXJldHVybiByfSxvLnByb3RvdHlwZS5kZXB0aFRvU3BhY2U9ZnVuY3Rpb24odCxlLG4pe0MoXCJOSFdDXCI9PT1uLChmdW5jdGlvbigpe3JldHVyblwiT25seSBOSFdDIGRhdGFGb3JtYXQgc3VwcG9ydGVkIG9uIENQVSBmb3IgZGVwdGhUb1NwYWNlLiBHb3QgXCIrbn0pKSxDKGU+MSwoZnVuY3Rpb24oKXtyZXR1cm5cImJsb2NrU2l6ZSBzaG91bGQgYmUgPiAxIGZvciBkZXB0aFRvU3BhY2UsIGJ1dCB3YXM6IFwiK2V9KSk7Zm9yKHZhciByPXQuc2hhcGVbMF0sbz10LnNoYXBlWzFdLGE9dC5zaGFwZVsyXSxpPXQuc2hhcGVbM10scz1vKmUsdT1hKmUsYz1pLyhlKmUpLGw9dGhpcy5yZWFkU3luYyh0LmRhdGFJZCksaD1uZXcgRmxvYXQzMkFycmF5KHIqcyp1KmMpLGY9MCxkPTA7ZDxyOysrZClmb3IodmFyIHA9MDtwPHM7KytwKWZvcih2YXIgdj1NYXRoLmZsb29yKHAvZSksbT1wJWUsZz0wO2c8dTsrK2cpZm9yKHZhciB5PU1hdGguZmxvb3IoZy9lKSx4PShtKmUrZyVlKSpjLGI9MDtiPGM7KytiKXt2YXIgdz1iK3graSooeSthKih2K28qZCkpO2hbZisrXT1sW3ddfXJldHVybiBMbihoLFtyLHMsdSxjXSl9LG8ucHJvdG90eXBlLmJyb2FkY2FzdGVkQmluYXJ5T3A9ZnVuY3Rpb24odCxlLG4scil7dmFyIG89Um8odC5zaGFwZSxlLnNoYXBlKSxhPWRyKG8sbiksaT10aGlzLnJlYWRTeW5jKHQuZGF0YUlkKSxzPXRoaXMucmVhZFN5bmMoZS5kYXRhSWQpLHU9Q28odC5zaGFwZSxvKSxjPUNvKGUuc2hhcGUsbyksbD1hLnZhbHVlcztpZih1Lmxlbmd0aCtjLmxlbmd0aD09PTApZm9yKHZhciBoPTA7aDxsLmxlbmd0aDsrK2gpbFtoXT1yKGlbaCVpLmxlbmd0aF0sc1toJXMubGVuZ3RoXSk7ZWxzZXt2YXIgZj10aGlzLmJ1ZmZlclN5bmModCksZD10aGlzLmJ1ZmZlclN5bmMoZSkscD1mdW5jdGlvbihuKXt2YXIgbz1hLmluZGV4VG9Mb2MobiksaD1vLnNsaWNlKC10LnJhbmspO3UuZm9yRWFjaCgoZnVuY3Rpb24odCl7cmV0dXJuIGhbdF09MH0pKTt2YXIgcD1mLmxvY1RvSW5kZXgoaCksdj1vLnNsaWNlKC1lLnJhbmspO2MuZm9yRWFjaCgoZnVuY3Rpb24odCl7cmV0dXJuIHZbdF09MH0pKTt2YXIgbT1kLmxvY1RvSW5kZXgodik7bFtuXT1yKGlbcF0sc1ttXSl9O2ZvcihoPTA7aDxsLmxlbmd0aDsrK2gpcChoKX1yZXR1cm4gYS50b1RlbnNvcigpfSxvLnByb3RvdHlwZS5icm9hZGNhc3RlZEJpbmFyeUNvbXBsZXhPcD1mdW5jdGlvbih0LGUsbil7dmFyIHI9Um8odC5zaGFwZSxlLnNoYXBlKSxvPWRyKHIsXCJmbG9hdDMyXCIpLGE9ZHIocixcImZsb2F0MzJcIiksaT10aGlzLnJlYWRTeW5jKHQuZGF0YUlkKSxzPXRoaXMucmVhZFN5bmMoZS5kYXRhSWQpLHU9Q28odC5zaGFwZSxyKSxjPUNvKGUuc2hhcGUsciksbD1vLnZhbHVlcyxoPWEudmFsdWVzO2lmKHUubGVuZ3RoK2MubGVuZ3RoPT09MClmb3IodmFyIGY9MDtmPGwubGVuZ3RoO2YrKyl7dmFyIGQ9ZiVpLmxlbmd0aCxwPWYlcy5sZW5ndGgsdj1uKGlbMipkXSxpWzIqZCsxXSxzWzIqcF0sc1syKnArMV0pO2xbZl09di5yZWFsLGhbZl09di5pbWFnfWVsc2V7dmFyIG09dGhpcy5idWZmZXJTeW5jKHRoaXMuZGF0YS5nZXQodC5kYXRhSWQpLmNvbXBsZXhUZW5zb3JzLnJlYWwpLGc9dGhpcy5idWZmZXJTeW5jKHRoaXMuZGF0YS5nZXQoZS5kYXRhSWQpLmNvbXBsZXhUZW5zb3JzLnJlYWwpLHk9ZnVuY3Rpb24ocil7dmFyIGE9by5pbmRleFRvTG9jKHIpLGY9YS5zbGljZSgtdC5yYW5rKTt1LmZvckVhY2goKGZ1bmN0aW9uKHQpe3JldHVybiBmW3RdPTB9KSk7dmFyIGQ9bS5sb2NUb0luZGV4KGYpLHA9YS5zbGljZSgtZS5yYW5rKTtjLmZvckVhY2goKGZ1bmN0aW9uKHQpe3JldHVybiBwW3RdPTB9KSk7dmFyIHY9Zy5sb2NUb0luZGV4KHApLHk9bihpWzIqZF0saVsyKmQrMV0sc1syKnZdLHNbMip2KzFdKTtsW3JdPXkucmVhbCxoW3JdPXkuaW1hZ307Zm9yKGY9MDtmPGwubGVuZ3RoO2YrKyl5KGYpfXJldHVybiB0aGlzLmNvbXBsZXgoby50b1RlbnNvcigpLGEudG9UZW5zb3IoKSl9LG8ucHJvdG90eXBlLnNwbGl0PWZ1bmN0aW9uKHQsZSxuKXtyZXR1cm4gWm8odCxlLG4pfSxvLnByb3RvdHlwZS5kaXNwb3NlPWZ1bmN0aW9uKCl7fSxvLnByb3RvdHlwZS5mbG9hdFByZWNpc2lvbj1mdW5jdGlvbigpe3JldHVybiAzMn0sby5wcm90b3R5cGUuZXBzaWxvbj1mdW5jdGlvbigpe3JldHVybiAxZS03fSxvLnByb3RvdHlwZS5jcm9wQW5kUmVzaXplPWZ1bmN0aW9uKHQsZSxuLHIsbyxhKXtmb3IodmFyIGk9dC5zaGFwZSxzPWlbMF0sdT1pWzFdLGM9aVsyXSxsPWlbM10saD1lLnNoYXBlWzBdLGY9clswXSxkPXJbMV0scD1kcihbaCxmLGQsbF0sXCJmbG9hdDMyXCIpLHY9dGhpcy5yZWFkU3luYyhlLmRhdGFJZCksbT10aGlzLnJlYWRTeW5jKG4uZGF0YUlkKSxnPXRoaXMucmVhZFN5bmModC5kYXRhSWQpLHk9dC5zdHJpZGVzLHg9cC5zdHJpZGVzLGI9MDtiPGg7YisrKXt2YXIgdz00KmIsQz12W3ddLEU9dlt3KzFdLFI9dlt3KzJdLEk9dlt3KzNdLGs9bVtiXTtpZighKGs+PXMpKWZvcih2YXIgUz1mPjE/KFItQykqKHUtMSkvKGYtMSk6MCxBPWQ+MT8oSS1FKSooYy0xKS8oZC0xKTowLEQ9MDtEPGY7RCsrKXt2YXIgVD1mPjE/QyoodS0xKStEKlM6LjUqKEMrUikqKHUtMSk7aWYoVDwwfHxUPnUtMSlmb3IodmFyIE49MDtOPGQ7TisrKWZvcih2YXIgRj0wO0Y8bDtGKyspe3ZhciBfPUYrTip4WzJdK0QqeFsxXStiKnhbMF07cC52YWx1ZXNbX109YX1lbHNlIGlmKFwiYmlsaW5lYXJcIj09PW8pe3ZhciBPPU1hdGguZmxvb3IoVCksTT1NYXRoLmNlaWwoVCksQj1ULU87Zm9yKE49MDtOPGQ7TisrKXtpZigocT1kPjE/RSooYy0xKStOKkE6LjUqKEUrSSkqKGMtMSkpPDB8fHE+Yy0xKWZvcihGPTA7RjxsO0YrKyl7Xz1GK04qeFsyXStEKnhbMV0rYip4WzBdO3AudmFsdWVzW19dPWF9ZWxzZXt2YXIgUD1NYXRoLmZsb29yKHEpLEw9TWF0aC5jZWlsKHEpLFc9cS1QO2ZvcihGPTA7RjxsO0YrKyl7dmFyIFU9Z1tfPUYrUCp5WzJdK08qeVsxXStrKnlbMF1dLFY9Z1tfPUYrTCp5WzJdK08qeVsxXStrKnlbMF1dLHo9Z1tfPUYrUCp5WzJdK00qeVsxXStrKnlbMF1dLEc9VSsoVi1VKSpXLEg9eisoZ1tfPUYrTCp5WzJdK00qeVsxXStrKnlbMF1dLXopKlc7Xz1GK04qeFsyXStEKnhbMV0rYip4WzBdLHAudmFsdWVzW19dPUcrKEgtRykqQn19fX1lbHNlIGZvcihOPTA7TjxkOysrTil7dmFyIHE7aWYoKHE9ZD4xP0UqKGMtMSkrTipBOi41KihFK0kpKihjLTEpKTwwfHxxPmMtMSlmb3IoRj0wO0Y8bDtGKyspe189RitOKnhbMl0rRCp4WzFdK2IqeFswXTtwLnZhbHVlc1tfXT1hfWVsc2V7dmFyIEs9TWF0aC5yb3VuZChxKSxqPU1hdGgucm91bmQoVCk7Zm9yKEY9MDtGPGw7RisrKXt2YXIgWD1GK0sqeVsyXStqKnlbMV0rayp5WzBdLFk9RitOKnhbMl0rRCp4WzFdK2IqeFswXTtwLnZhbHVlc1tZXT1nW1hdfX19fX1yZXR1cm4gcC50b1RlbnNvcigpfSxvLnByb3RvdHlwZS5zcGFyc2VUb0RlbnNlPWZ1bmN0aW9uKHQsZSxuLHIpe3ZhciBvPVpyKDAsdCxuKSxhPW8uc2xpY2VSYW5rLGk9by5udW1VcGRhdGVzLHM9by5zbGljZVNpemUsdT1vLnN0cmlkZXMsYz1vLm91dHB1dFNpemU7cmV0dXJuIHRoaXMuc2NhdHRlcih0LGUsbixjLHMsaSxhLHUsciwhMSl9LG8ucHJvdG90eXBlLmdhdGhlck5EPWZ1bmN0aW9uKHQsZSl7dmFyIG49ZS5zaGFwZSxyPW5bbi5sZW5ndGgtMV0sbz1qcih0LGUpLGE9b1swXSxpPW9bMV0scz1vWzJdLHU9b1szXTtpZigwPT09aSlyZXR1cm4gRm4oW10sYSx0LmR0eXBlKTtmb3IodmFyIGM9bmV3IGd0KFtpLHNdLHQuZHR5cGUpLGw9dGhpcy5yZWFkU3luYyhlLmRhdGFJZCksaD10aGlzLnJlYWRTeW5jKHQuZGF0YUlkKSxmPTA7ZjxpO2YrKyl7Zm9yKHZhciBkPVtdLHA9MCx2PTA7djxyO3YrKyl7dmFyIG09bFtmKnIrdl07cCs9bSp1W3ZdLGQucHVzaChtKX1pZihwPDB8fHA+PXQuc2l6ZS9zKXRocm93IG5ldyBFcnJvcihcIkludmFsaWQgaW5kaWNlczogXCIrZCtcIiBkb2VzIG5vdCBpbmRleCBpbnRvIFwiK3Quc2hhcGUpO2Zvcih2YXIgZz0wO2c8cztnKyspYy52YWx1ZXNbZipzK2ddPWhbcCpzK2ddfXJldHVybiBjLnRvVGVuc29yKCkucmVzaGFwZShhKX0sby5wcm90b3R5cGUuc2NhdHRlck5EPWZ1bmN0aW9uKHQsZSxuKXt2YXIgcj1acigwLHQsbiksbz1yLnNsaWNlUmFuayxhPXIubnVtVXBkYXRlcyxpPXIuc2xpY2VTaXplLHM9ci5zdHJpZGVzLHU9ci5vdXRwdXRTaXplLGM9T24oMCk7cmV0dXJuIHRoaXMuc2NhdHRlcih0LGUsbix1LGksYSxvLHMsYywhMCl9LG8ucHJvdG90eXBlLmZpbGw9ZnVuY3Rpb24odCxlLG4pe3ZhciByPVAobj1ufHxqKGUpLGsodCkpO3JldHVybiByLmZpbGwoZSksTHQubWFrZVRlbnNvcihyLHQsbix0aGlzKX0sby5wcm90b3R5cGUub25lc0xpa2U9ZnVuY3Rpb24odCl7aWYoXCJzdHJpbmdcIj09PXQuZHR5cGUpdGhyb3cgbmV3IEVycm9yKFwib25lc0xpa2UgaXMgbm90IHN1cHBvcnRlZCBmb3Igc3RyaW5nIHRlbnNvcnNcIik7cmV0dXJuIHRoaXMuZmlsbCh0LnNoYXBlLDEsdC5kdHlwZSl9LG8ucHJvdG90eXBlLnplcm9zTGlrZT1mdW5jdGlvbih0KXt2YXIgZT1QKHQuZHR5cGUsayh0LnNoYXBlKSk7cmV0dXJuIHRoaXMubWFrZU91dHB1dChlLHQuc2hhcGUsdC5kdHlwZSl9LG8ucHJvdG90eXBlLmxpbnNwYWNlPWZ1bmN0aW9uKHQsZSxuKXtyZXR1cm4gV28odCxlLG4pfSxvLnByb3RvdHlwZS5zY2F0dGVyPWZ1bmN0aW9uKHQsZSxuLHIsbyxhLGkscyx1LGMpe3ZhciBsPVtyL28sb10saD10aGlzLnJlYWRTeW5jKHQuZGF0YUlkKSxmPXRoaXMucmVhZFN5bmMoZS5kYXRhSWQpO2lmKDA9PT1yKXJldHVybiBGbihbXSxuLGUuZHR5cGUpO3ZhciBkPW5ldyBndChsLGUuZHR5cGUpO2QudmFsdWVzLmZpbGwodGhpcy5yZWFkU3luYyh1LmRhdGFJZClbMF0pO2Zvcih2YXIgcD0wO3A8YTtwKyspe2Zvcih2YXIgdj1bXSxtPTAsZz0wO2c8aTtnKyspe3ZhciB5PWhbcCppK2ddO3YucHVzaCh5KSxtKz15KnNbZ119aWYobTwwfHxtPj1yL28pdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBpbmRpY2VzOiBcIit2K1wiIGRvZXMgbm90IGluZGV4IGludG8gXCIrbik7Zm9yKHZhciB4PTA7eDxvO3grKyljP2QudmFsdWVzW20qbyt4XSs9ZltwKm8reF06ZC52YWx1ZXNbbSpvK3hdPTA9PT1lLnJhbms/ZlswXTpmW3Aqbyt4XX1yZXR1cm4gZC50b1RlbnNvcigpLnJlc2hhcGUobil9LG99KGJvKTtMdC5yZWdpc3RlckJhY2tlbmQoXCJjcHVcIiwoZnVuY3Rpb24oKXtyZXR1cm4gbmV3IEtofSksMSk7Zm9yKHZhciBqaD0wLFhoPVt7a2VybmVsTmFtZTpcIk5vbk1heFN1cHByZXNzaW9uVjVcIixiYWNrZW5kTmFtZTpcImNwdVwiLGtlcm5lbEZ1bmM6ZnVuY3Rpb24odCl7dmFyIGU9dC5pbnB1dHMsbj10LmJhY2tlbmQscj10LmF0dHJzLG89ZSxhPW8uYm94ZXMsaT1vLnNjb3JlcyxzPXIsdT1zLm1heE91dHB1dFNpemUsYz1zLmlvdVRocmVzaG9sZCxsPXMuc2NvcmVUaHJlc2hvbGQsaD1zLnNvZnRObXNTaWdtYSxmPW47SGgoYSxcIk5vbk1heFN1cHByZXNzaW9uV2l0aFNjb3JlXCIpO3ZhciBkPVhvKGYuZGF0YS5nZXQoYS5kYXRhSWQpLnZhbHVlcyxmLmRhdGEuZ2V0KGkuZGF0YUlkKS52YWx1ZXMsdSxjLGwsaCk7cmV0dXJuW2Quc2VsZWN0ZWRJbmRpY2VzLGQuc2VsZWN0ZWRTY29yZXNdfX0se2tlcm5lbE5hbWU6XCJTcXVhcmVcIixiYWNrZW5kTmFtZTpcImNwdVwiLGtlcm5lbEZ1bmM6ZnVuY3Rpb24odCl7dmFyIGU9dC5pbnB1dHMsbj10LmJhY2tlbmQscj1lLngsbz1uO0hoKHIsXCJzcXVhcmVcIik7Zm9yKHZhciBhPW8uZGF0YS5nZXQoci5kYXRhSWQpLnZhbHVlcyxpPW5ldyBGbG9hdDMyQXJyYXkoYS5sZW5ndGgpLHM9MDtzPGEubGVuZ3RoOysrcyl7dmFyIHU9YVtzXTtpW3NdPXUqdX1yZXR1cm57ZGF0YUlkOm8ud3JpdGUoaSxyLnNoYXBlLHIuZHR5cGUpLHNoYXBlOnIuc2hhcGUsZHR5cGU6ci5kdHlwZX19fSx7a2VybmVsTmFtZTpldSxiYWNrZW5kTmFtZTpcImNwdVwiLGtlcm5lbEZ1bmM6ZnVuY3Rpb24odCl7dmFyIGU9dC5pbnB1dHMsbj10LmJhY2tlbmQscj1lLG89ci5hLGE9ci5iLGk9bjtIaChbbyxhXSxldSk7dmFyIHM9aS5kYXRhLmdldChvLmRhdGFJZCkudmFsdWVzLHU9aS5kYXRhLmdldChhLmRhdGFJZCkudmFsdWVzLGM9ZnVuY3Rpb24odCxlLG4scixvLGEpe3ZhciBpPVJvKHQsZSkscz1pLmxlbmd0aCx1PSQoaSksYz1CKG8sayhpKSksbD10Lmxlbmd0aCxoPWUubGVuZ3RoLGY9JCh0KSxkPSQoZSkscD1Dbyh0LGkpLHY9Q28oZSxpKTtpZihwLmxlbmd0aCt2Lmxlbmd0aD09PTApZm9yKHZhciBtPTA7bTxjLmxlbmd0aDsrK20pY1ttXT1hKG5bbSVuLmxlbmd0aF0sclttJXIubGVuZ3RoXSk7ZWxzZXt2YXIgZz1mdW5jdGlvbih0KXt2YXIgZT1pdCh0LHMsdSksbz1lLnNsaWNlKC1sKTtwLmZvckVhY2goKGZ1bmN0aW9uKHQpe3JldHVybiBvW3RdPTB9KSk7dmFyIGk9YXQobyxsLGYpLG09ZS5zbGljZSgtaCk7di5mb3JFYWNoKChmdW5jdGlvbih0KXtyZXR1cm4gbVt0XT0wfSkpO3ZhciBnPWF0KG0saCxkKTtjW3RdPWEobltpXSxyW2ddKX07Zm9yKG09MDttPGMubGVuZ3RoOysrbSlnKG0pfXJldHVybltjLGldfShvLnNoYXBlLGEuc2hhcGUscyx1LG8uZHR5cGUsKGZ1bmN0aW9uKHQsZSl7dmFyIG49dC1lO3JldHVybiBuKm59KSksbD1jWzBdLGg9Y1sxXTtyZXR1cm57ZGF0YUlkOmkud3JpdGUobCxoLG8uZHR5cGUpLHNoYXBlOmgsZHR5cGU6by5kdHlwZX19fV07amg8WGgubGVuZ3RoO2poKyspe2QoWGhbamhdKX12YXIgWWgsJGg9ZnVuY3Rpb24odCl7dGhpcy52YXJpYWJsZU5hbWVzPVtcIkFcIl07dmFyIGU9dWEoKSxuPXRbMF0scj10WzFdO3RoaXMub3V0cHV0U2hhcGU9dCx0aGlzLnVzZXJDb2RlPVwiXFxuICAgICAgdm9pZCBtYWluKCkge1xcbiAgICAgICAgaXZlYzMgY29vcmRzID0gZ2V0T3V0cHV0Q29vcmRzKCk7XFxuICAgICAgICBpbnQgdGV4UiA9IGNvb3Jkc1swXTtcXG4gICAgICAgIGludCB0ZXhDID0gY29vcmRzWzFdO1xcbiAgICAgICAgaW50IGRlcHRoID0gY29vcmRzWzJdO1xcbiAgICAgICAgdmVjMiB1diA9ICh2ZWMyKHRleEMsIHRleFIpICsgaGFsZkNSKSAvIHZlYzIoXCIrcitcIi4wLCBcIituK1wiLjApO1xcblxcbiAgICAgICAgdmVjNCB2YWx1ZXMgPSBcIitlLnRleHR1cmUyRCtcIihBLCB1dik7XFxuICAgICAgICBmbG9hdCB2YWx1ZTtcXG4gICAgICAgIGlmIChkZXB0aCA9PSAwKSB7XFxuICAgICAgICAgIHZhbHVlID0gdmFsdWVzLnI7XFxuICAgICAgICB9IGVsc2UgaWYgKGRlcHRoID09IDEpIHtcXG4gICAgICAgICAgdmFsdWUgPSB2YWx1ZXMuZztcXG4gICAgICAgIH0gZWxzZSBpZiAoZGVwdGggPT0gMikge1xcbiAgICAgICAgICB2YWx1ZSA9IHZhbHVlcy5iO1xcbiAgICAgICAgfSBlbHNlIGlmIChkZXB0aCA9PSAzKSB7XFxuICAgICAgICAgIHZhbHVlID0gdmFsdWVzLmE7XFxuICAgICAgICB9XFxuXFxuICAgICAgICBzZXRPdXRwdXQoZmxvb3IodmFsdWUgKiAyNTUuMCArIDAuNSkpO1xcbiAgICAgIH1cXG4gICAgXCJ9LFFoPWZ1bmN0aW9uKHQpe3RoaXMudmFyaWFibGVOYW1lcz1bXCJBXCJdLHRoaXMucGFja2VkSW5wdXRzPSExLHRoaXMucGFja2VkT3V0cHV0PSEwO3ZhciBlPXVhKCksbj10WzBdLHI9dFsxXTt0aGlzLm91dHB1dFNoYXBlPXQsdGhpcy51c2VyQ29kZT1cIlxcbiAgICAgIHZvaWQgbWFpbigpIHtcXG4gICAgICAgIGl2ZWMzIGNvb3JkcyA9IGdldE91dHB1dENvb3JkcygpO1xcbiAgICAgICAgaW50IHRleFIgPSBjb29yZHNbMF07XFxuICAgICAgICBpbnQgdGV4QyA9IGNvb3Jkc1sxXTtcXG4gICAgICAgIGludCBkZXB0aCA9IGNvb3Jkc1syXTtcXG5cXG4gICAgICAgIHZlYzQgcmVzdWx0ID0gdmVjNCgwLik7XFxuXFxuICAgICAgICBmb3IoaW50IHJvdz0wOyByb3c8PTE7IHJvdysrKSB7XFxuICAgICAgICAgIGZvcihpbnQgY29sPTA7IGNvbDw9MTsgY29sKyspIHtcXG4gICAgICAgICAgICB0ZXhDID0gY29vcmRzWzFdICsgcm93O1xcbiAgICAgICAgICAgIGRlcHRoID0gY29vcmRzWzJdICsgY29sO1xcblxcbiAgICAgICAgICAgIHZlYzIgdXYgPSAodmVjMih0ZXhDLCB0ZXhSKSArIGhhbGZDUikgL1xcbiAgICAgICAgICAgICAgICAgICAgICAgdmVjMihcIityK1wiLjAsIFwiK24rXCIuMCk7XFxuICAgICAgICAgICAgdmVjNCB2YWx1ZXMgPSBcIitlLnRleHR1cmUyRCtcIihBLCB1dik7XFxuICAgICAgICAgICAgZmxvYXQgdmFsdWU7XFxuICAgICAgICAgICAgaWYgKGRlcHRoID09IDApIHtcXG4gICAgICAgICAgICAgIHZhbHVlID0gdmFsdWVzLnI7XFxuICAgICAgICAgICAgfSBlbHNlIGlmIChkZXB0aCA9PSAxKSB7XFxuICAgICAgICAgICAgICB2YWx1ZSA9IHZhbHVlcy5nO1xcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoZGVwdGggPT0gMikge1xcbiAgICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZXMuYjtcXG4gICAgICAgICAgICB9IGVsc2UgaWYgKGRlcHRoID09IDMpIHtcXG4gICAgICAgICAgICAgIHZhbHVlID0gdmFsdWVzLmE7XFxuICAgICAgICAgICAgfVxcblxcbiAgICAgICAgICAgIHJlc3VsdFtyb3cgKiAyICsgY29sXSA9IGZsb29yKHZhbHVlICogMjU1LjAgKyAwLjUpO1xcbiAgICAgICAgICB9XFxuICAgICAgICB9XFxuXFxuICAgICAgICBcIitlLm91dHB1dCtcIiA9IHJlc3VsdDtcXG4gICAgICB9XFxuICAgIFwifTtmb3IodmFyIEpoPTAsWmg9W3trZXJuZWxOYW1lOlwiRnJvbVBpeGVsc1wiLGJhY2tlbmROYW1lOlwid2ViZ2xcIixrZXJuZWxGdW5jOmZ1bmN0aW9uKHQpe3ZhciBlPXQuaW5wdXRzLG49dC5iYWNrZW5kLHI9dC5hdHRycyxvPWUucGl4ZWxzLGE9ci5udW1DaGFubmVscyxzPVwidW5kZWZpbmVkXCIhPXR5cGVvZiBIVE1MVmlkZW9FbGVtZW50JiZvIGluc3RhbmNlb2YgSFRNTFZpZGVvRWxlbWVudCx1PVwidW5kZWZpbmVkXCIhPXR5cGVvZiBIVE1MSW1hZ2VFbGVtZW50JiZvIGluc3RhbmNlb2YgSFRNTEltYWdlRWxlbWVudCxjPXM/W28udmlkZW9XaWR0aCxvLnZpZGVvSGVpZ2h0XTpbby53aWR0aCxvLmhlaWdodF0sbD1jWzBdLGg9Y1sxXSxmPVtoLGxdLGQ9W2gsbCxhXTsodXx8cykmJihudWxsPT1ZaCYmKFloPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJjYW52YXNcIikuZ2V0Q29udGV4dChcIjJkXCIpKSxZaC5jYW52YXMud2lkdGg9bCxZaC5jYW52YXMuaGVpZ2h0PWgsWWguZHJhd0ltYWdlKG8sMCwwLGwsaCksbz1ZaC5jYW52YXMpO3ZhciBwPW4ubWFrZVRlbnNvckluZm8oZixcImludDMyXCIpO24udGV4RGF0YS5nZXQocC5kYXRhSWQpLnVzYWdlPXp0LlBJWEVMUyxuLmdwZ3B1LnVwbG9hZFBpeGVsRGF0YVRvVGV4dHVyZShuLmdldFRleHR1cmUocC5kYXRhSWQpLG8pO3ZhciB2PWkoKS5nZXRCb29sKFwiV0VCR0xfUEFDS1wiKT9uZXcgUWgoZCk6bmV3ICRoKGQpLG09bi5ydW5XZWJHTFByb2dyYW0odixbcF0sXCJpbnQzMlwiKTtyZXR1cm4gbi5kaXNwb3NlRGF0YShwLmRhdGFJZCksbX19LHtrZXJuZWxOYW1lOlwiTm9uTWF4U3VwcHJlc3Npb25WNVwiLGJhY2tlbmROYW1lOlwid2ViZ2xcIixrZXJuZWxGdW5jOmZ1bmN0aW9uKHQpe3ZhciBlPXQuaW5wdXRzLG49dC5iYWNrZW5kLHI9dC5hdHRycztkbihcInRmLm5vbk1heFN1cHByZXNzaW9uKCkgaW4gd2ViZ2wgbG9ja3MgdGhlIFVJIHRocmVhZC4gQ2FsbCB0Zi5ub25NYXhTdXBwcmVzc2lvbkFzeW5jKCkgaW5zdGVhZFwiKTt2YXIgbz1lLGE9by5ib3hlcyxpPW8uc2NvcmVzLHM9cix1PXMubWF4T3V0cHV0U2l6ZSxjPXMuaW91VGhyZXNob2xkLGw9cy5zY29yZVRocmVzaG9sZCxoPXMuc29mdE5tc1NpZ21hLGY9bixkPVhvKGYucmVhZFN5bmMoYS5kYXRhSWQpLGYucmVhZFN5bmMoaS5kYXRhSWQpLHUsYyxsLGgpO3JldHVybltkLnNlbGVjdGVkSW5kaWNlcyxkLnNlbGVjdGVkU2NvcmVzXX19LHtrZXJuZWxOYW1lOlwiU3F1YXJlXCIsYmFja2VuZE5hbWU6XCJ3ZWJnbFwiLGtlcm5lbEZ1bmM6ZnVuY3Rpb24odCl7dmFyIGU9dC5pbnB1dHMsbj10LmJhY2tlbmQscj1lLngsbz1uLGE9bmV3IENzKHIuc2hhcGUsXCJyZXR1cm4geCAqIHg7XCIpO3JldHVybiBvLnJ1bldlYkdMUHJvZ3JhbShhLFtyXSxyLmR0eXBlKX19LHtrZXJuZWxOYW1lOmV1LGJhY2tlbmROYW1lOlwid2ViZ2xcIixrZXJuZWxGdW5jOmZ1bmN0aW9uKHQpe3ZhciBlPXQuaW5wdXRzLG49dC5iYWNrZW5kLHI9ZSxvPXIuYSxhPXIuYixzPW4sdT1pKCkuZ2V0Qm9vbChcIldFQkdMX1BBQ0tfQklOQVJZX09QRVJBVElPTlNcIik/bmV3IExhKFwicmV0dXJuIChhIC0gYikgKiAoYSAtIGIpO1wiLG8uc2hhcGUsYS5zaGFwZSk6bmV3IEJhKFwicmV0dXJuIChhIC0gYikgKiAoYSAtIGIpO1wiLG8uc2hhcGUsYS5zaGFwZSk7cmV0dXJuIHMuY29tcGlsZUFuZFJ1bih1LFtvLGFdKX19XTtKaDxaaC5sZW5ndGg7SmgrKyl7ZChaaFtKaF0pfWZvcih2YXIgdGY9MCxlZj1be2tlcm5lbE5hbWU6XCJTcXVhcmVcIixncmFkRnVuYzpmdW5jdGlvbih0LGUpe3ZhciBuPWVbMF07cmV0dXJue3g6ZnVuY3Rpb24oKXtyZXR1cm4gdC5tdWwobi50b0Zsb2F0KCkubXVsKDIpKX19fX0se2tlcm5lbE5hbWU6ZXUsZ3JhZEZ1bmM6ZnVuY3Rpb24odCxlKXt2YXIgbj1lWzBdLHI9ZVsxXSxvPU9uKDIpO3JldHVybnthOmZ1bmN0aW9uKCl7cmV0dXJuIGdjKHQsZ2MobyxDYyhuLHIpKSl9LGI6ZnVuY3Rpb24oKXtyZXR1cm4gZ2ModCxnYyhvLENjKHIsbikpKX19fX1dO3RmPGVmLmxlbmd0aDt0ZisrKXtwKGVmW3RmXSl9dmFyIG5mPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gdCgpe31yZXR1cm4gdC5wcm90b3R5cGUuZmV0Y2g9ZnVuY3Rpb24odCxlKXtyZXR1cm4gZmV0Y2godCxlKX0sdC5wcm90b3R5cGUubm93PWZ1bmN0aW9uKCl7cmV0dXJuIHBlcmZvcm1hbmNlLm5vdygpfSx0LnByb3RvdHlwZS5lbmNvZGU9ZnVuY3Rpb24odCxlKXtpZihcInV0Zi04XCIhPT1lJiZcInV0ZjhcIiE9PWUpdGhyb3cgbmV3IEVycm9yKFwiQnJvd3NlcidzIGVuY29kZXIgb25seSBzdXBwb3J0cyB1dGYtOCwgYnV0IGdvdCBcIitlKTtyZXR1cm4gbnVsbD09dGhpcy50ZXh0RW5jb2RlciYmKHRoaXMudGV4dEVuY29kZXI9bmV3IFRleHRFbmNvZGVyKSx0aGlzLnRleHRFbmNvZGVyLmVuY29kZSh0KX0sdC5wcm90b3R5cGUuZGVjb2RlPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIG5ldyBUZXh0RGVjb2RlcihlKS5kZWNvZGUodCl9LHR9KCk7aSgpLmdldChcIklTX0JST1dTRVJcIikmJmkoKS5zZXRQbGF0Zm9ybShcImJyb3dzZXJcIixuZXcgbmYpO3ZhciByZixvZj1mdW5jdGlvbigpe3JldHVybiByZXF1aXJlKFwibm9kZS1mZXRjaFwiKX0sYWY9ZnVuY3Rpb24oKXtmdW5jdGlvbiB0KCl7dGhpcy51dGlsPXJlcXVpcmUoXCJ1dGlsXCIpLHRoaXMudGV4dEVuY29kZXI9bmV3IHRoaXMudXRpbC5UZXh0RW5jb2Rlcn1yZXR1cm4gdC5wcm90b3R5cGUuZmV0Y2g9ZnVuY3Rpb24odCxlKXtyZXR1cm4gbnVsbCE9aSgpLmdsb2JhbC5mZXRjaD9pKCkuZ2xvYmFsLmZldGNoKHQsZSk6KG51bGw9PXJmJiYocmY9b2YoKSkscmYodCxlKSl9LHQucHJvdG90eXBlLm5vdz1mdW5jdGlvbigpe3ZhciB0PXByb2Nlc3MuaHJ0aW1lKCk7cmV0dXJuIDFlMyp0WzBdK3RbMV0vMWU2fSx0LnByb3RvdHlwZS5lbmNvZGU9ZnVuY3Rpb24odCxlKXtpZihcInV0Zi04XCIhPT1lJiZcInV0ZjhcIiE9PWUpdGhyb3cgbmV3IEVycm9yKFwiTm9kZSBidWlsdC1pbiBlbmNvZGVyIG9ubHkgc3VwcG9ydHMgdXRmLTgsIGJ1dCBnb3QgXCIrZSk7cmV0dXJuIHRoaXMudGV4dEVuY29kZXIuZW5jb2RlKHQpfSx0LnByb3RvdHlwZS5kZWNvZGU9ZnVuY3Rpb24odCxlKXtyZXR1cm4gMD09PXQubGVuZ3RoP1wiXCI6bmV3IHRoaXMudXRpbC5UZXh0RGVjb2RlcihlKS5kZWNvZGUodCl9LHR9KCk7aSgpLmdldChcIklTX05PREVcIikmJmkoKS5zZXRQbGF0Zm9ybShcIm5vZGVcIixuZXcgYWYpO3ZhciBzZj17ZmxvYXQzMjo0LGludDMyOjQsdWludDE2OjIsdWludDg6MSxib29sOjF9LHVmPTQ7ZnVuY3Rpb24gY2YodCxlKXtmb3IodmFyIG49e30scj0wLG89ZnVuY3Rpb24oZSl7dmFyIG89ZS5uYW1lLGE9ZS5kdHlwZSxpPWUuc2hhcGUscz1rKGkpLHU9dm9pZCAwO2lmKFwicXVhbnRpemF0aW9uXCJpbiBlKXt2YXIgYz1lLnF1YW50aXphdGlvbjtpZihcInVpbnQ4XCIhPT1jLmR0eXBlJiZcInVpbnQxNlwiIT09Yy5kdHlwZSl0aHJvdyBuZXcgRXJyb3IoXCJXZWlnaHQgXCIrZS5uYW1lK1wiIGhhcyB1bmtub3duIHF1YW50aXphdGlvbiBkdHlwZSBcIitjLmR0eXBlK1wiLiBTdXBwb3J0ZWQgcXVhbnRpemF0aW9uIGR0eXBlcyBhcmU6ICd1aW50OCcgYW5kICd1aW50MTYnLlwiKTt2YXIgbD1zZltjLmR0eXBlXSxoPXQuc2xpY2UocixyK3MqbCksZj1cInVpbnQ4XCI9PT1jLmR0eXBlP25ldyBVaW50OEFycmF5KGgpOm5ldyBVaW50MTZBcnJheShoKTtpZihcImZsb2F0MzJcIj09PWEpdT1GbG9hdDMyQXJyYXkuZnJvbShmLChmdW5jdGlvbih0KXtyZXR1cm4gdCpjLnNjYWxlK2MubWlufSkpO2Vsc2V7aWYoXCJpbnQzMlwiIT09YSl0aHJvdyBuZXcgRXJyb3IoXCJVbnN1cHBvcnRlZCBkdHlwZSBpbiB3ZWlnaHQgJ1wiK28rXCInOiBcIithKTt1PUludDMyQXJyYXkuZnJvbShmLChmdW5jdGlvbih0KXtyZXR1cm4gTWF0aC5yb3VuZCh0KmMuc2NhbGUrYy5taW4pfSkpfXIrPXMqbH1lbHNlIGlmKFwic3RyaW5nXCI9PT1hKXt2YXIgZD1rKGUuc2hhcGUpO3U9W107Zm9yKHZhciBwPTA7cDxkO3ArKyl7dmFyIHY9bmV3IFVpbnQzMkFycmF5KHQuc2xpY2UocixyK3VmKSlbMF07cis9dWY7dmFyIG09bmV3IFVpbnQ4QXJyYXkodC5zbGljZShyLHIrdikpO3UucHVzaChtKSxyKz12fX1lbHNle3ZhciBnPXNmW2FdO2g9dC5zbGljZShyLHIrcypnKTtpZihcImZsb2F0MzJcIj09PWEpdT1uZXcgRmxvYXQzMkFycmF5KGgpO2Vsc2UgaWYoXCJpbnQzMlwiPT09YSl1PW5ldyBJbnQzMkFycmF5KGgpO2Vsc2V7aWYoXCJib29sXCIhPT1hKXRocm93IG5ldyBFcnJvcihcIlVuc3VwcG9ydGVkIGR0eXBlIGluIHdlaWdodCAnXCIrbytcIic6IFwiK2EpO3U9bmV3IFVpbnQ4QXJyYXkoaCl9cis9cypnfW5bb109Rm4odSxpLGEpfSxhPTAsaT1lO2E8aS5sZW5ndGg7YSsrKXtvKGlbYV0pfXJldHVybiBufWZ1bmN0aW9uIGxmKHQpe2lmKG51bGw9PT10KXRocm93IG5ldyBFcnJvcihcIkludmFsaWQgaW5wdXQgdmFsdWU6IFwiK0pTT04uc3RyaW5naWZ5KHQpKTt2YXIgZT0wLG49W107dC5mb3JFYWNoKChmdW5jdGlvbih0KXtpZihlKz10LmJ5dGVMZW5ndGgsbi5wdXNoKHQuYnl0ZUxlbmd0aD09PXQuYnVmZmVyLmJ5dGVMZW5ndGg/dDpuZXcgdC5jb25zdHJ1Y3Rvcih0KSksISh0IGluc3RhbmNlb2YgRmxvYXQzMkFycmF5fHx0IGluc3RhbmNlb2YgSW50MzJBcnJheXx8dCBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkpKXRocm93IG5ldyBFcnJvcihcIlVuc3VwcG9ydGVkIFR5cGVkQXJyYXkgc3VidHlwZTogXCIrdC5jb25zdHJ1Y3Rvci5uYW1lKX0pKTt2YXIgcj1uZXcgVWludDhBcnJheShlKSxvPTA7cmV0dXJuIG4uZm9yRWFjaCgoZnVuY3Rpb24odCl7ci5zZXQobmV3IFVpbnQ4QXJyYXkodC5idWZmZXIpLG8pLG8rPXQuYnl0ZUxlbmd0aH0pKSxyLmJ1ZmZlcn12YXIgaGY9XCJ1bmRlZmluZWRcIiE9dHlwZW9mIEJ1ZmZlciYmKFwidW5kZWZpbmVkXCI9PXR5cGVvZiBCbG9ifHxcInVuZGVmaW5lZFwiPT10eXBlb2YgYXRvYnx8XCJ1bmRlZmluZWRcIj09dHlwZW9mIGJ0b2EpO2Z1bmN0aW9uIGZmKHQpe3JldHVybiBoZj9CdWZmZXIuYnl0ZUxlbmd0aCh0KTpuZXcgQmxvYihbdF0pLnNpemV9ZnVuY3Rpb24gZGYodCl7dmFyIGU9MDt0LmZvckVhY2goKGZ1bmN0aW9uKHQpe2UrPXQuYnl0ZUxlbmd0aH0pKTt2YXIgbj1uZXcgVWludDhBcnJheShlKSxyPTA7cmV0dXJuIHQuZm9yRWFjaCgoZnVuY3Rpb24odCl7bi5zZXQobmV3IFVpbnQ4QXJyYXkodCkscikscis9dC5ieXRlTGVuZ3RofSkpLG4uYnVmZmVyfWZ1bmN0aW9uIHBmKHQpe2Zvcih0PXQudHJpbSgpO3QuZW5kc1dpdGgoXCIvXCIpOyl0PXQuc2xpY2UoMCx0Lmxlbmd0aC0xKTt2YXIgZT10LnNwbGl0KFwiL1wiKTtyZXR1cm4gZVtlLmxlbmd0aC0xXX1mdW5jdGlvbiB2Zih0KXtpZih0Lm1vZGVsVG9wb2xvZ3kgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcil0aHJvdyBuZXcgRXJyb3IoXCJFeHBlY3RlZCBKU09OIG1vZGVsIHRvcG9sb2d5LCByZWNlaXZlZCBBcnJheUJ1ZmZlci5cIik7cmV0dXJue2RhdGVTYXZlZDpuZXcgRGF0ZSxtb2RlbFRvcG9sb2d5VHlwZTpcIkpTT05cIixtb2RlbFRvcG9sb2d5Qnl0ZXM6bnVsbD09dC5tb2RlbFRvcG9sb2d5PzA6ZmYoSlNPTi5zdHJpbmdpZnkodC5tb2RlbFRvcG9sb2d5KSksd2VpZ2h0U3BlY3NCeXRlczpudWxsPT10LndlaWdodFNwZWNzPzA6ZmYoSlNPTi5zdHJpbmdpZnkodC53ZWlnaHRTcGVjcykpLHdlaWdodERhdGFCeXRlczpudWxsPT10LndlaWdodERhdGE/MDp0LndlaWdodERhdGEuYnl0ZUxlbmd0aH19dmFyIG1mPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gdCgpe3RoaXMuc2F2ZVJvdXRlcnM9W10sdGhpcy5sb2FkUm91dGVycz1bXX1yZXR1cm4gdC5nZXRJbnN0YW5jZT1mdW5jdGlvbigpe3JldHVybiBudWxsPT10Lmluc3RhbmNlJiYodC5pbnN0YW5jZT1uZXcgdCksdC5pbnN0YW5jZX0sdC5yZWdpc3RlclNhdmVSb3V0ZXI9ZnVuY3Rpb24oZSl7dC5nZXRJbnN0YW5jZSgpLnNhdmVSb3V0ZXJzLnB1c2goZSl9LHQucmVnaXN0ZXJMb2FkUm91dGVyPWZ1bmN0aW9uKGUpe3QuZ2V0SW5zdGFuY2UoKS5sb2FkUm91dGVycy5wdXNoKGUpfSx0LmdldFNhdmVIYW5kbGVycz1mdW5jdGlvbihlKXtyZXR1cm4gdC5nZXRIYW5kbGVycyhlLFwic2F2ZVwiKX0sdC5nZXRMb2FkSGFuZGxlcnM9ZnVuY3Rpb24oZSxuKXtyZXR1cm4gdC5nZXRIYW5kbGVycyhlLFwibG9hZFwiLG4pfSx0LmdldEhhbmRsZXJzPWZ1bmN0aW9uKGUsbixyKXt2YXIgbz1bXTtyZXR1cm4oXCJsb2FkXCI9PT1uP3QuZ2V0SW5zdGFuY2UoKS5sb2FkUm91dGVyczp0LmdldEluc3RhbmNlKCkuc2F2ZVJvdXRlcnMpLmZvckVhY2goKGZ1bmN0aW9uKHQpe3ZhciBuPXQoZSxyKTtudWxsIT09biYmby5wdXNoKG4pfSkpLG99LHR9KCksZ2Y9XCI6Ly9cIix5Zj1mdW5jdGlvbigpe2Z1bmN0aW9uIHQoKXt0aGlzLm1hbmFnZXJzPXt9fXJldHVybiB0LmdldEluc3RhbmNlPWZ1bmN0aW9uKCl7cmV0dXJuIG51bGw9PXQuaW5zdGFuY2UmJih0Lmluc3RhbmNlPW5ldyB0KSx0Lmluc3RhbmNlfSx0LnJlZ2lzdGVyTWFuYWdlcj1mdW5jdGlvbihlLG4pe0MobnVsbCE9ZSwoZnVuY3Rpb24oKXtyZXR1cm5cInNjaGVtZSBtdXN0IG5vdCBiZSB1bmRlZmluZWQgb3IgbnVsbC5cIn0pKSxlLmVuZHNXaXRoKGdmKSYmKGU9ZS5zbGljZSgwLGUuaW5kZXhPZihnZikpKSxDKGUubGVuZ3RoPjAsKGZ1bmN0aW9uKCl7cmV0dXJuXCJzY2hlbWUgbXVzdCBub3QgYmUgYW4gZW1wdHkgc3RyaW5nLlwifSkpO3ZhciByPXQuZ2V0SW5zdGFuY2UoKTtDKG51bGw9PXIubWFuYWdlcnNbZV0sKGZ1bmN0aW9uKCl7cmV0dXJuXCJBIG1vZGVsIHN0b3JlIG1hbmFnZXIgaXMgYWxyZWFkeSByZWdpc3RlcmVkIGZvciBzY2hlbWUgJ1wiK2UrXCInLlwifSkpLHIubWFuYWdlcnNbZV09bn0sdC5nZXRNYW5hZ2VyPWZ1bmN0aW9uKHQpe3ZhciBlPXRoaXMuZ2V0SW5zdGFuY2UoKS5tYW5hZ2Vyc1t0XTtpZihudWxsPT1lKXRocm93IG5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZGVsIG1hbmFnZXIgZm9yIHNjaGVtZSAnXCIrdCtcIidcIik7cmV0dXJuIGV9LHQuZ2V0U2NoZW1lcz1mdW5jdGlvbigpe3JldHVybiBPYmplY3Qua2V5cyh0aGlzLmdldEluc3RhbmNlKCkubWFuYWdlcnMpfSx0fSgpO2Z1bmN0aW9uIHhmKHQpe2lmKC0xPT09dC5pbmRleE9mKGdmKSl0aHJvdyBuZXcgRXJyb3IoXCJUaGUgdXJsIHN0cmluZyBwcm92aWRlZCBkb2VzIG5vdCBjb250YWluIGEgc2NoZW1lLiBTdXBwb3J0ZWQgc2NoZW1lcyBhcmU6IFwiK3lmLmdldFNjaGVtZXMoKS5qb2luKFwiLFwiKSk7cmV0dXJue3NjaGVtZTp0LnNwbGl0KGdmKVswXSxwYXRoOnQuc3BsaXQoZ2YpWzFdfX1mdW5jdGlvbiBiZih0LGUsbyl7cmV0dXJuIHZvaWQgMD09PW8mJihvPSExKSxuKHRoaXMsdm9pZCAwLHZvaWQgMCwoZnVuY3Rpb24oKXt2YXIgbixhLGkscyx1LGMsbCxoLGY7cmV0dXJuIHIodGhpcywoZnVuY3Rpb24ocil7c3dpdGNoKHIubGFiZWwpe2Nhc2UgMDpyZXR1cm4gQyh0IT09ZSwoZnVuY3Rpb24oKXtyZXR1cm5cIk9sZCBwYXRoIGFuZCBuZXcgcGF0aCBhcmUgdGhlIHNhbWU6ICdcIit0K1wiJ1wifSkpLEMoKG49bWYuZ2V0TG9hZEhhbmRsZXJzKHQpKS5sZW5ndGg+MCwoZnVuY3Rpb24oKXtyZXR1cm5cIkNvcHlpbmcgZmFpbGVkIGJlY2F1c2Ugbm8gbG9hZCBoYW5kbGVyIGlzIGZvdW5kIGZvciBzb3VyY2UgVVJMIFwiK3QrXCIuXCJ9KSksQyhuLmxlbmd0aDwyLChmdW5jdGlvbigpe3JldHVyblwiQ29weWluZyBmYWlsZWQgYmVjYXVzZSBtb3JlIHRoYW4gb25lIChcIituLmxlbmd0aCtcIikgbG9hZCBoYW5kbGVycyBmb3Igc291cmNlIFVSTCBcIit0K1wiLlwifSkpLGE9blswXSxDKChpPW1mLmdldFNhdmVIYW5kbGVycyhlKSkubGVuZ3RoPjAsKGZ1bmN0aW9uKCl7cmV0dXJuXCJDb3B5aW5nIGZhaWxlZCBiZWNhdXNlIG5vIHNhdmUgaGFuZGxlciBpcyBmb3VuZCBmb3IgZGVzdGluYXRpb24gVVJMIFwiK2UrXCIuXCJ9KSksQyhpLmxlbmd0aDwyLChmdW5jdGlvbigpe3JldHVyblwiQ29weWluZyBmYWlsZWQgYmVjYXVzZSBtb3JlIHRoYW4gb25lIChcIituLmxlbmd0aCtcIikgc2F2ZSBoYW5kbGVycyBmb3IgZGVzdGluYXRpb24gVVJMIFwiK2UrXCIuXCJ9KSkscz1pWzBdLHU9eGYodCkuc2NoZW1lLGM9eGYodCkucGF0aCxsPXU9PT14Zih0KS5zY2hlbWUsWzQsYS5sb2FkKCldO2Nhc2UgMTpyZXR1cm4gaD1yLnNlbnQoKSxvJiZsP1s0LHlmLmdldE1hbmFnZXIodSkucmVtb3ZlTW9kZWwoYyldOlszLDNdO2Nhc2UgMjpyLnNlbnQoKSxyLmxhYmVsPTM7Y2FzZSAzOnJldHVybls0LHMuc2F2ZShoKV07Y2FzZSA0OnJldHVybiBmPXIuc2VudCgpLCFvfHxsP1szLDZdOls0LHlmLmdldE1hbmFnZXIodSkucmVtb3ZlTW9kZWwoYyldO2Nhc2UgNTpyLnNlbnQoKSxyLmxhYmVsPTY7Y2FzZSA2OnJldHVyblsyLGYubW9kZWxBcnRpZmFjdHNJbmZvXX19KSl9KSl9dmFyIHdmPVwibW9kZWxzX3N0b3JlXCIsQ2Y9XCJtb2RlbF9pbmZvX3N0b3JlXCI7ZnVuY3Rpb24gRWYoKXtpZighaSgpLmdldEJvb2woXCJJU19CUk9XU0VSXCIpKXRocm93IG5ldyBFcnJvcihcIkZhaWxlZCB0byBvYnRhaW4gSW5kZXhlZERCIGZhY3RvcnkgYmVjYXVzZSB0aGUgY3VycmVudCBlbnZpcm9ubWVudGlzIG5vdCBhIHdlYiBicm93c2VyLlwiKTt2YXIgdD13aW5kb3d8fHNlbGYsZT10LmluZGV4ZWREQnx8dC5tb3pJbmRleGVkREJ8fHQud2Via2l0SW5kZXhlZERCfHx0Lm1zSW5kZXhlZERCfHx0LnNoaW1JbmRleGVkREI7aWYobnVsbD09ZSl0aHJvdyBuZXcgRXJyb3IoXCJUaGUgY3VycmVudCBicm93c2VyIGRvZXMgbm90IGFwcGVhciB0byBzdXBwb3J0IEluZGV4ZWREQi5cIik7cmV0dXJuIGV9ZnVuY3Rpb24gUmYodCl7dmFyIGU9dC5yZXN1bHQ7ZS5jcmVhdGVPYmplY3RTdG9yZSh3Zix7a2V5UGF0aDpcIm1vZGVsUGF0aFwifSksZS5jcmVhdGVPYmplY3RTdG9yZShDZix7a2V5UGF0aDpcIm1vZGVsUGF0aFwifSl9dmFyIElmPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gdCh0KXtpZih0aGlzLmluZGV4ZWREQj1FZigpLG51bGw9PXR8fCF0KXRocm93IG5ldyBFcnJvcihcIkZvciBJbmRleGVkREIsIG1vZGVsUGF0aCBtdXN0IG5vdCBiZSBudWxsLCB1bmRlZmluZWQgb3IgZW1wdHkuXCIpO3RoaXMubW9kZWxQYXRoPXR9cmV0dXJuIHQucHJvdG90eXBlLnNhdmU9ZnVuY3Rpb24odCl7cmV0dXJuIG4odGhpcyx2b2lkIDAsdm9pZCAwLChmdW5jdGlvbigpe3JldHVybiByKHRoaXMsKGZ1bmN0aW9uKGUpe2lmKHQubW9kZWxUb3BvbG9neSBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKXRocm93IG5ldyBFcnJvcihcIkJyb3dzZXJMb2NhbFN0b3JhZ2Uuc2F2ZSgpIGRvZXMgbm90IHN1cHBvcnQgc2F2aW5nIG1vZGVsIHRvcG9sb2d5IGluIGJpbmFyeSBmb3JtYXRzIHlldC5cIik7cmV0dXJuWzIsdGhpcy5kYXRhYmFzZUFjdGlvbih0aGlzLm1vZGVsUGF0aCx0KV19KSl9KSl9LHQucHJvdG90eXBlLmxvYWQ9ZnVuY3Rpb24oKXtyZXR1cm4gbih0aGlzLHZvaWQgMCx2b2lkIDAsKGZ1bmN0aW9uKCl7cmV0dXJuIHIodGhpcywoZnVuY3Rpb24odCl7cmV0dXJuWzIsdGhpcy5kYXRhYmFzZUFjdGlvbih0aGlzLm1vZGVsUGF0aCldfSkpfSkpfSx0LnByb3RvdHlwZS5kYXRhYmFzZUFjdGlvbj1mdW5jdGlvbih0LGUpe3ZhciBuPXRoaXM7cmV0dXJuIG5ldyBQcm9taXNlKChmdW5jdGlvbih0LHIpe3ZhciBvPW4uaW5kZXhlZERCLm9wZW4oXCJ0ZW5zb3JmbG93anNcIiwxKTtvLm9udXBncmFkZW5lZWRlZD1mdW5jdGlvbigpe3JldHVybiBSZihvKX0sby5vbnN1Y2Nlc3M9ZnVuY3Rpb24oKXt2YXIgYT1vLnJlc3VsdDtpZihudWxsPT1lKXt2YXIgaT1hLnRyYW5zYWN0aW9uKHdmLFwicmVhZG9ubHlcIikscz1pLm9iamVjdFN0b3JlKHdmKS5nZXQobi5tb2RlbFBhdGgpO3Mub25zdWNjZXNzPWZ1bmN0aW9uKCl7aWYobnVsbD09cy5yZXN1bHQpcmV0dXJuIGEuY2xvc2UoKSxyKG5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZGVsIHdpdGggcGF0aCAnXCIrbi5tb2RlbFBhdGgrXCInIGluIEluZGV4ZWREQi5cIikpO3Qocy5yZXN1bHQubW9kZWxBcnRpZmFjdHMpfSxzLm9uZXJyb3I9ZnVuY3Rpb24odCl7cmV0dXJuIGEuY2xvc2UoKSxyKHMuZXJyb3IpfSxpLm9uY29tcGxldGU9ZnVuY3Rpb24oKXtyZXR1cm4gYS5jbG9zZSgpfX1lbHNle3ZhciB1LGM9dmYoZSksbD1hLnRyYW5zYWN0aW9uKENmLFwicmVhZHdyaXRlXCIpLGg9bC5vYmplY3RTdG9yZShDZiksZj1oLnB1dCh7bW9kZWxQYXRoOm4ubW9kZWxQYXRoLG1vZGVsQXJ0aWZhY3RzSW5mbzpjfSk7Zi5vbnN1Y2Nlc3M9ZnVuY3Rpb24oKXt2YXIgbz0odT1hLnRyYW5zYWN0aW9uKHdmLFwicmVhZHdyaXRlXCIpKS5vYmplY3RTdG9yZSh3ZikucHV0KHttb2RlbFBhdGg6bi5tb2RlbFBhdGgsbW9kZWxBcnRpZmFjdHM6ZSxtb2RlbEFydGlmYWN0c0luZm86Y30pO28ub25zdWNjZXNzPWZ1bmN0aW9uKCl7cmV0dXJuIHQoe21vZGVsQXJ0aWZhY3RzSW5mbzpjfSl9LG8ub25lcnJvcj1mdW5jdGlvbih0KXt2YXIgZT0oaD1sLm9iamVjdFN0b3JlKENmKSkuZGVsZXRlKG4ubW9kZWxQYXRoKTtlLm9uc3VjY2Vzcz1mdW5jdGlvbigpe3JldHVybiBhLmNsb3NlKCkscihvLmVycm9yKX0sZS5vbmVycm9yPWZ1bmN0aW9uKHQpe3JldHVybiBhLmNsb3NlKCkscihvLmVycm9yKX19fSxmLm9uZXJyb3I9ZnVuY3Rpb24odCl7cmV0dXJuIGEuY2xvc2UoKSxyKGYuZXJyb3IpfSxsLm9uY29tcGxldGU9ZnVuY3Rpb24oKXtudWxsPT11P2EuY2xvc2UoKTp1Lm9uY29tcGxldGU9ZnVuY3Rpb24oKXtyZXR1cm4gYS5jbG9zZSgpfX19fSxvLm9uZXJyb3I9ZnVuY3Rpb24odCl7cmV0dXJuIHIoby5lcnJvcil9fSkpfSx0LlVSTF9TQ0hFTUU9XCJpbmRleGVkZGI6Ly9cIix0fSgpLGtmPWZ1bmN0aW9uKHQpe3JldHVybiBpKCkuZ2V0Qm9vbChcIklTX0JST1dTRVJcIikmJiFBcnJheS5pc0FycmF5KHQpJiZ0LnN0YXJ0c1dpdGgoSWYuVVJMX1NDSEVNRSk/KGU9dC5zbGljZShJZi5VUkxfU0NIRU1FLmxlbmd0aCksbmV3IElmKGUpKTpudWxsO3ZhciBlfTttZi5yZWdpc3RlclNhdmVSb3V0ZXIoa2YpLG1mLnJlZ2lzdGVyTG9hZFJvdXRlcihrZik7dmFyIFNmPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gdCgpe3RoaXMuaW5kZXhlZERCPUVmKCl9cmV0dXJuIHQucHJvdG90eXBlLmxpc3RNb2RlbHM9ZnVuY3Rpb24oKXtyZXR1cm4gbih0aGlzLHZvaWQgMCx2b2lkIDAsKGZ1bmN0aW9uKCl7dmFyIHQ9dGhpcztyZXR1cm4gcih0aGlzLChmdW5jdGlvbihlKXtyZXR1cm5bMixuZXcgUHJvbWlzZSgoZnVuY3Rpb24oZSxuKXt2YXIgcj10LmluZGV4ZWREQi5vcGVuKFwidGVuc29yZmxvd2pzXCIsMSk7ci5vbnVwZ3JhZGVuZWVkZWQ9ZnVuY3Rpb24oKXtyZXR1cm4gUmYocil9LHIub25zdWNjZXNzPWZ1bmN0aW9uKCl7dmFyIHQ9ci5yZXN1bHQsbz10LnRyYW5zYWN0aW9uKENmLFwicmVhZG9ubHlcIiksYT1vLm9iamVjdFN0b3JlKENmKS5nZXRBbGwoKTthLm9uc3VjY2Vzcz1mdW5jdGlvbigpe2Zvcih2YXIgdD17fSxuPTAscj1hLnJlc3VsdDtuPHIubGVuZ3RoO24rKyl7dmFyIG89cltuXTt0W28ubW9kZWxQYXRoXT1vLm1vZGVsQXJ0aWZhY3RzSW5mb31lKHQpfSxhLm9uZXJyb3I9ZnVuY3Rpb24oZSl7cmV0dXJuIHQuY2xvc2UoKSxuKGEuZXJyb3IpfSxvLm9uY29tcGxldGU9ZnVuY3Rpb24oKXtyZXR1cm4gdC5jbG9zZSgpfX0sci5vbmVycm9yPWZ1bmN0aW9uKHQpe3JldHVybiBuKHIuZXJyb3IpfX0pKV19KSl9KSl9LHQucHJvdG90eXBlLnJlbW92ZU1vZGVsPWZ1bmN0aW9uKHQpe3JldHVybiBuKHRoaXMsdm9pZCAwLHZvaWQgMCwoZnVuY3Rpb24oKXt2YXIgZT10aGlzO3JldHVybiByKHRoaXMsKGZ1bmN0aW9uKG4pe3ZhciByO3JldHVybiB0PShyPXQpLnN0YXJ0c1dpdGgoSWYuVVJMX1NDSEVNRSk/ci5zbGljZShJZi5VUkxfU0NIRU1FLmxlbmd0aCk6cixbMixuZXcgUHJvbWlzZSgoZnVuY3Rpb24obixyKXt2YXIgbz1lLmluZGV4ZWREQi5vcGVuKFwidGVuc29yZmxvd2pzXCIsMSk7by5vbnVwZ3JhZGVuZWVkZWQ9ZnVuY3Rpb24oKXtyZXR1cm4gUmYobyl9LG8ub25zdWNjZXNzPWZ1bmN0aW9uKCl7dmFyIGUsYT1vLnJlc3VsdCxpPWEudHJhbnNhY3Rpb24oQ2YsXCJyZWFkd3JpdGVcIikscz1pLm9iamVjdFN0b3JlKENmKSx1PXMuZ2V0KHQpO3Uub25zdWNjZXNzPWZ1bmN0aW9uKCl7aWYobnVsbD09dS5yZXN1bHQpcmV0dXJuIGEuY2xvc2UoKSxyKG5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZGVsIHdpdGggcGF0aCAnXCIrdCtcIicgaW4gSW5kZXhlZERCLlwiKSk7dmFyIG89cy5kZWxldGUodCksaT1mdW5jdGlvbigpe3ZhciBvPShlPWEudHJhbnNhY3Rpb24od2YsXCJyZWFkd3JpdGVcIikpLm9iamVjdFN0b3JlKHdmKS5kZWxldGUodCk7by5vbnN1Y2Nlc3M9ZnVuY3Rpb24oKXtyZXR1cm4gbih1LnJlc3VsdC5tb2RlbEFydGlmYWN0c0luZm8pfSxvLm9uZXJyb3I9ZnVuY3Rpb24odCl7cmV0dXJuIHIodS5lcnJvcil9fTtvLm9uc3VjY2Vzcz1pLG8ub25lcnJvcj1mdW5jdGlvbih0KXtyZXR1cm4gaSgpLGEuY2xvc2UoKSxyKHUuZXJyb3IpfX0sdS5vbmVycm9yPWZ1bmN0aW9uKHQpe3JldHVybiBhLmNsb3NlKCkscih1LmVycm9yKX0saS5vbmNvbXBsZXRlPWZ1bmN0aW9uKCl7bnVsbD09ZT9hLmNsb3NlKCk6ZS5vbmNvbXBsZXRlPWZ1bmN0aW9uKCl7cmV0dXJuIGEuY2xvc2UoKX19fSxvLm9uZXJyb3I9ZnVuY3Rpb24odCl7cmV0dXJuIHIoby5lcnJvcil9fSkpXX0pKX0pKX0sdH0oKTtpZihpKCkuZ2V0Qm9vbChcIklTX0JST1dTRVJcIikpdHJ5e3lmLnJlZ2lzdGVyTWFuYWdlcihJZi5VUkxfU0NIRU1FLG5ldyBTZil9Y2F0Y2godCl7fXZhciBBZj1cIi9cIixEZj1cInRlbnNvcmZsb3dqc19tb2RlbHNcIixUZj1cImluZm9cIixOZj1cIm1vZGVsX3RvcG9sb2d5XCIsRmY9XCJ3ZWlnaHRfc3BlY3NcIixfZj1cIndlaWdodF9kYXRhXCIsT2Y9XCJtb2RlbF9tZXRhZGF0YVwiO2Z1bmN0aW9uIE1mKHQpe3JldHVybntpbmZvOltEZix0LFRmXS5qb2luKEFmKSx0b3BvbG9neTpbRGYsdCxOZl0uam9pbihBZiksd2VpZ2h0U3BlY3M6W0RmLHQsRmZdLmpvaW4oQWYpLHdlaWdodERhdGE6W0RmLHQsX2ZdLmpvaW4oQWYpLG1vZGVsTWV0YWRhdGE6W0RmLHQsT2ZdLmpvaW4oQWYpfX1mdW5jdGlvbiBCZih0KXt2YXIgZT10LnNwbGl0KEFmKTtpZihlLmxlbmd0aDwzKXRocm93IG5ldyBFcnJvcihcIkludmFsaWQga2V5IGZvcm1hdDogXCIrdCk7cmV0dXJuIGUuc2xpY2UoMSxlLmxlbmd0aC0xKS5qb2luKEFmKX12YXIgUGY9ZnVuY3Rpb24oKXtmdW5jdGlvbiB0KHQpe2lmKCFpKCkuZ2V0Qm9vbChcIklTX0JST1dTRVJcIil8fFwidW5kZWZpbmVkXCI9PXR5cGVvZiB3aW5kb3d8fHZvaWQgMD09PXdpbmRvdy5sb2NhbFN0b3JhZ2UpdGhyb3cgbmV3IEVycm9yKFwiVGhlIGN1cnJlbnQgZW52aXJvbm1lbnQgZG9lcyBub3Qgc3VwcG9ydCBsb2NhbCBzdG9yYWdlLlwiKTtpZih0aGlzLkxTPXdpbmRvdy5sb2NhbFN0b3JhZ2UsbnVsbD09dHx8IXQpdGhyb3cgbmV3IEVycm9yKFwiRm9yIGxvY2FsIHN0b3JhZ2UsIG1vZGVsUGF0aCBtdXN0IG5vdCBiZSBudWxsLCB1bmRlZmluZWQgb3IgZW1wdHkuXCIpO3RoaXMubW9kZWxQYXRoPXQsdGhpcy5rZXlzPU1mKHRoaXMubW9kZWxQYXRoKX1yZXR1cm4gdC5wcm90b3R5cGUuc2F2ZT1mdW5jdGlvbih0KXtyZXR1cm4gbih0aGlzLHZvaWQgMCx2b2lkIDAsKGZ1bmN0aW9uKCl7dmFyIGUsbixvO3JldHVybiByKHRoaXMsKGZ1bmN0aW9uKHIpe2lmKHQubW9kZWxUb3BvbG9neSBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKXRocm93IG5ldyBFcnJvcihcIkJyb3dzZXJMb2NhbFN0b3JhZ2Uuc2F2ZSgpIGRvZXMgbm90IHN1cHBvcnQgc2F2aW5nIG1vZGVsIHRvcG9sb2d5IGluIGJpbmFyeSBmb3JtYXRzIHlldC5cIik7ZT1KU09OLnN0cmluZ2lmeSh0Lm1vZGVsVG9wb2xvZ3kpLG49SlNPTi5zdHJpbmdpZnkodC53ZWlnaHRTcGVjcyksbz12Zih0KTt0cnl7cmV0dXJuIHRoaXMuTFMuc2V0SXRlbSh0aGlzLmtleXMuaW5mbyxKU09OLnN0cmluZ2lmeShvKSksdGhpcy5MUy5zZXRJdGVtKHRoaXMua2V5cy50b3BvbG9neSxlKSx0aGlzLkxTLnNldEl0ZW0odGhpcy5rZXlzLndlaWdodFNwZWNzLG4pLHRoaXMuTFMuc2V0SXRlbSh0aGlzLmtleXMud2VpZ2h0RGF0YSxmdW5jdGlvbih0KXtpZihoZilyZXR1cm4gQnVmZmVyLmZyb20odCkudG9TdHJpbmcoXCJiYXNlNjRcIik7Zm9yKHZhciBlPW5ldyBVaW50OEFycmF5KHQpLG49XCJcIixyPTAsbz1lLmxlbmd0aDtyPG87cisrKW4rPVN0cmluZy5mcm9tQ2hhckNvZGUoZVtyXSk7cmV0dXJuIGJ0b2Eobil9KHQud2VpZ2h0RGF0YSkpLHRoaXMuTFMuc2V0SXRlbSh0aGlzLmtleXMubW9kZWxNZXRhZGF0YSxKU09OLnN0cmluZ2lmeSh7Zm9ybWF0OnQuZm9ybWF0LGdlbmVyYXRlZEJ5OnQuZ2VuZXJhdGVkQnksY29udmVydGVkQnk6dC5jb252ZXJ0ZWRCeSx1c2VyRGVmaW5lZE1ldGFkYXRhOnQudXNlckRlZmluZWRNZXRhZGF0YX0pKSxbMix7bW9kZWxBcnRpZmFjdHNJbmZvOm99XX1jYXRjaCh0KXt0aHJvdyB0aGlzLkxTLnJlbW92ZUl0ZW0odGhpcy5rZXlzLmluZm8pLHRoaXMuTFMucmVtb3ZlSXRlbSh0aGlzLmtleXMudG9wb2xvZ3kpLHRoaXMuTFMucmVtb3ZlSXRlbSh0aGlzLmtleXMud2VpZ2h0U3BlY3MpLHRoaXMuTFMucmVtb3ZlSXRlbSh0aGlzLmtleXMud2VpZ2h0RGF0YSksdGhpcy5MUy5yZW1vdmVJdGVtKHRoaXMua2V5cy5tb2RlbE1ldGFkYXRhKSxuZXcgRXJyb3IoXCJGYWlsZWQgdG8gc2F2ZSBtb2RlbCAnXCIrdGhpcy5tb2RlbFBhdGgrXCInIHRvIGxvY2FsIHN0b3JhZ2U6IHNpemUgcXVvdGEgYmVpbmcgZXhjZWVkZWQgaXMgYSBwb3NzaWJsZSBjYXVzZSBvZiB0aGlzIGZhaWx1cmU6IG1vZGVsVG9wb2xvZ3lCeXRlcz1cIitvLm1vZGVsVG9wb2xvZ3lCeXRlcytcIiwgd2VpZ2h0U3BlY3NCeXRlcz1cIitvLndlaWdodFNwZWNzQnl0ZXMrXCIsIHdlaWdodERhdGFCeXRlcz1cIitvLndlaWdodERhdGFCeXRlcytcIi5cIil9cmV0dXJuWzJdfSkpfSkpfSx0LnByb3RvdHlwZS5sb2FkPWZ1bmN0aW9uKCl7cmV0dXJuIG4odGhpcyx2b2lkIDAsdm9pZCAwLChmdW5jdGlvbigpe3ZhciB0LGUsbixvLGEsaSxzO3JldHVybiByKHRoaXMsKGZ1bmN0aW9uKHIpe2lmKG51bGw9PSh0PUpTT04ucGFyc2UodGhpcy5MUy5nZXRJdGVtKHRoaXMua2V5cy5pbmZvKSkpKXRocm93IG5ldyBFcnJvcihcIkluIGxvY2FsIHN0b3JhZ2UsIHRoZXJlIGlzIG5vIG1vZGVsIHdpdGggbmFtZSAnXCIrdGhpcy5tb2RlbFBhdGgrXCInXCIpO2lmKFwiSlNPTlwiIT09dC5tb2RlbFRvcG9sb2d5VHlwZSl0aHJvdyBuZXcgRXJyb3IoXCJCcm93c2VyTG9jYWxTdG9yYWdlIGRvZXMgbm90IHN1cHBvcnQgbG9hZGluZyBub24tSlNPTiBtb2RlbCB0b3BvbG9neSB5ZXQuXCIpO2lmKGU9e30sbnVsbD09KG49SlNPTi5wYXJzZSh0aGlzLkxTLmdldEl0ZW0odGhpcy5rZXlzLnRvcG9sb2d5KSkpKXRocm93IG5ldyBFcnJvcihcIkluIGxvY2FsIHN0b3JhZ2UsIHRoZSB0b3BvbG9neSBvZiBtb2RlbCAnXCIrdGhpcy5tb2RlbFBhdGgrXCInIGlzIG1pc3NpbmcuXCIpO2lmKGUubW9kZWxUb3BvbG9neT1uLG51bGw9PShvPUpTT04ucGFyc2UodGhpcy5MUy5nZXRJdGVtKHRoaXMua2V5cy53ZWlnaHRTcGVjcykpKSl0aHJvdyBuZXcgRXJyb3IoXCJJbiBsb2NhbCBzdG9yYWdlLCB0aGUgd2VpZ2h0IHNwZWNzIG9mIG1vZGVsICdcIit0aGlzLm1vZGVsUGF0aCtcIicgYXJlIG1pc3NpbmcuXCIpO2lmKGUud2VpZ2h0U3BlY3M9byxudWxsIT0oYT10aGlzLkxTLmdldEl0ZW0odGhpcy5rZXlzLm1vZGVsTWV0YWRhdGEpKSYmKGk9SlNPTi5wYXJzZShhKSxlLmZvcm1hdD1pLmZvcm1hdCxlLmdlbmVyYXRlZEJ5PWkuZ2VuZXJhdGVkQnksZS5jb252ZXJ0ZWRCeT1pLmNvbnZlcnRlZEJ5LGUudXNlckRlZmluZWRNZXRhZGF0YT1pLnVzZXJEZWZpbmVkTWV0YWRhdGEpLG51bGw9PShzPXRoaXMuTFMuZ2V0SXRlbSh0aGlzLmtleXMud2VpZ2h0RGF0YSkpKXRocm93IG5ldyBFcnJvcihcIkluIGxvY2FsIHN0b3JhZ2UsIHRoZSBiaW5hcnkgd2VpZ2h0IHZhbHVlcyBvZiBtb2RlbCAnXCIrdGhpcy5tb2RlbFBhdGgrXCInIGFyZSBtaXNzaW5nLlwiKTtyZXR1cm4gZS53ZWlnaHREYXRhPWZ1bmN0aW9uKHQpe2lmKGhmKXt2YXIgZT1CdWZmZXIuZnJvbSh0LFwiYmFzZTY0XCIpO3JldHVybiBlLmJ1ZmZlci5zbGljZShlLmJ5dGVPZmZzZXQsZS5ieXRlT2Zmc2V0K2UuYnl0ZUxlbmd0aCl9Zm9yKHZhciBuPWF0b2IodCkscj1uZXcgVWludDhBcnJheShuLmxlbmd0aCksbz0wO288bi5sZW5ndGg7KytvKXIuc2V0KFtuLmNoYXJDb2RlQXQobyldLG8pO3JldHVybiByLmJ1ZmZlcn0ocyksWzIsZV19KSl9KSl9LHQuVVJMX1NDSEVNRT1cImxvY2Fsc3RvcmFnZTovL1wiLHR9KCksTGY9ZnVuY3Rpb24odCl7cmV0dXJuIGkoKS5nZXRCb29sKFwiSVNfQlJPV1NFUlwiKSYmIUFycmF5LmlzQXJyYXkodCkmJnQuc3RhcnRzV2l0aChQZi5VUkxfU0NIRU1FKT8oZT10LnNsaWNlKFBmLlVSTF9TQ0hFTUUubGVuZ3RoKSxuZXcgUGYoZSkpOm51bGw7dmFyIGV9O21mLnJlZ2lzdGVyU2F2ZVJvdXRlcihMZiksbWYucmVnaXN0ZXJMb2FkUm91dGVyKExmKTt2YXIgV2Y9ZnVuY3Rpb24oKXtmdW5jdGlvbiB0KCl7QyhpKCkuZ2V0Qm9vbChcIklTX0JST1dTRVJcIiksKGZ1bmN0aW9uKCl7cmV0dXJuXCJDdXJyZW50IGVudmlyb25tZW50IGlzIG5vdCBhIHdlYiBicm93c2VyXCJ9KSksQyhcInVuZGVmaW5lZFwiPT10eXBlb2Ygd2luZG93fHx2b2lkIDAhPT13aW5kb3cubG9jYWxTdG9yYWdlLChmdW5jdGlvbigpe3JldHVyblwiQ3VycmVudCBicm93c2VyIGRvZXMgbm90IGFwcGVhciB0byBzdXBwb3J0IGxvY2FsU3RvcmFnZVwifSkpLHRoaXMuTFM9d2luZG93LmxvY2FsU3RvcmFnZX1yZXR1cm4gdC5wcm90b3R5cGUubGlzdE1vZGVscz1mdW5jdGlvbigpe3JldHVybiBuKHRoaXMsdm9pZCAwLHZvaWQgMCwoZnVuY3Rpb24oKXt2YXIgdCxlLG4sbyxhLGk7cmV0dXJuIHIodGhpcywoZnVuY3Rpb24ocil7Zm9yKHQ9e30sZT1EZitBZixuPUFmK1RmLG89MDtvPHRoaXMuTFMubGVuZ3RoOysrbykoYT10aGlzLkxTLmtleShvKSkuc3RhcnRzV2l0aChlKSYmYS5lbmRzV2l0aChuKSYmKGk9QmYoYSksdFtpXT1KU09OLnBhcnNlKHRoaXMuTFMuZ2V0SXRlbShhKSkpO3JldHVyblsyLHRdfSkpfSkpfSx0LnByb3RvdHlwZS5yZW1vdmVNb2RlbD1mdW5jdGlvbih0KXtyZXR1cm4gbih0aGlzLHZvaWQgMCx2b2lkIDAsKGZ1bmN0aW9uKCl7dmFyIGUsbjtyZXR1cm4gcih0aGlzLChmdW5jdGlvbihyKXt2YXIgbztpZih0PShvPXQpLnN0YXJ0c1dpdGgoUGYuVVJMX1NDSEVNRSk/by5zbGljZShQZi5VUkxfU0NIRU1FLmxlbmd0aCk6byxlPU1mKHQpLG51bGw9PXRoaXMuTFMuZ2V0SXRlbShlLmluZm8pKXRocm93IG5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZGVsIGF0IHBhdGggJ1wiK3QrXCInXCIpO3JldHVybiBuPUpTT04ucGFyc2UodGhpcy5MUy5nZXRJdGVtKGUuaW5mbykpLHRoaXMuTFMucmVtb3ZlSXRlbShlLmluZm8pLHRoaXMuTFMucmVtb3ZlSXRlbShlLnRvcG9sb2d5KSx0aGlzLkxTLnJlbW92ZUl0ZW0oZS53ZWlnaHRTcGVjcyksdGhpcy5MUy5yZW1vdmVJdGVtKGUud2VpZ2h0RGF0YSksWzIsbl19KSl9KSl9LHR9KCk7aWYoaSgpLmdldEJvb2woXCJJU19CUk9XU0VSXCIpKXRyeXt5Zi5yZWdpc3Rlck1hbmFnZXIoUGYuVVJMX1NDSEVNRSxuZXcgV2YpfWNhdGNoKHQpe312YXIgVWY9XCJtb2RlbFwiLFZmPVwiLmpzb25cIix6Zj1cIi53ZWlnaHRzLmJpblwiO2Z1bmN0aW9uIEdmKHQpe3JldHVybiBuZXcgUHJvbWlzZSgoZnVuY3Rpb24odCl7cmV0dXJuIHNldFRpbWVvdXQodCl9KSkudGhlbih0KX12YXIgSGY9ZnVuY3Rpb24oKXtmdW5jdGlvbiB0KGUpe2lmKCFpKCkuZ2V0Qm9vbChcIklTX0JST1dTRVJcIikpdGhyb3cgbmV3IEVycm9yKFwiYnJvd3NlckRvd25sb2FkcygpIGNhbm5vdCBwcm9jZWVkIGJlY2F1c2UgdGhlIGN1cnJlbnQgZW52aXJvbm1lbnQgaXMgbm90IGEgYnJvd3Nlci5cIik7ZS5zdGFydHNXaXRoKHQuVVJMX1NDSEVNRSkmJihlPWUuc2xpY2UodC5VUkxfU0NIRU1FLmxlbmd0aCkpLG51bGwhPWUmJjAhPT1lLmxlbmd0aHx8KGU9VWYpLHRoaXMubW9kZWxUb3BvbG9neUZpbGVOYW1lPWUrVmYsdGhpcy53ZWlnaHREYXRhRmlsZU5hbWU9ZSt6Zn1yZXR1cm4gdC5wcm90b3R5cGUuc2F2ZT1mdW5jdGlvbih0KXtyZXR1cm4gbih0aGlzLHZvaWQgMCx2b2lkIDAsKGZ1bmN0aW9uKCl7dmFyIGUsbixvLGEsaSxzO3JldHVybiByKHRoaXMsKGZ1bmN0aW9uKHIpe3N3aXRjaChyLmxhYmVsKXtjYXNlIDA6aWYoXCJ1bmRlZmluZWRcIj09dHlwZW9mIGRvY3VtZW50KXRocm93IG5ldyBFcnJvcihcIkJyb3dzZXIgZG93bmxvYWRzIGFyZSBub3Qgc3VwcG9ydGVkIGluIHRoaXMgZW52aXJvbm1lbnQgc2luY2UgYGRvY3VtZW50YCBpcyBub3QgcHJlc2VudFwiKTtpZihlPXdpbmRvdy5VUkwuY3JlYXRlT2JqZWN0VVJMKG5ldyBCbG9iKFt0LndlaWdodERhdGFdLHt0eXBlOlwiYXBwbGljYXRpb24vb2N0ZXQtc3RyZWFtXCJ9KSksISh0Lm1vZGVsVG9wb2xvZ3kgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikpcmV0dXJuWzMsMV07dGhyb3cgbmV3IEVycm9yKFwiQnJvd3NlckRvd25sb2Fkcy5zYXZlKCkgZG9lcyBub3Qgc3VwcG9ydCBzYXZpbmcgbW9kZWwgdG9wb2xvZ3kgaW4gYmluYXJ5IGZvcm1hdHMgeWV0LlwiKTtjYXNlIDE6cmV0dXJuIG49W3twYXRoczpbXCIuL1wiK3RoaXMud2VpZ2h0RGF0YUZpbGVOYW1lXSx3ZWlnaHRzOnQud2VpZ2h0U3BlY3N9XSxvPXttb2RlbFRvcG9sb2d5OnQubW9kZWxUb3BvbG9neSxmb3JtYXQ6dC5mb3JtYXQsZ2VuZXJhdGVkQnk6dC5nZW5lcmF0ZWRCeSxjb252ZXJ0ZWRCeTp0LmNvbnZlcnRlZEJ5LHdlaWdodHNNYW5pZmVzdDpufSxhPXdpbmRvdy5VUkwuY3JlYXRlT2JqZWN0VVJMKG5ldyBCbG9iKFtKU09OLnN0cmluZ2lmeShvKV0se3R5cGU6XCJhcHBsaWNhdGlvbi9qc29uXCJ9KSksKGk9bnVsbD09dGhpcy5qc29uQW5jaG9yP2RvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJhXCIpOnRoaXMuanNvbkFuY2hvcikuZG93bmxvYWQ9dGhpcy5tb2RlbFRvcG9sb2d5RmlsZU5hbWUsaS5ocmVmPWEsWzQsR2YoKGZ1bmN0aW9uKCl7cmV0dXJuIGkuZGlzcGF0Y2hFdmVudChuZXcgTW91c2VFdmVudChcImNsaWNrXCIpKX0pKV07Y2FzZSAyOnJldHVybiByLnNlbnQoKSxudWxsPT10LndlaWdodERhdGE/WzMsNF06KChzPW51bGw9PXRoaXMud2VpZ2h0RGF0YUFuY2hvcj9kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYVwiKTp0aGlzLndlaWdodERhdGFBbmNob3IpLmRvd25sb2FkPXRoaXMud2VpZ2h0RGF0YUZpbGVOYW1lLHMuaHJlZj1lLFs0LEdmKChmdW5jdGlvbigpe3JldHVybiBzLmRpc3BhdGNoRXZlbnQobmV3IE1vdXNlRXZlbnQoXCJjbGlja1wiKSl9KSldKTtjYXNlIDM6ci5zZW50KCksci5sYWJlbD00O2Nhc2UgNDpyZXR1cm5bMix7bW9kZWxBcnRpZmFjdHNJbmZvOnZmKHQpfV19fSkpfSkpfSx0LlVSTF9TQ0hFTUU9XCJkb3dubG9hZHM6Ly9cIix0fSgpLHFmPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gdCh0KXtpZihudWxsPT10fHx0Lmxlbmd0aDwxKXRocm93IG5ldyBFcnJvcihcIldoZW4gY2FsbGluZyBicm93c2VyRmlsZXMsIGF0IGxlYXN0IDEgZmlsZSBpcyByZXF1aXJlZCwgYnV0IHJlY2VpdmVkIFwiK3QpO3RoaXMuZmlsZXM9dH1yZXR1cm4gdC5wcm90b3R5cGUubG9hZD1mdW5jdGlvbigpe3JldHVybiBuKHRoaXMsdm9pZCAwLHZvaWQgMCwoZnVuY3Rpb24oKXt2YXIgdCxlLG49dGhpcztyZXR1cm4gcih0aGlzLChmdW5jdGlvbihyKXtyZXR1cm4gdD10aGlzLmZpbGVzWzBdLGU9dGhpcy5maWxlcy5zbGljZSgxKSxbMixuZXcgUHJvbWlzZSgoZnVuY3Rpb24ocixvKXt2YXIgYT1uZXcgRmlsZVJlYWRlcjthLm9ubG9hZD1mdW5jdGlvbihhKXt2YXIgaT1KU09OLnBhcnNlKGEudGFyZ2V0LnJlc3VsdCkscz1pLm1vZGVsVG9wb2xvZ3k7aWYobnVsbCE9cyl7MD09PWUubGVuZ3RoJiZyKHttb2RlbFRvcG9sb2d5OnN9KTt2YXIgdT1pLndlaWdodHNNYW5pZmVzdDtpZihudWxsIT11KXt2YXIgYzt0cnl7Yz1uLmNoZWNrTWFuaWZlc3RBbmRXZWlnaHRGaWxlcyh1LGUpfWNhdGNoKHQpe3JldHVybiB2b2lkIG8odCl9dmFyIGw9W10saD1bXSxmPVtdO3UuZm9yRWFjaCgoZnVuY3Rpb24odCl7dC5wYXRocy5mb3JFYWNoKChmdW5jdGlvbih0KXtoLnB1c2godCksZi5wdXNoKG51bGwpfSkpLGwucHVzaC5hcHBseShsLHQud2VpZ2h0cyl9KSksdS5mb3JFYWNoKChmdW5jdGlvbih0KXt0LnBhdGhzLmZvckVhY2goKGZ1bmN0aW9uKHQpe3ZhciBlPW5ldyBGaWxlUmVhZGVyO2Uub25sb2FkPWZ1bmN0aW9uKGUpe3ZhciBuPWUudGFyZ2V0LnJlc3VsdCxvPWguaW5kZXhPZih0KTtmW29dPW4sLTE9PT1mLmluZGV4T2YobnVsbCkmJnIoe21vZGVsVG9wb2xvZ3k6cyx3ZWlnaHRTcGVjczpsLHdlaWdodERhdGE6ZGYoZiksZm9ybWF0OmkuZm9ybWF0LGdlbmVyYXRlZEJ5OmkuZ2VuZXJhdGVkQnksY29udmVydGVkQnk6aS5jb252ZXJ0ZWRCeSx1c2VyRGVmaW5lZE1ldGFkYXRhOmkudXNlckRlZmluZWRNZXRhZGF0YX0pfSxlLm9uZXJyb3I9ZnVuY3Rpb24oZSl7cmV0dXJuIG8oXCJGYWlsZWQgdG8gd2VpZ2h0cyBkYXRhIGZyb20gZmlsZSBvZiBwYXRoICdcIit0K1wiJy5cIil9LGUucmVhZEFzQXJyYXlCdWZmZXIoY1t0XSl9KSl9KSl9ZWxzZSBvKG5ldyBFcnJvcihcIndlaWdodE1hbmlmZXN0IGZpZWxkIGlzIG1pc3NpbmcgZnJvbSBmaWxlIFwiK3QubmFtZSkpfWVsc2UgbyhuZXcgRXJyb3IoXCJtb2RlbFRvcG9sb2d5IGZpZWxkIGlzIG1pc3NpbmcgZnJvbSBmaWxlIFwiK3QubmFtZSkpfSxhLm9uZXJyb3I9ZnVuY3Rpb24oZSl7cmV0dXJuIG8oXCJGYWlsZWQgdG8gcmVhZCBtb2RlbCB0b3BvbG9neSBhbmQgd2VpZ2h0cyBtYW5pZmVzdCBKU09OIGZyb20gZmlsZSAnXCIrdC5uYW1lK1wiJy4gQnJvd3NlckZpbGVzIHN1cHBvcnRzIGxvYWRpbmcgS2VyYXMtc3R5bGUgdGYuTW9kZWwgYXJ0aWZhY3RzIG9ubHkuXCIpfSxhLnJlYWRBc1RleHQodCl9KSldfSkpfSkpfSx0LnByb3RvdHlwZS5jaGVja01hbmlmZXN0QW5kV2VpZ2h0RmlsZXM9ZnVuY3Rpb24odCxlKXtmb3IodmFyIG49W10scj1lLm1hcCgoZnVuY3Rpb24odCl7cmV0dXJuIHBmKHQubmFtZSl9KSksbz17fSxhPTAsaT10O2E8aS5sZW5ndGg7YSsrKXtpW2FdLnBhdGhzLmZvckVhY2goKGZ1bmN0aW9uKHQpe3ZhciBhPXBmKHQpO2lmKC0xIT09bi5pbmRleE9mKGEpKXRocm93IG5ldyBFcnJvcihcIkR1cGxpY2F0ZSBmaWxlIGJhc2VuYW1lIGZvdW5kIGluIHdlaWdodHMgbWFuaWZlc3Q6ICdcIithK1wiJ1wiKTtpZihuLnB1c2goYSksLTE9PT1yLmluZGV4T2YoYSkpdGhyb3cgbmV3IEVycm9yKFwiV2VpZ2h0IGZpbGUgd2l0aCBiYXNlbmFtZSAnXCIrYStcIicgaXMgbm90IHByb3ZpZGVkLlwiKTtvW3RdPWVbci5pbmRleE9mKGEpXX0pKX1pZihuLmxlbmd0aCE9PWUubGVuZ3RoKXRocm93IG5ldyBFcnJvcihcIk1pc21hdGNoIGluIHRoZSBudW1iZXIgb2YgZmlsZXMgaW4gd2VpZ2h0cyBtYW5pZmVzdCAoXCIrbi5sZW5ndGgrXCIpIGFuZCB0aGUgbnVtYmVyIG9mIHdlaWdodCBmaWxlcyBwcm92aWRlZCAoXCIrZS5sZW5ndGgrXCIpLlwiKTtyZXR1cm4gb30sdH0oKTtmdW5jdGlvbiBLZih0LGUsbixyKXshZnVuY3Rpb24odCl7QyhudWxsIT10JiZBcnJheS5pc0FycmF5KHQpJiZ0Lmxlbmd0aD4wLChmdW5jdGlvbigpe3JldHVyblwicHJvbWlzZXMgbXVzdCBiZSBhIG5vbmUgZW1wdHkgYXJyYXlcIn0pKX0odCksZnVuY3Rpb24odCxlKXtDKHQ+PTAmJnQ8PTEsKGZ1bmN0aW9uKCl7cmV0dXJuXCJQcm9ncmVzcyBmcmFjdGlvbiBtdXN0IGJlIGluIHJhbmdlIFswLCAxXSwgYnV0IGdvdCBzdGFydEZyYWN0aW9uIFwiK3R9KSksQyhlPj0wJiZlPD0xLChmdW5jdGlvbigpe3JldHVyblwiUHJvZ3Jlc3MgZnJhY3Rpb24gbXVzdCBiZSBpbiByYW5nZSBbMCwgMV0sIGJ1dCBnb3QgZW5kRnJhY3Rpb24gXCIrZX0pKSxDKGU+PXQsKGZ1bmN0aW9uKCl7cmV0dXJuXCJzdGFydEZyYWN0aW9uIG11c3QgYmUgbm8gbW9yZSB0aGFuIGVuZEZyYWN0aW9uLCBidXQgZ290IHN0YXJ0RnJhY3Rpb24gXCIrdCtcIiBhbmQgZW5kRnJhY3Rpb24gXCIrZX0pKX0obj1udWxsPT1uPzA6bixyPW51bGw9PXI/MTpyKTt2YXIgbz0wO3JldHVybiBQcm9taXNlLmFsbCh0Lm1hcCgoZnVuY3Rpb24oYSl7cmV0dXJuIGEudGhlbigoZnVuY3Rpb24oYSl7dmFyIGk9bisgKytvL3QubGVuZ3RoKihyLW4pO3JldHVybiBlKGkpLGF9KSksYX0pKSl9ZnVuY3Rpb24gamYodCxlKXtyZXR1cm4gbih0aGlzLHZvaWQgMCx2b2lkIDAsKGZ1bmN0aW9uKCl7dmFyIG4sbyxhLHMsdSxjLGwsaCxmO3JldHVybiByKHRoaXMsKGZ1bmN0aW9uKHIpe3N3aXRjaChyLmxhYmVsKXtjYXNlIDA6cmV0dXJuIG51bGw9PWUmJihlPXt9KSxuPW51bGw9PWUuZmV0Y2hGdW5jP2koKS5wbGF0Zm9ybS5mZXRjaDplLmZldGNoRnVuYyxvPXQubWFwKChmdW5jdGlvbih0KXtyZXR1cm4gbih0LGUucmVxdWVzdEluaXQse2lzQmluYXJ5OiEwfSl9KSksYT0wLHM9LjUsbnVsbCE9ZS5vblByb2dyZXNzP1szLDJdOls0LFByb21pc2UuYWxsKG8pXTtjYXNlIDE6cmV0dXJuIHU9ci5zZW50KCksWzMsNF07Y2FzZSAyOnJldHVybls0LEtmKG8sZS5vblByb2dyZXNzLGEscyldO2Nhc2UgMzp1PXIuc2VudCgpLHIubGFiZWw9NDtjYXNlIDQ6cmV0dXJuIGM9dS5tYXAoKGZ1bmN0aW9uKHQpe3JldHVybiB0LmFycmF5QnVmZmVyKCl9KSksbD0uNSxoPTEsbnVsbCE9ZS5vblByb2dyZXNzP1szLDZdOls0LFByb21pc2UuYWxsKGMpXTtjYXNlIDU6cmV0dXJuIGY9ci5zZW50KCksWzMsOF07Y2FzZSA2OnJldHVybls0LEtmKGMsZS5vblByb2dyZXNzLGwsaCldO2Nhc2UgNzpmPXIuc2VudCgpLHIubGFiZWw9ODtjYXNlIDg6cmV0dXJuWzIsZl19fSkpfSkpfWZ1bmN0aW9uIFhmKHQpe3ZhciBlPXRoaXM7cmV0dXJuIGZ1bmN0aW9uKG8sYSxpKXtyZXR1cm4gdm9pZCAwPT09YSYmKGE9XCJcIiksbihlLHZvaWQgMCx2b2lkIDAsKGZ1bmN0aW9uKCl7dmFyIGUsbixzLHUsYyxsLGgsZixkLHA7cmV0dXJuIHIodGhpcywoZnVuY3Rpb24ocil7c3dpdGNoKHIubGFiZWwpe2Nhc2UgMDppZihlPW8ubWFwKChmdW5jdGlvbigpe3JldHVybiExfSkpLG49e30scz1udWxsIT1pP2kubWFwKChmdW5jdGlvbigpe3JldHVybiExfSkpOltdLHU9W10sby5mb3JFYWNoKChmdW5jdGlvbih0LHIpe3ZhciBvPTA7dC53ZWlnaHRzLmZvckVhY2goKGZ1bmN0aW9uKHQpe3ZhciBhPVwicXVhbnRpemF0aW9uXCJpbiB0P3QucXVhbnRpemF0aW9uLmR0eXBlOnQuZHR5cGUsYz1zZlthXSprKHQuc2hhcGUpLGw9ZnVuY3Rpb24oKXtlW3JdPSEwLG51bGw9PW5bcl0mJihuW3JdPVtdKSxuW3JdLnB1c2goe21hbmlmZXN0RW50cnk6dCxncm91cE9mZnNldDpvLHNpemVCeXRlczpjfSl9O251bGwhPWk/aS5mb3JFYWNoKChmdW5jdGlvbihlLG4pe2U9PT10Lm5hbWUmJihsKCksc1tuXT0hMCl9KSk6bCgpLHUucHVzaCh0Lm5hbWUpLG8rPWN9KSl9KSksIXMuZXZlcnkoKGZ1bmN0aW9uKHQpe3JldHVybiB0fSkpKXRocm93IGM9aS5maWx0ZXIoKGZ1bmN0aW9uKHQsZSl7cmV0dXJuIXNbZV19KSksbmV3IEVycm9yKFwiQ291bGQgbm90IGZpbmQgd2VpZ2h0cyBpbiBtYW5pZmVzdCB3aXRoIG5hbWVzOiBcIitjLmpvaW4oXCIsIFwiKStcIi4gXFxuTWFuaWZlc3QgSlNPTiBoYXMgd2VpZ2h0cyB3aXRoIG5hbWVzOiBcIit1LmpvaW4oXCIsIFwiKStcIi5cIik7cmV0dXJuIGw9ZS5yZWR1Y2UoKGZ1bmN0aW9uKHQsZSxuKXtyZXR1cm4gZSYmdC5wdXNoKG4pLHR9KSxbXSksaD1bXSxsLmZvckVhY2goKGZ1bmN0aW9uKHQpe29bdF0ucGF0aHMuZm9yRWFjaCgoZnVuY3Rpb24odCl7dmFyIGU9YSsoYS5lbmRzV2l0aChcIi9cIik/XCJcIjpcIi9cIikrdDtoLnB1c2goZSl9KSl9KSksWzQsdChoKV07Y2FzZSAxOnJldHVybiBmPXIuc2VudCgpLGQ9e30scD0wLGwuZm9yRWFjaCgoZnVuY3Rpb24odCl7Zm9yKHZhciBlPW9bdF0ucGF0aHMubGVuZ3RoLHI9MCxhPTA7YTxlO2ErKylyKz1mW3ArYV0uYnl0ZUxlbmd0aDtmb3IodmFyIGk9bmV3IEFycmF5QnVmZmVyKHIpLHM9bmV3IFVpbnQ4QXJyYXkoaSksdT0wLGM9MDtjPGU7YysrKXt2YXIgbD1uZXcgVWludDhBcnJheShmW3ArY10pO3Muc2V0KGwsdSksdSs9bC5ieXRlTGVuZ3RofW5bdF0uZm9yRWFjaCgoZnVuY3Rpb24odCl7dmFyIGU9Y2YoaS5zbGljZSh0Lmdyb3VwT2Zmc2V0LHQuZ3JvdXBPZmZzZXQrdC5zaXplQnl0ZXMpLFt0Lm1hbmlmZXN0RW50cnldKTtmb3IodmFyIG4gaW4gZSlkW25dPWVbbl19KSkscCs9ZX0pKSxbMixkXX19KSl9KSl9fW1mLnJlZ2lzdGVyU2F2ZVJvdXRlcigoZnVuY3Rpb24odCl7cmV0dXJuIGkoKS5nZXRCb29sKFwiSVNfQlJPV1NFUlwiKSYmIUFycmF5LmlzQXJyYXkodCkmJnQuc3RhcnRzV2l0aChIZi5VUkxfU0NIRU1FKT9mdW5jdGlvbih0KXt2b2lkIDA9PT10JiYodD1cIm1vZGVsXCIpO3JldHVybiBuZXcgSGYodCl9KHQuc2xpY2UoSGYuVVJMX1NDSEVNRS5sZW5ndGgpKTpudWxsfSkpO3ZhciBZZj1mdW5jdGlvbigpe2Z1bmN0aW9uIHQodCxlKXtpZih0aGlzLkRFRkFVTFRfTUVUSE9EPVwiUE9TVFwiLG51bGw9PWUmJihlPXt9KSx0aGlzLndlaWdodFBhdGhQcmVmaXg9ZS53ZWlnaHRQYXRoUHJlZml4LHRoaXMub25Qcm9ncmVzcz1lLm9uUHJvZ3Jlc3MsbnVsbCE9ZS5mZXRjaEZ1bmM/KEMoXCJmdW5jdGlvblwiPT10eXBlb2YgZS5mZXRjaEZ1bmMsKGZ1bmN0aW9uKCl7cmV0dXJuXCJNdXN0IHBhc3MgYSBmdW5jdGlvbiB0aGF0IG1hdGNoZXMgdGhlIHNpZ25hdHVyZSBvZiBgZmV0Y2hgIChzZWUgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL0ZldGNoX0FQSSlcIn0pKSx0aGlzLmZldGNoPWUuZmV0Y2hGdW5jKTp0aGlzLmZldGNoPWkoKS5wbGF0Zm9ybS5mZXRjaCxDKG51bGwhPXQmJnQubGVuZ3RoPjAsKGZ1bmN0aW9uKCl7cmV0dXJuXCJVUkwgcGF0aCBmb3IgaHR0cCBtdXN0IG5vdCBiZSBudWxsLCB1bmRlZmluZWQgb3IgZW1wdHkuXCJ9KSksQXJyYXkuaXNBcnJheSh0KSYmQygyPT09dC5sZW5ndGgsKGZ1bmN0aW9uKCl7cmV0dXJuXCJVUkwgcGF0aHMgZm9yIGh0dHAgbXVzdCBoYXZlIGEgbGVuZ3RoIG9mIDIsIChhY3R1YWwgbGVuZ3RoIGlzIFwiK3QubGVuZ3RoK1wiKS5cIn0pKSx0aGlzLnBhdGg9dCxudWxsIT1lLnJlcXVlc3RJbml0JiZudWxsIT1lLnJlcXVlc3RJbml0LmJvZHkpdGhyb3cgbmV3IEVycm9yKFwicmVxdWVzdEluaXQgaXMgZXhwZWN0ZWQgdG8gaGF2ZSBubyBwcmUtZXhpc3RpbmcgYm9keSwgYnV0IGhhcyBvbmUuXCIpO3RoaXMucmVxdWVzdEluaXQ9ZS5yZXF1ZXN0SW5pdHx8e319cmV0dXJuIHQucHJvdG90eXBlLnNhdmU9ZnVuY3Rpb24odCl7cmV0dXJuIG4odGhpcyx2b2lkIDAsdm9pZCAwLChmdW5jdGlvbigpe3ZhciBlLG4sbyxhO3JldHVybiByKHRoaXMsKGZ1bmN0aW9uKHIpe3N3aXRjaChyLmxhYmVsKXtjYXNlIDA6aWYodC5tb2RlbFRvcG9sb2d5IGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpdGhyb3cgbmV3IEVycm9yKFwiQnJvd3NlckhUVFBSZXF1ZXN0LnNhdmUoKSBkb2VzIG5vdCBzdXBwb3J0IHNhdmluZyBtb2RlbCB0b3BvbG9neSBpbiBiaW5hcnkgZm9ybWF0cyB5ZXQuXCIpO3JldHVybihlPU9iamVjdC5hc3NpZ24oe21ldGhvZDp0aGlzLkRFRkFVTFRfTUVUSE9EfSx0aGlzLnJlcXVlc3RJbml0KSkuYm9keT1uZXcgRm9ybURhdGEsbj1be3BhdGhzOltcIi4vbW9kZWwud2VpZ2h0cy5iaW5cIl0sd2VpZ2h0czp0LndlaWdodFNwZWNzfV0sbz17bW9kZWxUb3BvbG9neTp0Lm1vZGVsVG9wb2xvZ3ksZm9ybWF0OnQuZm9ybWF0LGdlbmVyYXRlZEJ5OnQuZ2VuZXJhdGVkQnksY29udmVydGVkQnk6dC5jb252ZXJ0ZWRCeSx1c2VyRGVmaW5lZE1ldGFkYXRhOnQudXNlckRlZmluZWRNZXRhZGF0YSx3ZWlnaHRzTWFuaWZlc3Q6bn0sZS5ib2R5LmFwcGVuZChcIm1vZGVsLmpzb25cIixuZXcgQmxvYihbSlNPTi5zdHJpbmdpZnkobyldLHt0eXBlOlwiYXBwbGljYXRpb24vanNvblwifSksXCJtb2RlbC5qc29uXCIpLG51bGwhPXQud2VpZ2h0RGF0YSYmZS5ib2R5LmFwcGVuZChcIm1vZGVsLndlaWdodHMuYmluXCIsbmV3IEJsb2IoW3Qud2VpZ2h0RGF0YV0se3R5cGU6XCJhcHBsaWNhdGlvbi9vY3RldC1zdHJlYW1cIn0pLFwibW9kZWwud2VpZ2h0cy5iaW5cIiksWzQsdGhpcy5mZXRjaCh0aGlzLnBhdGgsZSldO2Nhc2UgMTppZigoYT1yLnNlbnQoKSkub2spcmV0dXJuWzIse21vZGVsQXJ0aWZhY3RzSW5mbzp2Zih0KSxyZXNwb25zZXM6W2FdfV07dGhyb3cgbmV3IEVycm9yKFwiQnJvd3NlckhUVFBSZXF1ZXN0LnNhdmUoKSBmYWlsZWQgZHVlIHRvIEhUVFAgcmVzcG9uc2Ugc3RhdHVzIFwiK2Euc3RhdHVzK1wiLlwiKX19KSl9KSl9LHQucHJvdG90eXBlLmxvYWQ9ZnVuY3Rpb24oKXtyZXR1cm4gbih0aGlzLHZvaWQgMCx2b2lkIDAsKGZ1bmN0aW9uKCl7dmFyIHQsZSxuLG8sYSxpLHMsdSxjLGwsaCxmO3JldHVybiByKHRoaXMsKGZ1bmN0aW9uKHIpe3N3aXRjaChyLmxhYmVsKXtjYXNlIDA6cmV0dXJuWzQsdGhpcy5mZXRjaCh0aGlzLnBhdGgsdGhpcy5yZXF1ZXN0SW5pdCldO2Nhc2UgMTppZighKHQ9ci5zZW50KCkpLm9rKXRocm93IG5ldyBFcnJvcihcIlJlcXVlc3QgdG8gXCIrdGhpcy5wYXRoK1wiIGZhaWxlZCB3aXRoIHN0YXR1cyBjb2RlIFwiK3Quc3RhdHVzK1wiLiBQbGVhc2UgdmVyaWZ5IHRoaXMgVVJMIHBvaW50cyB0byB0aGUgbW9kZWwgSlNPTiBvZiB0aGUgbW9kZWwgdG8gbG9hZC5cIik7ci5sYWJlbD0yO2Nhc2UgMjpyZXR1cm4gci50cnlzLnB1c2goWzIsNCwsNV0pLFs0LHQuanNvbigpXTtjYXNlIDM6cmV0dXJuIGU9ci5zZW50KCksWzMsNV07Y2FzZSA0OnRocm93IHIuc2VudCgpLG49XCJGYWlsZWQgdG8gcGFyc2UgbW9kZWwgSlNPTiBvZiByZXNwb25zZSBmcm9tIFwiK3RoaXMucGF0aCtcIi5cIix0aGlzLnBhdGguZW5kc1dpdGgoXCIucGJcIik/bis9XCIgWW91ciBwYXRoIGNvbnRhaW5zIGEgLnBiIGZpbGUgZXh0ZW5zaW9uLiBTdXBwb3J0IGZvciAucGIgbW9kZWxzIGhhdmUgYmVlbiByZW1vdmVkIGluIFRlbnNvckZsb3cuanMgMS4wIGluIGZhdm9yIG9mIC5qc29uIG1vZGVscy4gWW91IGNhbiByZS1jb252ZXJ0IHlvdXIgUHl0aG9uIFRlbnNvckZsb3cgbW9kZWwgdXNpbmcgdGhlIFRlbnNvckZsb3cuanMgMS4wIGNvbnZlcnNpb24gc2NyaXB0cyBvciB5b3UgY2FuIGNvbnZlcnQgeW91ci5wYiBtb2RlbHMgd2l0aCB0aGUgJ3BiMmpzb24nTlBNIHNjcmlwdCBpbiB0aGUgdGVuc29yZmxvdy90ZmpzLWNvbnZlcnRlciByZXBvc2l0b3J5LlwiOm4rPVwiIFBsZWFzZSBtYWtlIHN1cmUgdGhlIHNlcnZlciBpcyBzZXJ2aW5nIHZhbGlkIEpTT04gZm9yIHRoaXMgcmVxdWVzdC5cIixuZXcgRXJyb3Iobik7Y2FzZSA1OmlmKG89ZS5tb2RlbFRvcG9sb2d5LGE9ZS53ZWlnaHRzTWFuaWZlc3QsaT1lLmdlbmVyYXRlZEJ5LHM9ZS5jb252ZXJ0ZWRCeSx1PWUuZm9ybWF0LGM9ZS51c2VyRGVmaW5lZE1ldGFkYXRhLG51bGw9PW8mJm51bGw9PWEpdGhyb3cgbmV3IEVycm9yKFwiVGhlIEpTT04gZnJvbSBIVFRQIHBhdGggXCIrdGhpcy5wYXRoK1wiIGNvbnRhaW5zIG5laXRoZXIgbW9kZWwgdG9wb2xvZ3kgb3IgbWFuaWZlc3QgZm9yIHdlaWdodHMuXCIpO3JldHVybiBudWxsPT1hP1szLDddOls0LHRoaXMubG9hZFdlaWdodHMoYSldO2Nhc2UgNjpmPXIuc2VudCgpLGw9ZlswXSxoPWZbMV0sci5sYWJlbD03O2Nhc2UgNzpyZXR1cm5bMix7bW9kZWxUb3BvbG9neTpvLHdlaWdodFNwZWNzOmwsd2VpZ2h0RGF0YTpoLHVzZXJEZWZpbmVkTWV0YWRhdGE6YyxnZW5lcmF0ZWRCeTppLGNvbnZlcnRlZEJ5OnMsZm9ybWF0OnV9XX19KSl9KSl9LHQucHJvdG90eXBlLmxvYWRXZWlnaHRzPWZ1bmN0aW9uKHQpe3JldHVybiBuKHRoaXMsdm9pZCAwLHZvaWQgMCwoZnVuY3Rpb24oKXt2YXIgZSxuLG8sYSxpLHMsdSxjLGwsaCxmO3JldHVybiByKHRoaXMsKGZ1bmN0aW9uKHIpe3N3aXRjaChyLmxhYmVsKXtjYXNlIDA6Zm9yKGU9QXJyYXkuaXNBcnJheSh0aGlzLnBhdGgpP3RoaXMucGF0aFsxXTp0aGlzLnBhdGgsbj1mdW5jdGlvbih0KXt2YXIgZT10Lmxhc3RJbmRleE9mKFwiL1wiKSxuPXQubGFzdEluZGV4T2YoXCI/XCIpLHI9dC5zdWJzdHJpbmcoMCxlKSxvPW4+ZT90LnN1YnN0cmluZyhuKTpcIlwiO3JldHVybltyK1wiL1wiLG9dfShlKSxvPW5bMF0sYT1uWzFdLGk9dGhpcy53ZWlnaHRQYXRoUHJlZml4fHxvLHM9W10sdT0wLGM9dDt1PGMubGVuZ3RoO3UrKylsPWNbdV0scy5wdXNoLmFwcGx5KHMsbC53ZWlnaHRzKTtyZXR1cm4gaD1bXSx0LmZvckVhY2goKGZ1bmN0aW9uKHQpe3QucGF0aHMuZm9yRWFjaCgoZnVuY3Rpb24odCl7aC5wdXNoKGkrdCthKX0pKX0pKSxbNCxqZihoLHtyZXF1ZXN0SW5pdDp0aGlzLnJlcXVlc3RJbml0LGZldGNoRnVuYzp0aGlzLmZldGNoLG9uUHJvZ3Jlc3M6dGhpcy5vblByb2dyZXNzfSldO2Nhc2UgMTpyZXR1cm4gZj1yLnNlbnQoKSxbMixbcyxkZihmKV1dfX0pKX0pKX0sdC5VUkxfU0NIRU1FX1JFR0VYPS9eaHR0cHM/OlxcL1xcLy8sdH0oKTtmdW5jdGlvbiAkZih0KXtyZXR1cm4gbnVsbCE9dC5tYXRjaChZZi5VUkxfU0NIRU1FX1JFR0VYKX12YXIgUWY9ZnVuY3Rpb24odCxlKXtpZihcInVuZGVmaW5lZFwiPT10eXBlb2YgZmV0Y2gpcmV0dXJuIG51bGw7cmV0dXJuKEFycmF5LmlzQXJyYXkodCk/dC5ldmVyeSgoZnVuY3Rpb24odCl7cmV0dXJuICRmKHQpfSkpOiRmKHQpKT9KZih0LHtvblByb2dyZXNzOmV9KTpudWxsfTtmdW5jdGlvbiBKZih0LGUpe3JldHVybiBuZXcgWWYodCxlKX1tZi5yZWdpc3RlclNhdmVSb3V0ZXIoUWYpLG1mLnJlZ2lzdGVyTG9hZFJvdXRlcihRZik7dmFyIFpmPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gdCh0KXt0aGlzLm1vZGVsQXJ0aWZhY3RzPXR9cmV0dXJuIHQucHJvdG90eXBlLmxvYWQ9ZnVuY3Rpb24oKXtyZXR1cm4gbih0aGlzLHZvaWQgMCx2b2lkIDAsKGZ1bmN0aW9uKCl7cmV0dXJuIHIodGhpcywoZnVuY3Rpb24odCl7cmV0dXJuWzIsdGhpcy5tb2RlbEFydGlmYWN0c119KSl9KSl9LHR9KCksdGQ9ZnVuY3Rpb24oKXtmdW5jdGlvbiB0KHQpe3RoaXMuc2F2ZUhhbmRsZXI9dH1yZXR1cm4gdC5wcm90b3R5cGUuc2F2ZT1mdW5jdGlvbih0KXtyZXR1cm4gbih0aGlzLHZvaWQgMCx2b2lkIDAsKGZ1bmN0aW9uKCl7cmV0dXJuIHIodGhpcywoZnVuY3Rpb24oZSl7cmV0dXJuWzIsdGhpcy5zYXZlSGFuZGxlcih0KV19KSl9KSl9LHR9KCk7dmFyIGVkPU9iamVjdC5mcmVlemUoe2Jyb3dzZXJGaWxlczpmdW5jdGlvbih0KXtyZXR1cm4gbmV3IHFmKHQpfSxicm93c2VySFRUUFJlcXVlc3Q6ZnVuY3Rpb24odCxlKXtyZXR1cm4gSmYodCxlKX0sY29uY2F0ZW5hdGVBcnJheUJ1ZmZlcnM6ZGYsZGVjb2RlV2VpZ2h0czpjZixlbmNvZGVXZWlnaHRzOmZ1bmN0aW9uKHQsZSl7cmV0dXJuIG4odGhpcyx2b2lkIDAsdm9pZCAwLChmdW5jdGlvbigpe3ZhciBvLGEsaSxzLHUsYz10aGlzO3JldHVybiByKHRoaXMsKGZ1bmN0aW9uKGwpe3N3aXRjaChsLmxhYmVsKXtjYXNlIDA6Zm9yKG89W10sYT1bXSxpPUFycmF5LmlzQXJyYXkodCk/dC5tYXAoKGZ1bmN0aW9uKHQpe3JldHVybiB0Lm5hbWV9KSk6T2JqZWN0LmtleXModCkscz1mdW5jdGlvbihzKXt2YXIgdT1pW3NdLGw9QXJyYXkuaXNBcnJheSh0KT90W3NdLnRlbnNvcjp0W3VdO2lmKFwiZmxvYXQzMlwiIT09bC5kdHlwZSYmXCJpbnQzMlwiIT09bC5kdHlwZSYmXCJib29sXCIhPT1sLmR0eXBlJiZcInN0cmluZ1wiIT09bC5kdHlwZSl0aHJvdyBuZXcgRXJyb3IoXCJVbnN1cHBvcnRlZCBkdHlwZSBpbiB3ZWlnaHQgJ1wiK3UrXCInOiBcIitsLmR0eXBlKTt2YXIgaD17bmFtZTp1LHNoYXBlOmwuc2hhcGUsZHR5cGU6bC5kdHlwZX07aWYoXCJzdHJpbmdcIj09PWwuZHR5cGUpe3ZhciBmPW5ldyBQcm9taXNlKChmdW5jdGlvbih0KXtyZXR1cm4gbihjLHZvaWQgMCx2b2lkIDAsKGZ1bmN0aW9uKCl7dmFyIGUsbixvLGEsaSxzLHU7cmV0dXJuIHIodGhpcywoZnVuY3Rpb24ocil7c3dpdGNoKHIubGFiZWwpe2Nhc2UgMDpyZXR1cm5bNCxsLmJ5dGVzKCldO2Nhc2UgMTpmb3IoZT1yLnNlbnQoKSxuPWUucmVkdWNlKChmdW5jdGlvbih0LGUpe3JldHVybiB0K2UubGVuZ3RofSksMCkrdWYqZS5sZW5ndGgsbz1uZXcgVWludDhBcnJheShuKSxhPTAsaT0wO2k8ZS5sZW5ndGg7aSsrKXM9ZVtpXSx1PW5ldyBVaW50OEFycmF5KG5ldyBVaW50MzJBcnJheShbcy5sZW5ndGhdKS5idWZmZXIpLG8uc2V0KHUsYSksYSs9dWYsby5zZXQocyxhKSxhKz1zLmxlbmd0aDtyZXR1cm4gdChvKSxbMl19fSkpfSkpfSkpO2EucHVzaChmKX1lbHNlIGEucHVzaChsLmRhdGEoKSk7bnVsbCE9ZSYmKGguZ3JvdXA9ZSksby5wdXNoKGgpfSx1PTA7dTxpLmxlbmd0aDsrK3Upcyh1KTtyZXR1cm5bNCxQcm9taXNlLmFsbChhKV07Y2FzZSAxOnJldHVyblsyLHtkYXRhOmxmKGwuc2VudCgpKSxzcGVjczpvfV19fSkpfSkpfSxmcm9tTWVtb3J5OmZ1bmN0aW9uKHQsZSxuLHIpe3JldHVybiAxPT09YXJndW1lbnRzLmxlbmd0aD9udWxsIT10Lm1vZGVsVG9wb2xvZ3l8fG51bGwhPXQud2VpZ2h0U3BlY3M/bmV3IFpmKHQpOihjb25zb2xlLndhcm4oXCJQbGVhc2UgY2FsbCB0Zi5pby5mcm9tTWVtb3J5KCkgd2l0aCBvbmx5IG9uZSBhcmd1bWVudC4gVGhlIGFyZ3VtZW50IHNob3VsZCBiZSBvZiB0eXBlIE1vZGVsQXJ0aWZhY3RzLiBUaGUgbXVsdGktYXJndW1lbnQgc2lnbmF0dXJlIG9mIHRmLmlvLmZyb21NZW1vcnkoKSBoYXMgYmVlbiBkZXByZWNhdGVkIGFuZCB3aWxsIGJlIHJlbW92ZWQgaW4gYSBmdXR1cmUgcmVsZWFzZS5cIiksbmV3IFpmKHttb2RlbFRvcG9sb2d5OnR9KSk6KGNvbnNvbGUud2FybihcIlBsZWFzZSBjYWxsIHRmLmlvLmZyb21NZW1vcnkoKSB3aXRoIG9ubHkgb25lIGFyZ3VtZW50LiBUaGUgYXJndW1lbnQgc2hvdWxkIGJlIG9mIHR5cGUgTW9kZWxBcnRpZmFjdHMuIFRoZSBtdWx0aS1hcmd1bWVudCBzaWduYXR1cmUgb2YgdGYuaW8uZnJvbU1lbW9yeSgpIGhhcyBiZWVuIGRlcHJlY2F0ZWQgYW5kIHdpbGwgYmUgcmVtb3ZlZCBpbiBhIGZ1dHVyZSByZWxlYXNlLlwiKSxuZXcgWmYoe21vZGVsVG9wb2xvZ3k6dCx3ZWlnaHRTcGVjczplLHdlaWdodERhdGE6bix0cmFpbmluZ0NvbmZpZzpyfSkpfSxnZXRMb2FkSGFuZGxlcnM6ZnVuY3Rpb24odCxlKXtyZXR1cm4gbWYuZ2V0TG9hZEhhbmRsZXJzKHQsZSl9LGdldE1vZGVsQXJ0aWZhY3RzSW5mb0ZvckpTT046dmYsZ2V0U2F2ZUhhbmRsZXJzOmZ1bmN0aW9uKHQpe3JldHVybiBtZi5nZXRTYXZlSGFuZGxlcnModCl9LGh0dHA6SmYsaXNIVFRQU2NoZW1lOiRmLGxvYWRXZWlnaHRzOmZ1bmN0aW9uKHQsZSxvLGEpe3JldHVybiB2b2lkIDA9PT1lJiYoZT1cIlwiKSxuKHRoaXMsdm9pZCAwLHZvaWQgMCwoZnVuY3Rpb24oKXtyZXR1cm4gcih0aGlzLChmdW5jdGlvbihuKXtyZXR1cm5bMixYZigoZnVuY3Rpb24odCl7cmV0dXJuIGpmKHQse3JlcXVlc3RJbml0OmF9KX0pKSh0LGUsbyldfSkpfSkpfSxyZWdpc3RlckxvYWRSb3V0ZXI6ZnVuY3Rpb24odCl7cmV0dXJuIG1mLnJlZ2lzdGVyTG9hZFJvdXRlcih0KX0scmVnaXN0ZXJTYXZlUm91dGVyOmZ1bmN0aW9uKHQpe3JldHVybiBtZi5yZWdpc3RlclNhdmVSb3V0ZXIodCl9LHdlaWdodHNMb2FkZXJGYWN0b3J5OlhmLHdpdGhTYXZlSGFuZGxlcjpmdW5jdGlvbih0KXtyZXR1cm4gbmV3IHRkKHQpfSxjb3B5TW9kZWw6ZnVuY3Rpb24odCxlKXtyZXR1cm4gbih0aGlzLHZvaWQgMCx2b2lkIDAsKGZ1bmN0aW9uKCl7cmV0dXJuIHIodGhpcywoZnVuY3Rpb24obil7cmV0dXJuITEsWzIsYmYodCxlLCExKV19KSl9KSl9LGxpc3RNb2RlbHM6ZnVuY3Rpb24oKXtyZXR1cm4gbih0aGlzLHZvaWQgMCx2b2lkIDAsKGZ1bmN0aW9uKCl7dmFyIHQsZSxuLG8sYSxpLHM7cmV0dXJuIHIodGhpcywoZnVuY3Rpb24ocil7c3dpdGNoKHIubGFiZWwpe2Nhc2UgMDp0PXlmLmdldFNjaGVtZXMoKSxlPXt9LG49MCxvPXQsci5sYWJlbD0xO2Nhc2UgMTpyZXR1cm4gbjxvLmxlbmd0aD8oYT1vW25dLFs0LHlmLmdldE1hbmFnZXIoYSkubGlzdE1vZGVscygpXSk6WzMsNF07Y2FzZSAyOmZvcihzIGluIGk9ci5zZW50KCkpZVthK2dmK3NdPWlbc107ci5sYWJlbD0zO2Nhc2UgMzpyZXR1cm4gbisrLFszLDFdO2Nhc2UgNDpyZXR1cm5bMixlXX19KSl9KSl9LG1vdmVNb2RlbDpmdW5jdGlvbih0LGUpe3JldHVybiBuKHRoaXMsdm9pZCAwLHZvaWQgMCwoZnVuY3Rpb24oKXtyZXR1cm4gcih0aGlzLChmdW5jdGlvbihuKXtyZXR1cm4hMCxbMixiZih0LGUsITApXX0pKX0pKX0scmVtb3ZlTW9kZWw6ZnVuY3Rpb24odCl7cmV0dXJuIG4odGhpcyx2b2lkIDAsdm9pZCAwLChmdW5jdGlvbigpe3ZhciBlO3JldHVybiByKHRoaXMsKGZ1bmN0aW9uKG4pe3JldHVybiBlPXhmKHQpLFsyLHlmLmdldE1hbmFnZXIoZS5zY2hlbWUpLnJlbW92ZU1vZGVsKGUucGF0aCldfSkpfSkpfX0pO3ZhciBuZCxyZD1Bbih7Y29uZnVzaW9uTWF0cml4XzpmdW5jdGlvbih0LGUsbil7dmFyIHI9bW4odCxcImxhYmVsc1wiLFwiY29uZnVzaW9uTWF0cml4XCIpLG89bW4oZSxcInByZWRpY3Rpb25zXCIsXCJjb25mdXNpb25NYXRyaXhcIik7QyhudWxsPT1ufHxuPjAmJk51bWJlci5pc0ludGVnZXIobiksKGZ1bmN0aW9uKCl7cmV0dXJuXCJJZiBwcm92aWRlZCwgbnVtQ2xhc3NlcyBtdXN0IGJlIGEgcG9zaXRpdmUgaW50ZWdlciwgYnV0IGdvdCBcIitufSkpLEMoMT09PXIucmFuaywoZnVuY3Rpb24oKXtyZXR1cm5cIkV4cGVjdGVkIHRoZSByYW5rIG9mIGxhYmVscyB0byBiZSAxLCBidXQgZ290IFwiK3IucmFua30pKSxDKDE9PT1vLnJhbmssKGZ1bmN0aW9uKCl7cmV0dXJuXCJFeHBlY3RlZCB0aGUgcmFuayBvZiBwcmVkaWN0aW9ucyB0byBiZSAxLCBidXQgZ290IFwiK28ucmFua30pKSxDKHIuc2hhcGVbMF09PT1vLnNoYXBlWzBdLChmdW5jdGlvbigpe3JldHVyblwiTWlzbWF0Y2ggaW4gdGhlIG51bWJlciBvZiBleGFtcGxlczogXCIrci5zaGFwZVswXStcIiB2cy4gXCIrby5zaGFwZVswXStcIi4gTGFiZWxzIGFuZCBwcmVkaWN0aW9ucyBzaG91bGQgaGF2ZSB0aGUgc2FtZSBudW1iZXIgb2YgZWxlbWVudHMuXCJ9KSksQyhuPjAmJk51bWJlci5pc0ludGVnZXIobiksKGZ1bmN0aW9uKCl7cmV0dXJuXCJudW1DbGFzc2VzIGlzIHJlcXVpcmVkIHRvIGJlIGEgcG9zaXRpdmUgaW50ZWdlciwgYnV0IGdvdCBcIitufSkpO3ZhciBhPVJyKHIuYXNUeXBlKFwiaW50MzJcIiksbiksaT1ScihvLmFzVHlwZShcImludDMyXCIpLG4pO3JldHVybiBhLnRyYW5zcG9zZSgpLm1hdE11bChpKS5hc1R5cGUoXCJpbnQzMlwiKX19KSxvZD1PYmplY3QuZnJlZXplKHtjb25mdXNpb25NYXRyaXg6cmR9KTt2YXIgYWQ9QW4oe2Zyb21QaXhlbHNfOmZ1bmN0aW9uKHQsZSl7aWYodm9pZCAwPT09ZSYmKGU9MyksZT40KXRocm93IG5ldyBFcnJvcihcIkNhbm5vdCBjb25zdHJ1Y3QgVGVuc29yIHdpdGggbW9yZSB0aGFuIDQgY2hhbm5lbHMgZnJvbSBwaXhlbHMuXCIpO2lmKG51bGw9PXQpdGhyb3cgbmV3IEVycm9yKFwicGl4ZWxzIHBhc3NlZCB0byB0Zi5icm93c2VyLmZyb21QaXhlbHMoKSBjYW4gbm90IGJlIG51bGxcIik7dmFyIG49ITEscj0hMSxvPSExLGE9ITEsaT0hMTtpZih0LmRhdGEgaW5zdGFuY2VvZiBVaW50OEFycmF5KW49ITA7ZWxzZSBpZihcInVuZGVmaW5lZFwiIT10eXBlb2YgSW1hZ2VEYXRhJiZ0IGluc3RhbmNlb2YgSW1hZ2VEYXRhKXI9ITA7ZWxzZSBpZihcInVuZGVmaW5lZFwiIT10eXBlb2YgSFRNTFZpZGVvRWxlbWVudCYmdCBpbnN0YW5jZW9mIEhUTUxWaWRlb0VsZW1lbnQpbz0hMDtlbHNlIGlmKFwidW5kZWZpbmVkXCIhPXR5cGVvZiBIVE1MSW1hZ2VFbGVtZW50JiZ0IGluc3RhbmNlb2YgSFRNTEltYWdlRWxlbWVudClhPSEwO2Vsc2V7aWYobnVsbD09dC5nZXRDb250ZXh0KXRocm93IG5ldyBFcnJvcihcInBpeGVscyBwYXNzZWQgdG8gdGYuYnJvd3Nlci5mcm9tUGl4ZWxzKCkgbXVzdCBiZSBlaXRoZXIgYW4gSFRNTFZpZGVvRWxlbWVudCwgSFRNTEltYWdlRWxlbWVudCwgSFRNTENhbnZhc0VsZW1lbnQsIEltYWdlRGF0YSBpbiBicm93c2VyLCBvciBPZmZzY3JlZW5DYW52YXMsIEltYWdlRGF0YSBpbiB3ZWJ3b3JrZXIgb3Ige2RhdGE6IFVpbnQzMkFycmF5LCB3aWR0aDogbnVtYmVyLCBoZWlnaHQ6IG51bWJlcn0sIGJ1dCB3YXMgXCIrdC5jb25zdHJ1Y3Rvci5uYW1lKTtpPSEwfWlmKG8pe2lmKG8mJnQucmVhZHlTdGF0ZTwyKXRocm93IG5ldyBFcnJvcihcIlRoZSB2aWRlbyBlbGVtZW50IGhhcyBub3QgbG9hZGVkIGRhdGEgeWV0LiBQbGVhc2Ugd2FpdCBmb3IgYGxvYWRlZGRhdGFgIGV2ZW50IG9uIHRoZSA8dmlkZW8+IGVsZW1lbnQuXCIpfWlmKG51bGwhPWwoXCJGcm9tUGl4ZWxzXCIsTHQuYmFja2VuZE5hbWUpKXJldHVybiBMdC5ydW5LZXJuZWwoXCJGcm9tUGl4ZWxzXCIse3BpeGVsczp0fSx7bnVtQ2hhbm5lbHM6ZX0pO3ZhciBzLHUsYz1vP1t0LnZpZGVvV2lkdGgsdC52aWRlb0hlaWdodF06W3Qud2lkdGgsdC5oZWlnaHRdLGg9Y1swXSxmPWNbMV07aWYoaT9zPXQuZ2V0Q29udGV4dChcIjJkXCIpLmdldEltYWdlRGF0YSgwLDAsaCxmKS5kYXRhOnJ8fG4/cz10LmRhdGE6KGF8fG8pJiYobnVsbD09bmQmJihuZD1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiY2FudmFzXCIpLmdldENvbnRleHQoXCIyZFwiKSksbmQuY2FudmFzLndpZHRoPWgsbmQuY2FudmFzLmhlaWdodD1mLG5kLmRyYXdJbWFnZSh0LDAsMCxoLGYpLHM9bmQuZ2V0SW1hZ2VEYXRhKDAsMCxoLGYpLmRhdGEpLDQ9PT1lKXU9bmV3IEludDMyQXJyYXkocyk7ZWxzZXt2YXIgZD1oKmY7dT1uZXcgSW50MzJBcnJheShkKmUpO2Zvcih2YXIgcD0wO3A8ZDtwKyspZm9yKHZhciB2PTA7djxlOysrdil1W3AqZSt2XT1zWzQqcCt2XX1yZXR1cm4gUG4odSxbZixoLGVdLFwiaW50MzJcIil9fSksaWQ9T2JqZWN0LmZyZWV6ZSh7dG9QaXhlbHM6ZnVuY3Rpb24odCxlKXtyZXR1cm4gbih0aGlzLHZvaWQgMCx2b2lkIDAsKGZ1bmN0aW9uKCl7dmFyIG4sbyxhLGkscyx1LGMsbCxoLGYsZCxwLHYsbSxnLHkseCxiLHcsQyxFLFIsSTtyZXR1cm4gcih0aGlzLChmdW5jdGlvbihyKXtzd2l0Y2goci5sYWJlbCl7Y2FzZSAwOmlmKG49bW4odCxcImltZ1wiLFwidG9QaXhlbHNcIiksdCBpbnN0YW5jZW9mIHd0fHwobj1uLnRvSW50KCkpLDIhPT1uLnJhbmsmJjMhPT1uLnJhbmspdGhyb3cgbmV3IEVycm9yKFwidG9QaXhlbHMgb25seSBzdXBwb3J0cyByYW5rIDIgb3IgMyB0ZW5zb3JzLCBnb3QgcmFuayBcIituLnJhbmsrXCIuXCIpO2lmKG89bi5zaGFwZS5zbGljZSgwLDIpLGE9b1swXSxpPW9bMV0sKHM9Mj09PW4ucmFuaz8xOm4uc2hhcGVbMl0pPjR8fDI9PT1zKXRocm93IG5ldyBFcnJvcihcInRvUGl4ZWxzIG9ubHkgc3VwcG9ydHMgZGVwdGggb2Ygc2l6ZSAxLCAzIG9yIDQgYnV0IGdvdCBcIitzKTtyZXR1cm5bNCxuLmRhdGEoKV07Y2FzZSAxOnJldHVybiB1PXIuc2VudCgpLGM9bi5taW4oKSxsPW4ubWF4KCksWzQsUHJvbWlzZS5hbGwoW2MuZGF0YSgpLGwuZGF0YSgpXSldO2Nhc2UgMjppZihoPXIuc2VudCgpLGY9aFswXSxkPWhbMV0scD1mWzBdLHY9ZFswXSxjLmRpc3Bvc2UoKSxsLmRpc3Bvc2UoKSxcImZsb2F0MzJcIj09PW4uZHR5cGUpe2lmKHA8MHx8dj4xKXRocm93IG5ldyBFcnJvcihcIlRlbnNvciB2YWx1ZXMgZm9yIGEgZmxvYXQzMiBUZW5zb3IgbXVzdCBiZSBpbiB0aGUgcmFuZ2UgWzAgLSAxXSBidXQgZ290IHJhbmdlIFtcIitwK1wiIC0gXCIrditcIl0uXCIpfWVsc2V7aWYoXCJpbnQzMlwiIT09bi5kdHlwZSl0aHJvdyBuZXcgRXJyb3IoXCJVbnN1cHBvcnRlZCB0eXBlIGZvciB0b1BpeGVsczogXCIrbi5kdHlwZStcIi4gUGxlYXNlIHVzZSBmbG9hdDMyIG9yIGludDMyIHRlbnNvcnMuXCIpO2lmKHA8MHx8dj4yNTUpdGhyb3cgbmV3IEVycm9yKFwiVGVuc29yIHZhbHVlcyBmb3IgYSBpbnQzMiBUZW5zb3IgbXVzdCBiZSBpbiB0aGUgcmFuZ2UgWzAgLSAyNTVdIGJ1dCBnb3QgcmFuZ2UgW1wiK3ArXCIgLSBcIit2K1wiXS5cIil9Zm9yKG09XCJmbG9hdDMyXCI9PT1uLmR0eXBlPzI1NToxLGc9bmV3IFVpbnQ4Q2xhbXBlZEFycmF5KGkqYSo0KSx5PTA7eTxhKmk7Kyt5KXg9dm9pZCAwLGI9dm9pZCAwLHc9dm9pZCAwLEM9dm9pZCAwLDE9PT1zPyh4PXVbeV0qbSxiPXVbeV0qbSx3PXVbeV0qbSxDPTI1NSk6Mz09PXM/KHg9dVszKnldKm0sYj11WzMqeSsxXSptLHc9dVszKnkrMl0qbSxDPTI1NSk6ND09PXMmJih4PXVbNCp5XSptLGI9dVs0KnkrMV0qbSx3PXVbNCp5KzJdKm0sQz11WzQqeSszXSptKSxnWyhFPTQqeSkrMF09TWF0aC5yb3VuZCh4KSxnW0UrMV09TWF0aC5yb3VuZChiKSxnW0UrMl09TWF0aC5yb3VuZCh3KSxnW0UrM109TWF0aC5yb3VuZChDKTtyZXR1cm4gbnVsbCE9ZSYmKGUud2lkdGg9aSxlLmhlaWdodD1hLFI9ZS5nZXRDb250ZXh0KFwiMmRcIiksST1uZXcgSW1hZ2VEYXRhKGcsaSxhKSxSLnB1dEltYWdlRGF0YShJLDAsMCkpLG4hPT10JiZuLmRpc3Bvc2UoKSxbMixnXX19KSl9KSl9LGZyb21QaXhlbHM6YWR9KSxzZD1mdW5jdGlvbigpe2Z1bmN0aW9uIHQoKXt9cmV0dXJuIHQucHJvdG90eXBlLmdldENsYXNzTmFtZT1mdW5jdGlvbigpe3JldHVybiB0aGlzLmNvbnN0cnVjdG9yLmNsYXNzTmFtZX0sdC5mcm9tQ29uZmlnPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIG5ldyB0KGUpfSx0fSgpLHVkPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gdCgpe3RoaXMuY2xhc3NOYW1lTWFwPXt9fXJldHVybiB0LmdldE1hcD1mdW5jdGlvbigpe3JldHVybiBudWxsPT10Lmluc3RhbmNlJiYodC5pbnN0YW5jZT1uZXcgdCksdC5pbnN0YW5jZX0sdC5yZWdpc3Rlcj1mdW5jdGlvbihlKXt0LmdldE1hcCgpLmNsYXNzTmFtZU1hcFtlLmNsYXNzTmFtZV09W2UsZS5mcm9tQ29uZmlnXX0sdH0oKTtmdW5jdGlvbiBjZCh0KXtDKG51bGwhPXQuY2xhc3NOYW1lLChmdW5jdGlvbigpe3JldHVyblwiQ2xhc3MgYmVpbmcgcmVnaXN0ZXJlZCBkb2VzIG5vdCBoYXZlIHRoZSBzdGF0aWMgY2xhc3NOYW1lIHByb3BlcnR5IGRlZmluZWQuXCJ9KSksQyhcInN0cmluZ1wiPT10eXBlb2YgdC5jbGFzc05hbWUsKGZ1bmN0aW9uKCl7cmV0dXJuXCJjbGFzc05hbWUgaXMgcmVxdWlyZWQgdG8gYmUgYSBzdHJpbmcsIGJ1dCBnb3QgdHlwZSBcIit0eXBlb2YgdC5jbGFzc05hbWV9KSksQyh0LmNsYXNzTmFtZS5sZW5ndGg+MCwoZnVuY3Rpb24oKXtyZXR1cm5cIkNsYXNzIGJlaW5nIHJlZ2lzdGVyZWQgaGFzIGFuIGVtcHR5LXN0cmluZyBhcyBpdHMgY2xhc3NOYW1lLCB3aGljaCBpcyBkaXNhbGxvd2VkLlwifSkpLHVkLnJlZ2lzdGVyKHQpfXZhciBsZD1PYmplY3QuZnJlZXplKHtTZXJpYWxpemFibGU6c2QsU2VyaWFsaXphdGlvbk1hcDp1ZCxyZWdpc3RlckNsYXNzOmNkfSksaGQ9LjAwMSxmZD0uMTtmdW5jdGlvbiBkZCgpe3JldHVybiAzMj09PUx0LmJhY2tlbmQuZmxvYXRQcmVjaXNpb24oKT9oZDpmZH1mdW5jdGlvbiBwZCh0LGUsbil7dmFyIHI9ITA7aWYoKFYodCl8fFYoZSkpJiYocj0hMSksVih0KSYmVihlKSYmKHI9ITApLHIpe3ZhciBvPXQuY29uc3RydWN0b3IubmFtZSxhPWUuY29uc3RydWN0b3IubmFtZTtpZihvIT09YSl0aHJvdyBuZXcgRXJyb3IoXCJBcnJheXMgYXJlIG9mIGRpZmZlcmVudCB0eXBlLiBBY3R1YWw6IFwiK28rXCIuIEV4cGVjdGVkOiBcIithKX1pZihBcnJheS5pc0FycmF5KHQpJiZBcnJheS5pc0FycmF5KGUpKXt2YXIgaT1wbih0KSxzPXBuKGUpO2lmKCFTKGkscykpdGhyb3cgbmV3IEVycm9yKFwiQXJyYXlzIGhhdmUgZGlmZmVyZW50IHNoYXBlcy4gQWN0dWFsOiBbXCIraStcIl0uIEV4cGVjdGVkOiBbXCIrcytcIl1cIil9dmFyIHU9Vih0KT90OkkodCksYz1WKGUpP2U6SShlKTtpZih1Lmxlbmd0aCE9PWMubGVuZ3RoKXRocm93IG5ldyBFcnJvcihcIkFycmF5cyBoYXZlIGRpZmZlcmVudCBsZW5ndGhzIGFjdHVhbDogXCIrdS5sZW5ndGgrXCIgdnMgZXhwZWN0ZWQ6IFwiK2MubGVuZ3RoK1wiLlxcbkFjdHVhbDogICBcIit1K1wiLlxcbkV4cGVjdGVkOiBcIitjK1wiLlwiKTtmb3IodmFyIGw9MDtsPGMubGVuZ3RoOysrbCl7dmFyIGg9dVtsXSxmPWNbbF07aWYoIW4oaCxmKSl0aHJvdyBuZXcgRXJyb3IoXCJBcnJheXMgZGlmZmVyOiBhY3R1YWxbXCIrbCtcIl0gPSBcIitoK1wiLCBleHBlY3RlZFtcIitsK1wiXSA9IFwiK2YrXCIuXFxuQWN0dWFsOiAgIFwiK3UrXCIuXFxuRXhwZWN0ZWQ6IFwiK2MrXCIuXCIpfX1mdW5jdGlvbiB2ZCh0LGUsbil7cmV0dXJuIWlzRmluaXRlKHQpJiYhaXNGaW5pdGUoZSl8fCEoaXNOYU4odCl8fGlzTmFOKGUpfHxNYXRoLmFicyh0LWUpPm4pfXZhciBtZD1PYmplY3QuZnJlZXplKHtURVNUX0VQU0lMT05fRkxPQVQxNjpmZCxleHBlY3RBcnJheXNDbG9zZTpmdW5jdGlvbih0LGUsbil7cmV0dXJuIG51bGw9PW4mJihuPWRkKCkpLHBkKHQsZSwoZnVuY3Rpb24odCxlKXtyZXR1cm4gdmQodCxlLG4pfSkpfSx0ZXN0RXBzaWxvbjpkZCxleHBlY3RQcm9taXNlVG9GYWlsOmZ1bmN0aW9uKHQsZSl7dCgpLnRoZW4oKGZ1bmN0aW9uKCl7cmV0dXJuIGUuZmFpbCgpfSksKGZ1bmN0aW9uKCl7cmV0dXJuIGUoKX0pKX0sZXhwZWN0QXJyYXlzRXF1YWw6ZnVuY3Rpb24odCxlKXt2YXIgbj1cInN0cmluZ1wiPT10eXBlb2YgZXx8XCJudW1iZXJcIj09dHlwZW9mIGV8fFwiYm9vbGVhblwiPT10eXBlb2YgZT9bZV06ZTtyZXR1cm4gSCh0KXx8SCh0WzBdKXx8SChlKXx8SChlWzBdKT9wZCh0LG4sKGZ1bmN0aW9uKHQsZSl7cmV0dXJuIHQ9PWV9KSk6cGQodCxlLChmdW5jdGlvbih0LGUpe3JldHVybiB2ZCh0LGUsMCl9KSl9LGV4cGVjdE51bWJlcnNDbG9zZTpmdW5jdGlvbih0LGUsbil7aWYobnVsbD09biYmKG49ZGQoKSksIXZkKHQsZSxuKSl0aHJvdyBuZXcgRXJyb3IoXCJOdW1iZXJzIGRpZmZlcjogYWN0dWFsID09PSBcIit0K1wiLCBleHBlY3RlZCA9PT0gXCIrZSl9LGV4cGVjdFZhbHVlc0luUmFuZ2U6ZnVuY3Rpb24odCxlLG4pe2Zvcih2YXIgcj0wO3I8dC5sZW5ndGg7cisrKWlmKHRbcl08ZXx8dFtyXT5uKXRocm93IG5ldyBFcnJvcihcIlZhbHVlIG91dCBvZiByYW5nZTpcIit0W3JdK1wiIGxvdzogXCIrZStcIiwgaGlnaDogXCIrbil9LGV4cGVjdEFycmF5QnVmZmVyc0VxdWFsOmZ1bmN0aW9uKHQsZSl7ZXhwZWN0KG5ldyBGbG9hdDMyQXJyYXkodCkpLnRvRXF1YWwobmV3IEZsb2F0MzJBcnJheShlKSl9fSksZ2Q9XCIxLjcuMFwiO3ZhciB5ZD1PYmplY3QuZnJlZXplKHtncGdwdV91dGlsOk1pLHdlYmdsX3V0aWw6R2UsZm9yY2VIYWxmRmxvYXQ6ZnVuY3Rpb24oKXtpKCkuc2V0KFwiV0VCR0xfRk9SQ0VfRjE2X1RFWFRVUkVTXCIsITApfSxNYXRoQmFja2VuZFdlYkdMOlpzLHNldFdlYkdMQ29udGV4dDpLdCxHUEdQVUNvbnRleHQ6Qml9KSx4ZD1mdW5jdGlvbih0KXtmdW5jdGlvbiBvKCl7cmV0dXJuIG51bGwhPT10JiZ0LmFwcGx5KHRoaXMsYXJndW1lbnRzKXx8dGhpc31yZXR1cm4gZShvLHQpLG8ucHJvdG90eXBlLm1pbmltaXplPWZ1bmN0aW9uKHQsZSxuKXt2b2lkIDA9PT1lJiYoZT0hMSk7dmFyIHI9dGhpcy5jb21wdXRlR3JhZGllbnRzKHQsbiksbz1yLnZhbHVlLGE9ci5ncmFkcztpZihudWxsIT1uKXt2YXIgaT1uLm1hcCgoZnVuY3Rpb24odCl7cmV0dXJue25hbWU6dC5uYW1lLHRlbnNvcjphW3QubmFtZV19fSkpO3RoaXMuYXBwbHlHcmFkaWVudHMoaSl9ZWxzZSB0aGlzLmFwcGx5R3JhZGllbnRzKGEpO3JldHVybiB0bihhKSxlP286KG8uZGlzcG9zZSgpLG51bGwpfSxPYmplY3QuZGVmaW5lUHJvcGVydHkoby5wcm90b3R5cGUsXCJpdGVyYXRpb25zXCIse2dldDpmdW5jdGlvbigpe3JldHVybiBudWxsPT10aGlzLml0ZXJhdGlvbnNfJiYodGhpcy5pdGVyYXRpb25zXz0wKSx0aGlzLml0ZXJhdGlvbnNffSxlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH0pLG8ucHJvdG90eXBlLmluY3JlbWVudEl0ZXJhdGlvbnM9ZnVuY3Rpb24oKXt0aGlzLml0ZXJhdGlvbnNfPXRoaXMuaXRlcmF0aW9ucysxfSxvLnByb3RvdHlwZS5jb21wdXRlR3JhZGllbnRzPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIHBvKHQsZSl9LG8ucHJvdG90eXBlLmRpc3Bvc2U9ZnVuY3Rpb24oKXtudWxsIT10aGlzLml0ZXJhdGlvbnNfJiZ0bih0aGlzLml0ZXJhdGlvbnNfKX0sby5wcm90b3R5cGUuc2F2ZUl0ZXJhdGlvbnM9ZnVuY3Rpb24oKXtyZXR1cm4gbih0aGlzLHZvaWQgMCx2b2lkIDAsKGZ1bmN0aW9uKCl7cmV0dXJuIHIodGhpcywoZnVuY3Rpb24odCl7cmV0dXJuIG51bGw9PXRoaXMuaXRlcmF0aW9uc18mJih0aGlzLml0ZXJhdGlvbnNfPTApLFsyLHtuYW1lOlwiaXRlclwiLHRlbnNvcjpPbih0aGlzLml0ZXJhdGlvbnNfLFwiaW50MzJcIil9XX0pKX0pKX0sby5wcm90b3R5cGUuZ2V0V2VpZ2h0cz1mdW5jdGlvbigpe3JldHVybiBuKHRoaXMsdm9pZCAwLHZvaWQgMCwoZnVuY3Rpb24oKXtyZXR1cm4gcih0aGlzLChmdW5jdGlvbih0KXt0aHJvdyBuZXcgRXJyb3IoXCJnZXRXZWlnaHRzKCkgaXMgbm90IGltcGxlbWVudGVkIGZvciB0aGlzIG9wdGltaXplciB5ZXQuXCIpfSkpfSkpfSxvLnByb3RvdHlwZS5zZXRXZWlnaHRzPWZ1bmN0aW9uKHQpe3JldHVybiBuKHRoaXMsdm9pZCAwLHZvaWQgMCwoZnVuY3Rpb24oKXtyZXR1cm4gcih0aGlzLChmdW5jdGlvbih0KXt0aHJvdyBuZXcgRXJyb3IoXCJzZXRXZWlnaHRzKCkgaXMgbm90IGltcGxlbWVudGVkIGZvciB0aGlzIG9wdGltaXplciBjbGFzcyBcIit0aGlzLmdldENsYXNzTmFtZSgpKX0pKX0pKX0sby5wcm90b3R5cGUuZXh0cmFjdEl0ZXJhdGlvbnM9ZnVuY3Rpb24odCl7cmV0dXJuIG4odGhpcyx2b2lkIDAsdm9pZCAwLChmdW5jdGlvbigpe3ZhciBlO3JldHVybiByKHRoaXMsKGZ1bmN0aW9uKG4pe3N3aXRjaChuLmxhYmVsKXtjYXNlIDA6cmV0dXJuIGU9dGhpcyxbNCx0WzBdLnRlbnNvci5kYXRhKCldO2Nhc2UgMTpyZXR1cm4gZS5pdGVyYXRpb25zXz1uLnNlbnQoKVswXSxbMix0LnNsaWNlKDEpXX19KSl9KSl9LG99KHNkKTtPYmplY3QuZGVmaW5lUHJvcGVydHkoeGQsU3ltYm9sLmhhc0luc3RhbmNlLHt2YWx1ZTpmdW5jdGlvbih0KXtyZXR1cm4gbnVsbCE9dC5taW5pbWl6ZSYmbnVsbCE9dC5jb21wdXRlR3JhZGllbnRzJiZudWxsIT10LmFwcGx5R3JhZGllbnRzfX0pO3ZhciBiZD1mdW5jdGlvbih0KXtmdW5jdGlvbiBvKGUsbixyKXt2b2lkIDA9PT1yJiYocj1udWxsKTt2YXIgbz10LmNhbGwodGhpcyl8fHRoaXM7cmV0dXJuIG8ubGVhcm5pbmdSYXRlPWUsby5yaG89bixvLmVwc2lsb249cixvLmFjY3VtdWxhdGVkR3JhZHM9W10sby5hY2N1bXVsYXRlZFVwZGF0ZXM9W10sbnVsbD09ciYmKG8uZXBzaWxvbj1MdC5iYWNrZW5kLmVwc2lsb24oKSksb31yZXR1cm4gZShvLHQpLG8ucHJvdG90eXBlLmFwcGx5R3JhZGllbnRzPWZ1bmN0aW9uKHQpe3ZhciBlPXRoaXM7KEFycmF5LmlzQXJyYXkodCk/dC5tYXAoKGZ1bmN0aW9uKHQpe3JldHVybiB0Lm5hbWV9KSk6T2JqZWN0LmtleXModCkpLmZvckVhY2goKGZ1bmN0aW9uKG4scil7dmFyIG89THQucmVnaXN0ZXJlZFZhcmlhYmxlc1tuXTtudWxsPT1lLmFjY3VtdWxhdGVkR3JhZHNbcl0mJihlLmFjY3VtdWxhdGVkR3JhZHNbcl09e29yaWdpbmFsTmFtZTpuK1wiL2FjY3VtX2dyYWRcIix2YXJpYWJsZTpaZSgoZnVuY3Rpb24oKXtyZXR1cm4gWG4obykudmFyaWFibGUoITEpfSkpfSksbnVsbD09ZS5hY2N1bXVsYXRlZFVwZGF0ZXNbcl0mJihlLmFjY3VtdWxhdGVkVXBkYXRlc1tyXT17b3JpZ2luYWxOYW1lOm4rXCIvYWNjdW1fdmFyXCIsdmFyaWFibGU6WmUoKGZ1bmN0aW9uKCl7cmV0dXJuIFhuKG8pLnZhcmlhYmxlKCExKX0pKX0pO3ZhciBhPUFycmF5LmlzQXJyYXkodCk/dFtyXS50ZW5zb3I6dFtuXTtpZihudWxsIT1hKXt2YXIgaT1lLmFjY3VtdWxhdGVkR3JhZHNbcl0udmFyaWFibGUscz1lLmFjY3VtdWxhdGVkVXBkYXRlc1tyXS52YXJpYWJsZTtaZSgoZnVuY3Rpb24oKXt2YXIgdD1pLm11bChlLnJobykuYWRkKGEuc3F1YXJlKCkubXVsKDEtZS5yaG8pKSxuPXMuYWRkKGUuZXBzaWxvbikuc3FydCgpLmRpdihpLmFkZChlLmVwc2lsb24pLnNxcnQoKSkubXVsKGEpLHI9cy5tdWwoZS5yaG8pLmFkZChuLnNxdWFyZSgpLm11bCgxLWUucmhvKSk7aS5hc3NpZ24odCkscy5hc3NpZ24ocik7dmFyIHU9bi5tdWwoLWUubGVhcm5pbmdSYXRlKS5hZGQobyk7by5hc3NpZ24odSl9KSl9fSkpLHRoaXMuaW5jcmVtZW50SXRlcmF0aW9ucygpfSxvLnByb3RvdHlwZS5kaXNwb3NlPWZ1bmN0aW9uKCl7bnVsbCE9dGhpcy5hY2N1bXVsYXRlZFVwZGF0ZXMmJih0bih0aGlzLmFjY3VtdWxhdGVkR3JhZHMubWFwKChmdW5jdGlvbih0KXtyZXR1cm4gdC52YXJpYWJsZX0pKSksdG4odGhpcy5hY2N1bXVsYXRlZFVwZGF0ZXMubWFwKChmdW5jdGlvbih0KXtyZXR1cm4gdC52YXJpYWJsZX0pKSkpfSxvLnByb3RvdHlwZS5nZXRXZWlnaHRzPWZ1bmN0aW9uKCl7cmV0dXJuIG4odGhpcyx2b2lkIDAsdm9pZCAwLChmdW5jdGlvbigpe3ZhciB0O3JldHVybiByKHRoaXMsKGZ1bmN0aW9uKGUpe3N3aXRjaChlLmxhYmVsKXtjYXNlIDA6cmV0dXJuIHQ9dGhpcy5hY2N1bXVsYXRlZEdyYWRzLmNvbmNhdCh0aGlzLmFjY3VtdWxhdGVkVXBkYXRlcyksWzQsdGhpcy5zYXZlSXRlcmF0aW9ucygpXTtjYXNlIDE6cmV0dXJuWzIsW2Uuc2VudCgpXS5jb25jYXQodC5tYXAoKGZ1bmN0aW9uKHQpe3JldHVybntuYW1lOnQub3JpZ2luYWxOYW1lLHRlbnNvcjp0LnZhcmlhYmxlfX0pKSldfX0pKX0pKX0sby5wcm90b3R5cGUuc2V0V2VpZ2h0cz1mdW5jdGlvbih0KXtyZXR1cm4gbih0aGlzLHZvaWQgMCx2b2lkIDAsKGZ1bmN0aW9uKCl7dmFyIGU7cmV0dXJuIHIodGhpcywoZnVuY3Rpb24obil7c3dpdGNoKG4ubGFiZWwpe2Nhc2UgMDpyZXR1cm5bNCx0aGlzLmV4dHJhY3RJdGVyYXRpb25zKHQpXTtjYXNlIDE6cmV0dXJuIHQ9bi5zZW50KCksZT10Lmxlbmd0aC8yLCExLHRoaXMuYWNjdW11bGF0ZWRHcmFkcz10LnNsaWNlKDAsZSkubWFwKChmdW5jdGlvbih0KXtyZXR1cm57b3JpZ2luYWxOYW1lOnQubmFtZSx2YXJpYWJsZTp0LnRlbnNvci52YXJpYWJsZSghMSl9fSkpLHRoaXMuYWNjdW11bGF0ZWRVcGRhdGVzPXQuc2xpY2UoZSwyKmUpLm1hcCgoZnVuY3Rpb24odCl7cmV0dXJue29yaWdpbmFsTmFtZTp0Lm5hbWUsdmFyaWFibGU6dC50ZW5zb3IudmFyaWFibGUoITEpfX0pKSxbMl19fSkpfSkpfSxvLnByb3RvdHlwZS5nZXRDb25maWc9ZnVuY3Rpb24oKXtyZXR1cm57bGVhcm5pbmdSYXRlOnRoaXMubGVhcm5pbmdSYXRlLHJobzp0aGlzLnJobyxlcHNpbG9uOnRoaXMuZXBzaWxvbn19LG8uZnJvbUNvbmZpZz1mdW5jdGlvbih0LGUpe3JldHVybiBuZXcgdChlLmxlYXJuaW5nUmF0ZSxlLnJobyxlLmVwc2lsb24pfSxvLmNsYXNzTmFtZT1cIkFkYWRlbHRhXCIsb30oeGQpO2NkKGJkKTt2YXIgd2Q9ZnVuY3Rpb24odCl7ZnVuY3Rpb24gbyhlLG4pe3ZvaWQgMD09PW4mJihuPS4xKTt2YXIgcj10LmNhbGwodGhpcyl8fHRoaXM7cmV0dXJuIHIubGVhcm5pbmdSYXRlPWUsci5pbml0aWFsQWNjdW11bGF0b3JWYWx1ZT1uLHIuYWNjdW11bGF0ZWRHcmFkcz1bXSxyfXJldHVybiBlKG8sdCksby5wcm90b3R5cGUuYXBwbHlHcmFkaWVudHM9ZnVuY3Rpb24odCl7dmFyIGU9dGhpczsoQXJyYXkuaXNBcnJheSh0KT90Lm1hcCgoZnVuY3Rpb24odCl7cmV0dXJuIHQubmFtZX0pKTpPYmplY3Qua2V5cyh0KSkuZm9yRWFjaCgoZnVuY3Rpb24obixyKXt2YXIgbz1MdC5yZWdpc3RlcmVkVmFyaWFibGVzW25dO2lmKG51bGw9PWUuYWNjdW11bGF0ZWRHcmFkc1tyXSl7ZS5hY2N1bXVsYXRlZEdyYWRzW3JdPXtvcmlnaW5hbE5hbWU6bitcIi9hY2N1bXVsYXRvclwiLHZhcmlhYmxlOlplKChmdW5jdGlvbigpe3JldHVybiBIbihvLnNoYXBlLGUuaW5pdGlhbEFjY3VtdWxhdG9yVmFsdWUpLnZhcmlhYmxlKCExKX0pKX19dmFyIGE9QXJyYXkuaXNBcnJheSh0KT90W3JdLnRlbnNvcjp0W25dO2lmKG51bGwhPWEpe3ZhciBpPWUuYWNjdW11bGF0ZWRHcmFkc1tyXS52YXJpYWJsZTtaZSgoZnVuY3Rpb24oKXt2YXIgdD1pLmFkZChhLnNxdWFyZSgpKTtpLmFzc2lnbih0KTt2YXIgbj1hLmRpdih0LmFkZChMdC5iYWNrZW5kLmVwc2lsb24oKSkuc3FydCgpKS5tdWwoLWUubGVhcm5pbmdSYXRlKS5hZGQobyk7by5hc3NpZ24obil9KSl9fSkpLHRoaXMuaW5jcmVtZW50SXRlcmF0aW9ucygpfSxvLnByb3RvdHlwZS5kaXNwb3NlPWZ1bmN0aW9uKCl7bnVsbCE9dGhpcy5hY2N1bXVsYXRlZEdyYWRzJiZ0bih0aGlzLmFjY3VtdWxhdGVkR3JhZHMubWFwKChmdW5jdGlvbih0KXtyZXR1cm4gdC52YXJpYWJsZX0pKSl9LG8ucHJvdG90eXBlLmdldFdlaWdodHM9ZnVuY3Rpb24oKXtyZXR1cm4gbih0aGlzLHZvaWQgMCx2b2lkIDAsKGZ1bmN0aW9uKCl7cmV0dXJuIHIodGhpcywoZnVuY3Rpb24odCl7c3dpdGNoKHQubGFiZWwpe2Nhc2UgMDpyZXR1cm5bNCx0aGlzLnNhdmVJdGVyYXRpb25zKCldO2Nhc2UgMTpyZXR1cm5bMixbdC5zZW50KCldLmNvbmNhdCh0aGlzLmFjY3VtdWxhdGVkR3JhZHMubWFwKChmdW5jdGlvbih0KXtyZXR1cm57bmFtZTp0Lm9yaWdpbmFsTmFtZSx0ZW5zb3I6dC52YXJpYWJsZX19KSkpXX19KSl9KSl9LG8ucHJvdG90eXBlLnNldFdlaWdodHM9ZnVuY3Rpb24odCl7cmV0dXJuIG4odGhpcyx2b2lkIDAsdm9pZCAwLChmdW5jdGlvbigpe3JldHVybiByKHRoaXMsKGZ1bmN0aW9uKGUpe3N3aXRjaChlLmxhYmVsKXtjYXNlIDA6cmV0dXJuWzQsdGhpcy5leHRyYWN0SXRlcmF0aW9ucyh0KV07Y2FzZSAxOnJldHVybiB0PWUuc2VudCgpLCExLHRoaXMuYWNjdW11bGF0ZWRHcmFkcz10Lm1hcCgoZnVuY3Rpb24odCl7cmV0dXJue29yaWdpbmFsTmFtZTp0Lm5hbWUsdmFyaWFibGU6dC50ZW5zb3IudmFyaWFibGUoITEpfX0pKSxbMl19fSkpfSkpfSxvLnByb3RvdHlwZS5nZXRDb25maWc9ZnVuY3Rpb24oKXtyZXR1cm57bGVhcm5pbmdSYXRlOnRoaXMubGVhcm5pbmdSYXRlLGluaXRpYWxBY2N1bXVsYXRvclZhbHVlOnRoaXMuaW5pdGlhbEFjY3VtdWxhdG9yVmFsdWV9fSxvLmZyb21Db25maWc9ZnVuY3Rpb24odCxlKXtyZXR1cm4gbmV3IHQoZS5sZWFybmluZ1JhdGUsZS5pbml0aWFsQWNjdW11bGF0b3JWYWx1ZSl9LG8uY2xhc3NOYW1lPVwiQWRhZ3JhZFwiLG99KHhkKTtjZCh3ZCk7dmFyIENkPWZ1bmN0aW9uKHQpe2Z1bmN0aW9uIG8oZSxuLHIsbyl7dm9pZCAwPT09byYmKG89bnVsbCk7dmFyIGE9dC5jYWxsKHRoaXMpfHx0aGlzO3JldHVybiBhLmxlYXJuaW5nUmF0ZT1lLGEuYmV0YTE9bixhLmJldGEyPXIsYS5lcHNpbG9uPW8sYS5hY2N1bXVsYXRlZEZpcnN0TW9tZW50PVtdLGEuYWNjdW11bGF0ZWRTZWNvbmRNb21lbnQ9W10sWmUoKGZ1bmN0aW9uKCl7YS5hY2NCZXRhMT1PbihuKS52YXJpYWJsZSgpLGEuYWNjQmV0YTI9T24ocikudmFyaWFibGUoKX0pKSxudWxsPT1vJiYoYS5lcHNpbG9uPUx0LmJhY2tlbmQuZXBzaWxvbigpKSxhfXJldHVybiBlKG8sdCksby5wcm90b3R5cGUuYXBwbHlHcmFkaWVudHM9ZnVuY3Rpb24odCl7dmFyIGU9dGhpcyxuPUFycmF5LmlzQXJyYXkodCk/dC5tYXAoKGZ1bmN0aW9uKHQpe3JldHVybiB0Lm5hbWV9KSk6T2JqZWN0LmtleXModCk7WmUoKGZ1bmN0aW9uKCl7dmFyIHI9Q2MoMSxlLmFjY0JldGExKSxvPUNjKDEsZS5hY2NCZXRhMik7bi5mb3JFYWNoKChmdW5jdGlvbihuLGEpe3ZhciBpPUx0LnJlZ2lzdGVyZWRWYXJpYWJsZXNbbl07bnVsbD09ZS5hY2N1bXVsYXRlZEZpcnN0TW9tZW50W2FdJiYoZS5hY2N1bXVsYXRlZEZpcnN0TW9tZW50W2FdPXtvcmlnaW5hbE5hbWU6bitcIi9tXCIsdmFyaWFibGU6WmUoKGZ1bmN0aW9uKCl7cmV0dXJuIFhuKGkpLnZhcmlhYmxlKCExKX0pKX0pLG51bGw9PWUuYWNjdW11bGF0ZWRTZWNvbmRNb21lbnRbYV0mJihlLmFjY3VtdWxhdGVkU2Vjb25kTW9tZW50W2FdPXtvcmlnaW5hbE5hbWU6bitcIi92XCIsdmFyaWFibGU6WmUoKGZ1bmN0aW9uKCl7cmV0dXJuIFhuKGkpLnZhcmlhYmxlKCExKX0pKX0pO3ZhciBzPUFycmF5LmlzQXJyYXkodCk/dFthXS50ZW5zb3I6dFtuXTtpZihudWxsIT1zKXt2YXIgdT1lLmFjY3VtdWxhdGVkRmlyc3RNb21lbnRbYV0udmFyaWFibGUsYz1lLmFjY3VtdWxhdGVkU2Vjb25kTW9tZW50W2FdLnZhcmlhYmxlLGw9dS5tdWwoZS5iZXRhMSkuYWRkKHMubXVsKDEtZS5iZXRhMSkpLGg9Yy5tdWwoZS5iZXRhMikuYWRkKHMuc3F1YXJlKCkubXVsKDEtZS5iZXRhMikpLGY9bC5kaXYociksZD1oLmRpdihvKTt1LmFzc2lnbihsKSxjLmFzc2lnbihoKTt2YXIgcD1mLmRpdihkLnNxcnQoKS5hZGQoZS5lcHNpbG9uKSkubXVsKC1lLmxlYXJuaW5nUmF0ZSkuYWRkKGkpO2kuYXNzaWduKHApfX0pKSxlLmFjY0JldGExLmFzc2lnbihlLmFjY0JldGExLm11bChlLmJldGExKSksZS5hY2NCZXRhMi5hc3NpZ24oZS5hY2NCZXRhMi5tdWwoZS5iZXRhMikpfSkpLHRoaXMuaW5jcmVtZW50SXRlcmF0aW9ucygpfSxvLnByb3RvdHlwZS5kaXNwb3NlPWZ1bmN0aW9uKCl7dGhpcy5hY2NCZXRhMS5kaXNwb3NlKCksdGhpcy5hY2NCZXRhMi5kaXNwb3NlKCksbnVsbCE9dGhpcy5hY2N1bXVsYXRlZEZpcnN0TW9tZW50JiZ0bih0aGlzLmFjY3VtdWxhdGVkRmlyc3RNb21lbnQubWFwKChmdW5jdGlvbih0KXtyZXR1cm4gdC52YXJpYWJsZX0pKSksbnVsbCE9dGhpcy5hY2N1bXVsYXRlZFNlY29uZE1vbWVudCYmdG4odGhpcy5hY2N1bXVsYXRlZFNlY29uZE1vbWVudC5tYXAoKGZ1bmN0aW9uKHQpe3JldHVybiB0LnZhcmlhYmxlfSkpKX0sby5wcm90b3R5cGUuZ2V0V2VpZ2h0cz1mdW5jdGlvbigpe3JldHVybiBuKHRoaXMsdm9pZCAwLHZvaWQgMCwoZnVuY3Rpb24oKXt2YXIgdDtyZXR1cm4gcih0aGlzLChmdW5jdGlvbihlKXtzd2l0Y2goZS5sYWJlbCl7Y2FzZSAwOnJldHVybiB0PXRoaXMuYWNjdW11bGF0ZWRGaXJzdE1vbWVudC5jb25jYXQodGhpcy5hY2N1bXVsYXRlZFNlY29uZE1vbWVudCksWzQsdGhpcy5zYXZlSXRlcmF0aW9ucygpXTtjYXNlIDE6cmV0dXJuWzIsW2Uuc2VudCgpXS5jb25jYXQodC5tYXAoKGZ1bmN0aW9uKHQpe3JldHVybntuYW1lOnQub3JpZ2luYWxOYW1lLHRlbnNvcjp0LnZhcmlhYmxlfX0pKSldfX0pKX0pKX0sby5wcm90b3R5cGUuc2V0V2VpZ2h0cz1mdW5jdGlvbih0KXtyZXR1cm4gbih0aGlzLHZvaWQgMCx2b2lkIDAsKGZ1bmN0aW9uKCl7dmFyIGUsbj10aGlzO3JldHVybiByKHRoaXMsKGZ1bmN0aW9uKHIpe3N3aXRjaChyLmxhYmVsKXtjYXNlIDA6cmV0dXJuWzQsdGhpcy5leHRyYWN0SXRlcmF0aW9ucyh0KV07Y2FzZSAxOnJldHVybiB0PXIuc2VudCgpLFplKChmdW5jdGlvbigpe24uYWNjQmV0YTEuYXNzaWduKHhjKG4uYmV0YTEsbi5pdGVyYXRpb25zXysxKSksbi5hY2NCZXRhMi5hc3NpZ24oeGMobi5iZXRhMixuLml0ZXJhdGlvbnNfKzEpKX0pKSxlPXQubGVuZ3RoLzIsITEsdGhpcy5hY2N1bXVsYXRlZEZpcnN0TW9tZW50PXQuc2xpY2UoMCxlKS5tYXAoKGZ1bmN0aW9uKHQpe3JldHVybntvcmlnaW5hbE5hbWU6dC5uYW1lLHZhcmlhYmxlOnQudGVuc29yLnZhcmlhYmxlKCExKX19KSksdGhpcy5hY2N1bXVsYXRlZFNlY29uZE1vbWVudD10LnNsaWNlKGUsMiplKS5tYXAoKGZ1bmN0aW9uKHQpe3JldHVybntvcmlnaW5hbE5hbWU6dC5uYW1lLHZhcmlhYmxlOnQudGVuc29yLnZhcmlhYmxlKCExKX19KSksWzJdfX0pKX0pKX0sby5wcm90b3R5cGUuZ2V0Q29uZmlnPWZ1bmN0aW9uKCl7cmV0dXJue2xlYXJuaW5nUmF0ZTp0aGlzLmxlYXJuaW5nUmF0ZSxiZXRhMTp0aGlzLmJldGExLGJldGEyOnRoaXMuYmV0YTIsZXBzaWxvbjp0aGlzLmVwc2lsb259fSxvLmZyb21Db25maWc9ZnVuY3Rpb24odCxlKXtyZXR1cm4gbmV3IHQoZS5sZWFybmluZ1JhdGUsZS5iZXRhMSxlLmJldGEyLGUuZXBzaWxvbil9LG8uY2xhc3NOYW1lPVwiQWRhbVwiLG99KHhkKTtjZChDZCk7dmFyIEVkPWZ1bmN0aW9uKHQpe2Z1bmN0aW9uIG8oZSxuLHIsbyxhKXt2b2lkIDA9PT1vJiYobz1udWxsKSx2b2lkIDA9PT1hJiYoYT0wKTt2YXIgaT10LmNhbGwodGhpcyl8fHRoaXM7cmV0dXJuIGkubGVhcm5pbmdSYXRlPWUsaS5iZXRhMT1uLGkuYmV0YTI9cixpLmVwc2lsb249byxpLmRlY2F5PWEsaS5hY2N1bXVsYXRlZEZpcnN0TW9tZW50PVtdLGkuYWNjdW11bGF0ZWRXZWlnaHRlZEluZk5vcm09W10sWmUoKGZ1bmN0aW9uKCl7aS5pdGVyYXRpb249T24oMCkudmFyaWFibGUoKSxpLmFjY0JldGExPU9uKG4pLnZhcmlhYmxlKCl9KSksbnVsbD09byYmKGkuZXBzaWxvbj1MdC5iYWNrZW5kLmVwc2lsb24oKSksaX1yZXR1cm4gZShvLHQpLG8ucHJvdG90eXBlLmFwcGx5R3JhZGllbnRzPWZ1bmN0aW9uKHQpe3ZhciBlPXRoaXMsbj1BcnJheS5pc0FycmF5KHQpP3QubWFwKChmdW5jdGlvbih0KXtyZXR1cm4gdC5uYW1lfSkpOk9iamVjdC5rZXlzKHQpO1plKChmdW5jdGlvbigpe3ZhciByPUNjKDEsZS5hY2NCZXRhMSksbz1zYygtZS5sZWFybmluZ1JhdGUsZS5pdGVyYXRpb24ubXVsKGUuZGVjYXkpLmFkZCgxKSk7bi5mb3JFYWNoKChmdW5jdGlvbihuLGEpe3ZhciBpPUx0LnJlZ2lzdGVyZWRWYXJpYWJsZXNbbl07bnVsbD09ZS5hY2N1bXVsYXRlZEZpcnN0TW9tZW50W2FdJiYoZS5hY2N1bXVsYXRlZEZpcnN0TW9tZW50W2FdPXtvcmlnaW5hbE5hbWU6bitcIi9tXCIsdmFyaWFibGU6WG4oaSkudmFyaWFibGUoITEpfSksbnVsbD09ZS5hY2N1bXVsYXRlZFdlaWdodGVkSW5mTm9ybVthXSYmKGUuYWNjdW11bGF0ZWRXZWlnaHRlZEluZk5vcm1bYV09e29yaWdpbmFsTmFtZTpuK1wiL3ZcIix2YXJpYWJsZTpYbihpKS52YXJpYWJsZSghMSl9KTt2YXIgcz1BcnJheS5pc0FycmF5KHQpP3RbYV0udGVuc29yOnRbbl07aWYobnVsbCE9cyl7dmFyIHU9ZS5hY2N1bXVsYXRlZEZpcnN0TW9tZW50W2FdLnZhcmlhYmxlLGM9ZS5hY2N1bXVsYXRlZFdlaWdodGVkSW5mTm9ybVthXS52YXJpYWJsZSxsPXUubXVsKGUuYmV0YTEpLmFkZChzLm11bCgxLWUuYmV0YTEpKSxoPWMubXVsKGUuYmV0YTIpLGY9cy5hYnMoKSxkPWgubWF4aW11bShmKTt1LmFzc2lnbihsKSxjLmFzc2lnbihkKTt2YXIgcD1vLmRpdihyKS5tdWwobC5kaXYoZC5hZGQoZS5lcHNpbG9uKSkpLmFkZChpKTtpLmFzc2lnbihwKX19KSksZS5pdGVyYXRpb24uYXNzaWduKGUuaXRlcmF0aW9uLmFkZCgxKSksZS5hY2NCZXRhMS5hc3NpZ24oZS5hY2NCZXRhMS5tdWwoZS5iZXRhMSkpfSkpLHRoaXMuaW5jcmVtZW50SXRlcmF0aW9ucygpfSxvLnByb3RvdHlwZS5kaXNwb3NlPWZ1bmN0aW9uKCl7dGhpcy5hY2NCZXRhMS5kaXNwb3NlKCksdGhpcy5pdGVyYXRpb24uZGlzcG9zZSgpLG51bGwhPXRoaXMuYWNjdW11bGF0ZWRGaXJzdE1vbWVudCYmdG4odGhpcy5hY2N1bXVsYXRlZEZpcnN0TW9tZW50Lm1hcCgoZnVuY3Rpb24odCl7cmV0dXJuIHQudmFyaWFibGV9KSkpLG51bGwhPXRoaXMuYWNjdW11bGF0ZWRXZWlnaHRlZEluZk5vcm0mJnRuKHRoaXMuYWNjdW11bGF0ZWRXZWlnaHRlZEluZk5vcm0ubWFwKChmdW5jdGlvbih0KXtyZXR1cm4gdC52YXJpYWJsZX0pKSl9LG8ucHJvdG90eXBlLmdldFdlaWdodHM9ZnVuY3Rpb24oKXtyZXR1cm4gbih0aGlzLHZvaWQgMCx2b2lkIDAsKGZ1bmN0aW9uKCl7cmV0dXJuIHIodGhpcywoZnVuY3Rpb24odCl7dGhyb3cgbmV3IEVycm9yKFwiZ2V0V2VpZ2h0cygpIGlzIG5vdCBpbXBsZW1lbnRlZCBmb3IgQWRhbWF4IHlldC5cIil9KSl9KSl9LG8ucHJvdG90eXBlLnNldFdlaWdodHM9ZnVuY3Rpb24odCl7cmV0dXJuIG4odGhpcyx2b2lkIDAsdm9pZCAwLChmdW5jdGlvbigpe3JldHVybiByKHRoaXMsKGZ1bmN0aW9uKHQpe3Rocm93IG5ldyBFcnJvcihcInNldFdlaWdodHMoKSBpcyBub3QgaW1wbGVtZW50ZWQgZm9yIEFkYW1heCB5ZXQuXCIpfSkpfSkpfSxvLnByb3RvdHlwZS5nZXRDb25maWc9ZnVuY3Rpb24oKXtyZXR1cm57bGVhcm5pbmdSYXRlOnRoaXMubGVhcm5pbmdSYXRlLGJldGExOnRoaXMuYmV0YTEsYmV0YTI6dGhpcy5iZXRhMixlcHNpbG9uOnRoaXMuZXBzaWxvbixkZWNheTp0aGlzLmRlY2F5fX0sby5mcm9tQ29uZmlnPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIG5ldyB0KGUubGVhcm5pbmdSYXRlLGUuYmV0YTEsZS5iZXRhMixlLmVwc2lsb24sZS5kZWNheSl9LG8uY2xhc3NOYW1lPVwiQWRhbWF4XCIsb30oeGQpO2NkKEVkKTt2YXIgUmQ9ZnVuY3Rpb24odCl7ZnVuY3Rpb24gbyhlKXt2YXIgbj10LmNhbGwodGhpcyl8fHRoaXM7cmV0dXJuIG4ubGVhcm5pbmdSYXRlPWUsbi5zZXRMZWFybmluZ1JhdGUoZSksbn1yZXR1cm4gZShvLHQpLG8ucHJvdG90eXBlLmFwcGx5R3JhZGllbnRzPWZ1bmN0aW9uKHQpe3ZhciBlPXRoaXM7KEFycmF5LmlzQXJyYXkodCk/dC5tYXAoKGZ1bmN0aW9uKHQpe3JldHVybiB0Lm5hbWV9KSk6T2JqZWN0LmtleXModCkpLmZvckVhY2goKGZ1bmN0aW9uKG4scil7dmFyIG89QXJyYXkuaXNBcnJheSh0KT90W3JdLnRlbnNvcjp0W25dO2lmKG51bGwhPW8pe3ZhciBhPUx0LnJlZ2lzdGVyZWRWYXJpYWJsZXNbbl07WmUoKGZ1bmN0aW9uKCl7dmFyIHQ9ZS5jLm11bChvKS5hZGQoYSk7YS5hc3NpZ24odCl9KSl9fSkpLHRoaXMuaW5jcmVtZW50SXRlcmF0aW9ucygpfSxvLnByb3RvdHlwZS5zZXRMZWFybmluZ1JhdGU9ZnVuY3Rpb24odCl7dGhpcy5sZWFybmluZ1JhdGU9dCxudWxsIT10aGlzLmMmJnRoaXMuYy5kaXNwb3NlKCksdGhpcy5jPWVuKE9uKC10KSl9LG8ucHJvdG90eXBlLmRpc3Bvc2U9ZnVuY3Rpb24oKXt0aGlzLmMuZGlzcG9zZSgpfSxvLnByb3RvdHlwZS5nZXRXZWlnaHRzPWZ1bmN0aW9uKCl7cmV0dXJuIG4odGhpcyx2b2lkIDAsdm9pZCAwLChmdW5jdGlvbigpe3JldHVybiByKHRoaXMsKGZ1bmN0aW9uKHQpe3N3aXRjaCh0LmxhYmVsKXtjYXNlIDA6cmV0dXJuWzQsdGhpcy5zYXZlSXRlcmF0aW9ucygpXTtjYXNlIDE6cmV0dXJuWzIsW3Quc2VudCgpXV19fSkpfSkpfSxvLnByb3RvdHlwZS5zZXRXZWlnaHRzPWZ1bmN0aW9uKHQpe3JldHVybiBuKHRoaXMsdm9pZCAwLHZvaWQgMCwoZnVuY3Rpb24oKXtyZXR1cm4gcih0aGlzLChmdW5jdGlvbihlKXtzd2l0Y2goZS5sYWJlbCl7Y2FzZSAwOnJldHVybls0LHRoaXMuZXh0cmFjdEl0ZXJhdGlvbnModCldO2Nhc2UgMTppZigwIT09KHQ9ZS5zZW50KCkpLmxlbmd0aCl0aHJvdyBuZXcgRXJyb3IoXCJTR0Qgb3B0aW1pemVyIGRvZXMgbm90IGhhdmUgc2V0dGFibGUgd2VpZ2h0cy5cIik7cmV0dXJuWzJdfX0pKX0pKX0sby5wcm90b3R5cGUuZ2V0Q29uZmlnPWZ1bmN0aW9uKCl7cmV0dXJue2xlYXJuaW5nUmF0ZTp0aGlzLmxlYXJuaW5nUmF0ZX19LG8uZnJvbUNvbmZpZz1mdW5jdGlvbih0LGUpe3JldHVybiBuZXcgdChlLmxlYXJuaW5nUmF0ZSl9LG8uY2xhc3NOYW1lPVwiU0dEXCIsb30oeGQpO2NkKFJkKTt2YXIgSWQ9ZnVuY3Rpb24odCl7ZnVuY3Rpb24gbyhlLG4scil7dm9pZCAwPT09ciYmKHI9ITEpO3ZhciBvPXQuY2FsbCh0aGlzLGUpfHx0aGlzO3JldHVybiBvLmxlYXJuaW5nUmF0ZT1lLG8ubW9tZW50dW09bixvLnVzZU5lc3Rlcm92PXIsby5hY2N1bXVsYXRpb25zPVtdLG8ubT1PbihvLm1vbWVudHVtKSxvfXJldHVybiBlKG8sdCksby5wcm90b3R5cGUuYXBwbHlHcmFkaWVudHM9ZnVuY3Rpb24odCl7dmFyIGU9dGhpczsoQXJyYXkuaXNBcnJheSh0KT90Lm1hcCgoZnVuY3Rpb24odCl7cmV0dXJuIHQubmFtZX0pKTpPYmplY3Qua2V5cyh0KSkuZm9yRWFjaCgoZnVuY3Rpb24obixyKXt2YXIgbz1MdC5yZWdpc3RlcmVkVmFyaWFibGVzW25dO2lmKG51bGw9PWUuYWNjdW11bGF0aW9uc1tyXSl7ZS5hY2N1bXVsYXRpb25zW3JdPXtvcmlnaW5hbE5hbWU6bitcIi9tb21lbnR1bVwiLHZhcmlhYmxlOlplKChmdW5jdGlvbigpe3JldHVybiBYbihvKS52YXJpYWJsZSghMSl9KSl9fXZhciBhPWUuYWNjdW11bGF0aW9uc1tyXS52YXJpYWJsZSxpPUFycmF5LmlzQXJyYXkodCk/dFtyXS50ZW5zb3I6dFtuXTtudWxsIT1pJiZaZSgoZnVuY3Rpb24oKXt2YXIgdCxuPWUubS5tdWwoYSkuYWRkKGkpO3Q9ZS51c2VOZXN0ZXJvdj9lLmMubXVsKGkuYWRkKG4ubXVsKGUubSkpKS5hZGQobyk6ZS5jLm11bChuKS5hZGQobyksYS5hc3NpZ24obiksby5hc3NpZ24odCl9KSl9KSksdGhpcy5pbmNyZW1lbnRJdGVyYXRpb25zKCl9LG8ucHJvdG90eXBlLmRpc3Bvc2U9ZnVuY3Rpb24oKXt0aGlzLm0uZGlzcG9zZSgpLG51bGwhPXRoaXMuYWNjdW11bGF0aW9ucyYmdG4odGhpcy5hY2N1bXVsYXRpb25zLm1hcCgoZnVuY3Rpb24odCl7cmV0dXJuIHQudmFyaWFibGV9KSkpfSxvLnByb3RvdHlwZS5zZXRNb21lbnR1bT1mdW5jdGlvbih0KXt0aGlzLm1vbWVudHVtPXR9LG8ucHJvdG90eXBlLmdldFdlaWdodHM9ZnVuY3Rpb24oKXtyZXR1cm4gbih0aGlzLHZvaWQgMCx2b2lkIDAsKGZ1bmN0aW9uKCl7cmV0dXJuIHIodGhpcywoZnVuY3Rpb24odCl7c3dpdGNoKHQubGFiZWwpe2Nhc2UgMDpyZXR1cm5bNCx0aGlzLnNhdmVJdGVyYXRpb25zKCldO2Nhc2UgMTpyZXR1cm5bMixbdC5zZW50KCldLmNvbmNhdCh0aGlzLmFjY3VtdWxhdGlvbnMubWFwKChmdW5jdGlvbih0KXtyZXR1cm57bmFtZTp0Lm9yaWdpbmFsTmFtZSx0ZW5zb3I6dC52YXJpYWJsZX19KSkpXX19KSl9KSl9LG8ucHJvdG90eXBlLnNldFdlaWdodHM9ZnVuY3Rpb24odCl7cmV0dXJuIG4odGhpcyx2b2lkIDAsdm9pZCAwLChmdW5jdGlvbigpe3JldHVybiByKHRoaXMsKGZ1bmN0aW9uKGUpe3N3aXRjaChlLmxhYmVsKXtjYXNlIDA6cmV0dXJuWzQsdGhpcy5leHRyYWN0SXRlcmF0aW9ucyh0KV07Y2FzZSAxOnJldHVybiB0PWUuc2VudCgpLCExLHRoaXMuYWNjdW11bGF0aW9ucz10Lm1hcCgoZnVuY3Rpb24odCl7cmV0dXJue29yaWdpbmFsTmFtZTp0Lm5hbWUsdmFyaWFibGU6dC50ZW5zb3IudmFyaWFibGUoITEpfX0pKSxbMl19fSkpfSkpfSxvLnByb3RvdHlwZS5nZXRDb25maWc9ZnVuY3Rpb24oKXtyZXR1cm57bGVhcm5pbmdSYXRlOnRoaXMubGVhcm5pbmdSYXRlLG1vbWVudHVtOnRoaXMubW9tZW50dW0sdXNlTmVzdGVyb3Y6dGhpcy51c2VOZXN0ZXJvdn19LG8uZnJvbUNvbmZpZz1mdW5jdGlvbih0LGUpe3JldHVybiBuZXcgdChlLmxlYXJuaW5nUmF0ZSxlLm1vbWVudHVtLGUudXNlTmVzdGVyb3YpfSxvLmNsYXNzTmFtZT1cIk1vbWVudHVtXCIsb30oUmQpO2NkKElkKTt2YXIga2Q9ZnVuY3Rpb24odCl7ZnVuY3Rpb24gbyhlLG4scixvLGEpe3ZvaWQgMD09PW4mJihuPS45KSx2b2lkIDA9PT1yJiYocj0wKSx2b2lkIDA9PT1vJiYobz1udWxsKSx2b2lkIDA9PT1hJiYoYT0hMSk7dmFyIGk9dC5jYWxsKHRoaXMpfHx0aGlzO2lmKGkubGVhcm5pbmdSYXRlPWUsaS5kZWNheT1uLGkubW9tZW50dW09cixpLmVwc2lsb249byxpLmFjY3VtdWxhdGVkTWVhblNxdWFyZXM9W10saS5hY2N1bXVsYXRlZE1vbWVudHM9W10saS5hY2N1bXVsYXRlZE1lYW5HcmFkcz1bXSxpLmNlbnRlcmVkPWEsbnVsbD09byYmKGkuZXBzaWxvbj1MdC5iYWNrZW5kLmVwc2lsb24oKSksbnVsbD09ZSl0aHJvdyBuZXcgRXJyb3IoXCJsZWFybmluZ1JhdGUgZm9yIFJNU1Byb3BPcHRpbWl6ZXIgbXVzdCBiZSBkZWZpbmVkLlwiKTtyZXR1cm4gaX1yZXR1cm4gZShvLHQpLG8ucHJvdG90eXBlLmFwcGx5R3JhZGllbnRzPWZ1bmN0aW9uKHQpe3ZhciBlPXRoaXM7KEFycmF5LmlzQXJyYXkodCk/dC5tYXAoKGZ1bmN0aW9uKHQpe3JldHVybiB0Lm5hbWV9KSk6T2JqZWN0LmtleXModCkpLmZvckVhY2goKGZ1bmN0aW9uKG4scil7dmFyIG89THQucmVnaXN0ZXJlZFZhcmlhYmxlc1tuXTtudWxsPT1lLmFjY3VtdWxhdGVkTWVhblNxdWFyZXNbcl0mJihlLmFjY3VtdWxhdGVkTWVhblNxdWFyZXNbcl09e29yaWdpbmFsTmFtZTpuK1wiL3Jtc1wiLHZhcmlhYmxlOlplKChmdW5jdGlvbigpe3JldHVybiBYbihvKS52YXJpYWJsZSghMSl9KSl9KSxudWxsPT1lLmFjY3VtdWxhdGVkTW9tZW50c1tyXSYmKGUuYWNjdW11bGF0ZWRNb21lbnRzW3JdPXtvcmlnaW5hbE5hbWU6bitcIi9tb21lbnR1bVwiLHZhcmlhYmxlOlplKChmdW5jdGlvbigpe3JldHVybiBYbihvKS52YXJpYWJsZSghMSl9KSl9KSxudWxsPT1lLmFjY3VtdWxhdGVkTWVhbkdyYWRzW3JdJiZlLmNlbnRlcmVkJiYoZS5hY2N1bXVsYXRlZE1lYW5HcmFkc1tyXT17b3JpZ2luYWxOYW1lOm4rXCIvbWdcIix2YXJpYWJsZTpaZSgoZnVuY3Rpb24oKXtyZXR1cm4gWG4obykudmFyaWFibGUoITEpfSkpfSk7dmFyIGE9QXJyYXkuaXNBcnJheSh0KT90W3JdLnRlbnNvcjp0W25dO2lmKG51bGwhPWEpe3ZhciBpPWUuYWNjdW11bGF0ZWRNZWFuU3F1YXJlc1tyXS52YXJpYWJsZSxzPWUuYWNjdW11bGF0ZWRNb21lbnRzW3JdLnZhcmlhYmxlO1plKChmdW5jdGlvbigpe3ZhciB0PWkubXVsKGUuZGVjYXkpLmFkZChhLnNxdWFyZSgpLm11bCgxLWUuZGVjYXkpKTtpZihlLmNlbnRlcmVkKXt2YXIgbj1lLmFjY3VtdWxhdGVkTWVhbkdyYWRzW3JdLnZhcmlhYmxlLHU9bi5tdWwoZS5kZWNheSkuYWRkKGEubXVsKDEtZS5kZWNheSkpLGM9cy5tdWwoZS5tb21lbnR1bSkuYWRkKGEubXVsKGUubGVhcm5pbmdSYXRlKS5kaXYodC5zdWIodS5zcXVhcmUoKS5hZGQoZS5lcHNpbG9uKSkuc3FydCgpKSk7aS5hc3NpZ24odCksbi5hc3NpZ24odSkscy5hc3NpZ24oYyk7dmFyIGw9by5zdWIoYyk7by5hc3NpZ24obCl9ZWxzZXt2YXIgaD1pLm11bChlLmRlY2F5KS5hZGQoYS5zcXVhcmUoKS5tdWwoMS1lLmRlY2F5KSk7Yz1zLm11bChlLm1vbWVudHVtKS5hZGQoYS5tdWwoZS5sZWFybmluZ1JhdGUpLmRpdihoLmFkZChlLmVwc2lsb24pLnNxcnQoKSkpO2kuYXNzaWduKGgpLHMuYXNzaWduKGMpO2w9by5zdWIoYyk7by5hc3NpZ24obCl9fSkpfX0pKSx0aGlzLmluY3JlbWVudEl0ZXJhdGlvbnMoKX0sby5wcm90b3R5cGUuZGlzcG9zZT1mdW5jdGlvbigpe251bGwhPXRoaXMuYWNjdW11bGF0ZWRNZWFuU3F1YXJlcyYmdG4odGhpcy5hY2N1bXVsYXRlZE1lYW5TcXVhcmVzLm1hcCgoZnVuY3Rpb24odCl7cmV0dXJuIHQudmFyaWFibGV9KSkpLG51bGwhPXRoaXMuYWNjdW11bGF0ZWRNZWFuR3JhZHMmJnRoaXMuY2VudGVyZWQmJnRuKHRoaXMuYWNjdW11bGF0ZWRNZWFuR3JhZHMubWFwKChmdW5jdGlvbih0KXtyZXR1cm4gdC52YXJpYWJsZX0pKSksbnVsbCE9dGhpcy5hY2N1bXVsYXRlZE1vbWVudHMmJnRuKHRoaXMuYWNjdW11bGF0ZWRNb21lbnRzLm1hcCgoZnVuY3Rpb24odCl7cmV0dXJuIHQudmFyaWFibGV9KSkpfSxvLnByb3RvdHlwZS5nZXRXZWlnaHRzPWZ1bmN0aW9uKCl7cmV0dXJuIG4odGhpcyx2b2lkIDAsdm9pZCAwLChmdW5jdGlvbigpe3ZhciB0O3JldHVybiByKHRoaXMsKGZ1bmN0aW9uKGUpe3N3aXRjaChlLmxhYmVsKXtjYXNlIDA6cmV0dXJuIHQ9dGhpcy5hY2N1bXVsYXRlZE1lYW5TcXVhcmVzLmNvbmNhdCh0aGlzLmFjY3VtdWxhdGVkTW9tZW50cyksdGhpcy5jZW50ZXJlZCYmdC5wdXNoLmFwcGx5KHQsdGhpcy5hY2N1bXVsYXRlZE1lYW5HcmFkcyksWzQsdGhpcy5zYXZlSXRlcmF0aW9ucygpXTtjYXNlIDE6cmV0dXJuWzIsW2Uuc2VudCgpXS5jb25jYXQodC5tYXAoKGZ1bmN0aW9uKHQpe3JldHVybntuYW1lOnQub3JpZ2luYWxOYW1lLHRlbnNvcjp0LnZhcmlhYmxlfX0pKSldfX0pKX0pKX0sby5wcm90b3R5cGUuc2V0V2VpZ2h0cz1mdW5jdGlvbih0KXtyZXR1cm4gbih0aGlzLHZvaWQgMCx2b2lkIDAsKGZ1bmN0aW9uKCl7dmFyIGU7cmV0dXJuIHIodGhpcywoZnVuY3Rpb24obil7c3dpdGNoKG4ubGFiZWwpe2Nhc2UgMDpyZXR1cm5bNCx0aGlzLmV4dHJhY3RJdGVyYXRpb25zKHQpXTtjYXNlIDE6cmV0dXJuIHQ9bi5zZW50KCksZT10aGlzLmNlbnRlcmVkP3QubGVuZ3RoLzM6dC5sZW5ndGgvMiwhMSx0aGlzLmFjY3VtdWxhdGVkTWVhblNxdWFyZXM9dC5zbGljZSgwLGUpLm1hcCgoZnVuY3Rpb24odCl7cmV0dXJue29yaWdpbmFsTmFtZTp0Lm5hbWUsdmFyaWFibGU6dC50ZW5zb3IudmFyaWFibGUoITEpfX0pKSx0aGlzLmFjY3VtdWxhdGVkTW9tZW50cz10LnNsaWNlKGUsMiplKS5tYXAoKGZ1bmN0aW9uKHQpe3JldHVybntvcmlnaW5hbE5hbWU6dC5uYW1lLHZhcmlhYmxlOnQudGVuc29yLnZhcmlhYmxlKCExKX19KSksdGhpcy5jZW50ZXJlZCYmKHRoaXMuYWNjdW11bGF0ZWRNZWFuR3JhZHM9dC5zbGljZSgyKmUsMyplKS5tYXAoKGZ1bmN0aW9uKHQpe3JldHVybntvcmlnaW5hbE5hbWU6dC5uYW1lLHZhcmlhYmxlOnQudGVuc29yLnZhcmlhYmxlKCExKX19KSkpLFsyXX19KSl9KSl9LG8ucHJvdG90eXBlLmdldENvbmZpZz1mdW5jdGlvbigpe3JldHVybntsZWFybmluZ1JhdGU6dGhpcy5sZWFybmluZ1JhdGUsZGVjYXk6dGhpcy5kZWNheSxtb21lbnR1bTp0aGlzLm1vbWVudHVtLGVwc2lsb246dGhpcy5lcHNpbG9uLGNlbnRlcmVkOnRoaXMuY2VudGVyZWR9fSxvLmZyb21Db25maWc9ZnVuY3Rpb24odCxlKXtyZXR1cm4gbmV3IHQoZS5sZWFybmluZ1JhdGUsZS5kZWNheSxlLm1vbWVudHVtLGUuZXBzaWxvbixlLmNlbnRlcmVkKX0sby5jbGFzc05hbWU9XCJSTVNQcm9wXCIsb30oeGQpO2NkKGtkKTt2YXIgU2Q9ZnVuY3Rpb24oKXtmdW5jdGlvbiB0KCl7fXJldHVybiB0LnNnZD1mdW5jdGlvbih0KXtyZXR1cm4gbmV3IFJkKHQpfSx0Lm1vbWVudHVtPWZ1bmN0aW9uKHQsZSxuKXtyZXR1cm4gdm9pZCAwPT09biYmKG49ITEpLG5ldyBJZCh0LGUsbil9LHQucm1zcHJvcD1mdW5jdGlvbih0LGUsbixyLG8pe3JldHVybiB2b2lkIDA9PT1lJiYoZT0uOSksdm9pZCAwPT09biYmKG49MCksdm9pZCAwPT09ciYmKHI9bnVsbCksdm9pZCAwPT09byYmKG89ITEpLG5ldyBrZCh0LGUsbixyLG8pfSx0LmFkYW09ZnVuY3Rpb24odCxlLG4scil7cmV0dXJuIHZvaWQgMD09PXQmJih0PS4wMDEpLHZvaWQgMD09PWUmJihlPS45KSx2b2lkIDA9PT1uJiYobj0uOTk5KSx2b2lkIDA9PT1yJiYocj1udWxsKSxuZXcgQ2QodCxlLG4scil9LHQuYWRhZGVsdGE9ZnVuY3Rpb24odCxlLG4pe3JldHVybiB2b2lkIDA9PT10JiYodD0uMDAxKSx2b2lkIDA9PT1lJiYoZT0uOTUpLHZvaWQgMD09PW4mJihuPW51bGwpLG5ldyBiZCh0LGUsbil9LHQuYWRhbWF4PWZ1bmN0aW9uKHQsZSxuLHIsbyl7cmV0dXJuIHZvaWQgMD09PXQmJih0PS4wMDIpLHZvaWQgMD09PWUmJihlPS45KSx2b2lkIDA9PT1uJiYobj0uOTk5KSx2b2lkIDA9PT1yJiYocj1udWxsKSx2b2lkIDA9PT1vJiYobz0wKSxuZXcgRWQodCxlLG4scixvKX0sdC5hZGFncmFkPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIHZvaWQgMD09PWUmJihlPS4xKSxuZXcgd2QodCxlKX0sdH0oKSxBZD17c2dkOlNkLnNnZCxtb21lbnR1bTpTZC5tb21lbnR1bSxhZGFkZWx0YTpTZC5hZGFkZWx0YSxhZGFncmFkOlNkLmFkYWdyYWQscm1zcHJvcDpTZC5ybXNwcm9wLGFkYW1heDpTZC5hZGFtYXgsYWRhbTpTZC5hZGFtfSxEZD1cInVuZGVmaW5lZFwiIT10eXBlb2YgcmVxdWVzdEFuaW1hdGlvbkZyYW1lP3JlcXVlc3RBbmltYXRpb25GcmFtZTpcInVuZGVmaW5lZFwiIT10eXBlb2Ygc2V0SW1tZWRpYXRlP3NldEltbWVkaWF0ZTpmdW5jdGlvbih0KXtyZXR1cm4gdCgpfTtmdW5jdGlvbiBUZCgpe3JldHVybiBuZXcgUHJvbWlzZSgoZnVuY3Rpb24odCl7cmV0dXJuIERkKChmdW5jdGlvbigpe3JldHVybiB0KCl9KSl9KSl9d3QucHJvdG90eXBlLnNxdWFyZWREaWZmZXJlbmNlPWZ1bmN0aW9uKHQpe3JldHVybiBudSh0aGlzLHQpfSx4dD1HaDtleHBvcnR7YmQgYXMgQWRhZGVsdGFPcHRpbWl6ZXIsd2QgYXMgQWRhZ3JhZE9wdGltaXplcixDZCBhcyBBZGFtT3B0aW1pemVyLEVkIGFzIEFkYW1heE9wdGltaXplcix4byBhcyBEYXRhU3RvcmFnZSxzIGFzIEVOVixvIGFzIEVudmlyb25tZW50LGJvIGFzIEtlcm5lbEJhY2tlbmQsSWQgYXMgTW9tZW50dW1PcHRpbWl6ZXIseGQgYXMgT3B0aW1pemVyLGtkIGFzIFJNU1Byb3BPcHRpbWl6ZXIsQ3QgYXMgUmFuayxjaCBhcyBSZWR1Y3Rpb24sUmQgYXMgU0dET3B0aW1pemVyLHd0IGFzIFRlbnNvcixndCBhcyBUZW5zb3JCdWZmZXIsU3QgYXMgVmFyaWFibGUscnUgYXMgYWJzLG91IGFzIGFjb3MsYXUgYXMgYWNvc2gscmMgYXMgYWRkLG9jIGFzIGFkZE4sYWMgYXMgYWRkU3RyaWN0LENsIGFzIGFsbCxFbCBhcyBhbnksUmwgYXMgYXJnTWF4LElsIGFzIGFyZ01pbixpdSBhcyBhc2luLHN1IGFzIGFzaW5oLHV1IGFzIGF0YW4saWMgYXMgYXRhbjIsY3UgYXMgYXRhbmgsZmwgYXMgYXZnUG9vbCx2bCBhcyBhdmdQb29sM2QsaG4gYXMgYmFja2VuZCxVbyBhcyBiYWNrZW5kX3V0aWwsemwgYXMgYmFzaWNMU1RNQ2VsbCxqdSBhcyBiYXRjaE5vcm0sWHUgYXMgYmF0Y2hOb3JtMmQsWXUgYXMgYmF0Y2hOb3JtM2QsJHUgYXMgYmF0Y2hOb3JtNGQsS3UgYXMgYmF0Y2hOb3JtYWxpemF0aW9uLEd1IGFzIGJhdGNoTm9ybWFsaXphdGlvbjJkLEh1IGFzIGJhdGNoTm9ybWFsaXphdGlvbjNkLHF1IGFzIGJhdGNoTm9ybWFsaXphdGlvbjRkLHZyIGFzIGJhdGNoVG9TcGFjZU5ELFVjIGFzIGJvb2xlYW5NYXNrQXN5bmMsbXIgYXMgYnJvYWRjYXN0VG8saWQgYXMgYnJvd3NlcixkciBhcyBidWZmZXIsZ3IgYXMgY2FzdCxsdSBhcyBjZWlsLGh1IGFzIGNsaXBCeVZhbHVlLHlyIGFzIGNsb25lLERuIGFzIGNvbXBsZXgsWW4gYXMgY29uY2F0LCRuIGFzIGNvbmNhdDFkLFFuIGFzIGNvbmNhdDJkLEpuIGFzIGNvbmNhdDNkLFpuIGFzIGNvbmNhdDRkLEhjIGFzIGNvbnYxZCxxYyBhcyBjb252MmQsWmMgYXMgY29udjJkVHJhbnNwb3NlLEtjIGFzIGNvbnYzZCx0bCBhcyBjb252M2RUcmFuc3Bvc2UsZnUgYXMgY29zLGR1IGFzIGNvc2gseHIgYXMgY3Vtc3VtLHZvIGFzIGN1c3RvbUdyYWQsWGUgYXMgZGVwcmVjYXRpb25XYXJuLGJyIGFzIGRlcHRoVG9TcGFjZSxZYyBhcyBkZXB0aHdpc2VDb252MmQsZWggYXMgZGlhZyxqZSBhcyBkaXNhYmxlRGVwcmVjYXRpb25XYXJuaW5ncyx0biBhcyBkaXNwb3NlLFllIGFzIGRpc3Bvc2VWYXJpYWJsZXMsc2MgYXMgZGl2LHVjIGFzIGRpdk5vTmFuLGNjIGFzIGRpdlN0cmljdCxubCBhcyBkb3QsbmggYXMgZHJvcG91dCxfbCBhcyBlbHUsS2UgYXMgZW5hYmxlRGVidWdNb2RlLHFlIGFzIGVuYWJsZVByb2RNb2RlLCRlIGFzIGVuZ2luZSxpIGFzIGVudixSYyBhcyBlcXVhbCxJYyBhcyBlcXVhbFN0cmljdCxwdSBhcyBlcmYsdnUgYXMgZXhwLHdyIGFzIGV4cGFuZERpbXMsbXUgYXMgZXhwbTEsQ3IgYXMgZXllLFhsIGFzIGZmdCxIbiBhcyBmaWxsLHVuIGFzIGZpbmRCYWNrZW5kLGNuIGFzIGZpbmRCYWNrZW5kRmFjdG9yeSxndSBhcyBmbG9vcixsYyBhcyBmbG9vckRpdixpaCBhcyBmcmFtZSx6aCBhcyBmdXNlZCxMYyBhcyBnYXRoZXIsdGggYXMgZ2F0aGVyTkQsWHIgYXMgZ2F0aGVyX3V0aWwsYW4gYXMgZ2V0QmFja2VuZCxoIGFzIGdldEdyYWRpZW50LGwgYXMgZ2V0S2VybmVsLGYgYXMgZ2V0S2VybmVsc0ZvckJhY2tlbmQsY28gYXMgZ3JhZCxsbyBhcyBncmFkcyxrYyBhcyBncmVhdGVyLFNjIGFzIGdyZWF0ZXJFcXVhbCxBYyBhcyBncmVhdGVyRXF1YWxTdHJpY3QsRGMgYXMgZ3JlYXRlclN0cmljdCxhaCBhcyBoYW1taW5nV2luZG93LG9oIGFzIGhhbm5XaW5kb3csWWwgYXMgaWZmdCxObiBhcyBpbWFnLE9oIGFzIGltYWdlLGxoIGFzIGluVG9wS0FzeW5jLGVkIGFzIGlvLFFsIGFzIGlyZmZ0LER1IGFzIGlzRmluaXRlLEF1IGFzIGlzSW5mLFN1IGFzIGlzTmFOLGVuIGFzIGtlZXAsT2wgYXMgbGVha3lSZWx1LFRjIGFzIGxlc3MsTmMgYXMgbGVzc0VxdWFsLEZjIGFzIGxlc3NFcXVhbFN0cmljdCxfYyBhcyBsZXNzU3RyaWN0LEloIGFzIGxpbmFsZyxxbiBhcyBsaW5zcGFjZSxVbCBhcyBsb2NhbFJlc3BvbnNlTm9ybWFsaXphdGlvbix5dSBhcyBsb2cseHUgYXMgbG9nMXAsYnUgYXMgbG9nU2lnbW9pZCx5byBhcyBsb2dTb2Z0bWF4LGtsIGFzIGxvZ1N1bUV4cCxRdSBhcyBsb2dpY2FsQW5kLEp1IGFzIGxvZ2ljYWxOb3QsWnUgYXMgbG9naWNhbE9yLHRjIGFzIGxvZ2ljYWxYb3IsYmggYXMgbG9zc2VzLGVsIGFzIG1hdE11bCxvZCBhcyBtYXRoLFNsIGFzIG1heCxobCBhcyBtYXhQb29sLHBsIGFzIG1heFBvb2wzZCxoYyBhcyBtYXhpbXVtLGZjIGFzIG1heGltdW1TdHJpY3QsQWwgYXMgbWVhbixRZSBhcyBtZW1vcnksRGwgYXMgbWluLGRjIGFzIG1pbmltdW0scGMgYXMgbWluaW11bVN0cmljdCx2YyBhcyBtb2QsbWMgYXMgbW9kU3RyaWN0LFRsIGFzIG1vbWVudHMsSGwgYXMgbW92aW5nQXZlcmFnZSxnYyBhcyBtdWwseWMgYXMgbXVsU3RyaWN0LEdsIGFzIG11bHRpUk5OQ2VsbCxFciBhcyBtdWx0aW5vbWlhbCx3dSBhcyBuZWcsVGQgYXMgbmV4dEZyYW1lLFZsIGFzIG5vcm0sT2MgYXMgbm90RXF1YWwsTWMgYXMgbm90RXF1YWxTdHJpY3QsUnIgYXMgb25lSG90LHpuIGFzIG9uZXMsam4gYXMgb25lc0xpa2UsQW4gYXMgb3AscmwgYXMgb3V0ZXJQcm9kdWN0LElyIGFzIHBhZCxrciBhcyBwYWQxZCxTciBhcyBwYWQyZCxBciBhcyBwYWQzZCxEciBhcyBwYWQ0ZCxkbCBhcyBwb29sLHhjIGFzIHBvdyxiYyBhcyBwb3dTdHJpY3QsTWwgYXMgcHJlbHUscHIgYXMgcHJpbnQsRmwgYXMgcHJvZCxKZSBhcyBwcm9maWxlLFRyIGFzIHJhbmQsRnIgYXMgcmFuZG9tR2FtbWEsTnIgYXMgcmFuZG9tTm9ybWFsLF9yIGFzIHJhbmRvbVVuaWZvcm0sS24gYXMgcmFuZ2Usb24gYXMgcmVhZHksVG4gYXMgcmVhbCxDdSBhcyByZWNpcHJvY2FsLGxuIGFzIHJlZ2lzdGVyQmFja2VuZCxwIGFzIHJlZ2lzdGVyR3JhZGllbnQsZCBhcyByZWdpc3Rlcktlcm5lbCxCbCBhcyByZWx1LFBsIGFzIHJlbHU2LHNuIGFzIHJlbW92ZUJhY2tlbmQsT3IgYXMgcmVzaGFwZSxvbCBhcyByZXZlcnNlLGFsIGFzIHJldmVyc2UxZCxpbCBhcyByZXZlcnNlMmQsc2wgYXMgcmV2ZXJzZTNkLHVsIGFzIHJldmVyc2U0ZCwkbCBhcyByZmZ0LEV1IGFzIHJvdW5kLFJ1IGFzIHJzcXJ0LE9uIGFzIHNjYWxhcixqbCBhcyBzY2F0dGVyTkQsdG8gYXMgc2NhdHRlcl91dGlsLExsIGFzIHNlbHUsSmMgYXMgc2VwYXJhYmxlQ29udjJkLGxkIGFzIHNlcmlhbGl6YXRpb24scm4gYXMgc2V0QmFja2VuZCxmbiBhcyBzZXRQbGF0Zm9ybSxWciBhcyBzZXRkaWZmMWRBc3luYyxJdSBhcyBzaWdtb2lkLGt1IGFzIHNpZ24sdWggYXMgc2lnbmFsLFR1IGFzIHNpbixOdSBhcyBzaW5oLG1sIGFzIHNsaWNlLGdsIGFzIHNsaWNlMWQseWwgYXMgc2xpY2UyZCx4bCBhcyBzbGljZTNkLGJsIGFzIHNsaWNlNGQsdW8gYXMgc2xpY2VfdXRpbCxnbyBhcyBzb2Z0bWF4LEZ1IGFzIHNvZnRwbHVzLE1yIGFzIHNwYWNlVG9CYXRjaE5ELFpsIGFzIHNwYXJzZVRvRGVuc2UsSmwgYXMgc3BlY3RyYWwsdHIgYXMgc3BsaXQsX3UgYXMgc3FydCx0dSBhcyBzcXVhcmUsbnUgYXMgc3F1YXJlZERpZmZlcmVuY2Usd2MgYXMgc3F1YXJlZERpZmZlcmVuY2VTdHJpY3QsQnIgYXMgc3F1ZWV6ZSxQciBhcyBzdGFjayxPdSBhcyBzdGVwLHNoIGFzIHN0ZnQscWwgYXMgc3RyaWRlZFNsaWNlLENjIGFzIHN1YixFYyBhcyBzdWJTdHJpY3QsTmwgYXMgc3VtLFR0IGFzIHN1bU91dFR5cGUsTXUgYXMgdGFuLEJ1IGFzIHRhbmgsRm4gYXMgdGVuc29yLE1uIGFzIHRlbnNvcjFkLEJuIGFzIHRlbnNvcjJkLFBuIGFzIHRlbnNvcjNkLExuIGFzIHRlbnNvcjRkLFduIGFzIHRlbnNvcjVkLFVuIGFzIHRlbnNvcjZkLE10IGFzIHRlbnNvcl91dGlsLG1kIGFzIHRlc3RfdXRpbCxaZSBhcyB0aWR5LExyIGFzIHRpbGUsbm4gYXMgdGltZSxLbCBhcyB0b3BrLEFkIGFzIHRyYWluLFdsIGFzIHRyYW5zcG9zZSxXciBhcyB0cnVuY2F0ZWROb3JtYWwsbSBhcyB1bnJlZ2lzdGVyR3JhZGllbnQsdiBhcyB1bnJlZ2lzdGVyS2VybmVsLFdjIGFzIHVuc29ydGVkU2VnbWVudFN1bSxVciBhcyB1bnN0YWNrLHN0IGFzIHV0aWwsaG8gYXMgdmFsdWVBbmRHcmFkLGZvIGFzIHZhbHVlQW5kR3JhZHMsVm4gYXMgdmFyaWFibGUscG8gYXMgdmFyaWFibGVHcmFkcyxnZCBhcyB2ZXJzaW9uX2NvcmUseWQgYXMgd2ViZ2wsZWMgYXMgd2hlcmUsbmMgYXMgd2hlcmVBc3luYyxHbiBhcyB6ZXJvcyxYbiBhcyB6ZXJvc0xpa2V9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dGYtY29yZS5lc20uanMubWFwXG4iLCJleHBvcnQgZnVuY3Rpb24gZHJhd0NvbnRvdXIoY3R4LCBwb2ludHMsIGlzQ2xvc2VkKSB7XHJcbiAgICBpZiAoaXNDbG9zZWQgPT09IHZvaWQgMCkgeyBpc0Nsb3NlZCA9IGZhbHNlOyB9XHJcbiAgICBjdHguYmVnaW5QYXRoKCk7XHJcbiAgICBwb2ludHMuc2xpY2UoMSkuZm9yRWFjaChmdW5jdGlvbiAoX2EsIHByZXZJZHgpIHtcclxuICAgICAgICB2YXIgeCA9IF9hLngsIHkgPSBfYS55O1xyXG4gICAgICAgIHZhciBmcm9tID0gcG9pbnRzW3ByZXZJZHhdO1xyXG4gICAgICAgIGN0eC5tb3ZlVG8oZnJvbS54LCBmcm9tLnkpO1xyXG4gICAgICAgIGN0eC5saW5lVG8oeCwgeSk7XHJcbiAgICB9KTtcclxuICAgIGlmIChpc0Nsb3NlZCkge1xyXG4gICAgICAgIHZhciBmcm9tID0gcG9pbnRzW3BvaW50cy5sZW5ndGggLSAxXTtcclxuICAgICAgICB2YXIgdG8gPSBwb2ludHNbMF07XHJcbiAgICAgICAgaWYgKCFmcm9tIHx8ICF0bykge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGN0eC5tb3ZlVG8oZnJvbS54LCBmcm9tLnkpO1xyXG4gICAgICAgIGN0eC5saW5lVG8odG8ueCwgdG8ueSk7XHJcbiAgICB9XHJcbiAgICBjdHguc3Ryb2tlKCk7XHJcbn1cclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZHJhd0NvbnRvdXIuanMubWFwIiwiLyohICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcbkNvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLlxyXG5cclxuUGVybWlzc2lvbiB0byB1c2UsIGNvcHksIG1vZGlmeSwgYW5kL29yIGRpc3RyaWJ1dGUgdGhpcyBzb2Z0d2FyZSBmb3IgYW55XHJcbnB1cnBvc2Ugd2l0aCBvciB3aXRob3V0IGZlZSBpcyBoZXJlYnkgZ3JhbnRlZC5cclxuXHJcblRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIgQU5EIFRIRSBBVVRIT1IgRElTQ0xBSU1TIEFMTCBXQVJSQU5USUVTIFdJVEhcclxuUkVHQVJEIFRPIFRISVMgU09GVFdBUkUgSU5DTFVESU5HIEFMTCBJTVBMSUVEIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZXHJcbkFORCBGSVRORVNTLiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SIEJFIExJQUJMRSBGT1IgQU5ZIFNQRUNJQUwsIERJUkVDVCxcclxuSU5ESVJFQ1QsIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFUyBPUiBBTlkgREFNQUdFUyBXSEFUU09FVkVSIFJFU1VMVElORyBGUk9NXHJcbkxPU1MgT0YgVVNFLCBEQVRBIE9SIFBST0ZJVFMsIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBORUdMSUdFTkNFIE9SXHJcbk9USEVSIFRPUlRJT1VTIEFDVElPTiwgQVJJU0lORyBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBVU0UgT1JcclxuUEVSRk9STUFOQ0UgT0YgVEhJUyBTT0ZUV0FSRS5cclxuKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cclxuLyogZ2xvYmFsIFJlZmxlY3QsIFByb21pc2UgKi9cclxuXHJcbnZhciBleHRlbmRTdGF0aWNzID0gZnVuY3Rpb24oZCwgYikge1xyXG4gICAgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxyXG4gICAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcclxuICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTsgfTtcclxuICAgIHJldHVybiBleHRlbmRTdGF0aWNzKGQsIGIpO1xyXG59O1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fZXh0ZW5kcyhkLCBiKSB7XHJcbiAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xyXG4gICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XHJcbiAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XHJcbn1cclxuXHJcbmV4cG9ydCB2YXIgX19hc3NpZ24gPSBmdW5jdGlvbigpIHtcclxuICAgIF9fYXNzaWduID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiBfX2Fzc2lnbih0KSB7XHJcbiAgICAgICAgZm9yICh2YXIgcywgaSA9IDEsIG4gPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbjsgaSsrKSB7XHJcbiAgICAgICAgICAgIHMgPSBhcmd1bWVudHNbaV07XHJcbiAgICAgICAgICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSkgdFtwXSA9IHNbcF07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0O1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIF9fYXNzaWduLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX3Jlc3QocywgZSkge1xyXG4gICAgdmFyIHQgPSB7fTtcclxuICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSAmJiBlLmluZGV4T2YocCkgPCAwKVxyXG4gICAgICAgIHRbcF0gPSBzW3BdO1xyXG4gICAgaWYgKHMgIT0gbnVsbCAmJiB0eXBlb2YgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyA9PT0gXCJmdW5jdGlvblwiKVxyXG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBwID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzKTsgaSA8IHAubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgaWYgKGUuaW5kZXhPZihwW2ldKSA8IDAgJiYgT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHMsIHBbaV0pKVxyXG4gICAgICAgICAgICAgICAgdFtwW2ldXSA9IHNbcFtpXV07XHJcbiAgICAgICAgfVxyXG4gICAgcmV0dXJuIHQ7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2RlY29yYXRlKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKSB7XHJcbiAgICB2YXIgYyA9IGFyZ3VtZW50cy5sZW5ndGgsIHIgPSBjIDwgMyA/IHRhcmdldCA6IGRlc2MgPT09IG51bGwgPyBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIGtleSkgOiBkZXNjLCBkO1xyXG4gICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0LmRlY29yYXRlID09PSBcImZ1bmN0aW9uXCIpIHIgPSBSZWZsZWN0LmRlY29yYXRlKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKTtcclxuICAgIGVsc2UgZm9yICh2YXIgaSA9IGRlY29yYXRvcnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIGlmIChkID0gZGVjb3JhdG9yc1tpXSkgciA9IChjIDwgMyA/IGQocikgOiBjID4gMyA/IGQodGFyZ2V0LCBrZXksIHIpIDogZCh0YXJnZXQsIGtleSkpIHx8IHI7XHJcbiAgICByZXR1cm4gYyA+IDMgJiYgciAmJiBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHIpLCByO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19wYXJhbShwYXJhbUluZGV4LCBkZWNvcmF0b3IpIHtcclxuICAgIHJldHVybiBmdW5jdGlvbiAodGFyZ2V0LCBrZXkpIHsgZGVjb3JhdG9yKHRhcmdldCwga2V5LCBwYXJhbUluZGV4KTsgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19tZXRhZGF0YShtZXRhZGF0YUtleSwgbWV0YWRhdGFWYWx1ZSkge1xyXG4gICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0Lm1ldGFkYXRhID09PSBcImZ1bmN0aW9uXCIpIHJldHVybiBSZWZsZWN0Lm1ldGFkYXRhKG1ldGFkYXRhS2V5LCBtZXRhZGF0YVZhbHVlKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fYXdhaXRlcih0aGlzQXJnLCBfYXJndW1lbnRzLCBQLCBnZW5lcmF0b3IpIHtcclxuICAgIGZ1bmN0aW9uIGFkb3B0KHZhbHVlKSB7IHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIFAgPyB2YWx1ZSA6IG5ldyBQKGZ1bmN0aW9uIChyZXNvbHZlKSB7IHJlc29sdmUodmFsdWUpOyB9KTsgfVxyXG4gICAgcmV0dXJuIG5ldyAoUCB8fCAoUCA9IFByb21pc2UpKShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XHJcbiAgICAgICAgZnVuY3Rpb24gZnVsZmlsbGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yLm5leHQodmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxyXG4gICAgICAgIGZ1bmN0aW9uIHJlamVjdGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yW1widGhyb3dcIl0odmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxyXG4gICAgICAgIGZ1bmN0aW9uIHN0ZXAocmVzdWx0KSB7IHJlc3VsdC5kb25lID8gcmVzb2x2ZShyZXN1bHQudmFsdWUpIDogYWRvcHQocmVzdWx0LnZhbHVlKS50aGVuKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpOyB9XHJcbiAgICAgICAgc3RlcCgoZ2VuZXJhdG9yID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMgfHwgW10pKS5uZXh0KCkpO1xyXG4gICAgfSk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2dlbmVyYXRvcih0aGlzQXJnLCBib2R5KSB7XHJcbiAgICB2YXIgXyA9IHsgbGFiZWw6IDAsIHNlbnQ6IGZ1bmN0aW9uKCkgeyBpZiAodFswXSAmIDEpIHRocm93IHRbMV07IHJldHVybiB0WzFdOyB9LCB0cnlzOiBbXSwgb3BzOiBbXSB9LCBmLCB5LCB0LCBnO1xyXG4gICAgcmV0dXJuIGcgPSB7IG5leHQ6IHZlcmIoMCksIFwidGhyb3dcIjogdmVyYigxKSwgXCJyZXR1cm5cIjogdmVyYigyKSB9LCB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgKGdbU3ltYm9sLml0ZXJhdG9yXSA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gdGhpczsgfSksIGc7XHJcbiAgICBmdW5jdGlvbiB2ZXJiKG4pIHsgcmV0dXJuIGZ1bmN0aW9uICh2KSB7IHJldHVybiBzdGVwKFtuLCB2XSk7IH07IH1cclxuICAgIGZ1bmN0aW9uIHN0ZXAob3ApIHtcclxuICAgICAgICBpZiAoZikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkdlbmVyYXRvciBpcyBhbHJlYWR5IGV4ZWN1dGluZy5cIik7XHJcbiAgICAgICAgd2hpbGUgKF8pIHRyeSB7XHJcbiAgICAgICAgICAgIGlmIChmID0gMSwgeSAmJiAodCA9IG9wWzBdICYgMiA/IHlbXCJyZXR1cm5cIl0gOiBvcFswXSA/IHlbXCJ0aHJvd1wiXSB8fCAoKHQgPSB5W1wicmV0dXJuXCJdKSAmJiB0LmNhbGwoeSksIDApIDogeS5uZXh0KSAmJiAhKHQgPSB0LmNhbGwoeSwgb3BbMV0pKS5kb25lKSByZXR1cm4gdDtcclxuICAgICAgICAgICAgaWYgKHkgPSAwLCB0KSBvcCA9IFtvcFswXSAmIDIsIHQudmFsdWVdO1xyXG4gICAgICAgICAgICBzd2l0Y2ggKG9wWzBdKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDA6IGNhc2UgMTogdCA9IG9wOyBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgNDogXy5sYWJlbCsrOyByZXR1cm4geyB2YWx1ZTogb3BbMV0sIGRvbmU6IGZhbHNlIH07XHJcbiAgICAgICAgICAgICAgICBjYXNlIDU6IF8ubGFiZWwrKzsgeSA9IG9wWzFdOyBvcCA9IFswXTsgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDc6IG9wID0gXy5vcHMucG9wKCk7IF8udHJ5cy5wb3AoKTsgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICAgIGlmICghKHQgPSBfLnRyeXMsIHQgPSB0Lmxlbmd0aCA+IDAgJiYgdFt0Lmxlbmd0aCAtIDFdKSAmJiAob3BbMF0gPT09IDYgfHwgb3BbMF0gPT09IDIpKSB7IF8gPSAwOyBjb250aW51ZTsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvcFswXSA9PT0gMyAmJiAoIXQgfHwgKG9wWzFdID4gdFswXSAmJiBvcFsxXSA8IHRbM10pKSkgeyBfLmxhYmVsID0gb3BbMV07IGJyZWFrOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wWzBdID09PSA2ICYmIF8ubGFiZWwgPCB0WzFdKSB7IF8ubGFiZWwgPSB0WzFdOyB0ID0gb3A7IGJyZWFrOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHQgJiYgXy5sYWJlbCA8IHRbMl0pIHsgXy5sYWJlbCA9IHRbMl07IF8ub3BzLnB1c2gob3ApOyBicmVhazsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0WzJdKSBfLm9wcy5wb3AoKTtcclxuICAgICAgICAgICAgICAgICAgICBfLnRyeXMucG9wKCk7IGNvbnRpbnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIG9wID0gYm9keS5jYWxsKHRoaXNBcmcsIF8pO1xyXG4gICAgICAgIH0gY2F0Y2ggKGUpIHsgb3AgPSBbNiwgZV07IHkgPSAwOyB9IGZpbmFsbHkgeyBmID0gdCA9IDA7IH1cclxuICAgICAgICBpZiAob3BbMF0gJiA1KSB0aHJvdyBvcFsxXTsgcmV0dXJuIHsgdmFsdWU6IG9wWzBdID8gb3BbMV0gOiB2b2lkIDAsIGRvbmU6IHRydWUgfTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fY3JlYXRlQmluZGluZyhvLCBtLCBrLCBrMikge1xyXG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcclxuICAgIG9bazJdID0gbVtrXTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fZXhwb3J0U3RhcihtLCBleHBvcnRzKSB7XHJcbiAgICBmb3IgKHZhciBwIGluIG0pIGlmIChwICE9PSBcImRlZmF1bHRcIiAmJiAhZXhwb3J0cy5oYXNPd25Qcm9wZXJ0eShwKSkgZXhwb3J0c1twXSA9IG1bcF07XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX3ZhbHVlcyhvKSB7XHJcbiAgICB2YXIgcyA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBTeW1ib2wuaXRlcmF0b3IsIG0gPSBzICYmIG9bc10sIGkgPSAwO1xyXG4gICAgaWYgKG0pIHJldHVybiBtLmNhbGwobyk7XHJcbiAgICBpZiAobyAmJiB0eXBlb2Ygby5sZW5ndGggPT09IFwibnVtYmVyXCIpIHJldHVybiB7XHJcbiAgICAgICAgbmV4dDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBpZiAobyAmJiBpID49IG8ubGVuZ3RoKSBvID0gdm9pZCAwO1xyXG4gICAgICAgICAgICByZXR1cm4geyB2YWx1ZTogbyAmJiBvW2krK10sIGRvbmU6ICFvIH07XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIHRocm93IG5ldyBUeXBlRXJyb3IocyA/IFwiT2JqZWN0IGlzIG5vdCBpdGVyYWJsZS5cIiA6IFwiU3ltYm9sLml0ZXJhdG9yIGlzIG5vdCBkZWZpbmVkLlwiKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fcmVhZChvLCBuKSB7XHJcbiAgICB2YXIgbSA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvW1N5bWJvbC5pdGVyYXRvcl07XHJcbiAgICBpZiAoIW0pIHJldHVybiBvO1xyXG4gICAgdmFyIGkgPSBtLmNhbGwobyksIHIsIGFyID0gW10sIGU7XHJcbiAgICB0cnkge1xyXG4gICAgICAgIHdoaWxlICgobiA9PT0gdm9pZCAwIHx8IG4tLSA+IDApICYmICEociA9IGkubmV4dCgpKS5kb25lKSBhci5wdXNoKHIudmFsdWUpO1xyXG4gICAgfVxyXG4gICAgY2F0Y2ggKGVycm9yKSB7IGUgPSB7IGVycm9yOiBlcnJvciB9OyB9XHJcbiAgICBmaW5hbGx5IHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBpZiAociAmJiAhci5kb25lICYmIChtID0gaVtcInJldHVyblwiXSkpIG0uY2FsbChpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZmluYWxseSB7IGlmIChlKSB0aHJvdyBlLmVycm9yOyB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gYXI7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX3NwcmVhZCgpIHtcclxuICAgIGZvciAodmFyIGFyID0gW10sIGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKVxyXG4gICAgICAgIGFyID0gYXIuY29uY2F0KF9fcmVhZChhcmd1bWVudHNbaV0pKTtcclxuICAgIHJldHVybiBhcjtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fc3ByZWFkQXJyYXlzKCkge1xyXG4gICAgZm9yICh2YXIgcyA9IDAsIGkgPSAwLCBpbCA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBpbDsgaSsrKSBzICs9IGFyZ3VtZW50c1tpXS5sZW5ndGg7XHJcbiAgICBmb3IgKHZhciByID0gQXJyYXkocyksIGsgPSAwLCBpID0gMDsgaSA8IGlsOyBpKyspXHJcbiAgICAgICAgZm9yICh2YXIgYSA9IGFyZ3VtZW50c1tpXSwgaiA9IDAsIGpsID0gYS5sZW5ndGg7IGogPCBqbDsgaisrLCBrKyspXHJcbiAgICAgICAgICAgIHJba10gPSBhW2pdO1xyXG4gICAgcmV0dXJuIHI7XHJcbn07XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19hd2FpdCh2KSB7XHJcbiAgICByZXR1cm4gdGhpcyBpbnN0YW5jZW9mIF9fYXdhaXQgPyAodGhpcy52ID0gdiwgdGhpcykgOiBuZXcgX19hd2FpdCh2KTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fYXN5bmNHZW5lcmF0b3IodGhpc0FyZywgX2FyZ3VtZW50cywgZ2VuZXJhdG9yKSB7XHJcbiAgICBpZiAoIVN5bWJvbC5hc3luY0l0ZXJhdG9yKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3ltYm9sLmFzeW5jSXRlcmF0b3IgaXMgbm90IGRlZmluZWQuXCIpO1xyXG4gICAgdmFyIGcgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSksIGksIHEgPSBbXTtcclxuICAgIHJldHVybiBpID0ge30sIHZlcmIoXCJuZXh0XCIpLCB2ZXJiKFwidGhyb3dcIiksIHZlcmIoXCJyZXR1cm5cIiksIGlbU3ltYm9sLmFzeW5jSXRlcmF0b3JdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfSwgaTtcclxuICAgIGZ1bmN0aW9uIHZlcmIobikgeyBpZiAoZ1tuXSkgaVtuXSA9IGZ1bmN0aW9uICh2KSB7IHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAoYSwgYikgeyBxLnB1c2goW24sIHYsIGEsIGJdKSA+IDEgfHwgcmVzdW1lKG4sIHYpOyB9KTsgfTsgfVxyXG4gICAgZnVuY3Rpb24gcmVzdW1lKG4sIHYpIHsgdHJ5IHsgc3RlcChnW25dKHYpKTsgfSBjYXRjaCAoZSkgeyBzZXR0bGUocVswXVszXSwgZSk7IH0gfVxyXG4gICAgZnVuY3Rpb24gc3RlcChyKSB7IHIudmFsdWUgaW5zdGFuY2VvZiBfX2F3YWl0ID8gUHJvbWlzZS5yZXNvbHZlKHIudmFsdWUudikudGhlbihmdWxmaWxsLCByZWplY3QpIDogc2V0dGxlKHFbMF1bMl0sIHIpOyB9XHJcbiAgICBmdW5jdGlvbiBmdWxmaWxsKHZhbHVlKSB7IHJlc3VtZShcIm5leHRcIiwgdmFsdWUpOyB9XHJcbiAgICBmdW5jdGlvbiByZWplY3QodmFsdWUpIHsgcmVzdW1lKFwidGhyb3dcIiwgdmFsdWUpOyB9XHJcbiAgICBmdW5jdGlvbiBzZXR0bGUoZiwgdikgeyBpZiAoZih2KSwgcS5zaGlmdCgpLCBxLmxlbmd0aCkgcmVzdW1lKHFbMF1bMF0sIHFbMF1bMV0pOyB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2FzeW5jRGVsZWdhdG9yKG8pIHtcclxuICAgIHZhciBpLCBwO1xyXG4gICAgcmV0dXJuIGkgPSB7fSwgdmVyYihcIm5leHRcIiksIHZlcmIoXCJ0aHJvd1wiLCBmdW5jdGlvbiAoZSkgeyB0aHJvdyBlOyB9KSwgdmVyYihcInJldHVyblwiKSwgaVtTeW1ib2wuaXRlcmF0b3JdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfSwgaTtcclxuICAgIGZ1bmN0aW9uIHZlcmIobiwgZikgeyBpW25dID0gb1tuXSA/IGZ1bmN0aW9uICh2KSB7IHJldHVybiAocCA9ICFwKSA/IHsgdmFsdWU6IF9fYXdhaXQob1tuXSh2KSksIGRvbmU6IG4gPT09IFwicmV0dXJuXCIgfSA6IGYgPyBmKHYpIDogdjsgfSA6IGY7IH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fYXN5bmNWYWx1ZXMobykge1xyXG4gICAgaWYgKCFTeW1ib2wuYXN5bmNJdGVyYXRvcikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN5bWJvbC5hc3luY0l0ZXJhdG9yIGlzIG5vdCBkZWZpbmVkLlwiKTtcclxuICAgIHZhciBtID0gb1tTeW1ib2wuYXN5bmNJdGVyYXRvcl0sIGk7XHJcbiAgICByZXR1cm4gbSA/IG0uY2FsbChvKSA6IChvID0gdHlwZW9mIF9fdmFsdWVzID09PSBcImZ1bmN0aW9uXCIgPyBfX3ZhbHVlcyhvKSA6IG9bU3ltYm9sLml0ZXJhdG9yXSgpLCBpID0ge30sIHZlcmIoXCJuZXh0XCIpLCB2ZXJiKFwidGhyb3dcIiksIHZlcmIoXCJyZXR1cm5cIiksIGlbU3ltYm9sLmFzeW5jSXRlcmF0b3JdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfSwgaSk7XHJcbiAgICBmdW5jdGlvbiB2ZXJiKG4pIHsgaVtuXSA9IG9bbl0gJiYgZnVuY3Rpb24gKHYpIHsgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsgdiA9IG9bbl0odiksIHNldHRsZShyZXNvbHZlLCByZWplY3QsIHYuZG9uZSwgdi52YWx1ZSk7IH0pOyB9OyB9XHJcbiAgICBmdW5jdGlvbiBzZXR0bGUocmVzb2x2ZSwgcmVqZWN0LCBkLCB2KSB7IFByb21pc2UucmVzb2x2ZSh2KS50aGVuKGZ1bmN0aW9uKHYpIHsgcmVzb2x2ZSh7IHZhbHVlOiB2LCBkb25lOiBkIH0pOyB9LCByZWplY3QpOyB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX21ha2VUZW1wbGF0ZU9iamVjdChjb29rZWQsIHJhdykge1xyXG4gICAgaWYgKE9iamVjdC5kZWZpbmVQcm9wZXJ0eSkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkoY29va2VkLCBcInJhd1wiLCB7IHZhbHVlOiByYXcgfSk7IH0gZWxzZSB7IGNvb2tlZC5yYXcgPSByYXc7IH1cclxuICAgIHJldHVybiBjb29rZWQ7XHJcbn07XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19pbXBvcnRTdGFyKG1vZCkge1xyXG4gICAgaWYgKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgcmV0dXJuIG1vZDtcclxuICAgIHZhciByZXN1bHQgPSB7fTtcclxuICAgIGlmIChtb2QgIT0gbnVsbCkgZm9yICh2YXIgayBpbiBtb2QpIGlmIChPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChtb2QsIGspKSByZXN1bHRba10gPSBtb2Rba107XHJcbiAgICByZXN1bHQuZGVmYXVsdCA9IG1vZDtcclxuICAgIHJldHVybiByZXN1bHQ7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2ltcG9ydERlZmF1bHQobW9kKSB7XHJcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IGRlZmF1bHQ6IG1vZCB9O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19jbGFzc1ByaXZhdGVGaWVsZEdldChyZWNlaXZlciwgcHJpdmF0ZU1hcCkge1xyXG4gICAgaWYgKCFwcml2YXRlTWFwLmhhcyhyZWNlaXZlcikpIHtcclxuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiYXR0ZW1wdGVkIHRvIGdldCBwcml2YXRlIGZpZWxkIG9uIG5vbi1pbnN0YW5jZVwiKTtcclxuICAgIH1cclxuICAgIHJldHVybiBwcml2YXRlTWFwLmdldChyZWNlaXZlcik7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2NsYXNzUHJpdmF0ZUZpZWxkU2V0KHJlY2VpdmVyLCBwcml2YXRlTWFwLCB2YWx1ZSkge1xyXG4gICAgaWYgKCFwcml2YXRlTWFwLmhhcyhyZWNlaXZlcikpIHtcclxuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiYXR0ZW1wdGVkIHRvIHNldCBwcml2YXRlIGZpZWxkIG9uIG5vbi1pbnN0YW5jZVwiKTtcclxuICAgIH1cclxuICAgIHByaXZhdGVNYXAuc2V0KHJlY2VpdmVyLCB2YWx1ZSk7XHJcbiAgICByZXR1cm4gdmFsdWU7XHJcbn1cclxuIiwiaW1wb3J0IHsgaXNWYWxpZE51bWJlciB9IGZyb20gJy4uL3V0aWxzJztcclxudmFyIERpbWVuc2lvbnMgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBEaW1lbnNpb25zKHdpZHRoLCBoZWlnaHQpIHtcclxuICAgICAgICBpZiAoIWlzVmFsaWROdW1iZXIod2lkdGgpIHx8ICFpc1ZhbGlkTnVtYmVyKGhlaWdodCkpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiRGltZW5zaW9ucy5jb25zdHJ1Y3RvciAtIGV4cGVjdGVkIHdpZHRoIGFuZCBoZWlnaHQgdG8gYmUgdmFsaWQgbnVtYmVycywgaW5zdGVhZCBoYXZlIFwiICsgSlNPTi5zdHJpbmdpZnkoeyB3aWR0aDogd2lkdGgsIGhlaWdodDogaGVpZ2h0IH0pKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5fd2lkdGggPSB3aWR0aDtcclxuICAgICAgICB0aGlzLl9oZWlnaHQgPSBoZWlnaHQ7XHJcbiAgICB9XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoRGltZW5zaW9ucy5wcm90b3R5cGUsIFwid2lkdGhcIiwge1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5fd2lkdGg7IH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KERpbWVuc2lvbnMucHJvdG90eXBlLCBcImhlaWdodFwiLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLl9oZWlnaHQ7IH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgRGltZW5zaW9ucy5wcm90b3R5cGUucmV2ZXJzZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gbmV3IERpbWVuc2lvbnMoMSAvIHRoaXMud2lkdGgsIDEgLyB0aGlzLmhlaWdodCk7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIERpbWVuc2lvbnM7XHJcbn0oKSk7XHJcbmV4cG9ydCB7IERpbWVuc2lvbnMgfTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9RGltZW5zaW9ucy5qcy5tYXAiLCJpbXBvcnQgKiBhcyB0ZiBmcm9tICdAdGVuc29yZmxvdy90ZmpzLWNvcmUnO1xyXG5pbXBvcnQgeyBQb2ludCB9IGZyb20gJy4uL2NsYXNzZXMnO1xyXG5pbXBvcnQgeyBEaW1lbnNpb25zIH0gZnJvbSAnLi4vY2xhc3Nlcy9EaW1lbnNpb25zJztcclxuZXhwb3J0IGZ1bmN0aW9uIGlzVGVuc29yKHRlbnNvciwgZGltKSB7XHJcbiAgICByZXR1cm4gdGVuc29yIGluc3RhbmNlb2YgdGYuVGVuc29yICYmIHRlbnNvci5zaGFwZS5sZW5ndGggPT09IGRpbTtcclxufVxyXG5leHBvcnQgZnVuY3Rpb24gaXNUZW5zb3IxRCh0ZW5zb3IpIHtcclxuICAgIHJldHVybiBpc1RlbnNvcih0ZW5zb3IsIDEpO1xyXG59XHJcbmV4cG9ydCBmdW5jdGlvbiBpc1RlbnNvcjJEKHRlbnNvcikge1xyXG4gICAgcmV0dXJuIGlzVGVuc29yKHRlbnNvciwgMik7XHJcbn1cclxuZXhwb3J0IGZ1bmN0aW9uIGlzVGVuc29yM0QodGVuc29yKSB7XHJcbiAgICByZXR1cm4gaXNUZW5zb3IodGVuc29yLCAzKTtcclxufVxyXG5leHBvcnQgZnVuY3Rpb24gaXNUZW5zb3I0RCh0ZW5zb3IpIHtcclxuICAgIHJldHVybiBpc1RlbnNvcih0ZW5zb3IsIDQpO1xyXG59XHJcbmV4cG9ydCBmdW5jdGlvbiBpc0Zsb2F0KG51bSkge1xyXG4gICAgcmV0dXJuIG51bSAlIDEgIT09IDA7XHJcbn1cclxuZXhwb3J0IGZ1bmN0aW9uIGlzRXZlbihudW0pIHtcclxuICAgIHJldHVybiBudW0gJSAyID09PSAwO1xyXG59XHJcbmV4cG9ydCBmdW5jdGlvbiByb3VuZChudW0sIHByZWMpIHtcclxuICAgIGlmIChwcmVjID09PSB2b2lkIDApIHsgcHJlYyA9IDI7IH1cclxuICAgIHZhciBmID0gTWF0aC5wb3coMTAsIHByZWMpO1xyXG4gICAgcmV0dXJuIE1hdGguZmxvb3IobnVtICogZikgLyBmO1xyXG59XHJcbmV4cG9ydCBmdW5jdGlvbiBpc0RpbWVuc2lvbnMob2JqKSB7XHJcbiAgICByZXR1cm4gb2JqICYmIG9iai53aWR0aCAmJiBvYmouaGVpZ2h0O1xyXG59XHJcbmV4cG9ydCBmdW5jdGlvbiBjb21wdXRlUmVzaGFwZWREaW1lbnNpb25zKF9hLCBpbnB1dFNpemUpIHtcclxuICAgIHZhciB3aWR0aCA9IF9hLndpZHRoLCBoZWlnaHQgPSBfYS5oZWlnaHQ7XHJcbiAgICB2YXIgc2NhbGUgPSBpbnB1dFNpemUgLyBNYXRoLm1heChoZWlnaHQsIHdpZHRoKTtcclxuICAgIHJldHVybiBuZXcgRGltZW5zaW9ucyhNYXRoLnJvdW5kKHdpZHRoICogc2NhbGUpLCBNYXRoLnJvdW5kKGhlaWdodCAqIHNjYWxlKSk7XHJcbn1cclxuZXhwb3J0IGZ1bmN0aW9uIGdldENlbnRlclBvaW50KHB0cykge1xyXG4gICAgcmV0dXJuIHB0cy5yZWR1Y2UoZnVuY3Rpb24gKHN1bSwgcHQpIHsgcmV0dXJuIHN1bS5hZGQocHQpOyB9LCBuZXcgUG9pbnQoMCwgMCkpXHJcbiAgICAgICAgLmRpdihuZXcgUG9pbnQocHRzLmxlbmd0aCwgcHRzLmxlbmd0aCkpO1xyXG59XHJcbmV4cG9ydCBmdW5jdGlvbiByYW5nZShudW0sIHN0YXJ0LCBzdGVwKSB7XHJcbiAgICByZXR1cm4gQXJyYXkobnVtKS5maWxsKDApLm1hcChmdW5jdGlvbiAoXywgaSkgeyByZXR1cm4gc3RhcnQgKyAoaSAqIHN0ZXApOyB9KTtcclxufVxyXG5leHBvcnQgZnVuY3Rpb24gaXNWYWxpZE51bWJlcihudW0pIHtcclxuICAgIHJldHVybiAhIW51bSAmJiBudW0gIT09IEluZmluaXR5ICYmIG51bSAhPT0gLUluZmluaXR5ICYmICFpc05hTihudW0pIHx8IG51bSA9PT0gMDtcclxufVxyXG5leHBvcnQgZnVuY3Rpb24gaXNWYWxpZFByb2JhYmxpdGl5KG51bSkge1xyXG4gICAgcmV0dXJuIGlzVmFsaWROdW1iZXIobnVtKSAmJiAwIDw9IG51bSAmJiBudW0gPD0gMS4wO1xyXG59XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCIsInZhciBQb2ludCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIFBvaW50KHgsIHkpIHtcclxuICAgICAgICB0aGlzLl94ID0geDtcclxuICAgICAgICB0aGlzLl95ID0geTtcclxuICAgIH1cclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShQb2ludC5wcm90b3R5cGUsIFwieFwiLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLl94OyB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShQb2ludC5wcm90b3R5cGUsIFwieVwiLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLl95OyB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIFBvaW50LnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbiAocHQpIHtcclxuICAgICAgICByZXR1cm4gbmV3IFBvaW50KHRoaXMueCArIHB0LngsIHRoaXMueSArIHB0LnkpO1xyXG4gICAgfTtcclxuICAgIFBvaW50LnByb3RvdHlwZS5zdWIgPSBmdW5jdGlvbiAocHQpIHtcclxuICAgICAgICByZXR1cm4gbmV3IFBvaW50KHRoaXMueCAtIHB0LngsIHRoaXMueSAtIHB0LnkpO1xyXG4gICAgfTtcclxuICAgIFBvaW50LnByb3RvdHlwZS5tdWwgPSBmdW5jdGlvbiAocHQpIHtcclxuICAgICAgICByZXR1cm4gbmV3IFBvaW50KHRoaXMueCAqIHB0LngsIHRoaXMueSAqIHB0LnkpO1xyXG4gICAgfTtcclxuICAgIFBvaW50LnByb3RvdHlwZS5kaXYgPSBmdW5jdGlvbiAocHQpIHtcclxuICAgICAgICByZXR1cm4gbmV3IFBvaW50KHRoaXMueCAvIHB0LngsIHRoaXMueSAvIHB0LnkpO1xyXG4gICAgfTtcclxuICAgIFBvaW50LnByb3RvdHlwZS5hYnMgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBQb2ludChNYXRoLmFicyh0aGlzLngpLCBNYXRoLmFicyh0aGlzLnkpKTtcclxuICAgIH07XHJcbiAgICBQb2ludC5wcm90b3R5cGUubWFnbml0dWRlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiBNYXRoLnNxcnQoTWF0aC5wb3codGhpcy54LCAyKSArIE1hdGgucG93KHRoaXMueSwgMikpO1xyXG4gICAgfTtcclxuICAgIFBvaW50LnByb3RvdHlwZS5mbG9vciA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gbmV3IFBvaW50KE1hdGguZmxvb3IodGhpcy54KSwgTWF0aC5mbG9vcih0aGlzLnkpKTtcclxuICAgIH07XHJcbiAgICByZXR1cm4gUG9pbnQ7XHJcbn0oKSk7XHJcbmV4cG9ydCB7IFBvaW50IH07XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVBvaW50LmpzLm1hcCIsImltcG9ydCB7IGlzRGltZW5zaW9ucywgaXNWYWxpZE51bWJlciB9IGZyb20gJy4uL3V0aWxzJztcclxuaW1wb3J0IHsgUG9pbnQgfSBmcm9tICcuL1BvaW50JztcclxudmFyIEJveCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIEJveChfYm94LCBhbGxvd05lZ2F0aXZlRGltZW5zaW9ucykge1xyXG4gICAgICAgIGlmIChhbGxvd05lZ2F0aXZlRGltZW5zaW9ucyA9PT0gdm9pZCAwKSB7IGFsbG93TmVnYXRpdmVEaW1lbnNpb25zID0gdHJ1ZTsgfVxyXG4gICAgICAgIHZhciBib3ggPSAoX2JveCB8fCB7fSk7XHJcbiAgICAgICAgdmFyIGlzQmJveCA9IFtib3gubGVmdCwgYm94LnRvcCwgYm94LnJpZ2h0LCBib3guYm90dG9tXS5ldmVyeShpc1ZhbGlkTnVtYmVyKTtcclxuICAgICAgICB2YXIgaXNSZWN0ID0gW2JveC54LCBib3gueSwgYm94LndpZHRoLCBib3guaGVpZ2h0XS5ldmVyeShpc1ZhbGlkTnVtYmVyKTtcclxuICAgICAgICBpZiAoIWlzUmVjdCAmJiAhaXNCYm94KSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkJveC5jb25zdHJ1Y3RvciAtIGV4cGVjdGVkIGJveCB0byBiZSBJQm91bmRpbmdCb3ggfCBJUmVjdCwgaW5zdGVhZCBoYXZlIFwiICsgSlNPTi5zdHJpbmdpZnkoYm94KSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBfYSA9IGlzUmVjdFxyXG4gICAgICAgICAgICA/IFtib3gueCwgYm94LnksIGJveC53aWR0aCwgYm94LmhlaWdodF1cclxuICAgICAgICAgICAgOiBbYm94LmxlZnQsIGJveC50b3AsIGJveC5yaWdodCAtIGJveC5sZWZ0LCBib3guYm90dG9tIC0gYm94LnRvcF0sIHggPSBfYVswXSwgeSA9IF9hWzFdLCB3aWR0aCA9IF9hWzJdLCBoZWlnaHQgPSBfYVszXTtcclxuICAgICAgICBCb3guYXNzZXJ0SXNWYWxpZEJveCh7IHg6IHgsIHk6IHksIHdpZHRoOiB3aWR0aCwgaGVpZ2h0OiBoZWlnaHQgfSwgJ0JveC5jb25zdHJ1Y3RvcicsIGFsbG93TmVnYXRpdmVEaW1lbnNpb25zKTtcclxuICAgICAgICB0aGlzLl94ID0geDtcclxuICAgICAgICB0aGlzLl95ID0geTtcclxuICAgICAgICB0aGlzLl93aWR0aCA9IHdpZHRoO1xyXG4gICAgICAgIHRoaXMuX2hlaWdodCA9IGhlaWdodDtcclxuICAgIH1cclxuICAgIEJveC5pc1JlY3QgPSBmdW5jdGlvbiAocmVjdCkge1xyXG4gICAgICAgIHJldHVybiAhIXJlY3QgJiYgW3JlY3QueCwgcmVjdC55LCByZWN0LndpZHRoLCByZWN0LmhlaWdodF0uZXZlcnkoaXNWYWxpZE51bWJlcik7XHJcbiAgICB9O1xyXG4gICAgQm94LmFzc2VydElzVmFsaWRCb3ggPSBmdW5jdGlvbiAoYm94LCBjYWxsZWUsIGFsbG93TmVnYXRpdmVEaW1lbnNpb25zKSB7XHJcbiAgICAgICAgaWYgKGFsbG93TmVnYXRpdmVEaW1lbnNpb25zID09PSB2b2lkIDApIHsgYWxsb3dOZWdhdGl2ZURpbWVuc2lvbnMgPSBmYWxzZTsgfVxyXG4gICAgICAgIGlmICghQm94LmlzUmVjdChib3gpKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihjYWxsZWUgKyBcIiAtIGludmFsaWQgYm94OiBcIiArIEpTT04uc3RyaW5naWZ5KGJveCkgKyBcIiwgZXhwZWN0ZWQgb2JqZWN0IHdpdGggcHJvcGVydGllcyB4LCB5LCB3aWR0aCwgaGVpZ2h0XCIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoIWFsbG93TmVnYXRpdmVEaW1lbnNpb25zICYmIChib3gud2lkdGggPCAwIHx8IGJveC5oZWlnaHQgPCAwKSkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoY2FsbGVlICsgXCIgLSB3aWR0aCAoXCIgKyBib3gud2lkdGggKyBcIikgYW5kIGhlaWdodCAoXCIgKyBib3guaGVpZ2h0ICsgXCIpIG11c3QgYmUgcG9zaXRpdmUgbnVtYmVyc1wiKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEJveC5wcm90b3R5cGUsIFwieFwiLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLl94OyB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShCb3gucHJvdG90eXBlLCBcInlcIiwge1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5feTsgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQm94LnByb3RvdHlwZSwgXCJ3aWR0aFwiLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLl93aWR0aDsgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQm94LnByb3RvdHlwZSwgXCJoZWlnaHRcIiwge1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5faGVpZ2h0OyB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShCb3gucHJvdG90eXBlLCBcImxlZnRcIiwge1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy54OyB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShCb3gucHJvdG90eXBlLCBcInRvcFwiLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLnk7IH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEJveC5wcm90b3R5cGUsIFwicmlnaHRcIiwge1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy54ICsgdGhpcy53aWR0aDsgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQm94LnByb3RvdHlwZSwgXCJib3R0b21cIiwge1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy55ICsgdGhpcy5oZWlnaHQ7IH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEJveC5wcm90b3R5cGUsIFwiYXJlYVwiLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLndpZHRoICogdGhpcy5oZWlnaHQ7IH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEJveC5wcm90b3R5cGUsIFwidG9wTGVmdFwiLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBuZXcgUG9pbnQodGhpcy5sZWZ0LCB0aGlzLnRvcCk7IH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEJveC5wcm90b3R5cGUsIFwidG9wUmlnaHRcIiwge1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gbmV3IFBvaW50KHRoaXMucmlnaHQsIHRoaXMudG9wKTsgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQm94LnByb3RvdHlwZSwgXCJib3R0b21MZWZ0XCIsIHtcclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG5ldyBQb2ludCh0aGlzLmxlZnQsIHRoaXMuYm90dG9tKTsgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQm94LnByb3RvdHlwZSwgXCJib3R0b21SaWdodFwiLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBuZXcgUG9pbnQodGhpcy5yaWdodCwgdGhpcy5ib3R0b20pOyB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIEJveC5wcm90b3R5cGUucm91bmQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIF9hID0gW3RoaXMueCwgdGhpcy55LCB0aGlzLndpZHRoLCB0aGlzLmhlaWdodF1cclxuICAgICAgICAgICAgLm1hcChmdW5jdGlvbiAodmFsKSB7IHJldHVybiBNYXRoLnJvdW5kKHZhbCk7IH0pLCB4ID0gX2FbMF0sIHkgPSBfYVsxXSwgd2lkdGggPSBfYVsyXSwgaGVpZ2h0ID0gX2FbM107XHJcbiAgICAgICAgcmV0dXJuIG5ldyBCb3goeyB4OiB4LCB5OiB5LCB3aWR0aDogd2lkdGgsIGhlaWdodDogaGVpZ2h0IH0pO1xyXG4gICAgfTtcclxuICAgIEJveC5wcm90b3R5cGUuZmxvb3IgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIF9hID0gW3RoaXMueCwgdGhpcy55LCB0aGlzLndpZHRoLCB0aGlzLmhlaWdodF1cclxuICAgICAgICAgICAgLm1hcChmdW5jdGlvbiAodmFsKSB7IHJldHVybiBNYXRoLmZsb29yKHZhbCk7IH0pLCB4ID0gX2FbMF0sIHkgPSBfYVsxXSwgd2lkdGggPSBfYVsyXSwgaGVpZ2h0ID0gX2FbM107XHJcbiAgICAgICAgcmV0dXJuIG5ldyBCb3goeyB4OiB4LCB5OiB5LCB3aWR0aDogd2lkdGgsIGhlaWdodDogaGVpZ2h0IH0pO1xyXG4gICAgfTtcclxuICAgIEJveC5wcm90b3R5cGUudG9TcXVhcmUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIF9hID0gdGhpcywgeCA9IF9hLngsIHkgPSBfYS55LCB3aWR0aCA9IF9hLndpZHRoLCBoZWlnaHQgPSBfYS5oZWlnaHQ7XHJcbiAgICAgICAgdmFyIGRpZmYgPSBNYXRoLmFicyh3aWR0aCAtIGhlaWdodCk7XHJcbiAgICAgICAgaWYgKHdpZHRoIDwgaGVpZ2h0KSB7XHJcbiAgICAgICAgICAgIHggLT0gKGRpZmYgLyAyKTtcclxuICAgICAgICAgICAgd2lkdGggKz0gZGlmZjtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGhlaWdodCA8IHdpZHRoKSB7XHJcbiAgICAgICAgICAgIHkgLT0gKGRpZmYgLyAyKTtcclxuICAgICAgICAgICAgaGVpZ2h0ICs9IGRpZmY7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBuZXcgQm94KHsgeDogeCwgeTogeSwgd2lkdGg6IHdpZHRoLCBoZWlnaHQ6IGhlaWdodCB9KTtcclxuICAgIH07XHJcbiAgICBCb3gucHJvdG90eXBlLnJlc2NhbGUgPSBmdW5jdGlvbiAocykge1xyXG4gICAgICAgIHZhciBzY2FsZVggPSBpc0RpbWVuc2lvbnMocykgPyBzLndpZHRoIDogcztcclxuICAgICAgICB2YXIgc2NhbGVZID0gaXNEaW1lbnNpb25zKHMpID8gcy5oZWlnaHQgOiBzO1xyXG4gICAgICAgIHJldHVybiBuZXcgQm94KHtcclxuICAgICAgICAgICAgeDogdGhpcy54ICogc2NhbGVYLFxyXG4gICAgICAgICAgICB5OiB0aGlzLnkgKiBzY2FsZVksXHJcbiAgICAgICAgICAgIHdpZHRoOiB0aGlzLndpZHRoICogc2NhbGVYLFxyXG4gICAgICAgICAgICBoZWlnaHQ6IHRoaXMuaGVpZ2h0ICogc2NhbGVZXHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgQm94LnByb3RvdHlwZS5wYWQgPSBmdW5jdGlvbiAocGFkWCwgcGFkWSkge1xyXG4gICAgICAgIHZhciBfYSA9IFtcclxuICAgICAgICAgICAgdGhpcy54IC0gKHBhZFggLyAyKSxcclxuICAgICAgICAgICAgdGhpcy55IC0gKHBhZFkgLyAyKSxcclxuICAgICAgICAgICAgdGhpcy53aWR0aCArIHBhZFgsXHJcbiAgICAgICAgICAgIHRoaXMuaGVpZ2h0ICsgcGFkWVxyXG4gICAgICAgIF0sIHggPSBfYVswXSwgeSA9IF9hWzFdLCB3aWR0aCA9IF9hWzJdLCBoZWlnaHQgPSBfYVszXTtcclxuICAgICAgICByZXR1cm4gbmV3IEJveCh7IHg6IHgsIHk6IHksIHdpZHRoOiB3aWR0aCwgaGVpZ2h0OiBoZWlnaHQgfSk7XHJcbiAgICB9O1xyXG4gICAgQm94LnByb3RvdHlwZS5jbGlwQXRJbWFnZUJvcmRlcnMgPSBmdW5jdGlvbiAoaW1nV2lkdGgsIGltZ0hlaWdodCkge1xyXG4gICAgICAgIHZhciBfYSA9IHRoaXMsIHggPSBfYS54LCB5ID0gX2EueSwgcmlnaHQgPSBfYS5yaWdodCwgYm90dG9tID0gX2EuYm90dG9tO1xyXG4gICAgICAgIHZhciBjbGlwcGVkWCA9IE1hdGgubWF4KHgsIDApO1xyXG4gICAgICAgIHZhciBjbGlwcGVkWSA9IE1hdGgubWF4KHksIDApO1xyXG4gICAgICAgIHZhciBuZXdXaWR0aCA9IHJpZ2h0IC0gY2xpcHBlZFg7XHJcbiAgICAgICAgdmFyIG5ld0hlaWdodCA9IGJvdHRvbSAtIGNsaXBwZWRZO1xyXG4gICAgICAgIHZhciBjbGlwcGVkV2lkdGggPSBNYXRoLm1pbihuZXdXaWR0aCwgaW1nV2lkdGggLSBjbGlwcGVkWCk7XHJcbiAgICAgICAgdmFyIGNsaXBwZWRIZWlnaHQgPSBNYXRoLm1pbihuZXdIZWlnaHQsIGltZ0hlaWdodCAtIGNsaXBwZWRZKTtcclxuICAgICAgICByZXR1cm4gKG5ldyBCb3goeyB4OiBjbGlwcGVkWCwgeTogY2xpcHBlZFksIHdpZHRoOiBjbGlwcGVkV2lkdGgsIGhlaWdodDogY2xpcHBlZEhlaWdodCB9KSkuZmxvb3IoKTtcclxuICAgIH07XHJcbiAgICBCb3gucHJvdG90eXBlLnNoaWZ0ID0gZnVuY3Rpb24gKHN4LCBzeSkge1xyXG4gICAgICAgIHZhciBfYSA9IHRoaXMsIHdpZHRoID0gX2Eud2lkdGgsIGhlaWdodCA9IF9hLmhlaWdodDtcclxuICAgICAgICB2YXIgeCA9IHRoaXMueCArIHN4O1xyXG4gICAgICAgIHZhciB5ID0gdGhpcy55ICsgc3k7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBCb3goeyB4OiB4LCB5OiB5LCB3aWR0aDogd2lkdGgsIGhlaWdodDogaGVpZ2h0IH0pO1xyXG4gICAgfTtcclxuICAgIEJveC5wcm90b3R5cGUucGFkQXRCb3JkZXJzID0gZnVuY3Rpb24gKGltYWdlSGVpZ2h0LCBpbWFnZVdpZHRoKSB7XHJcbiAgICAgICAgdmFyIHcgPSB0aGlzLndpZHRoICsgMTtcclxuICAgICAgICB2YXIgaCA9IHRoaXMuaGVpZ2h0ICsgMTtcclxuICAgICAgICB2YXIgZHggPSAxO1xyXG4gICAgICAgIHZhciBkeSA9IDE7XHJcbiAgICAgICAgdmFyIGVkeCA9IHc7XHJcbiAgICAgICAgdmFyIGVkeSA9IGg7XHJcbiAgICAgICAgdmFyIHggPSB0aGlzLmxlZnQ7XHJcbiAgICAgICAgdmFyIHkgPSB0aGlzLnRvcDtcclxuICAgICAgICB2YXIgZXggPSB0aGlzLnJpZ2h0O1xyXG4gICAgICAgIHZhciBleSA9IHRoaXMuYm90dG9tO1xyXG4gICAgICAgIGlmIChleCA+IGltYWdlV2lkdGgpIHtcclxuICAgICAgICAgICAgZWR4ID0gLWV4ICsgaW1hZ2VXaWR0aCArIHc7XHJcbiAgICAgICAgICAgIGV4ID0gaW1hZ2VXaWR0aDtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGV5ID4gaW1hZ2VIZWlnaHQpIHtcclxuICAgICAgICAgICAgZWR5ID0gLWV5ICsgaW1hZ2VIZWlnaHQgKyBoO1xyXG4gICAgICAgICAgICBleSA9IGltYWdlSGVpZ2h0O1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoeCA8IDEpIHtcclxuICAgICAgICAgICAgZWR5ID0gMiAtIHg7XHJcbiAgICAgICAgICAgIHggPSAxO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoeSA8IDEpIHtcclxuICAgICAgICAgICAgZWR5ID0gMiAtIHk7XHJcbiAgICAgICAgICAgIHkgPSAxO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4geyBkeTogZHksIGVkeTogZWR5LCBkeDogZHgsIGVkeDogZWR4LCB5OiB5LCBleTogZXksIHg6IHgsIGV4OiBleCwgdzogdywgaDogaCB9O1xyXG4gICAgfTtcclxuICAgIEJveC5wcm90b3R5cGUuY2FsaWJyYXRlID0gZnVuY3Rpb24gKHJlZ2lvbikge1xyXG4gICAgICAgIHJldHVybiBuZXcgQm94KHtcclxuICAgICAgICAgICAgbGVmdDogdGhpcy5sZWZ0ICsgKHJlZ2lvbi5sZWZ0ICogdGhpcy53aWR0aCksXHJcbiAgICAgICAgICAgIHRvcDogdGhpcy50b3AgKyAocmVnaW9uLnRvcCAqIHRoaXMuaGVpZ2h0KSxcclxuICAgICAgICAgICAgcmlnaHQ6IHRoaXMucmlnaHQgKyAocmVnaW9uLnJpZ2h0ICogdGhpcy53aWR0aCksXHJcbiAgICAgICAgICAgIGJvdHRvbTogdGhpcy5ib3R0b20gKyAocmVnaW9uLmJvdHRvbSAqIHRoaXMuaGVpZ2h0KVxyXG4gICAgICAgIH0pLnRvU3F1YXJlKCkucm91bmQoKTtcclxuICAgIH07XHJcbiAgICByZXR1cm4gQm94O1xyXG59KCkpO1xyXG5leHBvcnQgeyBCb3ggfTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Qm94LmpzLm1hcCIsImltcG9ydCB7IF9fZXh0ZW5kcyB9IGZyb20gXCJ0c2xpYlwiO1xyXG5pbXBvcnQgeyBCb3ggfSBmcm9tICcuL0JveCc7XHJcbnZhciBCb3VuZGluZ0JveCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcclxuICAgIF9fZXh0ZW5kcyhCb3VuZGluZ0JveCwgX3N1cGVyKTtcclxuICAgIGZ1bmN0aW9uIEJvdW5kaW5nQm94KGxlZnQsIHRvcCwgcmlnaHQsIGJvdHRvbSwgYWxsb3dOZWdhdGl2ZURpbWVuc2lvbnMpIHtcclxuICAgICAgICBpZiAoYWxsb3dOZWdhdGl2ZURpbWVuc2lvbnMgPT09IHZvaWQgMCkgeyBhbGxvd05lZ2F0aXZlRGltZW5zaW9ucyA9IGZhbHNlOyB9XHJcbiAgICAgICAgcmV0dXJuIF9zdXBlci5jYWxsKHRoaXMsIHsgbGVmdDogbGVmdCwgdG9wOiB0b3AsIHJpZ2h0OiByaWdodCwgYm90dG9tOiBib3R0b20gfSwgYWxsb3dOZWdhdGl2ZURpbWVuc2lvbnMpIHx8IHRoaXM7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gQm91bmRpbmdCb3g7XHJcbn0oQm94KSk7XHJcbmV4cG9ydCB7IEJvdW5kaW5nQm94IH07XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUJvdW5kaW5nQm94LmpzLm1hcCIsImltcG9ydCB7IEJveCB9IGZyb20gJy4vQm94JztcclxuaW1wb3J0IHsgRGltZW5zaW9ucyB9IGZyb20gJy4vRGltZW5zaW9ucyc7XHJcbnZhciBPYmplY3REZXRlY3Rpb24gPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBPYmplY3REZXRlY3Rpb24oc2NvcmUsIGNsYXNzU2NvcmUsIGNsYXNzTmFtZSwgcmVsYXRpdmVCb3gsIGltYWdlRGltcykge1xyXG4gICAgICAgIHRoaXMuX2ltYWdlRGltcyA9IG5ldyBEaW1lbnNpb25zKGltYWdlRGltcy53aWR0aCwgaW1hZ2VEaW1zLmhlaWdodCk7XHJcbiAgICAgICAgdGhpcy5fc2NvcmUgPSBzY29yZTtcclxuICAgICAgICB0aGlzLl9jbGFzc1Njb3JlID0gY2xhc3NTY29yZTtcclxuICAgICAgICB0aGlzLl9jbGFzc05hbWUgPSBjbGFzc05hbWU7XHJcbiAgICAgICAgdGhpcy5fYm94ID0gbmV3IEJveChyZWxhdGl2ZUJveCkucmVzY2FsZSh0aGlzLl9pbWFnZURpbXMpO1xyXG4gICAgfVxyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KE9iamVjdERldGVjdGlvbi5wcm90b3R5cGUsIFwic2NvcmVcIiwge1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5fc2NvcmU7IH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KE9iamVjdERldGVjdGlvbi5wcm90b3R5cGUsIFwiY2xhc3NTY29yZVwiLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLl9jbGFzc1Njb3JlOyB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShPYmplY3REZXRlY3Rpb24ucHJvdG90eXBlLCBcImNsYXNzTmFtZVwiLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLl9jbGFzc05hbWU7IH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KE9iamVjdERldGVjdGlvbi5wcm90b3R5cGUsIFwiYm94XCIsIHtcclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMuX2JveDsgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoT2JqZWN0RGV0ZWN0aW9uLnByb3RvdHlwZSwgXCJpbWFnZURpbXNcIiwge1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5faW1hZ2VEaW1zOyB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShPYmplY3REZXRlY3Rpb24ucHJvdG90eXBlLCBcImltYWdlV2lkdGhcIiwge1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5pbWFnZURpbXMud2lkdGg7IH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KE9iamVjdERldGVjdGlvbi5wcm90b3R5cGUsIFwiaW1hZ2VIZWlnaHRcIiwge1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5pbWFnZURpbXMuaGVpZ2h0OyB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShPYmplY3REZXRlY3Rpb24ucHJvdG90eXBlLCBcInJlbGF0aXZlQm94XCIsIHtcclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG5ldyBCb3godGhpcy5fYm94KS5yZXNjYWxlKHRoaXMuaW1hZ2VEaW1zLnJldmVyc2UoKSk7IH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgT2JqZWN0RGV0ZWN0aW9uLnByb3RvdHlwZS5mb3JTaXplID0gZnVuY3Rpb24gKHdpZHRoLCBoZWlnaHQpIHtcclxuICAgICAgICByZXR1cm4gbmV3IE9iamVjdERldGVjdGlvbih0aGlzLnNjb3JlLCB0aGlzLmNsYXNzU2NvcmUsIHRoaXMuY2xhc3NOYW1lLCB0aGlzLnJlbGF0aXZlQm94LCB7IHdpZHRoOiB3aWR0aCwgaGVpZ2h0OiBoZWlnaHQgfSk7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIE9iamVjdERldGVjdGlvbjtcclxufSgpKTtcclxuZXhwb3J0IHsgT2JqZWN0RGV0ZWN0aW9uIH07XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPU9iamVjdERldGVjdGlvbi5qcy5tYXAiLCJpbXBvcnQgeyBfX2V4dGVuZHMgfSBmcm9tIFwidHNsaWJcIjtcclxuaW1wb3J0IHsgT2JqZWN0RGV0ZWN0aW9uIH0gZnJvbSAnLi9PYmplY3REZXRlY3Rpb24nO1xyXG52YXIgRmFjZURldGVjdGlvbiA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcclxuICAgIF9fZXh0ZW5kcyhGYWNlRGV0ZWN0aW9uLCBfc3VwZXIpO1xyXG4gICAgZnVuY3Rpb24gRmFjZURldGVjdGlvbihzY29yZSwgcmVsYXRpdmVCb3gsIGltYWdlRGltcykge1xyXG4gICAgICAgIHJldHVybiBfc3VwZXIuY2FsbCh0aGlzLCBzY29yZSwgc2NvcmUsICcnLCByZWxhdGl2ZUJveCwgaW1hZ2VEaW1zKSB8fCB0aGlzO1xyXG4gICAgfVxyXG4gICAgRmFjZURldGVjdGlvbi5wcm90b3R5cGUuZm9yU2l6ZSA9IGZ1bmN0aW9uICh3aWR0aCwgaGVpZ2h0KSB7XHJcbiAgICAgICAgdmFyIF9hID0gX3N1cGVyLnByb3RvdHlwZS5mb3JTaXplLmNhbGwodGhpcywgd2lkdGgsIGhlaWdodCksIHNjb3JlID0gX2Euc2NvcmUsIHJlbGF0aXZlQm94ID0gX2EucmVsYXRpdmVCb3gsIGltYWdlRGltcyA9IF9hLmltYWdlRGltcztcclxuICAgICAgICByZXR1cm4gbmV3IEZhY2VEZXRlY3Rpb24oc2NvcmUsIHJlbGF0aXZlQm94LCBpbWFnZURpbXMpO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBGYWNlRGV0ZWN0aW9uO1xyXG59KE9iamVjdERldGVjdGlvbikpO1xyXG5leHBvcnQgeyBGYWNlRGV0ZWN0aW9uIH07XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUZhY2VEZXRlY3Rpb24uanMubWFwIiwiZXhwb3J0IGZ1bmN0aW9uIGlvdShib3gxLCBib3gyLCBpc0lPVSkge1xyXG4gICAgaWYgKGlzSU9VID09PSB2b2lkIDApIHsgaXNJT1UgPSB0cnVlOyB9XHJcbiAgICB2YXIgd2lkdGggPSBNYXRoLm1heCgwLjAsIE1hdGgubWluKGJveDEucmlnaHQsIGJveDIucmlnaHQpIC0gTWF0aC5tYXgoYm94MS5sZWZ0LCBib3gyLmxlZnQpKTtcclxuICAgIHZhciBoZWlnaHQgPSBNYXRoLm1heCgwLjAsIE1hdGgubWluKGJveDEuYm90dG9tLCBib3gyLmJvdHRvbSkgLSBNYXRoLm1heChib3gxLnRvcCwgYm94Mi50b3ApKTtcclxuICAgIHZhciBpbnRlclNlY3Rpb24gPSB3aWR0aCAqIGhlaWdodDtcclxuICAgIHJldHVybiBpc0lPVVxyXG4gICAgICAgID8gaW50ZXJTZWN0aW9uIC8gKGJveDEuYXJlYSArIGJveDIuYXJlYSAtIGludGVyU2VjdGlvbilcclxuICAgICAgICA6IGludGVyU2VjdGlvbiAvIE1hdGgubWluKGJveDEuYXJlYSwgYm94Mi5hcmVhKTtcclxufVxyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1pb3UuanMubWFwIiwiaW1wb3J0IHsgQm91bmRpbmdCb3ggfSBmcm9tICcuLi9jbGFzc2VzJztcclxuZXhwb3J0IGZ1bmN0aW9uIG1pbkJib3gocHRzKSB7XHJcbiAgICB2YXIgeHMgPSBwdHMubWFwKGZ1bmN0aW9uIChwdCkgeyByZXR1cm4gcHQueDsgfSk7XHJcbiAgICB2YXIgeXMgPSBwdHMubWFwKGZ1bmN0aW9uIChwdCkgeyByZXR1cm4gcHQueTsgfSk7XHJcbiAgICB2YXIgbWluWCA9IHhzLnJlZHVjZShmdW5jdGlvbiAobWluLCB4KSB7IHJldHVybiB4IDwgbWluID8geCA6IG1pbjsgfSwgSW5maW5pdHkpO1xyXG4gICAgdmFyIG1pblkgPSB5cy5yZWR1Y2UoZnVuY3Rpb24gKG1pbiwgeSkgeyByZXR1cm4geSA8IG1pbiA/IHkgOiBtaW47IH0sIEluZmluaXR5KTtcclxuICAgIHZhciBtYXhYID0geHMucmVkdWNlKGZ1bmN0aW9uIChtYXgsIHgpIHsgcmV0dXJuIG1heCA8IHggPyB4IDogbWF4OyB9LCAwKTtcclxuICAgIHZhciBtYXhZID0geXMucmVkdWNlKGZ1bmN0aW9uIChtYXgsIHkpIHsgcmV0dXJuIG1heCA8IHkgPyB5IDogbWF4OyB9LCAwKTtcclxuICAgIHJldHVybiBuZXcgQm91bmRpbmdCb3gobWluWCwgbWluWSwgbWF4WCwgbWF4WSk7XHJcbn1cclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bWluQmJveC5qcy5tYXAiLCJpbXBvcnQgeyBpb3UgfSBmcm9tICcuL2lvdSc7XHJcbmV4cG9ydCBmdW5jdGlvbiBub25NYXhTdXBwcmVzc2lvbihib3hlcywgc2NvcmVzLCBpb3VUaHJlc2hvbGQsIGlzSU9VKSB7XHJcbiAgICBpZiAoaXNJT1UgPT09IHZvaWQgMCkgeyBpc0lPVSA9IHRydWU7IH1cclxuICAgIHZhciBpbmRpY2VzU29ydGVkQnlTY29yZSA9IHNjb3Jlc1xyXG4gICAgICAgIC5tYXAoZnVuY3Rpb24gKHNjb3JlLCBib3hJbmRleCkgeyByZXR1cm4gKHsgc2NvcmU6IHNjb3JlLCBib3hJbmRleDogYm94SW5kZXggfSk7IH0pXHJcbiAgICAgICAgLnNvcnQoZnVuY3Rpb24gKGMxLCBjMikgeyByZXR1cm4gYzEuc2NvcmUgLSBjMi5zY29yZTsgfSlcclxuICAgICAgICAubWFwKGZ1bmN0aW9uIChjKSB7IHJldHVybiBjLmJveEluZGV4OyB9KTtcclxuICAgIHZhciBwaWNrID0gW107XHJcbiAgICB2YXIgX2xvb3BfMSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgY3VyciA9IGluZGljZXNTb3J0ZWRCeVNjb3JlLnBvcCgpO1xyXG4gICAgICAgIHBpY2sucHVzaChjdXJyKTtcclxuICAgICAgICB2YXIgaW5kaWNlcyA9IGluZGljZXNTb3J0ZWRCeVNjb3JlO1xyXG4gICAgICAgIHZhciBvdXRwdXRzID0gW107XHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBpbmRpY2VzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIHZhciBpZHggPSBpbmRpY2VzW2ldO1xyXG4gICAgICAgICAgICB2YXIgY3VyckJveCA9IGJveGVzW2N1cnJdO1xyXG4gICAgICAgICAgICB2YXIgaWR4Qm94ID0gYm94ZXNbaWR4XTtcclxuICAgICAgICAgICAgb3V0cHV0cy5wdXNoKGlvdShjdXJyQm94LCBpZHhCb3gsIGlzSU9VKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGluZGljZXNTb3J0ZWRCeVNjb3JlID0gaW5kaWNlc1NvcnRlZEJ5U2NvcmUuZmlsdGVyKGZ1bmN0aW9uIChfLCBqKSB7IHJldHVybiBvdXRwdXRzW2pdIDw9IGlvdVRocmVzaG9sZDsgfSk7XHJcbiAgICB9O1xyXG4gICAgd2hpbGUgKGluZGljZXNTb3J0ZWRCeVNjb3JlLmxlbmd0aCA+IDApIHtcclxuICAgICAgICBfbG9vcF8xKCk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcGljaztcclxufVxyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1ub25NYXhTdXBwcmVzc2lvbi5qcy5tYXAiLCJpbXBvcnQgeyBfX3NwcmVhZEFycmF5cyB9IGZyb20gXCJ0c2xpYlwiO1xyXG5pbXBvcnQgKiBhcyB0ZiBmcm9tICdAdGVuc29yZmxvdy90ZmpzLWNvcmUnO1xyXG5leHBvcnQgZnVuY3Rpb24gbm9ybWFsaXplKHgsIG1lYW5SZ2IpIHtcclxuICAgIHJldHVybiB0Zi50aWR5KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgciA9IG1lYW5SZ2JbMF0sIGcgPSBtZWFuUmdiWzFdLCBiID0gbWVhblJnYlsyXTtcclxuICAgICAgICB2YXIgYXZnX3IgPSB0Zi5maWxsKF9fc3ByZWFkQXJyYXlzKHguc2hhcGUuc2xpY2UoMCwgMyksIFsxXSksIHIpO1xyXG4gICAgICAgIHZhciBhdmdfZyA9IHRmLmZpbGwoX19zcHJlYWRBcnJheXMoeC5zaGFwZS5zbGljZSgwLCAzKSwgWzFdKSwgZyk7XHJcbiAgICAgICAgdmFyIGF2Z19iID0gdGYuZmlsbChfX3NwcmVhZEFycmF5cyh4LnNoYXBlLnNsaWNlKDAsIDMpLCBbMV0pLCBiKTtcclxuICAgICAgICB2YXIgYXZnX3JnYiA9IHRmLmNvbmNhdChbYXZnX3IsIGF2Z19nLCBhdmdfYl0sIDMpO1xyXG4gICAgICAgIHJldHVybiB0Zi5zdWIoeCwgYXZnX3JnYik7XHJcbiAgICB9KTtcclxufVxyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1ub3JtYWxpemUuanMubWFwIiwiaW1wb3J0ICogYXMgdGYgZnJvbSAnQHRlbnNvcmZsb3cvdGZqcy1jb3JlJztcclxuLyoqXHJcbiAqIFBhZHMgdGhlIHNtYWxsZXIgZGltZW5zaW9uIG9mIGFuIGltYWdlIHRlbnNvciB3aXRoIHplcm9zLCBzdWNoIHRoYXQgd2lkdGggPT09IGhlaWdodC5cclxuICpcclxuICogQHBhcmFtIGltZ1RlbnNvciBUaGUgaW1hZ2UgdGVuc29yLlxyXG4gKiBAcGFyYW0gaXNDZW50ZXJJbWFnZSAob3B0aW9uYWwsIGRlZmF1bHQ6IGZhbHNlKSBJZiB0cnVlLCBhZGQgYW4gZXF1YWwgYW1vdW50IG9mIHBhZGRpbmcgb25cclxuICogYm90aCBzaWRlcyBvZiB0aGUgbWlub3IgZGltZW5zaW9uIG9vZiB0aGUgaW1hZ2UuXHJcbiAqIEByZXR1cm5zIFRoZSBwYWRkZWQgdGVuc29yIHdpdGggd2lkdGggPT09IGhlaWdodC5cclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBwYWRUb1NxdWFyZShpbWdUZW5zb3IsIGlzQ2VudGVySW1hZ2UpIHtcclxuICAgIGlmIChpc0NlbnRlckltYWdlID09PSB2b2lkIDApIHsgaXNDZW50ZXJJbWFnZSA9IGZhbHNlOyB9XHJcbiAgICByZXR1cm4gdGYudGlkeShmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIF9hID0gaW1nVGVuc29yLnNoYXBlLnNsaWNlKDEpLCBoZWlnaHQgPSBfYVswXSwgd2lkdGggPSBfYVsxXTtcclxuICAgICAgICBpZiAoaGVpZ2h0ID09PSB3aWR0aCkge1xyXG4gICAgICAgICAgICByZXR1cm4gaW1nVGVuc29yO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgZGltRGlmZiA9IE1hdGguYWJzKGhlaWdodCAtIHdpZHRoKTtcclxuICAgICAgICB2YXIgcGFkZGluZ0Ftb3VudCA9IE1hdGgucm91bmQoZGltRGlmZiAqIChpc0NlbnRlckltYWdlID8gMC41IDogMSkpO1xyXG4gICAgICAgIHZhciBwYWRkaW5nQXhpcyA9IGhlaWdodCA+IHdpZHRoID8gMiA6IDE7XHJcbiAgICAgICAgdmFyIGNyZWF0ZVBhZGRpbmdUZW5zb3IgPSBmdW5jdGlvbiAocGFkZGluZ0Ftb3VudCkge1xyXG4gICAgICAgICAgICB2YXIgcGFkZGluZ1RlbnNvclNoYXBlID0gaW1nVGVuc29yLnNoYXBlLnNsaWNlKCk7XHJcbiAgICAgICAgICAgIHBhZGRpbmdUZW5zb3JTaGFwZVtwYWRkaW5nQXhpc10gPSBwYWRkaW5nQW1vdW50O1xyXG4gICAgICAgICAgICByZXR1cm4gdGYuZmlsbChwYWRkaW5nVGVuc29yU2hhcGUsIDApO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgdmFyIHBhZGRpbmdUZW5zb3JBcHBlbmQgPSBjcmVhdGVQYWRkaW5nVGVuc29yKHBhZGRpbmdBbW91bnQpO1xyXG4gICAgICAgIHZhciByZW1haW5pbmdQYWRkaW5nQW1vdW50ID0gZGltRGlmZiAtIHBhZGRpbmdUZW5zb3JBcHBlbmQuc2hhcGVbcGFkZGluZ0F4aXNdO1xyXG4gICAgICAgIHZhciBwYWRkaW5nVGVuc29yUHJlcGVuZCA9IGlzQ2VudGVySW1hZ2UgJiYgcmVtYWluaW5nUGFkZGluZ0Ftb3VudFxyXG4gICAgICAgICAgICA/IGNyZWF0ZVBhZGRpbmdUZW5zb3IocmVtYWluaW5nUGFkZGluZ0Ftb3VudClcclxuICAgICAgICAgICAgOiBudWxsO1xyXG4gICAgICAgIHZhciB0ZW5zb3JzVG9TdGFjayA9IFtcclxuICAgICAgICAgICAgcGFkZGluZ1RlbnNvclByZXBlbmQsXHJcbiAgICAgICAgICAgIGltZ1RlbnNvcixcclxuICAgICAgICAgICAgcGFkZGluZ1RlbnNvckFwcGVuZFxyXG4gICAgICAgIF1cclxuICAgICAgICAgICAgLmZpbHRlcihmdW5jdGlvbiAodCkgeyByZXR1cm4gISF0OyB9KVxyXG4gICAgICAgICAgICAubWFwKGZ1bmN0aW9uICh0KSB7IHJldHVybiB0LnRvRmxvYXQoKTsgfSk7XHJcbiAgICAgICAgcmV0dXJuIHRmLmNvbmNhdCh0ZW5zb3JzVG9TdGFjaywgcGFkZGluZ0F4aXMpO1xyXG4gICAgfSk7XHJcbn1cclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cGFkVG9TcXVhcmUuanMubWFwIiwiZXhwb3J0IGZ1bmN0aW9uIHNodWZmbGVBcnJheShpbnB1dEFycmF5KSB7XHJcbiAgICB2YXIgYXJyYXkgPSBpbnB1dEFycmF5LnNsaWNlKCk7XHJcbiAgICBmb3IgKHZhciBpID0gYXJyYXkubGVuZ3RoIC0gMTsgaSA+IDA7IGktLSkge1xyXG4gICAgICAgIHZhciBqID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogKGkgKyAxKSk7XHJcbiAgICAgICAgdmFyIHggPSBhcnJheVtpXTtcclxuICAgICAgICBhcnJheVtpXSA9IGFycmF5W2pdO1xyXG4gICAgICAgIGFycmF5W2pdID0geDtcclxuICAgIH1cclxuICAgIHJldHVybiBhcnJheTtcclxufVxyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1zaHVmZmxlQXJyYXkuanMubWFwIiwiZXhwb3J0ICogZnJvbSAnLi9pb3UnO1xyXG5leHBvcnQgKiBmcm9tICcuL21pbkJib3gnO1xyXG5leHBvcnQgKiBmcm9tICcuL25vbk1heFN1cHByZXNzaW9uJztcclxuZXhwb3J0ICogZnJvbSAnLi9ub3JtYWxpemUnO1xyXG5leHBvcnQgKiBmcm9tICcuL3BhZFRvU3F1YXJlJztcclxuZXhwb3J0ICogZnJvbSAnLi9zaHVmZmxlQXJyYXknO1xyXG5leHBvcnQgZnVuY3Rpb24gc2lnbW9pZCh4KSB7XHJcbiAgICByZXR1cm4gMSAvICgxICsgTWF0aC5leHAoLXgpKTtcclxufVxyXG5leHBvcnQgZnVuY3Rpb24gaW52ZXJzZVNpZ21vaWQoeCkge1xyXG4gICAgcmV0dXJuIE1hdGgubG9nKHggLyAoMSAtIHgpKTtcclxufVxyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiLCJpbXBvcnQgeyBfX2V4dGVuZHMgfSBmcm9tIFwidHNsaWJcIjtcclxuaW1wb3J0IHsgQm94IH0gZnJvbSAnLi9Cb3gnO1xyXG52YXIgUmVjdCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcclxuICAgIF9fZXh0ZW5kcyhSZWN0LCBfc3VwZXIpO1xyXG4gICAgZnVuY3Rpb24gUmVjdCh4LCB5LCB3aWR0aCwgaGVpZ2h0LCBhbGxvd05lZ2F0aXZlRGltZW5zaW9ucykge1xyXG4gICAgICAgIGlmIChhbGxvd05lZ2F0aXZlRGltZW5zaW9ucyA9PT0gdm9pZCAwKSB7IGFsbG93TmVnYXRpdmVEaW1lbnNpb25zID0gZmFsc2U7IH1cclxuICAgICAgICByZXR1cm4gX3N1cGVyLmNhbGwodGhpcywgeyB4OiB4LCB5OiB5LCB3aWR0aDogd2lkdGgsIGhlaWdodDogaGVpZ2h0IH0sIGFsbG93TmVnYXRpdmVEaW1lbnNpb25zKSB8fCB0aGlzO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIFJlY3Q7XHJcbn0oQm94KSk7XHJcbmV4cG9ydCB7IFJlY3QgfTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9UmVjdC5qcy5tYXAiLCJpbXBvcnQgeyBjcmVhdGVCcm93c2VyRW52IH0gZnJvbSAnLi9jcmVhdGVCcm93c2VyRW52JztcclxuaW1wb3J0IHsgY3JlYXRlRmlsZVN5c3RlbSB9IGZyb20gJy4vY3JlYXRlRmlsZVN5c3RlbSc7XHJcbmltcG9ydCB7IGNyZWF0ZU5vZGVqc0VudiB9IGZyb20gJy4vY3JlYXRlTm9kZWpzRW52JztcclxuaW1wb3J0IHsgaXNCcm93c2VyIH0gZnJvbSAnLi9pc0Jyb3dzZXInO1xyXG5pbXBvcnQgeyBpc05vZGVqcyB9IGZyb20gJy4vaXNOb2RlanMnO1xyXG52YXIgZW52aXJvbm1lbnQ7XHJcbmZ1bmN0aW9uIGdldEVudigpIHtcclxuICAgIGlmICghZW52aXJvbm1lbnQpIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2dldEVudiAtIGVudmlyb25tZW50IGlzIG5vdCBkZWZpbmVkLCBjaGVjayBpc05vZGVqcygpIGFuZCBpc0Jyb3dzZXIoKScpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGVudmlyb25tZW50O1xyXG59XHJcbmZ1bmN0aW9uIHNldEVudihlbnYpIHtcclxuICAgIGVudmlyb25tZW50ID0gZW52O1xyXG59XHJcbmZ1bmN0aW9uIGluaXRpYWxpemUoKSB7XHJcbiAgICAvLyBjaGVjayBmb3IgaXNCcm93c2VyKCkgZmlyc3QgdG8gcHJldmVudCBlbGVjdHJvbiByZW5kZXJlciBwcm9jZXNzXHJcbiAgICAvLyB0byBiZSBpbml0aWFsaXplZCB3aXRoIHdyb25nIGVudmlyb25tZW50IGR1ZSB0byBpc05vZGVqcygpIHJldHVybmluZyB0cnVlXHJcbiAgICBpZiAoaXNCcm93c2VyKCkpIHtcclxuICAgICAgICBzZXRFbnYoY3JlYXRlQnJvd3NlckVudigpKTtcclxuICAgIH1cclxuICAgIGlmIChpc05vZGVqcygpKSB7XHJcbiAgICAgICAgc2V0RW52KGNyZWF0ZU5vZGVqc0VudigpKTtcclxuICAgIH1cclxufVxyXG5mdW5jdGlvbiBtb25rZXlQYXRjaChlbnYpIHtcclxuICAgIGlmICghZW52aXJvbm1lbnQpIHtcclxuICAgICAgICBpbml0aWFsaXplKCk7XHJcbiAgICB9XHJcbiAgICBpZiAoIWVudmlyb25tZW50KSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdtb25rZXlQYXRjaCAtIGVudmlyb25tZW50IGlzIG5vdCBkZWZpbmVkLCBjaGVjayBpc05vZGVqcygpIGFuZCBpc0Jyb3dzZXIoKScpO1xyXG4gICAgfVxyXG4gICAgdmFyIF9hID0gZW52LkNhbnZhcywgQ2FudmFzID0gX2EgPT09IHZvaWQgMCA/IGVudmlyb25tZW50LkNhbnZhcyA6IF9hLCBfYiA9IGVudi5JbWFnZSwgSW1hZ2UgPSBfYiA9PT0gdm9pZCAwID8gZW52aXJvbm1lbnQuSW1hZ2UgOiBfYjtcclxuICAgIGVudmlyb25tZW50LkNhbnZhcyA9IENhbnZhcztcclxuICAgIGVudmlyb25tZW50LkltYWdlID0gSW1hZ2U7XHJcbiAgICBlbnZpcm9ubWVudC5jcmVhdGVDYW52YXNFbGVtZW50ID0gZW52LmNyZWF0ZUNhbnZhc0VsZW1lbnQgfHwgKGZ1bmN0aW9uICgpIHsgcmV0dXJuIG5ldyBDYW52YXMoKTsgfSk7XHJcbiAgICBlbnZpcm9ubWVudC5jcmVhdGVJbWFnZUVsZW1lbnQgPSBlbnYuY3JlYXRlSW1hZ2VFbGVtZW50IHx8IChmdW5jdGlvbiAoKSB7IHJldHVybiBuZXcgSW1hZ2UoKTsgfSk7XHJcbiAgICBlbnZpcm9ubWVudC5JbWFnZURhdGEgPSBlbnYuSW1hZ2VEYXRhIHx8IGVudmlyb25tZW50LkltYWdlRGF0YTtcclxuICAgIGVudmlyb25tZW50LlZpZGVvID0gZW52LlZpZGVvIHx8IGVudmlyb25tZW50LlZpZGVvO1xyXG4gICAgZW52aXJvbm1lbnQuZmV0Y2ggPSBlbnYuZmV0Y2ggfHwgZW52aXJvbm1lbnQuZmV0Y2g7XHJcbiAgICBlbnZpcm9ubWVudC5yZWFkRmlsZSA9IGVudi5yZWFkRmlsZSB8fCBlbnZpcm9ubWVudC5yZWFkRmlsZTtcclxufVxyXG5leHBvcnQgdmFyIGVudiA9IHtcclxuICAgIGdldEVudjogZ2V0RW52LFxyXG4gICAgc2V0RW52OiBzZXRFbnYsXHJcbiAgICBpbml0aWFsaXplOiBpbml0aWFsaXplLFxyXG4gICAgY3JlYXRlQnJvd3NlckVudjogY3JlYXRlQnJvd3NlckVudixcclxuICAgIGNyZWF0ZUZpbGVTeXN0ZW06IGNyZWF0ZUZpbGVTeXN0ZW0sXHJcbiAgICBjcmVhdGVOb2RlanNFbnY6IGNyZWF0ZU5vZGVqc0VudixcclxuICAgIG1vbmtleVBhdGNoOiBtb25rZXlQYXRjaCxcclxuICAgIGlzQnJvd3NlcjogaXNCcm93c2VyLFxyXG4gICAgaXNOb2RlanM6IGlzTm9kZWpzXHJcbn07XHJcbmluaXRpYWxpemUoKTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIiwiaW1wb3J0IHsgbWluQmJveCB9IGZyb20gJy4uL29wcyc7XHJcbmltcG9ydCB7IGdldENlbnRlclBvaW50IH0gZnJvbSAnLi4vdXRpbHMnO1xyXG5pbXBvcnQgeyBCb3ggfSBmcm9tICcuL0JveCc7XHJcbmltcG9ydCB7IERpbWVuc2lvbnMgfSBmcm9tICcuL0RpbWVuc2lvbnMnO1xyXG5pbXBvcnQgeyBGYWNlRGV0ZWN0aW9uIH0gZnJvbSAnLi9GYWNlRGV0ZWN0aW9uJztcclxuaW1wb3J0IHsgUG9pbnQgfSBmcm9tICcuL1BvaW50JztcclxuaW1wb3J0IHsgUmVjdCB9IGZyb20gJy4vUmVjdCc7XHJcbi8vIGZhY2UgYWxpZ25tZW50IGNvbnN0YW50c1xyXG52YXIgcmVsWCA9IDAuNTtcclxudmFyIHJlbFkgPSAwLjQzO1xyXG52YXIgcmVsU2NhbGUgPSAwLjQ1O1xyXG52YXIgRmFjZUxhbmRtYXJrcyA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIEZhY2VMYW5kbWFya3MocmVsYXRpdmVGYWNlTGFuZG1hcmtQb3NpdGlvbnMsIGltZ0RpbXMsIHNoaWZ0KSB7XHJcbiAgICAgICAgaWYgKHNoaWZ0ID09PSB2b2lkIDApIHsgc2hpZnQgPSBuZXcgUG9pbnQoMCwgMCk7IH1cclxuICAgICAgICB2YXIgd2lkdGggPSBpbWdEaW1zLndpZHRoLCBoZWlnaHQgPSBpbWdEaW1zLmhlaWdodDtcclxuICAgICAgICB0aGlzLl9pbWdEaW1zID0gbmV3IERpbWVuc2lvbnMod2lkdGgsIGhlaWdodCk7XHJcbiAgICAgICAgdGhpcy5fc2hpZnQgPSBzaGlmdDtcclxuICAgICAgICB0aGlzLl9wb3NpdGlvbnMgPSByZWxhdGl2ZUZhY2VMYW5kbWFya1Bvc2l0aW9ucy5tYXAoZnVuY3Rpb24gKHB0KSB7IHJldHVybiBwdC5tdWwobmV3IFBvaW50KHdpZHRoLCBoZWlnaHQpKS5hZGQoc2hpZnQpOyB9KTtcclxuICAgIH1cclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShGYWNlTGFuZG1hcmtzLnByb3RvdHlwZSwgXCJzaGlmdFwiLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBuZXcgUG9pbnQodGhpcy5fc2hpZnQueCwgdGhpcy5fc2hpZnQueSk7IH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEZhY2VMYW5kbWFya3MucHJvdG90eXBlLCBcImltYWdlV2lkdGhcIiwge1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5faW1nRGltcy53aWR0aDsgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoRmFjZUxhbmRtYXJrcy5wcm90b3R5cGUsIFwiaW1hZ2VIZWlnaHRcIiwge1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5faW1nRGltcy5oZWlnaHQ7IH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEZhY2VMYW5kbWFya3MucHJvdG90eXBlLCBcInBvc2l0aW9uc1wiLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLl9wb3NpdGlvbnM7IH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEZhY2VMYW5kbWFya3MucHJvdG90eXBlLCBcInJlbGF0aXZlUG9zaXRpb25zXCIsIHtcclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3Bvc2l0aW9ucy5tYXAoZnVuY3Rpb24gKHB0KSB7IHJldHVybiBwdC5zdWIoX3RoaXMuX3NoaWZ0KS5kaXYobmV3IFBvaW50KF90aGlzLmltYWdlV2lkdGgsIF90aGlzLmltYWdlSGVpZ2h0KSk7IH0pO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgRmFjZUxhbmRtYXJrcy5wcm90b3R5cGUuZm9yU2l6ZSA9IGZ1bmN0aW9uICh3aWR0aCwgaGVpZ2h0KSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyB0aGlzLmNvbnN0cnVjdG9yKHRoaXMucmVsYXRpdmVQb3NpdGlvbnMsIHsgd2lkdGg6IHdpZHRoLCBoZWlnaHQ6IGhlaWdodCB9KTtcclxuICAgIH07XHJcbiAgICBGYWNlTGFuZG1hcmtzLnByb3RvdHlwZS5zaGlmdEJ5ID0gZnVuY3Rpb24gKHgsIHkpIHtcclxuICAgICAgICByZXR1cm4gbmV3IHRoaXMuY29uc3RydWN0b3IodGhpcy5yZWxhdGl2ZVBvc2l0aW9ucywgdGhpcy5faW1nRGltcywgbmV3IFBvaW50KHgsIHkpKTtcclxuICAgIH07XHJcbiAgICBGYWNlTGFuZG1hcmtzLnByb3RvdHlwZS5zaGlmdEJ5UG9pbnQgPSBmdW5jdGlvbiAocHQpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5zaGlmdEJ5KHB0LngsIHB0LnkpO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQWxpZ25zIHRoZSBmYWNlIGxhbmRtYXJrcyBhZnRlciBmYWNlIGRldGVjdGlvbiBmcm9tIHRoZSByZWxhdGl2ZSBwb3NpdGlvbnMgb2YgdGhlIGZhY2VzXHJcbiAgICAgKiBib3VuZGluZyBib3gsIG9yIGl0J3MgY3VycmVudCBzaGlmdC4gVGhpcyBmdW5jdGlvbiBzaG91bGQgYmUgdXNlZCB0byBhbGlnbiB0aGUgZmFjZSBpbWFnZXNcclxuICAgICAqIGFmdGVyIGZhY2UgZGV0ZWN0aW9uIGhhcyBiZWVuIHBlcmZvcm1lZCwgYmVmb3JlIHRoZXkgYXJlIHBhc3NlZCB0byB0aGUgZmFjZSByZWNvZ25pdGlvbiBuZXQuXHJcbiAgICAgKiBUaGlzIHdpbGwgbWFrZSB0aGUgY29tcHV0ZWQgZmFjZSBkZXNjcmlwdG9yIG1vcmUgYWNjdXJhdGUuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIGRldGVjdGlvbiAob3B0aW9uYWwpIFRoZSBib3VuZGluZyBib3ggb2YgdGhlIGZhY2Ugb3IgdGhlIGZhY2UgZGV0ZWN0aW9uIHJlc3VsdC4gSWZcclxuICAgICAqIG5vIGFyZ3VtZW50IHdhcyBwYXNzZWQgdGhlIHBvc2l0aW9uIG9mIHRoZSBmYWNlIGxhbmRtYXJrcyBhcmUgYXNzdW1lZCB0byBiZSByZWxhdGl2ZSB0b1xyXG4gICAgICogaXQncyBjdXJyZW50IHNoaWZ0LlxyXG4gICAgICogQHJldHVybnMgVGhlIGJvdW5kaW5nIGJveCBvZiB0aGUgYWxpZ25lZCBmYWNlLlxyXG4gICAgICovXHJcbiAgICBGYWNlTGFuZG1hcmtzLnByb3RvdHlwZS5hbGlnbiA9IGZ1bmN0aW9uIChkZXRlY3Rpb24sIG9wdGlvbnMpIHtcclxuICAgICAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7IG9wdGlvbnMgPSB7fTsgfVxyXG4gICAgICAgIGlmIChkZXRlY3Rpb24pIHtcclxuICAgICAgICAgICAgdmFyIGJveCA9IGRldGVjdGlvbiBpbnN0YW5jZW9mIEZhY2VEZXRlY3Rpb25cclxuICAgICAgICAgICAgICAgID8gZGV0ZWN0aW9uLmJveC5mbG9vcigpXHJcbiAgICAgICAgICAgICAgICA6IG5ldyBCb3goZGV0ZWN0aW9uKTtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2hpZnRCeShib3gueCwgYm94LnkpLmFsaWduKG51bGwsIG9wdGlvbnMpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgX2EgPSBPYmplY3QuYXNzaWduKHt9LCB7IHVzZURsaWJBbGlnbm1lbnQ6IGZhbHNlLCBtaW5Cb3hQYWRkaW5nOiAwLjIgfSwgb3B0aW9ucyksIHVzZURsaWJBbGlnbm1lbnQgPSBfYS51c2VEbGliQWxpZ25tZW50LCBtaW5Cb3hQYWRkaW5nID0gX2EubWluQm94UGFkZGluZztcclxuICAgICAgICBpZiAodXNlRGxpYkFsaWdubWVudCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5hbGlnbkRsaWIoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuYWxpZ25NaW5CYm94KG1pbkJveFBhZGRpbmcpO1xyXG4gICAgfTtcclxuICAgIEZhY2VMYW5kbWFya3MucHJvdG90eXBlLmFsaWduRGxpYiA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgY2VudGVycyA9IHRoaXMuZ2V0UmVmUG9pbnRzRm9yQWxpZ25tZW50KCk7XHJcbiAgICAgICAgdmFyIGxlZnRFeWVDZW50ZXIgPSBjZW50ZXJzWzBdLCByaWdodEV5ZUNlbnRlciA9IGNlbnRlcnNbMV0sIG1vdXRoQ2VudGVyID0gY2VudGVyc1syXTtcclxuICAgICAgICB2YXIgZGlzdFRvTW91dGggPSBmdW5jdGlvbiAocHQpIHsgcmV0dXJuIG1vdXRoQ2VudGVyLnN1YihwdCkubWFnbml0dWRlKCk7IH07XHJcbiAgICAgICAgdmFyIGV5ZVRvTW91dGhEaXN0ID0gKGRpc3RUb01vdXRoKGxlZnRFeWVDZW50ZXIpICsgZGlzdFRvTW91dGgocmlnaHRFeWVDZW50ZXIpKSAvIDI7XHJcbiAgICAgICAgdmFyIHNpemUgPSBNYXRoLmZsb29yKGV5ZVRvTW91dGhEaXN0IC8gcmVsU2NhbGUpO1xyXG4gICAgICAgIHZhciByZWZQb2ludCA9IGdldENlbnRlclBvaW50KGNlbnRlcnMpO1xyXG4gICAgICAgIC8vIFRPRE86IHBhZCBpbiBjYXNlIHJlY3RhbmdsZSBpcyBvdXQgb2YgaW1hZ2UgYm91bmRzXHJcbiAgICAgICAgdmFyIHggPSBNYXRoLmZsb29yKE1hdGgubWF4KDAsIHJlZlBvaW50LnggLSAocmVsWCAqIHNpemUpKSk7XHJcbiAgICAgICAgdmFyIHkgPSBNYXRoLmZsb29yKE1hdGgubWF4KDAsIHJlZlBvaW50LnkgLSAocmVsWSAqIHNpemUpKSk7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBSZWN0KHgsIHksIE1hdGgubWluKHNpemUsIHRoaXMuaW1hZ2VXaWR0aCArIHgpLCBNYXRoLm1pbihzaXplLCB0aGlzLmltYWdlSGVpZ2h0ICsgeSkpO1xyXG4gICAgfTtcclxuICAgIEZhY2VMYW5kbWFya3MucHJvdG90eXBlLmFsaWduTWluQmJveCA9IGZ1bmN0aW9uIChwYWRkaW5nKSB7XHJcbiAgICAgICAgdmFyIGJveCA9IG1pbkJib3godGhpcy5wb3NpdGlvbnMpO1xyXG4gICAgICAgIHJldHVybiBib3gucGFkKGJveC53aWR0aCAqIHBhZGRpbmcsIGJveC5oZWlnaHQgKiBwYWRkaW5nKTtcclxuICAgIH07XHJcbiAgICBGYWNlTGFuZG1hcmtzLnByb3RvdHlwZS5nZXRSZWZQb2ludHNGb3JBbGlnbm1lbnQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdnZXRSZWZQb2ludHNGb3JBbGlnbm1lbnQgbm90IGltcGxlbWVudGVkIGJ5IGJhc2UgY2xhc3MnKTtcclxuICAgIH07XHJcbiAgICByZXR1cm4gRmFjZUxhbmRtYXJrcztcclxufSgpKTtcclxuZXhwb3J0IHsgRmFjZUxhbmRtYXJrcyB9O1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1GYWNlTGFuZG1hcmtzLmpzLm1hcCIsImltcG9ydCB7IF9fZXh0ZW5kcyB9IGZyb20gXCJ0c2xpYlwiO1xyXG5pbXBvcnQgeyBnZXRDZW50ZXJQb2ludCB9IGZyb20gJy4uL3V0aWxzJztcclxuaW1wb3J0IHsgRmFjZUxhbmRtYXJrcyB9IGZyb20gJy4vRmFjZUxhbmRtYXJrcyc7XHJcbnZhciBGYWNlTGFuZG1hcmtzNSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcclxuICAgIF9fZXh0ZW5kcyhGYWNlTGFuZG1hcmtzNSwgX3N1cGVyKTtcclxuICAgIGZ1bmN0aW9uIEZhY2VMYW5kbWFya3M1KCkge1xyXG4gICAgICAgIHJldHVybiBfc3VwZXIgIT09IG51bGwgJiYgX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcclxuICAgIH1cclxuICAgIEZhY2VMYW5kbWFya3M1LnByb3RvdHlwZS5nZXRSZWZQb2ludHNGb3JBbGlnbm1lbnQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIHB0cyA9IHRoaXMucG9zaXRpb25zO1xyXG4gICAgICAgIHJldHVybiBbXHJcbiAgICAgICAgICAgIHB0c1swXSxcclxuICAgICAgICAgICAgcHRzWzFdLFxyXG4gICAgICAgICAgICBnZXRDZW50ZXJQb2ludChbcHRzWzNdLCBwdHNbNF1dKVxyXG4gICAgICAgIF07XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIEZhY2VMYW5kbWFya3M1O1xyXG59KEZhY2VMYW5kbWFya3MpKTtcclxuZXhwb3J0IHsgRmFjZUxhbmRtYXJrczUgfTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9RmFjZUxhbmRtYXJrczUuanMubWFwIiwiaW1wb3J0IHsgX19leHRlbmRzIH0gZnJvbSBcInRzbGliXCI7XHJcbmltcG9ydCB7IGdldENlbnRlclBvaW50IH0gZnJvbSAnLi4vdXRpbHMnO1xyXG5pbXBvcnQgeyBGYWNlTGFuZG1hcmtzIH0gZnJvbSAnLi9GYWNlTGFuZG1hcmtzJztcclxudmFyIEZhY2VMYW5kbWFya3M2OCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcclxuICAgIF9fZXh0ZW5kcyhGYWNlTGFuZG1hcmtzNjgsIF9zdXBlcik7XHJcbiAgICBmdW5jdGlvbiBGYWNlTGFuZG1hcmtzNjgoKSB7XHJcbiAgICAgICAgcmV0dXJuIF9zdXBlciAhPT0gbnVsbCAmJiBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xyXG4gICAgfVxyXG4gICAgRmFjZUxhbmRtYXJrczY4LnByb3RvdHlwZS5nZXRKYXdPdXRsaW5lID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnBvc2l0aW9ucy5zbGljZSgwLCAxNyk7XHJcbiAgICB9O1xyXG4gICAgRmFjZUxhbmRtYXJrczY4LnByb3RvdHlwZS5nZXRMZWZ0RXllQnJvdyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5wb3NpdGlvbnMuc2xpY2UoMTcsIDIyKTtcclxuICAgIH07XHJcbiAgICBGYWNlTGFuZG1hcmtzNjgucHJvdG90eXBlLmdldFJpZ2h0RXllQnJvdyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5wb3NpdGlvbnMuc2xpY2UoMjIsIDI3KTtcclxuICAgIH07XHJcbiAgICBGYWNlTGFuZG1hcmtzNjgucHJvdG90eXBlLmdldE5vc2UgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMucG9zaXRpb25zLnNsaWNlKDI3LCAzNik7XHJcbiAgICB9O1xyXG4gICAgRmFjZUxhbmRtYXJrczY4LnByb3RvdHlwZS5nZXRMZWZ0RXllID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnBvc2l0aW9ucy5zbGljZSgzNiwgNDIpO1xyXG4gICAgfTtcclxuICAgIEZhY2VMYW5kbWFya3M2OC5wcm90b3R5cGUuZ2V0UmlnaHRFeWUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMucG9zaXRpb25zLnNsaWNlKDQyLCA0OCk7XHJcbiAgICB9O1xyXG4gICAgRmFjZUxhbmRtYXJrczY4LnByb3RvdHlwZS5nZXRNb3V0aCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5wb3NpdGlvbnMuc2xpY2UoNDgsIDY4KTtcclxuICAgIH07XHJcbiAgICBGYWNlTGFuZG1hcmtzNjgucHJvdG90eXBlLmdldFJlZlBvaW50c0ZvckFsaWdubWVudCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gW1xyXG4gICAgICAgICAgICB0aGlzLmdldExlZnRFeWUoKSxcclxuICAgICAgICAgICAgdGhpcy5nZXRSaWdodEV5ZSgpLFxyXG4gICAgICAgICAgICB0aGlzLmdldE1vdXRoKClcclxuICAgICAgICBdLm1hcChnZXRDZW50ZXJQb2ludCk7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIEZhY2VMYW5kbWFya3M2ODtcclxufShGYWNlTGFuZG1hcmtzKSk7XHJcbmV4cG9ydCB7IEZhY2VMYW5kbWFya3M2OCB9O1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1GYWNlTGFuZG1hcmtzNjguanMubWFwIiwiaW1wb3J0IHsgcm91bmQgfSBmcm9tICcuLi91dGlscyc7XHJcbnZhciBGYWNlTWF0Y2ggPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBGYWNlTWF0Y2gobGFiZWwsIGRpc3RhbmNlKSB7XHJcbiAgICAgICAgdGhpcy5fbGFiZWwgPSBsYWJlbDtcclxuICAgICAgICB0aGlzLl9kaXN0YW5jZSA9IGRpc3RhbmNlO1xyXG4gICAgfVxyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEZhY2VNYXRjaC5wcm90b3R5cGUsIFwibGFiZWxcIiwge1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5fbGFiZWw7IH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEZhY2VNYXRjaC5wcm90b3R5cGUsIFwiZGlzdGFuY2VcIiwge1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5fZGlzdGFuY2U7IH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgRmFjZU1hdGNoLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uICh3aXRoRGlzdGFuY2UpIHtcclxuICAgICAgICBpZiAod2l0aERpc3RhbmNlID09PSB2b2lkIDApIHsgd2l0aERpc3RhbmNlID0gdHJ1ZTsgfVxyXG4gICAgICAgIHJldHVybiBcIlwiICsgdGhpcy5sYWJlbCArICh3aXRoRGlzdGFuY2UgPyBcIiAoXCIgKyByb3VuZCh0aGlzLmRpc3RhbmNlKSArIFwiKVwiIDogJycpO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBGYWNlTWF0Y2g7XHJcbn0oKSk7XHJcbmV4cG9ydCB7IEZhY2VNYXRjaCB9O1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1GYWNlTWF0Y2guanMubWFwIiwiaW1wb3J0IHsgX19leHRlbmRzIH0gZnJvbSBcInRzbGliXCI7XHJcbmltcG9ydCB7IGlzVmFsaWROdW1iZXIgfSBmcm9tICcuLi91dGlscyc7XHJcbmltcG9ydCB7IEJveCB9IGZyb20gJy4vQm94JztcclxudmFyIExhYmVsZWRCb3ggPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XHJcbiAgICBfX2V4dGVuZHMoTGFiZWxlZEJveCwgX3N1cGVyKTtcclxuICAgIGZ1bmN0aW9uIExhYmVsZWRCb3goYm94LCBsYWJlbCkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIGJveCkgfHwgdGhpcztcclxuICAgICAgICBfdGhpcy5fbGFiZWwgPSBsYWJlbDtcclxuICAgICAgICByZXR1cm4gX3RoaXM7XHJcbiAgICB9XHJcbiAgICBMYWJlbGVkQm94LmFzc2VydElzVmFsaWRMYWJlbGVkQm94ID0gZnVuY3Rpb24gKGJveCwgY2FsbGVlKSB7XHJcbiAgICAgICAgQm94LmFzc2VydElzVmFsaWRCb3goYm94LCBjYWxsZWUpO1xyXG4gICAgICAgIGlmICghaXNWYWxpZE51bWJlcihib3gubGFiZWwpKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihjYWxsZWUgKyBcIiAtIGV4cGVjdGVkIHByb3BlcnR5IGxhYmVsIChcIiArIGJveC5sYWJlbCArIFwiKSB0byBiZSBhIG51bWJlclwiKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KExhYmVsZWRCb3gucHJvdG90eXBlLCBcImxhYmVsXCIsIHtcclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMuX2xhYmVsOyB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIHJldHVybiBMYWJlbGVkQm94O1xyXG59KEJveCkpO1xyXG5leHBvcnQgeyBMYWJlbGVkQm94IH07XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUxhYmVsZWRCb3guanMubWFwIiwidmFyIExhYmVsZWRGYWNlRGVzY3JpcHRvcnMgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBMYWJlbGVkRmFjZURlc2NyaXB0b3JzKGxhYmVsLCBkZXNjcmlwdG9ycykge1xyXG4gICAgICAgIGlmICghKHR5cGVvZiBsYWJlbCA9PT0gJ3N0cmluZycpKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignTGFiZWxlZEZhY2VEZXNjcmlwdG9ycyAtIGNvbnN0cnVjdG9yIGV4cGVjdGVkIGxhYmVsIHRvIGJlIGEgc3RyaW5nJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICghQXJyYXkuaXNBcnJheShkZXNjcmlwdG9ycykgfHwgZGVzY3JpcHRvcnMuc29tZShmdW5jdGlvbiAoZGVzYykgeyByZXR1cm4gIShkZXNjIGluc3RhbmNlb2YgRmxvYXQzMkFycmF5KTsgfSkpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdMYWJlbGVkRmFjZURlc2NyaXB0b3JzIC0gY29uc3RydWN0b3IgZXhwZWN0ZWQgZGVzY3JpcHRvcnMgdG8gYmUgYW4gYXJyYXkgb2YgRmxvYXQzMkFycmF5Jyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuX2xhYmVsID0gbGFiZWw7XHJcbiAgICAgICAgdGhpcy5fZGVzY3JpcHRvcnMgPSBkZXNjcmlwdG9ycztcclxuICAgIH1cclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShMYWJlbGVkRmFjZURlc2NyaXB0b3JzLnByb3RvdHlwZSwgXCJsYWJlbFwiLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLl9sYWJlbDsgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoTGFiZWxlZEZhY2VEZXNjcmlwdG9ycy5wcm90b3R5cGUsIFwiZGVzY3JpcHRvcnNcIiwge1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5fZGVzY3JpcHRvcnM7IH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgTGFiZWxlZEZhY2VEZXNjcmlwdG9ycy5wcm90b3R5cGUudG9KU09OID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIGxhYmVsOiB0aGlzLmxhYmVsLFxyXG4gICAgICAgICAgICBkZXNjcmlwdG9yczogdGhpcy5kZXNjcmlwdG9ycy5tYXAoZnVuY3Rpb24gKGQpIHsgcmV0dXJuIEFycmF5LmZyb20oZCk7IH0pXHJcbiAgICAgICAgfTtcclxuICAgIH07XHJcbiAgICBMYWJlbGVkRmFjZURlc2NyaXB0b3JzLmZyb21KU09OID0gZnVuY3Rpb24gKGpzb24pIHtcclxuICAgICAgICB2YXIgZGVzY3JpcHRvcnMgPSBqc29uLmRlc2NyaXB0b3JzLm1hcChmdW5jdGlvbiAoZCkge1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IEZsb2F0MzJBcnJheShkKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICByZXR1cm4gbmV3IExhYmVsZWRGYWNlRGVzY3JpcHRvcnMoanNvbi5sYWJlbCwgZGVzY3JpcHRvcnMpO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBMYWJlbGVkRmFjZURlc2NyaXB0b3JzO1xyXG59KCkpO1xyXG5leHBvcnQgeyBMYWJlbGVkRmFjZURlc2NyaXB0b3JzIH07XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUxhYmVsZWRGYWNlRGVzY3JpcHRvcnMuanMubWFwIiwiaW1wb3J0IHsgX19leHRlbmRzIH0gZnJvbSBcInRzbGliXCI7XHJcbmltcG9ydCB7IGlzVmFsaWRQcm9iYWJsaXRpeSB9IGZyb20gJy4uL3V0aWxzJztcclxuaW1wb3J0IHsgTGFiZWxlZEJveCB9IGZyb20gJy4vTGFiZWxlZEJveCc7XHJcbnZhciBQcmVkaWN0ZWRCb3ggPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XHJcbiAgICBfX2V4dGVuZHMoUHJlZGljdGVkQm94LCBfc3VwZXIpO1xyXG4gICAgZnVuY3Rpb24gUHJlZGljdGVkQm94KGJveCwgbGFiZWwsIHNjb3JlLCBjbGFzc1Njb3JlKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgYm94LCBsYWJlbCkgfHwgdGhpcztcclxuICAgICAgICBfdGhpcy5fc2NvcmUgPSBzY29yZTtcclxuICAgICAgICBfdGhpcy5fY2xhc3NTY29yZSA9IGNsYXNzU2NvcmU7XHJcbiAgICAgICAgcmV0dXJuIF90aGlzO1xyXG4gICAgfVxyXG4gICAgUHJlZGljdGVkQm94LmFzc2VydElzVmFsaWRQcmVkaWN0ZWRCb3ggPSBmdW5jdGlvbiAoYm94LCBjYWxsZWUpIHtcclxuICAgICAgICBMYWJlbGVkQm94LmFzc2VydElzVmFsaWRMYWJlbGVkQm94KGJveCwgY2FsbGVlKTtcclxuICAgICAgICBpZiAoIWlzVmFsaWRQcm9iYWJsaXRpeShib3guc2NvcmUpXHJcbiAgICAgICAgICAgIHx8ICFpc1ZhbGlkUHJvYmFibGl0aXkoYm94LmNsYXNzU2NvcmUpKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihjYWxsZWUgKyBcIiAtIGV4cGVjdGVkIHByb3BlcnRpZXMgc2NvcmUgKFwiICsgYm94LnNjb3JlICsgXCIpIGFuZCAoXCIgKyBib3guY2xhc3NTY29yZSArIFwiKSB0byBiZSBhIG51bWJlciBiZXR3ZWVuIFswLCAxXVwiKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFByZWRpY3RlZEJveC5wcm90b3R5cGUsIFwic2NvcmVcIiwge1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5fc2NvcmU7IH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFByZWRpY3RlZEJveC5wcm90b3R5cGUsIFwiY2xhc3NTY29yZVwiLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLl9jbGFzc1Njb3JlOyB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIHJldHVybiBQcmVkaWN0ZWRCb3g7XHJcbn0oTGFiZWxlZEJveCkpO1xyXG5leHBvcnQgeyBQcmVkaWN0ZWRCb3ggfTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9UHJlZGljdGVkQm94LmpzLm1hcCIsImltcG9ydCB7IEZhY2VEZXRlY3Rpb24gfSBmcm9tICcuLi9jbGFzc2VzL0ZhY2VEZXRlY3Rpb24nO1xyXG5leHBvcnQgZnVuY3Rpb24gaXNXaXRoRmFjZURldGVjdGlvbihvYmopIHtcclxuICAgIHJldHVybiBvYmpbJ2RldGVjdGlvbiddIGluc3RhbmNlb2YgRmFjZURldGVjdGlvbjtcclxufVxyXG5leHBvcnQgZnVuY3Rpb24gZXh0ZW5kV2l0aEZhY2VEZXRlY3Rpb24oc291cmNlT2JqLCBkZXRlY3Rpb24pIHtcclxuICAgIHZhciBleHRlbnNpb24gPSB7IGRldGVjdGlvbjogZGV0ZWN0aW9uIH07XHJcbiAgICByZXR1cm4gT2JqZWN0LmFzc2lnbih7fSwgc291cmNlT2JqLCBleHRlbnNpb24pO1xyXG59XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVdpdGhGYWNlRGV0ZWN0aW9uLmpzLm1hcCIsImV4cG9ydCBmdW5jdGlvbiBjcmVhdGVCcm93c2VyRW52KCkge1xyXG4gICAgdmFyIGZldGNoID0gd2luZG93WydmZXRjaCddIHx8IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2ZldGNoIC0gbWlzc2luZyBmZXRjaCBpbXBsZW1lbnRhdGlvbiBmb3IgYnJvd3NlciBlbnZpcm9ubWVudCcpO1xyXG4gICAgfTtcclxuICAgIHZhciByZWFkRmlsZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ3JlYWRGaWxlIC0gZmlsZXN5c3RlbSBub3QgYXZhaWxhYmxlIGZvciBicm93c2VyIGVudmlyb25tZW50Jyk7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBDYW52YXM6IEhUTUxDYW52YXNFbGVtZW50LFxyXG4gICAgICAgIENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRDogQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJELFxyXG4gICAgICAgIEltYWdlOiBIVE1MSW1hZ2VFbGVtZW50LFxyXG4gICAgICAgIEltYWdlRGF0YTogSW1hZ2VEYXRhLFxyXG4gICAgICAgIFZpZGVvOiBIVE1MVmlkZW9FbGVtZW50LFxyXG4gICAgICAgIGNyZWF0ZUNhbnZhc0VsZW1lbnQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2NhbnZhcycpOyB9LFxyXG4gICAgICAgIGNyZWF0ZUltYWdlRWxlbWVudDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaW1nJyk7IH0sXHJcbiAgICAgICAgZmV0Y2g6IGZldGNoLFxyXG4gICAgICAgIHJlYWRGaWxlOiByZWFkRmlsZVxyXG4gICAgfTtcclxufVxyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1jcmVhdGVCcm93c2VyRW52LmpzLm1hcCIsImV4cG9ydCBmdW5jdGlvbiBjcmVhdGVGaWxlU3lzdGVtKGZzKSB7XHJcbiAgICB2YXIgcmVxdWlyZUZzRXJyb3IgPSAnJztcclxuICAgIGlmICghZnMpIHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBmcyA9IHJlcXVpcmUoJ2ZzJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNhdGNoIChlcnIpIHtcclxuICAgICAgICAgICAgcmVxdWlyZUZzRXJyb3IgPSBlcnIudG9TdHJpbmcoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICB2YXIgcmVhZEZpbGUgPSBmc1xyXG4gICAgICAgID8gZnVuY3Rpb24gKGZpbGVQYXRoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzLCByZWopIHtcclxuICAgICAgICAgICAgICAgIGZzLnJlYWRGaWxlKGZpbGVQYXRoLCBmdW5jdGlvbiAoZXJyLCBidWZmZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZXJyID8gcmVqKGVycikgOiByZXMoYnVmZmVyKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcInJlYWRGaWxlIC0gZmFpbGVkIHRvIHJlcXVpcmUgZnMgaW4gbm9kZWpzIGVudmlyb25tZW50IHdpdGggZXJyb3I6IFwiICsgcmVxdWlyZUZzRXJyb3IpO1xyXG4gICAgICAgIH07XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIHJlYWRGaWxlOiByZWFkRmlsZVxyXG4gICAgfTtcclxufVxyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1jcmVhdGVGaWxlU3lzdGVtLmpzLm1hcCIsImltcG9ydCB7IF9fYXNzaWduIH0gZnJvbSBcInRzbGliXCI7XHJcbmltcG9ydCB7IGNyZWF0ZUZpbGVTeXN0ZW0gfSBmcm9tICcuL2NyZWF0ZUZpbGVTeXN0ZW0nO1xyXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlTm9kZWpzRW52KCkge1xyXG4gICAgdmFyIENhbnZhcyA9IGdsb2JhbFsnQ2FudmFzJ10gfHwgZ2xvYmFsWydIVE1MQ2FudmFzRWxlbWVudCddO1xyXG4gICAgdmFyIEltYWdlID0gZ2xvYmFsWydJbWFnZSddIHx8IGdsb2JhbFsnSFRNTEltYWdlRWxlbWVudCddO1xyXG4gICAgdmFyIGNyZWF0ZUNhbnZhc0VsZW1lbnQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgaWYgKENhbnZhcykge1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IENhbnZhcygpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2NyZWF0ZUNhbnZhc0VsZW1lbnQgLSBtaXNzaW5nIENhbnZhcyBpbXBsZW1lbnRhdGlvbiBmb3Igbm9kZWpzIGVudmlyb25tZW50Jyk7XHJcbiAgICB9O1xyXG4gICAgdmFyIGNyZWF0ZUltYWdlRWxlbWVudCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBpZiAoSW1hZ2UpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBJbWFnZSgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2NyZWF0ZUltYWdlRWxlbWVudCAtIG1pc3NpbmcgSW1hZ2UgaW1wbGVtZW50YXRpb24gZm9yIG5vZGVqcyBlbnZpcm9ubWVudCcpO1xyXG4gICAgfTtcclxuICAgIHZhciBmZXRjaCA9IGdsb2JhbFsnZmV0Y2gnXSB8fCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdmZXRjaCAtIG1pc3NpbmcgZmV0Y2ggaW1wbGVtZW50YXRpb24gZm9yIG5vZGVqcyBlbnZpcm9ubWVudCcpO1xyXG4gICAgfTtcclxuICAgIHZhciBmaWxlU3lzdGVtID0gY3JlYXRlRmlsZVN5c3RlbSgpO1xyXG4gICAgcmV0dXJuIF9fYXNzaWduKHsgQ2FudmFzOiBDYW52YXMgfHwgLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBmdW5jdGlvbiBDYW52YXMoKSB7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIENhbnZhcztcclxuICAgICAgICB9KCkpLCBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQ6IGdsb2JhbFsnQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJEJ10gfHwgLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBmdW5jdGlvbiBjbGFzc18xKCkge1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBjbGFzc18xO1xyXG4gICAgICAgIH0oKSksIEltYWdlOiBJbWFnZSB8fCAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGZ1bmN0aW9uIEltYWdlKCkge1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBJbWFnZTtcclxuICAgICAgICB9KCkpLCBJbWFnZURhdGE6IGdsb2JhbFsnSW1hZ2VEYXRhJ10gfHwgLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBmdW5jdGlvbiBjbGFzc18yKCkge1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBjbGFzc18yO1xyXG4gICAgICAgIH0oKSksIFZpZGVvOiBnbG9iYWxbJ0hUTUxWaWRlb0VsZW1lbnQnXSB8fCAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGZ1bmN0aW9uIGNsYXNzXzMoKSB7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIGNsYXNzXzM7XHJcbiAgICAgICAgfSgpKSwgY3JlYXRlQ2FudmFzRWxlbWVudDogY3JlYXRlQ2FudmFzRWxlbWVudCxcclxuICAgICAgICBjcmVhdGVJbWFnZUVsZW1lbnQ6IGNyZWF0ZUltYWdlRWxlbWVudCxcclxuICAgICAgICBmZXRjaDogZmV0Y2ggfSwgZmlsZVN5c3RlbSk7XHJcbn1cclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y3JlYXRlTm9kZWpzRW52LmpzLm1hcCIsImV4cG9ydCBmdW5jdGlvbiBpc0Jyb3dzZXIoKSB7XHJcbiAgICByZXR1cm4gdHlwZW9mIHdpbmRvdyA9PT0gJ29iamVjdCdcclxuICAgICAgICAmJiB0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnXHJcbiAgICAgICAgJiYgdHlwZW9mIEhUTUxJbWFnZUVsZW1lbnQgIT09ICd1bmRlZmluZWQnXHJcbiAgICAgICAgJiYgdHlwZW9mIEhUTUxDYW52YXNFbGVtZW50ICE9PSAndW5kZWZpbmVkJ1xyXG4gICAgICAgICYmIHR5cGVvZiBIVE1MVmlkZW9FbGVtZW50ICE9PSAndW5kZWZpbmVkJ1xyXG4gICAgICAgICYmIHR5cGVvZiBJbWFnZURhdGEgIT09ICd1bmRlZmluZWQnXHJcbiAgICAgICAgJiYgdHlwZW9mIENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRCAhPT0gJ3VuZGVmaW5lZCc7XHJcbn1cclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aXNCcm93c2VyLmpzLm1hcCIsImV4cG9ydCBmdW5jdGlvbiBpc05vZGVqcygpIHtcclxuICAgIHJldHVybiB0eXBlb2YgZ2xvYmFsID09PSAnb2JqZWN0J1xyXG4gICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nXHJcbiAgICAgICAgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcclxuICAgICAgICAvLyBpc3N1ZXMgd2l0aCBnYXRzYnkuanM6IG1vZHVsZS5leHBvcnRzIGlzIHVuZGVmaW5lZFxyXG4gICAgICAgIC8vICYmICEhbW9kdWxlLmV4cG9ydHNcclxuICAgICAgICAmJiB0eXBlb2YgcHJvY2VzcyAhPT0gJ3VuZGVmaW5lZCcgJiYgISFwcm9jZXNzLnZlcnNpb247XHJcbn1cclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aXNOb2RlanMuanMubWFwIiwiaW1wb3J0IHsgZ2V0Q29udGV4dDJkT3JUaHJvdyB9IGZyb20gJy4uL2RvbS9nZXRDb250ZXh0MmRPclRocm93JztcclxuaW1wb3J0IHsgcmVzb2x2ZUlucHV0IH0gZnJvbSAnLi4vZG9tL3Jlc29sdmVJbnB1dCc7XHJcbmV4cG9ydCB2YXIgQW5jaG9yUG9zaXRpb247XHJcbihmdW5jdGlvbiAoQW5jaG9yUG9zaXRpb24pIHtcclxuICAgIEFuY2hvclBvc2l0aW9uW1wiVE9QX0xFRlRcIl0gPSBcIlRPUF9MRUZUXCI7XHJcbiAgICBBbmNob3JQb3NpdGlvbltcIlRPUF9SSUdIVFwiXSA9IFwiVE9QX1JJR0hUXCI7XHJcbiAgICBBbmNob3JQb3NpdGlvbltcIkJPVFRPTV9MRUZUXCJdID0gXCJCT1RUT01fTEVGVFwiO1xyXG4gICAgQW5jaG9yUG9zaXRpb25bXCJCT1RUT01fUklHSFRcIl0gPSBcIkJPVFRPTV9SSUdIVFwiO1xyXG59KShBbmNob3JQb3NpdGlvbiB8fCAoQW5jaG9yUG9zaXRpb24gPSB7fSkpO1xyXG52YXIgRHJhd1RleHRGaWVsZE9wdGlvbnMgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBEcmF3VGV4dEZpZWxkT3B0aW9ucyhvcHRpb25zKSB7XHJcbiAgICAgICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkgeyBvcHRpb25zID0ge307IH1cclxuICAgICAgICB2YXIgYW5jaG9yUG9zaXRpb24gPSBvcHRpb25zLmFuY2hvclBvc2l0aW9uLCBiYWNrZ3JvdW5kQ29sb3IgPSBvcHRpb25zLmJhY2tncm91bmRDb2xvciwgZm9udENvbG9yID0gb3B0aW9ucy5mb250Q29sb3IsIGZvbnRTaXplID0gb3B0aW9ucy5mb250U2l6ZSwgZm9udFN0eWxlID0gb3B0aW9ucy5mb250U3R5bGUsIHBhZGRpbmcgPSBvcHRpb25zLnBhZGRpbmc7XHJcbiAgICAgICAgdGhpcy5hbmNob3JQb3NpdGlvbiA9IGFuY2hvclBvc2l0aW9uIHx8IEFuY2hvclBvc2l0aW9uLlRPUF9MRUZUO1xyXG4gICAgICAgIHRoaXMuYmFja2dyb3VuZENvbG9yID0gYmFja2dyb3VuZENvbG9yIHx8ICdyZ2JhKDAsIDAsIDAsIDAuNSknO1xyXG4gICAgICAgIHRoaXMuZm9udENvbG9yID0gZm9udENvbG9yIHx8ICdyZ2JhKDI1NSwgMjU1LCAyNTUsIDEpJztcclxuICAgICAgICB0aGlzLmZvbnRTaXplID0gZm9udFNpemUgfHwgMTQ7XHJcbiAgICAgICAgdGhpcy5mb250U3R5bGUgPSBmb250U3R5bGUgfHwgJ0dlb3JnaWEnO1xyXG4gICAgICAgIHRoaXMucGFkZGluZyA9IHBhZGRpbmcgfHwgNDtcclxuICAgIH1cclxuICAgIHJldHVybiBEcmF3VGV4dEZpZWxkT3B0aW9ucztcclxufSgpKTtcclxuZXhwb3J0IHsgRHJhd1RleHRGaWVsZE9wdGlvbnMgfTtcclxudmFyIERyYXdUZXh0RmllbGQgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBEcmF3VGV4dEZpZWxkKHRleHQsIGFuY2hvciwgb3B0aW9ucykge1xyXG4gICAgICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHsgb3B0aW9ucyA9IHt9OyB9XHJcbiAgICAgICAgdGhpcy50ZXh0ID0gdHlwZW9mIHRleHQgPT09ICdzdHJpbmcnXHJcbiAgICAgICAgICAgID8gW3RleHRdXHJcbiAgICAgICAgICAgIDogKHRleHQgaW5zdGFuY2VvZiBEcmF3VGV4dEZpZWxkID8gdGV4dC50ZXh0IDogdGV4dCk7XHJcbiAgICAgICAgdGhpcy5hbmNob3IgPSBhbmNob3I7XHJcbiAgICAgICAgdGhpcy5vcHRpb25zID0gbmV3IERyYXdUZXh0RmllbGRPcHRpb25zKG9wdGlvbnMpO1xyXG4gICAgfVxyXG4gICAgRHJhd1RleHRGaWVsZC5wcm90b3R5cGUubWVhc3VyZVdpZHRoID0gZnVuY3Rpb24gKGN0eCkge1xyXG4gICAgICAgIHZhciBwYWRkaW5nID0gdGhpcy5vcHRpb25zLnBhZGRpbmc7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMudGV4dC5tYXAoZnVuY3Rpb24gKGwpIHsgcmV0dXJuIGN0eC5tZWFzdXJlVGV4dChsKS53aWR0aDsgfSkucmVkdWNlKGZ1bmN0aW9uICh3MCwgdzEpIHsgcmV0dXJuIHcwIDwgdzEgPyB3MSA6IHcwOyB9LCAwKSArICgyICogcGFkZGluZyk7XHJcbiAgICB9O1xyXG4gICAgRHJhd1RleHRGaWVsZC5wcm90b3R5cGUubWVhc3VyZUhlaWdodCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgX2EgPSB0aGlzLm9wdGlvbnMsIGZvbnRTaXplID0gX2EuZm9udFNpemUsIHBhZGRpbmcgPSBfYS5wYWRkaW5nO1xyXG4gICAgICAgIHJldHVybiB0aGlzLnRleHQubGVuZ3RoICogZm9udFNpemUgKyAoMiAqIHBhZGRpbmcpO1xyXG4gICAgfTtcclxuICAgIERyYXdUZXh0RmllbGQucHJvdG90eXBlLmdldFVwcGVyTGVmdCA9IGZ1bmN0aW9uIChjdHgsIGNhbnZhc0RpbXMpIHtcclxuICAgICAgICB2YXIgYW5jaG9yUG9zaXRpb24gPSB0aGlzLm9wdGlvbnMuYW5jaG9yUG9zaXRpb247XHJcbiAgICAgICAgdmFyIGlzU2hpZnRMZWZ0ID0gYW5jaG9yUG9zaXRpb24gPT09IEFuY2hvclBvc2l0aW9uLkJPVFRPTV9SSUdIVCB8fCBhbmNob3JQb3NpdGlvbiA9PT0gQW5jaG9yUG9zaXRpb24uVE9QX1JJR0hUO1xyXG4gICAgICAgIHZhciBpc1NoaWZ0VG9wID0gYW5jaG9yUG9zaXRpb24gPT09IEFuY2hvclBvc2l0aW9uLkJPVFRPTV9MRUZUIHx8IGFuY2hvclBvc2l0aW9uID09PSBBbmNob3JQb3NpdGlvbi5CT1RUT01fUklHSFQ7XHJcbiAgICAgICAgdmFyIHRleHRGaWVsZFdpZHRoID0gdGhpcy5tZWFzdXJlV2lkdGgoY3R4KTtcclxuICAgICAgICB2YXIgdGV4dEZpZWxkSGVpZ2h0ID0gdGhpcy5tZWFzdXJlSGVpZ2h0KCk7XHJcbiAgICAgICAgdmFyIHggPSAoaXNTaGlmdExlZnQgPyB0aGlzLmFuY2hvci54IC0gdGV4dEZpZWxkV2lkdGggOiB0aGlzLmFuY2hvci54KTtcclxuICAgICAgICB2YXIgeSA9IGlzU2hpZnRUb3AgPyB0aGlzLmFuY2hvci55IC0gdGV4dEZpZWxkSGVpZ2h0IDogdGhpcy5hbmNob3IueTtcclxuICAgICAgICAvLyBhZGp1c3QgYW5jaG9yIGlmIHRleHQgYm94IGV4Y2VlZHMgY2FudmFzIGJvcmRlcnNcclxuICAgICAgICBpZiAoY2FudmFzRGltcykge1xyXG4gICAgICAgICAgICB2YXIgd2lkdGggPSBjYW52YXNEaW1zLndpZHRoLCBoZWlnaHQgPSBjYW52YXNEaW1zLmhlaWdodDtcclxuICAgICAgICAgICAgdmFyIG5ld1ggPSBNYXRoLm1heChNYXRoLm1pbih4LCB3aWR0aCAtIHRleHRGaWVsZFdpZHRoKSwgMCk7XHJcbiAgICAgICAgICAgIHZhciBuZXdZID0gTWF0aC5tYXgoTWF0aC5taW4oeSwgaGVpZ2h0IC0gdGV4dEZpZWxkSGVpZ2h0KSwgMCk7XHJcbiAgICAgICAgICAgIHJldHVybiB7IHg6IG5ld1gsIHk6IG5ld1kgfTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHsgeDogeCwgeTogeSB9O1xyXG4gICAgfTtcclxuICAgIERyYXdUZXh0RmllbGQucHJvdG90eXBlLmRyYXcgPSBmdW5jdGlvbiAoY2FudmFzQXJnKSB7XHJcbiAgICAgICAgdmFyIGNhbnZhcyA9IHJlc29sdmVJbnB1dChjYW52YXNBcmcpO1xyXG4gICAgICAgIHZhciBjdHggPSBnZXRDb250ZXh0MmRPclRocm93KGNhbnZhcyk7XHJcbiAgICAgICAgdmFyIF9hID0gdGhpcy5vcHRpb25zLCBiYWNrZ3JvdW5kQ29sb3IgPSBfYS5iYWNrZ3JvdW5kQ29sb3IsIGZvbnRDb2xvciA9IF9hLmZvbnRDb2xvciwgZm9udFNpemUgPSBfYS5mb250U2l6ZSwgZm9udFN0eWxlID0gX2EuZm9udFN0eWxlLCBwYWRkaW5nID0gX2EucGFkZGluZztcclxuICAgICAgICBjdHguZm9udCA9IGZvbnRTaXplICsgXCJweCBcIiArIGZvbnRTdHlsZTtcclxuICAgICAgICB2YXIgbWF4VGV4dFdpZHRoID0gdGhpcy5tZWFzdXJlV2lkdGgoY3R4KTtcclxuICAgICAgICB2YXIgdGV4dEhlaWdodCA9IHRoaXMubWVhc3VyZUhlaWdodCgpO1xyXG4gICAgICAgIGN0eC5maWxsU3R5bGUgPSBiYWNrZ3JvdW5kQ29sb3I7XHJcbiAgICAgICAgdmFyIHVwcGVyTGVmdCA9IHRoaXMuZ2V0VXBwZXJMZWZ0KGN0eCwgY2FudmFzKTtcclxuICAgICAgICBjdHguZmlsbFJlY3QodXBwZXJMZWZ0LngsIHVwcGVyTGVmdC55LCBtYXhUZXh0V2lkdGgsIHRleHRIZWlnaHQpO1xyXG4gICAgICAgIGN0eC5maWxsU3R5bGUgPSBmb250Q29sb3I7XHJcbiAgICAgICAgdGhpcy50ZXh0LmZvckVhY2goZnVuY3Rpb24gKHRleHRMaW5lLCBpKSB7XHJcbiAgICAgICAgICAgIHZhciB4ID0gcGFkZGluZyArIHVwcGVyTGVmdC54O1xyXG4gICAgICAgICAgICB2YXIgeSA9IHBhZGRpbmcgKyB1cHBlckxlZnQueSArICgoaSArIDEpICogZm9udFNpemUpO1xyXG4gICAgICAgICAgICBjdHguZmlsbFRleHQodGV4dExpbmUsIHgsIHkpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBEcmF3VGV4dEZpZWxkO1xyXG59KCkpO1xyXG5leHBvcnQgeyBEcmF3VGV4dEZpZWxkIH07XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPURyYXdUZXh0RmllbGQuanMubWFwIiwiaW1wb3J0IHsgZW52IH0gZnJvbSAnLi4vZW52JztcclxuZXhwb3J0IGZ1bmN0aW9uIHJlc29sdmVJbnB1dChhcmcpIHtcclxuICAgIGlmICghZW52LmlzTm9kZWpzKCkgJiYgdHlwZW9mIGFyZyA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgICByZXR1cm4gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoYXJnKTtcclxuICAgIH1cclxuICAgIHJldHVybiBhcmc7XHJcbn1cclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmVzb2x2ZUlucHV0LmpzLm1hcCIsImltcG9ydCB7IGVudiB9IGZyb20gJy4uL2Vudic7XHJcbmltcG9ydCB7IHJlc29sdmVJbnB1dCB9IGZyb20gJy4vcmVzb2x2ZUlucHV0JztcclxuZXhwb3J0IGZ1bmN0aW9uIGdldENvbnRleHQyZE9yVGhyb3coY2FudmFzQXJnKSB7XHJcbiAgICB2YXIgX2EgPSBlbnYuZ2V0RW52KCksIENhbnZhcyA9IF9hLkNhbnZhcywgQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJEID0gX2EuQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJEO1xyXG4gICAgaWYgKGNhbnZhc0FyZyBpbnN0YW5jZW9mIENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRCkge1xyXG4gICAgICAgIHJldHVybiBjYW52YXNBcmc7XHJcbiAgICB9XHJcbiAgICB2YXIgY2FudmFzID0gcmVzb2x2ZUlucHV0KGNhbnZhc0FyZyk7XHJcbiAgICBpZiAoIShjYW52YXMgaW5zdGFuY2VvZiBDYW52YXMpKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdyZXNvbHZlQ29udGV4dDJkIC0gZXhwZWN0ZWQgY2FudmFzIHRvIGJlIG9mIGluc3RhbmNlIG9mIENhbnZhcycpO1xyXG4gICAgfVxyXG4gICAgdmFyIGN0eCA9IGNhbnZhcy5nZXRDb250ZXh0KCcyZCcpO1xyXG4gICAgaWYgKCFjdHgpIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ3Jlc29sdmVDb250ZXh0MmQgLSBjYW52YXMgMmQgY29udGV4dCBpcyBudWxsJyk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gY3R4O1xyXG59XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWdldENvbnRleHQyZE9yVGhyb3cuanMubWFwIiwiaW1wb3J0IHsgQm94IH0gZnJvbSAnLi4vY2xhc3Nlcyc7XHJcbmltcG9ydCB7IGdldENvbnRleHQyZE9yVGhyb3cgfSBmcm9tICcuLi9kb20vZ2V0Q29udGV4dDJkT3JUaHJvdyc7XHJcbmltcG9ydCB7IEFuY2hvclBvc2l0aW9uLCBEcmF3VGV4dEZpZWxkLCBEcmF3VGV4dEZpZWxkT3B0aW9ucyB9IGZyb20gJy4vRHJhd1RleHRGaWVsZCc7XHJcbnZhciBEcmF3Qm94T3B0aW9ucyA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIERyYXdCb3hPcHRpb25zKG9wdGlvbnMpIHtcclxuICAgICAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7IG9wdGlvbnMgPSB7fTsgfVxyXG4gICAgICAgIHZhciBib3hDb2xvciA9IG9wdGlvbnMuYm94Q29sb3IsIGxpbmVXaWR0aCA9IG9wdGlvbnMubGluZVdpZHRoLCBsYWJlbCA9IG9wdGlvbnMubGFiZWwsIGRyYXdMYWJlbE9wdGlvbnMgPSBvcHRpb25zLmRyYXdMYWJlbE9wdGlvbnM7XHJcbiAgICAgICAgdGhpcy5ib3hDb2xvciA9IGJveENvbG9yIHx8ICdyZ2JhKDAsIDAsIDI1NSwgMSknO1xyXG4gICAgICAgIHRoaXMubGluZVdpZHRoID0gbGluZVdpZHRoIHx8IDI7XHJcbiAgICAgICAgdGhpcy5sYWJlbCA9IGxhYmVsO1xyXG4gICAgICAgIHZhciBkZWZhdWx0RHJhd0xhYmVsT3B0aW9ucyA9IHtcclxuICAgICAgICAgICAgYW5jaG9yUG9zaXRpb246IEFuY2hvclBvc2l0aW9uLkJPVFRPTV9MRUZULFxyXG4gICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoaXMuYm94Q29sb3JcclxuICAgICAgICB9O1xyXG4gICAgICAgIHRoaXMuZHJhd0xhYmVsT3B0aW9ucyA9IG5ldyBEcmF3VGV4dEZpZWxkT3B0aW9ucyhPYmplY3QuYXNzaWduKHt9LCBkZWZhdWx0RHJhd0xhYmVsT3B0aW9ucywgZHJhd0xhYmVsT3B0aW9ucykpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIERyYXdCb3hPcHRpb25zO1xyXG59KCkpO1xyXG5leHBvcnQgeyBEcmF3Qm94T3B0aW9ucyB9O1xyXG52YXIgRHJhd0JveCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIERyYXdCb3goYm94LCBvcHRpb25zKSB7XHJcbiAgICAgICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkgeyBvcHRpb25zID0ge307IH1cclxuICAgICAgICB0aGlzLmJveCA9IG5ldyBCb3goYm94KTtcclxuICAgICAgICB0aGlzLm9wdGlvbnMgPSBuZXcgRHJhd0JveE9wdGlvbnMob3B0aW9ucyk7XHJcbiAgICB9XHJcbiAgICBEcmF3Qm94LnByb3RvdHlwZS5kcmF3ID0gZnVuY3Rpb24gKGNhbnZhc0FyZykge1xyXG4gICAgICAgIHZhciBjdHggPSBnZXRDb250ZXh0MmRPclRocm93KGNhbnZhc0FyZyk7XHJcbiAgICAgICAgdmFyIF9hID0gdGhpcy5vcHRpb25zLCBib3hDb2xvciA9IF9hLmJveENvbG9yLCBsaW5lV2lkdGggPSBfYS5saW5lV2lkdGg7XHJcbiAgICAgICAgdmFyIF9iID0gdGhpcy5ib3gsIHggPSBfYi54LCB5ID0gX2IueSwgd2lkdGggPSBfYi53aWR0aCwgaGVpZ2h0ID0gX2IuaGVpZ2h0O1xyXG4gICAgICAgIGN0eC5zdHJva2VTdHlsZSA9IGJveENvbG9yO1xyXG4gICAgICAgIGN0eC5saW5lV2lkdGggPSBsaW5lV2lkdGg7XHJcbiAgICAgICAgY3R4LnN0cm9rZVJlY3QoeCwgeSwgd2lkdGgsIGhlaWdodCk7XHJcbiAgICAgICAgdmFyIGxhYmVsID0gdGhpcy5vcHRpb25zLmxhYmVsO1xyXG4gICAgICAgIGlmIChsYWJlbCkge1xyXG4gICAgICAgICAgICBuZXcgRHJhd1RleHRGaWVsZChbbGFiZWxdLCB7IHg6IHggLSAobGluZVdpZHRoIC8gMiksIHk6IHkgfSwgdGhpcy5vcHRpb25zLmRyYXdMYWJlbE9wdGlvbnMpLmRyYXcoY2FudmFzQXJnKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIERyYXdCb3g7XHJcbn0oKSk7XHJcbmV4cG9ydCB7IERyYXdCb3ggfTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9RHJhd0JveC5qcy5tYXAiLCJpbXBvcnQgeyBCb3ggfSBmcm9tICcuLi9jbGFzc2VzJztcclxuaW1wb3J0IHsgRmFjZURldGVjdGlvbiB9IGZyb20gJy4uL2NsYXNzZXMvRmFjZURldGVjdGlvbic7XHJcbmltcG9ydCB7IGlzV2l0aEZhY2VEZXRlY3Rpb24gfSBmcm9tICcuLi9mYWN0b3JpZXMvV2l0aEZhY2VEZXRlY3Rpb24nO1xyXG5pbXBvcnQgeyByb3VuZCB9IGZyb20gJy4uL3V0aWxzJztcclxuaW1wb3J0IHsgRHJhd0JveCB9IGZyb20gJy4vRHJhd0JveCc7XHJcbmV4cG9ydCBmdW5jdGlvbiBkcmF3RGV0ZWN0aW9ucyhjYW52YXNBcmcsIGRldGVjdGlvbnMpIHtcclxuICAgIHZhciBkZXRlY3Rpb25zQXJyYXkgPSBBcnJheS5pc0FycmF5KGRldGVjdGlvbnMpID8gZGV0ZWN0aW9ucyA6IFtkZXRlY3Rpb25zXTtcclxuICAgIGRldGVjdGlvbnNBcnJheS5mb3JFYWNoKGZ1bmN0aW9uIChkZXQpIHtcclxuICAgICAgICB2YXIgc2NvcmUgPSBkZXQgaW5zdGFuY2VvZiBGYWNlRGV0ZWN0aW9uXHJcbiAgICAgICAgICAgID8gZGV0LnNjb3JlXHJcbiAgICAgICAgICAgIDogKGlzV2l0aEZhY2VEZXRlY3Rpb24oZGV0KSA/IGRldC5kZXRlY3Rpb24uc2NvcmUgOiB1bmRlZmluZWQpO1xyXG4gICAgICAgIHZhciBib3ggPSBkZXQgaW5zdGFuY2VvZiBGYWNlRGV0ZWN0aW9uXHJcbiAgICAgICAgICAgID8gZGV0LmJveFxyXG4gICAgICAgICAgICA6IChpc1dpdGhGYWNlRGV0ZWN0aW9uKGRldCkgPyBkZXQuZGV0ZWN0aW9uLmJveCA6IG5ldyBCb3goZGV0KSk7XHJcbiAgICAgICAgdmFyIGxhYmVsID0gc2NvcmUgPyBcIlwiICsgcm91bmQoc2NvcmUpIDogdW5kZWZpbmVkO1xyXG4gICAgICAgIG5ldyBEcmF3Qm94KGJveCwgeyBsYWJlbDogbGFiZWwgfSkuZHJhdyhjYW52YXNBcmcpO1xyXG4gICAgfSk7XHJcbn1cclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZHJhd0RldGVjdGlvbnMuanMubWFwIiwiaW1wb3J0IHsgZW52IH0gZnJvbSAnLi4vZW52JztcclxuZXhwb3J0IGZ1bmN0aW9uIGlzTWVkaWFMb2FkZWQobWVkaWEpIHtcclxuICAgIHZhciBfYSA9IGVudi5nZXRFbnYoKSwgSW1hZ2UgPSBfYS5JbWFnZSwgVmlkZW8gPSBfYS5WaWRlbztcclxuICAgIHJldHVybiAobWVkaWEgaW5zdGFuY2VvZiBJbWFnZSAmJiBtZWRpYS5jb21wbGV0ZSlcclxuICAgICAgICB8fCAobWVkaWEgaW5zdGFuY2VvZiBWaWRlbyAmJiBtZWRpYS5yZWFkeVN0YXRlID49IDMpO1xyXG59XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWlzTWVkaWFMb2FkZWQuanMubWFwIiwiaW1wb3J0IHsgZW52IH0gZnJvbSAnLi4vZW52JztcclxuaW1wb3J0IHsgaXNNZWRpYUxvYWRlZCB9IGZyb20gJy4vaXNNZWRpYUxvYWRlZCc7XHJcbmV4cG9ydCBmdW5jdGlvbiBhd2FpdE1lZGlhTG9hZGVkKG1lZGlhKSB7XHJcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICAgIGlmIChtZWRpYSBpbnN0YW5jZW9mIGVudi5nZXRFbnYoKS5DYW52YXMgfHwgaXNNZWRpYUxvYWRlZChtZWRpYSkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHJlc29sdmUoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZnVuY3Rpb24gb25Mb2FkKGUpIHtcclxuICAgICAgICAgICAgaWYgKCFlLmN1cnJlbnRUYXJnZXQpXHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIGUuY3VycmVudFRhcmdldC5yZW1vdmVFdmVudExpc3RlbmVyKCdsb2FkJywgb25Mb2FkKTtcclxuICAgICAgICAgICAgZS5jdXJyZW50VGFyZ2V0LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2Vycm9yJywgb25FcnJvcik7XHJcbiAgICAgICAgICAgIHJlc29sdmUoZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZ1bmN0aW9uIG9uRXJyb3IoZSkge1xyXG4gICAgICAgICAgICBpZiAoIWUuY3VycmVudFRhcmdldClcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgZS5jdXJyZW50VGFyZ2V0LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2xvYWQnLCBvbkxvYWQpO1xyXG4gICAgICAgICAgICBlLmN1cnJlbnRUYXJnZXQucmVtb3ZlRXZlbnRMaXN0ZW5lcignZXJyb3InLCBvbkVycm9yKTtcclxuICAgICAgICAgICAgcmVqZWN0KGUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBtZWRpYS5hZGRFdmVudExpc3RlbmVyKCdsb2FkJywgb25Mb2FkKTtcclxuICAgICAgICBtZWRpYS5hZGRFdmVudExpc3RlbmVyKCdlcnJvcicsIG9uRXJyb3IpO1xyXG4gICAgfSk7XHJcbn1cclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXdhaXRNZWRpYUxvYWRlZC5qcy5tYXAiLCJpbXBvcnQgeyBlbnYgfSBmcm9tICcuLi9lbnYnO1xyXG5leHBvcnQgZnVuY3Rpb24gYnVmZmVyVG9JbWFnZShidWYpIHtcclxuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XHJcbiAgICAgICAgaWYgKCEoYnVmIGluc3RhbmNlb2YgQmxvYikpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHJlamVjdCgnYnVmZmVyVG9JbWFnZSAtIGV4cGVjdGVkIGJ1ZiB0byBiZSBvZiB0eXBlOiBCbG9iJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciByZWFkZXIgPSBuZXcgRmlsZVJlYWRlcigpO1xyXG4gICAgICAgIHJlYWRlci5vbmxvYWQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgcmVhZGVyLnJlc3VsdCAhPT0gJ3N0cmluZycpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiByZWplY3QoJ2J1ZmZlclRvSW1hZ2UgLSBleHBlY3RlZCByZWFkZXIucmVzdWx0IHRvIGJlIGEgc3RyaW5nLCBpbiBvbmxvYWQnKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB2YXIgaW1nID0gZW52LmdldEVudigpLmNyZWF0ZUltYWdlRWxlbWVudCgpO1xyXG4gICAgICAgICAgICBpbWcub25sb2FkID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gcmVzb2x2ZShpbWcpOyB9O1xyXG4gICAgICAgICAgICBpbWcub25lcnJvciA9IHJlamVjdDtcclxuICAgICAgICAgICAgaW1nLnNyYyA9IHJlYWRlci5yZXN1bHQ7XHJcbiAgICAgICAgfTtcclxuICAgICAgICByZWFkZXIub25lcnJvciA9IHJlamVjdDtcclxuICAgICAgICByZWFkZXIucmVhZEFzRGF0YVVSTChidWYpO1xyXG4gICAgfSk7XHJcbn1cclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YnVmZmVyVG9JbWFnZS5qcy5tYXAiLCJpbXBvcnQgeyBEaW1lbnNpb25zIH0gZnJvbSAnLi4vY2xhc3Nlcy9EaW1lbnNpb25zJztcclxuaW1wb3J0IHsgZW52IH0gZnJvbSAnLi4vZW52JztcclxuZXhwb3J0IGZ1bmN0aW9uIGdldE1lZGlhRGltZW5zaW9ucyhpbnB1dCkge1xyXG4gICAgdmFyIF9hID0gZW52LmdldEVudigpLCBJbWFnZSA9IF9hLkltYWdlLCBWaWRlbyA9IF9hLlZpZGVvO1xyXG4gICAgaWYgKGlucHV0IGluc3RhbmNlb2YgSW1hZ2UpIHtcclxuICAgICAgICByZXR1cm4gbmV3IERpbWVuc2lvbnMoaW5wdXQubmF0dXJhbFdpZHRoLCBpbnB1dC5uYXR1cmFsSGVpZ2h0KTtcclxuICAgIH1cclxuICAgIGlmIChpbnB1dCBpbnN0YW5jZW9mIFZpZGVvKSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBEaW1lbnNpb25zKGlucHV0LnZpZGVvV2lkdGgsIGlucHV0LnZpZGVvSGVpZ2h0KTtcclxuICAgIH1cclxuICAgIHJldHVybiBuZXcgRGltZW5zaW9ucyhpbnB1dC53aWR0aCwgaW5wdXQuaGVpZ2h0KTtcclxufVxyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1nZXRNZWRpYURpbWVuc2lvbnMuanMubWFwIiwiaW1wb3J0IHsgZW52IH0gZnJvbSAnLi4vZW52JztcclxuaW1wb3J0IHsgZ2V0Q29udGV4dDJkT3JUaHJvdyB9IGZyb20gJy4vZ2V0Q29udGV4dDJkT3JUaHJvdyc7XHJcbmltcG9ydCB7IGdldE1lZGlhRGltZW5zaW9ucyB9IGZyb20gJy4vZ2V0TWVkaWFEaW1lbnNpb25zJztcclxuaW1wb3J0IHsgaXNNZWRpYUxvYWRlZCB9IGZyb20gJy4vaXNNZWRpYUxvYWRlZCc7XHJcbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVDYW52YXMoX2EpIHtcclxuICAgIHZhciB3aWR0aCA9IF9hLndpZHRoLCBoZWlnaHQgPSBfYS5oZWlnaHQ7XHJcbiAgICB2YXIgY3JlYXRlQ2FudmFzRWxlbWVudCA9IGVudi5nZXRFbnYoKS5jcmVhdGVDYW52YXNFbGVtZW50O1xyXG4gICAgdmFyIGNhbnZhcyA9IGNyZWF0ZUNhbnZhc0VsZW1lbnQoKTtcclxuICAgIGNhbnZhcy53aWR0aCA9IHdpZHRoO1xyXG4gICAgY2FudmFzLmhlaWdodCA9IGhlaWdodDtcclxuICAgIHJldHVybiBjYW52YXM7XHJcbn1cclxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUNhbnZhc0Zyb21NZWRpYShtZWRpYSwgZGltcykge1xyXG4gICAgdmFyIEltYWdlRGF0YSA9IGVudi5nZXRFbnYoKS5JbWFnZURhdGE7XHJcbiAgICBpZiAoIShtZWRpYSBpbnN0YW5jZW9mIEltYWdlRGF0YSkgJiYgIWlzTWVkaWFMb2FkZWQobWVkaWEpKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdjcmVhdGVDYW52YXNGcm9tTWVkaWEgLSBtZWRpYSBoYXMgbm90IGZpbmlzaGVkIGxvYWRpbmcgeWV0Jyk7XHJcbiAgICB9XHJcbiAgICB2YXIgX2EgPSBkaW1zIHx8IGdldE1lZGlhRGltZW5zaW9ucyhtZWRpYSksIHdpZHRoID0gX2Eud2lkdGgsIGhlaWdodCA9IF9hLmhlaWdodDtcclxuICAgIHZhciBjYW52YXMgPSBjcmVhdGVDYW52YXMoeyB3aWR0aDogd2lkdGgsIGhlaWdodDogaGVpZ2h0IH0pO1xyXG4gICAgaWYgKG1lZGlhIGluc3RhbmNlb2YgSW1hZ2VEYXRhKSB7XHJcbiAgICAgICAgZ2V0Q29udGV4dDJkT3JUaHJvdyhjYW52YXMpLnB1dEltYWdlRGF0YShtZWRpYSwgMCwgMCk7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICBnZXRDb250ZXh0MmRPclRocm93KGNhbnZhcykuZHJhd0ltYWdlKG1lZGlhLCAwLCAwLCB3aWR0aCwgaGVpZ2h0KTtcclxuICAgIH1cclxuICAgIHJldHVybiBjYW52YXM7XHJcbn1cclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y3JlYXRlQ2FudmFzLmpzLm1hcCIsImltcG9ydCB7IF9fYXdhaXRlciwgX19nZW5lcmF0b3IgfSBmcm9tIFwidHNsaWJcIjtcclxuaW1wb3J0ICogYXMgdGYgZnJvbSAnQHRlbnNvcmZsb3cvdGZqcy1jb3JlJztcclxuaW1wb3J0IHsgZW52IH0gZnJvbSAnLi4vZW52JztcclxuaW1wb3J0IHsgaXNUZW5zb3I0RCB9IGZyb20gJy4uL3V0aWxzJztcclxuZXhwb3J0IGZ1bmN0aW9uIGltYWdlVGVuc29yVG9DYW52YXMoaW1nVGVuc29yLCBjYW52YXMpIHtcclxuICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgdGFyZ2V0Q2FudmFzLCBfYSwgaGVpZ2h0LCB3aWR0aCwgbnVtQ2hhbm5lbHMsIGltZ1RlbnNvcjNEO1xyXG4gICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2IpIHtcclxuICAgICAgICAgICAgc3dpdGNoIChfYi5sYWJlbCkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSAwOlxyXG4gICAgICAgICAgICAgICAgICAgIHRhcmdldENhbnZhcyA9IGNhbnZhcyB8fCBlbnYuZ2V0RW52KCkuY3JlYXRlQ2FudmFzRWxlbWVudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIF9hID0gaW1nVGVuc29yLnNoYXBlLnNsaWNlKGlzVGVuc29yNEQoaW1nVGVuc29yKSA/IDEgOiAwKSwgaGVpZ2h0ID0gX2FbMF0sIHdpZHRoID0gX2FbMV0sIG51bUNoYW5uZWxzID0gX2FbMl07XHJcbiAgICAgICAgICAgICAgICAgICAgaW1nVGVuc29yM0QgPSB0Zi50aWR5KGZ1bmN0aW9uICgpIHsgcmV0dXJuIGltZ1RlbnNvci5hczNEKGhlaWdodCwgd2lkdGgsIG51bUNoYW5uZWxzKS50b0ludCgpOyB9KTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCB0Zi5icm93c2VyLnRvUGl4ZWxzKGltZ1RlbnNvcjNELCB0YXJnZXRDYW52YXMpXTtcclxuICAgICAgICAgICAgICAgIGNhc2UgMTpcclxuICAgICAgICAgICAgICAgICAgICBfYi5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgaW1nVGVuc29yM0QuZGlzcG9zZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCB0YXJnZXRDYW52YXNdO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9KTtcclxufVxyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbWFnZVRlbnNvclRvQ2FudmFzLmpzLm1hcCIsImltcG9ydCB7IGVudiB9IGZyb20gJy4uL2Vudic7XHJcbmV4cG9ydCBmdW5jdGlvbiBpc01lZGlhRWxlbWVudChpbnB1dCkge1xyXG4gICAgdmFyIF9hID0gZW52LmdldEVudigpLCBJbWFnZSA9IF9hLkltYWdlLCBDYW52YXMgPSBfYS5DYW52YXMsIFZpZGVvID0gX2EuVmlkZW87XHJcbiAgICByZXR1cm4gaW5wdXQgaW5zdGFuY2VvZiBJbWFnZVxyXG4gICAgICAgIHx8IGlucHV0IGluc3RhbmNlb2YgQ2FudmFzXHJcbiAgICAgICAgfHwgaW5wdXQgaW5zdGFuY2VvZiBWaWRlbztcclxufVxyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1pc01lZGlhRWxlbWVudC5qcy5tYXAiLCJpbXBvcnQgeyBlbnYgfSBmcm9tICcuLi9lbnYnO1xyXG5pbXBvcnQgeyBjcmVhdGVDYW52YXMsIGNyZWF0ZUNhbnZhc0Zyb21NZWRpYSB9IGZyb20gJy4vY3JlYXRlQ2FudmFzJztcclxuaW1wb3J0IHsgZ2V0Q29udGV4dDJkT3JUaHJvdyB9IGZyb20gJy4vZ2V0Q29udGV4dDJkT3JUaHJvdyc7XHJcbmltcG9ydCB7IGdldE1lZGlhRGltZW5zaW9ucyB9IGZyb20gJy4vZ2V0TWVkaWFEaW1lbnNpb25zJztcclxuZXhwb3J0IGZ1bmN0aW9uIGltYWdlVG9TcXVhcmUoaW5wdXQsIGlucHV0U2l6ZSwgY2VudGVySW1hZ2UpIHtcclxuICAgIGlmIChjZW50ZXJJbWFnZSA9PT0gdm9pZCAwKSB7IGNlbnRlckltYWdlID0gZmFsc2U7IH1cclxuICAgIHZhciBfYSA9IGVudi5nZXRFbnYoKSwgSW1hZ2UgPSBfYS5JbWFnZSwgQ2FudmFzID0gX2EuQ2FudmFzO1xyXG4gICAgaWYgKCEoaW5wdXQgaW5zdGFuY2VvZiBJbWFnZSB8fCBpbnB1dCBpbnN0YW5jZW9mIENhbnZhcykpIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2ltYWdlVG9TcXVhcmUgLSBleHBlY3RlZCBhcmcwIHRvIGJlIEhUTUxJbWFnZUVsZW1lbnQgfCBIVE1MQ2FudmFzRWxlbWVudCcpO1xyXG4gICAgfVxyXG4gICAgdmFyIGRpbXMgPSBnZXRNZWRpYURpbWVuc2lvbnMoaW5wdXQpO1xyXG4gICAgdmFyIHNjYWxlID0gaW5wdXRTaXplIC8gTWF0aC5tYXgoZGltcy5oZWlnaHQsIGRpbXMud2lkdGgpO1xyXG4gICAgdmFyIHdpZHRoID0gc2NhbGUgKiBkaW1zLndpZHRoO1xyXG4gICAgdmFyIGhlaWdodCA9IHNjYWxlICogZGltcy5oZWlnaHQ7XHJcbiAgICB2YXIgdGFyZ2V0Q2FudmFzID0gY3JlYXRlQ2FudmFzKHsgd2lkdGg6IGlucHV0U2l6ZSwgaGVpZ2h0OiBpbnB1dFNpemUgfSk7XHJcbiAgICB2YXIgaW5wdXRDYW52YXMgPSBpbnB1dCBpbnN0YW5jZW9mIENhbnZhcyA/IGlucHV0IDogY3JlYXRlQ2FudmFzRnJvbU1lZGlhKGlucHV0KTtcclxuICAgIHZhciBvZmZzZXQgPSBNYXRoLmFicyh3aWR0aCAtIGhlaWdodCkgLyAyO1xyXG4gICAgdmFyIGR4ID0gY2VudGVySW1hZ2UgJiYgd2lkdGggPCBoZWlnaHQgPyBvZmZzZXQgOiAwO1xyXG4gICAgdmFyIGR5ID0gY2VudGVySW1hZ2UgJiYgaGVpZ2h0IDwgd2lkdGggPyBvZmZzZXQgOiAwO1xyXG4gICAgZ2V0Q29udGV4dDJkT3JUaHJvdyh0YXJnZXRDYW52YXMpLmRyYXdJbWFnZShpbnB1dENhbnZhcywgZHgsIGR5LCB3aWR0aCwgaGVpZ2h0KTtcclxuICAgIHJldHVybiB0YXJnZXRDYW52YXM7XHJcbn1cclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW1hZ2VUb1NxdWFyZS5qcy5tYXAiLCJpbXBvcnQgKiBhcyB0ZiBmcm9tICdAdGVuc29yZmxvdy90ZmpzLWNvcmUnO1xyXG5pbXBvcnQgeyBlbnYgfSBmcm9tICcuLi9lbnYnO1xyXG5pbXBvcnQgeyBwYWRUb1NxdWFyZSB9IGZyb20gJy4uL29wcy9wYWRUb1NxdWFyZSc7XHJcbmltcG9ydCB7IGNvbXB1dGVSZXNoYXBlZERpbWVuc2lvbnMsIGlzVGVuc29yM0QsIGlzVGVuc29yNEQsIHJhbmdlIH0gZnJvbSAnLi4vdXRpbHMnO1xyXG5pbXBvcnQgeyBjcmVhdGVDYW52YXNGcm9tTWVkaWEgfSBmcm9tICcuL2NyZWF0ZUNhbnZhcyc7XHJcbmltcG9ydCB7IGltYWdlVG9TcXVhcmUgfSBmcm9tICcuL2ltYWdlVG9TcXVhcmUnO1xyXG52YXIgTmV0SW5wdXQgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBOZXRJbnB1dChpbnB1dHMsIHRyZWF0QXNCYXRjaElucHV0KSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICBpZiAodHJlYXRBc0JhdGNoSW5wdXQgPT09IHZvaWQgMCkgeyB0cmVhdEFzQmF0Y2hJbnB1dCA9IGZhbHNlOyB9XHJcbiAgICAgICAgdGhpcy5faW1hZ2VUZW5zb3JzID0gW107XHJcbiAgICAgICAgdGhpcy5fY2FudmFzZXMgPSBbXTtcclxuICAgICAgICB0aGlzLl90cmVhdEFzQmF0Y2hJbnB1dCA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuX2lucHV0RGltZW5zaW9ucyA9IFtdO1xyXG4gICAgICAgIGlmICghQXJyYXkuaXNBcnJheShpbnB1dHMpKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIk5ldElucHV0LmNvbnN0cnVjdG9yIC0gZXhwZWN0ZWQgaW5wdXRzIHRvIGJlIGFuIEFycmF5IG9mIFRSZXNvbHZlZE5ldElucHV0IG9yIHRvIGJlIGluc3RhbmNlb2YgdGYuVGVuc29yNEQsIGluc3RlYWQgaGF2ZSBcIiArIGlucHV0cyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuX3RyZWF0QXNCYXRjaElucHV0ID0gdHJlYXRBc0JhdGNoSW5wdXQ7XHJcbiAgICAgICAgdGhpcy5fYmF0Y2hTaXplID0gaW5wdXRzLmxlbmd0aDtcclxuICAgICAgICBpbnB1dHMuZm9yRWFjaChmdW5jdGlvbiAoaW5wdXQsIGlkeCkge1xyXG4gICAgICAgICAgICBpZiAoaXNUZW5zb3IzRChpbnB1dCkpIHtcclxuICAgICAgICAgICAgICAgIF90aGlzLl9pbWFnZVRlbnNvcnNbaWR4XSA9IGlucHV0O1xyXG4gICAgICAgICAgICAgICAgX3RoaXMuX2lucHV0RGltZW5zaW9uc1tpZHhdID0gaW5wdXQuc2hhcGU7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKGlzVGVuc29yNEQoaW5wdXQpKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgYmF0Y2hTaXplID0gaW5wdXQuc2hhcGVbMF07XHJcbiAgICAgICAgICAgICAgICBpZiAoYmF0Y2hTaXplICE9PSAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTmV0SW5wdXQgLSB0Zi5UZW5zb3I0RCB3aXRoIGJhdGNoU2l6ZSBcIiArIGJhdGNoU2l6ZSArIFwiIHBhc3NlZCwgYnV0IG5vdCBzdXBwb3J0ZWQgaW4gaW5wdXQgYXJyYXlcIik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBfdGhpcy5faW1hZ2VUZW5zb3JzW2lkeF0gPSBpbnB1dDtcclxuICAgICAgICAgICAgICAgIF90aGlzLl9pbnB1dERpbWVuc2lvbnNbaWR4XSA9IGlucHV0LnNoYXBlLnNsaWNlKDEpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHZhciBjYW52YXMgPSBpbnB1dCBpbnN0YW5jZW9mIGVudi5nZXRFbnYoKS5DYW52YXMgPyBpbnB1dCA6IGNyZWF0ZUNhbnZhc0Zyb21NZWRpYShpbnB1dCk7XHJcbiAgICAgICAgICAgIF90aGlzLl9jYW52YXNlc1tpZHhdID0gY2FudmFzO1xyXG4gICAgICAgICAgICBfdGhpcy5faW5wdXREaW1lbnNpb25zW2lkeF0gPSBbY2FudmFzLmhlaWdodCwgY2FudmFzLndpZHRoLCAzXTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShOZXRJbnB1dC5wcm90b3R5cGUsIFwiaW1hZ2VUZW5zb3JzXCIsIHtcclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2ltYWdlVGVuc29ycztcclxuICAgICAgICB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShOZXRJbnB1dC5wcm90b3R5cGUsIFwiY2FudmFzZXNcIiwge1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fY2FudmFzZXM7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoTmV0SW5wdXQucHJvdG90eXBlLCBcImlzQmF0Y2hJbnB1dFwiLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmJhdGNoU2l6ZSA+IDEgfHwgdGhpcy5fdHJlYXRBc0JhdGNoSW5wdXQ7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoTmV0SW5wdXQucHJvdG90eXBlLCBcImJhdGNoU2l6ZVwiLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9iYXRjaFNpemU7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoTmV0SW5wdXQucHJvdG90eXBlLCBcImlucHV0RGltZW5zaW9uc1wiLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9pbnB1dERpbWVuc2lvbnM7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoTmV0SW5wdXQucHJvdG90eXBlLCBcImlucHV0U2l6ZVwiLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9pbnB1dFNpemU7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoTmV0SW5wdXQucHJvdG90eXBlLCBcInJlc2hhcGVkSW5wdXREaW1lbnNpb25zXCIsIHtcclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICAgICAgcmV0dXJuIHJhbmdlKHRoaXMuYmF0Y2hTaXplLCAwLCAxKS5tYXAoZnVuY3Rpb24gKF8sIGJhdGNoSWR4KSB7IHJldHVybiBfdGhpcy5nZXRSZXNoYXBlZElucHV0RGltZW5zaW9ucyhiYXRjaElkeCk7IH0pO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgTmV0SW5wdXQucHJvdG90eXBlLmdldElucHV0ID0gZnVuY3Rpb24gKGJhdGNoSWR4KSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuY2FudmFzZXNbYmF0Y2hJZHhdIHx8IHRoaXMuaW1hZ2VUZW5zb3JzW2JhdGNoSWR4XTtcclxuICAgIH07XHJcbiAgICBOZXRJbnB1dC5wcm90b3R5cGUuZ2V0SW5wdXREaW1lbnNpb25zID0gZnVuY3Rpb24gKGJhdGNoSWR4KSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2lucHV0RGltZW5zaW9uc1tiYXRjaElkeF07XHJcbiAgICB9O1xyXG4gICAgTmV0SW5wdXQucHJvdG90eXBlLmdldElucHV0SGVpZ2h0ID0gZnVuY3Rpb24gKGJhdGNoSWR4KSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2lucHV0RGltZW5zaW9uc1tiYXRjaElkeF1bMF07XHJcbiAgICB9O1xyXG4gICAgTmV0SW5wdXQucHJvdG90eXBlLmdldElucHV0V2lkdGggPSBmdW5jdGlvbiAoYmF0Y2hJZHgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5faW5wdXREaW1lbnNpb25zW2JhdGNoSWR4XVsxXTtcclxuICAgIH07XHJcbiAgICBOZXRJbnB1dC5wcm90b3R5cGUuZ2V0UmVzaGFwZWRJbnB1dERpbWVuc2lvbnMgPSBmdW5jdGlvbiAoYmF0Y2hJZHgpIHtcclxuICAgICAgICBpZiAodHlwZW9mIHRoaXMuaW5wdXRTaXplICE9PSAnbnVtYmVyJykge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2dldFJlc2hhcGVkSW5wdXREaW1lbnNpb25zIC0gaW5wdXRTaXplIG5vdCBzZXQsIHRvQmF0Y2hUZW5zb3IgaGFzIG5vdCBiZWVuIGNhbGxlZCB5ZXQnKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIHdpZHRoID0gdGhpcy5nZXRJbnB1dFdpZHRoKGJhdGNoSWR4KTtcclxuICAgICAgICB2YXIgaGVpZ2h0ID0gdGhpcy5nZXRJbnB1dEhlaWdodChiYXRjaElkeCk7XHJcbiAgICAgICAgcmV0dXJuIGNvbXB1dGVSZXNoYXBlZERpbWVuc2lvbnMoeyB3aWR0aDogd2lkdGgsIGhlaWdodDogaGVpZ2h0IH0sIHRoaXMuaW5wdXRTaXplKTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIENyZWF0ZSBhIGJhdGNoIHRlbnNvciBmcm9tIGFsbCBpbnB1dCBjYW52YXNlcyBhbmQgdGVuc29yc1xyXG4gICAgICogd2l0aCBzaXplIFtiYXRjaFNpemUsIGlucHV0U2l6ZSwgaW5wdXRTaXplLCAzXS5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gaW5wdXRTaXplIEhlaWdodCBhbmQgd2lkdGggb2YgdGhlIHRlbnNvci5cclxuICAgICAqIEBwYXJhbSBpc0NlbnRlckltYWdlIChvcHRpb25hbCwgZGVmYXVsdDogZmFsc2UpIElmIHRydWUsIGFkZCBhbiBlcXVhbCBhbW91bnQgb2YgcGFkZGluZyBvblxyXG4gICAgICogYm90aCBzaWRlcyBvZiB0aGUgbWlub3IgZGltZW5zaW9uIG9vZiB0aGUgaW1hZ2UuXHJcbiAgICAgKiBAcmV0dXJucyBUaGUgYmF0Y2ggdGVuc29yLlxyXG4gICAgICovXHJcbiAgICBOZXRJbnB1dC5wcm90b3R5cGUudG9CYXRjaFRlbnNvciA9IGZ1bmN0aW9uIChpbnB1dFNpemUsIGlzQ2VudGVySW5wdXRzKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICBpZiAoaXNDZW50ZXJJbnB1dHMgPT09IHZvaWQgMCkgeyBpc0NlbnRlcklucHV0cyA9IHRydWU7IH1cclxuICAgICAgICB0aGlzLl9pbnB1dFNpemUgPSBpbnB1dFNpemU7XHJcbiAgICAgICAgcmV0dXJuIHRmLnRpZHkoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgaW5wdXRUZW5zb3JzID0gcmFuZ2UoX3RoaXMuYmF0Y2hTaXplLCAwLCAxKS5tYXAoZnVuY3Rpb24gKGJhdGNoSWR4KSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgaW5wdXQgPSBfdGhpcy5nZXRJbnB1dChiYXRjaElkeCk7XHJcbiAgICAgICAgICAgICAgICBpZiAoaW5wdXQgaW5zdGFuY2VvZiB0Zi5UZW5zb3IpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgaW1nVGVuc29yID0gaXNUZW5zb3I0RChpbnB1dCkgPyBpbnB1dCA6IGlucHV0LmV4cGFuZERpbXMoKTtcclxuICAgICAgICAgICAgICAgICAgICBpbWdUZW5zb3IgPSBwYWRUb1NxdWFyZShpbWdUZW5zb3IsIGlzQ2VudGVySW5wdXRzKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoaW1nVGVuc29yLnNoYXBlWzFdICE9PSBpbnB1dFNpemUgfHwgaW1nVGVuc29yLnNoYXBlWzJdICE9PSBpbnB1dFNpemUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaW1nVGVuc29yID0gdGYuaW1hZ2UucmVzaXplQmlsaW5lYXIoaW1nVGVuc29yLCBbaW5wdXRTaXplLCBpbnB1dFNpemVdKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGltZ1RlbnNvci5hczNEKGlucHV0U2l6ZSwgaW5wdXRTaXplLCAzKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChpbnB1dCBpbnN0YW5jZW9mIGVudi5nZXRFbnYoKS5DYW52YXMpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGYuYnJvd3Nlci5mcm9tUGl4ZWxzKGltYWdlVG9TcXVhcmUoaW5wdXQsIGlucHV0U2l6ZSwgaXNDZW50ZXJJbnB1dHMpKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcInRvQmF0Y2hUZW5zb3IgLSBhdCBiYXRjaElkeCBcIiArIGJhdGNoSWR4ICsgXCIsIGV4cGVjdGVkIGlucHV0IHRvIGJlIGluc3RhbmNlb2YgdGYuVGVuc29yIG9yIGluc3RhbmNlb2YgSFRNTENhbnZhc0VsZW1lbnQsIGluc3RlYWQgaGF2ZSBcIiArIGlucHV0KTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHZhciBiYXRjaFRlbnNvciA9IHRmLnN0YWNrKGlucHV0VGVuc29ycy5tYXAoZnVuY3Rpb24gKHQpIHsgcmV0dXJuIHQudG9GbG9hdCgpOyB9KSkuYXM0RChfdGhpcy5iYXRjaFNpemUsIGlucHV0U2l6ZSwgaW5wdXRTaXplLCAzKTtcclxuICAgICAgICAgICAgcmV0dXJuIGJhdGNoVGVuc29yO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBOZXRJbnB1dDtcclxufSgpKTtcclxuZXhwb3J0IHsgTmV0SW5wdXQgfTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9TmV0SW5wdXQuanMubWFwIiwiaW1wb3J0IHsgX19hd2FpdGVyLCBfX2dlbmVyYXRvciB9IGZyb20gXCJ0c2xpYlwiO1xyXG5pbXBvcnQgeyBpc1RlbnNvcjNELCBpc1RlbnNvcjREIH0gZnJvbSAnLi4vdXRpbHMnO1xyXG5pbXBvcnQgeyBhd2FpdE1lZGlhTG9hZGVkIH0gZnJvbSAnLi9hd2FpdE1lZGlhTG9hZGVkJztcclxuaW1wb3J0IHsgaXNNZWRpYUVsZW1lbnQgfSBmcm9tICcuL2lzTWVkaWFFbGVtZW50JztcclxuaW1wb3J0IHsgTmV0SW5wdXQgfSBmcm9tICcuL05ldElucHV0JztcclxuaW1wb3J0IHsgcmVzb2x2ZUlucHV0IH0gZnJvbSAnLi9yZXNvbHZlSW5wdXQnO1xyXG4vKipcclxuICogVmFsaWRhdGVzIHRoZSBpbnB1dCB0byBtYWtlIHN1cmUsIHRoZXkgYXJlIHZhbGlkIG5ldCBpbnB1dHMgYW5kIGF3YWl0cyBhbGwgbWVkaWEgZWxlbWVudHNcclxuICogdG8gYmUgZmluaXNoZWQgbG9hZGluZy5cclxuICpcclxuICogQHBhcmFtIGlucHV0IFRoZSBpbnB1dCwgd2hpY2ggY2FuIGJlIGEgbWVkaWEgZWxlbWVudCBvciBhbiBhcnJheSBvZiBkaWZmZXJlbnQgbWVkaWEgZWxlbWVudHMuXHJcbiAqIEByZXR1cm5zIEEgTmV0SW5wdXQgaW5zdGFuY2UsIHdoaWNoIGNhbiBiZSBwYXNzZWQgaW50byBvbmUgb2YgdGhlIG5ldXJhbCBuZXR3b3Jrcy5cclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiB0b05ldElucHV0KGlucHV0cykge1xyXG4gICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBpbnB1dEFyZ0FycmF5LCBnZXRJZHhIaW50LCBpbnB1dEFycmF5O1xyXG4gICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcclxuICAgICAgICAgICAgc3dpdGNoIChfYS5sYWJlbCkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSAwOlxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChpbnB1dHMgaW5zdGFuY2VvZiBOZXRJbnB1dCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgaW5wdXRzXTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgaW5wdXRBcmdBcnJheSA9IEFycmF5LmlzQXJyYXkoaW5wdXRzKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICA/IGlucHV0c1xyXG4gICAgICAgICAgICAgICAgICAgICAgICA6IFtpbnB1dHNdO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghaW5wdXRBcmdBcnJheS5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCd0b05ldElucHV0IC0gZW1wdHkgYXJyYXkgcGFzc2VkIGFzIGlucHV0Jyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGdldElkeEhpbnQgPSBmdW5jdGlvbiAoaWR4KSB7IHJldHVybiBBcnJheS5pc0FycmF5KGlucHV0cykgPyBcIiBhdCBpbnB1dCBpbmRleCBcIiArIGlkeCArIFwiOlwiIDogJyc7IH07XHJcbiAgICAgICAgICAgICAgICAgICAgaW5wdXRBcnJheSA9IGlucHV0QXJnQXJyYXkubWFwKHJlc29sdmVJbnB1dCk7XHJcbiAgICAgICAgICAgICAgICAgICAgaW5wdXRBcnJheS5mb3JFYWNoKGZ1bmN0aW9uIChpbnB1dCwgaSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWlzTWVkaWFFbGVtZW50KGlucHV0KSAmJiAhaXNUZW5zb3IzRChpbnB1dCkgJiYgIWlzVGVuc29yNEQoaW5wdXQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGlucHV0QXJnQXJyYXlbaV0gPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwidG9OZXRJbnB1dCAtXCIgKyBnZXRJZHhIaW50KGkpICsgXCIgc3RyaW5nIHBhc3NlZCwgYnV0IGNvdWxkIG5vdCByZXNvbHZlIEhUTUxFbGVtZW50IGZvciBlbGVtZW50IGlkIFwiICsgaW5wdXRBcmdBcnJheVtpXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJ0b05ldElucHV0IC1cIiArIGdldElkeEhpbnQoaSkgKyBcIiBleHBlY3RlZCBtZWRpYSB0byBiZSBvZiB0eXBlIEhUTUxJbWFnZUVsZW1lbnQgfCBIVE1MVmlkZW9FbGVtZW50IHwgSFRNTENhbnZhc0VsZW1lbnQgfCB0Zi5UZW5zb3IzRCwgb3IgdG8gYmUgYW4gZWxlbWVudCBpZFwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNUZW5zb3I0RChpbnB1dCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGlmIHRmLlRlbnNvcjREIGlzIHBhc3NlZCBpbiB0aGUgaW5wdXQgYXJyYXksIHRoZSBiYXRjaCBzaXplIGhhcyB0byBiZSAxXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgYmF0Y2hTaXplID0gaW5wdXQuc2hhcGVbMF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYmF0Y2hTaXplICE9PSAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwidG9OZXRJbnB1dCAtXCIgKyBnZXRJZHhIaW50KGkpICsgXCIgdGYuVGVuc29yNEQgd2l0aCBiYXRjaFNpemUgXCIgKyBiYXRjaFNpemUgKyBcIiBwYXNzZWQsIGJ1dCBub3Qgc3VwcG9ydGVkIGluIGlucHV0IGFycmF5XCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gd2FpdCBmb3IgYWxsIG1lZGlhIGVsZW1lbnRzIGJlaW5nIGxvYWRlZFxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIFByb21pc2UuYWxsKGlucHV0QXJyYXkubWFwKGZ1bmN0aW9uIChpbnB1dCkgeyByZXR1cm4gaXNNZWRpYUVsZW1lbnQoaW5wdXQpICYmIGF3YWl0TWVkaWFMb2FkZWQoaW5wdXQpOyB9KSldO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAxOlxyXG4gICAgICAgICAgICAgICAgICAgIC8vIHdhaXQgZm9yIGFsbCBtZWRpYSBlbGVtZW50cyBiZWluZyBsb2FkZWRcclxuICAgICAgICAgICAgICAgICAgICBfYS5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIG5ldyBOZXRJbnB1dChpbnB1dEFycmF5LCBBcnJheS5pc0FycmF5KGlucHV0cykpXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfSk7XHJcbn1cclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dG9OZXRJbnB1dC5qcy5tYXAiLCJpbXBvcnQgeyBfX2F3YWl0ZXIsIF9fZ2VuZXJhdG9yIH0gZnJvbSBcInRzbGliXCI7XHJcbmltcG9ydCB7IEZhY2VEZXRlY3Rpb24gfSBmcm9tICcuLi9jbGFzc2VzL0ZhY2VEZXRlY3Rpb24nO1xyXG5pbXBvcnQgeyBlbnYgfSBmcm9tICcuLi9lbnYnO1xyXG5pbXBvcnQgeyBjcmVhdGVDYW52YXMgfSBmcm9tICcuL2NyZWF0ZUNhbnZhcyc7XHJcbmltcG9ydCB7IGdldENvbnRleHQyZE9yVGhyb3cgfSBmcm9tICcuL2dldENvbnRleHQyZE9yVGhyb3cnO1xyXG5pbXBvcnQgeyBpbWFnZVRlbnNvclRvQ2FudmFzIH0gZnJvbSAnLi9pbWFnZVRlbnNvclRvQ2FudmFzJztcclxuaW1wb3J0IHsgdG9OZXRJbnB1dCB9IGZyb20gJy4vdG9OZXRJbnB1dCc7XHJcbi8qKlxyXG4gKiBFeHRyYWN0cyB0aGUgaW1hZ2UgcmVnaW9ucyBjb250YWluaW5nIHRoZSBkZXRlY3RlZCBmYWNlcy5cclxuICpcclxuICogQHBhcmFtIGlucHV0IFRoZSBpbWFnZSB0aGF0IGZhY2UgZGV0ZWN0aW9uIGhhcyBiZWVuIHBlcmZvcm1lZCBvbi5cclxuICogQHBhcmFtIGRldGVjdGlvbnMgVGhlIGZhY2UgZGV0ZWN0aW9uIHJlc3VsdHMgb3IgZmFjZSBib3VuZGluZyBib3hlcyBmb3IgdGhhdCBpbWFnZS5cclxuICogQHJldHVybnMgVGhlIENhbnZhc2VzIG9mIHRoZSBjb3JyZXNwb25kaW5nIGltYWdlIHJlZ2lvbiBmb3IgZWFjaCBkZXRlY3RlZCBmYWNlLlxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGV4dHJhY3RGYWNlcyhpbnB1dCwgZGV0ZWN0aW9ucykge1xyXG4gICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBDYW52YXMsIGNhbnZhcywgbmV0SW5wdXQsIHRlbnNvck9yQ2FudmFzLCBfYSwgY3R4LCBib3hlcztcclxuICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9iKSB7XHJcbiAgICAgICAgICAgIHN3aXRjaCAoX2IubGFiZWwpIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgMDpcclxuICAgICAgICAgICAgICAgICAgICBDYW52YXMgPSBlbnYuZ2V0RW52KCkuQ2FudmFzO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhbnZhcyA9IGlucHV0O1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghIShpbnB1dCBpbnN0YW5jZW9mIENhbnZhcykpIHJldHVybiBbMyAvKmJyZWFrKi8sIDVdO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHRvTmV0SW5wdXQoaW5wdXQpXTtcclxuICAgICAgICAgICAgICAgIGNhc2UgMTpcclxuICAgICAgICAgICAgICAgICAgICBuZXRJbnB1dCA9IF9iLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAobmV0SW5wdXQuYmF0Y2hTaXplID4gMSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2V4dHJhY3RGYWNlcyAtIGJhdGNoU2l6ZSA+IDEgbm90IHN1cHBvcnRlZCcpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB0ZW5zb3JPckNhbnZhcyA9IG5ldElucHV0LmdldElucHV0KDApO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghKHRlbnNvck9yQ2FudmFzIGluc3RhbmNlb2YgQ2FudmFzKSkgcmV0dXJuIFszIC8qYnJlYWsqLywgMl07XHJcbiAgICAgICAgICAgICAgICAgICAgX2EgPSB0ZW5zb3JPckNhbnZhcztcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzMgLypicmVhayovLCA0XTtcclxuICAgICAgICAgICAgICAgIGNhc2UgMjogcmV0dXJuIFs0IC8qeWllbGQqLywgaW1hZ2VUZW5zb3JUb0NhbnZhcyh0ZW5zb3JPckNhbnZhcyldO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAzOlxyXG4gICAgICAgICAgICAgICAgICAgIF9hID0gX2Iuc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIF9iLmxhYmVsID0gNDtcclxuICAgICAgICAgICAgICAgIGNhc2UgNDpcclxuICAgICAgICAgICAgICAgICAgICBjYW52YXMgPSBfYTtcclxuICAgICAgICAgICAgICAgICAgICBfYi5sYWJlbCA9IDU7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDU6XHJcbiAgICAgICAgICAgICAgICAgICAgY3R4ID0gZ2V0Q29udGV4dDJkT3JUaHJvdyhjYW52YXMpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJveGVzID0gZGV0ZWN0aW9ucy5tYXAoZnVuY3Rpb24gKGRldCkgeyByZXR1cm4gZGV0IGluc3RhbmNlb2YgRmFjZURldGVjdGlvblxyXG4gICAgICAgICAgICAgICAgICAgICAgICA/IGRldC5mb3JTaXplKGNhbnZhcy53aWR0aCwgY2FudmFzLmhlaWdodCkuYm94LmZsb29yKClcclxuICAgICAgICAgICAgICAgICAgICAgICAgOiBkZXQ7IH0pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5tYXAoZnVuY3Rpb24gKGJveCkgeyByZXR1cm4gYm94LmNsaXBBdEltYWdlQm9yZGVycyhjYW52YXMud2lkdGgsIGNhbnZhcy5oZWlnaHQpOyB9KTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgYm94ZXMubWFwKGZ1bmN0aW9uIChfYSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHggPSBfYS54LCB5ID0gX2EueSwgd2lkdGggPSBfYS53aWR0aCwgaGVpZ2h0ID0gX2EuaGVpZ2h0O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGZhY2VJbWcgPSBjcmVhdGVDYW52YXMoeyB3aWR0aDogd2lkdGgsIGhlaWdodDogaGVpZ2h0IH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2V0Q29udGV4dDJkT3JUaHJvdyhmYWNlSW1nKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5wdXRJbWFnZURhdGEoY3R4LmdldEltYWdlRGF0YSh4LCB5LCB3aWR0aCwgaGVpZ2h0KSwgMCwgMCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFjZUltZztcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSldO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9KTtcclxufVxyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1leHRyYWN0RmFjZXMuanMubWFwIiwiaW1wb3J0IHsgX19hd2FpdGVyLCBfX2dlbmVyYXRvciB9IGZyb20gXCJ0c2xpYlwiO1xyXG5pbXBvcnQgKiBhcyB0ZiBmcm9tICdAdGVuc29yZmxvdy90ZmpzLWNvcmUnO1xyXG5pbXBvcnQgeyBGYWNlRGV0ZWN0aW9uIH0gZnJvbSAnLi4vY2xhc3Nlcy9GYWNlRGV0ZWN0aW9uJztcclxuaW1wb3J0IHsgaXNUZW5zb3IzRCwgaXNUZW5zb3I0RCB9IGZyb20gJy4uL3V0aWxzJztcclxuLyoqXHJcbiAqIEV4dHJhY3RzIHRoZSB0ZW5zb3JzIG9mIHRoZSBpbWFnZSByZWdpb25zIGNvbnRhaW5pbmcgdGhlIGRldGVjdGVkIGZhY2VzLlxyXG4gKiBVc2VmdWwgaWYgeW91IHdhbnQgdG8gY29tcHV0ZSB0aGUgZmFjZSBkZXNjcmlwdG9ycyBmb3IgdGhlIGZhY2UgaW1hZ2VzLlxyXG4gKiBVc2luZyB0aGlzIG1ldGhvZCBpcyBmYXN0ZXIgdGhlbiBleHRyYWN0aW5nIGEgY2FudmFzIGZvciBlYWNoIGZhY2UgYW5kXHJcbiAqIGNvbnZlcnRpbmcgdGhlbSB0byB0ZW5zb3JzIGluZGl2aWR1YWxseS5cclxuICpcclxuICogQHBhcmFtIGltYWdlVGVuc29yIFRoZSBpbWFnZSB0ZW5zb3IgdGhhdCBmYWNlIGRldGVjdGlvbiBoYXMgYmVlbiBwZXJmb3JtZWQgb24uXHJcbiAqIEBwYXJhbSBkZXRlY3Rpb25zIFRoZSBmYWNlIGRldGVjdGlvbiByZXN1bHRzIG9yIGZhY2UgYm91bmRpbmcgYm94ZXMgZm9yIHRoYXQgaW1hZ2UuXHJcbiAqIEByZXR1cm5zIFRlbnNvcnMgb2YgdGhlIGNvcnJlc3BvbmRpbmcgaW1hZ2UgcmVnaW9uIGZvciBlYWNoIGRldGVjdGVkIGZhY2UuXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gZXh0cmFjdEZhY2VUZW5zb3JzKGltYWdlVGVuc29yLCBkZXRlY3Rpb25zKSB7XHJcbiAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xyXG4gICAgICAgICAgICBpZiAoIWlzVGVuc29yM0QoaW1hZ2VUZW5zb3IpICYmICFpc1RlbnNvcjREKGltYWdlVGVuc29yKSkge1xyXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdleHRyYWN0RmFjZVRlbnNvcnMgLSBleHBlY3RlZCBpbWFnZSB0ZW5zb3IgdG8gYmUgM0Qgb3IgNEQnKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoaXNUZW5zb3I0RChpbWFnZVRlbnNvcikgJiYgaW1hZ2VUZW5zb3Iuc2hhcGVbMF0gPiAxKSB7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2V4dHJhY3RGYWNlVGVuc29ycyAtIGJhdGNoU2l6ZSA+IDEgbm90IHN1cHBvcnRlZCcpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCB0Zi50aWR5KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgX2EgPSBpbWFnZVRlbnNvci5zaGFwZS5zbGljZShpc1RlbnNvcjREKGltYWdlVGVuc29yKSA/IDEgOiAwKSwgaW1nSGVpZ2h0ID0gX2FbMF0sIGltZ1dpZHRoID0gX2FbMV0sIG51bUNoYW5uZWxzID0gX2FbMl07XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGJveGVzID0gZGV0ZWN0aW9ucy5tYXAoZnVuY3Rpb24gKGRldCkgeyByZXR1cm4gZGV0IGluc3RhbmNlb2YgRmFjZURldGVjdGlvblxyXG4gICAgICAgICAgICAgICAgICAgICAgICA/IGRldC5mb3JTaXplKGltZ1dpZHRoLCBpbWdIZWlnaHQpLmJveFxyXG4gICAgICAgICAgICAgICAgICAgICAgICA6IGRldDsgfSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgLm1hcChmdW5jdGlvbiAoYm94KSB7IHJldHVybiBib3guY2xpcEF0SW1hZ2VCb3JkZXJzKGltZ1dpZHRoLCBpbWdIZWlnaHQpOyB9KTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgZmFjZVRlbnNvcnMgPSBib3hlcy5tYXAoZnVuY3Rpb24gKF9hKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB4ID0gX2EueCwgeSA9IF9hLnksIHdpZHRoID0gX2Eud2lkdGgsIGhlaWdodCA9IF9hLmhlaWdodDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRmLnNsaWNlM2QoaW1hZ2VUZW5zb3IuYXMzRChpbWdIZWlnaHQsIGltZ1dpZHRoLCBudW1DaGFubmVscyksIFt5LCB4LCAwXSwgW2hlaWdodCwgd2lkdGgsIG51bUNoYW5uZWxzXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhY2VUZW5zb3JzO1xyXG4gICAgICAgICAgICAgICAgfSldO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfSk7XHJcbn1cclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZXh0cmFjdEZhY2VUZW5zb3JzLmpzLm1hcCIsImltcG9ydCB7IF9fYXdhaXRlciwgX19nZW5lcmF0b3IgfSBmcm9tIFwidHNsaWJcIjtcclxuaW1wb3J0IHsgZW52IH0gZnJvbSAnLi4vZW52JztcclxuZXhwb3J0IGZ1bmN0aW9uIGZldGNoT3JUaHJvdyh1cmwsIGluaXQpIHtcclxuICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgZmV0Y2gsIHJlcztcclxuICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XHJcbiAgICAgICAgICAgIHN3aXRjaCAoX2EubGFiZWwpIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgMDpcclxuICAgICAgICAgICAgICAgICAgICBmZXRjaCA9IGVudi5nZXRFbnYoKS5mZXRjaDtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCBmZXRjaCh1cmwsIGluaXQpXTtcclxuICAgICAgICAgICAgICAgIGNhc2UgMTpcclxuICAgICAgICAgICAgICAgICAgICByZXMgPSBfYS5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEocmVzLnN0YXR1cyA8IDQwMCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiZmFpbGVkIHRvIGZldGNoOiAoXCIgKyByZXMuc3RhdHVzICsgXCIpIFwiICsgcmVzLnN0YXR1c1RleHQgKyBcIiwgZnJvbSB1cmw6IFwiICsgcmVzLnVybCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCByZXNdO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9KTtcclxufVxyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1mZXRjaE9yVGhyb3cuanMubWFwIiwiaW1wb3J0IHsgX19hd2FpdGVyLCBfX2dlbmVyYXRvciB9IGZyb20gXCJ0c2xpYlwiO1xyXG5pbXBvcnQgeyBidWZmZXJUb0ltYWdlIH0gZnJvbSAnLi9idWZmZXJUb0ltYWdlJztcclxuaW1wb3J0IHsgZmV0Y2hPclRocm93IH0gZnJvbSAnLi9mZXRjaE9yVGhyb3cnO1xyXG5leHBvcnQgZnVuY3Rpb24gZmV0Y2hJbWFnZSh1cmkpIHtcclxuICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgcmVzLCBibG9iO1xyXG4gICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcclxuICAgICAgICAgICAgc3dpdGNoIChfYS5sYWJlbCkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSAwOiByZXR1cm4gWzQgLyp5aWVsZCovLCBmZXRjaE9yVGhyb3codXJpKV07XHJcbiAgICAgICAgICAgICAgICBjYXNlIDE6XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzID0gX2Euc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIChyZXMpLmJsb2IoKV07XHJcbiAgICAgICAgICAgICAgICBjYXNlIDI6XHJcbiAgICAgICAgICAgICAgICAgICAgYmxvYiA9IF9hLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIWJsb2IudHlwZS5zdGFydHNXaXRoKCdpbWFnZS8nKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJmZXRjaEltYWdlIC0gZXhwZWN0ZWQgYmxvYiB0eXBlIHRvIGJlIG9mIHR5cGUgaW1hZ2UvKiwgaW5zdGVhZCBoYXZlOiBcIiArIGJsb2IudHlwZSArIFwiLCBmb3IgdXJsOiBcIiArIHJlcy51cmwpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgYnVmZmVyVG9JbWFnZShibG9iKV07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH0pO1xyXG59XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWZldGNoSW1hZ2UuanMubWFwIiwiaW1wb3J0IHsgX19hd2FpdGVyLCBfX2dlbmVyYXRvciB9IGZyb20gXCJ0c2xpYlwiO1xyXG5pbXBvcnQgeyBmZXRjaE9yVGhyb3cgfSBmcm9tICcuL2ZldGNoT3JUaHJvdyc7XHJcbmV4cG9ydCBmdW5jdGlvbiBmZXRjaEpzb24odXJpKSB7XHJcbiAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xyXG4gICAgICAgICAgICBzd2l0Y2ggKF9hLmxhYmVsKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDA6IHJldHVybiBbNCAvKnlpZWxkKi8sIGZldGNoT3JUaHJvdyh1cmkpXTtcclxuICAgICAgICAgICAgICAgIGNhc2UgMTogcmV0dXJuIFsyIC8qcmV0dXJuKi8sIChfYS5zZW50KCkpLmpzb24oKV07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH0pO1xyXG59XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWZldGNoSnNvbi5qcy5tYXAiLCJpbXBvcnQgeyBfX2F3YWl0ZXIsIF9fZ2VuZXJhdG9yIH0gZnJvbSBcInRzbGliXCI7XHJcbmltcG9ydCB7IGZldGNoT3JUaHJvdyB9IGZyb20gJy4vZmV0Y2hPclRocm93JztcclxuZXhwb3J0IGZ1bmN0aW9uIGZldGNoTmV0V2VpZ2h0cyh1cmkpIHtcclxuICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgX2E7XHJcbiAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYikge1xyXG4gICAgICAgICAgICBzd2l0Y2ggKF9iLmxhYmVsKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDA6XHJcbiAgICAgICAgICAgICAgICAgICAgX2EgPSBGbG9hdDMyQXJyYXkuYmluZDtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCBmZXRjaE9yVGhyb3codXJpKV07XHJcbiAgICAgICAgICAgICAgICBjYXNlIDE6IHJldHVybiBbNCAvKnlpZWxkKi8sIChfYi5zZW50KCkpLmFycmF5QnVmZmVyKCldO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAyOiByZXR1cm4gWzIgLypyZXR1cm4qLywgbmV3IChfYS5hcHBseShGbG9hdDMyQXJyYXksIFt2b2lkIDAsIF9iLnNlbnQoKV0pKSgpXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfSk7XHJcbn1cclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZmV0Y2hOZXRXZWlnaHRzLmpzLm1hcCIsImV4cG9ydCBmdW5jdGlvbiBnZXRNb2RlbFVyaXModXJpLCBkZWZhdWx0TW9kZWxOYW1lKSB7XHJcbiAgICB2YXIgZGVmYXVsdE1hbmlmZXN0RmlsZW5hbWUgPSBkZWZhdWx0TW9kZWxOYW1lICsgXCItd2VpZ2h0c19tYW5pZmVzdC5qc29uXCI7XHJcbiAgICBpZiAoIXVyaSkge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIG1vZGVsQmFzZVVyaTogJycsXHJcbiAgICAgICAgICAgIG1hbmlmZXN0VXJpOiBkZWZhdWx0TWFuaWZlc3RGaWxlbmFtZVxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbiAgICBpZiAodXJpID09PSAnLycpIHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBtb2RlbEJhc2VVcmk6ICcvJyxcclxuICAgICAgICAgICAgbWFuaWZlc3RVcmk6IFwiL1wiICsgZGVmYXVsdE1hbmlmZXN0RmlsZW5hbWVcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG4gICAgdmFyIHByb3RvY29sID0gdXJpLnN0YXJ0c1dpdGgoJ2h0dHA6Ly8nKSA/ICdodHRwOi8vJyA6IHVyaS5zdGFydHNXaXRoKCdodHRwczovLycpID8gJ2h0dHBzOi8vJyA6ICcnO1xyXG4gICAgdXJpID0gdXJpLnJlcGxhY2UocHJvdG9jb2wsICcnKTtcclxuICAgIHZhciBwYXJ0cyA9IHVyaS5zcGxpdCgnLycpLmZpbHRlcihmdW5jdGlvbiAocykgeyByZXR1cm4gczsgfSk7XHJcbiAgICB2YXIgbWFuaWZlc3RGaWxlID0gdXJpLmVuZHNXaXRoKCcuanNvbicpXHJcbiAgICAgICAgPyBwYXJ0c1twYXJ0cy5sZW5ndGggLSAxXVxyXG4gICAgICAgIDogZGVmYXVsdE1hbmlmZXN0RmlsZW5hbWU7XHJcbiAgICB2YXIgbW9kZWxCYXNlVXJpID0gcHJvdG9jb2wgKyAodXJpLmVuZHNXaXRoKCcuanNvbicpID8gcGFydHMuc2xpY2UoMCwgcGFydHMubGVuZ3RoIC0gMSkgOiBwYXJ0cykuam9pbignLycpO1xyXG4gICAgbW9kZWxCYXNlVXJpID0gdXJpLnN0YXJ0c1dpdGgoJy8nKSA/IFwiL1wiICsgbW9kZWxCYXNlVXJpIDogbW9kZWxCYXNlVXJpO1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBtb2RlbEJhc2VVcmk6IG1vZGVsQmFzZVVyaSxcclxuICAgICAgICBtYW5pZmVzdFVyaTogbW9kZWxCYXNlVXJpID09PSAnLycgPyBcIi9cIiArIG1hbmlmZXN0RmlsZSA6IG1vZGVsQmFzZVVyaSArIFwiL1wiICsgbWFuaWZlc3RGaWxlXHJcbiAgICB9O1xyXG59XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWdldE1vZGVsVXJpcy5qcy5tYXAiLCJpbXBvcnQgeyBfX2F3YWl0ZXIsIF9fZ2VuZXJhdG9yIH0gZnJvbSBcInRzbGliXCI7XHJcbmltcG9ydCAqIGFzIHRmIGZyb20gJ0B0ZW5zb3JmbG93L3RmanMtY29yZSc7XHJcbmltcG9ydCB7IGdldE1vZGVsVXJpcyB9IGZyb20gJy4uL2NvbW1vbi9nZXRNb2RlbFVyaXMnO1xyXG5pbXBvcnQgeyBmZXRjaEpzb24gfSBmcm9tICcuL2ZldGNoSnNvbic7XHJcbmV4cG9ydCBmdW5jdGlvbiBsb2FkV2VpZ2h0TWFwKHVyaSwgZGVmYXVsdE1vZGVsTmFtZSkge1xyXG4gICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBfYSwgbWFuaWZlc3RVcmksIG1vZGVsQmFzZVVyaSwgbWFuaWZlc3Q7XHJcbiAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYikge1xyXG4gICAgICAgICAgICBzd2l0Y2ggKF9iLmxhYmVsKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDA6XHJcbiAgICAgICAgICAgICAgICAgICAgX2EgPSBnZXRNb2RlbFVyaXModXJpLCBkZWZhdWx0TW9kZWxOYW1lKSwgbWFuaWZlc3RVcmkgPSBfYS5tYW5pZmVzdFVyaSwgbW9kZWxCYXNlVXJpID0gX2EubW9kZWxCYXNlVXJpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIGZldGNoSnNvbihtYW5pZmVzdFVyaSldO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAxOlxyXG4gICAgICAgICAgICAgICAgICAgIG1hbmlmZXN0ID0gX2Iuc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCB0Zi5pby5sb2FkV2VpZ2h0cyhtYW5pZmVzdCwgbW9kZWxCYXNlVXJpKV07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH0pO1xyXG59XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWxvYWRXZWlnaHRNYXAuanMubWFwIiwiaW1wb3J0IHsgZ2V0TWVkaWFEaW1lbnNpb25zIH0gZnJvbSAnLi9nZXRNZWRpYURpbWVuc2lvbnMnO1xyXG5leHBvcnQgZnVuY3Rpb24gbWF0Y2hEaW1lbnNpb25zKGlucHV0LCByZWZlcmVuY2UsIHVzZU1lZGlhRGltZW5zaW9ucykge1xyXG4gICAgaWYgKHVzZU1lZGlhRGltZW5zaW9ucyA9PT0gdm9pZCAwKSB7IHVzZU1lZGlhRGltZW5zaW9ucyA9IGZhbHNlOyB9XHJcbiAgICB2YXIgX2EgPSB1c2VNZWRpYURpbWVuc2lvbnNcclxuICAgICAgICA/IGdldE1lZGlhRGltZW5zaW9ucyhyZWZlcmVuY2UpXHJcbiAgICAgICAgOiByZWZlcmVuY2UsIHdpZHRoID0gX2Eud2lkdGgsIGhlaWdodCA9IF9hLmhlaWdodDtcclxuICAgIGlucHV0LndpZHRoID0gd2lkdGg7XHJcbiAgICBpbnB1dC5oZWlnaHQgPSBoZWlnaHQ7XHJcbiAgICByZXR1cm4geyB3aWR0aDogd2lkdGgsIGhlaWdodDogaGVpZ2h0IH07XHJcbn1cclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bWF0Y2hEaW1lbnNpb25zLmpzLm1hcCIsImltcG9ydCB7IF9fYXdhaXRlciwgX19nZW5lcmF0b3IgfSBmcm9tIFwidHNsaWJcIjtcclxuaW1wb3J0ICogYXMgdGYgZnJvbSAnQHRlbnNvcmZsb3cvdGZqcy1jb3JlJztcclxuaW1wb3J0IHsgZ2V0TW9kZWxVcmlzIH0gZnJvbSAnLi9jb21tb24vZ2V0TW9kZWxVcmlzJztcclxuaW1wb3J0IHsgbG9hZFdlaWdodE1hcCB9IGZyb20gJy4vZG9tJztcclxuaW1wb3J0IHsgZW52IH0gZnJvbSAnLi9lbnYnO1xyXG52YXIgTmV1cmFsTmV0d29yayA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIE5ldXJhbE5ldHdvcmsoX25hbWUpIHtcclxuICAgICAgICB0aGlzLl9uYW1lID0gX25hbWU7XHJcbiAgICAgICAgdGhpcy5fcGFyYW1zID0gdW5kZWZpbmVkO1xyXG4gICAgICAgIHRoaXMuX3BhcmFtTWFwcGluZ3MgPSBbXTtcclxuICAgIH1cclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShOZXVyYWxOZXR3b3JrLnByb3RvdHlwZSwgXCJwYXJhbXNcIiwge1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5fcGFyYW1zOyB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShOZXVyYWxOZXR3b3JrLnByb3RvdHlwZSwgXCJwYXJhbU1hcHBpbmdzXCIsIHtcclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMuX3BhcmFtTWFwcGluZ3M7IH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KE5ldXJhbE5ldHdvcmsucHJvdG90eXBlLCBcImlzTG9hZGVkXCIsIHtcclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuICEhdGhpcy5wYXJhbXM7IH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgTmV1cmFsTmV0d29yay5wcm90b3R5cGUuZ2V0UGFyYW1Gcm9tUGF0aCA9IGZ1bmN0aW9uIChwYXJhbVBhdGgpIHtcclxuICAgICAgICB2YXIgX2EgPSB0aGlzLnRyYXZlcnNlUHJvcGVydHlQYXRoKHBhcmFtUGF0aCksIG9iaiA9IF9hLm9iaiwgb2JqUHJvcCA9IF9hLm9ialByb3A7XHJcbiAgICAgICAgcmV0dXJuIG9ialtvYmpQcm9wXTtcclxuICAgIH07XHJcbiAgICBOZXVyYWxOZXR3b3JrLnByb3RvdHlwZS5yZWFzc2lnblBhcmFtRnJvbVBhdGggPSBmdW5jdGlvbiAocGFyYW1QYXRoLCB0ZW5zb3IpIHtcclxuICAgICAgICB2YXIgX2EgPSB0aGlzLnRyYXZlcnNlUHJvcGVydHlQYXRoKHBhcmFtUGF0aCksIG9iaiA9IF9hLm9iaiwgb2JqUHJvcCA9IF9hLm9ialByb3A7XHJcbiAgICAgICAgb2JqW29ialByb3BdLmRpc3Bvc2UoKTtcclxuICAgICAgICBvYmpbb2JqUHJvcF0gPSB0ZW5zb3I7XHJcbiAgICB9O1xyXG4gICAgTmV1cmFsTmV0d29yay5wcm90b3R5cGUuZ2V0UGFyYW1MaXN0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3BhcmFtTWFwcGluZ3MubWFwKGZ1bmN0aW9uIChfYSkge1xyXG4gICAgICAgICAgICB2YXIgcGFyYW1QYXRoID0gX2EucGFyYW1QYXRoO1xyXG4gICAgICAgICAgICByZXR1cm4gKHtcclxuICAgICAgICAgICAgICAgIHBhdGg6IHBhcmFtUGF0aCxcclxuICAgICAgICAgICAgICAgIHRlbnNvcjogX3RoaXMuZ2V0UGFyYW1Gcm9tUGF0aChwYXJhbVBhdGgpXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIE5ldXJhbE5ldHdvcmsucHJvdG90eXBlLmdldFRyYWluYWJsZVBhcmFtcyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5nZXRQYXJhbUxpc3QoKS5maWx0ZXIoZnVuY3Rpb24gKHBhcmFtKSB7IHJldHVybiBwYXJhbS50ZW5zb3IgaW5zdGFuY2VvZiB0Zi5WYXJpYWJsZTsgfSk7XHJcbiAgICB9O1xyXG4gICAgTmV1cmFsTmV0d29yay5wcm90b3R5cGUuZ2V0RnJvemVuUGFyYW1zID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmdldFBhcmFtTGlzdCgpLmZpbHRlcihmdW5jdGlvbiAocGFyYW0pIHsgcmV0dXJuICEocGFyYW0udGVuc29yIGluc3RhbmNlb2YgdGYuVmFyaWFibGUpOyB9KTtcclxuICAgIH07XHJcbiAgICBOZXVyYWxOZXR3b3JrLnByb3RvdHlwZS52YXJpYWJsZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHRoaXMuZ2V0RnJvemVuUGFyYW1zKCkuZm9yRWFjaChmdW5jdGlvbiAoX2EpIHtcclxuICAgICAgICAgICAgdmFyIHBhdGggPSBfYS5wYXRoLCB0ZW5zb3IgPSBfYS50ZW5zb3I7XHJcbiAgICAgICAgICAgIF90aGlzLnJlYXNzaWduUGFyYW1Gcm9tUGF0aChwYXRoLCB0ZW5zb3IudmFyaWFibGUoKSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgTmV1cmFsTmV0d29yay5wcm90b3R5cGUuZnJlZXplID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgdGhpcy5nZXRUcmFpbmFibGVQYXJhbXMoKS5mb3JFYWNoKGZ1bmN0aW9uIChfYSkge1xyXG4gICAgICAgICAgICB2YXIgcGF0aCA9IF9hLnBhdGgsIHZhcmlhYmxlID0gX2EudGVuc29yO1xyXG4gICAgICAgICAgICB2YXIgdGVuc29yID0gdGYudGVuc29yKHZhcmlhYmxlLmRhdGFTeW5jKCkpO1xyXG4gICAgICAgICAgICB2YXJpYWJsZS5kaXNwb3NlKCk7XHJcbiAgICAgICAgICAgIF90aGlzLnJlYXNzaWduUGFyYW1Gcm9tUGF0aChwYXRoLCB0ZW5zb3IpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIE5ldXJhbE5ldHdvcmsucHJvdG90eXBlLmRpc3Bvc2UgPSBmdW5jdGlvbiAodGhyb3dPblJlZGlzcG9zZSkge1xyXG4gICAgICAgIGlmICh0aHJvd09uUmVkaXNwb3NlID09PSB2b2lkIDApIHsgdGhyb3dPblJlZGlzcG9zZSA9IHRydWU7IH1cclxuICAgICAgICB0aGlzLmdldFBhcmFtTGlzdCgpLmZvckVhY2goZnVuY3Rpb24gKHBhcmFtKSB7XHJcbiAgICAgICAgICAgIGlmICh0aHJvd09uUmVkaXNwb3NlICYmIHBhcmFtLnRlbnNvci5pc0Rpc3Bvc2VkKSB7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJwYXJhbSB0ZW5zb3IgaGFzIGFscmVhZHkgYmVlbiBkaXNwb3NlZCBmb3IgcGF0aCBcIiArIHBhcmFtLnBhdGgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHBhcmFtLnRlbnNvci5kaXNwb3NlKCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy5fcGFyYW1zID0gdW5kZWZpbmVkO1xyXG4gICAgfTtcclxuICAgIE5ldXJhbE5ldHdvcmsucHJvdG90eXBlLnNlcmlhbGl6ZVBhcmFtcyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gbmV3IEZsb2F0MzJBcnJheSh0aGlzLmdldFBhcmFtTGlzdCgpXHJcbiAgICAgICAgICAgIC5tYXAoZnVuY3Rpb24gKF9hKSB7XHJcbiAgICAgICAgICAgIHZhciB0ZW5zb3IgPSBfYS50ZW5zb3I7XHJcbiAgICAgICAgICAgIHJldHVybiBBcnJheS5mcm9tKHRlbnNvci5kYXRhU3luYygpKTtcclxuICAgICAgICB9KVxyXG4gICAgICAgICAgICAucmVkdWNlKGZ1bmN0aW9uIChmbGF0LCBhcnIpIHsgcmV0dXJuIGZsYXQuY29uY2F0KGFycik7IH0pKTtcclxuICAgIH07XHJcbiAgICBOZXVyYWxOZXR3b3JrLnByb3RvdHlwZS5sb2FkID0gZnVuY3Rpb24gKHdlaWdodHNPclVybCkge1xyXG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xyXG4gICAgICAgICAgICAgICAgc3dpdGNoIChfYS5sYWJlbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHdlaWdodHNPclVybCBpbnN0YW5jZW9mIEZsb2F0MzJBcnJheSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5leHRyYWN0V2VpZ2h0cyh3ZWlnaHRzT3JVcmwpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi9dO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMubG9hZEZyb21Vcmkod2VpZ2h0c09yVXJsKV07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYS5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgTmV1cmFsTmV0d29yay5wcm90b3R5cGUubG9hZEZyb21VcmkgPSBmdW5jdGlvbiAodXJpKSB7XHJcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgd2VpZ2h0TWFwO1xyXG4gICAgICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XHJcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKF9hLmxhYmVsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodXJpICYmIHR5cGVvZiB1cmkgIT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IodGhpcy5fbmFtZSArIFwiLmxvYWRGcm9tVXJpIC0gZXhwZWN0ZWQgbW9kZWwgdXJpXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIGxvYWRXZWlnaHRNYXAodXJpLCB0aGlzLmdldERlZmF1bHRNb2RlbE5hbWUoKSldO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcclxuICAgICAgICAgICAgICAgICAgICAgICAgd2VpZ2h0TWFwID0gX2Euc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmxvYWRGcm9tV2VpZ2h0TWFwKHdlaWdodE1hcCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgTmV1cmFsTmV0d29yay5wcm90b3R5cGUubG9hZEZyb21EaXNrID0gZnVuY3Rpb24gKGZpbGVQYXRoKSB7XHJcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgcmVhZEZpbGUsIF9hLCBtYW5pZmVzdFVyaSwgbW9kZWxCYXNlVXJpLCBmZXRjaFdlaWdodHNGcm9tRGlzaywgbG9hZFdlaWdodHMsIG1hbmlmZXN0LCBfYiwgX2MsIHdlaWdodE1hcDtcclxuICAgICAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfZCkge1xyXG4gICAgICAgICAgICAgICAgc3dpdGNoIChfZC5sYWJlbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGZpbGVQYXRoICYmIHR5cGVvZiBmaWxlUGF0aCAhPT0gJ3N0cmluZycpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcih0aGlzLl9uYW1lICsgXCIubG9hZEZyb21EaXNrIC0gZXhwZWN0ZWQgbW9kZWwgZmlsZSBwYXRoXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlYWRGaWxlID0gZW52LmdldEVudigpLnJlYWRGaWxlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYSA9IGdldE1vZGVsVXJpcyhmaWxlUGF0aCwgdGhpcy5nZXREZWZhdWx0TW9kZWxOYW1lKCkpLCBtYW5pZmVzdFVyaSA9IF9hLm1hbmlmZXN0VXJpLCBtb2RlbEJhc2VVcmkgPSBfYS5tb2RlbEJhc2VVcmk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZldGNoV2VpZ2h0c0Zyb21EaXNrID0gZnVuY3Rpb24gKGZpbGVQYXRocykgeyByZXR1cm4gUHJvbWlzZS5hbGwoZmlsZVBhdGhzLm1hcChmdW5jdGlvbiAoZmlsZVBhdGgpIHsgcmV0dXJuIHJlYWRGaWxlKGZpbGVQYXRoKS50aGVuKGZ1bmN0aW9uIChidWYpIHsgcmV0dXJuIGJ1Zi5idWZmZXI7IH0pOyB9KSk7IH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxvYWRXZWlnaHRzID0gdGYuaW8ud2VpZ2h0c0xvYWRlckZhY3RvcnkoZmV0Y2hXZWlnaHRzRnJvbURpc2spO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYyA9IChfYiA9IEpTT04pLnBhcnNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCByZWFkRmlsZShtYW5pZmVzdFVyaSldO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWFuaWZlc3QgPSBfYy5hcHBseShfYiwgWyhfZC5zZW50KCkpLnRvU3RyaW5nKCldKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgbG9hZFdlaWdodHMobWFuaWZlc3QsIG1vZGVsQmFzZVVyaSldO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgd2VpZ2h0TWFwID0gX2Quc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmxvYWRGcm9tV2VpZ2h0TWFwKHdlaWdodE1hcCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgTmV1cmFsTmV0d29yay5wcm90b3R5cGUubG9hZEZyb21XZWlnaHRNYXAgPSBmdW5jdGlvbiAod2VpZ2h0TWFwKSB7XHJcbiAgICAgICAgdmFyIF9hID0gdGhpcy5leHRyYWN0UGFyYW1zRnJvbVdlaWd0aE1hcCh3ZWlnaHRNYXApLCBwYXJhbU1hcHBpbmdzID0gX2EucGFyYW1NYXBwaW5ncywgcGFyYW1zID0gX2EucGFyYW1zO1xyXG4gICAgICAgIHRoaXMuX3BhcmFtTWFwcGluZ3MgPSBwYXJhbU1hcHBpbmdzO1xyXG4gICAgICAgIHRoaXMuX3BhcmFtcyA9IHBhcmFtcztcclxuICAgIH07XHJcbiAgICBOZXVyYWxOZXR3b3JrLnByb3RvdHlwZS5leHRyYWN0V2VpZ2h0cyA9IGZ1bmN0aW9uICh3ZWlnaHRzKSB7XHJcbiAgICAgICAgdmFyIF9hID0gdGhpcy5leHRyYWN0UGFyYW1zKHdlaWdodHMpLCBwYXJhbU1hcHBpbmdzID0gX2EucGFyYW1NYXBwaW5ncywgcGFyYW1zID0gX2EucGFyYW1zO1xyXG4gICAgICAgIHRoaXMuX3BhcmFtTWFwcGluZ3MgPSBwYXJhbU1hcHBpbmdzO1xyXG4gICAgICAgIHRoaXMuX3BhcmFtcyA9IHBhcmFtcztcclxuICAgIH07XHJcbiAgICBOZXVyYWxOZXR3b3JrLnByb3RvdHlwZS50cmF2ZXJzZVByb3BlcnR5UGF0aCA9IGZ1bmN0aW9uIChwYXJhbVBhdGgpIHtcclxuICAgICAgICBpZiAoIXRoaXMucGFyYW1zKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcInRyYXZlcnNlUHJvcGVydHlQYXRoIC0gbW9kZWwgaGFzIG5vIGxvYWRlZCBwYXJhbXNcIik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciByZXN1bHQgPSBwYXJhbVBhdGguc3BsaXQoJy8nKS5yZWR1Y2UoZnVuY3Rpb24gKHJlcywgb2JqUHJvcCkge1xyXG4gICAgICAgICAgICBpZiAoIXJlcy5uZXh0T2JqLmhhc093blByb3BlcnR5KG9ialByb3ApKSB7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJ0cmF2ZXJzZVByb3BlcnR5UGF0aCAtIG9iamVjdCBkb2VzIG5vdCBoYXZlIHByb3BlcnR5IFwiICsgb2JqUHJvcCArIFwiLCBmb3IgcGF0aCBcIiArIHBhcmFtUGF0aCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHsgb2JqOiByZXMubmV4dE9iaiwgb2JqUHJvcDogb2JqUHJvcCwgbmV4dE9iajogcmVzLm5leHRPYmpbb2JqUHJvcF0gfTtcclxuICAgICAgICB9LCB7IG5leHRPYmo6IHRoaXMucGFyYW1zIH0pO1xyXG4gICAgICAgIHZhciBvYmogPSByZXN1bHQub2JqLCBvYmpQcm9wID0gcmVzdWx0Lm9ialByb3A7XHJcbiAgICAgICAgaWYgKCFvYmogfHwgIW9ialByb3AgfHwgIShvYmpbb2JqUHJvcF0gaW5zdGFuY2VvZiB0Zi5UZW5zb3IpKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcInRyYXZlcnNlUHJvcGVydHlQYXRoIC0gcGFyYW1ldGVyIGlzIG5vdCBhIHRlbnNvciwgZm9yIHBhdGggXCIgKyBwYXJhbVBhdGgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4geyBvYmo6IG9iaiwgb2JqUHJvcDogb2JqUHJvcCB9O1xyXG4gICAgfTtcclxuICAgIHJldHVybiBOZXVyYWxOZXR3b3JrO1xyXG59KCkpO1xyXG5leHBvcnQgeyBOZXVyYWxOZXR3b3JrIH07XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPU5ldXJhbE5ldHdvcmsuanMubWFwIiwiaW1wb3J0ICogYXMgdGYgZnJvbSAnQHRlbnNvcmZsb3cvdGZqcy1jb3JlJztcclxuZXhwb3J0IGZ1bmN0aW9uIGRlcHRod2lzZVNlcGFyYWJsZUNvbnYoeCwgcGFyYW1zLCBzdHJpZGUpIHtcclxuICAgIHJldHVybiB0Zi50aWR5KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgb3V0ID0gdGYuc2VwYXJhYmxlQ29udjJkKHgsIHBhcmFtcy5kZXB0aHdpc2VfZmlsdGVyLCBwYXJhbXMucG9pbnR3aXNlX2ZpbHRlciwgc3RyaWRlLCAnc2FtZScpO1xyXG4gICAgICAgIG91dCA9IHRmLmFkZChvdXQsIHBhcmFtcy5iaWFzKTtcclxuICAgICAgICByZXR1cm4gb3V0O1xyXG4gICAgfSk7XHJcbn1cclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGVwdGh3aXNlU2VwYXJhYmxlQ29udi5qcy5tYXAiLCJpbXBvcnQgKiBhcyB0ZiBmcm9tICdAdGVuc29yZmxvdy90ZmpzLWNvcmUnO1xyXG5pbXBvcnQgeyBkZXB0aHdpc2VTZXBhcmFibGVDb252IH0gZnJvbSAnLi4vY29tbW9uL2RlcHRod2lzZVNlcGFyYWJsZUNvbnYnO1xyXG5leHBvcnQgZnVuY3Rpb24gZGVuc2VCbG9jazMoeCwgZGVuc2VCbG9ja1BhcmFtcywgaXNGaXJzdExheWVyKSB7XHJcbiAgICBpZiAoaXNGaXJzdExheWVyID09PSB2b2lkIDApIHsgaXNGaXJzdExheWVyID0gZmFsc2U7IH1cclxuICAgIHJldHVybiB0Zi50aWR5KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgb3V0MSA9IHRmLnJlbHUoaXNGaXJzdExheWVyXHJcbiAgICAgICAgICAgID8gdGYuYWRkKHRmLmNvbnYyZCh4LCBkZW5zZUJsb2NrUGFyYW1zLmNvbnYwLmZpbHRlcnMsIFsyLCAyXSwgJ3NhbWUnKSwgZGVuc2VCbG9ja1BhcmFtcy5jb252MC5iaWFzKVxyXG4gICAgICAgICAgICA6IGRlcHRod2lzZVNlcGFyYWJsZUNvbnYoeCwgZGVuc2VCbG9ja1BhcmFtcy5jb252MCwgWzIsIDJdKSk7XHJcbiAgICAgICAgdmFyIG91dDIgPSBkZXB0aHdpc2VTZXBhcmFibGVDb252KG91dDEsIGRlbnNlQmxvY2tQYXJhbXMuY29udjEsIFsxLCAxXSk7XHJcbiAgICAgICAgdmFyIGluMyA9IHRmLnJlbHUodGYuYWRkKG91dDEsIG91dDIpKTtcclxuICAgICAgICB2YXIgb3V0MyA9IGRlcHRod2lzZVNlcGFyYWJsZUNvbnYoaW4zLCBkZW5zZUJsb2NrUGFyYW1zLmNvbnYyLCBbMSwgMV0pO1xyXG4gICAgICAgIHJldHVybiB0Zi5yZWx1KHRmLmFkZChvdXQxLCB0Zi5hZGQob3V0Miwgb3V0MykpKTtcclxuICAgIH0pO1xyXG59XHJcbmV4cG9ydCBmdW5jdGlvbiBkZW5zZUJsb2NrNCh4LCBkZW5zZUJsb2NrUGFyYW1zLCBpc0ZpcnN0TGF5ZXIsIGlzU2NhbGVEb3duKSB7XHJcbiAgICBpZiAoaXNGaXJzdExheWVyID09PSB2b2lkIDApIHsgaXNGaXJzdExheWVyID0gZmFsc2U7IH1cclxuICAgIGlmIChpc1NjYWxlRG93biA9PT0gdm9pZCAwKSB7IGlzU2NhbGVEb3duID0gdHJ1ZTsgfVxyXG4gICAgcmV0dXJuIHRmLnRpZHkoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBvdXQxID0gdGYucmVsdShpc0ZpcnN0TGF5ZXJcclxuICAgICAgICAgICAgPyB0Zi5hZGQodGYuY29udjJkKHgsIGRlbnNlQmxvY2tQYXJhbXMuY29udjAuZmlsdGVycywgaXNTY2FsZURvd24gPyBbMiwgMl0gOiBbMSwgMV0sICdzYW1lJyksIGRlbnNlQmxvY2tQYXJhbXMuY29udjAuYmlhcylcclxuICAgICAgICAgICAgOiBkZXB0aHdpc2VTZXBhcmFibGVDb252KHgsIGRlbnNlQmxvY2tQYXJhbXMuY29udjAsIGlzU2NhbGVEb3duID8gWzIsIDJdIDogWzEsIDFdKSk7XHJcbiAgICAgICAgdmFyIG91dDIgPSBkZXB0aHdpc2VTZXBhcmFibGVDb252KG91dDEsIGRlbnNlQmxvY2tQYXJhbXMuY29udjEsIFsxLCAxXSk7XHJcbiAgICAgICAgdmFyIGluMyA9IHRmLnJlbHUodGYuYWRkKG91dDEsIG91dDIpKTtcclxuICAgICAgICB2YXIgb3V0MyA9IGRlcHRod2lzZVNlcGFyYWJsZUNvbnYoaW4zLCBkZW5zZUJsb2NrUGFyYW1zLmNvbnYyLCBbMSwgMV0pO1xyXG4gICAgICAgIHZhciBpbjQgPSB0Zi5yZWx1KHRmLmFkZChvdXQxLCB0Zi5hZGQob3V0Miwgb3V0MykpKTtcclxuICAgICAgICB2YXIgb3V0NCA9IGRlcHRod2lzZVNlcGFyYWJsZUNvbnYoaW40LCBkZW5zZUJsb2NrUGFyYW1zLmNvbnYzLCBbMSwgMV0pO1xyXG4gICAgICAgIHJldHVybiB0Zi5yZWx1KHRmLmFkZChvdXQxLCB0Zi5hZGQob3V0MiwgdGYuYWRkKG91dDMsIG91dDQpKSkpO1xyXG4gICAgfSk7XHJcbn1cclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGVuc2VCbG9jay5qcy5tYXAiLCJpbXBvcnQgKiBhcyB0ZiBmcm9tICdAdGVuc29yZmxvdy90ZmpzLWNvcmUnO1xyXG5leHBvcnQgZnVuY3Rpb24gY29udkxheWVyKHgsIHBhcmFtcywgcGFkZGluZywgd2l0aFJlbHUpIHtcclxuICAgIGlmIChwYWRkaW5nID09PSB2b2lkIDApIHsgcGFkZGluZyA9ICdzYW1lJzsgfVxyXG4gICAgaWYgKHdpdGhSZWx1ID09PSB2b2lkIDApIHsgd2l0aFJlbHUgPSBmYWxzZTsgfVxyXG4gICAgcmV0dXJuIHRmLnRpZHkoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBvdXQgPSB0Zi5hZGQodGYuY29udjJkKHgsIHBhcmFtcy5maWx0ZXJzLCBbMSwgMV0sIHBhZGRpbmcpLCBwYXJhbXMuYmlhcyk7XHJcbiAgICAgICAgcmV0dXJuIHdpdGhSZWx1ID8gdGYucmVsdShvdXQpIDogb3V0O1xyXG4gICAgfSk7XHJcbn1cclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29udkxheWVyLmpzLm1hcCIsImV4cG9ydCBmdW5jdGlvbiBkaXNwb3NlVW51c2VkV2VpZ2h0VGVuc29ycyh3ZWlnaHRNYXAsIHBhcmFtTWFwcGluZ3MpIHtcclxuICAgIE9iamVjdC5rZXlzKHdlaWdodE1hcCkuZm9yRWFjaChmdW5jdGlvbiAocGF0aCkge1xyXG4gICAgICAgIGlmICghcGFyYW1NYXBwaW5ncy5zb21lKGZ1bmN0aW9uIChwbSkgeyByZXR1cm4gcG0ub3JpZ2luYWxQYXRoID09PSBwYXRoOyB9KSkge1xyXG4gICAgICAgICAgICB3ZWlnaHRNYXBbcGF0aF0uZGlzcG9zZSgpO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG59XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRpc3Bvc2VVbnVzZWRXZWlnaHRUZW5zb3JzLmpzLm1hcCIsImltcG9ydCAqIGFzIHRmIGZyb20gJ0B0ZW5zb3JmbG93L3RmanMtY29yZSc7XHJcbmV4cG9ydCBmdW5jdGlvbiBleHRyYWN0Q29udlBhcmFtc0ZhY3RvcnkoZXh0cmFjdFdlaWdodHMsIHBhcmFtTWFwcGluZ3MpIHtcclxuICAgIHJldHVybiBmdW5jdGlvbiAoY2hhbm5lbHNJbiwgY2hhbm5lbHNPdXQsIGZpbHRlclNpemUsIG1hcHBlZFByZWZpeCkge1xyXG4gICAgICAgIHZhciBmaWx0ZXJzID0gdGYudGVuc29yNGQoZXh0cmFjdFdlaWdodHMoY2hhbm5lbHNJbiAqIGNoYW5uZWxzT3V0ICogZmlsdGVyU2l6ZSAqIGZpbHRlclNpemUpLCBbZmlsdGVyU2l6ZSwgZmlsdGVyU2l6ZSwgY2hhbm5lbHNJbiwgY2hhbm5lbHNPdXRdKTtcclxuICAgICAgICB2YXIgYmlhcyA9IHRmLnRlbnNvcjFkKGV4dHJhY3RXZWlnaHRzKGNoYW5uZWxzT3V0KSk7XHJcbiAgICAgICAgcGFyYW1NYXBwaW5ncy5wdXNoKHsgcGFyYW1QYXRoOiBtYXBwZWRQcmVmaXggKyBcIi9maWx0ZXJzXCIgfSwgeyBwYXJhbVBhdGg6IG1hcHBlZFByZWZpeCArIFwiL2JpYXNcIiB9KTtcclxuICAgICAgICByZXR1cm4geyBmaWx0ZXJzOiBmaWx0ZXJzLCBiaWFzOiBiaWFzIH07XHJcbiAgICB9O1xyXG59XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWV4dHJhY3RDb252UGFyYW1zRmFjdG9yeS5qcy5tYXAiLCJpbXBvcnQgKiBhcyB0ZiBmcm9tICdAdGVuc29yZmxvdy90ZmpzLWNvcmUnO1xyXG5leHBvcnQgZnVuY3Rpb24gZXh0cmFjdEZDUGFyYW1zRmFjdG9yeShleHRyYWN0V2VpZ2h0cywgcGFyYW1NYXBwaW5ncykge1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uIChjaGFubmVsc0luLCBjaGFubmVsc091dCwgbWFwcGVkUHJlZml4KSB7XHJcbiAgICAgICAgdmFyIGZjX3dlaWdodHMgPSB0Zi50ZW5zb3IyZChleHRyYWN0V2VpZ2h0cyhjaGFubmVsc0luICogY2hhbm5lbHNPdXQpLCBbY2hhbm5lbHNJbiwgY2hhbm5lbHNPdXRdKTtcclxuICAgICAgICB2YXIgZmNfYmlhcyA9IHRmLnRlbnNvcjFkKGV4dHJhY3RXZWlnaHRzKGNoYW5uZWxzT3V0KSk7XHJcbiAgICAgICAgcGFyYW1NYXBwaW5ncy5wdXNoKHsgcGFyYW1QYXRoOiBtYXBwZWRQcmVmaXggKyBcIi93ZWlnaHRzXCIgfSwgeyBwYXJhbVBhdGg6IG1hcHBlZFByZWZpeCArIFwiL2JpYXNcIiB9KTtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICB3ZWlnaHRzOiBmY193ZWlnaHRzLFxyXG4gICAgICAgICAgICBiaWFzOiBmY19iaWFzXHJcbiAgICAgICAgfTtcclxuICAgIH07XHJcbn1cclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZXh0cmFjdEZDUGFyYW1zRmFjdG9yeS5qcy5tYXAiLCJ2YXIgU2VwYXJhYmxlQ29udlBhcmFtcyA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIFNlcGFyYWJsZUNvbnZQYXJhbXMoZGVwdGh3aXNlX2ZpbHRlciwgcG9pbnR3aXNlX2ZpbHRlciwgYmlhcykge1xyXG4gICAgICAgIHRoaXMuZGVwdGh3aXNlX2ZpbHRlciA9IGRlcHRod2lzZV9maWx0ZXI7XHJcbiAgICAgICAgdGhpcy5wb2ludHdpc2VfZmlsdGVyID0gcG9pbnR3aXNlX2ZpbHRlcjtcclxuICAgICAgICB0aGlzLmJpYXMgPSBiaWFzO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIFNlcGFyYWJsZUNvbnZQYXJhbXM7XHJcbn0oKSk7XHJcbmV4cG9ydCB7IFNlcGFyYWJsZUNvbnZQYXJhbXMgfTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dHlwZXMuanMubWFwIiwiaW1wb3J0ICogYXMgdGYgZnJvbSAnQHRlbnNvcmZsb3cvdGZqcy1jb3JlJztcclxuaW1wb3J0IHsgU2VwYXJhYmxlQ29udlBhcmFtcyB9IGZyb20gJy4vdHlwZXMnO1xyXG5leHBvcnQgZnVuY3Rpb24gZXh0cmFjdFNlcGFyYWJsZUNvbnZQYXJhbXNGYWN0b3J5KGV4dHJhY3RXZWlnaHRzLCBwYXJhbU1hcHBpbmdzKSB7XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gKGNoYW5uZWxzSW4sIGNoYW5uZWxzT3V0LCBtYXBwZWRQcmVmaXgpIHtcclxuICAgICAgICB2YXIgZGVwdGh3aXNlX2ZpbHRlciA9IHRmLnRlbnNvcjRkKGV4dHJhY3RXZWlnaHRzKDMgKiAzICogY2hhbm5lbHNJbiksIFszLCAzLCBjaGFubmVsc0luLCAxXSk7XHJcbiAgICAgICAgdmFyIHBvaW50d2lzZV9maWx0ZXIgPSB0Zi50ZW5zb3I0ZChleHRyYWN0V2VpZ2h0cyhjaGFubmVsc0luICogY2hhbm5lbHNPdXQpLCBbMSwgMSwgY2hhbm5lbHNJbiwgY2hhbm5lbHNPdXRdKTtcclxuICAgICAgICB2YXIgYmlhcyA9IHRmLnRlbnNvcjFkKGV4dHJhY3RXZWlnaHRzKGNoYW5uZWxzT3V0KSk7XHJcbiAgICAgICAgcGFyYW1NYXBwaW5ncy5wdXNoKHsgcGFyYW1QYXRoOiBtYXBwZWRQcmVmaXggKyBcIi9kZXB0aHdpc2VfZmlsdGVyXCIgfSwgeyBwYXJhbVBhdGg6IG1hcHBlZFByZWZpeCArIFwiL3BvaW50d2lzZV9maWx0ZXJcIiB9LCB7IHBhcmFtUGF0aDogbWFwcGVkUHJlZml4ICsgXCIvYmlhc1wiIH0pO1xyXG4gICAgICAgIHJldHVybiBuZXcgU2VwYXJhYmxlQ29udlBhcmFtcyhkZXB0aHdpc2VfZmlsdGVyLCBwb2ludHdpc2VfZmlsdGVyLCBiaWFzKTtcclxuICAgIH07XHJcbn1cclxuZXhwb3J0IGZ1bmN0aW9uIGxvYWRTZXBhcmFibGVDb252UGFyYW1zRmFjdG9yeShleHRyYWN0V2VpZ2h0RW50cnkpIHtcclxuICAgIHJldHVybiBmdW5jdGlvbiAocHJlZml4KSB7XHJcbiAgICAgICAgdmFyIGRlcHRod2lzZV9maWx0ZXIgPSBleHRyYWN0V2VpZ2h0RW50cnkocHJlZml4ICsgXCIvZGVwdGh3aXNlX2ZpbHRlclwiLCA0KTtcclxuICAgICAgICB2YXIgcG9pbnR3aXNlX2ZpbHRlciA9IGV4dHJhY3RXZWlnaHRFbnRyeShwcmVmaXggKyBcIi9wb2ludHdpc2VfZmlsdGVyXCIsIDQpO1xyXG4gICAgICAgIHZhciBiaWFzID0gZXh0cmFjdFdlaWdodEVudHJ5KHByZWZpeCArIFwiL2JpYXNcIiwgMSk7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBTZXBhcmFibGVDb252UGFyYW1zKGRlcHRod2lzZV9maWx0ZXIsIHBvaW50d2lzZV9maWx0ZXIsIGJpYXMpO1xyXG4gICAgfTtcclxufVxyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1leHRyYWN0U2VwYXJhYmxlQ29udlBhcmFtc0ZhY3RvcnkuanMubWFwIiwiaW1wb3J0IHsgaXNUZW5zb3IgfSBmcm9tICcuLi91dGlscyc7XHJcbmV4cG9ydCBmdW5jdGlvbiBleHRyYWN0V2VpZ2h0RW50cnlGYWN0b3J5KHdlaWdodE1hcCwgcGFyYW1NYXBwaW5ncykge1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uIChvcmlnaW5hbFBhdGgsIHBhcmFtUmFuaywgbWFwcGVkUGF0aCkge1xyXG4gICAgICAgIHZhciB0ZW5zb3IgPSB3ZWlnaHRNYXBbb3JpZ2luYWxQYXRoXTtcclxuICAgICAgICBpZiAoIWlzVGVuc29yKHRlbnNvciwgcGFyYW1SYW5rKSkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJleHBlY3RlZCB3ZWlnaHRNYXBbXCIgKyBvcmlnaW5hbFBhdGggKyBcIl0gdG8gYmUgYSBUZW5zb3JcIiArIHBhcmFtUmFuayArIFwiRCwgaW5zdGVhZCBoYXZlIFwiICsgdGVuc29yKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcGFyYW1NYXBwaW5ncy5wdXNoKHsgb3JpZ2luYWxQYXRoOiBvcmlnaW5hbFBhdGgsIHBhcmFtUGF0aDogbWFwcGVkUGF0aCB8fCBvcmlnaW5hbFBhdGggfSk7XHJcbiAgICAgICAgcmV0dXJuIHRlbnNvcjtcclxuICAgIH07XHJcbn1cclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZXh0cmFjdFdlaWdodEVudHJ5RmFjdG9yeS5qcy5tYXAiLCJleHBvcnQgZnVuY3Rpb24gZXh0cmFjdFdlaWdodHNGYWN0b3J5KHdlaWdodHMpIHtcclxuICAgIHZhciByZW1haW5pbmdXZWlnaHRzID0gd2VpZ2h0cztcclxuICAgIGZ1bmN0aW9uIGV4dHJhY3RXZWlnaHRzKG51bVdlaWdodHMpIHtcclxuICAgICAgICB2YXIgcmV0ID0gcmVtYWluaW5nV2VpZ2h0cy5zbGljZSgwLCBudW1XZWlnaHRzKTtcclxuICAgICAgICByZW1haW5pbmdXZWlnaHRzID0gcmVtYWluaW5nV2VpZ2h0cy5zbGljZShudW1XZWlnaHRzKTtcclxuICAgICAgICByZXR1cm4gcmV0O1xyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gZ2V0UmVtYWluaW5nV2VpZ2h0cygpIHtcclxuICAgICAgICByZXR1cm4gcmVtYWluaW5nV2VpZ2h0cztcclxuICAgIH1cclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgZXh0cmFjdFdlaWdodHM6IGV4dHJhY3RXZWlnaHRzLFxyXG4gICAgICAgIGdldFJlbWFpbmluZ1dlaWdodHM6IGdldFJlbWFpbmluZ1dlaWdodHNcclxuICAgIH07XHJcbn1cclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZXh0cmFjdFdlaWdodHNGYWN0b3J5LmpzLm1hcCIsImltcG9ydCB7IGV4dHJhY3RDb252UGFyYW1zRmFjdG9yeSwgZXh0cmFjdFNlcGFyYWJsZUNvbnZQYXJhbXNGYWN0b3J5LCB9IGZyb20gJy4uL2NvbW1vbic7XHJcbmV4cG9ydCBmdW5jdGlvbiBleHRyYWN0b3JzRmFjdG9yeShleHRyYWN0V2VpZ2h0cywgcGFyYW1NYXBwaW5ncykge1xyXG4gICAgdmFyIGV4dHJhY3RDb252UGFyYW1zID0gZXh0cmFjdENvbnZQYXJhbXNGYWN0b3J5KGV4dHJhY3RXZWlnaHRzLCBwYXJhbU1hcHBpbmdzKTtcclxuICAgIHZhciBleHRyYWN0U2VwYXJhYmxlQ29udlBhcmFtcyA9IGV4dHJhY3RTZXBhcmFibGVDb252UGFyYW1zRmFjdG9yeShleHRyYWN0V2VpZ2h0cywgcGFyYW1NYXBwaW5ncyk7XHJcbiAgICBmdW5jdGlvbiBleHRyYWN0RGVuc2VCbG9jazNQYXJhbXMoY2hhbm5lbHNJbiwgY2hhbm5lbHNPdXQsIG1hcHBlZFByZWZpeCwgaXNGaXJzdExheWVyKSB7XHJcbiAgICAgICAgaWYgKGlzRmlyc3RMYXllciA9PT0gdm9pZCAwKSB7IGlzRmlyc3RMYXllciA9IGZhbHNlOyB9XHJcbiAgICAgICAgdmFyIGNvbnYwID0gaXNGaXJzdExheWVyXHJcbiAgICAgICAgICAgID8gZXh0cmFjdENvbnZQYXJhbXMoY2hhbm5lbHNJbiwgY2hhbm5lbHNPdXQsIDMsIG1hcHBlZFByZWZpeCArIFwiL2NvbnYwXCIpXHJcbiAgICAgICAgICAgIDogZXh0cmFjdFNlcGFyYWJsZUNvbnZQYXJhbXMoY2hhbm5lbHNJbiwgY2hhbm5lbHNPdXQsIG1hcHBlZFByZWZpeCArIFwiL2NvbnYwXCIpO1xyXG4gICAgICAgIHZhciBjb252MSA9IGV4dHJhY3RTZXBhcmFibGVDb252UGFyYW1zKGNoYW5uZWxzT3V0LCBjaGFubmVsc091dCwgbWFwcGVkUHJlZml4ICsgXCIvY29udjFcIik7XHJcbiAgICAgICAgdmFyIGNvbnYyID0gZXh0cmFjdFNlcGFyYWJsZUNvbnZQYXJhbXMoY2hhbm5lbHNPdXQsIGNoYW5uZWxzT3V0LCBtYXBwZWRQcmVmaXggKyBcIi9jb252MlwiKTtcclxuICAgICAgICByZXR1cm4geyBjb252MDogY29udjAsIGNvbnYxOiBjb252MSwgY29udjI6IGNvbnYyIH07XHJcbiAgICB9XHJcbiAgICBmdW5jdGlvbiBleHRyYWN0RGVuc2VCbG9jazRQYXJhbXMoY2hhbm5lbHNJbiwgY2hhbm5lbHNPdXQsIG1hcHBlZFByZWZpeCwgaXNGaXJzdExheWVyKSB7XHJcbiAgICAgICAgaWYgKGlzRmlyc3RMYXllciA9PT0gdm9pZCAwKSB7IGlzRmlyc3RMYXllciA9IGZhbHNlOyB9XHJcbiAgICAgICAgdmFyIF9hID0gZXh0cmFjdERlbnNlQmxvY2szUGFyYW1zKGNoYW5uZWxzSW4sIGNoYW5uZWxzT3V0LCBtYXBwZWRQcmVmaXgsIGlzRmlyc3RMYXllciksIGNvbnYwID0gX2EuY29udjAsIGNvbnYxID0gX2EuY29udjEsIGNvbnYyID0gX2EuY29udjI7XHJcbiAgICAgICAgdmFyIGNvbnYzID0gZXh0cmFjdFNlcGFyYWJsZUNvbnZQYXJhbXMoY2hhbm5lbHNPdXQsIGNoYW5uZWxzT3V0LCBtYXBwZWRQcmVmaXggKyBcIi9jb252M1wiKTtcclxuICAgICAgICByZXR1cm4geyBjb252MDogY29udjAsIGNvbnYxOiBjb252MSwgY29udjI6IGNvbnYyLCBjb252MzogY29udjMgfTtcclxuICAgIH1cclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgZXh0cmFjdERlbnNlQmxvY2szUGFyYW1zOiBleHRyYWN0RGVuc2VCbG9jazNQYXJhbXMsXHJcbiAgICAgICAgZXh0cmFjdERlbnNlQmxvY2s0UGFyYW1zOiBleHRyYWN0RGVuc2VCbG9jazRQYXJhbXNcclxuICAgIH07XHJcbn1cclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZXh0cmFjdG9yc0ZhY3RvcnkuanMubWFwIiwiZXhwb3J0IGZ1bmN0aW9uIGxvYWRDb252UGFyYW1zRmFjdG9yeShleHRyYWN0V2VpZ2h0RW50cnkpIHtcclxuICAgIHJldHVybiBmdW5jdGlvbiAocHJlZml4KSB7XHJcbiAgICAgICAgdmFyIGZpbHRlcnMgPSBleHRyYWN0V2VpZ2h0RW50cnkocHJlZml4ICsgXCIvZmlsdGVyc1wiLCA0KTtcclxuICAgICAgICB2YXIgYmlhcyA9IGV4dHJhY3RXZWlnaHRFbnRyeShwcmVmaXggKyBcIi9iaWFzXCIsIDEpO1xyXG4gICAgICAgIHJldHVybiB7IGZpbHRlcnM6IGZpbHRlcnMsIGJpYXM6IGJpYXMgfTtcclxuICAgIH07XHJcbn1cclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bG9hZENvbnZQYXJhbXNGYWN0b3J5LmpzLm1hcCIsImltcG9ydCB7IGV4dHJhY3RXZWlnaHRFbnRyeUZhY3RvcnksIGxvYWRTZXBhcmFibGVDb252UGFyYW1zRmFjdG9yeSB9IGZyb20gJy4uL2NvbW1vbic7XHJcbmltcG9ydCB7IGxvYWRDb252UGFyYW1zRmFjdG9yeSB9IGZyb20gJy4uL2NvbW1vbi9sb2FkQ29udlBhcmFtc0ZhY3RvcnknO1xyXG5leHBvcnQgZnVuY3Rpb24gbG9hZFBhcmFtc0ZhY3Rvcnkod2VpZ2h0TWFwLCBwYXJhbU1hcHBpbmdzKSB7XHJcbiAgICB2YXIgZXh0cmFjdFdlaWdodEVudHJ5ID0gZXh0cmFjdFdlaWdodEVudHJ5RmFjdG9yeSh3ZWlnaHRNYXAsIHBhcmFtTWFwcGluZ3MpO1xyXG4gICAgdmFyIGV4dHJhY3RDb252UGFyYW1zID0gbG9hZENvbnZQYXJhbXNGYWN0b3J5KGV4dHJhY3RXZWlnaHRFbnRyeSk7XHJcbiAgICB2YXIgZXh0cmFjdFNlcGFyYWJsZUNvbnZQYXJhbXMgPSBsb2FkU2VwYXJhYmxlQ29udlBhcmFtc0ZhY3RvcnkoZXh0cmFjdFdlaWdodEVudHJ5KTtcclxuICAgIGZ1bmN0aW9uIGV4dHJhY3REZW5zZUJsb2NrM1BhcmFtcyhwcmVmaXgsIGlzRmlyc3RMYXllcikge1xyXG4gICAgICAgIGlmIChpc0ZpcnN0TGF5ZXIgPT09IHZvaWQgMCkgeyBpc0ZpcnN0TGF5ZXIgPSBmYWxzZTsgfVxyXG4gICAgICAgIHZhciBjb252MCA9IGlzRmlyc3RMYXllclxyXG4gICAgICAgICAgICA/IGV4dHJhY3RDb252UGFyYW1zKHByZWZpeCArIFwiL2NvbnYwXCIpXHJcbiAgICAgICAgICAgIDogZXh0cmFjdFNlcGFyYWJsZUNvbnZQYXJhbXMocHJlZml4ICsgXCIvY29udjBcIik7XHJcbiAgICAgICAgdmFyIGNvbnYxID0gZXh0cmFjdFNlcGFyYWJsZUNvbnZQYXJhbXMocHJlZml4ICsgXCIvY29udjFcIik7XHJcbiAgICAgICAgdmFyIGNvbnYyID0gZXh0cmFjdFNlcGFyYWJsZUNvbnZQYXJhbXMocHJlZml4ICsgXCIvY29udjJcIik7XHJcbiAgICAgICAgcmV0dXJuIHsgY29udjA6IGNvbnYwLCBjb252MTogY29udjEsIGNvbnYyOiBjb252MiB9O1xyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gZXh0cmFjdERlbnNlQmxvY2s0UGFyYW1zKHByZWZpeCwgaXNGaXJzdExheWVyKSB7XHJcbiAgICAgICAgaWYgKGlzRmlyc3RMYXllciA9PT0gdm9pZCAwKSB7IGlzRmlyc3RMYXllciA9IGZhbHNlOyB9XHJcbiAgICAgICAgdmFyIGNvbnYwID0gaXNGaXJzdExheWVyXHJcbiAgICAgICAgICAgID8gZXh0cmFjdENvbnZQYXJhbXMocHJlZml4ICsgXCIvY29udjBcIilcclxuICAgICAgICAgICAgOiBleHRyYWN0U2VwYXJhYmxlQ29udlBhcmFtcyhwcmVmaXggKyBcIi9jb252MFwiKTtcclxuICAgICAgICB2YXIgY29udjEgPSBleHRyYWN0U2VwYXJhYmxlQ29udlBhcmFtcyhwcmVmaXggKyBcIi9jb252MVwiKTtcclxuICAgICAgICB2YXIgY29udjIgPSBleHRyYWN0U2VwYXJhYmxlQ29udlBhcmFtcyhwcmVmaXggKyBcIi9jb252MlwiKTtcclxuICAgICAgICB2YXIgY29udjMgPSBleHRyYWN0U2VwYXJhYmxlQ29udlBhcmFtcyhwcmVmaXggKyBcIi9jb252M1wiKTtcclxuICAgICAgICByZXR1cm4geyBjb252MDogY29udjAsIGNvbnYxOiBjb252MSwgY29udjI6IGNvbnYyLCBjb252MzogY29udjMgfTtcclxuICAgIH1cclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgZXh0cmFjdERlbnNlQmxvY2szUGFyYW1zOiBleHRyYWN0RGVuc2VCbG9jazNQYXJhbXMsXHJcbiAgICAgICAgZXh0cmFjdERlbnNlQmxvY2s0UGFyYW1zOiBleHRyYWN0RGVuc2VCbG9jazRQYXJhbXNcclxuICAgIH07XHJcbn1cclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bG9hZFBhcmFtc0ZhY3RvcnkuanMubWFwIiwiaW1wb3J0IHsgX19hd2FpdGVyLCBfX2V4dGVuZHMsIF9fZ2VuZXJhdG9yIH0gZnJvbSBcInRzbGliXCI7XHJcbmltcG9ydCAqIGFzIHRmIGZyb20gJ0B0ZW5zb3JmbG93L3RmanMtY29yZSc7XHJcbmltcG9ydCB7IHRvTmV0SW5wdXQgfSBmcm9tICcuLi9kb20nO1xyXG5pbXBvcnQgeyBOZXVyYWxOZXR3b3JrIH0gZnJvbSAnLi4vTmV1cmFsTmV0d29yayc7XHJcbmltcG9ydCB7IG5vcm1hbGl6ZSB9IGZyb20gJy4uL29wcyc7XHJcbmltcG9ydCB7IGRlbnNlQmxvY2s0IH0gZnJvbSAnLi9kZW5zZUJsb2NrJztcclxuaW1wb3J0IHsgZXh0cmFjdFBhcmFtcyB9IGZyb20gJy4vZXh0cmFjdFBhcmFtcyc7XHJcbmltcG9ydCB7IGV4dHJhY3RQYXJhbXNGcm9tV2VpZ3RoTWFwIH0gZnJvbSAnLi9leHRyYWN0UGFyYW1zRnJvbVdlaWd0aE1hcCc7XHJcbnZhciBGYWNlRmVhdHVyZUV4dHJhY3RvciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcclxuICAgIF9fZXh0ZW5kcyhGYWNlRmVhdHVyZUV4dHJhY3RvciwgX3N1cGVyKTtcclxuICAgIGZ1bmN0aW9uIEZhY2VGZWF0dXJlRXh0cmFjdG9yKCkge1xyXG4gICAgICAgIHJldHVybiBfc3VwZXIuY2FsbCh0aGlzLCAnRmFjZUZlYXR1cmVFeHRyYWN0b3InKSB8fCB0aGlzO1xyXG4gICAgfVxyXG4gICAgRmFjZUZlYXR1cmVFeHRyYWN0b3IucHJvdG90eXBlLmZvcndhcmRJbnB1dCA9IGZ1bmN0aW9uIChpbnB1dCkge1xyXG4gICAgICAgIHZhciBwYXJhbXMgPSB0aGlzLnBhcmFtcztcclxuICAgICAgICBpZiAoIXBhcmFtcykge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ZhY2VGZWF0dXJlRXh0cmFjdG9yIC0gbG9hZCBtb2RlbCBiZWZvcmUgaW5mZXJlbmNlJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0Zi50aWR5KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIGJhdGNoVGVuc29yID0gaW5wdXQudG9CYXRjaFRlbnNvcigxMTIsIHRydWUpO1xyXG4gICAgICAgICAgICB2YXIgbWVhblJnYiA9IFsxMjIuNzgyLCAxMTcuMDAxLCAxMDQuMjk4XTtcclxuICAgICAgICAgICAgdmFyIG5vcm1hbGl6ZWQgPSBub3JtYWxpemUoYmF0Y2hUZW5zb3IsIG1lYW5SZ2IpLmRpdih0Zi5zY2FsYXIoMjU1KSk7XHJcbiAgICAgICAgICAgIHZhciBvdXQgPSBkZW5zZUJsb2NrNChub3JtYWxpemVkLCBwYXJhbXMuZGVuc2UwLCB0cnVlKTtcclxuICAgICAgICAgICAgb3V0ID0gZGVuc2VCbG9jazQob3V0LCBwYXJhbXMuZGVuc2UxKTtcclxuICAgICAgICAgICAgb3V0ID0gZGVuc2VCbG9jazQob3V0LCBwYXJhbXMuZGVuc2UyKTtcclxuICAgICAgICAgICAgb3V0ID0gZGVuc2VCbG9jazQob3V0LCBwYXJhbXMuZGVuc2UzKTtcclxuICAgICAgICAgICAgb3V0ID0gdGYuYXZnUG9vbChvdXQsIFs3LCA3XSwgWzIsIDJdLCAndmFsaWQnKTtcclxuICAgICAgICAgICAgcmV0dXJuIG91dDtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBGYWNlRmVhdHVyZUV4dHJhY3Rvci5wcm90b3R5cGUuZm9yd2FyZCA9IGZ1bmN0aW9uIChpbnB1dCkge1xyXG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIF9hO1xyXG4gICAgICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9iKSB7XHJcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKF9iLmxhYmVsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYSA9IHRoaXMuZm9yd2FyZElucHV0O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCB0b05ldElucHV0KGlucHV0KV07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOiByZXR1cm4gWzIgLypyZXR1cm4qLywgX2EuYXBwbHkodGhpcywgW19iLnNlbnQoKV0pXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgRmFjZUZlYXR1cmVFeHRyYWN0b3IucHJvdG90eXBlLmdldERlZmF1bHRNb2RlbE5hbWUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuICdmYWNlX2ZlYXR1cmVfZXh0cmFjdG9yX21vZGVsJztcclxuICAgIH07XHJcbiAgICBGYWNlRmVhdHVyZUV4dHJhY3Rvci5wcm90b3R5cGUuZXh0cmFjdFBhcmFtc0Zyb21XZWlndGhNYXAgPSBmdW5jdGlvbiAod2VpZ2h0TWFwKSB7XHJcbiAgICAgICAgcmV0dXJuIGV4dHJhY3RQYXJhbXNGcm9tV2VpZ3RoTWFwKHdlaWdodE1hcCk7XHJcbiAgICB9O1xyXG4gICAgRmFjZUZlYXR1cmVFeHRyYWN0b3IucHJvdG90eXBlLmV4dHJhY3RQYXJhbXMgPSBmdW5jdGlvbiAod2VpZ2h0cykge1xyXG4gICAgICAgIHJldHVybiBleHRyYWN0UGFyYW1zKHdlaWdodHMpO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBGYWNlRmVhdHVyZUV4dHJhY3RvcjtcclxufShOZXVyYWxOZXR3b3JrKSk7XHJcbmV4cG9ydCB7IEZhY2VGZWF0dXJlRXh0cmFjdG9yIH07XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUZhY2VGZWF0dXJlRXh0cmFjdG9yLmpzLm1hcCIsImltcG9ydCB7IGRpc3Bvc2VVbnVzZWRXZWlnaHRUZW5zb3JzIH0gZnJvbSAnLi4vY29tbW9uJztcclxuaW1wb3J0IHsgbG9hZFBhcmFtc0ZhY3RvcnkgfSBmcm9tICcuL2xvYWRQYXJhbXNGYWN0b3J5JztcclxuZXhwb3J0IGZ1bmN0aW9uIGV4dHJhY3RQYXJhbXNGcm9tV2VpZ3RoTWFwKHdlaWdodE1hcCkge1xyXG4gICAgdmFyIHBhcmFtTWFwcGluZ3MgPSBbXTtcclxuICAgIHZhciBleHRyYWN0RGVuc2VCbG9jazRQYXJhbXMgPSBsb2FkUGFyYW1zRmFjdG9yeSh3ZWlnaHRNYXAsIHBhcmFtTWFwcGluZ3MpLmV4dHJhY3REZW5zZUJsb2NrNFBhcmFtcztcclxuICAgIHZhciBwYXJhbXMgPSB7XHJcbiAgICAgICAgZGVuc2UwOiBleHRyYWN0RGVuc2VCbG9jazRQYXJhbXMoJ2RlbnNlMCcsIHRydWUpLFxyXG4gICAgICAgIGRlbnNlMTogZXh0cmFjdERlbnNlQmxvY2s0UGFyYW1zKCdkZW5zZTEnKSxcclxuICAgICAgICBkZW5zZTI6IGV4dHJhY3REZW5zZUJsb2NrNFBhcmFtcygnZGVuc2UyJyksXHJcbiAgICAgICAgZGVuc2UzOiBleHRyYWN0RGVuc2VCbG9jazRQYXJhbXMoJ2RlbnNlMycpXHJcbiAgICB9O1xyXG4gICAgZGlzcG9zZVVudXNlZFdlaWdodFRlbnNvcnMod2VpZ2h0TWFwLCBwYXJhbU1hcHBpbmdzKTtcclxuICAgIHJldHVybiB7IHBhcmFtczogcGFyYW1zLCBwYXJhbU1hcHBpbmdzOiBwYXJhbU1hcHBpbmdzIH07XHJcbn1cclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZXh0cmFjdFBhcmFtc0Zyb21XZWlndGhNYXAuanMubWFwIiwiaW1wb3J0IHsgZXh0cmFjdFdlaWdodHNGYWN0b3J5IH0gZnJvbSAnLi4vY29tbW9uJztcclxuaW1wb3J0IHsgZXh0cmFjdG9yc0ZhY3RvcnkgfSBmcm9tICcuL2V4dHJhY3RvcnNGYWN0b3J5JztcclxuZXhwb3J0IGZ1bmN0aW9uIGV4dHJhY3RQYXJhbXMod2VpZ2h0cykge1xyXG4gICAgdmFyIHBhcmFtTWFwcGluZ3MgPSBbXTtcclxuICAgIHZhciBfYSA9IGV4dHJhY3RXZWlnaHRzRmFjdG9yeSh3ZWlnaHRzKSwgZXh0cmFjdFdlaWdodHMgPSBfYS5leHRyYWN0V2VpZ2h0cywgZ2V0UmVtYWluaW5nV2VpZ2h0cyA9IF9hLmdldFJlbWFpbmluZ1dlaWdodHM7XHJcbiAgICB2YXIgZXh0cmFjdERlbnNlQmxvY2s0UGFyYW1zID0gZXh0cmFjdG9yc0ZhY3RvcnkoZXh0cmFjdFdlaWdodHMsIHBhcmFtTWFwcGluZ3MpLmV4dHJhY3REZW5zZUJsb2NrNFBhcmFtcztcclxuICAgIHZhciBkZW5zZTAgPSBleHRyYWN0RGVuc2VCbG9jazRQYXJhbXMoMywgMzIsICdkZW5zZTAnLCB0cnVlKTtcclxuICAgIHZhciBkZW5zZTEgPSBleHRyYWN0RGVuc2VCbG9jazRQYXJhbXMoMzIsIDY0LCAnZGVuc2UxJyk7XHJcbiAgICB2YXIgZGVuc2UyID0gZXh0cmFjdERlbnNlQmxvY2s0UGFyYW1zKDY0LCAxMjgsICdkZW5zZTInKTtcclxuICAgIHZhciBkZW5zZTMgPSBleHRyYWN0RGVuc2VCbG9jazRQYXJhbXMoMTI4LCAyNTYsICdkZW5zZTMnKTtcclxuICAgIGlmIChnZXRSZW1haW5pbmdXZWlnaHRzKCkubGVuZ3RoICE9PSAwKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwid2VpZ2h0cyByZW1haW5nIGFmdGVyIGV4dHJhY3Q6IFwiICsgZ2V0UmVtYWluaW5nV2VpZ2h0cygpLmxlbmd0aCk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIHBhcmFtTWFwcGluZ3M6IHBhcmFtTWFwcGluZ3MsXHJcbiAgICAgICAgcGFyYW1zOiB7IGRlbnNlMDogZGVuc2UwLCBkZW5zZTE6IGRlbnNlMSwgZGVuc2UyOiBkZW5zZTIsIGRlbnNlMzogZGVuc2UzIH1cclxuICAgIH07XHJcbn1cclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZXh0cmFjdFBhcmFtcy5qcy5tYXAiLCJpbXBvcnQgKiBhcyB0ZiBmcm9tICdAdGVuc29yZmxvdy90ZmpzLWNvcmUnO1xyXG5leHBvcnQgZnVuY3Rpb24gZnVsbHlDb25uZWN0ZWRMYXllcih4LCBwYXJhbXMpIHtcclxuICAgIHJldHVybiB0Zi50aWR5KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gdGYuYWRkKHRmLm1hdE11bCh4LCBwYXJhbXMud2VpZ2h0cyksIHBhcmFtcy5iaWFzKTtcclxuICAgIH0pO1xyXG59XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWZ1bGx5Q29ubmVjdGVkTGF5ZXIuanMubWFwIiwiZXhwb3J0IGZ1bmN0aW9uIHNlcGVyYXRlV2VpZ2h0TWFwcyh3ZWlnaHRNYXApIHtcclxuICAgIHZhciBmZWF0dXJlRXh0cmFjdG9yTWFwID0ge307XHJcbiAgICB2YXIgY2xhc3NpZmllck1hcCA9IHt9O1xyXG4gICAgT2JqZWN0LmtleXMod2VpZ2h0TWFwKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcclxuICAgICAgICB2YXIgbWFwID0ga2V5LnN0YXJ0c1dpdGgoJ2ZjJykgPyBjbGFzc2lmaWVyTWFwIDogZmVhdHVyZUV4dHJhY3Rvck1hcDtcclxuICAgICAgICBtYXBba2V5XSA9IHdlaWdodE1hcFtrZXldO1xyXG4gICAgfSk7XHJcbiAgICByZXR1cm4geyBmZWF0dXJlRXh0cmFjdG9yTWFwOiBmZWF0dXJlRXh0cmFjdG9yTWFwLCBjbGFzc2lmaWVyTWFwOiBjbGFzc2lmaWVyTWFwIH07XHJcbn1cclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dXRpbC5qcy5tYXAiLCJpbXBvcnQgeyBfX2V4dGVuZHMgfSBmcm9tIFwidHNsaWJcIjtcclxuaW1wb3J0ICogYXMgdGYgZnJvbSAnQHRlbnNvcmZsb3cvdGZqcy1jb3JlJztcclxuaW1wb3J0IHsgZnVsbHlDb25uZWN0ZWRMYXllciB9IGZyb20gJy4uL2NvbW1vbi9mdWxseUNvbm5lY3RlZExheWVyJztcclxuaW1wb3J0IHsgTmV0SW5wdXQgfSBmcm9tICcuLi9kb20nO1xyXG5pbXBvcnQgeyBOZXVyYWxOZXR3b3JrIH0gZnJvbSAnLi4vTmV1cmFsTmV0d29yayc7XHJcbmltcG9ydCB7IGV4dHJhY3RQYXJhbXMgfSBmcm9tICcuL2V4dHJhY3RQYXJhbXMnO1xyXG5pbXBvcnQgeyBleHRyYWN0UGFyYW1zRnJvbVdlaWd0aE1hcCB9IGZyb20gJy4vZXh0cmFjdFBhcmFtc0Zyb21XZWlndGhNYXAnO1xyXG5pbXBvcnQgeyBzZXBlcmF0ZVdlaWdodE1hcHMgfSBmcm9tICcuL3V0aWwnO1xyXG52YXIgRmFjZVByb2Nlc3NvciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcclxuICAgIF9fZXh0ZW5kcyhGYWNlUHJvY2Vzc29yLCBfc3VwZXIpO1xyXG4gICAgZnVuY3Rpb24gRmFjZVByb2Nlc3NvcihfbmFtZSwgZmFjZUZlYXR1cmVFeHRyYWN0b3IpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBfbmFtZSkgfHwgdGhpcztcclxuICAgICAgICBfdGhpcy5fZmFjZUZlYXR1cmVFeHRyYWN0b3IgPSBmYWNlRmVhdHVyZUV4dHJhY3RvcjtcclxuICAgICAgICByZXR1cm4gX3RoaXM7XHJcbiAgICB9XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoRmFjZVByb2Nlc3Nvci5wcm90b3R5cGUsIFwiZmFjZUZlYXR1cmVFeHRyYWN0b3JcIiwge1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fZmFjZUZlYXR1cmVFeHRyYWN0b3I7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBGYWNlUHJvY2Vzc29yLnByb3RvdHlwZS5ydW5OZXQgPSBmdW5jdGlvbiAoaW5wdXQpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHZhciBwYXJhbXMgPSB0aGlzLnBhcmFtcztcclxuICAgICAgICBpZiAoIXBhcmFtcykge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IodGhpcy5fbmFtZSArIFwiIC0gbG9hZCBtb2RlbCBiZWZvcmUgaW5mZXJlbmNlXCIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGYudGlkeShmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciBib3R0bGVuZWNrRmVhdHVyZXMgPSBpbnB1dCBpbnN0YW5jZW9mIE5ldElucHV0XHJcbiAgICAgICAgICAgICAgICA/IF90aGlzLmZhY2VGZWF0dXJlRXh0cmFjdG9yLmZvcndhcmRJbnB1dChpbnB1dClcclxuICAgICAgICAgICAgICAgIDogaW5wdXQ7XHJcbiAgICAgICAgICAgIHJldHVybiBmdWxseUNvbm5lY3RlZExheWVyKGJvdHRsZW5lY2tGZWF0dXJlcy5hczJEKGJvdHRsZW5lY2tGZWF0dXJlcy5zaGFwZVswXSwgLTEpLCBwYXJhbXMuZmMpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIEZhY2VQcm9jZXNzb3IucHJvdG90eXBlLmRpc3Bvc2UgPSBmdW5jdGlvbiAodGhyb3dPblJlZGlzcG9zZSkge1xyXG4gICAgICAgIGlmICh0aHJvd09uUmVkaXNwb3NlID09PSB2b2lkIDApIHsgdGhyb3dPblJlZGlzcG9zZSA9IHRydWU7IH1cclxuICAgICAgICB0aGlzLmZhY2VGZWF0dXJlRXh0cmFjdG9yLmRpc3Bvc2UodGhyb3dPblJlZGlzcG9zZSk7XHJcbiAgICAgICAgX3N1cGVyLnByb3RvdHlwZS5kaXNwb3NlLmNhbGwodGhpcywgdGhyb3dPblJlZGlzcG9zZSk7XHJcbiAgICB9O1xyXG4gICAgRmFjZVByb2Nlc3Nvci5wcm90b3R5cGUubG9hZENsYXNzaWZpZXJQYXJhbXMgPSBmdW5jdGlvbiAod2VpZ2h0cykge1xyXG4gICAgICAgIHZhciBfYSA9IHRoaXMuZXh0cmFjdENsYXNzaWZpZXJQYXJhbXMod2VpZ2h0cyksIHBhcmFtcyA9IF9hLnBhcmFtcywgcGFyYW1NYXBwaW5ncyA9IF9hLnBhcmFtTWFwcGluZ3M7XHJcbiAgICAgICAgdGhpcy5fcGFyYW1zID0gcGFyYW1zO1xyXG4gICAgICAgIHRoaXMuX3BhcmFtTWFwcGluZ3MgPSBwYXJhbU1hcHBpbmdzO1xyXG4gICAgfTtcclxuICAgIEZhY2VQcm9jZXNzb3IucHJvdG90eXBlLmV4dHJhY3RDbGFzc2lmaWVyUGFyYW1zID0gZnVuY3Rpb24gKHdlaWdodHMpIHtcclxuICAgICAgICByZXR1cm4gZXh0cmFjdFBhcmFtcyh3ZWlnaHRzLCB0aGlzLmdldENsYXNzaWZpZXJDaGFubmVsc0luKCksIHRoaXMuZ2V0Q2xhc3NpZmllckNoYW5uZWxzT3V0KCkpO1xyXG4gICAgfTtcclxuICAgIEZhY2VQcm9jZXNzb3IucHJvdG90eXBlLmV4dHJhY3RQYXJhbXNGcm9tV2VpZ3RoTWFwID0gZnVuY3Rpb24gKHdlaWdodE1hcCkge1xyXG4gICAgICAgIHZhciBfYSA9IHNlcGVyYXRlV2VpZ2h0TWFwcyh3ZWlnaHRNYXApLCBmZWF0dXJlRXh0cmFjdG9yTWFwID0gX2EuZmVhdHVyZUV4dHJhY3Rvck1hcCwgY2xhc3NpZmllck1hcCA9IF9hLmNsYXNzaWZpZXJNYXA7XHJcbiAgICAgICAgdGhpcy5mYWNlRmVhdHVyZUV4dHJhY3Rvci5sb2FkRnJvbVdlaWdodE1hcChmZWF0dXJlRXh0cmFjdG9yTWFwKTtcclxuICAgICAgICByZXR1cm4gZXh0cmFjdFBhcmFtc0Zyb21XZWlndGhNYXAoY2xhc3NpZmllck1hcCk7XHJcbiAgICB9O1xyXG4gICAgRmFjZVByb2Nlc3Nvci5wcm90b3R5cGUuZXh0cmFjdFBhcmFtcyA9IGZ1bmN0aW9uICh3ZWlnaHRzKSB7XHJcbiAgICAgICAgdmFyIGNJbiA9IHRoaXMuZ2V0Q2xhc3NpZmllckNoYW5uZWxzSW4oKTtcclxuICAgICAgICB2YXIgY091dCA9IHRoaXMuZ2V0Q2xhc3NpZmllckNoYW5uZWxzT3V0KCk7XHJcbiAgICAgICAgdmFyIGNsYXNzaWZpZXJXZWlnaHRTaXplID0gKGNPdXQgKiBjSW4pICsgY091dDtcclxuICAgICAgICB2YXIgZmVhdHVyZUV4dHJhY3RvcldlaWdodHMgPSB3ZWlnaHRzLnNsaWNlKDAsIHdlaWdodHMubGVuZ3RoIC0gY2xhc3NpZmllcldlaWdodFNpemUpO1xyXG4gICAgICAgIHZhciBjbGFzc2lmaWVyV2VpZ2h0cyA9IHdlaWdodHMuc2xpY2Uod2VpZ2h0cy5sZW5ndGggLSBjbGFzc2lmaWVyV2VpZ2h0U2l6ZSk7XHJcbiAgICAgICAgdGhpcy5mYWNlRmVhdHVyZUV4dHJhY3Rvci5leHRyYWN0V2VpZ2h0cyhmZWF0dXJlRXh0cmFjdG9yV2VpZ2h0cyk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZXh0cmFjdENsYXNzaWZpZXJQYXJhbXMoY2xhc3NpZmllcldlaWdodHMpO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBGYWNlUHJvY2Vzc29yO1xyXG59KE5ldXJhbE5ldHdvcmspKTtcclxuZXhwb3J0IHsgRmFjZVByb2Nlc3NvciB9O1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1GYWNlUHJvY2Vzc29yLmpzLm1hcCIsImltcG9ydCB7IGV4dHJhY3RGQ1BhcmFtc0ZhY3RvcnksIGV4dHJhY3RXZWlnaHRzRmFjdG9yeSB9IGZyb20gJy4uL2NvbW1vbic7XHJcbmV4cG9ydCBmdW5jdGlvbiBleHRyYWN0UGFyYW1zKHdlaWdodHMsIGNoYW5uZWxzSW4sIGNoYW5uZWxzT3V0KSB7XHJcbiAgICB2YXIgcGFyYW1NYXBwaW5ncyA9IFtdO1xyXG4gICAgdmFyIF9hID0gZXh0cmFjdFdlaWdodHNGYWN0b3J5KHdlaWdodHMpLCBleHRyYWN0V2VpZ2h0cyA9IF9hLmV4dHJhY3RXZWlnaHRzLCBnZXRSZW1haW5pbmdXZWlnaHRzID0gX2EuZ2V0UmVtYWluaW5nV2VpZ2h0cztcclxuICAgIHZhciBleHRyYWN0RkNQYXJhbXMgPSBleHRyYWN0RkNQYXJhbXNGYWN0b3J5KGV4dHJhY3RXZWlnaHRzLCBwYXJhbU1hcHBpbmdzKTtcclxuICAgIHZhciBmYyA9IGV4dHJhY3RGQ1BhcmFtcyhjaGFubmVsc0luLCBjaGFubmVsc091dCwgJ2ZjJyk7XHJcbiAgICBpZiAoZ2V0UmVtYWluaW5nV2VpZ2h0cygpLmxlbmd0aCAhPT0gMCkge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIndlaWdodHMgcmVtYWluZyBhZnRlciBleHRyYWN0OiBcIiArIGdldFJlbWFpbmluZ1dlaWdodHMoKS5sZW5ndGgpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBwYXJhbU1hcHBpbmdzOiBwYXJhbU1hcHBpbmdzLFxyXG4gICAgICAgIHBhcmFtczogeyBmYzogZmMgfVxyXG4gICAgfTtcclxufVxyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1leHRyYWN0UGFyYW1zLmpzLm1hcCIsImltcG9ydCB7IGRpc3Bvc2VVbnVzZWRXZWlnaHRUZW5zb3JzLCBleHRyYWN0V2VpZ2h0RW50cnlGYWN0b3J5IH0gZnJvbSAnLi4vY29tbW9uJztcclxuZXhwb3J0IGZ1bmN0aW9uIGV4dHJhY3RQYXJhbXNGcm9tV2VpZ3RoTWFwKHdlaWdodE1hcCkge1xyXG4gICAgdmFyIHBhcmFtTWFwcGluZ3MgPSBbXTtcclxuICAgIHZhciBleHRyYWN0V2VpZ2h0RW50cnkgPSBleHRyYWN0V2VpZ2h0RW50cnlGYWN0b3J5KHdlaWdodE1hcCwgcGFyYW1NYXBwaW5ncyk7XHJcbiAgICBmdW5jdGlvbiBleHRyYWN0RmNQYXJhbXMocHJlZml4KSB7XHJcbiAgICAgICAgdmFyIHdlaWdodHMgPSBleHRyYWN0V2VpZ2h0RW50cnkocHJlZml4ICsgXCIvd2VpZ2h0c1wiLCAyKTtcclxuICAgICAgICB2YXIgYmlhcyA9IGV4dHJhY3RXZWlnaHRFbnRyeShwcmVmaXggKyBcIi9iaWFzXCIsIDEpO1xyXG4gICAgICAgIHJldHVybiB7IHdlaWdodHM6IHdlaWdodHMsIGJpYXM6IGJpYXMgfTtcclxuICAgIH1cclxuICAgIHZhciBwYXJhbXMgPSB7XHJcbiAgICAgICAgZmM6IGV4dHJhY3RGY1BhcmFtcygnZmMnKVxyXG4gICAgfTtcclxuICAgIGRpc3Bvc2VVbnVzZWRXZWlnaHRUZW5zb3JzKHdlaWdodE1hcCwgcGFyYW1NYXBwaW5ncyk7XHJcbiAgICByZXR1cm4geyBwYXJhbXM6IHBhcmFtcywgcGFyYW1NYXBwaW5nczogcGFyYW1NYXBwaW5ncyB9O1xyXG59XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWV4dHJhY3RQYXJhbXNGcm9tV2VpZ3RoTWFwLmpzLm1hcCIsImV4cG9ydCB2YXIgRkFDRV9FWFBSRVNTSU9OX0xBQkVMUyA9IFsnbmV1dHJhbCcsICdoYXBweScsICdzYWQnLCAnYW5ncnknLCAnZmVhcmZ1bCcsICdkaXNndXN0ZWQnLCAnc3VycHJpc2VkJ107XHJcbnZhciBGYWNlRXhwcmVzc2lvbnMgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBGYWNlRXhwcmVzc2lvbnMocHJvYmFiaWxpdGllcykge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgaWYgKHByb2JhYmlsaXRpZXMubGVuZ3RoICE9PSA3KSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkZhY2VFeHByZXNzaW9ucy5jb25zdHJ1Y3RvciAtIGV4cGVjdGVkIHByb2JhYmlsaXRpZXMubGVuZ3RoIHRvIGJlIDcsIGhhdmU6IFwiICsgcHJvYmFiaWxpdGllcy5sZW5ndGgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBGQUNFX0VYUFJFU1NJT05fTEFCRUxTLmZvckVhY2goZnVuY3Rpb24gKGV4cHJlc3Npb24sIGlkeCkge1xyXG4gICAgICAgICAgICBfdGhpc1tleHByZXNzaW9uXSA9IHByb2JhYmlsaXRpZXNbaWR4XTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIEZhY2VFeHByZXNzaW9ucy5wcm90b3R5cGUuYXNTb3J0ZWRBcnJheSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHJldHVybiBGQUNFX0VYUFJFU1NJT05fTEFCRUxTXHJcbiAgICAgICAgICAgIC5tYXAoZnVuY3Rpb24gKGV4cHJlc3Npb24pIHsgcmV0dXJuICh7IGV4cHJlc3Npb246IGV4cHJlc3Npb24sIHByb2JhYmlsaXR5OiBfdGhpc1tleHByZXNzaW9uXSB9KTsgfSlcclxuICAgICAgICAgICAgLnNvcnQoZnVuY3Rpb24gKGUwLCBlMSkgeyByZXR1cm4gZTEucHJvYmFiaWxpdHkgLSBlMC5wcm9iYWJpbGl0eTsgfSk7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIEZhY2VFeHByZXNzaW9ucztcclxufSgpKTtcclxuZXhwb3J0IHsgRmFjZUV4cHJlc3Npb25zIH07XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUZhY2VFeHByZXNzaW9ucy5qcy5tYXAiLCJpbXBvcnQgeyBfX2F3YWl0ZXIsIF9fZXh0ZW5kcywgX19nZW5lcmF0b3IgfSBmcm9tIFwidHNsaWJcIjtcclxuaW1wb3J0ICogYXMgdGYgZnJvbSAnQHRlbnNvcmZsb3cvdGZqcy1jb3JlJztcclxuaW1wb3J0IHsgdG9OZXRJbnB1dCB9IGZyb20gJy4uL2RvbSc7XHJcbmltcG9ydCB7IEZhY2VGZWF0dXJlRXh0cmFjdG9yIH0gZnJvbSAnLi4vZmFjZUZlYXR1cmVFeHRyYWN0b3IvRmFjZUZlYXR1cmVFeHRyYWN0b3InO1xyXG5pbXBvcnQgeyBGYWNlUHJvY2Vzc29yIH0gZnJvbSAnLi4vZmFjZVByb2Nlc3Nvci9GYWNlUHJvY2Vzc29yJztcclxuaW1wb3J0IHsgRmFjZUV4cHJlc3Npb25zIH0gZnJvbSAnLi9GYWNlRXhwcmVzc2lvbnMnO1xyXG52YXIgRmFjZUV4cHJlc3Npb25OZXQgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XHJcbiAgICBfX2V4dGVuZHMoRmFjZUV4cHJlc3Npb25OZXQsIF9zdXBlcik7XHJcbiAgICBmdW5jdGlvbiBGYWNlRXhwcmVzc2lvbk5ldChmYWNlRmVhdHVyZUV4dHJhY3Rvcikge1xyXG4gICAgICAgIGlmIChmYWNlRmVhdHVyZUV4dHJhY3RvciA9PT0gdm9pZCAwKSB7IGZhY2VGZWF0dXJlRXh0cmFjdG9yID0gbmV3IEZhY2VGZWF0dXJlRXh0cmFjdG9yKCk7IH1cclxuICAgICAgICByZXR1cm4gX3N1cGVyLmNhbGwodGhpcywgJ0ZhY2VFeHByZXNzaW9uTmV0JywgZmFjZUZlYXR1cmVFeHRyYWN0b3IpIHx8IHRoaXM7XHJcbiAgICB9XHJcbiAgICBGYWNlRXhwcmVzc2lvbk5ldC5wcm90b3R5cGUuZm9yd2FyZElucHV0ID0gZnVuY3Rpb24gKGlucHV0KSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICByZXR1cm4gdGYudGlkeShmdW5jdGlvbiAoKSB7IHJldHVybiB0Zi5zb2Z0bWF4KF90aGlzLnJ1bk5ldChpbnB1dCkpOyB9KTtcclxuICAgIH07XHJcbiAgICBGYWNlRXhwcmVzc2lvbk5ldC5wcm90b3R5cGUuZm9yd2FyZCA9IGZ1bmN0aW9uIChpbnB1dCkge1xyXG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIF9hO1xyXG4gICAgICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9iKSB7XHJcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKF9iLmxhYmVsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYSA9IHRoaXMuZm9yd2FyZElucHV0O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCB0b05ldElucHV0KGlucHV0KV07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOiByZXR1cm4gWzIgLypyZXR1cm4qLywgX2EuYXBwbHkodGhpcywgW19iLnNlbnQoKV0pXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgRmFjZUV4cHJlc3Npb25OZXQucHJvdG90eXBlLnByZWRpY3RFeHByZXNzaW9ucyA9IGZ1bmN0aW9uIChpbnB1dCkge1xyXG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIG5ldElucHV0LCBvdXQsIHByb2JhYmlsaXRlc0J5QmF0Y2gsIHByZWRpY3Rpb25zQnlCYXRjaDtcclxuICAgICAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xyXG4gICAgICAgICAgICAgICAgc3dpdGNoIChfYS5sYWJlbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDogcmV0dXJuIFs0IC8qeWllbGQqLywgdG9OZXRJbnB1dChpbnB1dCldO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmV0SW5wdXQgPSBfYS5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMuZm9yd2FyZElucHV0KG5ldElucHV0KV07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAyOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBvdXQgPSBfYS5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIFByb21pc2UuYWxsKHRmLnVuc3RhY2sob3V0KS5tYXAoZnVuY3Rpb24gKHQpIHsgcmV0dXJuIF9fYXdhaXRlcihfdGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZGF0YTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoX2EubGFiZWwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMDogcmV0dXJuIFs0IC8qeWllbGQqLywgdC5kYXRhKCldO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEgPSBfYS5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdC5kaXNwb3NlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIGRhdGFdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTsgfSkpXTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDM6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHByb2JhYmlsaXRlc0J5QmF0Y2ggPSBfYS5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG91dC5kaXNwb3NlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHByZWRpY3Rpb25zQnlCYXRjaCA9IHByb2JhYmlsaXRlc0J5QmF0Y2hcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5tYXAoZnVuY3Rpb24gKHByb2JhYmlsaXRlcykgeyByZXR1cm4gbmV3IEZhY2VFeHByZXNzaW9ucyhwcm9iYWJpbGl0ZXMpOyB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIG5ldElucHV0LmlzQmF0Y2hJbnB1dFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gcHJlZGljdGlvbnNCeUJhdGNoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBwcmVkaWN0aW9uc0J5QmF0Y2hbMF1dO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBGYWNlRXhwcmVzc2lvbk5ldC5wcm90b3R5cGUuZ2V0RGVmYXVsdE1vZGVsTmFtZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gJ2ZhY2VfZXhwcmVzc2lvbl9tb2RlbCc7XHJcbiAgICB9O1xyXG4gICAgRmFjZUV4cHJlc3Npb25OZXQucHJvdG90eXBlLmdldENsYXNzaWZpZXJDaGFubmVsc0luID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiAyNTY7XHJcbiAgICB9O1xyXG4gICAgRmFjZUV4cHJlc3Npb25OZXQucHJvdG90eXBlLmdldENsYXNzaWZpZXJDaGFubmVsc091dCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gNztcclxuICAgIH07XHJcbiAgICByZXR1cm4gRmFjZUV4cHJlc3Npb25OZXQ7XHJcbn0oRmFjZVByb2Nlc3NvcikpO1xyXG5leHBvcnQgeyBGYWNlRXhwcmVzc2lvbk5ldCB9O1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1GYWNlRXhwcmVzc2lvbk5ldC5qcy5tYXAiLCJpbXBvcnQgeyBGYWNlRXhwcmVzc2lvbnMgfSBmcm9tICcuLi9mYWNlRXhwcmVzc2lvbk5ldC9GYWNlRXhwcmVzc2lvbnMnO1xyXG5leHBvcnQgZnVuY3Rpb24gaXNXaXRoRmFjZUV4cHJlc3Npb25zKG9iaikge1xyXG4gICAgcmV0dXJuIG9ialsnZXhwcmVzc2lvbnMnXSBpbnN0YW5jZW9mIEZhY2VFeHByZXNzaW9ucztcclxufVxyXG5leHBvcnQgZnVuY3Rpb24gZXh0ZW5kV2l0aEZhY2VFeHByZXNzaW9ucyhzb3VyY2VPYmosIGV4cHJlc3Npb25zKSB7XHJcbiAgICB2YXIgZXh0ZW5zaW9uID0geyBleHByZXNzaW9uczogZXhwcmVzc2lvbnMgfTtcclxuICAgIHJldHVybiBPYmplY3QuYXNzaWduKHt9LCBzb3VyY2VPYmosIGV4dGVuc2lvbik7XHJcbn1cclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9V2l0aEZhY2VFeHByZXNzaW9ucy5qcy5tYXAiLCJpbXBvcnQgeyBQb2ludCB9IGZyb20gJy4uL2NsYXNzZXMnO1xyXG5pbXBvcnQgeyBGYWNlRXhwcmVzc2lvbnMgfSBmcm9tICcuLi9mYWNlRXhwcmVzc2lvbk5ldCc7XHJcbmltcG9ydCB7IGlzV2l0aEZhY2VEZXRlY3Rpb24gfSBmcm9tICcuLi9mYWN0b3JpZXMvV2l0aEZhY2VEZXRlY3Rpb24nO1xyXG5pbXBvcnQgeyBpc1dpdGhGYWNlRXhwcmVzc2lvbnMgfSBmcm9tICcuLi9mYWN0b3JpZXMvV2l0aEZhY2VFeHByZXNzaW9ucyc7XHJcbmltcG9ydCB7IHJvdW5kIH0gZnJvbSAnLi4vdXRpbHMnO1xyXG5pbXBvcnQgeyBEcmF3VGV4dEZpZWxkIH0gZnJvbSAnLi9EcmF3VGV4dEZpZWxkJztcclxuZXhwb3J0IGZ1bmN0aW9uIGRyYXdGYWNlRXhwcmVzc2lvbnMoY2FudmFzQXJnLCBmYWNlRXhwcmVzc2lvbnMsIG1pbkNvbmZpZGVuY2UsIHRleHRGaWVsZEFuY2hvcikge1xyXG4gICAgaWYgKG1pbkNvbmZpZGVuY2UgPT09IHZvaWQgMCkgeyBtaW5Db25maWRlbmNlID0gMC4xOyB9XHJcbiAgICB2YXIgZmFjZUV4cHJlc3Npb25zQXJyYXkgPSBBcnJheS5pc0FycmF5KGZhY2VFeHByZXNzaW9ucykgPyBmYWNlRXhwcmVzc2lvbnMgOiBbZmFjZUV4cHJlc3Npb25zXTtcclxuICAgIGZhY2VFeHByZXNzaW9uc0FycmF5LmZvckVhY2goZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICB2YXIgZXhwciA9IGUgaW5zdGFuY2VvZiBGYWNlRXhwcmVzc2lvbnNcclxuICAgICAgICAgICAgPyBlXHJcbiAgICAgICAgICAgIDogKGlzV2l0aEZhY2VFeHByZXNzaW9ucyhlKSA/IGUuZXhwcmVzc2lvbnMgOiB1bmRlZmluZWQpO1xyXG4gICAgICAgIGlmICghZXhwcikge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2RyYXdGYWNlRXhwcmVzc2lvbnMgLSBleHBlY3RlZCBmYWNlRXhwcmVzc2lvbnMgdG8gYmUgRmFjZUV4cHJlc3Npb25zIHwgV2l0aEZhY2VFeHByZXNzaW9uczx7fT4gb3IgYXJyYXkgdGhlcmVvZicpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgc29ydGVkID0gZXhwci5hc1NvcnRlZEFycmF5KCk7XHJcbiAgICAgICAgdmFyIHJlc3VsdHNUb0Rpc3BsYXkgPSBzb3J0ZWQuZmlsdGVyKGZ1bmN0aW9uIChleHByKSB7IHJldHVybiBleHByLnByb2JhYmlsaXR5ID4gbWluQ29uZmlkZW5jZTsgfSk7XHJcbiAgICAgICAgdmFyIGFuY2hvciA9IGlzV2l0aEZhY2VEZXRlY3Rpb24oZSlcclxuICAgICAgICAgICAgPyBlLmRldGVjdGlvbi5ib3guYm90dG9tTGVmdFxyXG4gICAgICAgICAgICA6ICh0ZXh0RmllbGRBbmNob3IgfHwgbmV3IFBvaW50KDAsIDApKTtcclxuICAgICAgICB2YXIgZHJhd1RleHRGaWVsZCA9IG5ldyBEcmF3VGV4dEZpZWxkKHJlc3VsdHNUb0Rpc3BsYXkubWFwKGZ1bmN0aW9uIChleHByKSB7IHJldHVybiBleHByLmV4cHJlc3Npb24gKyBcIiAoXCIgKyByb3VuZChleHByLnByb2JhYmlsaXR5KSArIFwiKVwiOyB9KSwgYW5jaG9yKTtcclxuICAgICAgICBkcmF3VGV4dEZpZWxkLmRyYXcoY2FudmFzQXJnKTtcclxuICAgIH0pO1xyXG59XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRyYXdGYWNlRXhwcmVzc2lvbnMuanMubWFwIiwiaW1wb3J0IHsgRmFjZURldGVjdGlvbiB9IGZyb20gJy4uL2NsYXNzZXMvRmFjZURldGVjdGlvbic7XHJcbmltcG9ydCB7IEZhY2VMYW5kbWFya3MgfSBmcm9tICcuLi9jbGFzc2VzL0ZhY2VMYW5kbWFya3MnO1xyXG5pbXBvcnQgeyBpc1dpdGhGYWNlRGV0ZWN0aW9uIH0gZnJvbSAnLi9XaXRoRmFjZURldGVjdGlvbic7XHJcbmV4cG9ydCBmdW5jdGlvbiBpc1dpdGhGYWNlTGFuZG1hcmtzKG9iaikge1xyXG4gICAgcmV0dXJuIGlzV2l0aEZhY2VEZXRlY3Rpb24ob2JqKVxyXG4gICAgICAgICYmIG9ialsnbGFuZG1hcmtzJ10gaW5zdGFuY2VvZiBGYWNlTGFuZG1hcmtzXHJcbiAgICAgICAgJiYgb2JqWyd1bnNoaWZ0ZWRMYW5kbWFya3MnXSBpbnN0YW5jZW9mIEZhY2VMYW5kbWFya3NcclxuICAgICAgICAmJiBvYmpbJ2FsaWduZWRSZWN0J10gaW5zdGFuY2VvZiBGYWNlRGV0ZWN0aW9uO1xyXG59XHJcbmV4cG9ydCBmdW5jdGlvbiBleHRlbmRXaXRoRmFjZUxhbmRtYXJrcyhzb3VyY2VPYmosIHVuc2hpZnRlZExhbmRtYXJrcykge1xyXG4gICAgdmFyIHNoaWZ0ID0gc291cmNlT2JqLmRldGVjdGlvbi5ib3g7XHJcbiAgICB2YXIgbGFuZG1hcmtzID0gdW5zaGlmdGVkTGFuZG1hcmtzLnNoaWZ0Qnkoc2hpZnQueCwgc2hpZnQueSk7XHJcbiAgICB2YXIgcmVjdCA9IGxhbmRtYXJrcy5hbGlnbigpO1xyXG4gICAgdmFyIGltYWdlRGltcyA9IHNvdXJjZU9iai5kZXRlY3Rpb24uaW1hZ2VEaW1zO1xyXG4gICAgdmFyIGFsaWduZWRSZWN0ID0gbmV3IEZhY2VEZXRlY3Rpb24oc291cmNlT2JqLmRldGVjdGlvbi5zY29yZSwgcmVjdC5yZXNjYWxlKGltYWdlRGltcy5yZXZlcnNlKCkpLCBpbWFnZURpbXMpO1xyXG4gICAgdmFyIGV4dGVuc2lvbiA9IHtcclxuICAgICAgICBsYW5kbWFya3M6IGxhbmRtYXJrcyxcclxuICAgICAgICB1bnNoaWZ0ZWRMYW5kbWFya3M6IHVuc2hpZnRlZExhbmRtYXJrcyxcclxuICAgICAgICBhbGlnbmVkUmVjdDogYWxpZ25lZFJlY3RcclxuICAgIH07XHJcbiAgICByZXR1cm4gT2JqZWN0LmFzc2lnbih7fSwgc291cmNlT2JqLCBleHRlbnNpb24pO1xyXG59XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVdpdGhGYWNlTGFuZG1hcmtzLmpzLm1hcCIsImltcG9ydCB7IEZhY2VMYW5kbWFya3MgfSBmcm9tICcuLi9jbGFzc2VzL0ZhY2VMYW5kbWFya3MnO1xyXG5pbXBvcnQgeyBGYWNlTGFuZG1hcmtzNjggfSBmcm9tICcuLi9jbGFzc2VzL0ZhY2VMYW5kbWFya3M2OCc7XHJcbmltcG9ydCB7IGdldENvbnRleHQyZE9yVGhyb3cgfSBmcm9tICcuLi9kb20vZ2V0Q29udGV4dDJkT3JUaHJvdyc7XHJcbmltcG9ydCB7IGlzV2l0aEZhY2VMYW5kbWFya3MgfSBmcm9tICcuLi9mYWN0b3JpZXMvV2l0aEZhY2VMYW5kbWFya3MnO1xyXG5pbXBvcnQgeyBkcmF3Q29udG91ciB9IGZyb20gJy4vZHJhd0NvbnRvdXInO1xyXG52YXIgRHJhd0ZhY2VMYW5kbWFya3NPcHRpb25zID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gRHJhd0ZhY2VMYW5kbWFya3NPcHRpb25zKG9wdGlvbnMpIHtcclxuICAgICAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7IG9wdGlvbnMgPSB7fTsgfVxyXG4gICAgICAgIHZhciBfYSA9IG9wdGlvbnMuZHJhd0xpbmVzLCBkcmF3TGluZXMgPSBfYSA9PT0gdm9pZCAwID8gdHJ1ZSA6IF9hLCBfYiA9IG9wdGlvbnMuZHJhd1BvaW50cywgZHJhd1BvaW50cyA9IF9iID09PSB2b2lkIDAgPyB0cnVlIDogX2IsIGxpbmVXaWR0aCA9IG9wdGlvbnMubGluZVdpZHRoLCBsaW5lQ29sb3IgPSBvcHRpb25zLmxpbmVDb2xvciwgcG9pbnRTaXplID0gb3B0aW9ucy5wb2ludFNpemUsIHBvaW50Q29sb3IgPSBvcHRpb25zLnBvaW50Q29sb3I7XHJcbiAgICAgICAgdGhpcy5kcmF3TGluZXMgPSBkcmF3TGluZXM7XHJcbiAgICAgICAgdGhpcy5kcmF3UG9pbnRzID0gZHJhd1BvaW50cztcclxuICAgICAgICB0aGlzLmxpbmVXaWR0aCA9IGxpbmVXaWR0aCB8fCAxO1xyXG4gICAgICAgIHRoaXMucG9pbnRTaXplID0gcG9pbnRTaXplIHx8IDI7XHJcbiAgICAgICAgdGhpcy5saW5lQ29sb3IgPSBsaW5lQ29sb3IgfHwgJ3JnYmEoMCwgMjU1LCAyNTUsIDEpJztcclxuICAgICAgICB0aGlzLnBvaW50Q29sb3IgPSBwb2ludENvbG9yIHx8ICdyZ2JhKDI1NSwgMCwgMjU1LCAxKSc7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gRHJhd0ZhY2VMYW5kbWFya3NPcHRpb25zO1xyXG59KCkpO1xyXG5leHBvcnQgeyBEcmF3RmFjZUxhbmRtYXJrc09wdGlvbnMgfTtcclxudmFyIERyYXdGYWNlTGFuZG1hcmtzID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gRHJhd0ZhY2VMYW5kbWFya3MoZmFjZUxhbmRtYXJrcywgb3B0aW9ucykge1xyXG4gICAgICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHsgb3B0aW9ucyA9IHt9OyB9XHJcbiAgICAgICAgdGhpcy5mYWNlTGFuZG1hcmtzID0gZmFjZUxhbmRtYXJrcztcclxuICAgICAgICB0aGlzLm9wdGlvbnMgPSBuZXcgRHJhd0ZhY2VMYW5kbWFya3NPcHRpb25zKG9wdGlvbnMpO1xyXG4gICAgfVxyXG4gICAgRHJhd0ZhY2VMYW5kbWFya3MucHJvdG90eXBlLmRyYXcgPSBmdW5jdGlvbiAoY2FudmFzQXJnKSB7XHJcbiAgICAgICAgdmFyIGN0eCA9IGdldENvbnRleHQyZE9yVGhyb3coY2FudmFzQXJnKTtcclxuICAgICAgICB2YXIgX2EgPSB0aGlzLm9wdGlvbnMsIGRyYXdMaW5lcyA9IF9hLmRyYXdMaW5lcywgZHJhd1BvaW50cyA9IF9hLmRyYXdQb2ludHMsIGxpbmVXaWR0aCA9IF9hLmxpbmVXaWR0aCwgbGluZUNvbG9yID0gX2EubGluZUNvbG9yLCBwb2ludFNpemUgPSBfYS5wb2ludFNpemUsIHBvaW50Q29sb3IgPSBfYS5wb2ludENvbG9yO1xyXG4gICAgICAgIGlmIChkcmF3TGluZXMgJiYgdGhpcy5mYWNlTGFuZG1hcmtzIGluc3RhbmNlb2YgRmFjZUxhbmRtYXJrczY4KSB7XHJcbiAgICAgICAgICAgIGN0eC5zdHJva2VTdHlsZSA9IGxpbmVDb2xvcjtcclxuICAgICAgICAgICAgY3R4LmxpbmVXaWR0aCA9IGxpbmVXaWR0aDtcclxuICAgICAgICAgICAgZHJhd0NvbnRvdXIoY3R4LCB0aGlzLmZhY2VMYW5kbWFya3MuZ2V0SmF3T3V0bGluZSgpKTtcclxuICAgICAgICAgICAgZHJhd0NvbnRvdXIoY3R4LCB0aGlzLmZhY2VMYW5kbWFya3MuZ2V0TGVmdEV5ZUJyb3coKSk7XHJcbiAgICAgICAgICAgIGRyYXdDb250b3VyKGN0eCwgdGhpcy5mYWNlTGFuZG1hcmtzLmdldFJpZ2h0RXllQnJvdygpKTtcclxuICAgICAgICAgICAgZHJhd0NvbnRvdXIoY3R4LCB0aGlzLmZhY2VMYW5kbWFya3MuZ2V0Tm9zZSgpKTtcclxuICAgICAgICAgICAgZHJhd0NvbnRvdXIoY3R4LCB0aGlzLmZhY2VMYW5kbWFya3MuZ2V0TGVmdEV5ZSgpLCB0cnVlKTtcclxuICAgICAgICAgICAgZHJhd0NvbnRvdXIoY3R4LCB0aGlzLmZhY2VMYW5kbWFya3MuZ2V0UmlnaHRFeWUoKSwgdHJ1ZSk7XHJcbiAgICAgICAgICAgIGRyYXdDb250b3VyKGN0eCwgdGhpcy5mYWNlTGFuZG1hcmtzLmdldE1vdXRoKCksIHRydWUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoZHJhd1BvaW50cykge1xyXG4gICAgICAgICAgICBjdHguc3Ryb2tlU3R5bGUgPSBwb2ludENvbG9yO1xyXG4gICAgICAgICAgICBjdHguZmlsbFN0eWxlID0gcG9pbnRDb2xvcjtcclxuICAgICAgICAgICAgdmFyIGRyYXdQb2ludCA9IGZ1bmN0aW9uIChwdCkge1xyXG4gICAgICAgICAgICAgICAgY3R4LmJlZ2luUGF0aCgpO1xyXG4gICAgICAgICAgICAgICAgY3R4LmFyYyhwdC54LCBwdC55LCBwb2ludFNpemUsIDAsIDIgKiBNYXRoLlBJKTtcclxuICAgICAgICAgICAgICAgIGN0eC5maWxsKCk7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIHRoaXMuZmFjZUxhbmRtYXJrcy5wb3NpdGlvbnMuZm9yRWFjaChkcmF3UG9pbnQpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICByZXR1cm4gRHJhd0ZhY2VMYW5kbWFya3M7XHJcbn0oKSk7XHJcbmV4cG9ydCB7IERyYXdGYWNlTGFuZG1hcmtzIH07XHJcbmV4cG9ydCBmdW5jdGlvbiBkcmF3RmFjZUxhbmRtYXJrcyhjYW52YXNBcmcsIGZhY2VMYW5kbWFya3MpIHtcclxuICAgIHZhciBmYWNlTGFuZG1hcmtzQXJyYXkgPSBBcnJheS5pc0FycmF5KGZhY2VMYW5kbWFya3MpID8gZmFjZUxhbmRtYXJrcyA6IFtmYWNlTGFuZG1hcmtzXTtcclxuICAgIGZhY2VMYW5kbWFya3NBcnJheS5mb3JFYWNoKGZ1bmN0aW9uIChmKSB7XHJcbiAgICAgICAgdmFyIGxhbmRtYXJrcyA9IGYgaW5zdGFuY2VvZiBGYWNlTGFuZG1hcmtzXHJcbiAgICAgICAgICAgID8gZlxyXG4gICAgICAgICAgICA6IChpc1dpdGhGYWNlTGFuZG1hcmtzKGYpID8gZi5sYW5kbWFya3MgOiB1bmRlZmluZWQpO1xyXG4gICAgICAgIGlmICghbGFuZG1hcmtzKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignZHJhd0ZhY2VMYW5kbWFya3MgLSBleHBlY3RlZCBmYWNlRXhwcmVzc2lvbnMgdG8gYmUgRmFjZUxhbmRtYXJrcyB8IFdpdGhGYWNlTGFuZG1hcmtzPFdpdGhGYWNlRGV0ZWN0aW9uPHt9Pj4gb3IgYXJyYXkgdGhlcmVvZicpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBuZXcgRHJhd0ZhY2VMYW5kbWFya3MobGFuZG1hcmtzKS5kcmF3KGNhbnZhc0FyZyk7XHJcbiAgICB9KTtcclxufVxyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1EcmF3RmFjZUxhbmRtYXJrcy5qcy5tYXAiLCJpbXBvcnQgeyBfX2F3YWl0ZXIsIF9fZXh0ZW5kcywgX19nZW5lcmF0b3IgfSBmcm9tIFwidHNsaWJcIjtcclxuaW1wb3J0ICogYXMgdGYgZnJvbSAnQHRlbnNvcmZsb3cvdGZqcy1jb3JlJztcclxuaW1wb3J0IHsgZGVwdGh3aXNlU2VwYXJhYmxlQ29udiB9IGZyb20gJy4uL2NvbW1vbic7XHJcbmltcG9ydCB7IHRvTmV0SW5wdXQgfSBmcm9tICcuLi9kb20nO1xyXG5pbXBvcnQgeyBOZXVyYWxOZXR3b3JrIH0gZnJvbSAnLi4vTmV1cmFsTmV0d29yayc7XHJcbmltcG9ydCB7IG5vcm1hbGl6ZSB9IGZyb20gJy4uL29wcyc7XHJcbmltcG9ydCB7IHJhbmdlIH0gZnJvbSAnLi4vdXRpbHMnO1xyXG5pbXBvcnQgeyBleHRyYWN0UGFyYW1zIH0gZnJvbSAnLi9leHRyYWN0UGFyYW1zJztcclxuaW1wb3J0IHsgZXh0cmFjdFBhcmFtc0Zyb21XZWlndGhNYXAgfSBmcm9tICcuL2V4dHJhY3RQYXJhbXNGcm9tV2VpZ3RoTWFwJztcclxuZnVuY3Rpb24gY29udih4LCBwYXJhbXMsIHN0cmlkZSkge1xyXG4gICAgcmV0dXJuIHRmLmFkZCh0Zi5jb252MmQoeCwgcGFyYW1zLmZpbHRlcnMsIHN0cmlkZSwgJ3NhbWUnKSwgcGFyYW1zLmJpYXMpO1xyXG59XHJcbmZ1bmN0aW9uIHJlZHVjdGlvbkJsb2NrKHgsIHBhcmFtcywgaXNBY3RpdmF0ZUlucHV0KSB7XHJcbiAgICBpZiAoaXNBY3RpdmF0ZUlucHV0ID09PSB2b2lkIDApIHsgaXNBY3RpdmF0ZUlucHV0ID0gdHJ1ZTsgfVxyXG4gICAgdmFyIG91dCA9IGlzQWN0aXZhdGVJbnB1dCA/IHRmLnJlbHUoeCkgOiB4O1xyXG4gICAgb3V0ID0gZGVwdGh3aXNlU2VwYXJhYmxlQ29udihvdXQsIHBhcmFtcy5zZXBhcmFibGVfY29udjAsIFsxLCAxXSk7XHJcbiAgICBvdXQgPSBkZXB0aHdpc2VTZXBhcmFibGVDb252KHRmLnJlbHUob3V0KSwgcGFyYW1zLnNlcGFyYWJsZV9jb252MSwgWzEsIDFdKTtcclxuICAgIG91dCA9IHRmLm1heFBvb2wob3V0LCBbMywgM10sIFsyLCAyXSwgJ3NhbWUnKTtcclxuICAgIG91dCA9IHRmLmFkZChvdXQsIGNvbnYoeCwgcGFyYW1zLmV4cGFuc2lvbl9jb252LCBbMiwgMl0pKTtcclxuICAgIHJldHVybiBvdXQ7XHJcbn1cclxuZnVuY3Rpb24gbWFpbkJsb2NrKHgsIHBhcmFtcykge1xyXG4gICAgdmFyIG91dCA9IGRlcHRod2lzZVNlcGFyYWJsZUNvbnYodGYucmVsdSh4KSwgcGFyYW1zLnNlcGFyYWJsZV9jb252MCwgWzEsIDFdKTtcclxuICAgIG91dCA9IGRlcHRod2lzZVNlcGFyYWJsZUNvbnYodGYucmVsdShvdXQpLCBwYXJhbXMuc2VwYXJhYmxlX2NvbnYxLCBbMSwgMV0pO1xyXG4gICAgb3V0ID0gZGVwdGh3aXNlU2VwYXJhYmxlQ29udih0Zi5yZWx1KG91dCksIHBhcmFtcy5zZXBhcmFibGVfY29udjIsIFsxLCAxXSk7XHJcbiAgICBvdXQgPSB0Zi5hZGQob3V0LCB4KTtcclxuICAgIHJldHVybiBvdXQ7XHJcbn1cclxudmFyIFRpbnlYY2VwdGlvbiA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcclxuICAgIF9fZXh0ZW5kcyhUaW55WGNlcHRpb24sIF9zdXBlcik7XHJcbiAgICBmdW5jdGlvbiBUaW55WGNlcHRpb24obnVtTWFpbkJsb2Nrcykge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsICdUaW55WGNlcHRpb24nKSB8fCB0aGlzO1xyXG4gICAgICAgIF90aGlzLl9udW1NYWluQmxvY2tzID0gbnVtTWFpbkJsb2NrcztcclxuICAgICAgICByZXR1cm4gX3RoaXM7XHJcbiAgICB9XHJcbiAgICBUaW55WGNlcHRpb24ucHJvdG90eXBlLmZvcndhcmRJbnB1dCA9IGZ1bmN0aW9uIChpbnB1dCkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgdmFyIHBhcmFtcyA9IHRoaXMucGFyYW1zO1xyXG4gICAgICAgIGlmICghcGFyYW1zKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignVGlueVhjZXB0aW9uIC0gbG9hZCBtb2RlbCBiZWZvcmUgaW5mZXJlbmNlJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0Zi50aWR5KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIGJhdGNoVGVuc29yID0gaW5wdXQudG9CYXRjaFRlbnNvcigxMTIsIHRydWUpO1xyXG4gICAgICAgICAgICB2YXIgbWVhblJnYiA9IFsxMjIuNzgyLCAxMTcuMDAxLCAxMDQuMjk4XTtcclxuICAgICAgICAgICAgdmFyIG5vcm1hbGl6ZWQgPSBub3JtYWxpemUoYmF0Y2hUZW5zb3IsIG1lYW5SZ2IpLmRpdih0Zi5zY2FsYXIoMjU2KSk7XHJcbiAgICAgICAgICAgIHZhciBvdXQgPSB0Zi5yZWx1KGNvbnYobm9ybWFsaXplZCwgcGFyYW1zLmVudHJ5X2Zsb3cuY29udl9pbiwgWzIsIDJdKSk7XHJcbiAgICAgICAgICAgIG91dCA9IHJlZHVjdGlvbkJsb2NrKG91dCwgcGFyYW1zLmVudHJ5X2Zsb3cucmVkdWN0aW9uX2Jsb2NrXzAsIGZhbHNlKTtcclxuICAgICAgICAgICAgb3V0ID0gcmVkdWN0aW9uQmxvY2sob3V0LCBwYXJhbXMuZW50cnlfZmxvdy5yZWR1Y3Rpb25fYmxvY2tfMSk7XHJcbiAgICAgICAgICAgIHJhbmdlKF90aGlzLl9udW1NYWluQmxvY2tzLCAwLCAxKS5mb3JFYWNoKGZ1bmN0aW9uIChpZHgpIHtcclxuICAgICAgICAgICAgICAgIG91dCA9IG1haW5CbG9jayhvdXQsIHBhcmFtcy5taWRkbGVfZmxvd1tcIm1haW5fYmxvY2tfXCIgKyBpZHhdKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIG91dCA9IHJlZHVjdGlvbkJsb2NrKG91dCwgcGFyYW1zLmV4aXRfZmxvdy5yZWR1Y3Rpb25fYmxvY2spO1xyXG4gICAgICAgICAgICBvdXQgPSB0Zi5yZWx1KGRlcHRod2lzZVNlcGFyYWJsZUNvbnYob3V0LCBwYXJhbXMuZXhpdF9mbG93LnNlcGFyYWJsZV9jb252LCBbMSwgMV0pKTtcclxuICAgICAgICAgICAgcmV0dXJuIG91dDtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBUaW55WGNlcHRpb24ucHJvdG90eXBlLmZvcndhcmQgPSBmdW5jdGlvbiAoaW5wdXQpIHtcclxuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciBfYTtcclxuICAgICAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYikge1xyXG4gICAgICAgICAgICAgICAgc3dpdGNoIChfYi5sYWJlbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2EgPSB0aGlzLmZvcndhcmRJbnB1dDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgdG9OZXRJbnB1dChpbnB1dCldO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTogcmV0dXJuIFsyIC8qcmV0dXJuKi8sIF9hLmFwcGx5KHRoaXMsIFtfYi5zZW50KCldKV07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIFRpbnlYY2VwdGlvbi5wcm90b3R5cGUuZ2V0RGVmYXVsdE1vZGVsTmFtZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gJ3RpbnlfeGNlcHRpb25fbW9kZWwnO1xyXG4gICAgfTtcclxuICAgIFRpbnlYY2VwdGlvbi5wcm90b3R5cGUuZXh0cmFjdFBhcmFtc0Zyb21XZWlndGhNYXAgPSBmdW5jdGlvbiAod2VpZ2h0TWFwKSB7XHJcbiAgICAgICAgcmV0dXJuIGV4dHJhY3RQYXJhbXNGcm9tV2VpZ3RoTWFwKHdlaWdodE1hcCwgdGhpcy5fbnVtTWFpbkJsb2Nrcyk7XHJcbiAgICB9O1xyXG4gICAgVGlueVhjZXB0aW9uLnByb3RvdHlwZS5leHRyYWN0UGFyYW1zID0gZnVuY3Rpb24gKHdlaWdodHMpIHtcclxuICAgICAgICByZXR1cm4gZXh0cmFjdFBhcmFtcyh3ZWlnaHRzLCB0aGlzLl9udW1NYWluQmxvY2tzKTtcclxuICAgIH07XHJcbiAgICByZXR1cm4gVGlueVhjZXB0aW9uO1xyXG59KE5ldXJhbE5ldHdvcmspKTtcclxuZXhwb3J0IHsgVGlueVhjZXB0aW9uIH07XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVRpbnlYY2VwdGlvbi5qcy5tYXAiLCJleHBvcnQgdmFyIEdlbmRlcjtcclxuKGZ1bmN0aW9uIChHZW5kZXIpIHtcclxuICAgIEdlbmRlcltcIkZFTUFMRVwiXSA9IFwiZmVtYWxlXCI7XHJcbiAgICBHZW5kZXJbXCJNQUxFXCJdID0gXCJtYWxlXCI7XHJcbn0pKEdlbmRlciB8fCAoR2VuZGVyID0ge30pKTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dHlwZXMuanMubWFwIiwiaW1wb3J0IHsgZGlzcG9zZVVudXNlZFdlaWdodFRlbnNvcnMsIGV4dHJhY3RXZWlnaHRFbnRyeUZhY3RvcnksIGxvYWRTZXBhcmFibGVDb252UGFyYW1zRmFjdG9yeSwgfSBmcm9tICcuLi9jb21tb24nO1xyXG5pbXBvcnQgeyBsb2FkQ29udlBhcmFtc0ZhY3RvcnkgfSBmcm9tICcuLi9jb21tb24vbG9hZENvbnZQYXJhbXNGYWN0b3J5JztcclxuaW1wb3J0IHsgcmFuZ2UgfSBmcm9tICcuLi91dGlscyc7XHJcbmZ1bmN0aW9uIGxvYWRQYXJhbXNGYWN0b3J5KHdlaWdodE1hcCwgcGFyYW1NYXBwaW5ncykge1xyXG4gICAgdmFyIGV4dHJhY3RXZWlnaHRFbnRyeSA9IGV4dHJhY3RXZWlnaHRFbnRyeUZhY3Rvcnkod2VpZ2h0TWFwLCBwYXJhbU1hcHBpbmdzKTtcclxuICAgIHZhciBleHRyYWN0Q29udlBhcmFtcyA9IGxvYWRDb252UGFyYW1zRmFjdG9yeShleHRyYWN0V2VpZ2h0RW50cnkpO1xyXG4gICAgdmFyIGV4dHJhY3RTZXBhcmFibGVDb252UGFyYW1zID0gbG9hZFNlcGFyYWJsZUNvbnZQYXJhbXNGYWN0b3J5KGV4dHJhY3RXZWlnaHRFbnRyeSk7XHJcbiAgICBmdW5jdGlvbiBleHRyYWN0UmVkdWN0aW9uQmxvY2tQYXJhbXMobWFwcGVkUHJlZml4KSB7XHJcbiAgICAgICAgdmFyIHNlcGFyYWJsZV9jb252MCA9IGV4dHJhY3RTZXBhcmFibGVDb252UGFyYW1zKG1hcHBlZFByZWZpeCArIFwiL3NlcGFyYWJsZV9jb252MFwiKTtcclxuICAgICAgICB2YXIgc2VwYXJhYmxlX2NvbnYxID0gZXh0cmFjdFNlcGFyYWJsZUNvbnZQYXJhbXMobWFwcGVkUHJlZml4ICsgXCIvc2VwYXJhYmxlX2NvbnYxXCIpO1xyXG4gICAgICAgIHZhciBleHBhbnNpb25fY29udiA9IGV4dHJhY3RDb252UGFyYW1zKG1hcHBlZFByZWZpeCArIFwiL2V4cGFuc2lvbl9jb252XCIpO1xyXG4gICAgICAgIHJldHVybiB7IHNlcGFyYWJsZV9jb252MDogc2VwYXJhYmxlX2NvbnYwLCBzZXBhcmFibGVfY29udjE6IHNlcGFyYWJsZV9jb252MSwgZXhwYW5zaW9uX2NvbnY6IGV4cGFuc2lvbl9jb252IH07XHJcbiAgICB9XHJcbiAgICBmdW5jdGlvbiBleHRyYWN0TWFpbkJsb2NrUGFyYW1zKG1hcHBlZFByZWZpeCkge1xyXG4gICAgICAgIHZhciBzZXBhcmFibGVfY29udjAgPSBleHRyYWN0U2VwYXJhYmxlQ29udlBhcmFtcyhtYXBwZWRQcmVmaXggKyBcIi9zZXBhcmFibGVfY29udjBcIik7XHJcbiAgICAgICAgdmFyIHNlcGFyYWJsZV9jb252MSA9IGV4dHJhY3RTZXBhcmFibGVDb252UGFyYW1zKG1hcHBlZFByZWZpeCArIFwiL3NlcGFyYWJsZV9jb252MVwiKTtcclxuICAgICAgICB2YXIgc2VwYXJhYmxlX2NvbnYyID0gZXh0cmFjdFNlcGFyYWJsZUNvbnZQYXJhbXMobWFwcGVkUHJlZml4ICsgXCIvc2VwYXJhYmxlX2NvbnYyXCIpO1xyXG4gICAgICAgIHJldHVybiB7IHNlcGFyYWJsZV9jb252MDogc2VwYXJhYmxlX2NvbnYwLCBzZXBhcmFibGVfY29udjE6IHNlcGFyYWJsZV9jb252MSwgc2VwYXJhYmxlX2NvbnYyOiBzZXBhcmFibGVfY29udjIgfTtcclxuICAgIH1cclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgZXh0cmFjdENvbnZQYXJhbXM6IGV4dHJhY3RDb252UGFyYW1zLFxyXG4gICAgICAgIGV4dHJhY3RTZXBhcmFibGVDb252UGFyYW1zOiBleHRyYWN0U2VwYXJhYmxlQ29udlBhcmFtcyxcclxuICAgICAgICBleHRyYWN0UmVkdWN0aW9uQmxvY2tQYXJhbXM6IGV4dHJhY3RSZWR1Y3Rpb25CbG9ja1BhcmFtcyxcclxuICAgICAgICBleHRyYWN0TWFpbkJsb2NrUGFyYW1zOiBleHRyYWN0TWFpbkJsb2NrUGFyYW1zXHJcbiAgICB9O1xyXG59XHJcbmV4cG9ydCBmdW5jdGlvbiBleHRyYWN0UGFyYW1zRnJvbVdlaWd0aE1hcCh3ZWlnaHRNYXAsIG51bU1haW5CbG9ja3MpIHtcclxuICAgIHZhciBwYXJhbU1hcHBpbmdzID0gW107XHJcbiAgICB2YXIgX2EgPSBsb2FkUGFyYW1zRmFjdG9yeSh3ZWlnaHRNYXAsIHBhcmFtTWFwcGluZ3MpLCBleHRyYWN0Q29udlBhcmFtcyA9IF9hLmV4dHJhY3RDb252UGFyYW1zLCBleHRyYWN0U2VwYXJhYmxlQ29udlBhcmFtcyA9IF9hLmV4dHJhY3RTZXBhcmFibGVDb252UGFyYW1zLCBleHRyYWN0UmVkdWN0aW9uQmxvY2tQYXJhbXMgPSBfYS5leHRyYWN0UmVkdWN0aW9uQmxvY2tQYXJhbXMsIGV4dHJhY3RNYWluQmxvY2tQYXJhbXMgPSBfYS5leHRyYWN0TWFpbkJsb2NrUGFyYW1zO1xyXG4gICAgdmFyIGVudHJ5X2Zsb3dfY29udl9pbiA9IGV4dHJhY3RDb252UGFyYW1zKCdlbnRyeV9mbG93L2NvbnZfaW4nKTtcclxuICAgIHZhciBlbnRyeV9mbG93X3JlZHVjdGlvbl9ibG9ja18wID0gZXh0cmFjdFJlZHVjdGlvbkJsb2NrUGFyYW1zKCdlbnRyeV9mbG93L3JlZHVjdGlvbl9ibG9ja18wJyk7XHJcbiAgICB2YXIgZW50cnlfZmxvd19yZWR1Y3Rpb25fYmxvY2tfMSA9IGV4dHJhY3RSZWR1Y3Rpb25CbG9ja1BhcmFtcygnZW50cnlfZmxvdy9yZWR1Y3Rpb25fYmxvY2tfMScpO1xyXG4gICAgdmFyIGVudHJ5X2Zsb3cgPSB7XHJcbiAgICAgICAgY29udl9pbjogZW50cnlfZmxvd19jb252X2luLFxyXG4gICAgICAgIHJlZHVjdGlvbl9ibG9ja18wOiBlbnRyeV9mbG93X3JlZHVjdGlvbl9ibG9ja18wLFxyXG4gICAgICAgIHJlZHVjdGlvbl9ibG9ja18xOiBlbnRyeV9mbG93X3JlZHVjdGlvbl9ibG9ja18xXHJcbiAgICB9O1xyXG4gICAgdmFyIG1pZGRsZV9mbG93ID0ge307XHJcbiAgICByYW5nZShudW1NYWluQmxvY2tzLCAwLCAxKS5mb3JFYWNoKGZ1bmN0aW9uIChpZHgpIHtcclxuICAgICAgICBtaWRkbGVfZmxvd1tcIm1haW5fYmxvY2tfXCIgKyBpZHhdID0gZXh0cmFjdE1haW5CbG9ja1BhcmFtcyhcIm1pZGRsZV9mbG93L21haW5fYmxvY2tfXCIgKyBpZHgpO1xyXG4gICAgfSk7XHJcbiAgICB2YXIgZXhpdF9mbG93X3JlZHVjdGlvbl9ibG9jayA9IGV4dHJhY3RSZWR1Y3Rpb25CbG9ja1BhcmFtcygnZXhpdF9mbG93L3JlZHVjdGlvbl9ibG9jaycpO1xyXG4gICAgdmFyIGV4aXRfZmxvd19zZXBhcmFibGVfY29udiA9IGV4dHJhY3RTZXBhcmFibGVDb252UGFyYW1zKCdleGl0X2Zsb3cvc2VwYXJhYmxlX2NvbnYnKTtcclxuICAgIHZhciBleGl0X2Zsb3cgPSB7XHJcbiAgICAgICAgcmVkdWN0aW9uX2Jsb2NrOiBleGl0X2Zsb3dfcmVkdWN0aW9uX2Jsb2NrLFxyXG4gICAgICAgIHNlcGFyYWJsZV9jb252OiBleGl0X2Zsb3dfc2VwYXJhYmxlX2NvbnZcclxuICAgIH07XHJcbiAgICBkaXNwb3NlVW51c2VkV2VpZ2h0VGVuc29ycyh3ZWlnaHRNYXAsIHBhcmFtTWFwcGluZ3MpO1xyXG4gICAgcmV0dXJuIHsgcGFyYW1zOiB7IGVudHJ5X2Zsb3c6IGVudHJ5X2Zsb3csIG1pZGRsZV9mbG93OiBtaWRkbGVfZmxvdywgZXhpdF9mbG93OiBleGl0X2Zsb3cgfSwgcGFyYW1NYXBwaW5nczogcGFyYW1NYXBwaW5ncyB9O1xyXG59XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWV4dHJhY3RQYXJhbXNGcm9tV2VpZ3RoTWFwLmpzLm1hcCIsImltcG9ydCB7IGV4dHJhY3RDb252UGFyYW1zRmFjdG9yeSwgZXh0cmFjdFNlcGFyYWJsZUNvbnZQYXJhbXNGYWN0b3J5LCBleHRyYWN0V2VpZ2h0c0ZhY3RvcnkgfSBmcm9tICcuLi9jb21tb24nO1xyXG5pbXBvcnQgeyByYW5nZSB9IGZyb20gJy4uL3V0aWxzJztcclxuZnVuY3Rpb24gZXh0cmFjdG9yc0ZhY3RvcnkoZXh0cmFjdFdlaWdodHMsIHBhcmFtTWFwcGluZ3MpIHtcclxuICAgIHZhciBleHRyYWN0Q29udlBhcmFtcyA9IGV4dHJhY3RDb252UGFyYW1zRmFjdG9yeShleHRyYWN0V2VpZ2h0cywgcGFyYW1NYXBwaW5ncyk7XHJcbiAgICB2YXIgZXh0cmFjdFNlcGFyYWJsZUNvbnZQYXJhbXMgPSBleHRyYWN0U2VwYXJhYmxlQ29udlBhcmFtc0ZhY3RvcnkoZXh0cmFjdFdlaWdodHMsIHBhcmFtTWFwcGluZ3MpO1xyXG4gICAgZnVuY3Rpb24gZXh0cmFjdFJlZHVjdGlvbkJsb2NrUGFyYW1zKGNoYW5uZWxzSW4sIGNoYW5uZWxzT3V0LCBtYXBwZWRQcmVmaXgpIHtcclxuICAgICAgICB2YXIgc2VwYXJhYmxlX2NvbnYwID0gZXh0cmFjdFNlcGFyYWJsZUNvbnZQYXJhbXMoY2hhbm5lbHNJbiwgY2hhbm5lbHNPdXQsIG1hcHBlZFByZWZpeCArIFwiL3NlcGFyYWJsZV9jb252MFwiKTtcclxuICAgICAgICB2YXIgc2VwYXJhYmxlX2NvbnYxID0gZXh0cmFjdFNlcGFyYWJsZUNvbnZQYXJhbXMoY2hhbm5lbHNPdXQsIGNoYW5uZWxzT3V0LCBtYXBwZWRQcmVmaXggKyBcIi9zZXBhcmFibGVfY29udjFcIik7XHJcbiAgICAgICAgdmFyIGV4cGFuc2lvbl9jb252ID0gZXh0cmFjdENvbnZQYXJhbXMoY2hhbm5lbHNJbiwgY2hhbm5lbHNPdXQsIDEsIG1hcHBlZFByZWZpeCArIFwiL2V4cGFuc2lvbl9jb252XCIpO1xyXG4gICAgICAgIHJldHVybiB7IHNlcGFyYWJsZV9jb252MDogc2VwYXJhYmxlX2NvbnYwLCBzZXBhcmFibGVfY29udjE6IHNlcGFyYWJsZV9jb252MSwgZXhwYW5zaW9uX2NvbnY6IGV4cGFuc2lvbl9jb252IH07XHJcbiAgICB9XHJcbiAgICBmdW5jdGlvbiBleHRyYWN0TWFpbkJsb2NrUGFyYW1zKGNoYW5uZWxzLCBtYXBwZWRQcmVmaXgpIHtcclxuICAgICAgICB2YXIgc2VwYXJhYmxlX2NvbnYwID0gZXh0cmFjdFNlcGFyYWJsZUNvbnZQYXJhbXMoY2hhbm5lbHMsIGNoYW5uZWxzLCBtYXBwZWRQcmVmaXggKyBcIi9zZXBhcmFibGVfY29udjBcIik7XHJcbiAgICAgICAgdmFyIHNlcGFyYWJsZV9jb252MSA9IGV4dHJhY3RTZXBhcmFibGVDb252UGFyYW1zKGNoYW5uZWxzLCBjaGFubmVscywgbWFwcGVkUHJlZml4ICsgXCIvc2VwYXJhYmxlX2NvbnYxXCIpO1xyXG4gICAgICAgIHZhciBzZXBhcmFibGVfY29udjIgPSBleHRyYWN0U2VwYXJhYmxlQ29udlBhcmFtcyhjaGFubmVscywgY2hhbm5lbHMsIG1hcHBlZFByZWZpeCArIFwiL3NlcGFyYWJsZV9jb252MlwiKTtcclxuICAgICAgICByZXR1cm4geyBzZXBhcmFibGVfY29udjA6IHNlcGFyYWJsZV9jb252MCwgc2VwYXJhYmxlX2NvbnYxOiBzZXBhcmFibGVfY29udjEsIHNlcGFyYWJsZV9jb252Mjogc2VwYXJhYmxlX2NvbnYyIH07XHJcbiAgICB9XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIGV4dHJhY3RDb252UGFyYW1zOiBleHRyYWN0Q29udlBhcmFtcyxcclxuICAgICAgICBleHRyYWN0U2VwYXJhYmxlQ29udlBhcmFtczogZXh0cmFjdFNlcGFyYWJsZUNvbnZQYXJhbXMsXHJcbiAgICAgICAgZXh0cmFjdFJlZHVjdGlvbkJsb2NrUGFyYW1zOiBleHRyYWN0UmVkdWN0aW9uQmxvY2tQYXJhbXMsXHJcbiAgICAgICAgZXh0cmFjdE1haW5CbG9ja1BhcmFtczogZXh0cmFjdE1haW5CbG9ja1BhcmFtc1xyXG4gICAgfTtcclxufVxyXG5leHBvcnQgZnVuY3Rpb24gZXh0cmFjdFBhcmFtcyh3ZWlnaHRzLCBudW1NYWluQmxvY2tzKSB7XHJcbiAgICB2YXIgcGFyYW1NYXBwaW5ncyA9IFtdO1xyXG4gICAgdmFyIF9hID0gZXh0cmFjdFdlaWdodHNGYWN0b3J5KHdlaWdodHMpLCBleHRyYWN0V2VpZ2h0cyA9IF9hLmV4dHJhY3RXZWlnaHRzLCBnZXRSZW1haW5pbmdXZWlnaHRzID0gX2EuZ2V0UmVtYWluaW5nV2VpZ2h0cztcclxuICAgIHZhciBfYiA9IGV4dHJhY3RvcnNGYWN0b3J5KGV4dHJhY3RXZWlnaHRzLCBwYXJhbU1hcHBpbmdzKSwgZXh0cmFjdENvbnZQYXJhbXMgPSBfYi5leHRyYWN0Q29udlBhcmFtcywgZXh0cmFjdFNlcGFyYWJsZUNvbnZQYXJhbXMgPSBfYi5leHRyYWN0U2VwYXJhYmxlQ29udlBhcmFtcywgZXh0cmFjdFJlZHVjdGlvbkJsb2NrUGFyYW1zID0gX2IuZXh0cmFjdFJlZHVjdGlvbkJsb2NrUGFyYW1zLCBleHRyYWN0TWFpbkJsb2NrUGFyYW1zID0gX2IuZXh0cmFjdE1haW5CbG9ja1BhcmFtcztcclxuICAgIHZhciBlbnRyeV9mbG93X2NvbnZfaW4gPSBleHRyYWN0Q29udlBhcmFtcygzLCAzMiwgMywgJ2VudHJ5X2Zsb3cvY29udl9pbicpO1xyXG4gICAgdmFyIGVudHJ5X2Zsb3dfcmVkdWN0aW9uX2Jsb2NrXzAgPSBleHRyYWN0UmVkdWN0aW9uQmxvY2tQYXJhbXMoMzIsIDY0LCAnZW50cnlfZmxvdy9yZWR1Y3Rpb25fYmxvY2tfMCcpO1xyXG4gICAgdmFyIGVudHJ5X2Zsb3dfcmVkdWN0aW9uX2Jsb2NrXzEgPSBleHRyYWN0UmVkdWN0aW9uQmxvY2tQYXJhbXMoNjQsIDEyOCwgJ2VudHJ5X2Zsb3cvcmVkdWN0aW9uX2Jsb2NrXzEnKTtcclxuICAgIHZhciBlbnRyeV9mbG93ID0ge1xyXG4gICAgICAgIGNvbnZfaW46IGVudHJ5X2Zsb3dfY29udl9pbixcclxuICAgICAgICByZWR1Y3Rpb25fYmxvY2tfMDogZW50cnlfZmxvd19yZWR1Y3Rpb25fYmxvY2tfMCxcclxuICAgICAgICByZWR1Y3Rpb25fYmxvY2tfMTogZW50cnlfZmxvd19yZWR1Y3Rpb25fYmxvY2tfMVxyXG4gICAgfTtcclxuICAgIHZhciBtaWRkbGVfZmxvdyA9IHt9O1xyXG4gICAgcmFuZ2UobnVtTWFpbkJsb2NrcywgMCwgMSkuZm9yRWFjaChmdW5jdGlvbiAoaWR4KSB7XHJcbiAgICAgICAgbWlkZGxlX2Zsb3dbXCJtYWluX2Jsb2NrX1wiICsgaWR4XSA9IGV4dHJhY3RNYWluQmxvY2tQYXJhbXMoMTI4LCBcIm1pZGRsZV9mbG93L21haW5fYmxvY2tfXCIgKyBpZHgpO1xyXG4gICAgfSk7XHJcbiAgICB2YXIgZXhpdF9mbG93X3JlZHVjdGlvbl9ibG9jayA9IGV4dHJhY3RSZWR1Y3Rpb25CbG9ja1BhcmFtcygxMjgsIDI1NiwgJ2V4aXRfZmxvdy9yZWR1Y3Rpb25fYmxvY2snKTtcclxuICAgIHZhciBleGl0X2Zsb3dfc2VwYXJhYmxlX2NvbnYgPSBleHRyYWN0U2VwYXJhYmxlQ29udlBhcmFtcygyNTYsIDUxMiwgJ2V4aXRfZmxvdy9zZXBhcmFibGVfY29udicpO1xyXG4gICAgdmFyIGV4aXRfZmxvdyA9IHtcclxuICAgICAgICByZWR1Y3Rpb25fYmxvY2s6IGV4aXRfZmxvd19yZWR1Y3Rpb25fYmxvY2ssXHJcbiAgICAgICAgc2VwYXJhYmxlX2NvbnY6IGV4aXRfZmxvd19zZXBhcmFibGVfY29udlxyXG4gICAgfTtcclxuICAgIGlmIChnZXRSZW1haW5pbmdXZWlnaHRzKCkubGVuZ3RoICE9PSAwKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwid2VpZ2h0cyByZW1haW5nIGFmdGVyIGV4dHJhY3Q6IFwiICsgZ2V0UmVtYWluaW5nV2VpZ2h0cygpLmxlbmd0aCk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIHBhcmFtTWFwcGluZ3M6IHBhcmFtTWFwcGluZ3MsXHJcbiAgICAgICAgcGFyYW1zOiB7IGVudHJ5X2Zsb3c6IGVudHJ5X2Zsb3csIG1pZGRsZV9mbG93OiBtaWRkbGVfZmxvdywgZXhpdF9mbG93OiBleGl0X2Zsb3cgfVxyXG4gICAgfTtcclxufVxyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1leHRyYWN0UGFyYW1zLmpzLm1hcCIsImltcG9ydCB7IF9fYXdhaXRlciwgX19leHRlbmRzLCBfX2dlbmVyYXRvciB9IGZyb20gXCJ0c2xpYlwiO1xyXG5pbXBvcnQgKiBhcyB0ZiBmcm9tICdAdGVuc29yZmxvdy90ZmpzLWNvcmUnO1xyXG5pbXBvcnQgeyBmdWxseUNvbm5lY3RlZExheWVyIH0gZnJvbSAnLi4vY29tbW9uL2Z1bGx5Q29ubmVjdGVkTGF5ZXInO1xyXG5pbXBvcnQgeyBzZXBlcmF0ZVdlaWdodE1hcHMgfSBmcm9tICcuLi9mYWNlUHJvY2Vzc29yL3V0aWwnO1xyXG5pbXBvcnQgeyBUaW55WGNlcHRpb24gfSBmcm9tICcuLi94Y2VwdGlvbi9UaW55WGNlcHRpb24nO1xyXG5pbXBvcnQgeyBleHRyYWN0UGFyYW1zIH0gZnJvbSAnLi9leHRyYWN0UGFyYW1zJztcclxuaW1wb3J0IHsgZXh0cmFjdFBhcmFtc0Zyb21XZWlndGhNYXAgfSBmcm9tICcuL2V4dHJhY3RQYXJhbXNGcm9tV2VpZ3RoTWFwJztcclxuaW1wb3J0IHsgR2VuZGVyIH0gZnJvbSAnLi90eXBlcyc7XHJcbmltcG9ydCB7IE5ldXJhbE5ldHdvcmsgfSBmcm9tICcuLi9OZXVyYWxOZXR3b3JrJztcclxuaW1wb3J0IHsgTmV0SW5wdXQsIHRvTmV0SW5wdXQgfSBmcm9tICcuLi9kb20nO1xyXG52YXIgQWdlR2VuZGVyTmV0ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xyXG4gICAgX19leHRlbmRzKEFnZUdlbmRlck5ldCwgX3N1cGVyKTtcclxuICAgIGZ1bmN0aW9uIEFnZUdlbmRlck5ldChmYWNlRmVhdHVyZUV4dHJhY3Rvcikge1xyXG4gICAgICAgIGlmIChmYWNlRmVhdHVyZUV4dHJhY3RvciA9PT0gdm9pZCAwKSB7IGZhY2VGZWF0dXJlRXh0cmFjdG9yID0gbmV3IFRpbnlYY2VwdGlvbigyKTsgfVxyXG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsICdBZ2VHZW5kZXJOZXQnKSB8fCB0aGlzO1xyXG4gICAgICAgIF90aGlzLl9mYWNlRmVhdHVyZUV4dHJhY3RvciA9IGZhY2VGZWF0dXJlRXh0cmFjdG9yO1xyXG4gICAgICAgIHJldHVybiBfdGhpcztcclxuICAgIH1cclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShBZ2VHZW5kZXJOZXQucHJvdG90eXBlLCBcImZhY2VGZWF0dXJlRXh0cmFjdG9yXCIsIHtcclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2ZhY2VGZWF0dXJlRXh0cmFjdG9yO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgQWdlR2VuZGVyTmV0LnByb3RvdHlwZS5ydW5OZXQgPSBmdW5jdGlvbiAoaW5wdXQpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHZhciBwYXJhbXMgPSB0aGlzLnBhcmFtcztcclxuICAgICAgICBpZiAoIXBhcmFtcykge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IodGhpcy5fbmFtZSArIFwiIC0gbG9hZCBtb2RlbCBiZWZvcmUgaW5mZXJlbmNlXCIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGYudGlkeShmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciBib3R0bGVuZWNrRmVhdHVyZXMgPSBpbnB1dCBpbnN0YW5jZW9mIE5ldElucHV0XHJcbiAgICAgICAgICAgICAgICA/IF90aGlzLmZhY2VGZWF0dXJlRXh0cmFjdG9yLmZvcndhcmRJbnB1dChpbnB1dClcclxuICAgICAgICAgICAgICAgIDogaW5wdXQ7XHJcbiAgICAgICAgICAgIHZhciBwb29sZWQgPSB0Zi5hdmdQb29sKGJvdHRsZW5lY2tGZWF0dXJlcywgWzcsIDddLCBbMiwgMl0sICd2YWxpZCcpLmFzMkQoYm90dGxlbmVja0ZlYXR1cmVzLnNoYXBlWzBdLCAtMSk7XHJcbiAgICAgICAgICAgIHZhciBhZ2UgPSBmdWxseUNvbm5lY3RlZExheWVyKHBvb2xlZCwgcGFyYW1zLmZjLmFnZSkuYXMxRCgpO1xyXG4gICAgICAgICAgICB2YXIgZ2VuZGVyID0gZnVsbHlDb25uZWN0ZWRMYXllcihwb29sZWQsIHBhcmFtcy5mYy5nZW5kZXIpO1xyXG4gICAgICAgICAgICByZXR1cm4geyBhZ2U6IGFnZSwgZ2VuZGVyOiBnZW5kZXIgfTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBBZ2VHZW5kZXJOZXQucHJvdG90eXBlLmZvcndhcmRJbnB1dCA9IGZ1bmN0aW9uIChpbnB1dCkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgcmV0dXJuIHRmLnRpZHkoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgX2EgPSBfdGhpcy5ydW5OZXQoaW5wdXQpLCBhZ2UgPSBfYS5hZ2UsIGdlbmRlciA9IF9hLmdlbmRlcjtcclxuICAgICAgICAgICAgcmV0dXJuIHsgYWdlOiBhZ2UsIGdlbmRlcjogdGYuc29mdG1heChnZW5kZXIpIH07XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgQWdlR2VuZGVyTmV0LnByb3RvdHlwZS5mb3J3YXJkID0gZnVuY3Rpb24gKGlucHV0KSB7XHJcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgX2E7XHJcbiAgICAgICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2IpIHtcclxuICAgICAgICAgICAgICAgIHN3aXRjaCAoX2IubGFiZWwpIHtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hID0gdGhpcy5mb3J3YXJkSW5wdXQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHRvTmV0SW5wdXQoaW5wdXQpXTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6IHJldHVybiBbMiAvKnJldHVybiovLCBfYS5hcHBseSh0aGlzLCBbX2Iuc2VudCgpXSldO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBBZ2VHZW5kZXJOZXQucHJvdG90eXBlLnByZWRpY3RBZ2VBbmRHZW5kZXIgPSBmdW5jdGlvbiAoaW5wdXQpIHtcclxuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciBuZXRJbnB1dCwgb3V0LCBhZ2VzLCBnZW5kZXJzLCBhZ2VBbmRHZW5kZXJUZW5zb3JzLCBwcmVkaWN0aW9uc0J5QmF0Y2g7XHJcbiAgICAgICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcclxuICAgICAgICAgICAgICAgIHN3aXRjaCAoX2EubGFiZWwpIHtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6IHJldHVybiBbNCAvKnlpZWxkKi8sIHRvTmV0SW5wdXQoaW5wdXQpXTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ldElucHV0ID0gX2Euc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzLmZvcndhcmRJbnB1dChuZXRJbnB1dCldO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgb3V0ID0gX2Euc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhZ2VzID0gdGYudW5zdGFjayhvdXQuYWdlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZ2VuZGVycyA9IHRmLnVuc3RhY2sob3V0LmdlbmRlcik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFnZUFuZEdlbmRlclRlbnNvcnMgPSBhZ2VzLm1hcChmdW5jdGlvbiAoYWdlVGVuc29yLCBpKSB7IHJldHVybiAoe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWdlVGVuc29yOiBhZ2VUZW5zb3IsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBnZW5kZXJUZW5zb3I6IGdlbmRlcnNbaV1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7IH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCBQcm9taXNlLmFsbChhZ2VBbmRHZW5kZXJUZW5zb3JzLm1hcChmdW5jdGlvbiAoX2EpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgYWdlVGVuc29yID0gX2EuYWdlVGVuc29yLCBnZW5kZXJUZW5zb3IgPSBfYS5nZW5kZXJUZW5zb3I7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF9fYXdhaXRlcihfdGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGFnZSwgcHJvYk1hbGUsIGlzTWFsZSwgZ2VuZGVyLCBnZW5kZXJQcm9iYWJpbGl0eTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChfYi5sYWJlbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMDogcmV0dXJuIFs0IC8qeWllbGQqLywgYWdlVGVuc29yLmRhdGEoKV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhZ2UgPSAoX2Iuc2VudCgpKVswXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgZ2VuZGVyVGVuc29yLmRhdGEoKV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAyOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9iTWFsZSA9IChfYi5zZW50KCkpWzBdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc01hbGUgPSBwcm9iTWFsZSA+IDAuNTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2VuZGVyID0gaXNNYWxlID8gR2VuZGVyLk1BTEUgOiBHZW5kZXIuRkVNQUxFO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBnZW5kZXJQcm9iYWJpbGl0eSA9IGlzTWFsZSA/IHByb2JNYWxlIDogKDEgLSBwcm9iTWFsZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFnZVRlbnNvci5kaXNwb3NlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdlbmRlclRlbnNvci5kaXNwb3NlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCB7IGFnZTogYWdlLCBnZW5kZXI6IGdlbmRlciwgZ2VuZGVyUHJvYmFiaWxpdHk6IGdlbmRlclByb2JhYmlsaXR5IH1dO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pKV07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAzOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBwcmVkaWN0aW9uc0J5QmF0Y2ggPSBfYS5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG91dC5hZ2UuZGlzcG9zZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBvdXQuZ2VuZGVyLmRpc3Bvc2UoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIG5ldElucHV0LmlzQmF0Y2hJbnB1dFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gcHJlZGljdGlvbnNCeUJhdGNoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBwcmVkaWN0aW9uc0J5QmF0Y2hbMF1dO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBBZ2VHZW5kZXJOZXQucHJvdG90eXBlLmdldERlZmF1bHRNb2RlbE5hbWUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuICdhZ2VfZ2VuZGVyX21vZGVsJztcclxuICAgIH07XHJcbiAgICBBZ2VHZW5kZXJOZXQucHJvdG90eXBlLmRpc3Bvc2UgPSBmdW5jdGlvbiAodGhyb3dPblJlZGlzcG9zZSkge1xyXG4gICAgICAgIGlmICh0aHJvd09uUmVkaXNwb3NlID09PSB2b2lkIDApIHsgdGhyb3dPblJlZGlzcG9zZSA9IHRydWU7IH1cclxuICAgICAgICB0aGlzLmZhY2VGZWF0dXJlRXh0cmFjdG9yLmRpc3Bvc2UodGhyb3dPblJlZGlzcG9zZSk7XHJcbiAgICAgICAgX3N1cGVyLnByb3RvdHlwZS5kaXNwb3NlLmNhbGwodGhpcywgdGhyb3dPblJlZGlzcG9zZSk7XHJcbiAgICB9O1xyXG4gICAgQWdlR2VuZGVyTmV0LnByb3RvdHlwZS5sb2FkQ2xhc3NpZmllclBhcmFtcyA9IGZ1bmN0aW9uICh3ZWlnaHRzKSB7XHJcbiAgICAgICAgdmFyIF9hID0gdGhpcy5leHRyYWN0Q2xhc3NpZmllclBhcmFtcyh3ZWlnaHRzKSwgcGFyYW1zID0gX2EucGFyYW1zLCBwYXJhbU1hcHBpbmdzID0gX2EucGFyYW1NYXBwaW5ncztcclxuICAgICAgICB0aGlzLl9wYXJhbXMgPSBwYXJhbXM7XHJcbiAgICAgICAgdGhpcy5fcGFyYW1NYXBwaW5ncyA9IHBhcmFtTWFwcGluZ3M7XHJcbiAgICB9O1xyXG4gICAgQWdlR2VuZGVyTmV0LnByb3RvdHlwZS5leHRyYWN0Q2xhc3NpZmllclBhcmFtcyA9IGZ1bmN0aW9uICh3ZWlnaHRzKSB7XHJcbiAgICAgICAgcmV0dXJuIGV4dHJhY3RQYXJhbXMod2VpZ2h0cyk7XHJcbiAgICB9O1xyXG4gICAgQWdlR2VuZGVyTmV0LnByb3RvdHlwZS5leHRyYWN0UGFyYW1zRnJvbVdlaWd0aE1hcCA9IGZ1bmN0aW9uICh3ZWlnaHRNYXApIHtcclxuICAgICAgICB2YXIgX2EgPSBzZXBlcmF0ZVdlaWdodE1hcHMod2VpZ2h0TWFwKSwgZmVhdHVyZUV4dHJhY3Rvck1hcCA9IF9hLmZlYXR1cmVFeHRyYWN0b3JNYXAsIGNsYXNzaWZpZXJNYXAgPSBfYS5jbGFzc2lmaWVyTWFwO1xyXG4gICAgICAgIHRoaXMuZmFjZUZlYXR1cmVFeHRyYWN0b3IubG9hZEZyb21XZWlnaHRNYXAoZmVhdHVyZUV4dHJhY3Rvck1hcCk7XHJcbiAgICAgICAgcmV0dXJuIGV4dHJhY3RQYXJhbXNGcm9tV2VpZ3RoTWFwKGNsYXNzaWZpZXJNYXApO1xyXG4gICAgfTtcclxuICAgIEFnZUdlbmRlck5ldC5wcm90b3R5cGUuZXh0cmFjdFBhcmFtcyA9IGZ1bmN0aW9uICh3ZWlnaHRzKSB7XHJcbiAgICAgICAgdmFyIGNsYXNzaWZpZXJXZWlnaHRTaXplID0gKDUxMiAqIDEgKyAxKSArICg1MTIgKiAyICsgMik7XHJcbiAgICAgICAgdmFyIGZlYXR1cmVFeHRyYWN0b3JXZWlnaHRzID0gd2VpZ2h0cy5zbGljZSgwLCB3ZWlnaHRzLmxlbmd0aCAtIGNsYXNzaWZpZXJXZWlnaHRTaXplKTtcclxuICAgICAgICB2YXIgY2xhc3NpZmllcldlaWdodHMgPSB3ZWlnaHRzLnNsaWNlKHdlaWdodHMubGVuZ3RoIC0gY2xhc3NpZmllcldlaWdodFNpemUpO1xyXG4gICAgICAgIHRoaXMuZmFjZUZlYXR1cmVFeHRyYWN0b3IuZXh0cmFjdFdlaWdodHMoZmVhdHVyZUV4dHJhY3RvcldlaWdodHMpO1xyXG4gICAgICAgIHJldHVybiB0aGlzLmV4dHJhY3RDbGFzc2lmaWVyUGFyYW1zKGNsYXNzaWZpZXJXZWlnaHRzKTtcclxuICAgIH07XHJcbiAgICByZXR1cm4gQWdlR2VuZGVyTmV0O1xyXG59KE5ldXJhbE5ldHdvcmspKTtcclxuZXhwb3J0IHsgQWdlR2VuZGVyTmV0IH07XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUFnZUdlbmRlck5ldC5qcy5tYXAiLCJpbXBvcnQgeyBleHRyYWN0RkNQYXJhbXNGYWN0b3J5LCBleHRyYWN0V2VpZ2h0c0ZhY3RvcnkgfSBmcm9tICcuLi9jb21tb24nO1xyXG5leHBvcnQgZnVuY3Rpb24gZXh0cmFjdFBhcmFtcyh3ZWlnaHRzKSB7XHJcbiAgICB2YXIgcGFyYW1NYXBwaW5ncyA9IFtdO1xyXG4gICAgdmFyIF9hID0gZXh0cmFjdFdlaWdodHNGYWN0b3J5KHdlaWdodHMpLCBleHRyYWN0V2VpZ2h0cyA9IF9hLmV4dHJhY3RXZWlnaHRzLCBnZXRSZW1haW5pbmdXZWlnaHRzID0gX2EuZ2V0UmVtYWluaW5nV2VpZ2h0cztcclxuICAgIHZhciBleHRyYWN0RkNQYXJhbXMgPSBleHRyYWN0RkNQYXJhbXNGYWN0b3J5KGV4dHJhY3RXZWlnaHRzLCBwYXJhbU1hcHBpbmdzKTtcclxuICAgIHZhciBhZ2UgPSBleHRyYWN0RkNQYXJhbXMoNTEyLCAxLCAnZmMvYWdlJyk7XHJcbiAgICB2YXIgZ2VuZGVyID0gZXh0cmFjdEZDUGFyYW1zKDUxMiwgMiwgJ2ZjL2dlbmRlcicpO1xyXG4gICAgaWYgKGdldFJlbWFpbmluZ1dlaWdodHMoKS5sZW5ndGggIT09IDApIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJ3ZWlnaHRzIHJlbWFpbmcgYWZ0ZXIgZXh0cmFjdDogXCIgKyBnZXRSZW1haW5pbmdXZWlnaHRzKCkubGVuZ3RoKTtcclxuICAgIH1cclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgcGFyYW1NYXBwaW5nczogcGFyYW1NYXBwaW5ncyxcclxuICAgICAgICBwYXJhbXM6IHsgZmM6IHsgYWdlOiBhZ2UsIGdlbmRlcjogZ2VuZGVyIH0gfVxyXG4gICAgfTtcclxufVxyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1leHRyYWN0UGFyYW1zLmpzLm1hcCIsImltcG9ydCB7IGRpc3Bvc2VVbnVzZWRXZWlnaHRUZW5zb3JzLCBleHRyYWN0V2VpZ2h0RW50cnlGYWN0b3J5IH0gZnJvbSAnLi4vY29tbW9uJztcclxuZXhwb3J0IGZ1bmN0aW9uIGV4dHJhY3RQYXJhbXNGcm9tV2VpZ3RoTWFwKHdlaWdodE1hcCkge1xyXG4gICAgdmFyIHBhcmFtTWFwcGluZ3MgPSBbXTtcclxuICAgIHZhciBleHRyYWN0V2VpZ2h0RW50cnkgPSBleHRyYWN0V2VpZ2h0RW50cnlGYWN0b3J5KHdlaWdodE1hcCwgcGFyYW1NYXBwaW5ncyk7XHJcbiAgICBmdW5jdGlvbiBleHRyYWN0RmNQYXJhbXMocHJlZml4KSB7XHJcbiAgICAgICAgdmFyIHdlaWdodHMgPSBleHRyYWN0V2VpZ2h0RW50cnkocHJlZml4ICsgXCIvd2VpZ2h0c1wiLCAyKTtcclxuICAgICAgICB2YXIgYmlhcyA9IGV4dHJhY3RXZWlnaHRFbnRyeShwcmVmaXggKyBcIi9iaWFzXCIsIDEpO1xyXG4gICAgICAgIHJldHVybiB7IHdlaWdodHM6IHdlaWdodHMsIGJpYXM6IGJpYXMgfTtcclxuICAgIH1cclxuICAgIHZhciBwYXJhbXMgPSB7XHJcbiAgICAgICAgZmM6IHtcclxuICAgICAgICAgICAgYWdlOiBleHRyYWN0RmNQYXJhbXMoJ2ZjL2FnZScpLFxyXG4gICAgICAgICAgICBnZW5kZXI6IGV4dHJhY3RGY1BhcmFtcygnZmMvZ2VuZGVyJylcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgZGlzcG9zZVVudXNlZFdlaWdodFRlbnNvcnMod2VpZ2h0TWFwLCBwYXJhbU1hcHBpbmdzKTtcclxuICAgIHJldHVybiB7IHBhcmFtczogcGFyYW1zLCBwYXJhbU1hcHBpbmdzOiBwYXJhbU1hcHBpbmdzIH07XHJcbn1cclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZXh0cmFjdFBhcmFtc0Zyb21XZWlndGhNYXAuanMubWFwIiwiaW1wb3J0IHsgX19hd2FpdGVyLCBfX2V4dGVuZHMsIF9fZ2VuZXJhdG9yIH0gZnJvbSBcInRzbGliXCI7XHJcbmltcG9ydCAqIGFzIHRmIGZyb20gJ0B0ZW5zb3JmbG93L3RmanMtY29yZSc7XHJcbmltcG9ydCB7IFBvaW50IH0gZnJvbSAnLi4vY2xhc3Nlcyc7XHJcbmltcG9ydCB7IEZhY2VMYW5kbWFya3M2OCB9IGZyb20gJy4uL2NsYXNzZXMvRmFjZUxhbmRtYXJrczY4JztcclxuaW1wb3J0IHsgdG9OZXRJbnB1dCB9IGZyb20gJy4uL2RvbSc7XHJcbmltcG9ydCB7IEZhY2VQcm9jZXNzb3IgfSBmcm9tICcuLi9mYWNlUHJvY2Vzc29yL0ZhY2VQcm9jZXNzb3InO1xyXG5pbXBvcnQgeyBpc0V2ZW4gfSBmcm9tICcuLi91dGlscyc7XHJcbnZhciBGYWNlTGFuZG1hcms2OE5ldEJhc2UgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XHJcbiAgICBfX2V4dGVuZHMoRmFjZUxhbmRtYXJrNjhOZXRCYXNlLCBfc3VwZXIpO1xyXG4gICAgZnVuY3Rpb24gRmFjZUxhbmRtYXJrNjhOZXRCYXNlKCkge1xyXG4gICAgICAgIHJldHVybiBfc3VwZXIgIT09IG51bGwgJiYgX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcclxuICAgIH1cclxuICAgIEZhY2VMYW5kbWFyazY4TmV0QmFzZS5wcm90b3R5cGUucG9zdFByb2Nlc3MgPSBmdW5jdGlvbiAob3V0cHV0LCBpbnB1dFNpemUsIG9yaWdpbmFsRGltZW5zaW9ucykge1xyXG4gICAgICAgIHZhciBpbnB1dERpbWVuc2lvbnMgPSBvcmlnaW5hbERpbWVuc2lvbnMubWFwKGZ1bmN0aW9uIChfYSkge1xyXG4gICAgICAgICAgICB2YXIgd2lkdGggPSBfYS53aWR0aCwgaGVpZ2h0ID0gX2EuaGVpZ2h0O1xyXG4gICAgICAgICAgICB2YXIgc2NhbGUgPSBpbnB1dFNpemUgLyBNYXRoLm1heChoZWlnaHQsIHdpZHRoKTtcclxuICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgIHdpZHRoOiB3aWR0aCAqIHNjYWxlLFxyXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiBoZWlnaHQgKiBzY2FsZVxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHZhciBiYXRjaFNpemUgPSBpbnB1dERpbWVuc2lvbnMubGVuZ3RoO1xyXG4gICAgICAgIHJldHVybiB0Zi50aWR5KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIGNyZWF0ZUludGVybGVhdmVkVGVuc29yID0gZnVuY3Rpb24gKGZpbGxYLCBmaWxsWSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRmLnN0YWNrKFtcclxuICAgICAgICAgICAgICAgICAgICB0Zi5maWxsKFs2OF0sIGZpbGxYKSxcclxuICAgICAgICAgICAgICAgICAgICB0Zi5maWxsKFs2OF0sIGZpbGxZKVxyXG4gICAgICAgICAgICAgICAgXSwgMSkuYXMyRCgxLCAxMzYpLmFzMUQoKTtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgdmFyIGdldFBhZGRpbmcgPSBmdW5jdGlvbiAoYmF0Y2hJZHgsIGNvbmQpIHtcclxuICAgICAgICAgICAgICAgIHZhciBfYSA9IGlucHV0RGltZW5zaW9uc1tiYXRjaElkeF0sIHdpZHRoID0gX2Eud2lkdGgsIGhlaWdodCA9IF9hLmhlaWdodDtcclxuICAgICAgICAgICAgICAgIHJldHVybiBjb25kKHdpZHRoLCBoZWlnaHQpID8gTWF0aC5hYnMod2lkdGggLSBoZWlnaHQpIC8gMiA6IDA7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIHZhciBnZXRQYWRkaW5nWCA9IGZ1bmN0aW9uIChiYXRjaElkeCkgeyByZXR1cm4gZ2V0UGFkZGluZyhiYXRjaElkeCwgZnVuY3Rpb24gKHcsIGgpIHsgcmV0dXJuIHcgPCBoOyB9KTsgfTtcclxuICAgICAgICAgICAgdmFyIGdldFBhZGRpbmdZID0gZnVuY3Rpb24gKGJhdGNoSWR4KSB7IHJldHVybiBnZXRQYWRkaW5nKGJhdGNoSWR4LCBmdW5jdGlvbiAodywgaCkgeyByZXR1cm4gaCA8IHc7IH0pOyB9O1xyXG4gICAgICAgICAgICB2YXIgbGFuZG1hcmtUZW5zb3JzID0gb3V0cHV0XHJcbiAgICAgICAgICAgICAgICAubXVsKHRmLmZpbGwoW2JhdGNoU2l6ZSwgMTM2XSwgaW5wdXRTaXplKSlcclxuICAgICAgICAgICAgICAgIC5zdWIodGYuc3RhY2soQXJyYXkuZnJvbShBcnJheShiYXRjaFNpemUpLCBmdW5jdGlvbiAoXywgYmF0Y2hJZHgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBjcmVhdGVJbnRlcmxlYXZlZFRlbnNvcihnZXRQYWRkaW5nWChiYXRjaElkeCksIGdldFBhZGRpbmdZKGJhdGNoSWR4KSk7XHJcbiAgICAgICAgICAgIH0pKSlcclxuICAgICAgICAgICAgICAgIC5kaXYodGYuc3RhY2soQXJyYXkuZnJvbShBcnJheShiYXRjaFNpemUpLCBmdW5jdGlvbiAoXywgYmF0Y2hJZHgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBjcmVhdGVJbnRlcmxlYXZlZFRlbnNvcihpbnB1dERpbWVuc2lvbnNbYmF0Y2hJZHhdLndpZHRoLCBpbnB1dERpbWVuc2lvbnNbYmF0Y2hJZHhdLmhlaWdodCk7XHJcbiAgICAgICAgICAgIH0pKSk7XHJcbiAgICAgICAgICAgIHJldHVybiBsYW5kbWFya1RlbnNvcnM7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgRmFjZUxhbmRtYXJrNjhOZXRCYXNlLnByb3RvdHlwZS5mb3J3YXJkSW5wdXQgPSBmdW5jdGlvbiAoaW5wdXQpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHJldHVybiB0Zi50aWR5KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIG91dCA9IF90aGlzLnJ1bk5ldChpbnB1dCk7XHJcbiAgICAgICAgICAgIHJldHVybiBfdGhpcy5wb3N0UHJvY2VzcyhvdXQsIGlucHV0LmlucHV0U2l6ZSwgaW5wdXQuaW5wdXREaW1lbnNpb25zLm1hcChmdW5jdGlvbiAoX2EpIHtcclxuICAgICAgICAgICAgICAgIHZhciBoZWlnaHQgPSBfYVswXSwgd2lkdGggPSBfYVsxXTtcclxuICAgICAgICAgICAgICAgIHJldHVybiAoeyBoZWlnaHQ6IGhlaWdodCwgd2lkdGg6IHdpZHRoIH0pO1xyXG4gICAgICAgICAgICB9KSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgRmFjZUxhbmRtYXJrNjhOZXRCYXNlLnByb3RvdHlwZS5mb3J3YXJkID0gZnVuY3Rpb24gKGlucHV0KSB7XHJcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgX2E7XHJcbiAgICAgICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2IpIHtcclxuICAgICAgICAgICAgICAgIHN3aXRjaCAoX2IubGFiZWwpIHtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hID0gdGhpcy5mb3J3YXJkSW5wdXQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHRvTmV0SW5wdXQoaW5wdXQpXTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6IHJldHVybiBbMiAvKnJldHVybiovLCBfYS5hcHBseSh0aGlzLCBbX2Iuc2VudCgpXSldO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBGYWNlTGFuZG1hcms2OE5ldEJhc2UucHJvdG90eXBlLmRldGVjdExhbmRtYXJrcyA9IGZ1bmN0aW9uIChpbnB1dCkge1xyXG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIG5ldElucHV0LCBsYW5kbWFya1RlbnNvcnMsIGxhbmRtYXJrc0ZvckJhdGNoO1xyXG4gICAgICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XHJcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKF9hLmxhYmVsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOiByZXR1cm4gWzQgLyp5aWVsZCovLCB0b05ldElucHV0KGlucHV0KV07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXRJbnB1dCA9IF9hLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGFuZG1hcmtUZW5zb3JzID0gdGYudGlkeShmdW5jdGlvbiAoKSB7IHJldHVybiB0Zi51bnN0YWNrKF90aGlzLmZvcndhcmRJbnB1dChuZXRJbnB1dCkpOyB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgUHJvbWlzZS5hbGwobGFuZG1hcmtUZW5zb3JzLm1hcChmdW5jdGlvbiAobGFuZG1hcmtUZW5zb3IsIGJhdGNoSWR4KSB7IHJldHVybiBfX2F3YWl0ZXIoX3RoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGxhbmRtYXJrc0FycmF5LCBfYSwgX2IsIHhDb29yZHMsIHlDb29yZHM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKF9jLmxhYmVsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2IgPSAoX2EgPSBBcnJheSkuZnJvbTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCBsYW5kbWFya1RlbnNvci5kYXRhKCldO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhbmRtYXJrc0FycmF5ID0gX2IuYXBwbHkoX2EsIFtfYy5zZW50KCldKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB4Q29vcmRzID0gbGFuZG1hcmtzQXJyYXkuZmlsdGVyKGZ1bmN0aW9uIChfLCBpKSB7IHJldHVybiBpc0V2ZW4oaSk7IH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHlDb29yZHMgPSBsYW5kbWFya3NBcnJheS5maWx0ZXIoZnVuY3Rpb24gKF8sIGkpIHsgcmV0dXJuICFpc0V2ZW4oaSk7IH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCBuZXcgRmFjZUxhbmRtYXJrczY4KEFycmF5KDY4KS5maWxsKDApLm1hcChmdW5jdGlvbiAoXywgaSkgeyByZXR1cm4gbmV3IFBvaW50KHhDb29yZHNbaV0sIHlDb29yZHNbaV0pOyB9KSwge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiBuZXRJbnB1dC5nZXRJbnB1dEhlaWdodChiYXRjaElkeCksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogbmV0SW5wdXQuZ2V0SW5wdXRXaWR0aChiYXRjaElkeCksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7IH0pKV07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAyOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBsYW5kbWFya3NGb3JCYXRjaCA9IF9hLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGFuZG1hcmtUZW5zb3JzLmZvckVhY2goZnVuY3Rpb24gKHQpIHsgcmV0dXJuIHQuZGlzcG9zZSgpOyB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIG5ldElucHV0LmlzQmF0Y2hJbnB1dFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gbGFuZG1hcmtzRm9yQmF0Y2hcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IGxhbmRtYXJrc0ZvckJhdGNoWzBdXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgRmFjZUxhbmRtYXJrNjhOZXRCYXNlLnByb3RvdHlwZS5nZXRDbGFzc2lmaWVyQ2hhbm5lbHNPdXQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIDEzNjtcclxuICAgIH07XHJcbiAgICByZXR1cm4gRmFjZUxhbmRtYXJrNjhOZXRCYXNlO1xyXG59KEZhY2VQcm9jZXNzb3IpKTtcclxuZXhwb3J0IHsgRmFjZUxhbmRtYXJrNjhOZXRCYXNlIH07XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUZhY2VMYW5kbWFyazY4TmV0QmFzZS5qcy5tYXAiLCJpbXBvcnQgeyBfX2V4dGVuZHMgfSBmcm9tIFwidHNsaWJcIjtcclxuaW1wb3J0IHsgRmFjZUZlYXR1cmVFeHRyYWN0b3IgfSBmcm9tICcuLi9mYWNlRmVhdHVyZUV4dHJhY3Rvci9GYWNlRmVhdHVyZUV4dHJhY3Rvcic7XHJcbmltcG9ydCB7IEZhY2VMYW5kbWFyazY4TmV0QmFzZSB9IGZyb20gJy4vRmFjZUxhbmRtYXJrNjhOZXRCYXNlJztcclxudmFyIEZhY2VMYW5kbWFyazY4TmV0ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xyXG4gICAgX19leHRlbmRzKEZhY2VMYW5kbWFyazY4TmV0LCBfc3VwZXIpO1xyXG4gICAgZnVuY3Rpb24gRmFjZUxhbmRtYXJrNjhOZXQoZmFjZUZlYXR1cmVFeHRyYWN0b3IpIHtcclxuICAgICAgICBpZiAoZmFjZUZlYXR1cmVFeHRyYWN0b3IgPT09IHZvaWQgMCkgeyBmYWNlRmVhdHVyZUV4dHJhY3RvciA9IG5ldyBGYWNlRmVhdHVyZUV4dHJhY3RvcigpOyB9XHJcbiAgICAgICAgcmV0dXJuIF9zdXBlci5jYWxsKHRoaXMsICdGYWNlTGFuZG1hcms2OE5ldCcsIGZhY2VGZWF0dXJlRXh0cmFjdG9yKSB8fCB0aGlzO1xyXG4gICAgfVxyXG4gICAgRmFjZUxhbmRtYXJrNjhOZXQucHJvdG90eXBlLmdldERlZmF1bHRNb2RlbE5hbWUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuICdmYWNlX2xhbmRtYXJrXzY4X21vZGVsJztcclxuICAgIH07XHJcbiAgICBGYWNlTGFuZG1hcms2OE5ldC5wcm90b3R5cGUuZ2V0Q2xhc3NpZmllckNoYW5uZWxzSW4gPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIDI1NjtcclxuICAgIH07XHJcbiAgICByZXR1cm4gRmFjZUxhbmRtYXJrNjhOZXQ7XHJcbn0oRmFjZUxhbmRtYXJrNjhOZXRCYXNlKSk7XHJcbmV4cG9ydCB7IEZhY2VMYW5kbWFyazY4TmV0IH07XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUZhY2VMYW5kbWFyazY4TmV0LmpzLm1hcCIsImltcG9ydCB7IF9fYXdhaXRlciwgX19leHRlbmRzLCBfX2dlbmVyYXRvciB9IGZyb20gXCJ0c2xpYlwiO1xyXG5pbXBvcnQgKiBhcyB0ZiBmcm9tICdAdGVuc29yZmxvdy90ZmpzLWNvcmUnO1xyXG5pbXBvcnQgeyB0b05ldElucHV0IH0gZnJvbSAnLi4vZG9tJztcclxuaW1wb3J0IHsgTmV1cmFsTmV0d29yayB9IGZyb20gJy4uL05ldXJhbE5ldHdvcmsnO1xyXG5pbXBvcnQgeyBub3JtYWxpemUgfSBmcm9tICcuLi9vcHMnO1xyXG5pbXBvcnQgeyBkZW5zZUJsb2NrMyB9IGZyb20gJy4vZGVuc2VCbG9jayc7XHJcbmltcG9ydCB7IGV4dHJhY3RQYXJhbXNGcm9tV2VpZ3RoTWFwVGlueSB9IGZyb20gJy4vZXh0cmFjdFBhcmFtc0Zyb21XZWlndGhNYXBUaW55JztcclxuaW1wb3J0IHsgZXh0cmFjdFBhcmFtc1RpbnkgfSBmcm9tICcuL2V4dHJhY3RQYXJhbXNUaW55JztcclxudmFyIFRpbnlGYWNlRmVhdHVyZUV4dHJhY3RvciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcclxuICAgIF9fZXh0ZW5kcyhUaW55RmFjZUZlYXR1cmVFeHRyYWN0b3IsIF9zdXBlcik7XHJcbiAgICBmdW5jdGlvbiBUaW55RmFjZUZlYXR1cmVFeHRyYWN0b3IoKSB7XHJcbiAgICAgICAgcmV0dXJuIF9zdXBlci5jYWxsKHRoaXMsICdUaW55RmFjZUZlYXR1cmVFeHRyYWN0b3InKSB8fCB0aGlzO1xyXG4gICAgfVxyXG4gICAgVGlueUZhY2VGZWF0dXJlRXh0cmFjdG9yLnByb3RvdHlwZS5mb3J3YXJkSW5wdXQgPSBmdW5jdGlvbiAoaW5wdXQpIHtcclxuICAgICAgICB2YXIgcGFyYW1zID0gdGhpcy5wYXJhbXM7XHJcbiAgICAgICAgaWYgKCFwYXJhbXMpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdUaW55RmFjZUZlYXR1cmVFeHRyYWN0b3IgLSBsb2FkIG1vZGVsIGJlZm9yZSBpbmZlcmVuY2UnKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRmLnRpZHkoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgYmF0Y2hUZW5zb3IgPSBpbnB1dC50b0JhdGNoVGVuc29yKDExMiwgdHJ1ZSk7XHJcbiAgICAgICAgICAgIHZhciBtZWFuUmdiID0gWzEyMi43ODIsIDExNy4wMDEsIDEwNC4yOThdO1xyXG4gICAgICAgICAgICB2YXIgbm9ybWFsaXplZCA9IG5vcm1hbGl6ZShiYXRjaFRlbnNvciwgbWVhblJnYikuZGl2KHRmLnNjYWxhcigyNTUpKTtcclxuICAgICAgICAgICAgdmFyIG91dCA9IGRlbnNlQmxvY2szKG5vcm1hbGl6ZWQsIHBhcmFtcy5kZW5zZTAsIHRydWUpO1xyXG4gICAgICAgICAgICBvdXQgPSBkZW5zZUJsb2NrMyhvdXQsIHBhcmFtcy5kZW5zZTEpO1xyXG4gICAgICAgICAgICBvdXQgPSBkZW5zZUJsb2NrMyhvdXQsIHBhcmFtcy5kZW5zZTIpO1xyXG4gICAgICAgICAgICBvdXQgPSB0Zi5hdmdQb29sKG91dCwgWzE0LCAxNF0sIFsyLCAyXSwgJ3ZhbGlkJyk7XHJcbiAgICAgICAgICAgIHJldHVybiBvdXQ7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgVGlueUZhY2VGZWF0dXJlRXh0cmFjdG9yLnByb3RvdHlwZS5mb3J3YXJkID0gZnVuY3Rpb24gKGlucHV0KSB7XHJcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgX2E7XHJcbiAgICAgICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2IpIHtcclxuICAgICAgICAgICAgICAgIHN3aXRjaCAoX2IubGFiZWwpIHtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hID0gdGhpcy5mb3J3YXJkSW5wdXQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHRvTmV0SW5wdXQoaW5wdXQpXTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6IHJldHVybiBbMiAvKnJldHVybiovLCBfYS5hcHBseSh0aGlzLCBbX2Iuc2VudCgpXSldO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBUaW55RmFjZUZlYXR1cmVFeHRyYWN0b3IucHJvdG90eXBlLmdldERlZmF1bHRNb2RlbE5hbWUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuICdmYWNlX2ZlYXR1cmVfZXh0cmFjdG9yX3RpbnlfbW9kZWwnO1xyXG4gICAgfTtcclxuICAgIFRpbnlGYWNlRmVhdHVyZUV4dHJhY3Rvci5wcm90b3R5cGUuZXh0cmFjdFBhcmFtc0Zyb21XZWlndGhNYXAgPSBmdW5jdGlvbiAod2VpZ2h0TWFwKSB7XHJcbiAgICAgICAgcmV0dXJuIGV4dHJhY3RQYXJhbXNGcm9tV2VpZ3RoTWFwVGlueSh3ZWlnaHRNYXApO1xyXG4gICAgfTtcclxuICAgIFRpbnlGYWNlRmVhdHVyZUV4dHJhY3Rvci5wcm90b3R5cGUuZXh0cmFjdFBhcmFtcyA9IGZ1bmN0aW9uICh3ZWlnaHRzKSB7XHJcbiAgICAgICAgcmV0dXJuIGV4dHJhY3RQYXJhbXNUaW55KHdlaWdodHMpO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBUaW55RmFjZUZlYXR1cmVFeHRyYWN0b3I7XHJcbn0oTmV1cmFsTmV0d29yaykpO1xyXG5leHBvcnQgeyBUaW55RmFjZUZlYXR1cmVFeHRyYWN0b3IgfTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9VGlueUZhY2VGZWF0dXJlRXh0cmFjdG9yLmpzLm1hcCIsImltcG9ydCB7IGRpc3Bvc2VVbnVzZWRXZWlnaHRUZW5zb3JzIH0gZnJvbSAnLi4vY29tbW9uJztcclxuaW1wb3J0IHsgbG9hZFBhcmFtc0ZhY3RvcnkgfSBmcm9tICcuL2xvYWRQYXJhbXNGYWN0b3J5JztcclxuZXhwb3J0IGZ1bmN0aW9uIGV4dHJhY3RQYXJhbXNGcm9tV2VpZ3RoTWFwVGlueSh3ZWlnaHRNYXApIHtcclxuICAgIHZhciBwYXJhbU1hcHBpbmdzID0gW107XHJcbiAgICB2YXIgZXh0cmFjdERlbnNlQmxvY2szUGFyYW1zID0gbG9hZFBhcmFtc0ZhY3Rvcnkod2VpZ2h0TWFwLCBwYXJhbU1hcHBpbmdzKS5leHRyYWN0RGVuc2VCbG9jazNQYXJhbXM7XHJcbiAgICB2YXIgcGFyYW1zID0ge1xyXG4gICAgICAgIGRlbnNlMDogZXh0cmFjdERlbnNlQmxvY2szUGFyYW1zKCdkZW5zZTAnLCB0cnVlKSxcclxuICAgICAgICBkZW5zZTE6IGV4dHJhY3REZW5zZUJsb2NrM1BhcmFtcygnZGVuc2UxJyksXHJcbiAgICAgICAgZGVuc2UyOiBleHRyYWN0RGVuc2VCbG9jazNQYXJhbXMoJ2RlbnNlMicpXHJcbiAgICB9O1xyXG4gICAgZGlzcG9zZVVudXNlZFdlaWdodFRlbnNvcnMod2VpZ2h0TWFwLCBwYXJhbU1hcHBpbmdzKTtcclxuICAgIHJldHVybiB7IHBhcmFtczogcGFyYW1zLCBwYXJhbU1hcHBpbmdzOiBwYXJhbU1hcHBpbmdzIH07XHJcbn1cclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZXh0cmFjdFBhcmFtc0Zyb21XZWlndGhNYXBUaW55LmpzLm1hcCIsImltcG9ydCB7IGV4dHJhY3RXZWlnaHRzRmFjdG9yeSB9IGZyb20gJy4uL2NvbW1vbic7XHJcbmltcG9ydCB7IGV4dHJhY3RvcnNGYWN0b3J5IH0gZnJvbSAnLi9leHRyYWN0b3JzRmFjdG9yeSc7XHJcbmV4cG9ydCBmdW5jdGlvbiBleHRyYWN0UGFyYW1zVGlueSh3ZWlnaHRzKSB7XHJcbiAgICB2YXIgcGFyYW1NYXBwaW5ncyA9IFtdO1xyXG4gICAgdmFyIF9hID0gZXh0cmFjdFdlaWdodHNGYWN0b3J5KHdlaWdodHMpLCBleHRyYWN0V2VpZ2h0cyA9IF9hLmV4dHJhY3RXZWlnaHRzLCBnZXRSZW1haW5pbmdXZWlnaHRzID0gX2EuZ2V0UmVtYWluaW5nV2VpZ2h0cztcclxuICAgIHZhciBleHRyYWN0RGVuc2VCbG9jazNQYXJhbXMgPSBleHRyYWN0b3JzRmFjdG9yeShleHRyYWN0V2VpZ2h0cywgcGFyYW1NYXBwaW5ncykuZXh0cmFjdERlbnNlQmxvY2szUGFyYW1zO1xyXG4gICAgdmFyIGRlbnNlMCA9IGV4dHJhY3REZW5zZUJsb2NrM1BhcmFtcygzLCAzMiwgJ2RlbnNlMCcsIHRydWUpO1xyXG4gICAgdmFyIGRlbnNlMSA9IGV4dHJhY3REZW5zZUJsb2NrM1BhcmFtcygzMiwgNjQsICdkZW5zZTEnKTtcclxuICAgIHZhciBkZW5zZTIgPSBleHRyYWN0RGVuc2VCbG9jazNQYXJhbXMoNjQsIDEyOCwgJ2RlbnNlMicpO1xyXG4gICAgaWYgKGdldFJlbWFpbmluZ1dlaWdodHMoKS5sZW5ndGggIT09IDApIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJ3ZWlnaHRzIHJlbWFpbmcgYWZ0ZXIgZXh0cmFjdDogXCIgKyBnZXRSZW1haW5pbmdXZWlnaHRzKCkubGVuZ3RoKTtcclxuICAgIH1cclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgcGFyYW1NYXBwaW5nczogcGFyYW1NYXBwaW5ncyxcclxuICAgICAgICBwYXJhbXM6IHsgZGVuc2UwOiBkZW5zZTAsIGRlbnNlMTogZGVuc2UxLCBkZW5zZTI6IGRlbnNlMiB9XHJcbiAgICB9O1xyXG59XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWV4dHJhY3RQYXJhbXNUaW55LmpzLm1hcCIsImltcG9ydCB7IF9fZXh0ZW5kcyB9IGZyb20gXCJ0c2xpYlwiO1xyXG5pbXBvcnQgeyBUaW55RmFjZUZlYXR1cmVFeHRyYWN0b3IgfSBmcm9tICcuLi9mYWNlRmVhdHVyZUV4dHJhY3Rvci9UaW55RmFjZUZlYXR1cmVFeHRyYWN0b3InO1xyXG5pbXBvcnQgeyBGYWNlTGFuZG1hcms2OE5ldEJhc2UgfSBmcm9tICcuL0ZhY2VMYW5kbWFyazY4TmV0QmFzZSc7XHJcbnZhciBGYWNlTGFuZG1hcms2OFRpbnlOZXQgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XHJcbiAgICBfX2V4dGVuZHMoRmFjZUxhbmRtYXJrNjhUaW55TmV0LCBfc3VwZXIpO1xyXG4gICAgZnVuY3Rpb24gRmFjZUxhbmRtYXJrNjhUaW55TmV0KGZhY2VGZWF0dXJlRXh0cmFjdG9yKSB7XHJcbiAgICAgICAgaWYgKGZhY2VGZWF0dXJlRXh0cmFjdG9yID09PSB2b2lkIDApIHsgZmFjZUZlYXR1cmVFeHRyYWN0b3IgPSBuZXcgVGlueUZhY2VGZWF0dXJlRXh0cmFjdG9yKCk7IH1cclxuICAgICAgICByZXR1cm4gX3N1cGVyLmNhbGwodGhpcywgJ0ZhY2VMYW5kbWFyazY4VGlueU5ldCcsIGZhY2VGZWF0dXJlRXh0cmFjdG9yKSB8fCB0aGlzO1xyXG4gICAgfVxyXG4gICAgRmFjZUxhbmRtYXJrNjhUaW55TmV0LnByb3RvdHlwZS5nZXREZWZhdWx0TW9kZWxOYW1lID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiAnZmFjZV9sYW5kbWFya182OF90aW55X21vZGVsJztcclxuICAgIH07XHJcbiAgICBGYWNlTGFuZG1hcms2OFRpbnlOZXQucHJvdG90eXBlLmdldENsYXNzaWZpZXJDaGFubmVsc0luID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiAxMjg7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIEZhY2VMYW5kbWFyazY4VGlueU5ldDtcclxufShGYWNlTGFuZG1hcms2OE5ldEJhc2UpKTtcclxuZXhwb3J0IHsgRmFjZUxhbmRtYXJrNjhUaW55TmV0IH07XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUZhY2VMYW5kbWFyazY4VGlueU5ldC5qcy5tYXAiLCJpbXBvcnQgeyBfX2V4dGVuZHMgfSBmcm9tIFwidHNsaWJcIjtcclxuaW1wb3J0IHsgRmFjZUxhbmRtYXJrNjhOZXQgfSBmcm9tICcuL0ZhY2VMYW5kbWFyazY4TmV0JztcclxuZXhwb3J0ICogZnJvbSAnLi9GYWNlTGFuZG1hcms2OE5ldCc7XHJcbmV4cG9ydCAqIGZyb20gJy4vRmFjZUxhbmRtYXJrNjhUaW55TmV0JztcclxudmFyIEZhY2VMYW5kbWFya05ldCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcclxuICAgIF9fZXh0ZW5kcyhGYWNlTGFuZG1hcmtOZXQsIF9zdXBlcik7XHJcbiAgICBmdW5jdGlvbiBGYWNlTGFuZG1hcmtOZXQoKSB7XHJcbiAgICAgICAgcmV0dXJuIF9zdXBlciAhPT0gbnVsbCAmJiBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIEZhY2VMYW5kbWFya05ldDtcclxufShGYWNlTGFuZG1hcms2OE5ldCkpO1xyXG5leHBvcnQgeyBGYWNlTGFuZG1hcmtOZXQgfTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIiwiaW1wb3J0ICogYXMgdGYgZnJvbSAnQHRlbnNvcmZsb3cvdGZqcy1jb3JlJztcclxuaW1wb3J0IHsgc2NhbGUgfSBmcm9tICcuL3NjYWxlTGF5ZXInO1xyXG5mdW5jdGlvbiBjb252TGF5ZXIoeCwgcGFyYW1zLCBzdHJpZGVzLCB3aXRoUmVsdSwgcGFkZGluZykge1xyXG4gICAgaWYgKHBhZGRpbmcgPT09IHZvaWQgMCkgeyBwYWRkaW5nID0gJ3NhbWUnOyB9XHJcbiAgICB2YXIgX2EgPSBwYXJhbXMuY29udiwgZmlsdGVycyA9IF9hLmZpbHRlcnMsIGJpYXMgPSBfYS5iaWFzO1xyXG4gICAgdmFyIG91dCA9IHRmLmNvbnYyZCh4LCBmaWx0ZXJzLCBzdHJpZGVzLCBwYWRkaW5nKTtcclxuICAgIG91dCA9IHRmLmFkZChvdXQsIGJpYXMpO1xyXG4gICAgb3V0ID0gc2NhbGUob3V0LCBwYXJhbXMuc2NhbGUpO1xyXG4gICAgcmV0dXJuIHdpdGhSZWx1ID8gdGYucmVsdShvdXQpIDogb3V0O1xyXG59XHJcbmV4cG9ydCBmdW5jdGlvbiBjb252KHgsIHBhcmFtcykge1xyXG4gICAgcmV0dXJuIGNvbnZMYXllcih4LCBwYXJhbXMsIFsxLCAxXSwgdHJ1ZSk7XHJcbn1cclxuZXhwb3J0IGZ1bmN0aW9uIGNvbnZOb1JlbHUoeCwgcGFyYW1zKSB7XHJcbiAgICByZXR1cm4gY29udkxheWVyKHgsIHBhcmFtcywgWzEsIDFdLCBmYWxzZSk7XHJcbn1cclxuZXhwb3J0IGZ1bmN0aW9uIGNvbnZEb3duKHgsIHBhcmFtcykge1xyXG4gICAgcmV0dXJuIGNvbnZMYXllcih4LCBwYXJhbXMsIFsyLCAyXSwgdHJ1ZSwgJ3ZhbGlkJyk7XHJcbn1cclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29udkxheWVyLmpzLm1hcCIsImltcG9ydCAqIGFzIHRmIGZyb20gJ0B0ZW5zb3JmbG93L3RmanMtY29yZSc7XHJcbmV4cG9ydCBmdW5jdGlvbiBzY2FsZSh4LCBwYXJhbXMpIHtcclxuICAgIHJldHVybiB0Zi5hZGQodGYubXVsKHgsIHBhcmFtcy53ZWlnaHRzKSwgcGFyYW1zLmJpYXNlcyk7XHJcbn1cclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2NhbGVMYXllci5qcy5tYXAiLCJpbXBvcnQgKiBhcyB0ZiBmcm9tICdAdGVuc29yZmxvdy90ZmpzLWNvcmUnO1xyXG5pbXBvcnQgeyBleHRyYWN0V2VpZ2h0c0ZhY3RvcnkgfSBmcm9tICcuLi9jb21tb24nO1xyXG5pbXBvcnQgeyBpc0Zsb2F0IH0gZnJvbSAnLi4vdXRpbHMnO1xyXG5mdW5jdGlvbiBleHRyYWN0b3JzRmFjdG9yeShleHRyYWN0V2VpZ2h0cywgcGFyYW1NYXBwaW5ncykge1xyXG4gICAgZnVuY3Rpb24gZXh0cmFjdEZpbHRlclZhbHVlcyhudW1GaWx0ZXJWYWx1ZXMsIG51bUZpbHRlcnMsIGZpbHRlclNpemUpIHtcclxuICAgICAgICB2YXIgd2VpZ2h0cyA9IGV4dHJhY3RXZWlnaHRzKG51bUZpbHRlclZhbHVlcyk7XHJcbiAgICAgICAgdmFyIGRlcHRoID0gd2VpZ2h0cy5sZW5ndGggLyAobnVtRmlsdGVycyAqIGZpbHRlclNpemUgKiBmaWx0ZXJTaXplKTtcclxuICAgICAgICBpZiAoaXNGbG9hdChkZXB0aCkpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiZGVwdGggaGFzIHRvIGJlIGFuIGludGVnZXI6IFwiICsgZGVwdGggKyBcIiwgd2VpZ2h0cy5sZW5ndGg6IFwiICsgd2VpZ2h0cy5sZW5ndGggKyBcIiwgbnVtRmlsdGVyczogXCIgKyBudW1GaWx0ZXJzICsgXCIsIGZpbHRlclNpemU6IFwiICsgZmlsdGVyU2l6ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0Zi50aWR5KGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRmLnRyYW5zcG9zZSh0Zi50ZW5zb3I0ZCh3ZWlnaHRzLCBbbnVtRmlsdGVycywgZGVwdGgsIGZpbHRlclNpemUsIGZpbHRlclNpemVdKSwgWzIsIDMsIDEsIDBdKTsgfSk7XHJcbiAgICB9XHJcbiAgICBmdW5jdGlvbiBleHRyYWN0Q29udlBhcmFtcyhudW1GaWx0ZXJWYWx1ZXMsIG51bUZpbHRlcnMsIGZpbHRlclNpemUsIG1hcHBlZFByZWZpeCkge1xyXG4gICAgICAgIHZhciBmaWx0ZXJzID0gZXh0cmFjdEZpbHRlclZhbHVlcyhudW1GaWx0ZXJWYWx1ZXMsIG51bUZpbHRlcnMsIGZpbHRlclNpemUpO1xyXG4gICAgICAgIHZhciBiaWFzID0gdGYudGVuc29yMWQoZXh0cmFjdFdlaWdodHMobnVtRmlsdGVycykpO1xyXG4gICAgICAgIHBhcmFtTWFwcGluZ3MucHVzaCh7IHBhcmFtUGF0aDogbWFwcGVkUHJlZml4ICsgXCIvZmlsdGVyc1wiIH0sIHsgcGFyYW1QYXRoOiBtYXBwZWRQcmVmaXggKyBcIi9iaWFzXCIgfSk7XHJcbiAgICAgICAgcmV0dXJuIHsgZmlsdGVyczogZmlsdGVycywgYmlhczogYmlhcyB9O1xyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gZXh0cmFjdFNjYWxlTGF5ZXJQYXJhbXMobnVtV2VpZ2h0cywgbWFwcGVkUHJlZml4KSB7XHJcbiAgICAgICAgdmFyIHdlaWdodHMgPSB0Zi50ZW5zb3IxZChleHRyYWN0V2VpZ2h0cyhudW1XZWlnaHRzKSk7XHJcbiAgICAgICAgdmFyIGJpYXNlcyA9IHRmLnRlbnNvcjFkKGV4dHJhY3RXZWlnaHRzKG51bVdlaWdodHMpKTtcclxuICAgICAgICBwYXJhbU1hcHBpbmdzLnB1c2goeyBwYXJhbVBhdGg6IG1hcHBlZFByZWZpeCArIFwiL3dlaWdodHNcIiB9LCB7IHBhcmFtUGF0aDogbWFwcGVkUHJlZml4ICsgXCIvYmlhc2VzXCIgfSk7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgd2VpZ2h0czogd2VpZ2h0cyxcclxuICAgICAgICAgICAgYmlhc2VzOiBiaWFzZXNcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gZXh0cmFjdENvbnZMYXllclBhcmFtcyhudW1GaWx0ZXJWYWx1ZXMsIG51bUZpbHRlcnMsIGZpbHRlclNpemUsIG1hcHBlZFByZWZpeCkge1xyXG4gICAgICAgIHZhciBjb252ID0gZXh0cmFjdENvbnZQYXJhbXMobnVtRmlsdGVyVmFsdWVzLCBudW1GaWx0ZXJzLCBmaWx0ZXJTaXplLCBtYXBwZWRQcmVmaXggKyBcIi9jb252XCIpO1xyXG4gICAgICAgIHZhciBzY2FsZSA9IGV4dHJhY3RTY2FsZUxheWVyUGFyYW1zKG51bUZpbHRlcnMsIG1hcHBlZFByZWZpeCArIFwiL3NjYWxlXCIpO1xyXG4gICAgICAgIHJldHVybiB7IGNvbnY6IGNvbnYsIHNjYWxlOiBzY2FsZSB9O1xyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gZXh0cmFjdFJlc2lkdWFsTGF5ZXJQYXJhbXMobnVtRmlsdGVyVmFsdWVzLCBudW1GaWx0ZXJzLCBmaWx0ZXJTaXplLCBtYXBwZWRQcmVmaXgsIGlzRG93bikge1xyXG4gICAgICAgIGlmIChpc0Rvd24gPT09IHZvaWQgMCkgeyBpc0Rvd24gPSBmYWxzZTsgfVxyXG4gICAgICAgIHZhciBjb252MSA9IGV4dHJhY3RDb252TGF5ZXJQYXJhbXMoKGlzRG93biA/IDAuNSA6IDEpICogbnVtRmlsdGVyVmFsdWVzLCBudW1GaWx0ZXJzLCBmaWx0ZXJTaXplLCBtYXBwZWRQcmVmaXggKyBcIi9jb252MVwiKTtcclxuICAgICAgICB2YXIgY29udjIgPSBleHRyYWN0Q29udkxheWVyUGFyYW1zKG51bUZpbHRlclZhbHVlcywgbnVtRmlsdGVycywgZmlsdGVyU2l6ZSwgbWFwcGVkUHJlZml4ICsgXCIvY29udjJcIik7XHJcbiAgICAgICAgcmV0dXJuIHsgY29udjE6IGNvbnYxLCBjb252MjogY29udjIgfTtcclxuICAgIH1cclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgZXh0cmFjdENvbnZMYXllclBhcmFtczogZXh0cmFjdENvbnZMYXllclBhcmFtcyxcclxuICAgICAgICBleHRyYWN0UmVzaWR1YWxMYXllclBhcmFtczogZXh0cmFjdFJlc2lkdWFsTGF5ZXJQYXJhbXNcclxuICAgIH07XHJcbn1cclxuZXhwb3J0IGZ1bmN0aW9uIGV4dHJhY3RQYXJhbXMod2VpZ2h0cykge1xyXG4gICAgdmFyIF9hID0gZXh0cmFjdFdlaWdodHNGYWN0b3J5KHdlaWdodHMpLCBleHRyYWN0V2VpZ2h0cyA9IF9hLmV4dHJhY3RXZWlnaHRzLCBnZXRSZW1haW5pbmdXZWlnaHRzID0gX2EuZ2V0UmVtYWluaW5nV2VpZ2h0cztcclxuICAgIHZhciBwYXJhbU1hcHBpbmdzID0gW107XHJcbiAgICB2YXIgX2IgPSBleHRyYWN0b3JzRmFjdG9yeShleHRyYWN0V2VpZ2h0cywgcGFyYW1NYXBwaW5ncyksIGV4dHJhY3RDb252TGF5ZXJQYXJhbXMgPSBfYi5leHRyYWN0Q29udkxheWVyUGFyYW1zLCBleHRyYWN0UmVzaWR1YWxMYXllclBhcmFtcyA9IF9iLmV4dHJhY3RSZXNpZHVhbExheWVyUGFyYW1zO1xyXG4gICAgdmFyIGNvbnYzMl9kb3duID0gZXh0cmFjdENvbnZMYXllclBhcmFtcyg0NzA0LCAzMiwgNywgJ2NvbnYzMl9kb3duJyk7XHJcbiAgICB2YXIgY29udjMyXzEgPSBleHRyYWN0UmVzaWR1YWxMYXllclBhcmFtcyg5MjE2LCAzMiwgMywgJ2NvbnYzMl8xJyk7XHJcbiAgICB2YXIgY29udjMyXzIgPSBleHRyYWN0UmVzaWR1YWxMYXllclBhcmFtcyg5MjE2LCAzMiwgMywgJ2NvbnYzMl8yJyk7XHJcbiAgICB2YXIgY29udjMyXzMgPSBleHRyYWN0UmVzaWR1YWxMYXllclBhcmFtcyg5MjE2LCAzMiwgMywgJ2NvbnYzMl8zJyk7XHJcbiAgICB2YXIgY29udjY0X2Rvd24gPSBleHRyYWN0UmVzaWR1YWxMYXllclBhcmFtcygzNjg2NCwgNjQsIDMsICdjb252NjRfZG93bicsIHRydWUpO1xyXG4gICAgdmFyIGNvbnY2NF8xID0gZXh0cmFjdFJlc2lkdWFsTGF5ZXJQYXJhbXMoMzY4NjQsIDY0LCAzLCAnY29udjY0XzEnKTtcclxuICAgIHZhciBjb252NjRfMiA9IGV4dHJhY3RSZXNpZHVhbExheWVyUGFyYW1zKDM2ODY0LCA2NCwgMywgJ2NvbnY2NF8yJyk7XHJcbiAgICB2YXIgY29udjY0XzMgPSBleHRyYWN0UmVzaWR1YWxMYXllclBhcmFtcygzNjg2NCwgNjQsIDMsICdjb252NjRfMycpO1xyXG4gICAgdmFyIGNvbnYxMjhfZG93biA9IGV4dHJhY3RSZXNpZHVhbExheWVyUGFyYW1zKDE0NzQ1NiwgMTI4LCAzLCAnY29udjEyOF9kb3duJywgdHJ1ZSk7XHJcbiAgICB2YXIgY29udjEyOF8xID0gZXh0cmFjdFJlc2lkdWFsTGF5ZXJQYXJhbXMoMTQ3NDU2LCAxMjgsIDMsICdjb252MTI4XzEnKTtcclxuICAgIHZhciBjb252MTI4XzIgPSBleHRyYWN0UmVzaWR1YWxMYXllclBhcmFtcygxNDc0NTYsIDEyOCwgMywgJ2NvbnYxMjhfMicpO1xyXG4gICAgdmFyIGNvbnYyNTZfZG93biA9IGV4dHJhY3RSZXNpZHVhbExheWVyUGFyYW1zKDU4OTgyNCwgMjU2LCAzLCAnY29udjI1Nl9kb3duJywgdHJ1ZSk7XHJcbiAgICB2YXIgY29udjI1Nl8xID0gZXh0cmFjdFJlc2lkdWFsTGF5ZXJQYXJhbXMoNTg5ODI0LCAyNTYsIDMsICdjb252MjU2XzEnKTtcclxuICAgIHZhciBjb252MjU2XzIgPSBleHRyYWN0UmVzaWR1YWxMYXllclBhcmFtcyg1ODk4MjQsIDI1NiwgMywgJ2NvbnYyNTZfMicpO1xyXG4gICAgdmFyIGNvbnYyNTZfZG93bl9vdXQgPSBleHRyYWN0UmVzaWR1YWxMYXllclBhcmFtcyg1ODk4MjQsIDI1NiwgMywgJ2NvbnYyNTZfZG93bl9vdXQnKTtcclxuICAgIHZhciBmYyA9IHRmLnRpZHkoZnVuY3Rpb24gKCkgeyByZXR1cm4gdGYudHJhbnNwb3NlKHRmLnRlbnNvcjJkKGV4dHJhY3RXZWlnaHRzKDI1NiAqIDEyOCksIFsxMjgsIDI1Nl0pLCBbMSwgMF0pOyB9KTtcclxuICAgIHBhcmFtTWFwcGluZ3MucHVzaCh7IHBhcmFtUGF0aDogXCJmY1wiIH0pO1xyXG4gICAgaWYgKGdldFJlbWFpbmluZ1dlaWdodHMoKS5sZW5ndGggIT09IDApIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJ3ZWlnaHRzIHJlbWFpbmcgYWZ0ZXIgZXh0cmFjdDogXCIgKyBnZXRSZW1haW5pbmdXZWlnaHRzKCkubGVuZ3RoKTtcclxuICAgIH1cclxuICAgIHZhciBwYXJhbXMgPSB7XHJcbiAgICAgICAgY29udjMyX2Rvd246IGNvbnYzMl9kb3duLFxyXG4gICAgICAgIGNvbnYzMl8xOiBjb252MzJfMSxcclxuICAgICAgICBjb252MzJfMjogY29udjMyXzIsXHJcbiAgICAgICAgY29udjMyXzM6IGNvbnYzMl8zLFxyXG4gICAgICAgIGNvbnY2NF9kb3duOiBjb252NjRfZG93bixcclxuICAgICAgICBjb252NjRfMTogY29udjY0XzEsXHJcbiAgICAgICAgY29udjY0XzI6IGNvbnY2NF8yLFxyXG4gICAgICAgIGNvbnY2NF8zOiBjb252NjRfMyxcclxuICAgICAgICBjb252MTI4X2Rvd246IGNvbnYxMjhfZG93bixcclxuICAgICAgICBjb252MTI4XzE6IGNvbnYxMjhfMSxcclxuICAgICAgICBjb252MTI4XzI6IGNvbnYxMjhfMixcclxuICAgICAgICBjb252MjU2X2Rvd246IGNvbnYyNTZfZG93bixcclxuICAgICAgICBjb252MjU2XzE6IGNvbnYyNTZfMSxcclxuICAgICAgICBjb252MjU2XzI6IGNvbnYyNTZfMixcclxuICAgICAgICBjb252MjU2X2Rvd25fb3V0OiBjb252MjU2X2Rvd25fb3V0LFxyXG4gICAgICAgIGZjOiBmY1xyXG4gICAgfTtcclxuICAgIHJldHVybiB7IHBhcmFtczogcGFyYW1zLCBwYXJhbU1hcHBpbmdzOiBwYXJhbU1hcHBpbmdzIH07XHJcbn1cclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZXh0cmFjdFBhcmFtcy5qcy5tYXAiLCJpbXBvcnQgeyBfX3NwcmVhZEFycmF5cyB9IGZyb20gXCJ0c2xpYlwiO1xyXG5pbXBvcnQgKiBhcyB0ZiBmcm9tICdAdGVuc29yZmxvdy90ZmpzLWNvcmUnO1xyXG5pbXBvcnQgeyBjb252LCBjb252RG93biwgY29udk5vUmVsdSB9IGZyb20gJy4vY29udkxheWVyJztcclxuZXhwb3J0IGZ1bmN0aW9uIHJlc2lkdWFsKHgsIHBhcmFtcykge1xyXG4gICAgdmFyIG91dCA9IGNvbnYoeCwgcGFyYW1zLmNvbnYxKTtcclxuICAgIG91dCA9IGNvbnZOb1JlbHUob3V0LCBwYXJhbXMuY29udjIpO1xyXG4gICAgb3V0ID0gdGYuYWRkKG91dCwgeCk7XHJcbiAgICBvdXQgPSB0Zi5yZWx1KG91dCk7XHJcbiAgICByZXR1cm4gb3V0O1xyXG59XHJcbmV4cG9ydCBmdW5jdGlvbiByZXNpZHVhbERvd24oeCwgcGFyYW1zKSB7XHJcbiAgICB2YXIgb3V0ID0gY29udkRvd24oeCwgcGFyYW1zLmNvbnYxKTtcclxuICAgIG91dCA9IGNvbnZOb1JlbHUob3V0LCBwYXJhbXMuY29udjIpO1xyXG4gICAgdmFyIHBvb2xlZCA9IHRmLmF2Z1Bvb2woeCwgMiwgMiwgJ3ZhbGlkJyk7XHJcbiAgICB2YXIgemVyb3MgPSB0Zi56ZXJvcyhwb29sZWQuc2hhcGUpO1xyXG4gICAgdmFyIGlzUGFkID0gcG9vbGVkLnNoYXBlWzNdICE9PSBvdXQuc2hhcGVbM107XHJcbiAgICB2YXIgaXNBZGp1c3RTaGFwZSA9IHBvb2xlZC5zaGFwZVsxXSAhPT0gb3V0LnNoYXBlWzFdIHx8IHBvb2xlZC5zaGFwZVsyXSAhPT0gb3V0LnNoYXBlWzJdO1xyXG4gICAgaWYgKGlzQWRqdXN0U2hhcGUpIHtcclxuICAgICAgICB2YXIgcGFkU2hhcGVYID0gX19zcHJlYWRBcnJheXMob3V0LnNoYXBlKTtcclxuICAgICAgICBwYWRTaGFwZVhbMV0gPSAxO1xyXG4gICAgICAgIHZhciB6ZXJvc1cgPSB0Zi56ZXJvcyhwYWRTaGFwZVgpO1xyXG4gICAgICAgIG91dCA9IHRmLmNvbmNhdChbb3V0LCB6ZXJvc1ddLCAxKTtcclxuICAgICAgICB2YXIgcGFkU2hhcGVZID0gX19zcHJlYWRBcnJheXMob3V0LnNoYXBlKTtcclxuICAgICAgICBwYWRTaGFwZVlbMl0gPSAxO1xyXG4gICAgICAgIHZhciB6ZXJvc0ggPSB0Zi56ZXJvcyhwYWRTaGFwZVkpO1xyXG4gICAgICAgIG91dCA9IHRmLmNvbmNhdChbb3V0LCB6ZXJvc0hdLCAyKTtcclxuICAgIH1cclxuICAgIHBvb2xlZCA9IGlzUGFkID8gdGYuY29uY2F0KFtwb29sZWQsIHplcm9zXSwgMykgOiBwb29sZWQ7XHJcbiAgICBvdXQgPSB0Zi5hZGQocG9vbGVkLCBvdXQpO1xyXG4gICAgb3V0ID0gdGYucmVsdShvdXQpO1xyXG4gICAgcmV0dXJuIG91dDtcclxufVxyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZXNpZHVhbExheWVyLmpzLm1hcCIsImltcG9ydCB7IF9fYXdhaXRlciwgX19leHRlbmRzLCBfX2dlbmVyYXRvciB9IGZyb20gXCJ0c2xpYlwiO1xyXG5pbXBvcnQgKiBhcyB0ZiBmcm9tICdAdGVuc29yZmxvdy90ZmpzLWNvcmUnO1xyXG5pbXBvcnQgeyB0b05ldElucHV0IH0gZnJvbSAnLi4vZG9tJztcclxuaW1wb3J0IHsgTmV1cmFsTmV0d29yayB9IGZyb20gJy4uL05ldXJhbE5ldHdvcmsnO1xyXG5pbXBvcnQgeyBub3JtYWxpemUgfSBmcm9tICcuLi9vcHMnO1xyXG5pbXBvcnQgeyBjb252RG93biB9IGZyb20gJy4vY29udkxheWVyJztcclxuaW1wb3J0IHsgZXh0cmFjdFBhcmFtcyB9IGZyb20gJy4vZXh0cmFjdFBhcmFtcyc7XHJcbmltcG9ydCB7IGV4dHJhY3RQYXJhbXNGcm9tV2VpZ3RoTWFwIH0gZnJvbSAnLi9leHRyYWN0UGFyYW1zRnJvbVdlaWd0aE1hcCc7XHJcbmltcG9ydCB7IHJlc2lkdWFsLCByZXNpZHVhbERvd24gfSBmcm9tICcuL3Jlc2lkdWFsTGF5ZXInO1xyXG52YXIgRmFjZVJlY29nbml0aW9uTmV0ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xyXG4gICAgX19leHRlbmRzKEZhY2VSZWNvZ25pdGlvbk5ldCwgX3N1cGVyKTtcclxuICAgIGZ1bmN0aW9uIEZhY2VSZWNvZ25pdGlvbk5ldCgpIHtcclxuICAgICAgICByZXR1cm4gX3N1cGVyLmNhbGwodGhpcywgJ0ZhY2VSZWNvZ25pdGlvbk5ldCcpIHx8IHRoaXM7XHJcbiAgICB9XHJcbiAgICBGYWNlUmVjb2duaXRpb25OZXQucHJvdG90eXBlLmZvcndhcmRJbnB1dCA9IGZ1bmN0aW9uIChpbnB1dCkge1xyXG4gICAgICAgIHZhciBwYXJhbXMgPSB0aGlzLnBhcmFtcztcclxuICAgICAgICBpZiAoIXBhcmFtcykge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ZhY2VSZWNvZ25pdGlvbk5ldCAtIGxvYWQgbW9kZWwgYmVmb3JlIGluZmVyZW5jZScpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGYudGlkeShmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciBiYXRjaFRlbnNvciA9IGlucHV0LnRvQmF0Y2hUZW5zb3IoMTUwLCB0cnVlKS50b0Zsb2F0KCk7XHJcbiAgICAgICAgICAgIHZhciBtZWFuUmdiID0gWzEyMi43ODIsIDExNy4wMDEsIDEwNC4yOThdO1xyXG4gICAgICAgICAgICB2YXIgbm9ybWFsaXplZCA9IG5vcm1hbGl6ZShiYXRjaFRlbnNvciwgbWVhblJnYikuZGl2KHRmLnNjYWxhcigyNTYpKTtcclxuICAgICAgICAgICAgdmFyIG91dCA9IGNvbnZEb3duKG5vcm1hbGl6ZWQsIHBhcmFtcy5jb252MzJfZG93bik7XHJcbiAgICAgICAgICAgIG91dCA9IHRmLm1heFBvb2wob3V0LCAzLCAyLCAndmFsaWQnKTtcclxuICAgICAgICAgICAgb3V0ID0gcmVzaWR1YWwob3V0LCBwYXJhbXMuY29udjMyXzEpO1xyXG4gICAgICAgICAgICBvdXQgPSByZXNpZHVhbChvdXQsIHBhcmFtcy5jb252MzJfMik7XHJcbiAgICAgICAgICAgIG91dCA9IHJlc2lkdWFsKG91dCwgcGFyYW1zLmNvbnYzMl8zKTtcclxuICAgICAgICAgICAgb3V0ID0gcmVzaWR1YWxEb3duKG91dCwgcGFyYW1zLmNvbnY2NF9kb3duKTtcclxuICAgICAgICAgICAgb3V0ID0gcmVzaWR1YWwob3V0LCBwYXJhbXMuY29udjY0XzEpO1xyXG4gICAgICAgICAgICBvdXQgPSByZXNpZHVhbChvdXQsIHBhcmFtcy5jb252NjRfMik7XHJcbiAgICAgICAgICAgIG91dCA9IHJlc2lkdWFsKG91dCwgcGFyYW1zLmNvbnY2NF8zKTtcclxuICAgICAgICAgICAgb3V0ID0gcmVzaWR1YWxEb3duKG91dCwgcGFyYW1zLmNvbnYxMjhfZG93bik7XHJcbiAgICAgICAgICAgIG91dCA9IHJlc2lkdWFsKG91dCwgcGFyYW1zLmNvbnYxMjhfMSk7XHJcbiAgICAgICAgICAgIG91dCA9IHJlc2lkdWFsKG91dCwgcGFyYW1zLmNvbnYxMjhfMik7XHJcbiAgICAgICAgICAgIG91dCA9IHJlc2lkdWFsRG93bihvdXQsIHBhcmFtcy5jb252MjU2X2Rvd24pO1xyXG4gICAgICAgICAgICBvdXQgPSByZXNpZHVhbChvdXQsIHBhcmFtcy5jb252MjU2XzEpO1xyXG4gICAgICAgICAgICBvdXQgPSByZXNpZHVhbChvdXQsIHBhcmFtcy5jb252MjU2XzIpO1xyXG4gICAgICAgICAgICBvdXQgPSByZXNpZHVhbERvd24ob3V0LCBwYXJhbXMuY29udjI1Nl9kb3duX291dCk7XHJcbiAgICAgICAgICAgIHZhciBnbG9iYWxBdmcgPSBvdXQubWVhbihbMSwgMl0pO1xyXG4gICAgICAgICAgICB2YXIgZnVsbHlDb25uZWN0ZWQgPSB0Zi5tYXRNdWwoZ2xvYmFsQXZnLCBwYXJhbXMuZmMpO1xyXG4gICAgICAgICAgICByZXR1cm4gZnVsbHlDb25uZWN0ZWQ7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgRmFjZVJlY29nbml0aW9uTmV0LnByb3RvdHlwZS5mb3J3YXJkID0gZnVuY3Rpb24gKGlucHV0KSB7XHJcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgX2E7XHJcbiAgICAgICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2IpIHtcclxuICAgICAgICAgICAgICAgIHN3aXRjaCAoX2IubGFiZWwpIHtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hID0gdGhpcy5mb3J3YXJkSW5wdXQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHRvTmV0SW5wdXQoaW5wdXQpXTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6IHJldHVybiBbMiAvKnJldHVybiovLCBfYS5hcHBseSh0aGlzLCBbX2Iuc2VudCgpXSldO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBGYWNlUmVjb2duaXRpb25OZXQucHJvdG90eXBlLmNvbXB1dGVGYWNlRGVzY3JpcHRvciA9IGZ1bmN0aW9uIChpbnB1dCkge1xyXG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIG5ldElucHV0LCBmYWNlRGVzY3JpcHRvclRlbnNvcnMsIGZhY2VEZXNjcmlwdG9yc0ZvckJhdGNoO1xyXG4gICAgICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XHJcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKF9hLmxhYmVsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOiByZXR1cm4gWzQgLyp5aWVsZCovLCB0b05ldElucHV0KGlucHV0KV07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXRJbnB1dCA9IF9hLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZmFjZURlc2NyaXB0b3JUZW5zb3JzID0gdGYudGlkeShmdW5jdGlvbiAoKSB7IHJldHVybiB0Zi51bnN0YWNrKF90aGlzLmZvcndhcmRJbnB1dChuZXRJbnB1dCkpOyB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgUHJvbWlzZS5hbGwoZmFjZURlc2NyaXB0b3JUZW5zb3JzLm1hcChmdW5jdGlvbiAodCkgeyByZXR1cm4gdC5kYXRhKCk7IH0pKV07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAyOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmYWNlRGVzY3JpcHRvcnNGb3JCYXRjaCA9IF9hLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZmFjZURlc2NyaXB0b3JUZW5zb3JzLmZvckVhY2goZnVuY3Rpb24gKHQpIHsgcmV0dXJuIHQuZGlzcG9zZSgpOyB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIG5ldElucHV0LmlzQmF0Y2hJbnB1dFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gZmFjZURlc2NyaXB0b3JzRm9yQmF0Y2hcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IGZhY2VEZXNjcmlwdG9yc0ZvckJhdGNoWzBdXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgRmFjZVJlY29nbml0aW9uTmV0LnByb3RvdHlwZS5nZXREZWZhdWx0TW9kZWxOYW1lID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiAnZmFjZV9yZWNvZ25pdGlvbl9tb2RlbCc7XHJcbiAgICB9O1xyXG4gICAgRmFjZVJlY29nbml0aW9uTmV0LnByb3RvdHlwZS5leHRyYWN0UGFyYW1zRnJvbVdlaWd0aE1hcCA9IGZ1bmN0aW9uICh3ZWlnaHRNYXApIHtcclxuICAgICAgICByZXR1cm4gZXh0cmFjdFBhcmFtc0Zyb21XZWlndGhNYXAod2VpZ2h0TWFwKTtcclxuICAgIH07XHJcbiAgICBGYWNlUmVjb2duaXRpb25OZXQucHJvdG90eXBlLmV4dHJhY3RQYXJhbXMgPSBmdW5jdGlvbiAod2VpZ2h0cykge1xyXG4gICAgICAgIHJldHVybiBleHRyYWN0UGFyYW1zKHdlaWdodHMpO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBGYWNlUmVjb2duaXRpb25OZXQ7XHJcbn0oTmV1cmFsTmV0d29yaykpO1xyXG5leHBvcnQgeyBGYWNlUmVjb2duaXRpb25OZXQgfTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9RmFjZVJlY29nbml0aW9uTmV0LmpzLm1hcCIsImltcG9ydCB7IGRpc3Bvc2VVbnVzZWRXZWlnaHRUZW5zb3JzLCBleHRyYWN0V2VpZ2h0RW50cnlGYWN0b3J5IH0gZnJvbSAnLi4vY29tbW9uJztcclxuaW1wb3J0IHsgaXNUZW5zb3IyRCB9IGZyb20gJy4uL3V0aWxzJztcclxuZnVuY3Rpb24gZXh0cmFjdG9yc0ZhY3Rvcnkod2VpZ2h0TWFwLCBwYXJhbU1hcHBpbmdzKSB7XHJcbiAgICB2YXIgZXh0cmFjdFdlaWdodEVudHJ5ID0gZXh0cmFjdFdlaWdodEVudHJ5RmFjdG9yeSh3ZWlnaHRNYXAsIHBhcmFtTWFwcGluZ3MpO1xyXG4gICAgZnVuY3Rpb24gZXh0cmFjdFNjYWxlTGF5ZXJQYXJhbXMocHJlZml4KSB7XHJcbiAgICAgICAgdmFyIHdlaWdodHMgPSBleHRyYWN0V2VpZ2h0RW50cnkocHJlZml4ICsgXCIvc2NhbGUvd2VpZ2h0c1wiLCAxKTtcclxuICAgICAgICB2YXIgYmlhc2VzID0gZXh0cmFjdFdlaWdodEVudHJ5KHByZWZpeCArIFwiL3NjYWxlL2JpYXNlc1wiLCAxKTtcclxuICAgICAgICByZXR1cm4geyB3ZWlnaHRzOiB3ZWlnaHRzLCBiaWFzZXM6IGJpYXNlcyB9O1xyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gZXh0cmFjdENvbnZMYXllclBhcmFtcyhwcmVmaXgpIHtcclxuICAgICAgICB2YXIgZmlsdGVycyA9IGV4dHJhY3RXZWlnaHRFbnRyeShwcmVmaXggKyBcIi9jb252L2ZpbHRlcnNcIiwgNCk7XHJcbiAgICAgICAgdmFyIGJpYXMgPSBleHRyYWN0V2VpZ2h0RW50cnkocHJlZml4ICsgXCIvY29udi9iaWFzXCIsIDEpO1xyXG4gICAgICAgIHZhciBzY2FsZSA9IGV4dHJhY3RTY2FsZUxheWVyUGFyYW1zKHByZWZpeCk7XHJcbiAgICAgICAgcmV0dXJuIHsgY29udjogeyBmaWx0ZXJzOiBmaWx0ZXJzLCBiaWFzOiBiaWFzIH0sIHNjYWxlOiBzY2FsZSB9O1xyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gZXh0cmFjdFJlc2lkdWFsTGF5ZXJQYXJhbXMocHJlZml4KSB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgY29udjE6IGV4dHJhY3RDb252TGF5ZXJQYXJhbXMocHJlZml4ICsgXCIvY29udjFcIiksXHJcbiAgICAgICAgICAgIGNvbnYyOiBleHRyYWN0Q29udkxheWVyUGFyYW1zKHByZWZpeCArIFwiL2NvbnYyXCIpXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgZXh0cmFjdENvbnZMYXllclBhcmFtczogZXh0cmFjdENvbnZMYXllclBhcmFtcyxcclxuICAgICAgICBleHRyYWN0UmVzaWR1YWxMYXllclBhcmFtczogZXh0cmFjdFJlc2lkdWFsTGF5ZXJQYXJhbXNcclxuICAgIH07XHJcbn1cclxuZXhwb3J0IGZ1bmN0aW9uIGV4dHJhY3RQYXJhbXNGcm9tV2VpZ3RoTWFwKHdlaWdodE1hcCkge1xyXG4gICAgdmFyIHBhcmFtTWFwcGluZ3MgPSBbXTtcclxuICAgIHZhciBfYSA9IGV4dHJhY3RvcnNGYWN0b3J5KHdlaWdodE1hcCwgcGFyYW1NYXBwaW5ncyksIGV4dHJhY3RDb252TGF5ZXJQYXJhbXMgPSBfYS5leHRyYWN0Q29udkxheWVyUGFyYW1zLCBleHRyYWN0UmVzaWR1YWxMYXllclBhcmFtcyA9IF9hLmV4dHJhY3RSZXNpZHVhbExheWVyUGFyYW1zO1xyXG4gICAgdmFyIGNvbnYzMl9kb3duID0gZXh0cmFjdENvbnZMYXllclBhcmFtcygnY29udjMyX2Rvd24nKTtcclxuICAgIHZhciBjb252MzJfMSA9IGV4dHJhY3RSZXNpZHVhbExheWVyUGFyYW1zKCdjb252MzJfMScpO1xyXG4gICAgdmFyIGNvbnYzMl8yID0gZXh0cmFjdFJlc2lkdWFsTGF5ZXJQYXJhbXMoJ2NvbnYzMl8yJyk7XHJcbiAgICB2YXIgY29udjMyXzMgPSBleHRyYWN0UmVzaWR1YWxMYXllclBhcmFtcygnY29udjMyXzMnKTtcclxuICAgIHZhciBjb252NjRfZG93biA9IGV4dHJhY3RSZXNpZHVhbExheWVyUGFyYW1zKCdjb252NjRfZG93bicpO1xyXG4gICAgdmFyIGNvbnY2NF8xID0gZXh0cmFjdFJlc2lkdWFsTGF5ZXJQYXJhbXMoJ2NvbnY2NF8xJyk7XHJcbiAgICB2YXIgY29udjY0XzIgPSBleHRyYWN0UmVzaWR1YWxMYXllclBhcmFtcygnY29udjY0XzInKTtcclxuICAgIHZhciBjb252NjRfMyA9IGV4dHJhY3RSZXNpZHVhbExheWVyUGFyYW1zKCdjb252NjRfMycpO1xyXG4gICAgdmFyIGNvbnYxMjhfZG93biA9IGV4dHJhY3RSZXNpZHVhbExheWVyUGFyYW1zKCdjb252MTI4X2Rvd24nKTtcclxuICAgIHZhciBjb252MTI4XzEgPSBleHRyYWN0UmVzaWR1YWxMYXllclBhcmFtcygnY29udjEyOF8xJyk7XHJcbiAgICB2YXIgY29udjEyOF8yID0gZXh0cmFjdFJlc2lkdWFsTGF5ZXJQYXJhbXMoJ2NvbnYxMjhfMicpO1xyXG4gICAgdmFyIGNvbnYyNTZfZG93biA9IGV4dHJhY3RSZXNpZHVhbExheWVyUGFyYW1zKCdjb252MjU2X2Rvd24nKTtcclxuICAgIHZhciBjb252MjU2XzEgPSBleHRyYWN0UmVzaWR1YWxMYXllclBhcmFtcygnY29udjI1Nl8xJyk7XHJcbiAgICB2YXIgY29udjI1Nl8yID0gZXh0cmFjdFJlc2lkdWFsTGF5ZXJQYXJhbXMoJ2NvbnYyNTZfMicpO1xyXG4gICAgdmFyIGNvbnYyNTZfZG93bl9vdXQgPSBleHRyYWN0UmVzaWR1YWxMYXllclBhcmFtcygnY29udjI1Nl9kb3duX291dCcpO1xyXG4gICAgdmFyIGZjID0gd2VpZ2h0TWFwWydmYyddO1xyXG4gICAgcGFyYW1NYXBwaW5ncy5wdXNoKHsgb3JpZ2luYWxQYXRoOiAnZmMnLCBwYXJhbVBhdGg6ICdmYycgfSk7XHJcbiAgICBpZiAoIWlzVGVuc29yMkQoZmMpKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiZXhwZWN0ZWQgd2VpZ2h0TWFwW2ZjXSB0byBiZSBhIFRlbnNvcjJELCBpbnN0ZWFkIGhhdmUgXCIgKyBmYyk7XHJcbiAgICB9XHJcbiAgICB2YXIgcGFyYW1zID0ge1xyXG4gICAgICAgIGNvbnYzMl9kb3duOiBjb252MzJfZG93bixcclxuICAgICAgICBjb252MzJfMTogY29udjMyXzEsXHJcbiAgICAgICAgY29udjMyXzI6IGNvbnYzMl8yLFxyXG4gICAgICAgIGNvbnYzMl8zOiBjb252MzJfMyxcclxuICAgICAgICBjb252NjRfZG93bjogY29udjY0X2Rvd24sXHJcbiAgICAgICAgY29udjY0XzE6IGNvbnY2NF8xLFxyXG4gICAgICAgIGNvbnY2NF8yOiBjb252NjRfMixcclxuICAgICAgICBjb252NjRfMzogY29udjY0XzMsXHJcbiAgICAgICAgY29udjEyOF9kb3duOiBjb252MTI4X2Rvd24sXHJcbiAgICAgICAgY29udjEyOF8xOiBjb252MTI4XzEsXHJcbiAgICAgICAgY29udjEyOF8yOiBjb252MTI4XzIsXHJcbiAgICAgICAgY29udjI1Nl9kb3duOiBjb252MjU2X2Rvd24sXHJcbiAgICAgICAgY29udjI1Nl8xOiBjb252MjU2XzEsXHJcbiAgICAgICAgY29udjI1Nl8yOiBjb252MjU2XzIsXHJcbiAgICAgICAgY29udjI1Nl9kb3duX291dDogY29udjI1Nl9kb3duX291dCxcclxuICAgICAgICBmYzogZmNcclxuICAgIH07XHJcbiAgICBkaXNwb3NlVW51c2VkV2VpZ2h0VGVuc29ycyh3ZWlnaHRNYXAsIHBhcmFtTWFwcGluZ3MpO1xyXG4gICAgcmV0dXJuIHsgcGFyYW1zOiBwYXJhbXMsIHBhcmFtTWFwcGluZ3M6IHBhcmFtTWFwcGluZ3MgfTtcclxufVxyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1leHRyYWN0UGFyYW1zRnJvbVdlaWd0aE1hcC5qcy5tYXAiLCJpbXBvcnQgeyBGYWNlUmVjb2duaXRpb25OZXQgfSBmcm9tICcuL0ZhY2VSZWNvZ25pdGlvbk5ldCc7XHJcbmV4cG9ydCAqIGZyb20gJy4vRmFjZVJlY29nbml0aW9uTmV0JztcclxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUZhY2VSZWNvZ25pdGlvbk5ldCh3ZWlnaHRzKSB7XHJcbiAgICB2YXIgbmV0ID0gbmV3IEZhY2VSZWNvZ25pdGlvbk5ldCgpO1xyXG4gICAgbmV0LmV4dHJhY3RXZWlnaHRzKHdlaWdodHMpO1xyXG4gICAgcmV0dXJuIG5ldDtcclxufVxyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiLCJleHBvcnQgZnVuY3Rpb24gZXh0ZW5kV2l0aEZhY2VEZXNjcmlwdG9yKHNvdXJjZU9iaiwgZGVzY3JpcHRvcikge1xyXG4gICAgdmFyIGV4dGVuc2lvbiA9IHsgZGVzY3JpcHRvcjogZGVzY3JpcHRvciB9O1xyXG4gICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oe30sIHNvdXJjZU9iaiwgZXh0ZW5zaW9uKTtcclxufVxyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1XaXRoRmFjZURlc2NyaXB0b3IuanMubWFwIiwiZXhwb3J0IGZ1bmN0aW9uIGlzV2l0aEFnZShvYmopIHtcclxuICAgIHJldHVybiB0eXBlb2Ygb2JqWydhZ2UnXSA9PT0gJ251bWJlcic7XHJcbn1cclxuZXhwb3J0IGZ1bmN0aW9uIGV4dGVuZFdpdGhBZ2Uoc291cmNlT2JqLCBhZ2UpIHtcclxuICAgIHZhciBleHRlbnNpb24gPSB7IGFnZTogYWdlIH07XHJcbiAgICByZXR1cm4gT2JqZWN0LmFzc2lnbih7fSwgc291cmNlT2JqLCBleHRlbnNpb24pO1xyXG59XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVdpdGhBZ2UuanMubWFwIiwiaW1wb3J0IHsgR2VuZGVyIH0gZnJvbSAnLi4vYWdlR2VuZGVyTmV0L3R5cGVzJztcclxuaW1wb3J0IHsgaXNWYWxpZFByb2JhYmxpdGl5IH0gZnJvbSAnLi4vdXRpbHMnO1xyXG5leHBvcnQgZnVuY3Rpb24gaXNXaXRoR2VuZGVyKG9iaikge1xyXG4gICAgcmV0dXJuIChvYmpbJ2dlbmRlciddID09PSBHZW5kZXIuTUFMRSB8fCBvYmpbJ2dlbmRlciddID09PSBHZW5kZXIuRkVNQUxFKVxyXG4gICAgICAgICYmIGlzVmFsaWRQcm9iYWJsaXRpeShvYmpbJ2dlbmRlclByb2JhYmlsaXR5J10pO1xyXG59XHJcbmV4cG9ydCBmdW5jdGlvbiBleHRlbmRXaXRoR2VuZGVyKHNvdXJjZU9iaiwgZ2VuZGVyLCBnZW5kZXJQcm9iYWJpbGl0eSkge1xyXG4gICAgdmFyIGV4dGVuc2lvbiA9IHsgZ2VuZGVyOiBnZW5kZXIsIGdlbmRlclByb2JhYmlsaXR5OiBnZW5kZXJQcm9iYWJpbGl0eSB9O1xyXG4gICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oe30sIHNvdXJjZU9iaiwgZXh0ZW5zaW9uKTtcclxufVxyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1XaXRoR2VuZGVyLmpzLm1hcCIsInZhciBNdGNubk9wdGlvbnMgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBNdGNubk9wdGlvbnMoX2EpIHtcclxuICAgICAgICB2YXIgX2IgPSBfYSA9PT0gdm9pZCAwID8ge30gOiBfYSwgbWluRmFjZVNpemUgPSBfYi5taW5GYWNlU2l6ZSwgc2NhbGVGYWN0b3IgPSBfYi5zY2FsZUZhY3RvciwgbWF4TnVtU2NhbGVzID0gX2IubWF4TnVtU2NhbGVzLCBzY29yZVRocmVzaG9sZHMgPSBfYi5zY29yZVRocmVzaG9sZHMsIHNjYWxlU3RlcHMgPSBfYi5zY2FsZVN0ZXBzO1xyXG4gICAgICAgIHRoaXMuX25hbWUgPSAnTXRjbm5PcHRpb25zJztcclxuICAgICAgICB0aGlzLl9taW5GYWNlU2l6ZSA9IG1pbkZhY2VTaXplIHx8IDIwO1xyXG4gICAgICAgIHRoaXMuX3NjYWxlRmFjdG9yID0gc2NhbGVGYWN0b3IgfHwgMC43MDk7XHJcbiAgICAgICAgdGhpcy5fbWF4TnVtU2NhbGVzID0gbWF4TnVtU2NhbGVzIHx8IDEwO1xyXG4gICAgICAgIHRoaXMuX3Njb3JlVGhyZXNob2xkcyA9IHNjb3JlVGhyZXNob2xkcyB8fCBbMC42LCAwLjcsIDAuN107XHJcbiAgICAgICAgdGhpcy5fc2NhbGVTdGVwcyA9IHNjYWxlU3RlcHM7XHJcbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLl9taW5GYWNlU2l6ZSAhPT0gJ251bWJlcicgfHwgdGhpcy5fbWluRmFjZVNpemUgPCAwKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcih0aGlzLl9uYW1lICsgXCIgLSBleHBlY3RlZCBtaW5GYWNlU2l6ZSB0byBiZSBhIG51bWJlciA+IDBcIik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy5fc2NhbGVGYWN0b3IgIT09ICdudW1iZXInIHx8IHRoaXMuX3NjYWxlRmFjdG9yIDw9IDAgfHwgdGhpcy5fc2NhbGVGYWN0b3IgPj0gMSkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IodGhpcy5fbmFtZSArIFwiIC0gZXhwZWN0ZWQgc2NhbGVGYWN0b3IgdG8gYmUgYSBudW1iZXIgYmV0d2VlbiAwIGFuZCAxXCIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodHlwZW9mIHRoaXMuX21heE51bVNjYWxlcyAhPT0gJ251bWJlcicgfHwgdGhpcy5fbWF4TnVtU2NhbGVzIDwgMCkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IodGhpcy5fbmFtZSArIFwiIC0gZXhwZWN0ZWQgbWF4TnVtU2NhbGVzIHRvIGJlIGEgbnVtYmVyID4gMFwiKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KHRoaXMuX3Njb3JlVGhyZXNob2xkcylcclxuICAgICAgICAgICAgfHwgdGhpcy5fc2NvcmVUaHJlc2hvbGRzLmxlbmd0aCAhPT0gM1xyXG4gICAgICAgICAgICB8fCB0aGlzLl9zY29yZVRocmVzaG9sZHMuc29tZShmdW5jdGlvbiAodGgpIHsgcmV0dXJuIHR5cGVvZiB0aCAhPT0gJ251bWJlcic7IH0pKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcih0aGlzLl9uYW1lICsgXCIgLSBleHBlY3RlZCBzY29yZVRocmVzaG9sZHMgdG8gYmUgYW4gYXJyYXkgb2YgbnVtYmVycyBvZiBsZW5ndGggM1wiKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMuX3NjYWxlU3RlcHNcclxuICAgICAgICAgICAgJiYgKCFBcnJheS5pc0FycmF5KHRoaXMuX3NjYWxlU3RlcHMpIHx8IHRoaXMuX3NjYWxlU3RlcHMuc29tZShmdW5jdGlvbiAodGgpIHsgcmV0dXJuIHR5cGVvZiB0aCAhPT0gJ251bWJlcic7IH0pKSkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IodGhpcy5fbmFtZSArIFwiIC0gZXhwZWN0ZWQgc2NhbGVTdGVwcyB0byBiZSBhbiBhcnJheSBvZiBudW1iZXJzXCIpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShNdGNubk9wdGlvbnMucHJvdG90eXBlLCBcIm1pbkZhY2VTaXplXCIsIHtcclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMuX21pbkZhY2VTaXplOyB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShNdGNubk9wdGlvbnMucHJvdG90eXBlLCBcInNjYWxlRmFjdG9yXCIsIHtcclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMuX3NjYWxlRmFjdG9yOyB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShNdGNubk9wdGlvbnMucHJvdG90eXBlLCBcIm1heE51bVNjYWxlc1wiLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLl9tYXhOdW1TY2FsZXM7IH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KE10Y25uT3B0aW9ucy5wcm90b3R5cGUsIFwic2NvcmVUaHJlc2hvbGRzXCIsIHtcclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMuX3Njb3JlVGhyZXNob2xkczsgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoTXRjbm5PcHRpb25zLnByb3RvdHlwZSwgXCJzY2FsZVN0ZXBzXCIsIHtcclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMuX3NjYWxlU3RlcHM7IH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgcmV0dXJuIE10Y25uT3B0aW9ucztcclxufSgpKTtcclxuZXhwb3J0IHsgTXRjbm5PcHRpb25zIH07XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPU10Y25uT3B0aW9ucy5qcy5tYXAiLCJpbXBvcnQgKiBhcyB0ZiBmcm9tICdAdGVuc29yZmxvdy90ZmpzLWNvcmUnO1xyXG5leHBvcnQgZnVuY3Rpb24gcG9pbnR3aXNlQ29udkxheWVyKHgsIHBhcmFtcywgc3RyaWRlcykge1xyXG4gICAgcmV0dXJuIHRmLnRpZHkoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBvdXQgPSB0Zi5jb252MmQoeCwgcGFyYW1zLmZpbHRlcnMsIHN0cmlkZXMsICdzYW1lJyk7XHJcbiAgICAgICAgb3V0ID0gdGYuYWRkKG91dCwgcGFyYW1zLmJhdGNoX25vcm1fb2Zmc2V0KTtcclxuICAgICAgICByZXR1cm4gdGYuY2xpcEJ5VmFsdWUob3V0LCAwLCA2KTtcclxuICAgIH0pO1xyXG59XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXBvaW50d2lzZUNvbnZMYXllci5qcy5tYXAiLCJleHBvcnQgZnVuY3Rpb24gbm9uTWF4U3VwcHJlc3Npb24oYm94ZXMsIHNjb3JlcywgbWF4T3V0cHV0U2l6ZSwgaW91VGhyZXNob2xkLCBzY29yZVRocmVzaG9sZCkge1xyXG4gICAgdmFyIG51bUJveGVzID0gYm94ZXMuc2hhcGVbMF07XHJcbiAgICB2YXIgb3V0cHV0U2l6ZSA9IE1hdGgubWluKG1heE91dHB1dFNpemUsIG51bUJveGVzKTtcclxuICAgIHZhciBjYW5kaWRhdGVzID0gc2NvcmVzXHJcbiAgICAgICAgLm1hcChmdW5jdGlvbiAoc2NvcmUsIGJveEluZGV4KSB7IHJldHVybiAoeyBzY29yZTogc2NvcmUsIGJveEluZGV4OiBib3hJbmRleCB9KTsgfSlcclxuICAgICAgICAuZmlsdGVyKGZ1bmN0aW9uIChjKSB7IHJldHVybiBjLnNjb3JlID4gc2NvcmVUaHJlc2hvbGQ7IH0pXHJcbiAgICAgICAgLnNvcnQoZnVuY3Rpb24gKGMxLCBjMikgeyByZXR1cm4gYzIuc2NvcmUgLSBjMS5zY29yZTsgfSk7XHJcbiAgICB2YXIgc3VwcHJlc3NGdW5jID0gZnVuY3Rpb24gKHgpIHsgcmV0dXJuIHggPD0gaW91VGhyZXNob2xkID8gMSA6IDA7IH07XHJcbiAgICB2YXIgc2VsZWN0ZWQgPSBbXTtcclxuICAgIGNhbmRpZGF0ZXMuZm9yRWFjaChmdW5jdGlvbiAoYykge1xyXG4gICAgICAgIGlmIChzZWxlY3RlZC5sZW5ndGggPj0gb3V0cHV0U2l6ZSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBvcmlnaW5hbFNjb3JlID0gYy5zY29yZTtcclxuICAgICAgICBmb3IgKHZhciBqID0gc2VsZWN0ZWQubGVuZ3RoIC0gMTsgaiA+PSAwOyAtLWopIHtcclxuICAgICAgICAgICAgdmFyIGlvdSA9IElPVShib3hlcywgYy5ib3hJbmRleCwgc2VsZWN0ZWRbal0pO1xyXG4gICAgICAgICAgICBpZiAoaW91ID09PSAwLjApIHtcclxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGMuc2NvcmUgKj0gc3VwcHJlc3NGdW5jKGlvdSk7XHJcbiAgICAgICAgICAgIGlmIChjLnNjb3JlIDw9IHNjb3JlVGhyZXNob2xkKSB7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAob3JpZ2luYWxTY29yZSA9PT0gYy5zY29yZSkge1xyXG4gICAgICAgICAgICBzZWxlY3RlZC5wdXNoKGMuYm94SW5kZXgpO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG4gICAgcmV0dXJuIHNlbGVjdGVkO1xyXG59XHJcbmZ1bmN0aW9uIElPVShib3hlcywgaSwgaikge1xyXG4gICAgdmFyIGJveGVzRGF0YSA9IGJveGVzLmFycmF5U3luYygpO1xyXG4gICAgdmFyIHltaW5JID0gTWF0aC5taW4oYm94ZXNEYXRhW2ldWzBdLCBib3hlc0RhdGFbaV1bMl0pO1xyXG4gICAgdmFyIHhtaW5JID0gTWF0aC5taW4oYm94ZXNEYXRhW2ldWzFdLCBib3hlc0RhdGFbaV1bM10pO1xyXG4gICAgdmFyIHltYXhJID0gTWF0aC5tYXgoYm94ZXNEYXRhW2ldWzBdLCBib3hlc0RhdGFbaV1bMl0pO1xyXG4gICAgdmFyIHhtYXhJID0gTWF0aC5tYXgoYm94ZXNEYXRhW2ldWzFdLCBib3hlc0RhdGFbaV1bM10pO1xyXG4gICAgdmFyIHltaW5KID0gTWF0aC5taW4oYm94ZXNEYXRhW2pdWzBdLCBib3hlc0RhdGFbal1bMl0pO1xyXG4gICAgdmFyIHhtaW5KID0gTWF0aC5taW4oYm94ZXNEYXRhW2pdWzFdLCBib3hlc0RhdGFbal1bM10pO1xyXG4gICAgdmFyIHltYXhKID0gTWF0aC5tYXgoYm94ZXNEYXRhW2pdWzBdLCBib3hlc0RhdGFbal1bMl0pO1xyXG4gICAgdmFyIHhtYXhKID0gTWF0aC5tYXgoYm94ZXNEYXRhW2pdWzFdLCBib3hlc0RhdGFbal1bM10pO1xyXG4gICAgdmFyIGFyZWFJID0gKHltYXhJIC0geW1pbkkpICogKHhtYXhJIC0geG1pbkkpO1xyXG4gICAgdmFyIGFyZWFKID0gKHltYXhKIC0geW1pbkopICogKHhtYXhKIC0geG1pbkopO1xyXG4gICAgaWYgKGFyZWFJIDw9IDAgfHwgYXJlYUogPD0gMCkge1xyXG4gICAgICAgIHJldHVybiAwLjA7XHJcbiAgICB9XHJcbiAgICB2YXIgaW50ZXJzZWN0aW9uWW1pbiA9IE1hdGgubWF4KHltaW5JLCB5bWluSik7XHJcbiAgICB2YXIgaW50ZXJzZWN0aW9uWG1pbiA9IE1hdGgubWF4KHhtaW5JLCB4bWluSik7XHJcbiAgICB2YXIgaW50ZXJzZWN0aW9uWW1heCA9IE1hdGgubWluKHltYXhJLCB5bWF4Sik7XHJcbiAgICB2YXIgaW50ZXJzZWN0aW9uWG1heCA9IE1hdGgubWluKHhtYXhJLCB4bWF4Sik7XHJcbiAgICB2YXIgaW50ZXJzZWN0aW9uQXJlYSA9IE1hdGgubWF4KGludGVyc2VjdGlvblltYXggLSBpbnRlcnNlY3Rpb25ZbWluLCAwLjApICpcclxuICAgICAgICBNYXRoLm1heChpbnRlcnNlY3Rpb25YbWF4IC0gaW50ZXJzZWN0aW9uWG1pbiwgMC4wKTtcclxuICAgIHJldHVybiBpbnRlcnNlY3Rpb25BcmVhIC8gKGFyZWFJICsgYXJlYUogLSBpbnRlcnNlY3Rpb25BcmVhKTtcclxufVxyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1ub25NYXhTdXBwcmVzc2lvbi5qcy5tYXAiLCJpbXBvcnQgKiBhcyB0ZiBmcm9tICdAdGVuc29yZmxvdy90ZmpzLWNvcmUnO1xyXG5pbXBvcnQgeyBjb252TGF5ZXIgfSBmcm9tICcuLi9jb21tb24nO1xyXG5leHBvcnQgZnVuY3Rpb24gYm94UHJlZGljdGlvbkxheWVyKHgsIHBhcmFtcykge1xyXG4gICAgcmV0dXJuIHRmLnRpZHkoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBiYXRjaFNpemUgPSB4LnNoYXBlWzBdO1xyXG4gICAgICAgIHZhciBib3hQcmVkaWN0aW9uRW5jb2RpbmcgPSB0Zi5yZXNoYXBlKGNvbnZMYXllcih4LCBwYXJhbXMuYm94X2VuY29kaW5nX3ByZWRpY3RvciksIFtiYXRjaFNpemUsIC0xLCAxLCA0XSk7XHJcbiAgICAgICAgdmFyIGNsYXNzUHJlZGljdGlvbiA9IHRmLnJlc2hhcGUoY29udkxheWVyKHgsIHBhcmFtcy5jbGFzc19wcmVkaWN0b3IpLCBbYmF0Y2hTaXplLCAtMSwgM10pO1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIGJveFByZWRpY3Rpb25FbmNvZGluZzogYm94UHJlZGljdGlvbkVuY29kaW5nLFxyXG4gICAgICAgICAgICBjbGFzc1ByZWRpY3Rpb246IGNsYXNzUHJlZGljdGlvblxyXG4gICAgICAgIH07XHJcbiAgICB9KTtcclxufVxyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1ib3hQcmVkaWN0aW9uTGF5ZXIuanMubWFwIiwidmFyIFNzZE1vYmlsZW5ldHYxT3B0aW9ucyA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIFNzZE1vYmlsZW5ldHYxT3B0aW9ucyhfYSkge1xyXG4gICAgICAgIHZhciBfYiA9IF9hID09PSB2b2lkIDAgPyB7fSA6IF9hLCBtaW5Db25maWRlbmNlID0gX2IubWluQ29uZmlkZW5jZSwgbWF4UmVzdWx0cyA9IF9iLm1heFJlc3VsdHM7XHJcbiAgICAgICAgdGhpcy5fbmFtZSA9ICdTc2RNb2JpbGVuZXR2MU9wdGlvbnMnO1xyXG4gICAgICAgIHRoaXMuX21pbkNvbmZpZGVuY2UgPSBtaW5Db25maWRlbmNlIHx8IDAuNTtcclxuICAgICAgICB0aGlzLl9tYXhSZXN1bHRzID0gbWF4UmVzdWx0cyB8fCAxMDA7XHJcbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLl9taW5Db25maWRlbmNlICE9PSAnbnVtYmVyJyB8fCB0aGlzLl9taW5Db25maWRlbmNlIDw9IDAgfHwgdGhpcy5fbWluQ29uZmlkZW5jZSA+PSAxKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcih0aGlzLl9uYW1lICsgXCIgLSBleHBlY3RlZCBtaW5Db25maWRlbmNlIHRvIGJlIGEgbnVtYmVyIGJldHdlZW4gMCBhbmQgMVwiKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLl9tYXhSZXN1bHRzICE9PSAnbnVtYmVyJykge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IodGhpcy5fbmFtZSArIFwiIC0gZXhwZWN0ZWQgbWF4UmVzdWx0cyB0byBiZSBhIG51bWJlclwiKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoU3NkTW9iaWxlbmV0djFPcHRpb25zLnByb3RvdHlwZSwgXCJtaW5Db25maWRlbmNlXCIsIHtcclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMuX21pbkNvbmZpZGVuY2U7IH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFNzZE1vYmlsZW5ldHYxT3B0aW9ucy5wcm90b3R5cGUsIFwibWF4UmVzdWx0c1wiLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLl9tYXhSZXN1bHRzOyB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIHJldHVybiBTc2RNb2JpbGVuZXR2MU9wdGlvbnM7XHJcbn0oKSk7XHJcbmV4cG9ydCB7IFNzZE1vYmlsZW5ldHYxT3B0aW9ucyB9O1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1Tc2RNb2JpbGVuZXR2MU9wdGlvbnMuanMubWFwIiwiaW1wb3J0IHsgX19hd2FpdGVyLCBfX2V4dGVuZHMsIF9fZ2VuZXJhdG9yIH0gZnJvbSBcInRzbGliXCI7XHJcbmltcG9ydCAqIGFzIHRmIGZyb20gJ0B0ZW5zb3JmbG93L3RmanMtY29yZSc7XHJcbmltcG9ydCB7IFJlY3QgfSBmcm9tICcuLi9jbGFzc2VzJztcclxuaW1wb3J0IHsgRmFjZURldGVjdGlvbiB9IGZyb20gJy4uL2NsYXNzZXMvRmFjZURldGVjdGlvbic7XHJcbmltcG9ydCB7IHRvTmV0SW5wdXQgfSBmcm9tICcuLi9kb20nO1xyXG5pbXBvcnQgeyBOZXVyYWxOZXR3b3JrIH0gZnJvbSAnLi4vTmV1cmFsTmV0d29yayc7XHJcbmltcG9ydCB7IGV4dHJhY3RQYXJhbXMgfSBmcm9tICcuL2V4dHJhY3RQYXJhbXMnO1xyXG5pbXBvcnQgeyBleHRyYWN0UGFyYW1zRnJvbVdlaWd0aE1hcCB9IGZyb20gJy4vZXh0cmFjdFBhcmFtc0Zyb21XZWlndGhNYXAnO1xyXG5pbXBvcnQgeyBtb2JpbGVOZXRWMSB9IGZyb20gJy4vbW9iaWxlTmV0VjEnO1xyXG5pbXBvcnQgeyBub25NYXhTdXBwcmVzc2lvbiB9IGZyb20gJy4vbm9uTWF4U3VwcHJlc3Npb24nO1xyXG5pbXBvcnQgeyBvdXRwdXRMYXllciB9IGZyb20gJy4vb3V0cHV0TGF5ZXInO1xyXG5pbXBvcnQgeyBwcmVkaWN0aW9uTGF5ZXIgfSBmcm9tICcuL3ByZWRpY3Rpb25MYXllcic7XHJcbmltcG9ydCB7IFNzZE1vYmlsZW5ldHYxT3B0aW9ucyB9IGZyb20gJy4vU3NkTW9iaWxlbmV0djFPcHRpb25zJztcclxudmFyIFNzZE1vYmlsZW5ldHYxID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xyXG4gICAgX19leHRlbmRzKFNzZE1vYmlsZW5ldHYxLCBfc3VwZXIpO1xyXG4gICAgZnVuY3Rpb24gU3NkTW9iaWxlbmV0djEoKSB7XHJcbiAgICAgICAgcmV0dXJuIF9zdXBlci5jYWxsKHRoaXMsICdTc2RNb2JpbGVuZXR2MScpIHx8IHRoaXM7XHJcbiAgICB9XHJcbiAgICBTc2RNb2JpbGVuZXR2MS5wcm90b3R5cGUuZm9yd2FyZElucHV0ID0gZnVuY3Rpb24gKGlucHV0KSB7XHJcbiAgICAgICAgdmFyIHBhcmFtcyA9IHRoaXMucGFyYW1zO1xyXG4gICAgICAgIGlmICghcGFyYW1zKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignU3NkTW9iaWxlbmV0djEgLSBsb2FkIG1vZGVsIGJlZm9yZSBpbmZlcmVuY2UnKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRmLnRpZHkoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgYmF0Y2hUZW5zb3IgPSBpbnB1dC50b0JhdGNoVGVuc29yKDUxMiwgZmFsc2UpLnRvRmxvYXQoKTtcclxuICAgICAgICAgICAgdmFyIHggPSB0Zi5zdWIodGYubXVsKGJhdGNoVGVuc29yLCB0Zi5zY2FsYXIoMC4wMDc4NDMxMzc3MTg3MzcxMjUpKSwgdGYuc2NhbGFyKDEpKTtcclxuICAgICAgICAgICAgdmFyIGZlYXR1cmVzID0gbW9iaWxlTmV0VjEoeCwgcGFyYW1zLm1vYmlsZW5ldHYxKTtcclxuICAgICAgICAgICAgdmFyIF9hID0gcHJlZGljdGlvbkxheWVyKGZlYXR1cmVzLm91dCwgZmVhdHVyZXMuY29udjExLCBwYXJhbXMucHJlZGljdGlvbl9sYXllciksIGJveFByZWRpY3Rpb25zID0gX2EuYm94UHJlZGljdGlvbnMsIGNsYXNzUHJlZGljdGlvbnMgPSBfYS5jbGFzc1ByZWRpY3Rpb25zO1xyXG4gICAgICAgICAgICByZXR1cm4gb3V0cHV0TGF5ZXIoYm94UHJlZGljdGlvbnMsIGNsYXNzUHJlZGljdGlvbnMsIHBhcmFtcy5vdXRwdXRfbGF5ZXIpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIFNzZE1vYmlsZW5ldHYxLnByb3RvdHlwZS5mb3J3YXJkID0gZnVuY3Rpb24gKGlucHV0KSB7XHJcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgX2E7XHJcbiAgICAgICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2IpIHtcclxuICAgICAgICAgICAgICAgIHN3aXRjaCAoX2IubGFiZWwpIHtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hID0gdGhpcy5mb3J3YXJkSW5wdXQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHRvTmV0SW5wdXQoaW5wdXQpXTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6IHJldHVybiBbMiAvKnJldHVybiovLCBfYS5hcHBseSh0aGlzLCBbX2Iuc2VudCgpXSldO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBTc2RNb2JpbGVuZXR2MS5wcm90b3R5cGUubG9jYXRlRmFjZXMgPSBmdW5jdGlvbiAoaW5wdXQsIG9wdGlvbnMpIHtcclxuICAgICAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7IG9wdGlvbnMgPSB7fTsgfVxyXG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIF9hLCBtYXhSZXN1bHRzLCBtaW5Db25maWRlbmNlLCBuZXRJbnB1dCwgX2IsIF9ib3hlcywgX3Njb3JlcywgYm94ZXMsIHNjb3JlcywgaSwgc2NvcmVzRGF0YSwgX2MsIF9kLCBpb3VUaHJlc2hvbGQsIGluZGljZXMsIHJlc2hhcGVkRGltcywgaW5wdXRTaXplLCBwYWRYLCBwYWRZLCBib3hlc0RhdGEsIHJlc3VsdHM7XHJcbiAgICAgICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2UpIHtcclxuICAgICAgICAgICAgICAgIHN3aXRjaCAoX2UubGFiZWwpIHtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hID0gbmV3IFNzZE1vYmlsZW5ldHYxT3B0aW9ucyhvcHRpb25zKSwgbWF4UmVzdWx0cyA9IF9hLm1heFJlc3VsdHMsIG1pbkNvbmZpZGVuY2UgPSBfYS5taW5Db25maWRlbmNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCB0b05ldElucHV0KGlucHV0KV07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXRJbnB1dCA9IF9lLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2IgPSB0aGlzLmZvcndhcmRJbnB1dChuZXRJbnB1dCksIF9ib3hlcyA9IF9iLmJveGVzLCBfc2NvcmVzID0gX2Iuc2NvcmVzO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBib3hlcyA9IF9ib3hlc1swXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2NvcmVzID0gX3Njb3Jlc1swXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChpID0gMTsgaSA8IF9ib3hlcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX2JveGVzW2ldLmRpc3Bvc2UoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9zY29yZXNbaV0uZGlzcG9zZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9kID0gKF9jID0gQXJyYXkpLmZyb207XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHNjb3Jlcy5kYXRhKCldO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2NvcmVzRGF0YSA9IF9kLmFwcGx5KF9jLCBbX2Uuc2VudCgpXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlvdVRocmVzaG9sZCA9IDAuNTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaW5kaWNlcyA9IG5vbk1heFN1cHByZXNzaW9uKGJveGVzLCBzY29yZXNEYXRhLCBtYXhSZXN1bHRzLCBpb3VUaHJlc2hvbGQsIG1pbkNvbmZpZGVuY2UpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXNoYXBlZERpbXMgPSBuZXRJbnB1dC5nZXRSZXNoYXBlZElucHV0RGltZW5zaW9ucygwKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaW5wdXRTaXplID0gbmV0SW5wdXQuaW5wdXRTaXplO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwYWRYID0gaW5wdXRTaXplIC8gcmVzaGFwZWREaW1zLndpZHRoO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwYWRZID0gaW5wdXRTaXplIC8gcmVzaGFwZWREaW1zLmhlaWdodDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYm94ZXNEYXRhID0gYm94ZXMuYXJyYXlTeW5jKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdHMgPSBpbmRpY2VzXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAubWFwKGZ1bmN0aW9uIChpZHgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBfYSA9IFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBNYXRoLm1heCgwLCBib3hlc0RhdGFbaWR4XVswXSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTWF0aC5taW4oMS4wLCBib3hlc0RhdGFbaWR4XVsyXSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0ubWFwKGZ1bmN0aW9uICh2YWwpIHsgcmV0dXJuIHZhbCAqIHBhZFk7IH0pLCB0b3AgPSBfYVswXSwgYm90dG9tID0gX2FbMV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgX2IgPSBbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTWF0aC5tYXgoMCwgYm94ZXNEYXRhW2lkeF1bMV0pLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE1hdGgubWluKDEuMCwgYm94ZXNEYXRhW2lkeF1bM10pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdLm1hcChmdW5jdGlvbiAodmFsKSB7IHJldHVybiB2YWwgKiBwYWRYOyB9KSwgbGVmdCA9IF9iWzBdLCByaWdodCA9IF9iWzFdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBGYWNlRGV0ZWN0aW9uKHNjb3Jlc0RhdGFbaWR4XSwgbmV3IFJlY3QobGVmdCwgdG9wLCByaWdodCAtIGxlZnQsIGJvdHRvbSAtIHRvcCksIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IG5ldElucHV0LmdldElucHV0SGVpZ2h0KDApLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiBuZXRJbnB1dC5nZXRJbnB1dFdpZHRoKDApXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJveGVzLmRpc3Bvc2UoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2NvcmVzLmRpc3Bvc2UoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIHJlc3VsdHNdO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBTc2RNb2JpbGVuZXR2MS5wcm90b3R5cGUuZ2V0RGVmYXVsdE1vZGVsTmFtZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gJ3NzZF9tb2JpbGVuZXR2MV9tb2RlbCc7XHJcbiAgICB9O1xyXG4gICAgU3NkTW9iaWxlbmV0djEucHJvdG90eXBlLmV4dHJhY3RQYXJhbXNGcm9tV2VpZ3RoTWFwID0gZnVuY3Rpb24gKHdlaWdodE1hcCkge1xyXG4gICAgICAgIHJldHVybiBleHRyYWN0UGFyYW1zRnJvbVdlaWd0aE1hcCh3ZWlnaHRNYXApO1xyXG4gICAgfTtcclxuICAgIFNzZE1vYmlsZW5ldHYxLnByb3RvdHlwZS5leHRyYWN0UGFyYW1zID0gZnVuY3Rpb24gKHdlaWdodHMpIHtcclxuICAgICAgICByZXR1cm4gZXh0cmFjdFBhcmFtcyh3ZWlnaHRzKTtcclxuICAgIH07XHJcbiAgICByZXR1cm4gU3NkTW9iaWxlbmV0djE7XHJcbn0oTmV1cmFsTmV0d29yaykpO1xyXG5leHBvcnQgeyBTc2RNb2JpbGVuZXR2MSB9O1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1Tc2RNb2JpbGVuZXR2MS5qcy5tYXAiLCJpbXBvcnQgKiBhcyB0ZiBmcm9tICdAdGVuc29yZmxvdy90ZmpzLWNvcmUnO1xyXG5pbXBvcnQgeyBwb2ludHdpc2VDb252TGF5ZXIgfSBmcm9tICcuL3BvaW50d2lzZUNvbnZMYXllcic7XHJcbnZhciBlcHNpbG9uID0gMC4wMDEwMDAwMDAwNDc0OTc0NTEzO1xyXG5mdW5jdGlvbiBkZXB0aHdpc2VDb252TGF5ZXIoeCwgcGFyYW1zLCBzdHJpZGVzKSB7XHJcbiAgICByZXR1cm4gdGYudGlkeShmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIG91dCA9IHRmLmRlcHRod2lzZUNvbnYyZCh4LCBwYXJhbXMuZmlsdGVycywgc3RyaWRlcywgJ3NhbWUnKTtcclxuICAgICAgICBvdXQgPSB0Zi5iYXRjaE5vcm0ob3V0LCBwYXJhbXMuYmF0Y2hfbm9ybV9tZWFuLCBwYXJhbXMuYmF0Y2hfbm9ybV92YXJpYW5jZSwgcGFyYW1zLmJhdGNoX25vcm1fb2Zmc2V0LCBwYXJhbXMuYmF0Y2hfbm9ybV9zY2FsZSwgZXBzaWxvbik7XHJcbiAgICAgICAgcmV0dXJuIHRmLmNsaXBCeVZhbHVlKG91dCwgMCwgNik7XHJcbiAgICB9KTtcclxufVxyXG5mdW5jdGlvbiBnZXRTdHJpZGVzRm9yTGF5ZXJJZHgobGF5ZXJJZHgpIHtcclxuICAgIHJldHVybiBbMiwgNCwgNiwgMTJdLnNvbWUoZnVuY3Rpb24gKGlkeCkgeyByZXR1cm4gaWR4ID09PSBsYXllcklkeDsgfSkgPyBbMiwgMl0gOiBbMSwgMV07XHJcbn1cclxuZXhwb3J0IGZ1bmN0aW9uIG1vYmlsZU5ldFYxKHgsIHBhcmFtcykge1xyXG4gICAgcmV0dXJuIHRmLnRpZHkoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBjb252MTEgPSBudWxsO1xyXG4gICAgICAgIHZhciBvdXQgPSBwb2ludHdpc2VDb252TGF5ZXIoeCwgcGFyYW1zLmNvbnZfMCwgWzIsIDJdKTtcclxuICAgICAgICB2YXIgY29udlBhaXJQYXJhbXMgPSBbXHJcbiAgICAgICAgICAgIHBhcmFtcy5jb252XzEsXHJcbiAgICAgICAgICAgIHBhcmFtcy5jb252XzIsXHJcbiAgICAgICAgICAgIHBhcmFtcy5jb252XzMsXHJcbiAgICAgICAgICAgIHBhcmFtcy5jb252XzQsXHJcbiAgICAgICAgICAgIHBhcmFtcy5jb252XzUsXHJcbiAgICAgICAgICAgIHBhcmFtcy5jb252XzYsXHJcbiAgICAgICAgICAgIHBhcmFtcy5jb252XzcsXHJcbiAgICAgICAgICAgIHBhcmFtcy5jb252XzgsXHJcbiAgICAgICAgICAgIHBhcmFtcy5jb252XzksXHJcbiAgICAgICAgICAgIHBhcmFtcy5jb252XzEwLFxyXG4gICAgICAgICAgICBwYXJhbXMuY29udl8xMSxcclxuICAgICAgICAgICAgcGFyYW1zLmNvbnZfMTIsXHJcbiAgICAgICAgICAgIHBhcmFtcy5jb252XzEzXHJcbiAgICAgICAgXTtcclxuICAgICAgICBjb252UGFpclBhcmFtcy5mb3JFYWNoKGZ1bmN0aW9uIChwYXJhbSwgaSkge1xyXG4gICAgICAgICAgICB2YXIgbGF5ZXJJZHggPSBpICsgMTtcclxuICAgICAgICAgICAgdmFyIGRlcHRod2lzZUNvbnZTdHJpZGVzID0gZ2V0U3RyaWRlc0ZvckxheWVySWR4KGxheWVySWR4KTtcclxuICAgICAgICAgICAgb3V0ID0gZGVwdGh3aXNlQ29udkxheWVyKG91dCwgcGFyYW0uZGVwdGh3aXNlX2NvbnYsIGRlcHRod2lzZUNvbnZTdHJpZGVzKTtcclxuICAgICAgICAgICAgb3V0ID0gcG9pbnR3aXNlQ29udkxheWVyKG91dCwgcGFyYW0ucG9pbnR3aXNlX2NvbnYsIFsxLCAxXSk7XHJcbiAgICAgICAgICAgIGlmIChsYXllcklkeCA9PT0gMTEpIHtcclxuICAgICAgICAgICAgICAgIGNvbnYxMSA9IG91dDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGlmIChjb252MTEgPT09IG51bGwpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdtb2JpbGVOZXRWMSAtIG91dHB1dCBvZiBjb252IGxheWVyIDExIGlzIG51bGwnKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgb3V0OiBvdXQsXHJcbiAgICAgICAgICAgIGNvbnYxMTogY29udjExXHJcbiAgICAgICAgfTtcclxuICAgIH0pO1xyXG59XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1vYmlsZU5ldFYxLmpzLm1hcCIsImltcG9ydCAqIGFzIHRmIGZyb20gJ0B0ZW5zb3JmbG93L3RmanMtY29yZSc7XHJcbmltcG9ydCB7IGJveFByZWRpY3Rpb25MYXllciB9IGZyb20gJy4vYm94UHJlZGljdGlvbkxheWVyJztcclxuaW1wb3J0IHsgcG9pbnR3aXNlQ29udkxheWVyIH0gZnJvbSAnLi9wb2ludHdpc2VDb252TGF5ZXInO1xyXG5leHBvcnQgZnVuY3Rpb24gcHJlZGljdGlvbkxheWVyKHgsIGNvbnYxMSwgcGFyYW1zKSB7XHJcbiAgICByZXR1cm4gdGYudGlkeShmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIGNvbnYwID0gcG9pbnR3aXNlQ29udkxheWVyKHgsIHBhcmFtcy5jb252XzAsIFsxLCAxXSk7XHJcbiAgICAgICAgdmFyIGNvbnYxID0gcG9pbnR3aXNlQ29udkxheWVyKGNvbnYwLCBwYXJhbXMuY29udl8xLCBbMiwgMl0pO1xyXG4gICAgICAgIHZhciBjb252MiA9IHBvaW50d2lzZUNvbnZMYXllcihjb252MSwgcGFyYW1zLmNvbnZfMiwgWzEsIDFdKTtcclxuICAgICAgICB2YXIgY29udjMgPSBwb2ludHdpc2VDb252TGF5ZXIoY29udjIsIHBhcmFtcy5jb252XzMsIFsyLCAyXSk7XHJcbiAgICAgICAgdmFyIGNvbnY0ID0gcG9pbnR3aXNlQ29udkxheWVyKGNvbnYzLCBwYXJhbXMuY29udl80LCBbMSwgMV0pO1xyXG4gICAgICAgIHZhciBjb252NSA9IHBvaW50d2lzZUNvbnZMYXllcihjb252NCwgcGFyYW1zLmNvbnZfNSwgWzIsIDJdKTtcclxuICAgICAgICB2YXIgY29udjYgPSBwb2ludHdpc2VDb252TGF5ZXIoY29udjUsIHBhcmFtcy5jb252XzYsIFsxLCAxXSk7XHJcbiAgICAgICAgdmFyIGNvbnY3ID0gcG9pbnR3aXNlQ29udkxheWVyKGNvbnY2LCBwYXJhbXMuY29udl83LCBbMiwgMl0pO1xyXG4gICAgICAgIHZhciBib3hQcmVkaWN0aW9uMCA9IGJveFByZWRpY3Rpb25MYXllcihjb252MTEsIHBhcmFtcy5ib3hfcHJlZGljdG9yXzApO1xyXG4gICAgICAgIHZhciBib3hQcmVkaWN0aW9uMSA9IGJveFByZWRpY3Rpb25MYXllcih4LCBwYXJhbXMuYm94X3ByZWRpY3Rvcl8xKTtcclxuICAgICAgICB2YXIgYm94UHJlZGljdGlvbjIgPSBib3hQcmVkaWN0aW9uTGF5ZXIoY29udjEsIHBhcmFtcy5ib3hfcHJlZGljdG9yXzIpO1xyXG4gICAgICAgIHZhciBib3hQcmVkaWN0aW9uMyA9IGJveFByZWRpY3Rpb25MYXllcihjb252MywgcGFyYW1zLmJveF9wcmVkaWN0b3JfMyk7XHJcbiAgICAgICAgdmFyIGJveFByZWRpY3Rpb240ID0gYm94UHJlZGljdGlvbkxheWVyKGNvbnY1LCBwYXJhbXMuYm94X3ByZWRpY3Rvcl80KTtcclxuICAgICAgICB2YXIgYm94UHJlZGljdGlvbjUgPSBib3hQcmVkaWN0aW9uTGF5ZXIoY29udjcsIHBhcmFtcy5ib3hfcHJlZGljdG9yXzUpO1xyXG4gICAgICAgIHZhciBib3hQcmVkaWN0aW9ucyA9IHRmLmNvbmNhdChbXHJcbiAgICAgICAgICAgIGJveFByZWRpY3Rpb24wLmJveFByZWRpY3Rpb25FbmNvZGluZyxcclxuICAgICAgICAgICAgYm94UHJlZGljdGlvbjEuYm94UHJlZGljdGlvbkVuY29kaW5nLFxyXG4gICAgICAgICAgICBib3hQcmVkaWN0aW9uMi5ib3hQcmVkaWN0aW9uRW5jb2RpbmcsXHJcbiAgICAgICAgICAgIGJveFByZWRpY3Rpb24zLmJveFByZWRpY3Rpb25FbmNvZGluZyxcclxuICAgICAgICAgICAgYm94UHJlZGljdGlvbjQuYm94UHJlZGljdGlvbkVuY29kaW5nLFxyXG4gICAgICAgICAgICBib3hQcmVkaWN0aW9uNS5ib3hQcmVkaWN0aW9uRW5jb2RpbmdcclxuICAgICAgICBdLCAxKTtcclxuICAgICAgICB2YXIgY2xhc3NQcmVkaWN0aW9ucyA9IHRmLmNvbmNhdChbXHJcbiAgICAgICAgICAgIGJveFByZWRpY3Rpb24wLmNsYXNzUHJlZGljdGlvbixcclxuICAgICAgICAgICAgYm94UHJlZGljdGlvbjEuY2xhc3NQcmVkaWN0aW9uLFxyXG4gICAgICAgICAgICBib3hQcmVkaWN0aW9uMi5jbGFzc1ByZWRpY3Rpb24sXHJcbiAgICAgICAgICAgIGJveFByZWRpY3Rpb24zLmNsYXNzUHJlZGljdGlvbixcclxuICAgICAgICAgICAgYm94UHJlZGljdGlvbjQuY2xhc3NQcmVkaWN0aW9uLFxyXG4gICAgICAgICAgICBib3hQcmVkaWN0aW9uNS5jbGFzc1ByZWRpY3Rpb25cclxuICAgICAgICBdLCAxKTtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBib3hQcmVkaWN0aW9uczogYm94UHJlZGljdGlvbnMsXHJcbiAgICAgICAgICAgIGNsYXNzUHJlZGljdGlvbnM6IGNsYXNzUHJlZGljdGlvbnNcclxuICAgICAgICB9O1xyXG4gICAgfSk7XHJcbn1cclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cHJlZGljdGlvbkxheWVyLmpzLm1hcCIsImltcG9ydCAqIGFzIHRmIGZyb20gJ0B0ZW5zb3JmbG93L3RmanMtY29yZSc7XHJcbmZ1bmN0aW9uIGdldENlbnRlckNvb3JkaW5hdGVzQW5kU2l6ZXNMYXllcih4KSB7XHJcbiAgICB2YXIgdmVjID0gdGYudW5zdGFjayh0Zi50cmFuc3Bvc2UoeCwgWzEsIDBdKSk7XHJcbiAgICB2YXIgc2l6ZXMgPSBbXHJcbiAgICAgICAgdGYuc3ViKHZlY1syXSwgdmVjWzBdKSxcclxuICAgICAgICB0Zi5zdWIodmVjWzNdLCB2ZWNbMV0pXHJcbiAgICBdO1xyXG4gICAgdmFyIGNlbnRlcnMgPSBbXHJcbiAgICAgICAgdGYuYWRkKHZlY1swXSwgdGYuZGl2KHNpemVzWzBdLCB0Zi5zY2FsYXIoMikpKSxcclxuICAgICAgICB0Zi5hZGQodmVjWzFdLCB0Zi5kaXYoc2l6ZXNbMV0sIHRmLnNjYWxhcigyKSkpXHJcbiAgICBdO1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBzaXplczogc2l6ZXMsXHJcbiAgICAgICAgY2VudGVyczogY2VudGVyc1xyXG4gICAgfTtcclxufVxyXG5mdW5jdGlvbiBkZWNvZGVCb3hlc0xheWVyKHgwLCB4MSkge1xyXG4gICAgdmFyIF9hID0gZ2V0Q2VudGVyQ29vcmRpbmF0ZXNBbmRTaXplc0xheWVyKHgwKSwgc2l6ZXMgPSBfYS5zaXplcywgY2VudGVycyA9IF9hLmNlbnRlcnM7XHJcbiAgICB2YXIgdmVjID0gdGYudW5zdGFjayh0Zi50cmFuc3Bvc2UoeDEsIFsxLCAwXSkpO1xyXG4gICAgdmFyIGRpdjBfb3V0ID0gdGYuZGl2KHRmLm11bCh0Zi5leHAodGYuZGl2KHZlY1syXSwgdGYuc2NhbGFyKDUpKSksIHNpemVzWzBdKSwgdGYuc2NhbGFyKDIpKTtcclxuICAgIHZhciBhZGQwX291dCA9IHRmLmFkZCh0Zi5tdWwodGYuZGl2KHZlY1swXSwgdGYuc2NhbGFyKDEwKSksIHNpemVzWzBdKSwgY2VudGVyc1swXSk7XHJcbiAgICB2YXIgZGl2MV9vdXQgPSB0Zi5kaXYodGYubXVsKHRmLmV4cCh0Zi5kaXYodmVjWzNdLCB0Zi5zY2FsYXIoNSkpKSwgc2l6ZXNbMV0pLCB0Zi5zY2FsYXIoMikpO1xyXG4gICAgdmFyIGFkZDFfb3V0ID0gdGYuYWRkKHRmLm11bCh0Zi5kaXYodmVjWzFdLCB0Zi5zY2FsYXIoMTApKSwgc2l6ZXNbMV0pLCBjZW50ZXJzWzFdKTtcclxuICAgIHJldHVybiB0Zi50cmFuc3Bvc2UodGYuc3RhY2soW1xyXG4gICAgICAgIHRmLnN1YihhZGQwX291dCwgZGl2MF9vdXQpLFxyXG4gICAgICAgIHRmLnN1YihhZGQxX291dCwgZGl2MV9vdXQpLFxyXG4gICAgICAgIHRmLmFkZChhZGQwX291dCwgZGl2MF9vdXQpLFxyXG4gICAgICAgIHRmLmFkZChhZGQxX291dCwgZGl2MV9vdXQpXHJcbiAgICBdKSwgWzEsIDBdKTtcclxufVxyXG5leHBvcnQgZnVuY3Rpb24gb3V0cHV0TGF5ZXIoYm94UHJlZGljdGlvbnMsIGNsYXNzUHJlZGljdGlvbnMsIHBhcmFtcykge1xyXG4gICAgcmV0dXJuIHRmLnRpZHkoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBiYXRjaFNpemUgPSBib3hQcmVkaWN0aW9ucy5zaGFwZVswXTtcclxuICAgICAgICB2YXIgYm94ZXMgPSBkZWNvZGVCb3hlc0xheWVyKHRmLnJlc2hhcGUodGYudGlsZShwYXJhbXMuZXh0cmFfZGltLCBbYmF0Y2hTaXplLCAxLCAxXSksIFstMSwgNF0pLCB0Zi5yZXNoYXBlKGJveFByZWRpY3Rpb25zLCBbLTEsIDRdKSk7XHJcbiAgICAgICAgYm94ZXMgPSB0Zi5yZXNoYXBlKGJveGVzLCBbYmF0Y2hTaXplLCAoYm94ZXMuc2hhcGVbMF0gLyBiYXRjaFNpemUpLCA0XSk7XHJcbiAgICAgICAgdmFyIHNjb3Jlc0FuZENsYXNzZXMgPSB0Zi5zaWdtb2lkKHRmLnNsaWNlKGNsYXNzUHJlZGljdGlvbnMsIFswLCAwLCAxXSwgWy0xLCAtMSwgLTFdKSk7XHJcbiAgICAgICAgdmFyIHNjb3JlcyA9IHRmLnNsaWNlKHNjb3Jlc0FuZENsYXNzZXMsIFswLCAwLCAwXSwgWy0xLCAtMSwgMV0pO1xyXG4gICAgICAgIHNjb3JlcyA9IHRmLnJlc2hhcGUoc2NvcmVzLCBbYmF0Y2hTaXplLCBzY29yZXMuc2hhcGVbMV1dKTtcclxuICAgICAgICB2YXIgYm94ZXNCeUJhdGNoID0gdGYudW5zdGFjayhib3hlcyk7XHJcbiAgICAgICAgdmFyIHNjb3Jlc0J5QmF0Y2ggPSB0Zi51bnN0YWNrKHNjb3Jlcyk7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgYm94ZXM6IGJveGVzQnlCYXRjaCxcclxuICAgICAgICAgICAgc2NvcmVzOiBzY29yZXNCeUJhdGNoXHJcbiAgICAgICAgfTtcclxuICAgIH0pO1xyXG59XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW91dHB1dExheWVyLmpzLm1hcCIsImltcG9ydCB7IGRpc3Bvc2VVbnVzZWRXZWlnaHRUZW5zb3JzLCBleHRyYWN0V2VpZ2h0RW50cnlGYWN0b3J5IH0gZnJvbSAnLi4vY29tbW9uJztcclxuaW1wb3J0IHsgaXNUZW5zb3IzRCB9IGZyb20gJy4uL3V0aWxzJztcclxuZnVuY3Rpb24gZXh0cmFjdG9yc0ZhY3Rvcnkod2VpZ2h0TWFwLCBwYXJhbU1hcHBpbmdzKSB7XHJcbiAgICB2YXIgZXh0cmFjdFdlaWdodEVudHJ5ID0gZXh0cmFjdFdlaWdodEVudHJ5RmFjdG9yeSh3ZWlnaHRNYXAsIHBhcmFtTWFwcGluZ3MpO1xyXG4gICAgZnVuY3Rpb24gZXh0cmFjdFBvaW50d2lzZUNvbnZQYXJhbXMocHJlZml4LCBpZHgsIG1hcHBlZFByZWZpeCkge1xyXG4gICAgICAgIHZhciBmaWx0ZXJzID0gZXh0cmFjdFdlaWdodEVudHJ5KHByZWZpeCArIFwiL0NvbnYyZF9cIiArIGlkeCArIFwiX3BvaW50d2lzZS93ZWlnaHRzXCIsIDQsIG1hcHBlZFByZWZpeCArIFwiL2ZpbHRlcnNcIik7XHJcbiAgICAgICAgdmFyIGJhdGNoX25vcm1fb2Zmc2V0ID0gZXh0cmFjdFdlaWdodEVudHJ5KHByZWZpeCArIFwiL0NvbnYyZF9cIiArIGlkeCArIFwiX3BvaW50d2lzZS9jb252b2x1dGlvbl9ibl9vZmZzZXRcIiwgMSwgbWFwcGVkUHJlZml4ICsgXCIvYmF0Y2hfbm9ybV9vZmZzZXRcIik7XHJcbiAgICAgICAgcmV0dXJuIHsgZmlsdGVyczogZmlsdGVycywgYmF0Y2hfbm9ybV9vZmZzZXQ6IGJhdGNoX25vcm1fb2Zmc2V0IH07XHJcbiAgICB9XHJcbiAgICBmdW5jdGlvbiBleHRyYWN0Q29udlBhaXJQYXJhbXMoaWR4KSB7XHJcbiAgICAgICAgdmFyIG1hcHBlZFByZWZpeCA9IFwibW9iaWxlbmV0djEvY29udl9cIiArIGlkeDtcclxuICAgICAgICB2YXIgcHJlZml4RGVwdGh3aXNlQ29udiA9IFwiTW9iaWxlbmV0VjEvQ29udjJkX1wiICsgaWR4ICsgXCJfZGVwdGh3aXNlXCI7XHJcbiAgICAgICAgdmFyIG1hcHBlZFByZWZpeERlcHRod2lzZUNvbnYgPSBtYXBwZWRQcmVmaXggKyBcIi9kZXB0aHdpc2VfY29udlwiO1xyXG4gICAgICAgIHZhciBtYXBwZWRQcmVmaXhQb2ludHdpc2VDb252ID0gbWFwcGVkUHJlZml4ICsgXCIvcG9pbnR3aXNlX2NvbnZcIjtcclxuICAgICAgICB2YXIgZmlsdGVycyA9IGV4dHJhY3RXZWlnaHRFbnRyeShwcmVmaXhEZXB0aHdpc2VDb252ICsgXCIvZGVwdGh3aXNlX3dlaWdodHNcIiwgNCwgbWFwcGVkUHJlZml4RGVwdGh3aXNlQ29udiArIFwiL2ZpbHRlcnNcIik7XHJcbiAgICAgICAgdmFyIGJhdGNoX25vcm1fc2NhbGUgPSBleHRyYWN0V2VpZ2h0RW50cnkocHJlZml4RGVwdGh3aXNlQ29udiArIFwiL0JhdGNoTm9ybS9nYW1tYVwiLCAxLCBtYXBwZWRQcmVmaXhEZXB0aHdpc2VDb252ICsgXCIvYmF0Y2hfbm9ybV9zY2FsZVwiKTtcclxuICAgICAgICB2YXIgYmF0Y2hfbm9ybV9vZmZzZXQgPSBleHRyYWN0V2VpZ2h0RW50cnkocHJlZml4RGVwdGh3aXNlQ29udiArIFwiL0JhdGNoTm9ybS9iZXRhXCIsIDEsIG1hcHBlZFByZWZpeERlcHRod2lzZUNvbnYgKyBcIi9iYXRjaF9ub3JtX29mZnNldFwiKTtcclxuICAgICAgICB2YXIgYmF0Y2hfbm9ybV9tZWFuID0gZXh0cmFjdFdlaWdodEVudHJ5KHByZWZpeERlcHRod2lzZUNvbnYgKyBcIi9CYXRjaE5vcm0vbW92aW5nX21lYW5cIiwgMSwgbWFwcGVkUHJlZml4RGVwdGh3aXNlQ29udiArIFwiL2JhdGNoX25vcm1fbWVhblwiKTtcclxuICAgICAgICB2YXIgYmF0Y2hfbm9ybV92YXJpYW5jZSA9IGV4dHJhY3RXZWlnaHRFbnRyeShwcmVmaXhEZXB0aHdpc2VDb252ICsgXCIvQmF0Y2hOb3JtL21vdmluZ192YXJpYW5jZVwiLCAxLCBtYXBwZWRQcmVmaXhEZXB0aHdpc2VDb252ICsgXCIvYmF0Y2hfbm9ybV92YXJpYW5jZVwiKTtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBkZXB0aHdpc2VfY29udjoge1xyXG4gICAgICAgICAgICAgICAgZmlsdGVyczogZmlsdGVycyxcclxuICAgICAgICAgICAgICAgIGJhdGNoX25vcm1fc2NhbGU6IGJhdGNoX25vcm1fc2NhbGUsXHJcbiAgICAgICAgICAgICAgICBiYXRjaF9ub3JtX29mZnNldDogYmF0Y2hfbm9ybV9vZmZzZXQsXHJcbiAgICAgICAgICAgICAgICBiYXRjaF9ub3JtX21lYW46IGJhdGNoX25vcm1fbWVhbixcclxuICAgICAgICAgICAgICAgIGJhdGNoX25vcm1fdmFyaWFuY2U6IGJhdGNoX25vcm1fdmFyaWFuY2VcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgcG9pbnR3aXNlX2NvbnY6IGV4dHJhY3RQb2ludHdpc2VDb252UGFyYW1zKCdNb2JpbGVuZXRWMScsIGlkeCwgbWFwcGVkUHJlZml4UG9pbnR3aXNlQ29udilcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gZXh0cmFjdE1vYmlsZW5ldFYxUGFyYW1zKCkge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIGNvbnZfMDogZXh0cmFjdFBvaW50d2lzZUNvbnZQYXJhbXMoJ01vYmlsZW5ldFYxJywgMCwgJ21vYmlsZW5ldHYxL2NvbnZfMCcpLFxyXG4gICAgICAgICAgICBjb252XzE6IGV4dHJhY3RDb252UGFpclBhcmFtcygxKSxcclxuICAgICAgICAgICAgY29udl8yOiBleHRyYWN0Q29udlBhaXJQYXJhbXMoMiksXHJcbiAgICAgICAgICAgIGNvbnZfMzogZXh0cmFjdENvbnZQYWlyUGFyYW1zKDMpLFxyXG4gICAgICAgICAgICBjb252XzQ6IGV4dHJhY3RDb252UGFpclBhcmFtcyg0KSxcclxuICAgICAgICAgICAgY29udl81OiBleHRyYWN0Q29udlBhaXJQYXJhbXMoNSksXHJcbiAgICAgICAgICAgIGNvbnZfNjogZXh0cmFjdENvbnZQYWlyUGFyYW1zKDYpLFxyXG4gICAgICAgICAgICBjb252Xzc6IGV4dHJhY3RDb252UGFpclBhcmFtcyg3KSxcclxuICAgICAgICAgICAgY29udl84OiBleHRyYWN0Q29udlBhaXJQYXJhbXMoOCksXHJcbiAgICAgICAgICAgIGNvbnZfOTogZXh0cmFjdENvbnZQYWlyUGFyYW1zKDkpLFxyXG4gICAgICAgICAgICBjb252XzEwOiBleHRyYWN0Q29udlBhaXJQYXJhbXMoMTApLFxyXG4gICAgICAgICAgICBjb252XzExOiBleHRyYWN0Q29udlBhaXJQYXJhbXMoMTEpLFxyXG4gICAgICAgICAgICBjb252XzEyOiBleHRyYWN0Q29udlBhaXJQYXJhbXMoMTIpLFxyXG4gICAgICAgICAgICBjb252XzEzOiBleHRyYWN0Q29udlBhaXJQYXJhbXMoMTMpXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIGV4dHJhY3RDb252UGFyYW1zKHByZWZpeCwgbWFwcGVkUHJlZml4KSB7XHJcbiAgICAgICAgdmFyIGZpbHRlcnMgPSBleHRyYWN0V2VpZ2h0RW50cnkocHJlZml4ICsgXCIvd2VpZ2h0c1wiLCA0LCBtYXBwZWRQcmVmaXggKyBcIi9maWx0ZXJzXCIpO1xyXG4gICAgICAgIHZhciBiaWFzID0gZXh0cmFjdFdlaWdodEVudHJ5KHByZWZpeCArIFwiL2JpYXNlc1wiLCAxLCBtYXBwZWRQcmVmaXggKyBcIi9iaWFzXCIpO1xyXG4gICAgICAgIHJldHVybiB7IGZpbHRlcnM6IGZpbHRlcnMsIGJpYXM6IGJpYXMgfTtcclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIGV4dHJhY3RCb3hQcmVkaWN0b3JQYXJhbXMoaWR4KSB7XHJcbiAgICAgICAgdmFyIGJveF9lbmNvZGluZ19wcmVkaWN0b3IgPSBleHRyYWN0Q29udlBhcmFtcyhcIlByZWRpY3Rpb24vQm94UHJlZGljdG9yX1wiICsgaWR4ICsgXCIvQm94RW5jb2RpbmdQcmVkaWN0b3JcIiwgXCJwcmVkaWN0aW9uX2xheWVyL2JveF9wcmVkaWN0b3JfXCIgKyBpZHggKyBcIi9ib3hfZW5jb2RpbmdfcHJlZGljdG9yXCIpO1xyXG4gICAgICAgIHZhciBjbGFzc19wcmVkaWN0b3IgPSBleHRyYWN0Q29udlBhcmFtcyhcIlByZWRpY3Rpb24vQm94UHJlZGljdG9yX1wiICsgaWR4ICsgXCIvQ2xhc3NQcmVkaWN0b3JcIiwgXCJwcmVkaWN0aW9uX2xheWVyL2JveF9wcmVkaWN0b3JfXCIgKyBpZHggKyBcIi9jbGFzc19wcmVkaWN0b3JcIik7XHJcbiAgICAgICAgcmV0dXJuIHsgYm94X2VuY29kaW5nX3ByZWRpY3RvcjogYm94X2VuY29kaW5nX3ByZWRpY3RvciwgY2xhc3NfcHJlZGljdG9yOiBjbGFzc19wcmVkaWN0b3IgfTtcclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIGV4dHJhY3RQcmVkaWN0aW9uTGF5ZXJQYXJhbXMoKSB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgY29udl8wOiBleHRyYWN0UG9pbnR3aXNlQ29udlBhcmFtcygnUHJlZGljdGlvbicsIDAsICdwcmVkaWN0aW9uX2xheWVyL2NvbnZfMCcpLFxyXG4gICAgICAgICAgICBjb252XzE6IGV4dHJhY3RQb2ludHdpc2VDb252UGFyYW1zKCdQcmVkaWN0aW9uJywgMSwgJ3ByZWRpY3Rpb25fbGF5ZXIvY29udl8xJyksXHJcbiAgICAgICAgICAgIGNvbnZfMjogZXh0cmFjdFBvaW50d2lzZUNvbnZQYXJhbXMoJ1ByZWRpY3Rpb24nLCAyLCAncHJlZGljdGlvbl9sYXllci9jb252XzInKSxcclxuICAgICAgICAgICAgY29udl8zOiBleHRyYWN0UG9pbnR3aXNlQ29udlBhcmFtcygnUHJlZGljdGlvbicsIDMsICdwcmVkaWN0aW9uX2xheWVyL2NvbnZfMycpLFxyXG4gICAgICAgICAgICBjb252XzQ6IGV4dHJhY3RQb2ludHdpc2VDb252UGFyYW1zKCdQcmVkaWN0aW9uJywgNCwgJ3ByZWRpY3Rpb25fbGF5ZXIvY29udl80JyksXHJcbiAgICAgICAgICAgIGNvbnZfNTogZXh0cmFjdFBvaW50d2lzZUNvbnZQYXJhbXMoJ1ByZWRpY3Rpb24nLCA1LCAncHJlZGljdGlvbl9sYXllci9jb252XzUnKSxcclxuICAgICAgICAgICAgY29udl82OiBleHRyYWN0UG9pbnR3aXNlQ29udlBhcmFtcygnUHJlZGljdGlvbicsIDYsICdwcmVkaWN0aW9uX2xheWVyL2NvbnZfNicpLFxyXG4gICAgICAgICAgICBjb252Xzc6IGV4dHJhY3RQb2ludHdpc2VDb252UGFyYW1zKCdQcmVkaWN0aW9uJywgNywgJ3ByZWRpY3Rpb25fbGF5ZXIvY29udl83JyksXHJcbiAgICAgICAgICAgIGJveF9wcmVkaWN0b3JfMDogZXh0cmFjdEJveFByZWRpY3RvclBhcmFtcygwKSxcclxuICAgICAgICAgICAgYm94X3ByZWRpY3Rvcl8xOiBleHRyYWN0Qm94UHJlZGljdG9yUGFyYW1zKDEpLFxyXG4gICAgICAgICAgICBib3hfcHJlZGljdG9yXzI6IGV4dHJhY3RCb3hQcmVkaWN0b3JQYXJhbXMoMiksXHJcbiAgICAgICAgICAgIGJveF9wcmVkaWN0b3JfMzogZXh0cmFjdEJveFByZWRpY3RvclBhcmFtcygzKSxcclxuICAgICAgICAgICAgYm94X3ByZWRpY3Rvcl80OiBleHRyYWN0Qm94UHJlZGljdG9yUGFyYW1zKDQpLFxyXG4gICAgICAgICAgICBib3hfcHJlZGljdG9yXzU6IGV4dHJhY3RCb3hQcmVkaWN0b3JQYXJhbXMoNSlcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBleHRyYWN0TW9iaWxlbmV0VjFQYXJhbXM6IGV4dHJhY3RNb2JpbGVuZXRWMVBhcmFtcyxcclxuICAgICAgICBleHRyYWN0UHJlZGljdGlvbkxheWVyUGFyYW1zOiBleHRyYWN0UHJlZGljdGlvbkxheWVyUGFyYW1zXHJcbiAgICB9O1xyXG59XHJcbmV4cG9ydCBmdW5jdGlvbiBleHRyYWN0UGFyYW1zRnJvbVdlaWd0aE1hcCh3ZWlnaHRNYXApIHtcclxuICAgIHZhciBwYXJhbU1hcHBpbmdzID0gW107XHJcbiAgICB2YXIgX2EgPSBleHRyYWN0b3JzRmFjdG9yeSh3ZWlnaHRNYXAsIHBhcmFtTWFwcGluZ3MpLCBleHRyYWN0TW9iaWxlbmV0VjFQYXJhbXMgPSBfYS5leHRyYWN0TW9iaWxlbmV0VjFQYXJhbXMsIGV4dHJhY3RQcmVkaWN0aW9uTGF5ZXJQYXJhbXMgPSBfYS5leHRyYWN0UHJlZGljdGlvbkxheWVyUGFyYW1zO1xyXG4gICAgdmFyIGV4dHJhX2RpbSA9IHdlaWdodE1hcFsnT3V0cHV0L2V4dHJhX2RpbSddO1xyXG4gICAgcGFyYW1NYXBwaW5ncy5wdXNoKHsgb3JpZ2luYWxQYXRoOiAnT3V0cHV0L2V4dHJhX2RpbScsIHBhcmFtUGF0aDogJ291dHB1dF9sYXllci9leHRyYV9kaW0nIH0pO1xyXG4gICAgaWYgKCFpc1RlbnNvcjNEKGV4dHJhX2RpbSkpIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJleHBlY3RlZCB3ZWlnaHRNYXBbJ091dHB1dC9leHRyYV9kaW0nXSB0byBiZSBhIFRlbnNvcjNELCBpbnN0ZWFkIGhhdmUgXCIgKyBleHRyYV9kaW0pO1xyXG4gICAgfVxyXG4gICAgdmFyIHBhcmFtcyA9IHtcclxuICAgICAgICBtb2JpbGVuZXR2MTogZXh0cmFjdE1vYmlsZW5ldFYxUGFyYW1zKCksXHJcbiAgICAgICAgcHJlZGljdGlvbl9sYXllcjogZXh0cmFjdFByZWRpY3Rpb25MYXllclBhcmFtcygpLFxyXG4gICAgICAgIG91dHB1dF9sYXllcjoge1xyXG4gICAgICAgICAgICBleHRyYV9kaW06IGV4dHJhX2RpbVxyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBkaXNwb3NlVW51c2VkV2VpZ2h0VGVuc29ycyh3ZWlnaHRNYXAsIHBhcmFtTWFwcGluZ3MpO1xyXG4gICAgcmV0dXJuIHsgcGFyYW1zOiBwYXJhbXMsIHBhcmFtTWFwcGluZ3M6IHBhcmFtTWFwcGluZ3MgfTtcclxufVxyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1leHRyYWN0UGFyYW1zRnJvbVdlaWd0aE1hcC5qcy5tYXAiLCJpbXBvcnQgKiBhcyB0ZiBmcm9tICdAdGVuc29yZmxvdy90ZmpzLWNvcmUnO1xyXG5pbXBvcnQgeyBleHRyYWN0V2VpZ2h0c0ZhY3RvcnkgfSBmcm9tICcuLi9jb21tb24nO1xyXG5mdW5jdGlvbiBleHRyYWN0b3JzRmFjdG9yeShleHRyYWN0V2VpZ2h0cywgcGFyYW1NYXBwaW5ncykge1xyXG4gICAgZnVuY3Rpb24gZXh0cmFjdERlcHRod2lzZUNvbnZQYXJhbXMobnVtQ2hhbm5lbHMsIG1hcHBlZFByZWZpeCkge1xyXG4gICAgICAgIHZhciBmaWx0ZXJzID0gdGYudGVuc29yNGQoZXh0cmFjdFdlaWdodHMoMyAqIDMgKiBudW1DaGFubmVscyksIFszLCAzLCBudW1DaGFubmVscywgMV0pO1xyXG4gICAgICAgIHZhciBiYXRjaF9ub3JtX3NjYWxlID0gdGYudGVuc29yMWQoZXh0cmFjdFdlaWdodHMobnVtQ2hhbm5lbHMpKTtcclxuICAgICAgICB2YXIgYmF0Y2hfbm9ybV9vZmZzZXQgPSB0Zi50ZW5zb3IxZChleHRyYWN0V2VpZ2h0cyhudW1DaGFubmVscykpO1xyXG4gICAgICAgIHZhciBiYXRjaF9ub3JtX21lYW4gPSB0Zi50ZW5zb3IxZChleHRyYWN0V2VpZ2h0cyhudW1DaGFubmVscykpO1xyXG4gICAgICAgIHZhciBiYXRjaF9ub3JtX3ZhcmlhbmNlID0gdGYudGVuc29yMWQoZXh0cmFjdFdlaWdodHMobnVtQ2hhbm5lbHMpKTtcclxuICAgICAgICBwYXJhbU1hcHBpbmdzLnB1c2goeyBwYXJhbVBhdGg6IG1hcHBlZFByZWZpeCArIFwiL2ZpbHRlcnNcIiB9LCB7IHBhcmFtUGF0aDogbWFwcGVkUHJlZml4ICsgXCIvYmF0Y2hfbm9ybV9zY2FsZVwiIH0sIHsgcGFyYW1QYXRoOiBtYXBwZWRQcmVmaXggKyBcIi9iYXRjaF9ub3JtX29mZnNldFwiIH0sIHsgcGFyYW1QYXRoOiBtYXBwZWRQcmVmaXggKyBcIi9iYXRjaF9ub3JtX21lYW5cIiB9LCB7IHBhcmFtUGF0aDogbWFwcGVkUHJlZml4ICsgXCIvYmF0Y2hfbm9ybV92YXJpYW5jZVwiIH0pO1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIGZpbHRlcnM6IGZpbHRlcnMsXHJcbiAgICAgICAgICAgIGJhdGNoX25vcm1fc2NhbGU6IGJhdGNoX25vcm1fc2NhbGUsXHJcbiAgICAgICAgICAgIGJhdGNoX25vcm1fb2Zmc2V0OiBiYXRjaF9ub3JtX29mZnNldCxcclxuICAgICAgICAgICAgYmF0Y2hfbm9ybV9tZWFuOiBiYXRjaF9ub3JtX21lYW4sXHJcbiAgICAgICAgICAgIGJhdGNoX25vcm1fdmFyaWFuY2U6IGJhdGNoX25vcm1fdmFyaWFuY2VcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gZXh0cmFjdENvbnZQYXJhbXMoY2hhbm5lbHNJbiwgY2hhbm5lbHNPdXQsIGZpbHRlclNpemUsIG1hcHBlZFByZWZpeCwgaXNQb2ludHdpc2VDb252KSB7XHJcbiAgICAgICAgdmFyIGZpbHRlcnMgPSB0Zi50ZW5zb3I0ZChleHRyYWN0V2VpZ2h0cyhjaGFubmVsc0luICogY2hhbm5lbHNPdXQgKiBmaWx0ZXJTaXplICogZmlsdGVyU2l6ZSksIFtmaWx0ZXJTaXplLCBmaWx0ZXJTaXplLCBjaGFubmVsc0luLCBjaGFubmVsc091dF0pO1xyXG4gICAgICAgIHZhciBiaWFzID0gdGYudGVuc29yMWQoZXh0cmFjdFdlaWdodHMoY2hhbm5lbHNPdXQpKTtcclxuICAgICAgICBwYXJhbU1hcHBpbmdzLnB1c2goeyBwYXJhbVBhdGg6IG1hcHBlZFByZWZpeCArIFwiL2ZpbHRlcnNcIiB9LCB7IHBhcmFtUGF0aDogbWFwcGVkUHJlZml4ICsgXCIvXCIgKyAoaXNQb2ludHdpc2VDb252ID8gJ2JhdGNoX25vcm1fb2Zmc2V0JyA6ICdiaWFzJykgfSk7XHJcbiAgICAgICAgcmV0dXJuIHsgZmlsdGVyczogZmlsdGVycywgYmlhczogYmlhcyB9O1xyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gZXh0cmFjdFBvaW50d2lzZUNvbnZQYXJhbXMoY2hhbm5lbHNJbiwgY2hhbm5lbHNPdXQsIGZpbHRlclNpemUsIG1hcHBlZFByZWZpeCkge1xyXG4gICAgICAgIHZhciBfYSA9IGV4dHJhY3RDb252UGFyYW1zKGNoYW5uZWxzSW4sIGNoYW5uZWxzT3V0LCBmaWx0ZXJTaXplLCBtYXBwZWRQcmVmaXgsIHRydWUpLCBmaWx0ZXJzID0gX2EuZmlsdGVycywgYmlhcyA9IF9hLmJpYXM7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgZmlsdGVyczogZmlsdGVycyxcclxuICAgICAgICAgICAgYmF0Y2hfbm9ybV9vZmZzZXQ6IGJpYXNcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gZXh0cmFjdENvbnZQYWlyUGFyYW1zKGNoYW5uZWxzSW4sIGNoYW5uZWxzT3V0LCBtYXBwZWRQcmVmaXgpIHtcclxuICAgICAgICB2YXIgZGVwdGh3aXNlX2NvbnYgPSBleHRyYWN0RGVwdGh3aXNlQ29udlBhcmFtcyhjaGFubmVsc0luLCBtYXBwZWRQcmVmaXggKyBcIi9kZXB0aHdpc2VfY29udlwiKTtcclxuICAgICAgICB2YXIgcG9pbnR3aXNlX2NvbnYgPSBleHRyYWN0UG9pbnR3aXNlQ29udlBhcmFtcyhjaGFubmVsc0luLCBjaGFubmVsc091dCwgMSwgbWFwcGVkUHJlZml4ICsgXCIvcG9pbnR3aXNlX2NvbnZcIik7XHJcbiAgICAgICAgcmV0dXJuIHsgZGVwdGh3aXNlX2NvbnY6IGRlcHRod2lzZV9jb252LCBwb2ludHdpc2VfY29udjogcG9pbnR3aXNlX2NvbnYgfTtcclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIGV4dHJhY3RNb2JpbGVuZXRWMVBhcmFtcygpIHtcclxuICAgICAgICB2YXIgY29udl8wID0gZXh0cmFjdFBvaW50d2lzZUNvbnZQYXJhbXMoMywgMzIsIDMsICdtb2JpbGVuZXR2MS9jb252XzAnKTtcclxuICAgICAgICB2YXIgY29udl8xID0gZXh0cmFjdENvbnZQYWlyUGFyYW1zKDMyLCA2NCwgJ21vYmlsZW5ldHYxL2NvbnZfMScpO1xyXG4gICAgICAgIHZhciBjb252XzIgPSBleHRyYWN0Q29udlBhaXJQYXJhbXMoNjQsIDEyOCwgJ21vYmlsZW5ldHYxL2NvbnZfMicpO1xyXG4gICAgICAgIHZhciBjb252XzMgPSBleHRyYWN0Q29udlBhaXJQYXJhbXMoMTI4LCAxMjgsICdtb2JpbGVuZXR2MS9jb252XzMnKTtcclxuICAgICAgICB2YXIgY29udl80ID0gZXh0cmFjdENvbnZQYWlyUGFyYW1zKDEyOCwgMjU2LCAnbW9iaWxlbmV0djEvY29udl80Jyk7XHJcbiAgICAgICAgdmFyIGNvbnZfNSA9IGV4dHJhY3RDb252UGFpclBhcmFtcygyNTYsIDI1NiwgJ21vYmlsZW5ldHYxL2NvbnZfNScpO1xyXG4gICAgICAgIHZhciBjb252XzYgPSBleHRyYWN0Q29udlBhaXJQYXJhbXMoMjU2LCA1MTIsICdtb2JpbGVuZXR2MS9jb252XzYnKTtcclxuICAgICAgICB2YXIgY29udl83ID0gZXh0cmFjdENvbnZQYWlyUGFyYW1zKDUxMiwgNTEyLCAnbW9iaWxlbmV0djEvY29udl83Jyk7XHJcbiAgICAgICAgdmFyIGNvbnZfOCA9IGV4dHJhY3RDb252UGFpclBhcmFtcyg1MTIsIDUxMiwgJ21vYmlsZW5ldHYxL2NvbnZfOCcpO1xyXG4gICAgICAgIHZhciBjb252XzkgPSBleHRyYWN0Q29udlBhaXJQYXJhbXMoNTEyLCA1MTIsICdtb2JpbGVuZXR2MS9jb252XzknKTtcclxuICAgICAgICB2YXIgY29udl8xMCA9IGV4dHJhY3RDb252UGFpclBhcmFtcyg1MTIsIDUxMiwgJ21vYmlsZW5ldHYxL2NvbnZfMTAnKTtcclxuICAgICAgICB2YXIgY29udl8xMSA9IGV4dHJhY3RDb252UGFpclBhcmFtcyg1MTIsIDUxMiwgJ21vYmlsZW5ldHYxL2NvbnZfMTEnKTtcclxuICAgICAgICB2YXIgY29udl8xMiA9IGV4dHJhY3RDb252UGFpclBhcmFtcyg1MTIsIDEwMjQsICdtb2JpbGVuZXR2MS9jb252XzEyJyk7XHJcbiAgICAgICAgdmFyIGNvbnZfMTMgPSBleHRyYWN0Q29udlBhaXJQYXJhbXMoMTAyNCwgMTAyNCwgJ21vYmlsZW5ldHYxL2NvbnZfMTMnKTtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBjb252XzA6IGNvbnZfMCxcclxuICAgICAgICAgICAgY29udl8xOiBjb252XzEsXHJcbiAgICAgICAgICAgIGNvbnZfMjogY29udl8yLFxyXG4gICAgICAgICAgICBjb252XzM6IGNvbnZfMyxcclxuICAgICAgICAgICAgY29udl80OiBjb252XzQsXHJcbiAgICAgICAgICAgIGNvbnZfNTogY29udl81LFxyXG4gICAgICAgICAgICBjb252XzY6IGNvbnZfNixcclxuICAgICAgICAgICAgY29udl83OiBjb252XzcsXHJcbiAgICAgICAgICAgIGNvbnZfODogY29udl84LFxyXG4gICAgICAgICAgICBjb252Xzk6IGNvbnZfOSxcclxuICAgICAgICAgICAgY29udl8xMDogY29udl8xMCxcclxuICAgICAgICAgICAgY29udl8xMTogY29udl8xMSxcclxuICAgICAgICAgICAgY29udl8xMjogY29udl8xMixcclxuICAgICAgICAgICAgY29udl8xMzogY29udl8xM1xyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbiAgICBmdW5jdGlvbiBleHRyYWN0UHJlZGljdGlvbkxheWVyUGFyYW1zKCkge1xyXG4gICAgICAgIHZhciBjb252XzAgPSBleHRyYWN0UG9pbnR3aXNlQ29udlBhcmFtcygxMDI0LCAyNTYsIDEsICdwcmVkaWN0aW9uX2xheWVyL2NvbnZfMCcpO1xyXG4gICAgICAgIHZhciBjb252XzEgPSBleHRyYWN0UG9pbnR3aXNlQ29udlBhcmFtcygyNTYsIDUxMiwgMywgJ3ByZWRpY3Rpb25fbGF5ZXIvY29udl8xJyk7XHJcbiAgICAgICAgdmFyIGNvbnZfMiA9IGV4dHJhY3RQb2ludHdpc2VDb252UGFyYW1zKDUxMiwgMTI4LCAxLCAncHJlZGljdGlvbl9sYXllci9jb252XzInKTtcclxuICAgICAgICB2YXIgY29udl8zID0gZXh0cmFjdFBvaW50d2lzZUNvbnZQYXJhbXMoMTI4LCAyNTYsIDMsICdwcmVkaWN0aW9uX2xheWVyL2NvbnZfMycpO1xyXG4gICAgICAgIHZhciBjb252XzQgPSBleHRyYWN0UG9pbnR3aXNlQ29udlBhcmFtcygyNTYsIDEyOCwgMSwgJ3ByZWRpY3Rpb25fbGF5ZXIvY29udl80Jyk7XHJcbiAgICAgICAgdmFyIGNvbnZfNSA9IGV4dHJhY3RQb2ludHdpc2VDb252UGFyYW1zKDEyOCwgMjU2LCAzLCAncHJlZGljdGlvbl9sYXllci9jb252XzUnKTtcclxuICAgICAgICB2YXIgY29udl82ID0gZXh0cmFjdFBvaW50d2lzZUNvbnZQYXJhbXMoMjU2LCA2NCwgMSwgJ3ByZWRpY3Rpb25fbGF5ZXIvY29udl82Jyk7XHJcbiAgICAgICAgdmFyIGNvbnZfNyA9IGV4dHJhY3RQb2ludHdpc2VDb252UGFyYW1zKDY0LCAxMjgsIDMsICdwcmVkaWN0aW9uX2xheWVyL2NvbnZfNycpO1xyXG4gICAgICAgIHZhciBib3hfZW5jb2RpbmdfMF9wcmVkaWN0b3IgPSBleHRyYWN0Q29udlBhcmFtcyg1MTIsIDEyLCAxLCAncHJlZGljdGlvbl9sYXllci9ib3hfcHJlZGljdG9yXzAvYm94X2VuY29kaW5nX3ByZWRpY3RvcicpO1xyXG4gICAgICAgIHZhciBjbGFzc19wcmVkaWN0b3JfMCA9IGV4dHJhY3RDb252UGFyYW1zKDUxMiwgOSwgMSwgJ3ByZWRpY3Rpb25fbGF5ZXIvYm94X3ByZWRpY3Rvcl8wL2NsYXNzX3ByZWRpY3RvcicpO1xyXG4gICAgICAgIHZhciBib3hfZW5jb2RpbmdfMV9wcmVkaWN0b3IgPSBleHRyYWN0Q29udlBhcmFtcygxMDI0LCAyNCwgMSwgJ3ByZWRpY3Rpb25fbGF5ZXIvYm94X3ByZWRpY3Rvcl8xL2JveF9lbmNvZGluZ19wcmVkaWN0b3InKTtcclxuICAgICAgICB2YXIgY2xhc3NfcHJlZGljdG9yXzEgPSBleHRyYWN0Q29udlBhcmFtcygxMDI0LCAxOCwgMSwgJ3ByZWRpY3Rpb25fbGF5ZXIvYm94X3ByZWRpY3Rvcl8xL2NsYXNzX3ByZWRpY3RvcicpO1xyXG4gICAgICAgIHZhciBib3hfZW5jb2RpbmdfMl9wcmVkaWN0b3IgPSBleHRyYWN0Q29udlBhcmFtcyg1MTIsIDI0LCAxLCAncHJlZGljdGlvbl9sYXllci9ib3hfcHJlZGljdG9yXzIvYm94X2VuY29kaW5nX3ByZWRpY3RvcicpO1xyXG4gICAgICAgIHZhciBjbGFzc19wcmVkaWN0b3JfMiA9IGV4dHJhY3RDb252UGFyYW1zKDUxMiwgMTgsIDEsICdwcmVkaWN0aW9uX2xheWVyL2JveF9wcmVkaWN0b3JfMi9jbGFzc19wcmVkaWN0b3InKTtcclxuICAgICAgICB2YXIgYm94X2VuY29kaW5nXzNfcHJlZGljdG9yID0gZXh0cmFjdENvbnZQYXJhbXMoMjU2LCAyNCwgMSwgJ3ByZWRpY3Rpb25fbGF5ZXIvYm94X3ByZWRpY3Rvcl8zL2JveF9lbmNvZGluZ19wcmVkaWN0b3InKTtcclxuICAgICAgICB2YXIgY2xhc3NfcHJlZGljdG9yXzMgPSBleHRyYWN0Q29udlBhcmFtcygyNTYsIDE4LCAxLCAncHJlZGljdGlvbl9sYXllci9ib3hfcHJlZGljdG9yXzMvY2xhc3NfcHJlZGljdG9yJyk7XHJcbiAgICAgICAgdmFyIGJveF9lbmNvZGluZ180X3ByZWRpY3RvciA9IGV4dHJhY3RDb252UGFyYW1zKDI1NiwgMjQsIDEsICdwcmVkaWN0aW9uX2xheWVyL2JveF9wcmVkaWN0b3JfNC9ib3hfZW5jb2RpbmdfcHJlZGljdG9yJyk7XHJcbiAgICAgICAgdmFyIGNsYXNzX3ByZWRpY3Rvcl80ID0gZXh0cmFjdENvbnZQYXJhbXMoMjU2LCAxOCwgMSwgJ3ByZWRpY3Rpb25fbGF5ZXIvYm94X3ByZWRpY3Rvcl80L2NsYXNzX3ByZWRpY3RvcicpO1xyXG4gICAgICAgIHZhciBib3hfZW5jb2RpbmdfNV9wcmVkaWN0b3IgPSBleHRyYWN0Q29udlBhcmFtcygxMjgsIDI0LCAxLCAncHJlZGljdGlvbl9sYXllci9ib3hfcHJlZGljdG9yXzUvYm94X2VuY29kaW5nX3ByZWRpY3RvcicpO1xyXG4gICAgICAgIHZhciBjbGFzc19wcmVkaWN0b3JfNSA9IGV4dHJhY3RDb252UGFyYW1zKDEyOCwgMTgsIDEsICdwcmVkaWN0aW9uX2xheWVyL2JveF9wcmVkaWN0b3JfNS9jbGFzc19wcmVkaWN0b3InKTtcclxuICAgICAgICB2YXIgYm94X3ByZWRpY3Rvcl8wID0ge1xyXG4gICAgICAgICAgICBib3hfZW5jb2RpbmdfcHJlZGljdG9yOiBib3hfZW5jb2RpbmdfMF9wcmVkaWN0b3IsXHJcbiAgICAgICAgICAgIGNsYXNzX3ByZWRpY3RvcjogY2xhc3NfcHJlZGljdG9yXzBcclxuICAgICAgICB9O1xyXG4gICAgICAgIHZhciBib3hfcHJlZGljdG9yXzEgPSB7XHJcbiAgICAgICAgICAgIGJveF9lbmNvZGluZ19wcmVkaWN0b3I6IGJveF9lbmNvZGluZ18xX3ByZWRpY3RvcixcclxuICAgICAgICAgICAgY2xhc3NfcHJlZGljdG9yOiBjbGFzc19wcmVkaWN0b3JfMVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgdmFyIGJveF9wcmVkaWN0b3JfMiA9IHtcclxuICAgICAgICAgICAgYm94X2VuY29kaW5nX3ByZWRpY3RvcjogYm94X2VuY29kaW5nXzJfcHJlZGljdG9yLFxyXG4gICAgICAgICAgICBjbGFzc19wcmVkaWN0b3I6IGNsYXNzX3ByZWRpY3Rvcl8yXHJcbiAgICAgICAgfTtcclxuICAgICAgICB2YXIgYm94X3ByZWRpY3Rvcl8zID0ge1xyXG4gICAgICAgICAgICBib3hfZW5jb2RpbmdfcHJlZGljdG9yOiBib3hfZW5jb2RpbmdfM19wcmVkaWN0b3IsXHJcbiAgICAgICAgICAgIGNsYXNzX3ByZWRpY3RvcjogY2xhc3NfcHJlZGljdG9yXzNcclxuICAgICAgICB9O1xyXG4gICAgICAgIHZhciBib3hfcHJlZGljdG9yXzQgPSB7XHJcbiAgICAgICAgICAgIGJveF9lbmNvZGluZ19wcmVkaWN0b3I6IGJveF9lbmNvZGluZ180X3ByZWRpY3RvcixcclxuICAgICAgICAgICAgY2xhc3NfcHJlZGljdG9yOiBjbGFzc19wcmVkaWN0b3JfNFxyXG4gICAgICAgIH07XHJcbiAgICAgICAgdmFyIGJveF9wcmVkaWN0b3JfNSA9IHtcclxuICAgICAgICAgICAgYm94X2VuY29kaW5nX3ByZWRpY3RvcjogYm94X2VuY29kaW5nXzVfcHJlZGljdG9yLFxyXG4gICAgICAgICAgICBjbGFzc19wcmVkaWN0b3I6IGNsYXNzX3ByZWRpY3Rvcl81XHJcbiAgICAgICAgfTtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBjb252XzA6IGNvbnZfMCxcclxuICAgICAgICAgICAgY29udl8xOiBjb252XzEsXHJcbiAgICAgICAgICAgIGNvbnZfMjogY29udl8yLFxyXG4gICAgICAgICAgICBjb252XzM6IGNvbnZfMyxcclxuICAgICAgICAgICAgY29udl80OiBjb252XzQsXHJcbiAgICAgICAgICAgIGNvbnZfNTogY29udl81LFxyXG4gICAgICAgICAgICBjb252XzY6IGNvbnZfNixcclxuICAgICAgICAgICAgY29udl83OiBjb252XzcsXHJcbiAgICAgICAgICAgIGJveF9wcmVkaWN0b3JfMDogYm94X3ByZWRpY3Rvcl8wLFxyXG4gICAgICAgICAgICBib3hfcHJlZGljdG9yXzE6IGJveF9wcmVkaWN0b3JfMSxcclxuICAgICAgICAgICAgYm94X3ByZWRpY3Rvcl8yOiBib3hfcHJlZGljdG9yXzIsXHJcbiAgICAgICAgICAgIGJveF9wcmVkaWN0b3JfMzogYm94X3ByZWRpY3Rvcl8zLFxyXG4gICAgICAgICAgICBib3hfcHJlZGljdG9yXzQ6IGJveF9wcmVkaWN0b3JfNCxcclxuICAgICAgICAgICAgYm94X3ByZWRpY3Rvcl81OiBib3hfcHJlZGljdG9yXzVcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBleHRyYWN0TW9iaWxlbmV0VjFQYXJhbXM6IGV4dHJhY3RNb2JpbGVuZXRWMVBhcmFtcyxcclxuICAgICAgICBleHRyYWN0UHJlZGljdGlvbkxheWVyUGFyYW1zOiBleHRyYWN0UHJlZGljdGlvbkxheWVyUGFyYW1zXHJcbiAgICB9O1xyXG59XHJcbmV4cG9ydCBmdW5jdGlvbiBleHRyYWN0UGFyYW1zKHdlaWdodHMpIHtcclxuICAgIHZhciBwYXJhbU1hcHBpbmdzID0gW107XHJcbiAgICB2YXIgX2EgPSBleHRyYWN0V2VpZ2h0c0ZhY3Rvcnkod2VpZ2h0cyksIGV4dHJhY3RXZWlnaHRzID0gX2EuZXh0cmFjdFdlaWdodHMsIGdldFJlbWFpbmluZ1dlaWdodHMgPSBfYS5nZXRSZW1haW5pbmdXZWlnaHRzO1xyXG4gICAgdmFyIF9iID0gZXh0cmFjdG9yc0ZhY3RvcnkoZXh0cmFjdFdlaWdodHMsIHBhcmFtTWFwcGluZ3MpLCBleHRyYWN0TW9iaWxlbmV0VjFQYXJhbXMgPSBfYi5leHRyYWN0TW9iaWxlbmV0VjFQYXJhbXMsIGV4dHJhY3RQcmVkaWN0aW9uTGF5ZXJQYXJhbXMgPSBfYi5leHRyYWN0UHJlZGljdGlvbkxheWVyUGFyYW1zO1xyXG4gICAgdmFyIG1vYmlsZW5ldHYxID0gZXh0cmFjdE1vYmlsZW5ldFYxUGFyYW1zKCk7XHJcbiAgICB2YXIgcHJlZGljdGlvbl9sYXllciA9IGV4dHJhY3RQcmVkaWN0aW9uTGF5ZXJQYXJhbXMoKTtcclxuICAgIHZhciBleHRyYV9kaW0gPSB0Zi50ZW5zb3IzZChleHRyYWN0V2VpZ2h0cyg1MTE4ICogNCksIFsxLCA1MTE4LCA0XSk7XHJcbiAgICB2YXIgb3V0cHV0X2xheWVyID0ge1xyXG4gICAgICAgIGV4dHJhX2RpbTogZXh0cmFfZGltXHJcbiAgICB9O1xyXG4gICAgcGFyYW1NYXBwaW5ncy5wdXNoKHsgcGFyYW1QYXRoOiAnb3V0cHV0X2xheWVyL2V4dHJhX2RpbScgfSk7XHJcbiAgICBpZiAoZ2V0UmVtYWluaW5nV2VpZ2h0cygpLmxlbmd0aCAhPT0gMCkge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIndlaWdodHMgcmVtYWluZyBhZnRlciBleHRyYWN0OiBcIiArIGdldFJlbWFpbmluZ1dlaWdodHMoKS5sZW5ndGgpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBwYXJhbXM6IHtcclxuICAgICAgICAgICAgbW9iaWxlbmV0djE6IG1vYmlsZW5ldHYxLFxyXG4gICAgICAgICAgICBwcmVkaWN0aW9uX2xheWVyOiBwcmVkaWN0aW9uX2xheWVyLFxyXG4gICAgICAgICAgICBvdXRwdXRfbGF5ZXI6IG91dHB1dF9sYXllclxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgcGFyYW1NYXBwaW5nczogcGFyYW1NYXBwaW5nc1xyXG4gICAgfTtcclxufVxyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1leHRyYWN0UGFyYW1zLmpzLm1hcCIsImltcG9ydCB7IF9fZXh0ZW5kcyB9IGZyb20gXCJ0c2xpYlwiO1xyXG5pbXBvcnQgeyBTc2RNb2JpbGVuZXR2MSB9IGZyb20gJy4vU3NkTW9iaWxlbmV0djEnO1xyXG5leHBvcnQgKiBmcm9tICcuL1NzZE1vYmlsZW5ldHYxJztcclxuZXhwb3J0ICogZnJvbSAnLi9Tc2RNb2JpbGVuZXR2MU9wdGlvbnMnO1xyXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlU3NkTW9iaWxlbmV0djEod2VpZ2h0cykge1xyXG4gICAgdmFyIG5ldCA9IG5ldyBTc2RNb2JpbGVuZXR2MSgpO1xyXG4gICAgbmV0LmV4dHJhY3RXZWlnaHRzKHdlaWdodHMpO1xyXG4gICAgcmV0dXJuIG5ldDtcclxufVxyXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlRmFjZURldGVjdGlvbk5ldCh3ZWlnaHRzKSB7XHJcbiAgICByZXR1cm4gY3JlYXRlU3NkTW9iaWxlbmV0djEod2VpZ2h0cyk7XHJcbn1cclxuLy8gYWxpYXMgZm9yIGJhY2t3YXJkIGNvbXBhdGliaWx5XHJcbnZhciBGYWNlRGV0ZWN0aW9uTmV0ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xyXG4gICAgX19leHRlbmRzKEZhY2VEZXRlY3Rpb25OZXQsIF9zdXBlcik7XHJcbiAgICBmdW5jdGlvbiBGYWNlRGV0ZWN0aW9uTmV0KCkge1xyXG4gICAgICAgIHJldHVybiBfc3VwZXIgIT09IG51bGwgJiYgX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcclxuICAgIH1cclxuICAgIHJldHVybiBGYWNlRGV0ZWN0aW9uTmV0O1xyXG59KFNzZE1vYmlsZW5ldHYxKSk7XHJcbmV4cG9ydCB7IEZhY2VEZXRlY3Rpb25OZXQgfTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIiwiZXhwb3J0IHZhciBUaW55WW9sb3YyU2l6ZVR5cGU7XHJcbihmdW5jdGlvbiAoVGlueVlvbG92MlNpemVUeXBlKSB7XHJcbiAgICBUaW55WW9sb3YyU2l6ZVR5cGVbVGlueVlvbG92MlNpemVUeXBlW1wiWFNcIl0gPSAyMjRdID0gXCJYU1wiO1xyXG4gICAgVGlueVlvbG92MlNpemVUeXBlW1RpbnlZb2xvdjJTaXplVHlwZVtcIlNNXCJdID0gMzIwXSA9IFwiU01cIjtcclxuICAgIFRpbnlZb2xvdjJTaXplVHlwZVtUaW55WW9sb3YyU2l6ZVR5cGVbXCJNRFwiXSA9IDQxNl0gPSBcIk1EXCI7XHJcbiAgICBUaW55WW9sb3YyU2l6ZVR5cGVbVGlueVlvbG92MlNpemVUeXBlW1wiTEdcIl0gPSA2MDhdID0gXCJMR1wiO1xyXG59KShUaW55WW9sb3YyU2l6ZVR5cGUgfHwgKFRpbnlZb2xvdjJTaXplVHlwZSA9IHt9KSk7XHJcbnZhciBUaW55WW9sb3YyT3B0aW9ucyA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIFRpbnlZb2xvdjJPcHRpb25zKF9hKSB7XHJcbiAgICAgICAgdmFyIF9iID0gX2EgPT09IHZvaWQgMCA/IHt9IDogX2EsIGlucHV0U2l6ZSA9IF9iLmlucHV0U2l6ZSwgc2NvcmVUaHJlc2hvbGQgPSBfYi5zY29yZVRocmVzaG9sZDtcclxuICAgICAgICB0aGlzLl9uYW1lID0gJ1RpbnlZb2xvdjJPcHRpb25zJztcclxuICAgICAgICB0aGlzLl9pbnB1dFNpemUgPSBpbnB1dFNpemUgfHwgNDE2O1xyXG4gICAgICAgIHRoaXMuX3Njb3JlVGhyZXNob2xkID0gc2NvcmVUaHJlc2hvbGQgfHwgMC41O1xyXG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy5faW5wdXRTaXplICE9PSAnbnVtYmVyJyB8fCB0aGlzLl9pbnB1dFNpemUgJSAzMiAhPT0gMCkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IodGhpcy5fbmFtZSArIFwiIC0gZXhwZWN0ZWQgaW5wdXRTaXplIHRvIGJlIGEgbnVtYmVyIGRpdmlzaWJsZSBieSAzMlwiKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLl9zY29yZVRocmVzaG9sZCAhPT0gJ251bWJlcicgfHwgdGhpcy5fc2NvcmVUaHJlc2hvbGQgPD0gMCB8fCB0aGlzLl9zY29yZVRocmVzaG9sZCA+PSAxKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcih0aGlzLl9uYW1lICsgXCIgLSBleHBlY3RlZCBzY29yZVRocmVzaG9sZCB0byBiZSBhIG51bWJlciBiZXR3ZWVuIDAgYW5kIDFcIik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFRpbnlZb2xvdjJPcHRpb25zLnByb3RvdHlwZSwgXCJpbnB1dFNpemVcIiwge1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5faW5wdXRTaXplOyB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShUaW55WW9sb3YyT3B0aW9ucy5wcm90b3R5cGUsIFwic2NvcmVUaHJlc2hvbGRcIiwge1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5fc2NvcmVUaHJlc2hvbGQ7IH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgcmV0dXJuIFRpbnlZb2xvdjJPcHRpb25zO1xyXG59KCkpO1xyXG5leHBvcnQgeyBUaW55WW9sb3YyT3B0aW9ucyB9O1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1UaW55WW9sb3YyT3B0aW9ucy5qcy5tYXAiLCJpbXBvcnQgeyBQb2ludCB9IGZyb20gJy4uL2NsYXNzZXMnO1xyXG5leHBvcnQgdmFyIElPVV9USFJFU0hPTEQgPSAwLjQ7XHJcbmV4cG9ydCB2YXIgQk9YX0FOQ0hPUlMgPSBbXHJcbiAgICBuZXcgUG9pbnQoMC43Mzg3NjgsIDAuODc0OTQ2KSxcclxuICAgIG5ldyBQb2ludCgyLjQyMjA0LCAyLjY1NzA0KSxcclxuICAgIG5ldyBQb2ludCg0LjMwOTcxLCA3LjA0NDkzKSxcclxuICAgIG5ldyBQb2ludCgxMC4yNDYsIDQuNTk0MjgpLFxyXG4gICAgbmV3IFBvaW50KDEyLjY4NjgsIDExLjg3NDEpXHJcbl07XHJcbmV4cG9ydCB2YXIgQk9YX0FOQ0hPUlNfU0VQQVJBQkxFID0gW1xyXG4gICAgbmV3IFBvaW50KDEuNjAzMjMxLCAyLjA5NDQ2OCksXHJcbiAgICBuZXcgUG9pbnQoNi4wNDExNDMsIDcuMDgwMTI2KSxcclxuICAgIG5ldyBQb2ludCgyLjg4MjQ1OSwgMy41MTgwNjEpLFxyXG4gICAgbmV3IFBvaW50KDQuMjY2OTA2LCA1LjE3ODg1NyksXHJcbiAgICBuZXcgUG9pbnQoOS4wNDE3NjUsIDEwLjY2MzA4KVxyXG5dO1xyXG5leHBvcnQgdmFyIE1FQU5fUkdCX1NFUEFSQUJMRSA9IFsxMTcuMDAxLCAxMTQuNjk3LCA5Ny40MDRdO1xyXG5leHBvcnQgdmFyIERFRkFVTFRfTU9ERUxfTkFNRSA9ICd0aW55X3lvbG92Ml9tb2RlbCc7XHJcbmV4cG9ydCB2YXIgREVGQVVMVF9NT0RFTF9OQU1FX1NFUEFSQUJMRV9DT05WID0gJ3RpbnlfeW9sb3YyX3NlcGFyYWJsZV9jb252X21vZGVsJztcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29uc3QuanMubWFwIiwidmFyIGlzTnVtYmVyID0gZnVuY3Rpb24gKGFyZykgeyByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ251bWJlcic7IH07XHJcbmV4cG9ydCBmdW5jdGlvbiB2YWxpZGF0ZUNvbmZpZyhjb25maWcpIHtcclxuICAgIGlmICghY29uZmlnKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiaW52YWxpZCBjb25maWc6IFwiICsgY29uZmlnKTtcclxuICAgIH1cclxuICAgIGlmICh0eXBlb2YgY29uZmlnLndpdGhTZXBhcmFibGVDb252cyAhPT0gJ2Jvb2xlYW4nKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiY29uZmlnLndpdGhTZXBhcmFibGVDb252cyBoYXMgdG8gYmUgYSBib29sZWFuLCBoYXZlOiBcIiArIGNvbmZpZy53aXRoU2VwYXJhYmxlQ29udnMpO1xyXG4gICAgfVxyXG4gICAgaWYgKCFpc051bWJlcihjb25maWcuaW91VGhyZXNob2xkKSB8fCBjb25maWcuaW91VGhyZXNob2xkIDwgMCB8fCBjb25maWcuaW91VGhyZXNob2xkID4gMS4wKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiY29uZmlnLmlvdVRocmVzaG9sZCBoYXMgdG8gYmUgYSBudW1iZXIgYmV0d2VlbiBbMCwgMV0sIGhhdmU6IFwiICsgY29uZmlnLmlvdVRocmVzaG9sZCk7XHJcbiAgICB9XHJcbiAgICBpZiAoIUFycmF5LmlzQXJyYXkoY29uZmlnLmNsYXNzZXMpXHJcbiAgICAgICAgfHwgIWNvbmZpZy5jbGFzc2VzLmxlbmd0aFxyXG4gICAgICAgIHx8ICFjb25maWcuY2xhc3Nlcy5ldmVyeShmdW5jdGlvbiAoYykgeyByZXR1cm4gdHlwZW9mIGMgPT09ICdzdHJpbmcnOyB9KSkge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcImNvbmZpZy5jbGFzc2VzIGhhcyB0byBiZSBhbiBhcnJheSBjbGFzcyBuYW1lczogc3RyaW5nW10sIGhhdmU6IFwiICsgSlNPTi5zdHJpbmdpZnkoY29uZmlnLmNsYXNzZXMpKTtcclxuICAgIH1cclxuICAgIGlmICghQXJyYXkuaXNBcnJheShjb25maWcuYW5jaG9ycylcclxuICAgICAgICB8fCAhY29uZmlnLmFuY2hvcnMubGVuZ3RoXHJcbiAgICAgICAgfHwgIWNvbmZpZy5hbmNob3JzLm1hcChmdW5jdGlvbiAoYSkgeyByZXR1cm4gYSB8fCB7fTsgfSkuZXZlcnkoZnVuY3Rpb24gKGEpIHsgcmV0dXJuIGlzTnVtYmVyKGEueCkgJiYgaXNOdW1iZXIoYS55KTsgfSkpIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJjb25maWcuYW5jaG9ycyBoYXMgdG8gYmUgYW4gYXJyYXkgb2YgeyB4OiBudW1iZXIsIHk6IG51bWJlciB9LCBoYXZlOiBcIiArIEpTT04uc3RyaW5naWZ5KGNvbmZpZy5hbmNob3JzKSk7XHJcbiAgICB9XHJcbiAgICBpZiAoY29uZmlnLm1lYW5SZ2IgJiYgKCFBcnJheS5pc0FycmF5KGNvbmZpZy5tZWFuUmdiKVxyXG4gICAgICAgIHx8IGNvbmZpZy5tZWFuUmdiLmxlbmd0aCAhPT0gM1xyXG4gICAgICAgIHx8ICFjb25maWcubWVhblJnYi5ldmVyeShpc051bWJlcikpKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiY29uZmlnLm1lYW5SZ2IgaGFzIHRvIGJlIGFuIGFycmF5IG9mIHNoYXBlIFtudW1iZXIsIG51bWJlciwgbnVtYmVyXSwgaGF2ZTogXCIgKyBKU09OLnN0cmluZ2lmeShjb25maWcubWVhblJnYikpO1xyXG4gICAgfVxyXG59XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbmZpZy5qcy5tYXAiLCJpbXBvcnQgKiBhcyB0ZiBmcm9tICdAdGVuc29yZmxvdy90ZmpzLWNvcmUnO1xyXG5leHBvcnQgZnVuY3Rpb24gbGVha3koeCkge1xyXG4gICAgcmV0dXJuIHRmLnRpZHkoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBtaW4gPSB0Zi5tdWwoeCwgdGYuc2NhbGFyKDAuMTAwMDAwMDAxNDkwMTE2MTIpKTtcclxuICAgICAgICByZXR1cm4gdGYuYWRkKHRmLnJlbHUodGYuc3ViKHgsIG1pbikpLCBtaW4pO1xyXG4gICAgICAgIC8vcmV0dXJuIHRmLm1heGltdW0oeCwgbWluKVxyXG4gICAgfSk7XHJcbn1cclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bGVha3kuanMubWFwIiwiaW1wb3J0ICogYXMgdGYgZnJvbSAnQHRlbnNvcmZsb3cvdGZqcy1jb3JlJztcclxuaW1wb3J0IHsgbGVha3kgfSBmcm9tICcuL2xlYWt5JztcclxuZXhwb3J0IGZ1bmN0aW9uIGNvbnZXaXRoQmF0Y2hOb3JtKHgsIHBhcmFtcykge1xyXG4gICAgcmV0dXJuIHRmLnRpZHkoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBvdXQgPSB0Zi5wYWQoeCwgW1swLCAwXSwgWzEsIDFdLCBbMSwgMV0sIFswLCAwXV0pO1xyXG4gICAgICAgIG91dCA9IHRmLmNvbnYyZChvdXQsIHBhcmFtcy5jb252LmZpbHRlcnMsIFsxLCAxXSwgJ3ZhbGlkJyk7XHJcbiAgICAgICAgb3V0ID0gdGYuc3ViKG91dCwgcGFyYW1zLmJuLnN1Yik7XHJcbiAgICAgICAgb3V0ID0gdGYubXVsKG91dCwgcGFyYW1zLmJuLnRydWVkaXYpO1xyXG4gICAgICAgIG91dCA9IHRmLmFkZChvdXQsIHBhcmFtcy5jb252LmJpYXMpO1xyXG4gICAgICAgIHJldHVybiBsZWFreShvdXQpO1xyXG4gICAgfSk7XHJcbn1cclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29udldpdGhCYXRjaE5vcm0uanMubWFwIiwiaW1wb3J0ICogYXMgdGYgZnJvbSAnQHRlbnNvcmZsb3cvdGZqcy1jb3JlJztcclxuaW1wb3J0IHsgbGVha3kgfSBmcm9tICcuL2xlYWt5JztcclxuZXhwb3J0IGZ1bmN0aW9uIGRlcHRod2lzZVNlcGFyYWJsZUNvbnYoeCwgcGFyYW1zKSB7XHJcbiAgICByZXR1cm4gdGYudGlkeShmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIG91dCA9IHRmLnBhZCh4LCBbWzAsIDBdLCBbMSwgMV0sIFsxLCAxXSwgWzAsIDBdXSk7XHJcbiAgICAgICAgb3V0ID0gdGYuc2VwYXJhYmxlQ29udjJkKG91dCwgcGFyYW1zLmRlcHRod2lzZV9maWx0ZXIsIHBhcmFtcy5wb2ludHdpc2VfZmlsdGVyLCBbMSwgMV0sICd2YWxpZCcpO1xyXG4gICAgICAgIG91dCA9IHRmLmFkZChvdXQsIHBhcmFtcy5iaWFzKTtcclxuICAgICAgICByZXR1cm4gbGVha3kob3V0KTtcclxuICAgIH0pO1xyXG59XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRlcHRod2lzZVNlcGFyYWJsZUNvbnYuanMubWFwIiwiaW1wb3J0IHsgX19hc3NpZ24sIF9fYXdhaXRlciwgX19leHRlbmRzLCBfX2dlbmVyYXRvciB9IGZyb20gXCJ0c2xpYlwiO1xyXG5pbXBvcnQgKiBhcyB0ZiBmcm9tICdAdGVuc29yZmxvdy90ZmpzLWNvcmUnO1xyXG5pbXBvcnQgeyBCb3VuZGluZ0JveCB9IGZyb20gJy4uL2NsYXNzZXMvQm91bmRpbmdCb3gnO1xyXG5pbXBvcnQgeyBPYmplY3REZXRlY3Rpb24gfSBmcm9tICcuLi9jbGFzc2VzL09iamVjdERldGVjdGlvbic7XHJcbmltcG9ydCB7IGNvbnZMYXllciB9IGZyb20gJy4uL2NvbW1vbic7XHJcbmltcG9ydCB7IHRvTmV0SW5wdXQgfSBmcm9tICcuLi9kb20nO1xyXG5pbXBvcnQgeyBOZXVyYWxOZXR3b3JrIH0gZnJvbSAnLi4vTmV1cmFsTmV0d29yayc7XHJcbmltcG9ydCB7IHNpZ21vaWQgfSBmcm9tICcuLi9vcHMnO1xyXG5pbXBvcnQgeyBub25NYXhTdXBwcmVzc2lvbiB9IGZyb20gJy4uL29wcy9ub25NYXhTdXBwcmVzc2lvbic7XHJcbmltcG9ydCB7IG5vcm1hbGl6ZSB9IGZyb20gJy4uL29wcy9ub3JtYWxpemUnO1xyXG5pbXBvcnQgeyB2YWxpZGF0ZUNvbmZpZyB9IGZyb20gJy4vY29uZmlnJztcclxuaW1wb3J0IHsgY29udldpdGhCYXRjaE5vcm0gfSBmcm9tICcuL2NvbnZXaXRoQmF0Y2hOb3JtJztcclxuaW1wb3J0IHsgZGVwdGh3aXNlU2VwYXJhYmxlQ29udiB9IGZyb20gJy4vZGVwdGh3aXNlU2VwYXJhYmxlQ29udic7XHJcbmltcG9ydCB7IGV4dHJhY3RQYXJhbXMgfSBmcm9tICcuL2V4dHJhY3RQYXJhbXMnO1xyXG5pbXBvcnQgeyBleHRyYWN0UGFyYW1zRnJvbVdlaWd0aE1hcCB9IGZyb20gJy4vZXh0cmFjdFBhcmFtc0Zyb21XZWlndGhNYXAnO1xyXG5pbXBvcnQgeyBsZWFreSB9IGZyb20gJy4vbGVha3knO1xyXG5pbXBvcnQgeyBUaW55WW9sb3YyT3B0aW9ucyB9IGZyb20gJy4vVGlueVlvbG92Mk9wdGlvbnMnO1xyXG52YXIgVGlueVlvbG92MkJhc2UgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XHJcbiAgICBfX2V4dGVuZHMoVGlueVlvbG92MkJhc2UsIF9zdXBlcik7XHJcbiAgICBmdW5jdGlvbiBUaW55WW9sb3YyQmFzZShjb25maWcpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCAnVGlueVlvbG92MicpIHx8IHRoaXM7XHJcbiAgICAgICAgdmFsaWRhdGVDb25maWcoY29uZmlnKTtcclxuICAgICAgICBfdGhpcy5fY29uZmlnID0gY29uZmlnO1xyXG4gICAgICAgIHJldHVybiBfdGhpcztcclxuICAgIH1cclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShUaW55WW9sb3YyQmFzZS5wcm90b3R5cGUsIFwiY29uZmlnXCIsIHtcclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2NvbmZpZztcclxuICAgICAgICB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShUaW55WW9sb3YyQmFzZS5wcm90b3R5cGUsIFwid2l0aENsYXNzU2NvcmVzXCIsIHtcclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY29uZmlnLndpdGhDbGFzc1Njb3JlcyB8fCB0aGlzLmNvbmZpZy5jbGFzc2VzLmxlbmd0aCA+IDE7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoVGlueVlvbG92MkJhc2UucHJvdG90eXBlLCBcImJveEVuY29kaW5nU2l6ZVwiLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiA1ICsgKHRoaXMud2l0aENsYXNzU2NvcmVzID8gdGhpcy5jb25maWcuY2xhc3Nlcy5sZW5ndGggOiAwKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIFRpbnlZb2xvdjJCYXNlLnByb3RvdHlwZS5ydW5UaW55WW9sb3YyID0gZnVuY3Rpb24gKHgsIHBhcmFtcykge1xyXG4gICAgICAgIHZhciBvdXQgPSBjb252V2l0aEJhdGNoTm9ybSh4LCBwYXJhbXMuY29udjApO1xyXG4gICAgICAgIG91dCA9IHRmLm1heFBvb2wob3V0LCBbMiwgMl0sIFsyLCAyXSwgJ3NhbWUnKTtcclxuICAgICAgICBvdXQgPSBjb252V2l0aEJhdGNoTm9ybShvdXQsIHBhcmFtcy5jb252MSk7XHJcbiAgICAgICAgb3V0ID0gdGYubWF4UG9vbChvdXQsIFsyLCAyXSwgWzIsIDJdLCAnc2FtZScpO1xyXG4gICAgICAgIG91dCA9IGNvbnZXaXRoQmF0Y2hOb3JtKG91dCwgcGFyYW1zLmNvbnYyKTtcclxuICAgICAgICBvdXQgPSB0Zi5tYXhQb29sKG91dCwgWzIsIDJdLCBbMiwgMl0sICdzYW1lJyk7XHJcbiAgICAgICAgb3V0ID0gY29udldpdGhCYXRjaE5vcm0ob3V0LCBwYXJhbXMuY29udjMpO1xyXG4gICAgICAgIG91dCA9IHRmLm1heFBvb2wob3V0LCBbMiwgMl0sIFsyLCAyXSwgJ3NhbWUnKTtcclxuICAgICAgICBvdXQgPSBjb252V2l0aEJhdGNoTm9ybShvdXQsIHBhcmFtcy5jb252NCk7XHJcbiAgICAgICAgb3V0ID0gdGYubWF4UG9vbChvdXQsIFsyLCAyXSwgWzIsIDJdLCAnc2FtZScpO1xyXG4gICAgICAgIG91dCA9IGNvbnZXaXRoQmF0Y2hOb3JtKG91dCwgcGFyYW1zLmNvbnY1KTtcclxuICAgICAgICBvdXQgPSB0Zi5tYXhQb29sKG91dCwgWzIsIDJdLCBbMSwgMV0sICdzYW1lJyk7XHJcbiAgICAgICAgb3V0ID0gY29udldpdGhCYXRjaE5vcm0ob3V0LCBwYXJhbXMuY29udjYpO1xyXG4gICAgICAgIG91dCA9IGNvbnZXaXRoQmF0Y2hOb3JtKG91dCwgcGFyYW1zLmNvbnY3KTtcclxuICAgICAgICByZXR1cm4gY29udkxheWVyKG91dCwgcGFyYW1zLmNvbnY4LCAndmFsaWQnLCBmYWxzZSk7XHJcbiAgICB9O1xyXG4gICAgVGlueVlvbG92MkJhc2UucHJvdG90eXBlLnJ1bk1vYmlsZW5ldCA9IGZ1bmN0aW9uICh4LCBwYXJhbXMpIHtcclxuICAgICAgICB2YXIgb3V0ID0gdGhpcy5jb25maWcuaXNGaXJzdExheWVyQ29udjJkXHJcbiAgICAgICAgICAgID8gbGVha3koY29udkxheWVyKHgsIHBhcmFtcy5jb252MCwgJ3ZhbGlkJywgZmFsc2UpKVxyXG4gICAgICAgICAgICA6IGRlcHRod2lzZVNlcGFyYWJsZUNvbnYoeCwgcGFyYW1zLmNvbnYwKTtcclxuICAgICAgICBvdXQgPSB0Zi5tYXhQb29sKG91dCwgWzIsIDJdLCBbMiwgMl0sICdzYW1lJyk7XHJcbiAgICAgICAgb3V0ID0gZGVwdGh3aXNlU2VwYXJhYmxlQ29udihvdXQsIHBhcmFtcy5jb252MSk7XHJcbiAgICAgICAgb3V0ID0gdGYubWF4UG9vbChvdXQsIFsyLCAyXSwgWzIsIDJdLCAnc2FtZScpO1xyXG4gICAgICAgIG91dCA9IGRlcHRod2lzZVNlcGFyYWJsZUNvbnYob3V0LCBwYXJhbXMuY29udjIpO1xyXG4gICAgICAgIG91dCA9IHRmLm1heFBvb2wob3V0LCBbMiwgMl0sIFsyLCAyXSwgJ3NhbWUnKTtcclxuICAgICAgICBvdXQgPSBkZXB0aHdpc2VTZXBhcmFibGVDb252KG91dCwgcGFyYW1zLmNvbnYzKTtcclxuICAgICAgICBvdXQgPSB0Zi5tYXhQb29sKG91dCwgWzIsIDJdLCBbMiwgMl0sICdzYW1lJyk7XHJcbiAgICAgICAgb3V0ID0gZGVwdGh3aXNlU2VwYXJhYmxlQ29udihvdXQsIHBhcmFtcy5jb252NCk7XHJcbiAgICAgICAgb3V0ID0gdGYubWF4UG9vbChvdXQsIFsyLCAyXSwgWzIsIDJdLCAnc2FtZScpO1xyXG4gICAgICAgIG91dCA9IGRlcHRod2lzZVNlcGFyYWJsZUNvbnYob3V0LCBwYXJhbXMuY29udjUpO1xyXG4gICAgICAgIG91dCA9IHRmLm1heFBvb2wob3V0LCBbMiwgMl0sIFsxLCAxXSwgJ3NhbWUnKTtcclxuICAgICAgICBvdXQgPSBwYXJhbXMuY29udjYgPyBkZXB0aHdpc2VTZXBhcmFibGVDb252KG91dCwgcGFyYW1zLmNvbnY2KSA6IG91dDtcclxuICAgICAgICBvdXQgPSBwYXJhbXMuY29udjcgPyBkZXB0aHdpc2VTZXBhcmFibGVDb252KG91dCwgcGFyYW1zLmNvbnY3KSA6IG91dDtcclxuICAgICAgICByZXR1cm4gY29udkxheWVyKG91dCwgcGFyYW1zLmNvbnY4LCAndmFsaWQnLCBmYWxzZSk7XHJcbiAgICB9O1xyXG4gICAgVGlueVlvbG92MkJhc2UucHJvdG90eXBlLmZvcndhcmRJbnB1dCA9IGZ1bmN0aW9uIChpbnB1dCwgaW5wdXRTaXplKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICB2YXIgcGFyYW1zID0gdGhpcy5wYXJhbXM7XHJcbiAgICAgICAgaWYgKCFwYXJhbXMpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdUaW55WW9sb3YyIC0gbG9hZCBtb2RlbCBiZWZvcmUgaW5mZXJlbmNlJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0Zi50aWR5KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIGJhdGNoVGVuc29yID0gaW5wdXQudG9CYXRjaFRlbnNvcihpbnB1dFNpemUsIGZhbHNlKS50b0Zsb2F0KCk7XHJcbiAgICAgICAgICAgIGJhdGNoVGVuc29yID0gX3RoaXMuY29uZmlnLm1lYW5SZ2JcclxuICAgICAgICAgICAgICAgID8gbm9ybWFsaXplKGJhdGNoVGVuc29yLCBfdGhpcy5jb25maWcubWVhblJnYilcclxuICAgICAgICAgICAgICAgIDogYmF0Y2hUZW5zb3I7XHJcbiAgICAgICAgICAgIGJhdGNoVGVuc29yID0gYmF0Y2hUZW5zb3IuZGl2KHRmLnNjYWxhcigyNTYpKTtcclxuICAgICAgICAgICAgcmV0dXJuIF90aGlzLmNvbmZpZy53aXRoU2VwYXJhYmxlQ29udnNcclxuICAgICAgICAgICAgICAgID8gX3RoaXMucnVuTW9iaWxlbmV0KGJhdGNoVGVuc29yLCBwYXJhbXMpXHJcbiAgICAgICAgICAgICAgICA6IF90aGlzLnJ1blRpbnlZb2xvdjIoYmF0Y2hUZW5zb3IsIHBhcmFtcyk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgVGlueVlvbG92MkJhc2UucHJvdG90eXBlLmZvcndhcmQgPSBmdW5jdGlvbiAoaW5wdXQsIGlucHV0U2l6ZSkge1xyXG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIF9hO1xyXG4gICAgICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9iKSB7XHJcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKF9iLmxhYmVsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYSA9IHRoaXMuZm9yd2FyZElucHV0O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCB0b05ldElucHV0KGlucHV0KV07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOiByZXR1cm4gWzQgLyp5aWVsZCovLCBfYS5hcHBseSh0aGlzLCBbX2Iuc2VudCgpLCBpbnB1dFNpemVdKV07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAyOiByZXR1cm4gWzIgLypyZXR1cm4qLywgX2Iuc2VudCgpXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgVGlueVlvbG92MkJhc2UucHJvdG90eXBlLmRldGVjdCA9IGZ1bmN0aW9uIChpbnB1dCwgZm9yd2FyZFBhcmFtcykge1xyXG4gICAgICAgIGlmIChmb3J3YXJkUGFyYW1zID09PSB2b2lkIDApIHsgZm9yd2FyZFBhcmFtcyA9IHt9OyB9XHJcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgX2EsIGlucHV0U2l6ZSwgc2NvcmVUaHJlc2hvbGQsIG5ldElucHV0LCBvdXQsIG91dDAsIGlucHV0RGltZW5zaW9ucywgcmVzdWx0cywgYm94ZXMsIHNjb3JlcywgY2xhc3NTY29yZXMsIGNsYXNzTmFtZXMsIGluZGljZXMsIGRldGVjdGlvbnM7XHJcbiAgICAgICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2IpIHtcclxuICAgICAgICAgICAgICAgIHN3aXRjaCAoX2IubGFiZWwpIHtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hID0gbmV3IFRpbnlZb2xvdjJPcHRpb25zKGZvcndhcmRQYXJhbXMpLCBpbnB1dFNpemUgPSBfYS5pbnB1dFNpemUsIHNjb3JlVGhyZXNob2xkID0gX2Euc2NvcmVUaHJlc2hvbGQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHRvTmV0SW5wdXQoaW5wdXQpXTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ldElucHV0ID0gX2Iuc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzLmZvcndhcmRJbnB1dChuZXRJbnB1dCwgaW5wdXRTaXplKV07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAyOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBvdXQgPSBfYi5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG91dDAgPSB0Zi50aWR5KGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRmLnVuc3RhY2sob3V0KVswXS5leHBhbmREaW1zKCk7IH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpbnB1dERpbWVuc2lvbnMgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogbmV0SW5wdXQuZ2V0SW5wdXRXaWR0aCgwKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodDogbmV0SW5wdXQuZ2V0SW5wdXRIZWlnaHQoMClcclxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgdGhpcy5leHRyYWN0Qm94ZXMob3V0MCwgbmV0SW5wdXQuZ2V0UmVzaGFwZWRJbnB1dERpbWVuc2lvbnMoMCksIHNjb3JlVGhyZXNob2xkKV07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAzOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHRzID0gX2Iuc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBvdXQuZGlzcG9zZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBvdXQwLmRpc3Bvc2UoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYm94ZXMgPSByZXN1bHRzLm1hcChmdW5jdGlvbiAocmVzKSB7IHJldHVybiByZXMuYm94OyB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2NvcmVzID0gcmVzdWx0cy5tYXAoZnVuY3Rpb24gKHJlcykgeyByZXR1cm4gcmVzLnNjb3JlOyB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NTY29yZXMgPSByZXN1bHRzLm1hcChmdW5jdGlvbiAocmVzKSB7IHJldHVybiByZXMuY2xhc3NTY29yZTsgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZXMgPSByZXN1bHRzLm1hcChmdW5jdGlvbiAocmVzKSB7IHJldHVybiBfdGhpcy5jb25maWcuY2xhc3Nlc1tyZXMubGFiZWxdOyB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaW5kaWNlcyA9IG5vbk1heFN1cHByZXNzaW9uKGJveGVzLm1hcChmdW5jdGlvbiAoYm94KSB7IHJldHVybiBib3gucmVzY2FsZShpbnB1dFNpemUpOyB9KSwgc2NvcmVzLCB0aGlzLmNvbmZpZy5pb3VUaHJlc2hvbGQsIHRydWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBkZXRlY3Rpb25zID0gaW5kaWNlcy5tYXAoZnVuY3Rpb24gKGlkeCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBPYmplY3REZXRlY3Rpb24oc2NvcmVzW2lkeF0sIGNsYXNzU2NvcmVzW2lkeF0sIGNsYXNzTmFtZXNbaWR4XSwgYm94ZXNbaWR4XSwgaW5wdXREaW1lbnNpb25zKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCBkZXRlY3Rpb25zXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgVGlueVlvbG92MkJhc2UucHJvdG90eXBlLmdldERlZmF1bHRNb2RlbE5hbWUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuICcnO1xyXG4gICAgfTtcclxuICAgIFRpbnlZb2xvdjJCYXNlLnByb3RvdHlwZS5leHRyYWN0UGFyYW1zRnJvbVdlaWd0aE1hcCA9IGZ1bmN0aW9uICh3ZWlnaHRNYXApIHtcclxuICAgICAgICByZXR1cm4gZXh0cmFjdFBhcmFtc0Zyb21XZWlndGhNYXAod2VpZ2h0TWFwLCB0aGlzLmNvbmZpZyk7XHJcbiAgICB9O1xyXG4gICAgVGlueVlvbG92MkJhc2UucHJvdG90eXBlLmV4dHJhY3RQYXJhbXMgPSBmdW5jdGlvbiAod2VpZ2h0cykge1xyXG4gICAgICAgIHZhciBmaWx0ZXJTaXplcyA9IHRoaXMuY29uZmlnLmZpbHRlclNpemVzIHx8IFRpbnlZb2xvdjJCYXNlLkRFRkFVTFRfRklMVEVSX1NJWkVTO1xyXG4gICAgICAgIHZhciBudW1GaWx0ZXJzID0gZmlsdGVyU2l6ZXMgPyBmaWx0ZXJTaXplcy5sZW5ndGggOiB1bmRlZmluZWQ7XHJcbiAgICAgICAgaWYgKG51bUZpbHRlcnMgIT09IDcgJiYgbnVtRmlsdGVycyAhPT0gOCAmJiBudW1GaWx0ZXJzICE9PSA5KSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlRpbnlZb2xvdjIgLSBleHBlY3RlZCA3IHwgOCB8IDkgY29udm9sdXRpb25hbCBmaWx0ZXJzLCBidXQgZm91bmQgXCIgKyBudW1GaWx0ZXJzICsgXCIgZmlsdGVyU2l6ZXMgaW4gY29uZmlnXCIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gZXh0cmFjdFBhcmFtcyh3ZWlnaHRzLCB0aGlzLmNvbmZpZywgdGhpcy5ib3hFbmNvZGluZ1NpemUsIGZpbHRlclNpemVzKTtcclxuICAgIH07XHJcbiAgICBUaW55WW9sb3YyQmFzZS5wcm90b3R5cGUuZXh0cmFjdEJveGVzID0gZnVuY3Rpb24gKG91dHB1dFRlbnNvciwgaW5wdXRCbG9iRGltZW5zaW9ucywgc2NvcmVUaHJlc2hvbGQpIHtcclxuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciB3aWR0aCwgaGVpZ2h0LCBpbnB1dFNpemUsIGNvcnJlY3Rpb25GYWN0b3JYLCBjb3JyZWN0aW9uRmFjdG9yWSwgbnVtQ2VsbHMsIG51bUJveGVzLCBfYSwgYm94ZXNUZW5zb3IsIHNjb3Jlc1RlbnNvciwgY2xhc3NTY29yZXNUZW5zb3IsIHJlc3VsdHMsIHNjb3Jlc0RhdGEsIGJveGVzRGF0YSwgcm93LCBjb2wsIGFuY2hvciwgc2NvcmUsIGN0WCwgY3RZLCB3aWR0aF8xLCBoZWlnaHRfMSwgeCwgeSwgcG9zLCBfYiwgY2xhc3NTY29yZSwgbGFiZWwsIF9jO1xyXG4gICAgICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9kKSB7XHJcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKF9kLmxhYmVsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB3aWR0aCA9IGlucHV0QmxvYkRpbWVuc2lvbnMud2lkdGgsIGhlaWdodCA9IGlucHV0QmxvYkRpbWVuc2lvbnMuaGVpZ2h0O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpbnB1dFNpemUgPSBNYXRoLm1heCh3aWR0aCwgaGVpZ2h0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29ycmVjdGlvbkZhY3RvclggPSBpbnB1dFNpemUgLyB3aWR0aDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29ycmVjdGlvbkZhY3RvclkgPSBpbnB1dFNpemUgLyBoZWlnaHQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG51bUNlbGxzID0gb3V0cHV0VGVuc29yLnNoYXBlWzFdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBudW1Cb3hlcyA9IHRoaXMuY29uZmlnLmFuY2hvcnMubGVuZ3RoO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYSA9IHRmLnRpZHkoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJlc2hhcGVkID0gb3V0cHV0VGVuc29yLnJlc2hhcGUoW251bUNlbGxzLCBudW1DZWxscywgbnVtQm94ZXMsIF90aGlzLmJveEVuY29kaW5nU2l6ZV0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGJveGVzID0gcmVzaGFwZWQuc2xpY2UoWzAsIDAsIDAsIDBdLCBbbnVtQ2VsbHMsIG51bUNlbGxzLCBudW1Cb3hlcywgNF0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNjb3JlcyA9IHJlc2hhcGVkLnNsaWNlKFswLCAwLCAwLCA0XSwgW251bUNlbGxzLCBudW1DZWxscywgbnVtQm94ZXMsIDFdKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjbGFzc1Njb3JlcyA9IF90aGlzLndpdGhDbGFzc1Njb3Jlc1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gdGYuc29mdG1heChyZXNoYXBlZC5zbGljZShbMCwgMCwgMCwgNV0sIFtudW1DZWxscywgbnVtQ2VsbHMsIG51bUJveGVzLCBfdGhpcy5jb25maWcuY2xhc3Nlcy5sZW5ndGhdKSwgMylcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IHRmLnNjYWxhcigwKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbYm94ZXMsIHNjb3JlcywgY2xhc3NTY29yZXNdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KSwgYm94ZXNUZW5zb3IgPSBfYVswXSwgc2NvcmVzVGVuc29yID0gX2FbMV0sIGNsYXNzU2NvcmVzVGVuc29yID0gX2FbMl07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdHMgPSBbXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgc2NvcmVzVGVuc29yLmFycmF5KCldO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2NvcmVzRGF0YSA9IF9kLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgYm94ZXNUZW5zb3IuYXJyYXkoKV07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAyOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBib3hlc0RhdGEgPSBfZC5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJvdyA9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9kLmxhYmVsID0gMztcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDM6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghKHJvdyA8IG51bUNlbGxzKSkgcmV0dXJuIFszIC8qYnJlYWsqLywgMTJdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb2wgPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfZC5sYWJlbCA9IDQ7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA0OlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIShjb2wgPCBudW1DZWxscykpIHJldHVybiBbMyAvKmJyZWFrKi8sIDExXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYW5jaG9yID0gMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2QubGFiZWwgPSA1O1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNTpcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEoYW5jaG9yIDwgbnVtQm94ZXMpKSByZXR1cm4gWzMgLypicmVhayovLCAxMF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNjb3JlID0gc2lnbW9pZChzY29yZXNEYXRhW3Jvd11bY29sXVthbmNob3JdWzBdKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEoIXNjb3JlVGhyZXNob2xkIHx8IHNjb3JlID4gc2NvcmVUaHJlc2hvbGQpKSByZXR1cm4gWzMgLypicmVhayovLCA5XTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY3RYID0gKChjb2wgKyBzaWdtb2lkKGJveGVzRGF0YVtyb3ddW2NvbF1bYW5jaG9yXVswXSkpIC8gbnVtQ2VsbHMpICogY29ycmVjdGlvbkZhY3Rvclg7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGN0WSA9ICgocm93ICsgc2lnbW9pZChib3hlc0RhdGFbcm93XVtjb2xdW2FuY2hvcl1bMV0pKSAvIG51bUNlbGxzKSAqIGNvcnJlY3Rpb25GYWN0b3JZO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB3aWR0aF8xID0gKChNYXRoLmV4cChib3hlc0RhdGFbcm93XVtjb2xdW2FuY2hvcl1bMl0pICogdGhpcy5jb25maWcuYW5jaG9yc1thbmNob3JdLngpIC8gbnVtQ2VsbHMpICogY29ycmVjdGlvbkZhY3Rvclg7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodF8xID0gKChNYXRoLmV4cChib3hlc0RhdGFbcm93XVtjb2xdW2FuY2hvcl1bM10pICogdGhpcy5jb25maWcuYW5jaG9yc1thbmNob3JdLnkpIC8gbnVtQ2VsbHMpICogY29ycmVjdGlvbkZhY3Rvclk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHggPSAoY3RYIC0gKHdpZHRoXzEgLyAyKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHkgPSAoY3RZIC0gKGhlaWdodF8xIC8gMikpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwb3MgPSB7IHJvdzogcm93LCBjb2w6IGNvbCwgYW5jaG9yOiBhbmNob3IgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLndpdGhDbGFzc1Njb3JlcykgcmV0dXJuIFszIC8qYnJlYWsqLywgN107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMuZXh0cmFjdFByZWRpY3RlZENsYXNzKGNsYXNzU2NvcmVzVGVuc29yLCBwb3MpXTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDY6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9jID0gX2Quc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzMgLypicmVhayovLCA4XTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDc6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9jID0geyBjbGFzc1Njb3JlOiAxLCBsYWJlbDogMCB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfZC5sYWJlbCA9IDg7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA4OlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYiA9IF9jLCBjbGFzc1Njb3JlID0gX2IuY2xhc3NTY29yZSwgbGFiZWwgPSBfYi5sYWJlbDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0cy5wdXNoKF9fYXNzaWduKHsgYm94OiBuZXcgQm91bmRpbmdCb3goeCwgeSwgeCArIHdpZHRoXzEsIHkgKyBoZWlnaHRfMSksIHNjb3JlOiBzY29yZSwgY2xhc3NTY29yZTogc2NvcmUgKiBjbGFzc1Njb3JlLCBsYWJlbDogbGFiZWwgfSwgcG9zKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9kLmxhYmVsID0gOTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDk6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFuY2hvcisrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzMgLypicmVhayovLCA1XTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDEwOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb2wrKztcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFszIC8qYnJlYWsqLywgNF07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxMTpcclxuICAgICAgICAgICAgICAgICAgICAgICAgcm93Kys7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMyAvKmJyZWFrKi8sIDNdO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTI6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJveGVzVGVuc29yLmRpc3Bvc2UoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2NvcmVzVGVuc29yLmRpc3Bvc2UoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NTY29yZXNUZW5zb3IuZGlzcG9zZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgcmVzdWx0c107XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIFRpbnlZb2xvdjJCYXNlLnByb3RvdHlwZS5leHRyYWN0UHJlZGljdGVkQ2xhc3MgPSBmdW5jdGlvbiAoY2xhc3Nlc1RlbnNvciwgcG9zKSB7XHJcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgcm93LCBjb2wsIGFuY2hvciwgY2xhc3Nlc0RhdGE7XHJcbiAgICAgICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcclxuICAgICAgICAgICAgICAgIHN3aXRjaCAoX2EubGFiZWwpIHtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJvdyA9IHBvcy5yb3csIGNvbCA9IHBvcy5jb2wsIGFuY2hvciA9IHBvcy5hbmNob3I7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIGNsYXNzZXNUZW5zb3IuYXJyYXkoKV07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjbGFzc2VzRGF0YSA9IF9hLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIEFycmF5KHRoaXMuY29uZmlnLmNsYXNzZXMubGVuZ3RoKS5maWxsKDApXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLm1hcChmdW5jdGlvbiAoXywgaSkgeyByZXR1cm4gY2xhc3Nlc0RhdGFbcm93XVtjb2xdW2FuY2hvcl1baV07IH0pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLm1hcChmdW5jdGlvbiAoY2xhc3NTY29yZSwgbGFiZWwpIHsgcmV0dXJuICh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NTY29yZTogY2xhc3NTY29yZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYWJlbDogbGFiZWxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pOyB9KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5yZWR1Y2UoZnVuY3Rpb24gKG1heCwgY3VycikgeyByZXR1cm4gbWF4LmNsYXNzU2NvcmUgPiBjdXJyLmNsYXNzU2NvcmUgPyBtYXggOiBjdXJyOyB9KV07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIFRpbnlZb2xvdjJCYXNlLkRFRkFVTFRfRklMVEVSX1NJWkVTID0gW1xyXG4gICAgICAgIDMsIDE2LCAzMiwgNjQsIDEyOCwgMjU2LCA1MTIsIDEwMjQsIDEwMjRcclxuICAgIF07XHJcbiAgICByZXR1cm4gVGlueVlvbG92MkJhc2U7XHJcbn0oTmV1cmFsTmV0d29yaykpO1xyXG5leHBvcnQgeyBUaW55WW9sb3YyQmFzZSB9O1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1UaW55WW9sb3YyQmFzZS5qcy5tYXAiLCJpbXBvcnQgeyBkaXNwb3NlVW51c2VkV2VpZ2h0VGVuc29ycyB9IGZyb20gJy4uL2NvbW1vbi9kaXNwb3NlVW51c2VkV2VpZ2h0VGVuc29ycyc7XHJcbmltcG9ydCB7IGxvYWRTZXBhcmFibGVDb252UGFyYW1zRmFjdG9yeSB9IGZyb20gJy4uL2NvbW1vbi9leHRyYWN0U2VwYXJhYmxlQ29udlBhcmFtc0ZhY3RvcnknO1xyXG5pbXBvcnQgeyBleHRyYWN0V2VpZ2h0RW50cnlGYWN0b3J5IH0gZnJvbSAnLi4vY29tbW9uL2V4dHJhY3RXZWlnaHRFbnRyeUZhY3RvcnknO1xyXG5mdW5jdGlvbiBleHRyYWN0b3JzRmFjdG9yeSh3ZWlnaHRNYXAsIHBhcmFtTWFwcGluZ3MpIHtcclxuICAgIHZhciBleHRyYWN0V2VpZ2h0RW50cnkgPSBleHRyYWN0V2VpZ2h0RW50cnlGYWN0b3J5KHdlaWdodE1hcCwgcGFyYW1NYXBwaW5ncyk7XHJcbiAgICBmdW5jdGlvbiBleHRyYWN0QmF0Y2hOb3JtUGFyYW1zKHByZWZpeCkge1xyXG4gICAgICAgIHZhciBzdWIgPSBleHRyYWN0V2VpZ2h0RW50cnkocHJlZml4ICsgXCIvc3ViXCIsIDEpO1xyXG4gICAgICAgIHZhciB0cnVlZGl2ID0gZXh0cmFjdFdlaWdodEVudHJ5KHByZWZpeCArIFwiL3RydWVkaXZcIiwgMSk7XHJcbiAgICAgICAgcmV0dXJuIHsgc3ViOiBzdWIsIHRydWVkaXY6IHRydWVkaXYgfTtcclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIGV4dHJhY3RDb252UGFyYW1zKHByZWZpeCkge1xyXG4gICAgICAgIHZhciBmaWx0ZXJzID0gZXh0cmFjdFdlaWdodEVudHJ5KHByZWZpeCArIFwiL2ZpbHRlcnNcIiwgNCk7XHJcbiAgICAgICAgdmFyIGJpYXMgPSBleHRyYWN0V2VpZ2h0RW50cnkocHJlZml4ICsgXCIvYmlhc1wiLCAxKTtcclxuICAgICAgICByZXR1cm4geyBmaWx0ZXJzOiBmaWx0ZXJzLCBiaWFzOiBiaWFzIH07XHJcbiAgICB9XHJcbiAgICBmdW5jdGlvbiBleHRyYWN0Q29udldpdGhCYXRjaE5vcm1QYXJhbXMocHJlZml4KSB7XHJcbiAgICAgICAgdmFyIGNvbnYgPSBleHRyYWN0Q29udlBhcmFtcyhwcmVmaXggKyBcIi9jb252XCIpO1xyXG4gICAgICAgIHZhciBibiA9IGV4dHJhY3RCYXRjaE5vcm1QYXJhbXMocHJlZml4ICsgXCIvYm5cIik7XHJcbiAgICAgICAgcmV0dXJuIHsgY29udjogY29udiwgYm46IGJuIH07XHJcbiAgICB9XHJcbiAgICB2YXIgZXh0cmFjdFNlcGFyYWJsZUNvbnZQYXJhbXMgPSBsb2FkU2VwYXJhYmxlQ29udlBhcmFtc0ZhY3RvcnkoZXh0cmFjdFdlaWdodEVudHJ5KTtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgZXh0cmFjdENvbnZQYXJhbXM6IGV4dHJhY3RDb252UGFyYW1zLFxyXG4gICAgICAgIGV4dHJhY3RDb252V2l0aEJhdGNoTm9ybVBhcmFtczogZXh0cmFjdENvbnZXaXRoQmF0Y2hOb3JtUGFyYW1zLFxyXG4gICAgICAgIGV4dHJhY3RTZXBhcmFibGVDb252UGFyYW1zOiBleHRyYWN0U2VwYXJhYmxlQ29udlBhcmFtc1xyXG4gICAgfTtcclxufVxyXG5leHBvcnQgZnVuY3Rpb24gZXh0cmFjdFBhcmFtc0Zyb21XZWlndGhNYXAod2VpZ2h0TWFwLCBjb25maWcpIHtcclxuICAgIHZhciBwYXJhbU1hcHBpbmdzID0gW107XHJcbiAgICB2YXIgX2EgPSBleHRyYWN0b3JzRmFjdG9yeSh3ZWlnaHRNYXAsIHBhcmFtTWFwcGluZ3MpLCBleHRyYWN0Q29udlBhcmFtcyA9IF9hLmV4dHJhY3RDb252UGFyYW1zLCBleHRyYWN0Q29udldpdGhCYXRjaE5vcm1QYXJhbXMgPSBfYS5leHRyYWN0Q29udldpdGhCYXRjaE5vcm1QYXJhbXMsIGV4dHJhY3RTZXBhcmFibGVDb252UGFyYW1zID0gX2EuZXh0cmFjdFNlcGFyYWJsZUNvbnZQYXJhbXM7XHJcbiAgICB2YXIgcGFyYW1zO1xyXG4gICAgaWYgKGNvbmZpZy53aXRoU2VwYXJhYmxlQ29udnMpIHtcclxuICAgICAgICB2YXIgbnVtRmlsdGVycyA9IChjb25maWcuZmlsdGVyU2l6ZXMgJiYgY29uZmlnLmZpbHRlclNpemVzLmxlbmd0aCB8fCA5KTtcclxuICAgICAgICBwYXJhbXMgPSB7XHJcbiAgICAgICAgICAgIGNvbnYwOiBjb25maWcuaXNGaXJzdExheWVyQ29udjJkID8gZXh0cmFjdENvbnZQYXJhbXMoJ2NvbnYwJykgOiBleHRyYWN0U2VwYXJhYmxlQ29udlBhcmFtcygnY29udjAnKSxcclxuICAgICAgICAgICAgY29udjE6IGV4dHJhY3RTZXBhcmFibGVDb252UGFyYW1zKCdjb252MScpLFxyXG4gICAgICAgICAgICBjb252MjogZXh0cmFjdFNlcGFyYWJsZUNvbnZQYXJhbXMoJ2NvbnYyJyksXHJcbiAgICAgICAgICAgIGNvbnYzOiBleHRyYWN0U2VwYXJhYmxlQ29udlBhcmFtcygnY29udjMnKSxcclxuICAgICAgICAgICAgY29udjQ6IGV4dHJhY3RTZXBhcmFibGVDb252UGFyYW1zKCdjb252NCcpLFxyXG4gICAgICAgICAgICBjb252NTogZXh0cmFjdFNlcGFyYWJsZUNvbnZQYXJhbXMoJ2NvbnY1JyksXHJcbiAgICAgICAgICAgIGNvbnY2OiBudW1GaWx0ZXJzID4gNyA/IGV4dHJhY3RTZXBhcmFibGVDb252UGFyYW1zKCdjb252NicpIDogdW5kZWZpbmVkLFxyXG4gICAgICAgICAgICBjb252NzogbnVtRmlsdGVycyA+IDggPyBleHRyYWN0U2VwYXJhYmxlQ29udlBhcmFtcygnY29udjcnKSA6IHVuZGVmaW5lZCxcclxuICAgICAgICAgICAgY29udjg6IGV4dHJhY3RDb252UGFyYW1zKCdjb252OCcpXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIHBhcmFtcyA9IHtcclxuICAgICAgICAgICAgY29udjA6IGV4dHJhY3RDb252V2l0aEJhdGNoTm9ybVBhcmFtcygnY29udjAnKSxcclxuICAgICAgICAgICAgY29udjE6IGV4dHJhY3RDb252V2l0aEJhdGNoTm9ybVBhcmFtcygnY29udjEnKSxcclxuICAgICAgICAgICAgY29udjI6IGV4dHJhY3RDb252V2l0aEJhdGNoTm9ybVBhcmFtcygnY29udjInKSxcclxuICAgICAgICAgICAgY29udjM6IGV4dHJhY3RDb252V2l0aEJhdGNoTm9ybVBhcmFtcygnY29udjMnKSxcclxuICAgICAgICAgICAgY29udjQ6IGV4dHJhY3RDb252V2l0aEJhdGNoTm9ybVBhcmFtcygnY29udjQnKSxcclxuICAgICAgICAgICAgY29udjU6IGV4dHJhY3RDb252V2l0aEJhdGNoTm9ybVBhcmFtcygnY29udjUnKSxcclxuICAgICAgICAgICAgY29udjY6IGV4dHJhY3RDb252V2l0aEJhdGNoTm9ybVBhcmFtcygnY29udjYnKSxcclxuICAgICAgICAgICAgY29udjc6IGV4dHJhY3RDb252V2l0aEJhdGNoTm9ybVBhcmFtcygnY29udjcnKSxcclxuICAgICAgICAgICAgY29udjg6IGV4dHJhY3RDb252UGFyYW1zKCdjb252OCcpXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuICAgIGRpc3Bvc2VVbnVzZWRXZWlnaHRUZW5zb3JzKHdlaWdodE1hcCwgcGFyYW1NYXBwaW5ncyk7XHJcbiAgICByZXR1cm4geyBwYXJhbXM6IHBhcmFtcywgcGFyYW1NYXBwaW5nczogcGFyYW1NYXBwaW5ncyB9O1xyXG59XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWV4dHJhY3RQYXJhbXNGcm9tV2VpZ3RoTWFwLmpzLm1hcCIsImltcG9ydCAqIGFzIHRmIGZyb20gJ0B0ZW5zb3JmbG93L3RmanMtY29yZSc7XHJcbmltcG9ydCB7IGV4dHJhY3RDb252UGFyYW1zRmFjdG9yeSB9IGZyb20gJy4uL2NvbW1vbic7XHJcbmltcG9ydCB7IGV4dHJhY3RTZXBhcmFibGVDb252UGFyYW1zRmFjdG9yeSB9IGZyb20gJy4uL2NvbW1vbi9leHRyYWN0U2VwYXJhYmxlQ29udlBhcmFtc0ZhY3RvcnknO1xyXG5pbXBvcnQgeyBleHRyYWN0V2VpZ2h0c0ZhY3RvcnkgfSBmcm9tICcuLi9jb21tb24vZXh0cmFjdFdlaWdodHNGYWN0b3J5JztcclxuZnVuY3Rpb24gZXh0cmFjdG9yc0ZhY3RvcnkoZXh0cmFjdFdlaWdodHMsIHBhcmFtTWFwcGluZ3MpIHtcclxuICAgIHZhciBleHRyYWN0Q29udlBhcmFtcyA9IGV4dHJhY3RDb252UGFyYW1zRmFjdG9yeShleHRyYWN0V2VpZ2h0cywgcGFyYW1NYXBwaW5ncyk7XHJcbiAgICBmdW5jdGlvbiBleHRyYWN0QmF0Y2hOb3JtUGFyYW1zKHNpemUsIG1hcHBlZFByZWZpeCkge1xyXG4gICAgICAgIHZhciBzdWIgPSB0Zi50ZW5zb3IxZChleHRyYWN0V2VpZ2h0cyhzaXplKSk7XHJcbiAgICAgICAgdmFyIHRydWVkaXYgPSB0Zi50ZW5zb3IxZChleHRyYWN0V2VpZ2h0cyhzaXplKSk7XHJcbiAgICAgICAgcGFyYW1NYXBwaW5ncy5wdXNoKHsgcGFyYW1QYXRoOiBtYXBwZWRQcmVmaXggKyBcIi9zdWJcIiB9LCB7IHBhcmFtUGF0aDogbWFwcGVkUHJlZml4ICsgXCIvdHJ1ZWRpdlwiIH0pO1xyXG4gICAgICAgIHJldHVybiB7IHN1Yjogc3ViLCB0cnVlZGl2OiB0cnVlZGl2IH07XHJcbiAgICB9XHJcbiAgICBmdW5jdGlvbiBleHRyYWN0Q29udldpdGhCYXRjaE5vcm1QYXJhbXMoY2hhbm5lbHNJbiwgY2hhbm5lbHNPdXQsIG1hcHBlZFByZWZpeCkge1xyXG4gICAgICAgIHZhciBjb252ID0gZXh0cmFjdENvbnZQYXJhbXMoY2hhbm5lbHNJbiwgY2hhbm5lbHNPdXQsIDMsIG1hcHBlZFByZWZpeCArIFwiL2NvbnZcIik7XHJcbiAgICAgICAgdmFyIGJuID0gZXh0cmFjdEJhdGNoTm9ybVBhcmFtcyhjaGFubmVsc091dCwgbWFwcGVkUHJlZml4ICsgXCIvYm5cIik7XHJcbiAgICAgICAgcmV0dXJuIHsgY29udjogY29udiwgYm46IGJuIH07XHJcbiAgICB9XHJcbiAgICB2YXIgZXh0cmFjdFNlcGFyYWJsZUNvbnZQYXJhbXMgPSBleHRyYWN0U2VwYXJhYmxlQ29udlBhcmFtc0ZhY3RvcnkoZXh0cmFjdFdlaWdodHMsIHBhcmFtTWFwcGluZ3MpO1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBleHRyYWN0Q29udlBhcmFtczogZXh0cmFjdENvbnZQYXJhbXMsXHJcbiAgICAgICAgZXh0cmFjdENvbnZXaXRoQmF0Y2hOb3JtUGFyYW1zOiBleHRyYWN0Q29udldpdGhCYXRjaE5vcm1QYXJhbXMsXHJcbiAgICAgICAgZXh0cmFjdFNlcGFyYWJsZUNvbnZQYXJhbXM6IGV4dHJhY3RTZXBhcmFibGVDb252UGFyYW1zXHJcbiAgICB9O1xyXG59XHJcbmV4cG9ydCBmdW5jdGlvbiBleHRyYWN0UGFyYW1zKHdlaWdodHMsIGNvbmZpZywgYm94RW5jb2RpbmdTaXplLCBmaWx0ZXJTaXplcykge1xyXG4gICAgdmFyIF9hID0gZXh0cmFjdFdlaWdodHNGYWN0b3J5KHdlaWdodHMpLCBleHRyYWN0V2VpZ2h0cyA9IF9hLmV4dHJhY3RXZWlnaHRzLCBnZXRSZW1haW5pbmdXZWlnaHRzID0gX2EuZ2V0UmVtYWluaW5nV2VpZ2h0cztcclxuICAgIHZhciBwYXJhbU1hcHBpbmdzID0gW107XHJcbiAgICB2YXIgX2IgPSBleHRyYWN0b3JzRmFjdG9yeShleHRyYWN0V2VpZ2h0cywgcGFyYW1NYXBwaW5ncyksIGV4dHJhY3RDb252UGFyYW1zID0gX2IuZXh0cmFjdENvbnZQYXJhbXMsIGV4dHJhY3RDb252V2l0aEJhdGNoTm9ybVBhcmFtcyA9IF9iLmV4dHJhY3RDb252V2l0aEJhdGNoTm9ybVBhcmFtcywgZXh0cmFjdFNlcGFyYWJsZUNvbnZQYXJhbXMgPSBfYi5leHRyYWN0U2VwYXJhYmxlQ29udlBhcmFtcztcclxuICAgIHZhciBwYXJhbXM7XHJcbiAgICBpZiAoY29uZmlnLndpdGhTZXBhcmFibGVDb252cykge1xyXG4gICAgICAgIHZhciBzMCA9IGZpbHRlclNpemVzWzBdLCBzMSA9IGZpbHRlclNpemVzWzFdLCBzMiA9IGZpbHRlclNpemVzWzJdLCBzMyA9IGZpbHRlclNpemVzWzNdLCBzNCA9IGZpbHRlclNpemVzWzRdLCBzNSA9IGZpbHRlclNpemVzWzVdLCBzNiA9IGZpbHRlclNpemVzWzZdLCBzNyA9IGZpbHRlclNpemVzWzddLCBzOCA9IGZpbHRlclNpemVzWzhdO1xyXG4gICAgICAgIHZhciBjb252MCA9IGNvbmZpZy5pc0ZpcnN0TGF5ZXJDb252MmRcclxuICAgICAgICAgICAgPyBleHRyYWN0Q29udlBhcmFtcyhzMCwgczEsIDMsICdjb252MCcpXHJcbiAgICAgICAgICAgIDogZXh0cmFjdFNlcGFyYWJsZUNvbnZQYXJhbXMoczAsIHMxLCAnY29udjAnKTtcclxuICAgICAgICB2YXIgY29udjEgPSBleHRyYWN0U2VwYXJhYmxlQ29udlBhcmFtcyhzMSwgczIsICdjb252MScpO1xyXG4gICAgICAgIHZhciBjb252MiA9IGV4dHJhY3RTZXBhcmFibGVDb252UGFyYW1zKHMyLCBzMywgJ2NvbnYyJyk7XHJcbiAgICAgICAgdmFyIGNvbnYzID0gZXh0cmFjdFNlcGFyYWJsZUNvbnZQYXJhbXMoczMsIHM0LCAnY29udjMnKTtcclxuICAgICAgICB2YXIgY29udjQgPSBleHRyYWN0U2VwYXJhYmxlQ29udlBhcmFtcyhzNCwgczUsICdjb252NCcpO1xyXG4gICAgICAgIHZhciBjb252NSA9IGV4dHJhY3RTZXBhcmFibGVDb252UGFyYW1zKHM1LCBzNiwgJ2NvbnY1Jyk7XHJcbiAgICAgICAgdmFyIGNvbnY2ID0gczcgPyBleHRyYWN0U2VwYXJhYmxlQ29udlBhcmFtcyhzNiwgczcsICdjb252NicpIDogdW5kZWZpbmVkO1xyXG4gICAgICAgIHZhciBjb252NyA9IHM4ID8gZXh0cmFjdFNlcGFyYWJsZUNvbnZQYXJhbXMoczcsIHM4LCAnY29udjcnKSA6IHVuZGVmaW5lZDtcclxuICAgICAgICB2YXIgY29udjggPSBleHRyYWN0Q29udlBhcmFtcyhzOCB8fCBzNyB8fCBzNiwgNSAqIGJveEVuY29kaW5nU2l6ZSwgMSwgJ2NvbnY4Jyk7XHJcbiAgICAgICAgcGFyYW1zID0geyBjb252MDogY29udjAsIGNvbnYxOiBjb252MSwgY29udjI6IGNvbnYyLCBjb252MzogY29udjMsIGNvbnY0OiBjb252NCwgY29udjU6IGNvbnY1LCBjb252NjogY29udjYsIGNvbnY3OiBjb252NywgY29udjg6IGNvbnY4IH07XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICB2YXIgczAgPSBmaWx0ZXJTaXplc1swXSwgczEgPSBmaWx0ZXJTaXplc1sxXSwgczIgPSBmaWx0ZXJTaXplc1syXSwgczMgPSBmaWx0ZXJTaXplc1szXSwgczQgPSBmaWx0ZXJTaXplc1s0XSwgczUgPSBmaWx0ZXJTaXplc1s1XSwgczYgPSBmaWx0ZXJTaXplc1s2XSwgczcgPSBmaWx0ZXJTaXplc1s3XSwgczggPSBmaWx0ZXJTaXplc1s4XTtcclxuICAgICAgICB2YXIgY29udjAgPSBleHRyYWN0Q29udldpdGhCYXRjaE5vcm1QYXJhbXMoczAsIHMxLCAnY29udjAnKTtcclxuICAgICAgICB2YXIgY29udjEgPSBleHRyYWN0Q29udldpdGhCYXRjaE5vcm1QYXJhbXMoczEsIHMyLCAnY29udjEnKTtcclxuICAgICAgICB2YXIgY29udjIgPSBleHRyYWN0Q29udldpdGhCYXRjaE5vcm1QYXJhbXMoczIsIHMzLCAnY29udjInKTtcclxuICAgICAgICB2YXIgY29udjMgPSBleHRyYWN0Q29udldpdGhCYXRjaE5vcm1QYXJhbXMoczMsIHM0LCAnY29udjMnKTtcclxuICAgICAgICB2YXIgY29udjQgPSBleHRyYWN0Q29udldpdGhCYXRjaE5vcm1QYXJhbXMoczQsIHM1LCAnY29udjQnKTtcclxuICAgICAgICB2YXIgY29udjUgPSBleHRyYWN0Q29udldpdGhCYXRjaE5vcm1QYXJhbXMoczUsIHM2LCAnY29udjUnKTtcclxuICAgICAgICB2YXIgY29udjYgPSBleHRyYWN0Q29udldpdGhCYXRjaE5vcm1QYXJhbXMoczYsIHM3LCAnY29udjYnKTtcclxuICAgICAgICB2YXIgY29udjcgPSBleHRyYWN0Q29udldpdGhCYXRjaE5vcm1QYXJhbXMoczcsIHM4LCAnY29udjcnKTtcclxuICAgICAgICB2YXIgY29udjggPSBleHRyYWN0Q29udlBhcmFtcyhzOCwgNSAqIGJveEVuY29kaW5nU2l6ZSwgMSwgJ2NvbnY4Jyk7XHJcbiAgICAgICAgcGFyYW1zID0geyBjb252MDogY29udjAsIGNvbnYxOiBjb252MSwgY29udjI6IGNvbnYyLCBjb252MzogY29udjMsIGNvbnY0OiBjb252NCwgY29udjU6IGNvbnY1LCBjb252NjogY29udjYsIGNvbnY3OiBjb252NywgY29udjg6IGNvbnY4IH07XHJcbiAgICB9XHJcbiAgICBpZiAoZ2V0UmVtYWluaW5nV2VpZ2h0cygpLmxlbmd0aCAhPT0gMCkge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIndlaWdodHMgcmVtYWluZyBhZnRlciBleHRyYWN0OiBcIiArIGdldFJlbWFpbmluZ1dlaWdodHMoKS5sZW5ndGgpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHsgcGFyYW1zOiBwYXJhbXMsIHBhcmFtTWFwcGluZ3M6IHBhcmFtTWFwcGluZ3MgfTtcclxufVxyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1leHRyYWN0UGFyYW1zLmpzLm1hcCIsImltcG9ydCB7IF9fYXdhaXRlciwgX19leHRlbmRzLCBfX2dlbmVyYXRvciB9IGZyb20gXCJ0c2xpYlwiO1xyXG5pbXBvcnQgeyBGYWNlRGV0ZWN0aW9uIH0gZnJvbSAnLi4vY2xhc3Nlcyc7XHJcbmltcG9ydCB7IEJPWF9BTkNIT1JTLCBCT1hfQU5DSE9SU19TRVBBUkFCTEUsIERFRkFVTFRfTU9ERUxfTkFNRSwgREVGQVVMVF9NT0RFTF9OQU1FX1NFUEFSQUJMRV9DT05WLCBJT1VfVEhSRVNIT0xELCBNRUFOX1JHQl9TRVBBUkFCTEUsIH0gZnJvbSAnLi9jb25zdCc7XHJcbmltcG9ydCB7IFRpbnlZb2xvdjJCYXNlIH0gZnJvbSAnLi9UaW55WW9sb3YyQmFzZSc7XHJcbnZhciBUaW55WW9sb3YyID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xyXG4gICAgX19leHRlbmRzKFRpbnlZb2xvdjIsIF9zdXBlcik7XHJcbiAgICBmdW5jdGlvbiBUaW55WW9sb3YyKHdpdGhTZXBhcmFibGVDb252cykge1xyXG4gICAgICAgIGlmICh3aXRoU2VwYXJhYmxlQ29udnMgPT09IHZvaWQgMCkgeyB3aXRoU2VwYXJhYmxlQ29udnMgPSB0cnVlOyB9XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICB2YXIgY29uZmlnID0gT2JqZWN0LmFzc2lnbih7fSwge1xyXG4gICAgICAgICAgICB3aXRoU2VwYXJhYmxlQ29udnM6IHdpdGhTZXBhcmFibGVDb252cyxcclxuICAgICAgICAgICAgaW91VGhyZXNob2xkOiBJT1VfVEhSRVNIT0xELFxyXG4gICAgICAgICAgICBjbGFzc2VzOiBbJ2ZhY2UnXVxyXG4gICAgICAgIH0sIHdpdGhTZXBhcmFibGVDb252c1xyXG4gICAgICAgICAgICA/IHtcclxuICAgICAgICAgICAgICAgIGFuY2hvcnM6IEJPWF9BTkNIT1JTX1NFUEFSQUJMRSxcclxuICAgICAgICAgICAgICAgIG1lYW5SZ2I6IE1FQU5fUkdCX1NFUEFSQUJMRVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIDoge1xyXG4gICAgICAgICAgICAgICAgYW5jaG9yczogQk9YX0FOQ0hPUlMsXHJcbiAgICAgICAgICAgICAgICB3aXRoQ2xhc3NTY29yZXM6IHRydWVcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBjb25maWcpIHx8IHRoaXM7XHJcbiAgICAgICAgcmV0dXJuIF90aGlzO1xyXG4gICAgfVxyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFRpbnlZb2xvdjIucHJvdG90eXBlLCBcIndpdGhTZXBhcmFibGVDb252c1wiLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNvbmZpZy53aXRoU2VwYXJhYmxlQ29udnM7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoVGlueVlvbG92Mi5wcm90b3R5cGUsIFwiYW5jaG9yc1wiLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNvbmZpZy5hbmNob3JzO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgVGlueVlvbG92Mi5wcm90b3R5cGUubG9jYXRlRmFjZXMgPSBmdW5jdGlvbiAoaW5wdXQsIGZvcndhcmRQYXJhbXMpIHtcclxuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciBvYmplY3REZXRlY3Rpb25zO1xyXG4gICAgICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XHJcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKF9hLmxhYmVsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOiByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzLmRldGVjdChpbnB1dCwgZm9yd2FyZFBhcmFtcyldO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcclxuICAgICAgICAgICAgICAgICAgICAgICAgb2JqZWN0RGV0ZWN0aW9ucyA9IF9hLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIG9iamVjdERldGVjdGlvbnMubWFwKGZ1bmN0aW9uIChkZXQpIHsgcmV0dXJuIG5ldyBGYWNlRGV0ZWN0aW9uKGRldC5zY29yZSwgZGV0LnJlbGF0aXZlQm94LCB7IHdpZHRoOiBkZXQuaW1hZ2VXaWR0aCwgaGVpZ2h0OiBkZXQuaW1hZ2VIZWlnaHQgfSk7IH0pXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgVGlueVlvbG92Mi5wcm90b3R5cGUuZ2V0RGVmYXVsdE1vZGVsTmFtZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy53aXRoU2VwYXJhYmxlQ29udnMgPyBERUZBVUxUX01PREVMX05BTUVfU0VQQVJBQkxFX0NPTlYgOiBERUZBVUxUX01PREVMX05BTUU7XHJcbiAgICB9O1xyXG4gICAgVGlueVlvbG92Mi5wcm90b3R5cGUuZXh0cmFjdFBhcmFtc0Zyb21XZWlndGhNYXAgPSBmdW5jdGlvbiAod2VpZ2h0TWFwKSB7XHJcbiAgICAgICAgcmV0dXJuIF9zdXBlci5wcm90b3R5cGUuZXh0cmFjdFBhcmFtc0Zyb21XZWlndGhNYXAuY2FsbCh0aGlzLCB3ZWlnaHRNYXApO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBUaW55WW9sb3YyO1xyXG59KFRpbnlZb2xvdjJCYXNlKSk7XHJcbmV4cG9ydCB7IFRpbnlZb2xvdjIgfTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9VGlueVlvbG92Mi5qcy5tYXAiLCJpbXBvcnQgeyBUaW55WW9sb3YyIH0gZnJvbSAnLi9UaW55WW9sb3YyJztcclxuZXhwb3J0ICogZnJvbSAnLi9UaW55WW9sb3YyT3B0aW9ucyc7XHJcbmV4cG9ydCAqIGZyb20gJy4vY29uZmlnJztcclxuZXhwb3J0IHsgVGlueVlvbG92MiB9O1xyXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlVGlueVlvbG92Mih3ZWlnaHRzLCB3aXRoU2VwYXJhYmxlQ29udnMpIHtcclxuICAgIGlmICh3aXRoU2VwYXJhYmxlQ29udnMgPT09IHZvaWQgMCkgeyB3aXRoU2VwYXJhYmxlQ29udnMgPSB0cnVlOyB9XHJcbiAgICB2YXIgbmV0ID0gbmV3IFRpbnlZb2xvdjIod2l0aFNlcGFyYWJsZUNvbnZzKTtcclxuICAgIG5ldC5leHRyYWN0V2VpZ2h0cyh3ZWlnaHRzKTtcclxuICAgIHJldHVybiBuZXQ7XHJcbn1cclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIiwiaW1wb3J0IHsgX19leHRlbmRzIH0gZnJvbSBcInRzbGliXCI7XHJcbmltcG9ydCB7IFRpbnlZb2xvdjJPcHRpb25zIH0gZnJvbSAnLi4vdGlueVlvbG92Mic7XHJcbnZhciBUaW55RmFjZURldGVjdG9yT3B0aW9ucyA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcclxuICAgIF9fZXh0ZW5kcyhUaW55RmFjZURldGVjdG9yT3B0aW9ucywgX3N1cGVyKTtcclxuICAgIGZ1bmN0aW9uIFRpbnlGYWNlRGV0ZWN0b3JPcHRpb25zKCkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlciAhPT0gbnVsbCAmJiBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xyXG4gICAgICAgIF90aGlzLl9uYW1lID0gJ1RpbnlGYWNlRGV0ZWN0b3JPcHRpb25zJztcclxuICAgICAgICByZXR1cm4gX3RoaXM7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gVGlueUZhY2VEZXRlY3Rvck9wdGlvbnM7XHJcbn0oVGlueVlvbG92Mk9wdGlvbnMpKTtcclxuZXhwb3J0IHsgVGlueUZhY2VEZXRlY3Rvck9wdGlvbnMgfTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9VGlueUZhY2VEZXRlY3Rvck9wdGlvbnMuanMubWFwIiwiaW1wb3J0IHsgX19hd2FpdGVyLCBfX2dlbmVyYXRvciB9IGZyb20gXCJ0c2xpYlwiO1xyXG52YXIgQ29tcG9zYWJsZVRhc2sgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBDb21wb3NhYmxlVGFzaygpIHtcclxuICAgIH1cclxuICAgIENvbXBvc2FibGVUYXNrLnByb3RvdHlwZS50aGVuID0gZnVuY3Rpb24gKG9uZnVsZmlsbGVkKSB7XHJcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgX2E7XHJcbiAgICAgICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2IpIHtcclxuICAgICAgICAgICAgICAgIHN3aXRjaCAoX2IubGFiZWwpIHtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hID0gb25mdWxmaWxsZWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMucnVuKCldO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTogcmV0dXJuIFsyIC8qcmV0dXJuKi8sIF9hLmFwcGx5KHZvaWQgMCwgW19iLnNlbnQoKV0pXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgQ29tcG9zYWJsZVRhc2sucHJvdG90eXBlLnJ1biA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcclxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignQ29tcG9zYWJsZVRhc2sgLSBydW4gaXMgbm90IGltcGxlbWVudGVkJyk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBDb21wb3NhYmxlVGFzaztcclxufSgpKTtcclxuZXhwb3J0IHsgQ29tcG9zYWJsZVRhc2sgfTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Q29tcG9zYWJsZVRhc2suanMubWFwIiwiaW1wb3J0IHsgX19hd2FpdGVyLCBfX2dlbmVyYXRvciB9IGZyb20gXCJ0c2xpYlwiO1xyXG5pbXBvcnQgKiBhcyB0ZiBmcm9tICdAdGVuc29yZmxvdy90ZmpzLWNvcmUnO1xyXG5pbXBvcnQgeyBleHRyYWN0RmFjZXMsIGV4dHJhY3RGYWNlVGVuc29ycyB9IGZyb20gJy4uL2RvbSc7XHJcbmltcG9ydCB7IGlzV2l0aEZhY2VMYW5kbWFya3MgfSBmcm9tICcuLi9mYWN0b3JpZXMvV2l0aEZhY2VMYW5kbWFya3MnO1xyXG5leHBvcnQgZnVuY3Rpb24gZXh0cmFjdEFsbEZhY2VzQW5kQ29tcHV0ZVJlc3VsdHMocGFyZW50UmVzdWx0cywgaW5wdXQsIGNvbXB1dGVSZXN1bHRzLCBleHRyYWN0ZWRGYWNlcywgZ2V0UmVjdEZvckFsaWdubWVudCkge1xyXG4gICAgaWYgKGdldFJlY3RGb3JBbGlnbm1lbnQgPT09IHZvaWQgMCkgeyBnZXRSZWN0Rm9yQWxpZ25tZW50ID0gZnVuY3Rpb24gKF9hKSB7XHJcbiAgICAgICAgdmFyIGFsaWduZWRSZWN0ID0gX2EuYWxpZ25lZFJlY3Q7XHJcbiAgICAgICAgcmV0dXJuIGFsaWduZWRSZWN0O1xyXG4gICAgfTsgfVxyXG4gICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBmYWNlQm94ZXMsIGZhY2VzLCBfYSwgX2IsIHJlc3VsdHM7XHJcbiAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYykge1xyXG4gICAgICAgICAgICBzd2l0Y2ggKF9jLmxhYmVsKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDA6XHJcbiAgICAgICAgICAgICAgICAgICAgZmFjZUJveGVzID0gcGFyZW50UmVzdWx0cy5tYXAoZnVuY3Rpb24gKHBhcmVudFJlc3VsdCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gaXNXaXRoRmFjZUxhbmRtYXJrcyhwYXJlbnRSZXN1bHQpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IGdldFJlY3RGb3JBbGlnbm1lbnQocGFyZW50UmVzdWx0KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBwYXJlbnRSZXN1bHQuZGV0ZWN0aW9uO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIF9hID0gZXh0cmFjdGVkRmFjZXM7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKF9hKSByZXR1cm4gWzMgLypicmVhayovLCA1XTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIShpbnB1dCBpbnN0YW5jZW9mIHRmLlRlbnNvcikpIHJldHVybiBbMyAvKmJyZWFrKi8sIDJdO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIGV4dHJhY3RGYWNlVGVuc29ycyhpbnB1dCwgZmFjZUJveGVzKV07XHJcbiAgICAgICAgICAgICAgICBjYXNlIDE6XHJcbiAgICAgICAgICAgICAgICAgICAgX2IgPSBfYy5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFszIC8qYnJlYWsqLywgNF07XHJcbiAgICAgICAgICAgICAgICBjYXNlIDI6IHJldHVybiBbNCAvKnlpZWxkKi8sIGV4dHJhY3RGYWNlcyhpbnB1dCwgZmFjZUJveGVzKV07XHJcbiAgICAgICAgICAgICAgICBjYXNlIDM6XHJcbiAgICAgICAgICAgICAgICAgICAgX2IgPSBfYy5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgX2MubGFiZWwgPSA0O1xyXG4gICAgICAgICAgICAgICAgY2FzZSA0OlxyXG4gICAgICAgICAgICAgICAgICAgIF9hID0gKF9iKTtcclxuICAgICAgICAgICAgICAgICAgICBfYy5sYWJlbCA9IDU7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDU6XHJcbiAgICAgICAgICAgICAgICAgICAgZmFjZXMgPSBfYTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCBjb21wdXRlUmVzdWx0cyhmYWNlcyldO1xyXG4gICAgICAgICAgICAgICAgY2FzZSA2OlxyXG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdHMgPSBfYy5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgZmFjZXMuZm9yRWFjaChmdW5jdGlvbiAoZikgeyByZXR1cm4gZiBpbnN0YW5jZW9mIHRmLlRlbnNvciAmJiBmLmRpc3Bvc2UoKTsgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIHJlc3VsdHNdO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9KTtcclxufVxyXG5leHBvcnQgZnVuY3Rpb24gZXh0cmFjdFNpbmdsZUZhY2VBbmRDb21wdXRlUmVzdWx0KHBhcmVudFJlc3VsdCwgaW5wdXQsIGNvbXB1dGVSZXN1bHQsIGV4dHJhY3RlZEZhY2VzLCBnZXRSZWN0Rm9yQWxpZ25tZW50KSB7XHJcbiAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCBleHRyYWN0QWxsRmFjZXNBbmRDb21wdXRlUmVzdWx0cyhbcGFyZW50UmVzdWx0XSwgaW5wdXQsIGZ1bmN0aW9uIChmYWNlcykgeyByZXR1cm4gX19hd2FpdGVyKF90aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkgeyByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIGNvbXB1dGVSZXN1bHQoZmFjZXNbMF0pXTtcclxuICAgICAgICAgICAgICAgIH0pOyB9KTsgfSwgZXh0cmFjdGVkRmFjZXMsIGdldFJlY3RGb3JBbGlnbm1lbnQpXTtcclxuICAgICAgICB9KTtcclxuICAgIH0pO1xyXG59XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWV4dHJhY3RGYWNlc0FuZENvbXB1dGVSZXN1bHRzLmpzLm1hcCIsImV4cG9ydCBmdW5jdGlvbiBnZXRTaXplc0ZvclNjYWxlKHNjYWxlLCBfYSkge1xyXG4gICAgdmFyIGhlaWdodCA9IF9hWzBdLCB3aWR0aCA9IF9hWzFdO1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBoZWlnaHQ6IE1hdGguZmxvb3IoaGVpZ2h0ICogc2NhbGUpLFxyXG4gICAgICAgIHdpZHRoOiBNYXRoLmZsb29yKHdpZHRoICogc2NhbGUpXHJcbiAgICB9O1xyXG59XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWdldFNpemVzRm9yU2NhbGUuanMubWFwIiwiaW1wb3J0IHsgX19leHRlbmRzIH0gZnJvbSBcInRzbGliXCI7XHJcbmltcG9ydCB7IEJveCB9IGZyb20gJy4uL2NsYXNzZXMnO1xyXG52YXIgTXRjbm5Cb3ggPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XHJcbiAgICBfX2V4dGVuZHMoTXRjbm5Cb3gsIF9zdXBlcik7XHJcbiAgICBmdW5jdGlvbiBNdGNubkJveChsZWZ0LCB0b3AsIHJpZ2h0LCBib3R0b20pIHtcclxuICAgICAgICByZXR1cm4gX3N1cGVyLmNhbGwodGhpcywgeyBsZWZ0OiBsZWZ0LCB0b3A6IHRvcCwgcmlnaHQ6IHJpZ2h0LCBib3R0b206IGJvdHRvbSB9LCB0cnVlKSB8fCB0aGlzO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIE10Y25uQm94O1xyXG59KEJveCkpO1xyXG5leHBvcnQgeyBNdGNubkJveCB9O1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1NdGNubkJveC5qcy5tYXAiLCJpbXBvcnQgKiBhcyB0ZiBmcm9tICdAdGVuc29yZmxvdy90ZmpzLWNvcmUnO1xyXG5leHBvcnQgZnVuY3Rpb24gbm9ybWFsaXplKHgpIHtcclxuICAgIHJldHVybiB0Zi50aWR5KGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRmLm11bCh0Zi5zdWIoeCwgdGYuc2NhbGFyKDEyNy41KSksIHRmLnNjYWxhcigwLjAwNzgxMjUpKTsgfSk7XHJcbn1cclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bm9ybWFsaXplLmpzLm1hcCIsImltcG9ydCAqIGFzIHRmIGZyb20gJ0B0ZW5zb3JmbG93L3RmanMtY29yZSc7XHJcbmV4cG9ydCBmdW5jdGlvbiBwcmVsdSh4LCBhbHBoYSkge1xyXG4gICAgcmV0dXJuIHRmLnRpZHkoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiB0Zi5hZGQodGYucmVsdSh4KSwgdGYubXVsKGFscGhhLCB0Zi5uZWcodGYucmVsdSh0Zi5uZWcoeCkpKSkpO1xyXG4gICAgfSk7XHJcbn1cclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cHJlbHUuanMubWFwIiwiaW1wb3J0ICogYXMgdGYgZnJvbSAnQHRlbnNvcmZsb3cvdGZqcy1jb3JlJztcclxuaW1wb3J0IHsgY29udkxheWVyIH0gZnJvbSAnLi4vY29tbW9uJztcclxuaW1wb3J0IHsgcHJlbHUgfSBmcm9tICcuL3ByZWx1JztcclxuZXhwb3J0IGZ1bmN0aW9uIHNoYXJlZExheWVyKHgsIHBhcmFtcywgaXNQbmV0KSB7XHJcbiAgICBpZiAoaXNQbmV0ID09PSB2b2lkIDApIHsgaXNQbmV0ID0gZmFsc2U7IH1cclxuICAgIHJldHVybiB0Zi50aWR5KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgb3V0ID0gY29udkxheWVyKHgsIHBhcmFtcy5jb252MSwgJ3ZhbGlkJyk7XHJcbiAgICAgICAgb3V0ID0gcHJlbHUob3V0LCBwYXJhbXMucHJlbHUxX2FscGhhKTtcclxuICAgICAgICBvdXQgPSB0Zi5tYXhQb29sKG91dCwgaXNQbmV0ID8gWzIsIDJdIDogWzMsIDNdLCBbMiwgMl0sICdzYW1lJyk7XHJcbiAgICAgICAgb3V0ID0gY29udkxheWVyKG91dCwgcGFyYW1zLmNvbnYyLCAndmFsaWQnKTtcclxuICAgICAgICBvdXQgPSBwcmVsdShvdXQsIHBhcmFtcy5wcmVsdTJfYWxwaGEpO1xyXG4gICAgICAgIG91dCA9IGlzUG5ldCA/IG91dCA6IHRmLm1heFBvb2wob3V0LCBbMywgM10sIFsyLCAyXSwgJ3ZhbGlkJyk7XHJcbiAgICAgICAgb3V0ID0gY29udkxheWVyKG91dCwgcGFyYW1zLmNvbnYzLCAndmFsaWQnKTtcclxuICAgICAgICBvdXQgPSBwcmVsdShvdXQsIHBhcmFtcy5wcmVsdTNfYWxwaGEpO1xyXG4gICAgICAgIHJldHVybiBvdXQ7XHJcbiAgICB9KTtcclxufVxyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1zaGFyZWRMYXllcnMuanMubWFwIiwiaW1wb3J0ICogYXMgdGYgZnJvbSAnQHRlbnNvcmZsb3cvdGZqcy1jb3JlJztcclxuaW1wb3J0IHsgQm91bmRpbmdCb3gsIFBvaW50IH0gZnJvbSAnLi4vY2xhc3Nlcyc7XHJcbmltcG9ydCB7IG5vbk1heFN1cHByZXNzaW9uIH0gZnJvbSAnLi4vb3BzJztcclxuaW1wb3J0IHsgQ0VMTF9TSVpFLCBDRUxMX1NUUklERSB9IGZyb20gJy4vY29uZmlnJztcclxuaW1wb3J0IHsgZ2V0U2l6ZXNGb3JTY2FsZSB9IGZyb20gJy4vZ2V0U2l6ZXNGb3JTY2FsZSc7XHJcbmltcG9ydCB7IE10Y25uQm94IH0gZnJvbSAnLi9NdGNubkJveCc7XHJcbmltcG9ydCB7IG5vcm1hbGl6ZSB9IGZyb20gJy4vbm9ybWFsaXplJztcclxuaW1wb3J0IHsgUE5ldCB9IGZyb20gJy4vUE5ldCc7XHJcbmZ1bmN0aW9uIHJlc2NhbGVBbmROb3JtYWxpemUoeCwgc2NhbGUpIHtcclxuICAgIHJldHVybiB0Zi50aWR5KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgX2EgPSBnZXRTaXplc0ZvclNjYWxlKHNjYWxlLCB4LnNoYXBlLnNsaWNlKDEpKSwgaGVpZ2h0ID0gX2EuaGVpZ2h0LCB3aWR0aCA9IF9hLndpZHRoO1xyXG4gICAgICAgIHZhciByZXNpemVkID0gdGYuaW1hZ2UucmVzaXplQmlsaW5lYXIoeCwgW2hlaWdodCwgd2lkdGhdKTtcclxuICAgICAgICB2YXIgbm9ybWFsaXplZCA9IG5vcm1hbGl6ZShyZXNpemVkKTtcclxuICAgICAgICByZXR1cm4gdGYudHJhbnNwb3NlKG5vcm1hbGl6ZWQsIFswLCAyLCAxLCAzXSk7XHJcbiAgICB9KTtcclxufVxyXG5mdW5jdGlvbiBleHRyYWN0Qm91bmRpbmdCb3hlcyhzY29yZXNUZW5zb3IsIHJlZ2lvbnNUZW5zb3IsIHNjYWxlLCBzY29yZVRocmVzaG9sZCkge1xyXG4gICAgLy8gVE9ETzogZml4IHRoaXMhLCBtYXliZSBiZXR0ZXIgdG8gdXNlIHRmLmdhdGhlciBoZXJlXHJcbiAgICB2YXIgaW5kaWNlcyA9IFtdO1xyXG4gICAgdmFyIHNjb3Jlc0RhdGEgPSBzY29yZXNUZW5zb3IuYXJyYXlTeW5jKCk7XHJcbiAgICBmb3IgKHZhciB5ID0gMDsgeSA8IHNjb3Jlc1RlbnNvci5zaGFwZVswXTsgeSsrKSB7XHJcbiAgICAgICAgZm9yICh2YXIgeCA9IDA7IHggPCBzY29yZXNUZW5zb3Iuc2hhcGVbMV07IHgrKykge1xyXG4gICAgICAgICAgICBpZiAoc2NvcmVzRGF0YVt5XVt4XSA+PSBzY29yZVRocmVzaG9sZCkge1xyXG4gICAgICAgICAgICAgICAgaW5kaWNlcy5wdXNoKG5ldyBQb2ludCh4LCB5KSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICB2YXIgYm91bmRpbmdCb3hlcyA9IGluZGljZXMubWFwKGZ1bmN0aW9uIChpZHgpIHtcclxuICAgICAgICB2YXIgY2VsbCA9IG5ldyBCb3VuZGluZ0JveChNYXRoLnJvdW5kKChpZHgueSAqIENFTExfU1RSSURFICsgMSkgLyBzY2FsZSksIE1hdGgucm91bmQoKGlkeC54ICogQ0VMTF9TVFJJREUgKyAxKSAvIHNjYWxlKSwgTWF0aC5yb3VuZCgoaWR4LnkgKiBDRUxMX1NUUklERSArIENFTExfU0laRSkgLyBzY2FsZSksIE1hdGgucm91bmQoKGlkeC54ICogQ0VMTF9TVFJJREUgKyBDRUxMX1NJWkUpIC8gc2NhbGUpKTtcclxuICAgICAgICB2YXIgc2NvcmUgPSBzY29yZXNEYXRhW2lkeC55XVtpZHgueF07XHJcbiAgICAgICAgdmFyIHJlZ2lvbnNEYXRhID0gcmVnaW9uc1RlbnNvci5hcnJheVN5bmMoKTtcclxuICAgICAgICB2YXIgcmVnaW9uID0gbmV3IE10Y25uQm94KHJlZ2lvbnNEYXRhW2lkeC55XVtpZHgueF1bMF0sIHJlZ2lvbnNEYXRhW2lkeC55XVtpZHgueF1bMV0sIHJlZ2lvbnNEYXRhW2lkeC55XVtpZHgueF1bMl0sIHJlZ2lvbnNEYXRhW2lkeC55XVtpZHgueF1bM10pO1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIGNlbGw6IGNlbGwsXHJcbiAgICAgICAgICAgIHNjb3JlOiBzY29yZSxcclxuICAgICAgICAgICAgcmVnaW9uOiByZWdpb25cclxuICAgICAgICB9O1xyXG4gICAgfSk7XHJcbiAgICByZXR1cm4gYm91bmRpbmdCb3hlcztcclxufVxyXG5leHBvcnQgZnVuY3Rpb24gc3RhZ2UxKGltZ1RlbnNvciwgc2NhbGVzLCBzY29yZVRocmVzaG9sZCwgcGFyYW1zLCBzdGF0cykge1xyXG4gICAgc3RhdHMuc3RhZ2UxID0gW107XHJcbiAgICB2YXIgcG5ldE91dHB1dHMgPSBzY2FsZXMubWFwKGZ1bmN0aW9uIChzY2FsZSkgeyByZXR1cm4gdGYudGlkeShmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIHN0YXRzRm9yU2NhbGUgPSB7IHNjYWxlOiBzY2FsZSB9O1xyXG4gICAgICAgIHZhciByZXNpemVkID0gcmVzY2FsZUFuZE5vcm1hbGl6ZShpbWdUZW5zb3IsIHNjYWxlKTtcclxuICAgICAgICB2YXIgdHMgPSBEYXRlLm5vdygpO1xyXG4gICAgICAgIHZhciBfYSA9IFBOZXQocmVzaXplZCwgcGFyYW1zKSwgcHJvYiA9IF9hLnByb2IsIHJlZ2lvbnMgPSBfYS5yZWdpb25zO1xyXG4gICAgICAgIHN0YXRzRm9yU2NhbGUucG5ldCA9IERhdGUubm93KCkgLSB0cztcclxuICAgICAgICB2YXIgc2NvcmVzVGVuc29yID0gdGYudW5zdGFjayh0Zi51bnN0YWNrKHByb2IsIDMpWzFdKVswXTtcclxuICAgICAgICB2YXIgcmVnaW9uc1RlbnNvciA9IHRmLnVuc3RhY2socmVnaW9ucylbMF07XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgc2NvcmVzVGVuc29yOiBzY29yZXNUZW5zb3IsXHJcbiAgICAgICAgICAgIHJlZ2lvbnNUZW5zb3I6IHJlZ2lvbnNUZW5zb3IsXHJcbiAgICAgICAgICAgIHNjYWxlOiBzY2FsZSxcclxuICAgICAgICAgICAgc3RhdHNGb3JTY2FsZTogc3RhdHNGb3JTY2FsZVxyXG4gICAgICAgIH07XHJcbiAgICB9KTsgfSk7XHJcbiAgICB2YXIgYm94ZXNGb3JTY2FsZSA9IHBuZXRPdXRwdXRzLm1hcChmdW5jdGlvbiAoX2EpIHtcclxuICAgICAgICB2YXIgc2NvcmVzVGVuc29yID0gX2Euc2NvcmVzVGVuc29yLCByZWdpb25zVGVuc29yID0gX2EucmVnaW9uc1RlbnNvciwgc2NhbGUgPSBfYS5zY2FsZSwgc3RhdHNGb3JTY2FsZSA9IF9hLnN0YXRzRm9yU2NhbGU7XHJcbiAgICAgICAgdmFyIGJvdW5kaW5nQm94ZXMgPSBleHRyYWN0Qm91bmRpbmdCb3hlcyhzY29yZXNUZW5zb3IsIHJlZ2lvbnNUZW5zb3IsIHNjYWxlLCBzY29yZVRocmVzaG9sZCk7XHJcbiAgICAgICAgc2NvcmVzVGVuc29yLmRpc3Bvc2UoKTtcclxuICAgICAgICByZWdpb25zVGVuc29yLmRpc3Bvc2UoKTtcclxuICAgICAgICBpZiAoIWJvdW5kaW5nQm94ZXMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIHN0YXRzLnN0YWdlMS5wdXNoKHN0YXRzRm9yU2NhbGUpO1xyXG4gICAgICAgICAgICByZXR1cm4gW107XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciB0cyA9IERhdGUubm93KCk7XHJcbiAgICAgICAgdmFyIGluZGljZXMgPSBub25NYXhTdXBwcmVzc2lvbihib3VuZGluZ0JveGVzLm1hcChmdW5jdGlvbiAoYmJveCkgeyByZXR1cm4gYmJveC5jZWxsOyB9KSwgYm91bmRpbmdCb3hlcy5tYXAoZnVuY3Rpb24gKGJib3gpIHsgcmV0dXJuIGJib3guc2NvcmU7IH0pLCAwLjUpO1xyXG4gICAgICAgIHN0YXRzRm9yU2NhbGUubm1zID0gRGF0ZS5ub3coKSAtIHRzO1xyXG4gICAgICAgIHN0YXRzRm9yU2NhbGUubnVtQm94ZXMgPSBpbmRpY2VzLmxlbmd0aDtcclxuICAgICAgICBzdGF0cy5zdGFnZTEucHVzaChzdGF0c0ZvclNjYWxlKTtcclxuICAgICAgICByZXR1cm4gaW5kaWNlcy5tYXAoZnVuY3Rpb24gKGJveElkeCkgeyByZXR1cm4gYm91bmRpbmdCb3hlc1tib3hJZHhdOyB9KTtcclxuICAgIH0pO1xyXG4gICAgdmFyIGFsbEJveGVzID0gYm94ZXNGb3JTY2FsZS5yZWR1Y2UoZnVuY3Rpb24gKGFsbCwgYm94ZXMpIHsgcmV0dXJuIGFsbC5jb25jYXQoYm94ZXMpOyB9LCBbXSk7XHJcbiAgICB2YXIgZmluYWxCb3hlcyA9IFtdO1xyXG4gICAgdmFyIGZpbmFsU2NvcmVzID0gW107XHJcbiAgICBpZiAoYWxsQm94ZXMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgIHZhciB0cyA9IERhdGUubm93KCk7XHJcbiAgICAgICAgdmFyIGluZGljZXMgPSBub25NYXhTdXBwcmVzc2lvbihhbGxCb3hlcy5tYXAoZnVuY3Rpb24gKGJib3gpIHsgcmV0dXJuIGJib3guY2VsbDsgfSksIGFsbEJveGVzLm1hcChmdW5jdGlvbiAoYmJveCkgeyByZXR1cm4gYmJveC5zY29yZTsgfSksIDAuNyk7XHJcbiAgICAgICAgc3RhdHMuc3RhZ2UxX25tcyA9IERhdGUubm93KCkgLSB0cztcclxuICAgICAgICBmaW5hbFNjb3JlcyA9IGluZGljZXMubWFwKGZ1bmN0aW9uIChpZHgpIHsgcmV0dXJuIGFsbEJveGVzW2lkeF0uc2NvcmU7IH0pO1xyXG4gICAgICAgIGZpbmFsQm94ZXMgPSBpbmRpY2VzXHJcbiAgICAgICAgICAgIC5tYXAoZnVuY3Rpb24gKGlkeCkgeyByZXR1cm4gYWxsQm94ZXNbaWR4XTsgfSlcclxuICAgICAgICAgICAgLm1hcChmdW5jdGlvbiAoX2EpIHtcclxuICAgICAgICAgICAgdmFyIGNlbGwgPSBfYS5jZWxsLCByZWdpb24gPSBfYS5yZWdpb247XHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgQm91bmRpbmdCb3goY2VsbC5sZWZ0ICsgKHJlZ2lvbi5sZWZ0ICogY2VsbC53aWR0aCksIGNlbGwudG9wICsgKHJlZ2lvbi50b3AgKiBjZWxsLmhlaWdodCksIGNlbGwucmlnaHQgKyAocmVnaW9uLnJpZ2h0ICogY2VsbC53aWR0aCksIGNlbGwuYm90dG9tICsgKHJlZ2lvbi5ib3R0b20gKiBjZWxsLmhlaWdodCkpLnRvU3F1YXJlKCkucm91bmQoKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgYm94ZXM6IGZpbmFsQm94ZXMsXHJcbiAgICAgICAgc2NvcmVzOiBmaW5hbFNjb3Jlc1xyXG4gICAgfTtcclxufVxyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1zdGFnZTEuanMubWFwIiwiaW1wb3J0ICogYXMgdGYgZnJvbSAnQHRlbnNvcmZsb3cvdGZqcy1jb3JlJztcclxuaW1wb3J0IHsgY29udkxheWVyIH0gZnJvbSAnLi4vY29tbW9uJztcclxuaW1wb3J0IHsgc2hhcmVkTGF5ZXIgfSBmcm9tICcuL3NoYXJlZExheWVycyc7XHJcbmV4cG9ydCBmdW5jdGlvbiBQTmV0KHgsIHBhcmFtcykge1xyXG4gICAgcmV0dXJuIHRmLnRpZHkoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBvdXQgPSBzaGFyZWRMYXllcih4LCBwYXJhbXMsIHRydWUpO1xyXG4gICAgICAgIHZhciBjb252ID0gY29udkxheWVyKG91dCwgcGFyYW1zLmNvbnY0XzEsICd2YWxpZCcpO1xyXG4gICAgICAgIHZhciBtYXggPSB0Zi5leHBhbmREaW1zKHRmLm1heChjb252LCAzKSwgMyk7XHJcbiAgICAgICAgdmFyIHByb2IgPSB0Zi5zb2Z0bWF4KHRmLnN1Yihjb252LCBtYXgpLCAzKTtcclxuICAgICAgICB2YXIgcmVnaW9ucyA9IGNvbnZMYXllcihvdXQsIHBhcmFtcy5jb252NF8yLCAndmFsaWQnKTtcclxuICAgICAgICByZXR1cm4geyBwcm9iOiBwcm9iLCByZWdpb25zOiByZWdpb25zIH07XHJcbiAgICB9KTtcclxufVxyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1QTmV0LmpzLm1hcCIsImV4cG9ydCB2YXIgQ0VMTF9TVFJJREUgPSAyO1xyXG5leHBvcnQgdmFyIENFTExfU0laRSA9IDEyO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb25maWcuanMubWFwIiwiaW1wb3J0IHsgX19hd2FpdGVyLCBfX2dlbmVyYXRvciB9IGZyb20gXCJ0c2xpYlwiO1xyXG5pbXBvcnQgKiBhcyB0ZiBmcm9tICdAdGVuc29yZmxvdy90ZmpzLWNvcmUnO1xyXG5pbXBvcnQgeyBjcmVhdGVDYW52YXMsIGNyZWF0ZUNhbnZhc0Zyb21NZWRpYSwgZ2V0Q29udGV4dDJkT3JUaHJvdyB9IGZyb20gJy4uL2RvbSc7XHJcbmltcG9ydCB7IGVudiB9IGZyb20gJy4uL2Vudic7XHJcbmltcG9ydCB7IG5vcm1hbGl6ZSB9IGZyb20gJy4vbm9ybWFsaXplJztcclxuZXhwb3J0IGZ1bmN0aW9uIGV4dHJhY3RJbWFnZVBhdGNoZXMoaW1nLCBib3hlcywgX2EpIHtcclxuICAgIHZhciB3aWR0aCA9IF9hLndpZHRoLCBoZWlnaHQgPSBfYS5oZWlnaHQ7XHJcbiAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIGltZ0N0eCwgYml0bWFwcywgaW1hZ2VQYXRjaGVzRGF0YXM7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9iKSB7XHJcbiAgICAgICAgICAgIHN3aXRjaCAoX2IubGFiZWwpIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgMDpcclxuICAgICAgICAgICAgICAgICAgICBpbWdDdHggPSBnZXRDb250ZXh0MmRPclRocm93KGltZyk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgUHJvbWlzZS5hbGwoYm94ZXMubWFwKGZ1bmN0aW9uIChib3gpIHsgcmV0dXJuIF9fYXdhaXRlcihfdGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBfYSwgeSwgZXksIHgsIGV4LCBmcm9tWCwgZnJvbVksIGltZ0RhdGE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9iKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2EgPSBib3gucGFkQXRCb3JkZXJzKGltZy5oZWlnaHQsIGltZy53aWR0aCksIHkgPSBfYS55LCBleSA9IF9hLmV5LCB4ID0gX2EueCwgZXggPSBfYS5leDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmcm9tWCA9IHggLSAxO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZyb21ZID0geSAtIDE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW1nRGF0YSA9IGltZ0N0eC5nZXRJbWFnZURhdGEoZnJvbVgsIGZyb21ZLCAoZXggLSBmcm9tWCksIChleSAtIGZyb21ZKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIGVudi5pc05vZGVqcygpID8gY3JlYXRlQ2FudmFzRnJvbU1lZGlhKGltZ0RhdGEpIDogY3JlYXRlSW1hZ2VCaXRtYXAoaW1nRGF0YSldO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pOyB9KSldO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAxOlxyXG4gICAgICAgICAgICAgICAgICAgIGJpdG1hcHMgPSBfYi5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgaW1hZ2VQYXRjaGVzRGF0YXMgPSBbXTtcclxuICAgICAgICAgICAgICAgICAgICBiaXRtYXBzLmZvckVhY2goZnVuY3Rpb24gKGJtcCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgcGF0Y2ggPSBjcmVhdGVDYW52YXMoeyB3aWR0aDogd2lkdGgsIGhlaWdodDogaGVpZ2h0IH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgcGF0Y2hDdHggPSBnZXRDb250ZXh0MmRPclRocm93KHBhdGNoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcGF0Y2hDdHguZHJhd0ltYWdlKGJtcCwgMCwgMCwgd2lkdGgsIGhlaWdodCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBkYXRhID0gcGF0Y2hDdHguZ2V0SW1hZ2VEYXRhKDAsIDAsIHdpZHRoLCBoZWlnaHQpLmRhdGE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjdXJyRGF0YSA9IFtdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBSR0JBIC0+IEJHUlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGRhdGEubGVuZ3RoOyBpICs9IDQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJEYXRhLnB1c2goZGF0YVtpICsgMl0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VyckRhdGEucHVzaChkYXRhW2kgKyAxXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyRGF0YS5wdXNoKGRhdGFbaV0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGltYWdlUGF0Y2hlc0RhdGFzLnB1c2goY3VyckRhdGEpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCBpbWFnZVBhdGNoZXNEYXRhcy5tYXAoZnVuY3Rpb24gKGRhdGEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0ID0gdGYudGlkeShmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGltYWdlUGF0Y2hUZW5zb3IgPSB0Zi50cmFuc3Bvc2UodGYudGVuc29yNGQoZGF0YSwgWzEsIHdpZHRoLCBoZWlnaHQsIDNdKSwgWzAsIDIsIDEsIDNdKS50b0Zsb2F0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5vcm1hbGl6ZShpbWFnZVBhdGNoVGVuc29yKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfSk7XHJcbn1cclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZXh0cmFjdEltYWdlUGF0Y2hlcy5qcy5tYXAiLCJpbXBvcnQgeyBfX2F3YWl0ZXIsIF9fZ2VuZXJhdG9yIH0gZnJvbSBcInRzbGliXCI7XHJcbmltcG9ydCAqIGFzIHRmIGZyb20gJ0B0ZW5zb3JmbG93L3RmanMtY29yZSc7XHJcbmltcG9ydCB7IG5vbk1heFN1cHByZXNzaW9uIH0gZnJvbSAnLi4vb3BzJztcclxuaW1wb3J0IHsgZXh0cmFjdEltYWdlUGF0Y2hlcyB9IGZyb20gJy4vZXh0cmFjdEltYWdlUGF0Y2hlcyc7XHJcbmltcG9ydCB7IE10Y25uQm94IH0gZnJvbSAnLi9NdGNubkJveCc7XHJcbmltcG9ydCB7IFJOZXQgfSBmcm9tICcuL1JOZXQnO1xyXG5leHBvcnQgZnVuY3Rpb24gc3RhZ2UyKGltZywgaW5wdXRCb3hlcywgc2NvcmVUaHJlc2hvbGQsIHBhcmFtcywgc3RhdHMpIHtcclxuICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgdHMsIHJuZXRJbnB1dHMsIHJuZXRPdXRzLCBzY29yZXNUZW5zb3IsIHNjb3JlcywgX2EsIF9iLCBpbmRpY2VzLCBmaWx0ZXJlZEJveGVzLCBmaWx0ZXJlZFNjb3JlcywgZmluYWxCb3hlcywgZmluYWxTY29yZXMsIGluZGljZXNObXMsIHJlZ2lvbnNfMTtcclxuICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9jKSB7XHJcbiAgICAgICAgICAgIHN3aXRjaCAoX2MubGFiZWwpIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgMDpcclxuICAgICAgICAgICAgICAgICAgICB0cyA9IERhdGUubm93KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgZXh0cmFjdEltYWdlUGF0Y2hlcyhpbWcsIGlucHV0Qm94ZXMsIHsgd2lkdGg6IDI0LCBoZWlnaHQ6IDI0IH0pXTtcclxuICAgICAgICAgICAgICAgIGNhc2UgMTpcclxuICAgICAgICAgICAgICAgICAgICBybmV0SW5wdXRzID0gX2Muc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIHN0YXRzLnN0YWdlMl9leHRyYWN0SW1hZ2VQYXRjaGVzID0gRGF0ZS5ub3coKSAtIHRzO1xyXG4gICAgICAgICAgICAgICAgICAgIHRzID0gRGF0ZS5ub3coKTtcclxuICAgICAgICAgICAgICAgICAgICBybmV0T3V0cyA9IHJuZXRJbnB1dHMubWFwKGZ1bmN0aW9uIChybmV0SW5wdXQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG91dCA9IFJOZXQocm5ldElucHV0LCBwYXJhbXMpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBybmV0SW5wdXQuZGlzcG9zZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gb3V0O1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIHN0YXRzLnN0YWdlMl9ybmV0ID0gRGF0ZS5ub3coKSAtIHRzO1xyXG4gICAgICAgICAgICAgICAgICAgIHNjb3Jlc1RlbnNvciA9IHJuZXRPdXRzLmxlbmd0aCA+IDFcclxuICAgICAgICAgICAgICAgICAgICAgICAgPyB0Zi5jb25jYXQocm5ldE91dHMubWFwKGZ1bmN0aW9uIChvdXQpIHsgcmV0dXJuIG91dC5zY29yZXM7IH0pKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICA6IHJuZXRPdXRzWzBdLnNjb3JlcztcclxuICAgICAgICAgICAgICAgICAgICBfYiA9IChfYSA9IEFycmF5KS5mcm9tO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHNjb3Jlc1RlbnNvci5kYXRhKCldO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAyOlxyXG4gICAgICAgICAgICAgICAgICAgIHNjb3JlcyA9IF9iLmFwcGx5KF9hLCBbX2Muc2VudCgpXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgc2NvcmVzVGVuc29yLmRpc3Bvc2UoKTtcclxuICAgICAgICAgICAgICAgICAgICBpbmRpY2VzID0gc2NvcmVzXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5tYXAoZnVuY3Rpb24gKHNjb3JlLCBpZHgpIHsgcmV0dXJuICh7IHNjb3JlOiBzY29yZSwgaWR4OiBpZHggfSk7IH0pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5maWx0ZXIoZnVuY3Rpb24gKGMpIHsgcmV0dXJuIGMuc2NvcmUgPiBzY29yZVRocmVzaG9sZDsgfSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgLm1hcChmdW5jdGlvbiAoX2EpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGlkeCA9IF9hLmlkeDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGlkeDtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICBmaWx0ZXJlZEJveGVzID0gaW5kaWNlcy5tYXAoZnVuY3Rpb24gKGlkeCkgeyByZXR1cm4gaW5wdXRCb3hlc1tpZHhdOyB9KTtcclxuICAgICAgICAgICAgICAgICAgICBmaWx0ZXJlZFNjb3JlcyA9IGluZGljZXMubWFwKGZ1bmN0aW9uIChpZHgpIHsgcmV0dXJuIHNjb3Jlc1tpZHhdOyB9KTtcclxuICAgICAgICAgICAgICAgICAgICBmaW5hbEJveGVzID0gW107XHJcbiAgICAgICAgICAgICAgICAgICAgZmluYWxTY29yZXMgPSBbXTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZmlsdGVyZWRCb3hlcy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRzID0gRGF0ZS5ub3coKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaW5kaWNlc05tcyA9IG5vbk1heFN1cHByZXNzaW9uKGZpbHRlcmVkQm94ZXMsIGZpbHRlcmVkU2NvcmVzLCAwLjcpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzdGF0cy5zdGFnZTJfbm1zID0gRGF0ZS5ub3coKSAtIHRzO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZWdpb25zXzEgPSBpbmRpY2VzTm1zLm1hcChmdW5jdGlvbiAoaWR4KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcmVnaW9uc0RhdGEgPSBybmV0T3V0c1tpbmRpY2VzW2lkeF1dLnJlZ2lvbnMuYXJyYXlTeW5jKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IE10Y25uQm94KHJlZ2lvbnNEYXRhWzBdWzBdLCByZWdpb25zRGF0YVswXVsxXSwgcmVnaW9uc0RhdGFbMF1bMl0sIHJlZ2lvbnNEYXRhWzBdWzNdKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpbmFsU2NvcmVzID0gaW5kaWNlc05tcy5tYXAoZnVuY3Rpb24gKGlkeCkgeyByZXR1cm4gZmlsdGVyZWRTY29yZXNbaWR4XTsgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpbmFsQm94ZXMgPSBpbmRpY2VzTm1zLm1hcChmdW5jdGlvbiAoaWR4LCBpKSB7IHJldHVybiBmaWx0ZXJlZEJveGVzW2lkeF0uY2FsaWJyYXRlKHJlZ2lvbnNfMVtpXSk7IH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBybmV0T3V0cy5mb3JFYWNoKGZ1bmN0aW9uICh0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHQucmVnaW9ucy5kaXNwb3NlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHQuc2NvcmVzLmRpc3Bvc2UoKTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYm94ZXM6IGZpbmFsQm94ZXMsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzY29yZXM6IGZpbmFsU2NvcmVzXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1dO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9KTtcclxufVxyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1zdGFnZTIuanMubWFwIiwiaW1wb3J0ICogYXMgdGYgZnJvbSAnQHRlbnNvcmZsb3cvdGZqcy1jb3JlJztcclxuaW1wb3J0IHsgZnVsbHlDb25uZWN0ZWRMYXllciB9IGZyb20gJy4uL2NvbW1vbi9mdWxseUNvbm5lY3RlZExheWVyJztcclxuaW1wb3J0IHsgcHJlbHUgfSBmcm9tICcuL3ByZWx1JztcclxuaW1wb3J0IHsgc2hhcmVkTGF5ZXIgfSBmcm9tICcuL3NoYXJlZExheWVycyc7XHJcbmV4cG9ydCBmdW5jdGlvbiBSTmV0KHgsIHBhcmFtcykge1xyXG4gICAgcmV0dXJuIHRmLnRpZHkoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBjb252T3V0ID0gc2hhcmVkTGF5ZXIoeCwgcGFyYW1zKTtcclxuICAgICAgICB2YXIgdmVjdG9yaXplZCA9IHRmLnJlc2hhcGUoY29udk91dCwgW2NvbnZPdXQuc2hhcGVbMF0sIHBhcmFtcy5mYzEud2VpZ2h0cy5zaGFwZVswXV0pO1xyXG4gICAgICAgIHZhciBmYzEgPSBmdWxseUNvbm5lY3RlZExheWVyKHZlY3Rvcml6ZWQsIHBhcmFtcy5mYzEpO1xyXG4gICAgICAgIHZhciBwcmVsdTQgPSBwcmVsdShmYzEsIHBhcmFtcy5wcmVsdTRfYWxwaGEpO1xyXG4gICAgICAgIHZhciBmYzJfMSA9IGZ1bGx5Q29ubmVjdGVkTGF5ZXIocHJlbHU0LCBwYXJhbXMuZmMyXzEpO1xyXG4gICAgICAgIHZhciBtYXggPSB0Zi5leHBhbmREaW1zKHRmLm1heChmYzJfMSwgMSksIDEpO1xyXG4gICAgICAgIHZhciBwcm9iID0gdGYuc29mdG1heCh0Zi5zdWIoZmMyXzEsIG1heCksIDEpO1xyXG4gICAgICAgIHZhciByZWdpb25zID0gZnVsbHlDb25uZWN0ZWRMYXllcihwcmVsdTQsIHBhcmFtcy5mYzJfMik7XHJcbiAgICAgICAgdmFyIHNjb3JlcyA9IHRmLnVuc3RhY2socHJvYiwgMSlbMV07XHJcbiAgICAgICAgcmV0dXJuIHsgc2NvcmVzOiBzY29yZXMsIHJlZ2lvbnM6IHJlZ2lvbnMgfTtcclxuICAgIH0pO1xyXG59XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVJOZXQuanMubWFwIiwiaW1wb3J0IHsgX19hd2FpdGVyLCBfX2dlbmVyYXRvciB9IGZyb20gXCJ0c2xpYlwiO1xyXG5pbXBvcnQgKiBhcyB0ZiBmcm9tICdAdGVuc29yZmxvdy90ZmpzLWNvcmUnO1xyXG5pbXBvcnQgeyBQb2ludCB9IGZyb20gJy4uL2NsYXNzZXMnO1xyXG5pbXBvcnQgeyBub25NYXhTdXBwcmVzc2lvbiB9IGZyb20gJy4uL29wcyc7XHJcbmltcG9ydCB7IGV4dHJhY3RJbWFnZVBhdGNoZXMgfSBmcm9tICcuL2V4dHJhY3RJbWFnZVBhdGNoZXMnO1xyXG5pbXBvcnQgeyBNdGNubkJveCB9IGZyb20gJy4vTXRjbm5Cb3gnO1xyXG5pbXBvcnQgeyBPTmV0IH0gZnJvbSAnLi9PTmV0JztcclxuZXhwb3J0IGZ1bmN0aW9uIHN0YWdlMyhpbWcsIGlucHV0Qm94ZXMsIHNjb3JlVGhyZXNob2xkLCBwYXJhbXMsIHN0YXRzKSB7XHJcbiAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIHRzLCBvbmV0SW5wdXRzLCBvbmV0T3V0cywgc2NvcmVzVGVuc29yLCBzY29yZXMsIF9hLCBfYiwgaW5kaWNlcywgZmlsdGVyZWRSZWdpb25zLCBmaWx0ZXJlZEJveGVzLCBmaWx0ZXJlZFNjb3JlcywgZmluYWxCb3hlcywgZmluYWxTY29yZXMsIHBvaW50cywgaW5kaWNlc05tcztcclxuICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9jKSB7XHJcbiAgICAgICAgICAgIHN3aXRjaCAoX2MubGFiZWwpIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgMDpcclxuICAgICAgICAgICAgICAgICAgICB0cyA9IERhdGUubm93KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgZXh0cmFjdEltYWdlUGF0Y2hlcyhpbWcsIGlucHV0Qm94ZXMsIHsgd2lkdGg6IDQ4LCBoZWlnaHQ6IDQ4IH0pXTtcclxuICAgICAgICAgICAgICAgIGNhc2UgMTpcclxuICAgICAgICAgICAgICAgICAgICBvbmV0SW5wdXRzID0gX2Muc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIHN0YXRzLnN0YWdlM19leHRyYWN0SW1hZ2VQYXRjaGVzID0gRGF0ZS5ub3coKSAtIHRzO1xyXG4gICAgICAgICAgICAgICAgICAgIHRzID0gRGF0ZS5ub3coKTtcclxuICAgICAgICAgICAgICAgICAgICBvbmV0T3V0cyA9IG9uZXRJbnB1dHMubWFwKGZ1bmN0aW9uIChvbmV0SW5wdXQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG91dCA9IE9OZXQob25ldElucHV0LCBwYXJhbXMpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBvbmV0SW5wdXQuZGlzcG9zZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gb3V0O1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIHN0YXRzLnN0YWdlM19vbmV0ID0gRGF0ZS5ub3coKSAtIHRzO1xyXG4gICAgICAgICAgICAgICAgICAgIHNjb3Jlc1RlbnNvciA9IG9uZXRPdXRzLmxlbmd0aCA+IDFcclxuICAgICAgICAgICAgICAgICAgICAgICAgPyB0Zi5jb25jYXQob25ldE91dHMubWFwKGZ1bmN0aW9uIChvdXQpIHsgcmV0dXJuIG91dC5zY29yZXM7IH0pKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICA6IG9uZXRPdXRzWzBdLnNjb3JlcztcclxuICAgICAgICAgICAgICAgICAgICBfYiA9IChfYSA9IEFycmF5KS5mcm9tO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHNjb3Jlc1RlbnNvci5kYXRhKCldO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAyOlxyXG4gICAgICAgICAgICAgICAgICAgIHNjb3JlcyA9IF9iLmFwcGx5KF9hLCBbX2Muc2VudCgpXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgc2NvcmVzVGVuc29yLmRpc3Bvc2UoKTtcclxuICAgICAgICAgICAgICAgICAgICBpbmRpY2VzID0gc2NvcmVzXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5tYXAoZnVuY3Rpb24gKHNjb3JlLCBpZHgpIHsgcmV0dXJuICh7IHNjb3JlOiBzY29yZSwgaWR4OiBpZHggfSk7IH0pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5maWx0ZXIoZnVuY3Rpb24gKGMpIHsgcmV0dXJuIGMuc2NvcmUgPiBzY29yZVRocmVzaG9sZDsgfSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgLm1hcChmdW5jdGlvbiAoX2EpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGlkeCA9IF9hLmlkeDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGlkeDtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICBmaWx0ZXJlZFJlZ2lvbnMgPSBpbmRpY2VzLm1hcChmdW5jdGlvbiAoaWR4KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciByZWdpb25zRGF0YSA9IG9uZXRPdXRzW2lkeF0ucmVnaW9ucy5hcnJheVN5bmMoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBNdGNubkJveChyZWdpb25zRGF0YVswXVswXSwgcmVnaW9uc0RhdGFbMF1bMV0sIHJlZ2lvbnNEYXRhWzBdWzJdLCByZWdpb25zRGF0YVswXVszXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgZmlsdGVyZWRCb3hlcyA9IGluZGljZXNcclxuICAgICAgICAgICAgICAgICAgICAgICAgLm1hcChmdW5jdGlvbiAoaWR4LCBpKSB7IHJldHVybiBpbnB1dEJveGVzW2lkeF0uY2FsaWJyYXRlKGZpbHRlcmVkUmVnaW9uc1tpXSk7IH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIGZpbHRlcmVkU2NvcmVzID0gaW5kaWNlcy5tYXAoZnVuY3Rpb24gKGlkeCkgeyByZXR1cm4gc2NvcmVzW2lkeF07IH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIGZpbmFsQm94ZXMgPSBbXTtcclxuICAgICAgICAgICAgICAgICAgICBmaW5hbFNjb3JlcyA9IFtdO1xyXG4gICAgICAgICAgICAgICAgICAgIHBvaW50cyA9IFtdO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChmaWx0ZXJlZEJveGVzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHMgPSBEYXRlLm5vdygpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpbmRpY2VzTm1zID0gbm9uTWF4U3VwcHJlc3Npb24oZmlsdGVyZWRCb3hlcywgZmlsdGVyZWRTY29yZXMsIDAuNywgZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzdGF0cy5zdGFnZTNfbm1zID0gRGF0ZS5ub3coKSAtIHRzO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmaW5hbEJveGVzID0gaW5kaWNlc05tcy5tYXAoZnVuY3Rpb24gKGlkeCkgeyByZXR1cm4gZmlsdGVyZWRCb3hlc1tpZHhdOyB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZmluYWxTY29yZXMgPSBpbmRpY2VzTm1zLm1hcChmdW5jdGlvbiAoaWR4KSB7IHJldHVybiBmaWx0ZXJlZFNjb3Jlc1tpZHhdOyB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcG9pbnRzID0gaW5kaWNlc05tcy5tYXAoZnVuY3Rpb24gKGlkeCwgaSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEFycmF5KDUpLmZpbGwoMCkubWFwKGZ1bmN0aW9uIChfLCBwdElkeCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwb2ludHNEYXRhID0gb25ldE91dHNbaWR4XS5wb2ludHMuYXJyYXlTeW5jKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBQb2ludCgoKHBvaW50c0RhdGFbMF1bcHRJZHhdICogKGZpbmFsQm94ZXNbaV0ud2lkdGggKyAxKSkgKyBmaW5hbEJveGVzW2ldLmxlZnQpLCAoKHBvaW50c0RhdGFbMF1bcHRJZHggKyA1XSAqIChmaW5hbEJveGVzW2ldLmhlaWdodCArIDEpKSArIGZpbmFsQm94ZXNbaV0udG9wKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIG9uZXRPdXRzLmZvckVhY2goZnVuY3Rpb24gKHQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdC5yZWdpb25zLmRpc3Bvc2UoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdC5zY29yZXMuZGlzcG9zZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0LnBvaW50cy5kaXNwb3NlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJveGVzOiBmaW5hbEJveGVzLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2NvcmVzOiBmaW5hbFNjb3JlcyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvaW50czogcG9pbnRzXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1dO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9KTtcclxufVxyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1zdGFnZTMuanMubWFwIiwiaW1wb3J0ICogYXMgdGYgZnJvbSAnQHRlbnNvcmZsb3cvdGZqcy1jb3JlJztcclxuaW1wb3J0IHsgY29udkxheWVyIH0gZnJvbSAnLi4vY29tbW9uJztcclxuaW1wb3J0IHsgZnVsbHlDb25uZWN0ZWRMYXllciB9IGZyb20gJy4uL2NvbW1vbi9mdWxseUNvbm5lY3RlZExheWVyJztcclxuaW1wb3J0IHsgcHJlbHUgfSBmcm9tICcuL3ByZWx1JztcclxuaW1wb3J0IHsgc2hhcmVkTGF5ZXIgfSBmcm9tICcuL3NoYXJlZExheWVycyc7XHJcbmV4cG9ydCBmdW5jdGlvbiBPTmV0KHgsIHBhcmFtcykge1xyXG4gICAgcmV0dXJuIHRmLnRpZHkoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBvdXQgPSBzaGFyZWRMYXllcih4LCBwYXJhbXMpO1xyXG4gICAgICAgIG91dCA9IHRmLm1heFBvb2wob3V0LCBbMiwgMl0sIFsyLCAyXSwgJ3NhbWUnKTtcclxuICAgICAgICBvdXQgPSBjb252TGF5ZXIob3V0LCBwYXJhbXMuY29udjQsICd2YWxpZCcpO1xyXG4gICAgICAgIG91dCA9IHByZWx1KG91dCwgcGFyYW1zLnByZWx1NF9hbHBoYSk7XHJcbiAgICAgICAgdmFyIHZlY3Rvcml6ZWQgPSB0Zi5yZXNoYXBlKG91dCwgW291dC5zaGFwZVswXSwgcGFyYW1zLmZjMS53ZWlnaHRzLnNoYXBlWzBdXSk7XHJcbiAgICAgICAgdmFyIGZjMSA9IGZ1bGx5Q29ubmVjdGVkTGF5ZXIodmVjdG9yaXplZCwgcGFyYW1zLmZjMSk7XHJcbiAgICAgICAgdmFyIHByZWx1NSA9IHByZWx1KGZjMSwgcGFyYW1zLnByZWx1NV9hbHBoYSk7XHJcbiAgICAgICAgdmFyIGZjMl8xID0gZnVsbHlDb25uZWN0ZWRMYXllcihwcmVsdTUsIHBhcmFtcy5mYzJfMSk7XHJcbiAgICAgICAgdmFyIG1heCA9IHRmLmV4cGFuZERpbXModGYubWF4KGZjMl8xLCAxKSwgMSk7XHJcbiAgICAgICAgdmFyIHByb2IgPSB0Zi5zb2Z0bWF4KHRmLnN1YihmYzJfMSwgbWF4KSwgMSk7XHJcbiAgICAgICAgdmFyIHJlZ2lvbnMgPSBmdWxseUNvbm5lY3RlZExheWVyKHByZWx1NSwgcGFyYW1zLmZjMl8yKTtcclxuICAgICAgICB2YXIgcG9pbnRzID0gZnVsbHlDb25uZWN0ZWRMYXllcihwcmVsdTUsIHBhcmFtcy5mYzJfMyk7XHJcbiAgICAgICAgdmFyIHNjb3JlcyA9IHRmLnVuc3RhY2socHJvYiwgMSlbMV07XHJcbiAgICAgICAgcmV0dXJuIHsgc2NvcmVzOiBzY29yZXMsIHJlZ2lvbnM6IHJlZ2lvbnMsIHBvaW50czogcG9pbnRzIH07XHJcbiAgICB9KTtcclxufVxyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1PTmV0LmpzLm1hcCIsImltcG9ydCB7IF9fYXdhaXRlciwgX19leHRlbmRzLCBfX2dlbmVyYXRvciB9IGZyb20gXCJ0c2xpYlwiO1xyXG5pbXBvcnQgKiBhcyB0ZiBmcm9tICdAdGVuc29yZmxvdy90ZmpzLWNvcmUnO1xyXG5pbXBvcnQgeyBQb2ludCwgUmVjdCB9IGZyb20gJy4uL2NsYXNzZXMnO1xyXG5pbXBvcnQgeyBGYWNlRGV0ZWN0aW9uIH0gZnJvbSAnLi4vY2xhc3Nlcy9GYWNlRGV0ZWN0aW9uJztcclxuaW1wb3J0IHsgRmFjZUxhbmRtYXJrczUgfSBmcm9tICcuLi9jbGFzc2VzL0ZhY2VMYW5kbWFya3M1JztcclxuaW1wb3J0IHsgdG9OZXRJbnB1dCB9IGZyb20gJy4uL2RvbSc7XHJcbmltcG9ydCB7IGV4dGVuZFdpdGhGYWNlRGV0ZWN0aW9uLCBleHRlbmRXaXRoRmFjZUxhbmRtYXJrcyB9IGZyb20gJy4uL2ZhY3Rvcmllcyc7XHJcbmltcG9ydCB7IE5ldXJhbE5ldHdvcmsgfSBmcm9tICcuLi9OZXVyYWxOZXR3b3JrJztcclxuaW1wb3J0IHsgYmdyVG9SZ2JUZW5zb3IgfSBmcm9tICcuL2JnclRvUmdiVGVuc29yJztcclxuaW1wb3J0IHsgQ0VMTF9TSVpFIH0gZnJvbSAnLi9jb25maWcnO1xyXG5pbXBvcnQgeyBleHRyYWN0UGFyYW1zIH0gZnJvbSAnLi9leHRyYWN0UGFyYW1zJztcclxuaW1wb3J0IHsgZXh0cmFjdFBhcmFtc0Zyb21XZWlndGhNYXAgfSBmcm9tICcuL2V4dHJhY3RQYXJhbXNGcm9tV2VpZ3RoTWFwJztcclxuaW1wb3J0IHsgZ2V0U2l6ZXNGb3JTY2FsZSB9IGZyb20gJy4vZ2V0U2l6ZXNGb3JTY2FsZSc7XHJcbmltcG9ydCB7IE10Y25uT3B0aW9ucyB9IGZyb20gJy4vTXRjbm5PcHRpb25zJztcclxuaW1wb3J0IHsgcHlyYW1pZERvd24gfSBmcm9tICcuL3B5cmFtaWREb3duJztcclxuaW1wb3J0IHsgc3RhZ2UxIH0gZnJvbSAnLi9zdGFnZTEnO1xyXG5pbXBvcnQgeyBzdGFnZTIgfSBmcm9tICcuL3N0YWdlMic7XHJcbmltcG9ydCB7IHN0YWdlMyB9IGZyb20gJy4vc3RhZ2UzJztcclxudmFyIE10Y25uID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xyXG4gICAgX19leHRlbmRzKE10Y25uLCBfc3VwZXIpO1xyXG4gICAgZnVuY3Rpb24gTXRjbm4oKSB7XHJcbiAgICAgICAgcmV0dXJuIF9zdXBlci5jYWxsKHRoaXMsICdNdGNubicpIHx8IHRoaXM7XHJcbiAgICB9XHJcbiAgICBNdGNubi5wcm90b3R5cGUubG9hZCA9IGZ1bmN0aW9uICh3ZWlnaHRzT3JVcmwpIHtcclxuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybignbXRjbm4gaXMgZGVwcmVjYXRlZCBhbmQgd2lsbCBiZSByZW1vdmVkIHNvb24nKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCBfc3VwZXIucHJvdG90eXBlLmxvYWQuY2FsbCh0aGlzLCB3ZWlnaHRzT3JVcmwpXTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgTXRjbm4ucHJvdG90eXBlLmxvYWRGcm9tRGlzayA9IGZ1bmN0aW9uIChmaWxlUGF0aCkge1xyXG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdtdGNubiBpcyBkZXByZWNhdGVkIGFuZCB3aWxsIGJlIHJlbW92ZWQgc29vbicpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIF9zdXBlci5wcm90b3R5cGUubG9hZEZyb21EaXNrLmNhbGwodGhpcywgZmlsZVBhdGgpXTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgTXRjbm4ucHJvdG90eXBlLmZvcndhcmRJbnB1dCA9IGZ1bmN0aW9uIChpbnB1dCwgZm9yd2FyZFBhcmFtcykge1xyXG4gICAgICAgIGlmIChmb3J3YXJkUGFyYW1zID09PSB2b2lkIDApIHsgZm9yd2FyZFBhcmFtcyA9IHt9OyB9XHJcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgcGFyYW1zLCBpbnB1dENhbnZhcywgc3RhdHMsIHRzVG90YWwsIGltZ1RlbnNvciwgb25SZXR1cm4sIF9hLCBoZWlnaHQsIHdpZHRoLCBfYiwgbWluRmFjZVNpemUsIHNjYWxlRmFjdG9yLCBtYXhOdW1TY2FsZXMsIHNjb3JlVGhyZXNob2xkcywgc2NhbGVTdGVwcywgc2NhbGVzLCB0cywgb3V0MSwgb3V0Miwgb3V0MywgcmVzdWx0cztcclxuICAgICAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYykge1xyXG4gICAgICAgICAgICAgICAgc3dpdGNoIChfYy5sYWJlbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgcGFyYW1zID0gdGhpcy5wYXJhbXM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghcGFyYW1zKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ010Y25uIC0gbG9hZCBtb2RlbCBiZWZvcmUgaW5mZXJlbmNlJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgaW5wdXRDYW52YXMgPSBpbnB1dC5jYW52YXNlc1swXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFpbnB1dENhbnZhcykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdNdGNubiAtIGlucHV0Q2FudmFzIGlzIG5vdCBkZWZpbmVkLCBub3RlIHRoYXQgcGFzc2luZyB0ZW5zb3JzIGludG8gTXRjbm4uZm9yd2FyZElucHV0IGlzIG5vdCBzdXBwb3J0ZWQgeWV0LicpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRzID0ge307XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRzVG90YWwgPSBEYXRlLm5vdygpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpbWdUZW5zb3IgPSB0Zi50aWR5KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBiZ3JUb1JnYlRlbnNvcih0Zi5leHBhbmREaW1zKHRmLmJyb3dzZXIuZnJvbVBpeGVscyhpbnB1dENhbnZhcykpLnRvRmxvYXQoKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBvblJldHVybiA9IGZ1bmN0aW9uIChyZXN1bHRzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBkaXNwb3NlIHRlbnNvcnMgb24gcmV0dXJuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbWdUZW5zb3IuZGlzcG9zZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdHMudG90YWwgPSBEYXRlLm5vdygpIC0gdHNUb3RhbDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHRzO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYSA9IGltZ1RlbnNvci5zaGFwZS5zbGljZSgxKSwgaGVpZ2h0ID0gX2FbMF0sIHdpZHRoID0gX2FbMV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9iID0gbmV3IE10Y25uT3B0aW9ucyhmb3J3YXJkUGFyYW1zKSwgbWluRmFjZVNpemUgPSBfYi5taW5GYWNlU2l6ZSwgc2NhbGVGYWN0b3IgPSBfYi5zY2FsZUZhY3RvciwgbWF4TnVtU2NhbGVzID0gX2IubWF4TnVtU2NhbGVzLCBzY29yZVRocmVzaG9sZHMgPSBfYi5zY29yZVRocmVzaG9sZHMsIHNjYWxlU3RlcHMgPSBfYi5zY2FsZVN0ZXBzO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzY2FsZXMgPSAoc2NhbGVTdGVwcyB8fCBweXJhbWlkRG93bihtaW5GYWNlU2l6ZSwgc2NhbGVGYWN0b3IsIFtoZWlnaHQsIHdpZHRoXSkpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuZmlsdGVyKGZ1bmN0aW9uIChzY2FsZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNpemVzID0gZ2V0U2l6ZXNGb3JTY2FsZShzY2FsZSwgW2hlaWdodCwgd2lkdGhdKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBNYXRoLm1pbihzaXplcy53aWR0aCwgc2l6ZXMuaGVpZ2h0KSA+IENFTExfU0laRTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5zbGljZSgwLCBtYXhOdW1TY2FsZXMpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzdGF0cy5zY2FsZXMgPSBzY2FsZXM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRzLnB5cmFtaWQgPSBzY2FsZXMubWFwKGZ1bmN0aW9uIChzY2FsZSkgeyByZXR1cm4gZ2V0U2l6ZXNGb3JTY2FsZShzY2FsZSwgW2hlaWdodCwgd2lkdGhdKTsgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRzID0gRGF0ZS5ub3coKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgc3RhZ2UxKGltZ1RlbnNvciwgc2NhbGVzLCBzY29yZVRocmVzaG9sZHNbMF0sIHBhcmFtcy5wbmV0LCBzdGF0cyldO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcclxuICAgICAgICAgICAgICAgICAgICAgICAgb3V0MSA9IF9jLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3RhdHMudG90YWxfc3RhZ2UxID0gRGF0ZS5ub3coKSAtIHRzO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIW91dDEuYm94ZXMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgb25SZXR1cm4oeyByZXN1bHRzOiBbXSwgc3RhdHM6IHN0YXRzIH0pXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzdGF0cy5zdGFnZTJfbnVtSW5wdXRCb3hlcyA9IG91dDEuYm94ZXMubGVuZ3RoO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyB1c2luZyB0aGUgaW5wdXRDYW52YXMgdG8gZXh0cmFjdCBhbmQgcmVzaXplIHRoZSBpbWFnZSBwYXRjaGVzLCBzaW5jZSBpdCBpcyBmYXN0ZXJcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gdGhhbiBkb2luZyB0aGlzIG9uIHRoZSBncHVcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHMgPSBEYXRlLm5vdygpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCBzdGFnZTIoaW5wdXRDYW52YXMsIG91dDEuYm94ZXMsIHNjb3JlVGhyZXNob2xkc1sxXSwgcGFyYW1zLnJuZXQsIHN0YXRzKV07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAyOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBvdXQyID0gX2Muc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzdGF0cy50b3RhbF9zdGFnZTIgPSBEYXRlLm5vdygpIC0gdHM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghb3V0Mi5ib3hlcy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCBvblJldHVybih7IHJlc3VsdHM6IFtdLCBzdGF0czogc3RhdHMgfSldO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRzLnN0YWdlM19udW1JbnB1dEJveGVzID0gb3V0Mi5ib3hlcy5sZW5ndGg7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRzID0gRGF0ZS5ub3coKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgc3RhZ2UzKGlucHV0Q2FudmFzLCBvdXQyLmJveGVzLCBzY29yZVRocmVzaG9sZHNbMl0sIHBhcmFtcy5vbmV0LCBzdGF0cyldO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMzpcclxuICAgICAgICAgICAgICAgICAgICAgICAgb3V0MyA9IF9jLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3RhdHMudG90YWxfc3RhZ2UzID0gRGF0ZS5ub3coKSAtIHRzO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHRzID0gb3V0My5ib3hlcy5tYXAoZnVuY3Rpb24gKGJveCwgaWR4KSB7IHJldHVybiBleHRlbmRXaXRoRmFjZUxhbmRtYXJrcyhleHRlbmRXaXRoRmFjZURldGVjdGlvbih7fSwgbmV3IEZhY2VEZXRlY3Rpb24ob3V0My5zY29yZXNbaWR4XSwgbmV3IFJlY3QoYm94LmxlZnQgLyB3aWR0aCwgYm94LnRvcCAvIGhlaWdodCwgYm94LndpZHRoIC8gd2lkdGgsIGJveC5oZWlnaHQgLyBoZWlnaHQpLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IGhlaWdodCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiB3aWR0aFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KSksIG5ldyBGYWNlTGFuZG1hcmtzNShvdXQzLnBvaW50c1tpZHhdLm1hcChmdW5jdGlvbiAocHQpIHsgcmV0dXJuIHB0LnN1YihuZXcgUG9pbnQoYm94LmxlZnQsIGJveC50b3ApKS5kaXYobmV3IFBvaW50KGJveC53aWR0aCwgYm94LmhlaWdodCkpOyB9KSwgeyB3aWR0aDogYm94LndpZHRoLCBoZWlnaHQ6IGJveC5oZWlnaHQgfSkpOyB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIG9uUmV0dXJuKHsgcmVzdWx0czogcmVzdWx0cywgc3RhdHM6IHN0YXRzIH0pXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgTXRjbm4ucHJvdG90eXBlLmZvcndhcmQgPSBmdW5jdGlvbiAoaW5wdXQsIGZvcndhcmRQYXJhbXMpIHtcclxuICAgICAgICBpZiAoZm9yd2FyZFBhcmFtcyA9PT0gdm9pZCAwKSB7IGZvcndhcmRQYXJhbXMgPSB7fTsgfVxyXG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIF9hO1xyXG4gICAgICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9iKSB7XHJcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKF9iLmxhYmVsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYSA9IHRoaXMuZm9yd2FyZElucHV0O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCB0b05ldElucHV0KGlucHV0KV07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOiByZXR1cm4gWzQgLyp5aWVsZCovLCBfYS5hcHBseSh0aGlzLCBbX2Iuc2VudCgpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yd2FyZFBhcmFtc10pXTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDI6IHJldHVybiBbMiAvKnJldHVybiovLCAoX2Iuc2VudCgpKS5yZXN1bHRzXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgTXRjbm4ucHJvdG90eXBlLmZvcndhcmRXaXRoU3RhdHMgPSBmdW5jdGlvbiAoaW5wdXQsIGZvcndhcmRQYXJhbXMpIHtcclxuICAgICAgICBpZiAoZm9yd2FyZFBhcmFtcyA9PT0gdm9pZCAwKSB7IGZvcndhcmRQYXJhbXMgPSB7fTsgfVxyXG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIF9hO1xyXG4gICAgICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9iKSB7XHJcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKF9iLmxhYmVsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYSA9IHRoaXMuZm9yd2FyZElucHV0O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCB0b05ldElucHV0KGlucHV0KV07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOiByZXR1cm4gWzIgLypyZXR1cm4qLywgX2EuYXBwbHkodGhpcywgW19iLnNlbnQoKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvcndhcmRQYXJhbXNdKV07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIE10Y25uLnByb3RvdHlwZS5nZXREZWZhdWx0TW9kZWxOYW1lID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiAnbXRjbm5fbW9kZWwnO1xyXG4gICAgfTtcclxuICAgIE10Y25uLnByb3RvdHlwZS5leHRyYWN0UGFyYW1zRnJvbVdlaWd0aE1hcCA9IGZ1bmN0aW9uICh3ZWlnaHRNYXApIHtcclxuICAgICAgICByZXR1cm4gZXh0cmFjdFBhcmFtc0Zyb21XZWlndGhNYXAod2VpZ2h0TWFwKTtcclxuICAgIH07XHJcbiAgICBNdGNubi5wcm90b3R5cGUuZXh0cmFjdFBhcmFtcyA9IGZ1bmN0aW9uICh3ZWlnaHRzKSB7XHJcbiAgICAgICAgcmV0dXJuIGV4dHJhY3RQYXJhbXMod2VpZ2h0cyk7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIE10Y25uO1xyXG59KE5ldXJhbE5ldHdvcmspKTtcclxuZXhwb3J0IHsgTXRjbm4gfTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9TXRjbm4uanMubWFwIiwiaW1wb3J0ICogYXMgdGYgZnJvbSAnQHRlbnNvcmZsb3cvdGZqcy1jb3JlJztcclxuZXhwb3J0IGZ1bmN0aW9uIGJnclRvUmdiVGVuc29yKHRlbnNvcikge1xyXG4gICAgcmV0dXJuIHRmLnRpZHkoZnVuY3Rpb24gKCkgeyByZXR1cm4gdGYuc3RhY2sodGYudW5zdGFjayh0ZW5zb3IsIDMpLnJldmVyc2UoKSwgMyk7IH0pO1xyXG59XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWJnclRvUmdiVGVuc29yLmpzLm1hcCIsImltcG9ydCB7IENFTExfU0laRSB9IGZyb20gJy4vY29uZmlnJztcclxuZXhwb3J0IGZ1bmN0aW9uIHB5cmFtaWREb3duKG1pbkZhY2VTaXplLCBzY2FsZUZhY3RvciwgZGltcykge1xyXG4gICAgdmFyIGhlaWdodCA9IGRpbXNbMF0sIHdpZHRoID0gZGltc1sxXTtcclxuICAgIHZhciBtID0gQ0VMTF9TSVpFIC8gbWluRmFjZVNpemU7XHJcbiAgICB2YXIgc2NhbGVzID0gW107XHJcbiAgICB2YXIgbWluTGF5ZXIgPSBNYXRoLm1pbihoZWlnaHQsIHdpZHRoKSAqIG07XHJcbiAgICB2YXIgZXhwID0gMDtcclxuICAgIHdoaWxlIChtaW5MYXllciA+PSAxMikge1xyXG4gICAgICAgIHNjYWxlcy5wdXNoKG0gKiBNYXRoLnBvdyhzY2FsZUZhY3RvciwgZXhwKSk7XHJcbiAgICAgICAgbWluTGF5ZXIgPSBtaW5MYXllciAqIHNjYWxlRmFjdG9yO1xyXG4gICAgICAgIGV4cCArPSAxO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHNjYWxlcztcclxufVxyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1weXJhbWlkRG93bi5qcy5tYXAiLCJpbXBvcnQgeyBfX2Fzc2lnbiB9IGZyb20gXCJ0c2xpYlwiO1xyXG5pbXBvcnQgeyBkaXNwb3NlVW51c2VkV2VpZ2h0VGVuc29ycywgZXh0cmFjdFdlaWdodEVudHJ5RmFjdG9yeSB9IGZyb20gJy4uL2NvbW1vbic7XHJcbmZ1bmN0aW9uIGV4dHJhY3RvcnNGYWN0b3J5KHdlaWdodE1hcCwgcGFyYW1NYXBwaW5ncykge1xyXG4gICAgdmFyIGV4dHJhY3RXZWlnaHRFbnRyeSA9IGV4dHJhY3RXZWlnaHRFbnRyeUZhY3Rvcnkod2VpZ2h0TWFwLCBwYXJhbU1hcHBpbmdzKTtcclxuICAgIGZ1bmN0aW9uIGV4dHJhY3RDb252UGFyYW1zKHByZWZpeCkge1xyXG4gICAgICAgIHZhciBmaWx0ZXJzID0gZXh0cmFjdFdlaWdodEVudHJ5KHByZWZpeCArIFwiL3dlaWdodHNcIiwgNCwgcHJlZml4ICsgXCIvZmlsdGVyc1wiKTtcclxuICAgICAgICB2YXIgYmlhcyA9IGV4dHJhY3RXZWlnaHRFbnRyeShwcmVmaXggKyBcIi9iaWFzXCIsIDEpO1xyXG4gICAgICAgIHJldHVybiB7IGZpbHRlcnM6IGZpbHRlcnMsIGJpYXM6IGJpYXMgfTtcclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIGV4dHJhY3RGQ1BhcmFtcyhwcmVmaXgpIHtcclxuICAgICAgICB2YXIgd2VpZ2h0cyA9IGV4dHJhY3RXZWlnaHRFbnRyeShwcmVmaXggKyBcIi93ZWlnaHRzXCIsIDIpO1xyXG4gICAgICAgIHZhciBiaWFzID0gZXh0cmFjdFdlaWdodEVudHJ5KHByZWZpeCArIFwiL2JpYXNcIiwgMSk7XHJcbiAgICAgICAgcmV0dXJuIHsgd2VpZ2h0czogd2VpZ2h0cywgYmlhczogYmlhcyB9O1xyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gZXh0cmFjdFBSZWx1UGFyYW1zKHBhcmFtUGF0aCkge1xyXG4gICAgICAgIHJldHVybiBleHRyYWN0V2VpZ2h0RW50cnkocGFyYW1QYXRoLCAxKTtcclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIGV4dHJhY3RTaGFyZWRQYXJhbXMocHJlZml4KSB7XHJcbiAgICAgICAgdmFyIGNvbnYxID0gZXh0cmFjdENvbnZQYXJhbXMocHJlZml4ICsgXCIvY29udjFcIik7XHJcbiAgICAgICAgdmFyIHByZWx1MV9hbHBoYSA9IGV4dHJhY3RQUmVsdVBhcmFtcyhwcmVmaXggKyBcIi9wcmVsdTFfYWxwaGFcIik7XHJcbiAgICAgICAgdmFyIGNvbnYyID0gZXh0cmFjdENvbnZQYXJhbXMocHJlZml4ICsgXCIvY29udjJcIik7XHJcbiAgICAgICAgdmFyIHByZWx1Ml9hbHBoYSA9IGV4dHJhY3RQUmVsdVBhcmFtcyhwcmVmaXggKyBcIi9wcmVsdTJfYWxwaGFcIik7XHJcbiAgICAgICAgdmFyIGNvbnYzID0gZXh0cmFjdENvbnZQYXJhbXMocHJlZml4ICsgXCIvY29udjNcIik7XHJcbiAgICAgICAgdmFyIHByZWx1M19hbHBoYSA9IGV4dHJhY3RQUmVsdVBhcmFtcyhwcmVmaXggKyBcIi9wcmVsdTNfYWxwaGFcIik7XHJcbiAgICAgICAgcmV0dXJuIHsgY29udjE6IGNvbnYxLCBwcmVsdTFfYWxwaGE6IHByZWx1MV9hbHBoYSwgY29udjI6IGNvbnYyLCBwcmVsdTJfYWxwaGE6IHByZWx1Ml9hbHBoYSwgY29udjM6IGNvbnYzLCBwcmVsdTNfYWxwaGE6IHByZWx1M19hbHBoYSB9O1xyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gZXh0cmFjdFBOZXRQYXJhbXMoKSB7XHJcbiAgICAgICAgdmFyIHNoYXJlZFBhcmFtcyA9IGV4dHJhY3RTaGFyZWRQYXJhbXMoJ3BuZXQnKTtcclxuICAgICAgICB2YXIgY29udjRfMSA9IGV4dHJhY3RDb252UGFyYW1zKCdwbmV0L2NvbnY0XzEnKTtcclxuICAgICAgICB2YXIgY29udjRfMiA9IGV4dHJhY3RDb252UGFyYW1zKCdwbmV0L2NvbnY0XzInKTtcclxuICAgICAgICByZXR1cm4gX19hc3NpZ24oX19hc3NpZ24oe30sIHNoYXJlZFBhcmFtcyksIHsgY29udjRfMTogY29udjRfMSwgY29udjRfMjogY29udjRfMiB9KTtcclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIGV4dHJhY3RSTmV0UGFyYW1zKCkge1xyXG4gICAgICAgIHZhciBzaGFyZWRQYXJhbXMgPSBleHRyYWN0U2hhcmVkUGFyYW1zKCdybmV0Jyk7XHJcbiAgICAgICAgdmFyIGZjMSA9IGV4dHJhY3RGQ1BhcmFtcygncm5ldC9mYzEnKTtcclxuICAgICAgICB2YXIgcHJlbHU0X2FscGhhID0gZXh0cmFjdFBSZWx1UGFyYW1zKCdybmV0L3ByZWx1NF9hbHBoYScpO1xyXG4gICAgICAgIHZhciBmYzJfMSA9IGV4dHJhY3RGQ1BhcmFtcygncm5ldC9mYzJfMScpO1xyXG4gICAgICAgIHZhciBmYzJfMiA9IGV4dHJhY3RGQ1BhcmFtcygncm5ldC9mYzJfMicpO1xyXG4gICAgICAgIHJldHVybiBfX2Fzc2lnbihfX2Fzc2lnbih7fSwgc2hhcmVkUGFyYW1zKSwgeyBmYzE6IGZjMSwgcHJlbHU0X2FscGhhOiBwcmVsdTRfYWxwaGEsIGZjMl8xOiBmYzJfMSwgZmMyXzI6IGZjMl8yIH0pO1xyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gZXh0cmFjdE9OZXRQYXJhbXMoKSB7XHJcbiAgICAgICAgdmFyIHNoYXJlZFBhcmFtcyA9IGV4dHJhY3RTaGFyZWRQYXJhbXMoJ29uZXQnKTtcclxuICAgICAgICB2YXIgY29udjQgPSBleHRyYWN0Q29udlBhcmFtcygnb25ldC9jb252NCcpO1xyXG4gICAgICAgIHZhciBwcmVsdTRfYWxwaGEgPSBleHRyYWN0UFJlbHVQYXJhbXMoJ29uZXQvcHJlbHU0X2FscGhhJyk7XHJcbiAgICAgICAgdmFyIGZjMSA9IGV4dHJhY3RGQ1BhcmFtcygnb25ldC9mYzEnKTtcclxuICAgICAgICB2YXIgcHJlbHU1X2FscGhhID0gZXh0cmFjdFBSZWx1UGFyYW1zKCdvbmV0L3ByZWx1NV9hbHBoYScpO1xyXG4gICAgICAgIHZhciBmYzJfMSA9IGV4dHJhY3RGQ1BhcmFtcygnb25ldC9mYzJfMScpO1xyXG4gICAgICAgIHZhciBmYzJfMiA9IGV4dHJhY3RGQ1BhcmFtcygnb25ldC9mYzJfMicpO1xyXG4gICAgICAgIHZhciBmYzJfMyA9IGV4dHJhY3RGQ1BhcmFtcygnb25ldC9mYzJfMycpO1xyXG4gICAgICAgIHJldHVybiBfX2Fzc2lnbihfX2Fzc2lnbih7fSwgc2hhcmVkUGFyYW1zKSwgeyBjb252NDogY29udjQsIHByZWx1NF9hbHBoYTogcHJlbHU0X2FscGhhLCBmYzE6IGZjMSwgcHJlbHU1X2FscGhhOiBwcmVsdTVfYWxwaGEsIGZjMl8xOiBmYzJfMSwgZmMyXzI6IGZjMl8yLCBmYzJfMzogZmMyXzMgfSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIGV4dHJhY3RQTmV0UGFyYW1zOiBleHRyYWN0UE5ldFBhcmFtcyxcclxuICAgICAgICBleHRyYWN0Uk5ldFBhcmFtczogZXh0cmFjdFJOZXRQYXJhbXMsXHJcbiAgICAgICAgZXh0cmFjdE9OZXRQYXJhbXM6IGV4dHJhY3RPTmV0UGFyYW1zXHJcbiAgICB9O1xyXG59XHJcbmV4cG9ydCBmdW5jdGlvbiBleHRyYWN0UGFyYW1zRnJvbVdlaWd0aE1hcCh3ZWlnaHRNYXApIHtcclxuICAgIHZhciBwYXJhbU1hcHBpbmdzID0gW107XHJcbiAgICB2YXIgX2EgPSBleHRyYWN0b3JzRmFjdG9yeSh3ZWlnaHRNYXAsIHBhcmFtTWFwcGluZ3MpLCBleHRyYWN0UE5ldFBhcmFtcyA9IF9hLmV4dHJhY3RQTmV0UGFyYW1zLCBleHRyYWN0Uk5ldFBhcmFtcyA9IF9hLmV4dHJhY3RSTmV0UGFyYW1zLCBleHRyYWN0T05ldFBhcmFtcyA9IF9hLmV4dHJhY3RPTmV0UGFyYW1zO1xyXG4gICAgdmFyIHBuZXQgPSBleHRyYWN0UE5ldFBhcmFtcygpO1xyXG4gICAgdmFyIHJuZXQgPSBleHRyYWN0Uk5ldFBhcmFtcygpO1xyXG4gICAgdmFyIG9uZXQgPSBleHRyYWN0T05ldFBhcmFtcygpO1xyXG4gICAgZGlzcG9zZVVudXNlZFdlaWdodFRlbnNvcnMod2VpZ2h0TWFwLCBwYXJhbU1hcHBpbmdzKTtcclxuICAgIHJldHVybiB7IHBhcmFtczogeyBwbmV0OiBwbmV0LCBybmV0OiBybmV0LCBvbmV0OiBvbmV0IH0sIHBhcmFtTWFwcGluZ3M6IHBhcmFtTWFwcGluZ3MgfTtcclxufVxyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1leHRyYWN0UGFyYW1zRnJvbVdlaWd0aE1hcC5qcy5tYXAiLCJpbXBvcnQgeyBfX2Fzc2lnbiB9IGZyb20gXCJ0c2xpYlwiO1xyXG5pbXBvcnQgKiBhcyB0ZiBmcm9tICdAdGVuc29yZmxvdy90ZmpzLWNvcmUnO1xyXG5pbXBvcnQgeyBleHRyYWN0Q29udlBhcmFtc0ZhY3RvcnksIGV4dHJhY3RGQ1BhcmFtc0ZhY3RvcnksIGV4dHJhY3RXZWlnaHRzRmFjdG9yeSwgfSBmcm9tICcuLi9jb21tb24nO1xyXG5mdW5jdGlvbiBleHRyYWN0b3JzRmFjdG9yeShleHRyYWN0V2VpZ2h0cywgcGFyYW1NYXBwaW5ncykge1xyXG4gICAgdmFyIGV4dHJhY3RDb252UGFyYW1zID0gZXh0cmFjdENvbnZQYXJhbXNGYWN0b3J5KGV4dHJhY3RXZWlnaHRzLCBwYXJhbU1hcHBpbmdzKTtcclxuICAgIHZhciBleHRyYWN0RkNQYXJhbXMgPSBleHRyYWN0RkNQYXJhbXNGYWN0b3J5KGV4dHJhY3RXZWlnaHRzLCBwYXJhbU1hcHBpbmdzKTtcclxuICAgIGZ1bmN0aW9uIGV4dHJhY3RQUmVsdVBhcmFtcyhzaXplLCBwYXJhbVBhdGgpIHtcclxuICAgICAgICB2YXIgYWxwaGEgPSB0Zi50ZW5zb3IxZChleHRyYWN0V2VpZ2h0cyhzaXplKSk7XHJcbiAgICAgICAgcGFyYW1NYXBwaW5ncy5wdXNoKHsgcGFyYW1QYXRoOiBwYXJhbVBhdGggfSk7XHJcbiAgICAgICAgcmV0dXJuIGFscGhhO1xyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gZXh0cmFjdFNoYXJlZFBhcmFtcyhudW1GaWx0ZXJzLCBtYXBwZWRQcmVmaXgsIGlzUm5ldCkge1xyXG4gICAgICAgIGlmIChpc1JuZXQgPT09IHZvaWQgMCkgeyBpc1JuZXQgPSBmYWxzZTsgfVxyXG4gICAgICAgIHZhciBjb252MSA9IGV4dHJhY3RDb252UGFyYW1zKG51bUZpbHRlcnNbMF0sIG51bUZpbHRlcnNbMV0sIDMsIG1hcHBlZFByZWZpeCArIFwiL2NvbnYxXCIpO1xyXG4gICAgICAgIHZhciBwcmVsdTFfYWxwaGEgPSBleHRyYWN0UFJlbHVQYXJhbXMobnVtRmlsdGVyc1sxXSwgbWFwcGVkUHJlZml4ICsgXCIvcHJlbHUxX2FscGhhXCIpO1xyXG4gICAgICAgIHZhciBjb252MiA9IGV4dHJhY3RDb252UGFyYW1zKG51bUZpbHRlcnNbMV0sIG51bUZpbHRlcnNbMl0sIDMsIG1hcHBlZFByZWZpeCArIFwiL2NvbnYyXCIpO1xyXG4gICAgICAgIHZhciBwcmVsdTJfYWxwaGEgPSBleHRyYWN0UFJlbHVQYXJhbXMobnVtRmlsdGVyc1syXSwgbWFwcGVkUHJlZml4ICsgXCIvcHJlbHUyX2FscGhhXCIpO1xyXG4gICAgICAgIHZhciBjb252MyA9IGV4dHJhY3RDb252UGFyYW1zKG51bUZpbHRlcnNbMl0sIG51bUZpbHRlcnNbM10sIGlzUm5ldCA/IDIgOiAzLCBtYXBwZWRQcmVmaXggKyBcIi9jb252M1wiKTtcclxuICAgICAgICB2YXIgcHJlbHUzX2FscGhhID0gZXh0cmFjdFBSZWx1UGFyYW1zKG51bUZpbHRlcnNbM10sIG1hcHBlZFByZWZpeCArIFwiL3ByZWx1M19hbHBoYVwiKTtcclxuICAgICAgICByZXR1cm4geyBjb252MTogY29udjEsIHByZWx1MV9hbHBoYTogcHJlbHUxX2FscGhhLCBjb252MjogY29udjIsIHByZWx1Ml9hbHBoYTogcHJlbHUyX2FscGhhLCBjb252MzogY29udjMsIHByZWx1M19hbHBoYTogcHJlbHUzX2FscGhhIH07XHJcbiAgICB9XHJcbiAgICBmdW5jdGlvbiBleHRyYWN0UE5ldFBhcmFtcygpIHtcclxuICAgICAgICB2YXIgc2hhcmVkUGFyYW1zID0gZXh0cmFjdFNoYXJlZFBhcmFtcyhbMywgMTAsIDE2LCAzMl0sICdwbmV0Jyk7XHJcbiAgICAgICAgdmFyIGNvbnY0XzEgPSBleHRyYWN0Q29udlBhcmFtcygzMiwgMiwgMSwgJ3BuZXQvY29udjRfMScpO1xyXG4gICAgICAgIHZhciBjb252NF8yID0gZXh0cmFjdENvbnZQYXJhbXMoMzIsIDQsIDEsICdwbmV0L2NvbnY0XzInKTtcclxuICAgICAgICByZXR1cm4gX19hc3NpZ24oX19hc3NpZ24oe30sIHNoYXJlZFBhcmFtcyksIHsgY29udjRfMTogY29udjRfMSwgY29udjRfMjogY29udjRfMiB9KTtcclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIGV4dHJhY3RSTmV0UGFyYW1zKCkge1xyXG4gICAgICAgIHZhciBzaGFyZWRQYXJhbXMgPSBleHRyYWN0U2hhcmVkUGFyYW1zKFszLCAyOCwgNDgsIDY0XSwgJ3JuZXQnLCB0cnVlKTtcclxuICAgICAgICB2YXIgZmMxID0gZXh0cmFjdEZDUGFyYW1zKDU3NiwgMTI4LCAncm5ldC9mYzEnKTtcclxuICAgICAgICB2YXIgcHJlbHU0X2FscGhhID0gZXh0cmFjdFBSZWx1UGFyYW1zKDEyOCwgJ3JuZXQvcHJlbHU0X2FscGhhJyk7XHJcbiAgICAgICAgdmFyIGZjMl8xID0gZXh0cmFjdEZDUGFyYW1zKDEyOCwgMiwgJ3JuZXQvZmMyXzEnKTtcclxuICAgICAgICB2YXIgZmMyXzIgPSBleHRyYWN0RkNQYXJhbXMoMTI4LCA0LCAncm5ldC9mYzJfMicpO1xyXG4gICAgICAgIHJldHVybiBfX2Fzc2lnbihfX2Fzc2lnbih7fSwgc2hhcmVkUGFyYW1zKSwgeyBmYzE6IGZjMSwgcHJlbHU0X2FscGhhOiBwcmVsdTRfYWxwaGEsIGZjMl8xOiBmYzJfMSwgZmMyXzI6IGZjMl8yIH0pO1xyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gZXh0cmFjdE9OZXRQYXJhbXMoKSB7XHJcbiAgICAgICAgdmFyIHNoYXJlZFBhcmFtcyA9IGV4dHJhY3RTaGFyZWRQYXJhbXMoWzMsIDMyLCA2NCwgNjRdLCAnb25ldCcpO1xyXG4gICAgICAgIHZhciBjb252NCA9IGV4dHJhY3RDb252UGFyYW1zKDY0LCAxMjgsIDIsICdvbmV0L2NvbnY0Jyk7XHJcbiAgICAgICAgdmFyIHByZWx1NF9hbHBoYSA9IGV4dHJhY3RQUmVsdVBhcmFtcygxMjgsICdvbmV0L3ByZWx1NF9hbHBoYScpO1xyXG4gICAgICAgIHZhciBmYzEgPSBleHRyYWN0RkNQYXJhbXMoMTE1MiwgMjU2LCAnb25ldC9mYzEnKTtcclxuICAgICAgICB2YXIgcHJlbHU1X2FscGhhID0gZXh0cmFjdFBSZWx1UGFyYW1zKDI1NiwgJ29uZXQvcHJlbHU1X2FscGhhJyk7XHJcbiAgICAgICAgdmFyIGZjMl8xID0gZXh0cmFjdEZDUGFyYW1zKDI1NiwgMiwgJ29uZXQvZmMyXzEnKTtcclxuICAgICAgICB2YXIgZmMyXzIgPSBleHRyYWN0RkNQYXJhbXMoMjU2LCA0LCAnb25ldC9mYzJfMicpO1xyXG4gICAgICAgIHZhciBmYzJfMyA9IGV4dHJhY3RGQ1BhcmFtcygyNTYsIDEwLCAnb25ldC9mYzJfMycpO1xyXG4gICAgICAgIHJldHVybiBfX2Fzc2lnbihfX2Fzc2lnbih7fSwgc2hhcmVkUGFyYW1zKSwgeyBjb252NDogY29udjQsIHByZWx1NF9hbHBoYTogcHJlbHU0X2FscGhhLCBmYzE6IGZjMSwgcHJlbHU1X2FscGhhOiBwcmVsdTVfYWxwaGEsIGZjMl8xOiBmYzJfMSwgZmMyXzI6IGZjMl8yLCBmYzJfMzogZmMyXzMgfSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIGV4dHJhY3RQTmV0UGFyYW1zOiBleHRyYWN0UE5ldFBhcmFtcyxcclxuICAgICAgICBleHRyYWN0Uk5ldFBhcmFtczogZXh0cmFjdFJOZXRQYXJhbXMsXHJcbiAgICAgICAgZXh0cmFjdE9OZXRQYXJhbXM6IGV4dHJhY3RPTmV0UGFyYW1zXHJcbiAgICB9O1xyXG59XHJcbmV4cG9ydCBmdW5jdGlvbiBleHRyYWN0UGFyYW1zKHdlaWdodHMpIHtcclxuICAgIHZhciBfYSA9IGV4dHJhY3RXZWlnaHRzRmFjdG9yeSh3ZWlnaHRzKSwgZXh0cmFjdFdlaWdodHMgPSBfYS5leHRyYWN0V2VpZ2h0cywgZ2V0UmVtYWluaW5nV2VpZ2h0cyA9IF9hLmdldFJlbWFpbmluZ1dlaWdodHM7XHJcbiAgICB2YXIgcGFyYW1NYXBwaW5ncyA9IFtdO1xyXG4gICAgdmFyIF9iID0gZXh0cmFjdG9yc0ZhY3RvcnkoZXh0cmFjdFdlaWdodHMsIHBhcmFtTWFwcGluZ3MpLCBleHRyYWN0UE5ldFBhcmFtcyA9IF9iLmV4dHJhY3RQTmV0UGFyYW1zLCBleHRyYWN0Uk5ldFBhcmFtcyA9IF9iLmV4dHJhY3RSTmV0UGFyYW1zLCBleHRyYWN0T05ldFBhcmFtcyA9IF9iLmV4dHJhY3RPTmV0UGFyYW1zO1xyXG4gICAgdmFyIHBuZXQgPSBleHRyYWN0UE5ldFBhcmFtcygpO1xyXG4gICAgdmFyIHJuZXQgPSBleHRyYWN0Uk5ldFBhcmFtcygpO1xyXG4gICAgdmFyIG9uZXQgPSBleHRyYWN0T05ldFBhcmFtcygpO1xyXG4gICAgaWYgKGdldFJlbWFpbmluZ1dlaWdodHMoKS5sZW5ndGggIT09IDApIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJ3ZWlnaHRzIHJlbWFpbmcgYWZ0ZXIgZXh0cmFjdDogXCIgKyBnZXRSZW1haW5pbmdXZWlnaHRzKCkubGVuZ3RoKTtcclxuICAgIH1cclxuICAgIHJldHVybiB7IHBhcmFtczogeyBwbmV0OiBwbmV0LCBybmV0OiBybmV0LCBvbmV0OiBvbmV0IH0sIHBhcmFtTWFwcGluZ3M6IHBhcmFtTWFwcGluZ3MgfTtcclxufVxyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1leHRyYWN0UGFyYW1zLmpzLm1hcCIsImltcG9ydCB7IFBvaW50IH0gZnJvbSAnLi4vY2xhc3Nlcyc7XHJcbmV4cG9ydCB2YXIgSU9VX1RIUkVTSE9MRCA9IDAuNDtcclxuZXhwb3J0IHZhciBCT1hfQU5DSE9SUyA9IFtcclxuICAgIG5ldyBQb2ludCgxLjYwMzIzMSwgMi4wOTQ0NjgpLFxyXG4gICAgbmV3IFBvaW50KDYuMDQxMTQzLCA3LjA4MDEyNiksXHJcbiAgICBuZXcgUG9pbnQoMi44ODI0NTksIDMuNTE4MDYxKSxcclxuICAgIG5ldyBQb2ludCg0LjI2NjkwNiwgNS4xNzg4NTcpLFxyXG4gICAgbmV3IFBvaW50KDkuMDQxNzY1LCAxMC42NjMwOClcclxuXTtcclxuZXhwb3J0IHZhciBNRUFOX1JHQiA9IFsxMTcuMDAxLCAxMTQuNjk3LCA5Ny40MDRdO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb25zdC5qcy5tYXAiLCJpbXBvcnQgeyBfX2F3YWl0ZXIsIF9fZXh0ZW5kcywgX19nZW5lcmF0b3IgfSBmcm9tIFwidHNsaWJcIjtcclxuaW1wb3J0IHsgRmFjZURldGVjdGlvbiB9IGZyb20gJy4uL2NsYXNzZXMnO1xyXG5pbXBvcnQgeyBUaW55WW9sb3YyQmFzZSB9IGZyb20gJy4uL3RpbnlZb2xvdjIvVGlueVlvbG92MkJhc2UnO1xyXG5pbXBvcnQgeyBCT1hfQU5DSE9SUywgSU9VX1RIUkVTSE9MRCwgTUVBTl9SR0IgfSBmcm9tICcuL2NvbnN0JztcclxudmFyIFRpbnlGYWNlRGV0ZWN0b3IgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XHJcbiAgICBfX2V4dGVuZHMoVGlueUZhY2VEZXRlY3RvciwgX3N1cGVyKTtcclxuICAgIGZ1bmN0aW9uIFRpbnlGYWNlRGV0ZWN0b3IoKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICB2YXIgY29uZmlnID0ge1xyXG4gICAgICAgICAgICB3aXRoU2VwYXJhYmxlQ29udnM6IHRydWUsXHJcbiAgICAgICAgICAgIGlvdVRocmVzaG9sZDogSU9VX1RIUkVTSE9MRCxcclxuICAgICAgICAgICAgY2xhc3NlczogWydmYWNlJ10sXHJcbiAgICAgICAgICAgIGFuY2hvcnM6IEJPWF9BTkNIT1JTLFxyXG4gICAgICAgICAgICBtZWFuUmdiOiBNRUFOX1JHQixcclxuICAgICAgICAgICAgaXNGaXJzdExheWVyQ29udjJkOiB0cnVlLFxyXG4gICAgICAgICAgICBmaWx0ZXJTaXplczogWzMsIDE2LCAzMiwgNjQsIDEyOCwgMjU2LCA1MTJdXHJcbiAgICAgICAgfTtcclxuICAgICAgICBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIGNvbmZpZykgfHwgdGhpcztcclxuICAgICAgICByZXR1cm4gX3RoaXM7XHJcbiAgICB9XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoVGlueUZhY2VEZXRlY3Rvci5wcm90b3R5cGUsIFwiYW5jaG9yc1wiLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNvbmZpZy5hbmNob3JzO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgVGlueUZhY2VEZXRlY3Rvci5wcm90b3R5cGUubG9jYXRlRmFjZXMgPSBmdW5jdGlvbiAoaW5wdXQsIGZvcndhcmRQYXJhbXMpIHtcclxuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciBvYmplY3REZXRlY3Rpb25zO1xyXG4gICAgICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XHJcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKF9hLmxhYmVsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOiByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzLmRldGVjdChpbnB1dCwgZm9yd2FyZFBhcmFtcyldO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcclxuICAgICAgICAgICAgICAgICAgICAgICAgb2JqZWN0RGV0ZWN0aW9ucyA9IF9hLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIG9iamVjdERldGVjdGlvbnMubWFwKGZ1bmN0aW9uIChkZXQpIHsgcmV0dXJuIG5ldyBGYWNlRGV0ZWN0aW9uKGRldC5zY29yZSwgZGV0LnJlbGF0aXZlQm94LCB7IHdpZHRoOiBkZXQuaW1hZ2VXaWR0aCwgaGVpZ2h0OiBkZXQuaW1hZ2VIZWlnaHQgfSk7IH0pXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgVGlueUZhY2VEZXRlY3Rvci5wcm90b3R5cGUuZ2V0RGVmYXVsdE1vZGVsTmFtZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gJ3RpbnlfZmFjZV9kZXRlY3Rvcl9tb2RlbCc7XHJcbiAgICB9O1xyXG4gICAgVGlueUZhY2VEZXRlY3Rvci5wcm90b3R5cGUuZXh0cmFjdFBhcmFtc0Zyb21XZWlndGhNYXAgPSBmdW5jdGlvbiAod2VpZ2h0TWFwKSB7XHJcbiAgICAgICAgcmV0dXJuIF9zdXBlci5wcm90b3R5cGUuZXh0cmFjdFBhcmFtc0Zyb21XZWlndGhNYXAuY2FsbCh0aGlzLCB3ZWlnaHRNYXApO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBUaW55RmFjZURldGVjdG9yO1xyXG59KFRpbnlZb2xvdjJCYXNlKSk7XHJcbmV4cG9ydCB7IFRpbnlGYWNlRGV0ZWN0b3IgfTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9VGlueUZhY2VEZXRlY3Rvci5qcy5tYXAiLCJpbXBvcnQgeyBBZ2VHZW5kZXJOZXQgfSBmcm9tICcuLi9hZ2VHZW5kZXJOZXQvQWdlR2VuZGVyTmV0JztcclxuaW1wb3J0IHsgRmFjZUV4cHJlc3Npb25OZXQgfSBmcm9tICcuLi9mYWNlRXhwcmVzc2lvbk5ldC9GYWNlRXhwcmVzc2lvbk5ldCc7XHJcbmltcG9ydCB7IEZhY2VMYW5kbWFyazY4TmV0IH0gZnJvbSAnLi4vZmFjZUxhbmRtYXJrTmV0L0ZhY2VMYW5kbWFyazY4TmV0JztcclxuaW1wb3J0IHsgRmFjZUxhbmRtYXJrNjhUaW55TmV0IH0gZnJvbSAnLi4vZmFjZUxhbmRtYXJrTmV0L0ZhY2VMYW5kbWFyazY4VGlueU5ldCc7XHJcbmltcG9ydCB7IEZhY2VSZWNvZ25pdGlvbk5ldCB9IGZyb20gJy4uL2ZhY2VSZWNvZ25pdGlvbk5ldC9GYWNlUmVjb2duaXRpb25OZXQnO1xyXG5pbXBvcnQgeyBNdGNubiB9IGZyb20gJy4uL210Y25uL010Y25uJztcclxuaW1wb3J0IHsgU3NkTW9iaWxlbmV0djEgfSBmcm9tICcuLi9zc2RNb2JpbGVuZXR2MS9Tc2RNb2JpbGVuZXR2MSc7XHJcbmltcG9ydCB7IFRpbnlGYWNlRGV0ZWN0b3IgfSBmcm9tICcuLi90aW55RmFjZURldGVjdG9yL1RpbnlGYWNlRGV0ZWN0b3InO1xyXG5pbXBvcnQgeyBUaW55WW9sb3YyIH0gZnJvbSAnLi4vdGlueVlvbG92Mic7XHJcbmV4cG9ydCB2YXIgbmV0cyA9IHtcclxuICAgIHNzZE1vYmlsZW5ldHYxOiBuZXcgU3NkTW9iaWxlbmV0djEoKSxcclxuICAgIHRpbnlGYWNlRGV0ZWN0b3I6IG5ldyBUaW55RmFjZURldGVjdG9yKCksXHJcbiAgICB0aW55WW9sb3YyOiBuZXcgVGlueVlvbG92MigpLFxyXG4gICAgbXRjbm46IG5ldyBNdGNubigpLFxyXG4gICAgZmFjZUxhbmRtYXJrNjhOZXQ6IG5ldyBGYWNlTGFuZG1hcms2OE5ldCgpLFxyXG4gICAgZmFjZUxhbmRtYXJrNjhUaW55TmV0OiBuZXcgRmFjZUxhbmRtYXJrNjhUaW55TmV0KCksXHJcbiAgICBmYWNlUmVjb2duaXRpb25OZXQ6IG5ldyBGYWNlUmVjb2duaXRpb25OZXQoKSxcclxuICAgIGZhY2VFeHByZXNzaW9uTmV0OiBuZXcgRmFjZUV4cHJlc3Npb25OZXQoKSxcclxuICAgIGFnZUdlbmRlck5ldDogbmV3IEFnZUdlbmRlck5ldCgpXHJcbn07XHJcbi8qKlxyXG4gKiBBdHRlbXB0cyB0byBkZXRlY3QgYWxsIGZhY2VzIGluIGFuIGltYWdlIHVzaW5nIFNTRCBNb2JpbGVuZXR2MSBOZXR3b3JrLlxyXG4gKlxyXG4gKiBAcGFyYW0gaW5wdXQgVGhlIGlucHV0IGltYWdlLlxyXG4gKiBAcGFyYW0gb3B0aW9ucyAob3B0aW9uYWwsIGRlZmF1bHQ6IHNlZSBTc2RNb2JpbGVuZXR2MU9wdGlvbnMgY29uc3RydWN0b3IgZm9yIGRlZmF1bHQgcGFyYW1ldGVycykuXHJcbiAqIEByZXR1cm5zIEJvdW5kaW5nIGJveCBvZiBlYWNoIGZhY2Ugd2l0aCBzY29yZS5cclxuICovXHJcbmV4cG9ydCB2YXIgc3NkTW9iaWxlbmV0djEgPSBmdW5jdGlvbiAoaW5wdXQsIG9wdGlvbnMpIHtcclxuICAgIHJldHVybiBuZXRzLnNzZE1vYmlsZW5ldHYxLmxvY2F0ZUZhY2VzKGlucHV0LCBvcHRpb25zKTtcclxufTtcclxuLyoqXHJcbiAqIEF0dGVtcHRzIHRvIGRldGVjdCBhbGwgZmFjZXMgaW4gYW4gaW1hZ2UgdXNpbmcgdGhlIFRpbnkgRmFjZSBEZXRlY3Rvci5cclxuICpcclxuICogQHBhcmFtIGlucHV0IFRoZSBpbnB1dCBpbWFnZS5cclxuICogQHBhcmFtIG9wdGlvbnMgKG9wdGlvbmFsLCBkZWZhdWx0OiBzZWUgVGlueUZhY2VEZXRlY3Rvck9wdGlvbnMgY29uc3RydWN0b3IgZm9yIGRlZmF1bHQgcGFyYW1ldGVycykuXHJcbiAqIEByZXR1cm5zIEJvdW5kaW5nIGJveCBvZiBlYWNoIGZhY2Ugd2l0aCBzY29yZS5cclxuICovXHJcbmV4cG9ydCB2YXIgdGlueUZhY2VEZXRlY3RvciA9IGZ1bmN0aW9uIChpbnB1dCwgb3B0aW9ucykge1xyXG4gICAgcmV0dXJuIG5ldHMudGlueUZhY2VEZXRlY3Rvci5sb2NhdGVGYWNlcyhpbnB1dCwgb3B0aW9ucyk7XHJcbn07XHJcbi8qKlxyXG4gKiBBdHRlbXB0cyB0byBkZXRlY3QgYWxsIGZhY2VzIGluIGFuIGltYWdlIHVzaW5nIHRoZSBUaW55IFlvbG92MiBOZXR3b3JrLlxyXG4gKlxyXG4gKiBAcGFyYW0gaW5wdXQgVGhlIGlucHV0IGltYWdlLlxyXG4gKiBAcGFyYW0gb3B0aW9ucyAob3B0aW9uYWwsIGRlZmF1bHQ6IHNlZSBUaW55WW9sb3YyT3B0aW9ucyBjb25zdHJ1Y3RvciBmb3IgZGVmYXVsdCBwYXJhbWV0ZXJzKS5cclxuICogQHJldHVybnMgQm91bmRpbmcgYm94IG9mIGVhY2ggZmFjZSB3aXRoIHNjb3JlLlxyXG4gKi9cclxuZXhwb3J0IHZhciB0aW55WW9sb3YyID0gZnVuY3Rpb24gKGlucHV0LCBvcHRpb25zKSB7XHJcbiAgICByZXR1cm4gbmV0cy50aW55WW9sb3YyLmxvY2F0ZUZhY2VzKGlucHV0LCBvcHRpb25zKTtcclxufTtcclxuLyoqXHJcbiAqIEF0dGVtcHRzIHRvIGRldGVjdCBhbGwgZmFjZXMgaW4gYW4gaW1hZ2UgYW5kIHRoZSA1IHBvaW50IGZhY2UgbGFuZG1hcmtzXHJcbiAqIG9mIGVhY2ggZGV0ZWN0ZWQgZmFjZSB1c2luZyB0aGUgTVRDTk4gTmV0d29yay5cclxuICpcclxuICogQHBhcmFtIGlucHV0IFRoZSBpbnB1dCBpbWFnZS5cclxuICogQHBhcmFtIG9wdGlvbnMgKG9wdGlvbmFsLCBkZWZhdWx0OiBzZWUgTXRjbm5PcHRpb25zIGNvbnN0cnVjdG9yIGZvciBkZWZhdWx0IHBhcmFtZXRlcnMpLlxyXG4gKiBAcmV0dXJucyBCb3VuZGluZyBib3ggb2YgZWFjaCBmYWNlIHdpdGggc2NvcmUgYW5kIDUgcG9pbnQgZmFjZSBsYW5kbWFya3MuXHJcbiAqL1xyXG5leHBvcnQgdmFyIG10Y25uID0gZnVuY3Rpb24gKGlucHV0LCBvcHRpb25zKSB7XHJcbiAgICByZXR1cm4gbmV0cy5tdGNubi5mb3J3YXJkKGlucHV0LCBvcHRpb25zKTtcclxufTtcclxuLyoqXHJcbiAqIERldGVjdHMgdGhlIDY4IHBvaW50IGZhY2UgbGFuZG1hcmsgcG9zaXRpb25zIG9mIHRoZSBmYWNlIHNob3duIGluIGFuIGltYWdlLlxyXG4gKlxyXG4gKiBAcGFyYW0gaW5wdXRzIFRoZSBmYWNlIGltYWdlIGV4dHJhY3RlZCBmcm9tIHRoZSBib3VuZGluZyBib3ggb2YgYSBmYWNlLiBDYW5cclxuICogYWxzbyBiZSBhbiBhcnJheSBvZiBpbnB1dCBpbWFnZXMsIHdoaWNoIHdpbGwgYmUgYmF0Y2ggcHJvY2Vzc2VkLlxyXG4gKiBAcmV0dXJucyA2OCBwb2ludCBmYWNlIGxhbmRtYXJrcyBvciBhcnJheSB0aGVyZW9mIGluIGNhc2Ugb2YgYmF0Y2ggaW5wdXQuXHJcbiAqL1xyXG5leHBvcnQgdmFyIGRldGVjdEZhY2VMYW5kbWFya3MgPSBmdW5jdGlvbiAoaW5wdXQpIHtcclxuICAgIHJldHVybiBuZXRzLmZhY2VMYW5kbWFyazY4TmV0LmRldGVjdExhbmRtYXJrcyhpbnB1dCk7XHJcbn07XHJcbi8qKlxyXG4gKiBEZXRlY3RzIHRoZSA2OCBwb2ludCBmYWNlIGxhbmRtYXJrIHBvc2l0aW9ucyBvZiB0aGUgZmFjZSBzaG93biBpbiBhbiBpbWFnZVxyXG4gKiB1c2luZyBhIHRpbmllciB2ZXJzaW9uIG9mIHRoZSA2OCBwb2ludCBmYWNlIGxhbmRtYXJrIG1vZGVsLCB3aGljaCBpcyBzbGlnaHRseVxyXG4gKiBmYXN0ZXIgYXQgaW5mZXJlbmNlLCBidXQgYWxzbyBzbGlnaHRseSBsZXNzIGFjY3VyYXRlLlxyXG4gKlxyXG4gKiBAcGFyYW0gaW5wdXRzIFRoZSBmYWNlIGltYWdlIGV4dHJhY3RlZCBmcm9tIHRoZSBib3VuZGluZyBib3ggb2YgYSBmYWNlLiBDYW5cclxuICogYWxzbyBiZSBhbiBhcnJheSBvZiBpbnB1dCBpbWFnZXMsIHdoaWNoIHdpbGwgYmUgYmF0Y2ggcHJvY2Vzc2VkLlxyXG4gKiBAcmV0dXJucyA2OCBwb2ludCBmYWNlIGxhbmRtYXJrcyBvciBhcnJheSB0aGVyZW9mIGluIGNhc2Ugb2YgYmF0Y2ggaW5wdXQuXHJcbiAqL1xyXG5leHBvcnQgdmFyIGRldGVjdEZhY2VMYW5kbWFya3NUaW55ID0gZnVuY3Rpb24gKGlucHV0KSB7XHJcbiAgICByZXR1cm4gbmV0cy5mYWNlTGFuZG1hcms2OFRpbnlOZXQuZGV0ZWN0TGFuZG1hcmtzKGlucHV0KTtcclxufTtcclxuLyoqXHJcbiAqIENvbXB1dGVzIGEgMTI4IGVudHJ5IHZlY3RvciAoZmFjZSBkZXNjcmlwdG9yIC8gZmFjZSBlbWJlZGRpbmdzKSBmcm9tIHRoZSBmYWNlIHNob3duIGluIGFuIGltYWdlLFxyXG4gKiB3aGljaCB1bmlxdWVseSByZXByZXNlbnRzIHRoZSBmZWF0dXJlcyBvZiB0aGF0IHBlcnNvbnMgZmFjZS4gVGhlIGNvbXB1dGVkIGZhY2UgZGVzY3JpcHRvciBjYW5cclxuICogYmUgdXNlZCB0byBtZWFzdXJlIHRoZSBzaW1pbGFyaXR5IGJldHdlZW4gZmFjZXMsIGJ5IGNvbXB1dGluZyB0aGUgZXVjbGlkZWFuIGRpc3RhbmNlIG9mIHR3b1xyXG4gKiBmYWNlIGRlc2NyaXB0b3JzLlxyXG4gKlxyXG4gKiBAcGFyYW0gaW5wdXRzIFRoZSBmYWNlIGltYWdlIGV4dHJhY3RlZCBmcm9tIHRoZSBhbGlnbmVkIGJvdW5kaW5nIGJveCBvZiBhIGZhY2UuIENhblxyXG4gKiBhbHNvIGJlIGFuIGFycmF5IG9mIGlucHV0IGltYWdlcywgd2hpY2ggd2lsbCBiZSBiYXRjaCBwcm9jZXNzZWQuXHJcbiAqIEByZXR1cm5zIEZhY2UgZGVzY3JpcHRvciB3aXRoIDEyOCBlbnRyaWVzIG9yIGFycmF5IHRoZXJlb2YgaW4gY2FzZSBvZiBiYXRjaCBpbnB1dC5cclxuICovXHJcbmV4cG9ydCB2YXIgY29tcHV0ZUZhY2VEZXNjcmlwdG9yID0gZnVuY3Rpb24gKGlucHV0KSB7XHJcbiAgICByZXR1cm4gbmV0cy5mYWNlUmVjb2duaXRpb25OZXQuY29tcHV0ZUZhY2VEZXNjcmlwdG9yKGlucHV0KTtcclxufTtcclxuLyoqXHJcbiAqIFJlY29nbml6ZXMgdGhlIGZhY2lhbCBleHByZXNzaW9ucyBmcm9tIGEgZmFjZSBpbWFnZS5cclxuICpcclxuICogQHBhcmFtIGlucHV0cyBUaGUgZmFjZSBpbWFnZSBleHRyYWN0ZWQgZnJvbSB0aGUgYm91bmRpbmcgYm94IG9mIGEgZmFjZS4gQ2FuXHJcbiAqIGFsc28gYmUgYW4gYXJyYXkgb2YgaW5wdXQgaW1hZ2VzLCB3aGljaCB3aWxsIGJlIGJhdGNoIHByb2Nlc3NlZC5cclxuICogQHJldHVybnMgRmFjaWFsIGV4cHJlc3Npb25zIHdpdGggY29ycmVzcG9uZGluZyBwcm9iYWJpbGl0aWVzIG9yIGFycmF5IHRoZXJlb2YgaW4gY2FzZSBvZiBiYXRjaCBpbnB1dC5cclxuICovXHJcbmV4cG9ydCB2YXIgcmVjb2duaXplRmFjZUV4cHJlc3Npb25zID0gZnVuY3Rpb24gKGlucHV0KSB7XHJcbiAgICByZXR1cm4gbmV0cy5mYWNlRXhwcmVzc2lvbk5ldC5wcmVkaWN0RXhwcmVzc2lvbnMoaW5wdXQpO1xyXG59O1xyXG4vKipcclxuICogUHJlZGljdHMgYWdlIGFuZCBnZW5kZXIgZnJvbSBhIGZhY2UgaW1hZ2UuXHJcbiAqXHJcbiAqIEBwYXJhbSBpbnB1dHMgVGhlIGZhY2UgaW1hZ2UgZXh0cmFjdGVkIGZyb20gdGhlIGJvdW5kaW5nIGJveCBvZiBhIGZhY2UuIENhblxyXG4gKiBhbHNvIGJlIGFuIGFycmF5IG9mIGlucHV0IGltYWdlcywgd2hpY2ggd2lsbCBiZSBiYXRjaCBwcm9jZXNzZWQuXHJcbiAqIEByZXR1cm5zIFByZWRpY3Rpb25zIHdpdGggYWdlLCBnZW5kZXIgYW5kIGdlbmRlciBwcm9iYWJpbGl0eSBvciBhcnJheSB0aGVyZW9mIGluIGNhc2Ugb2YgYmF0Y2ggaW5wdXQuXHJcbiAqL1xyXG5leHBvcnQgdmFyIHByZWRpY3RBZ2VBbmRHZW5kZXIgPSBmdW5jdGlvbiAoaW5wdXQpIHtcclxuICAgIHJldHVybiBuZXRzLmFnZUdlbmRlck5ldC5wcmVkaWN0QWdlQW5kR2VuZGVyKGlucHV0KTtcclxufTtcclxuZXhwb3J0IHZhciBsb2FkU3NkTW9iaWxlbmV0djFNb2RlbCA9IGZ1bmN0aW9uICh1cmwpIHsgcmV0dXJuIG5ldHMuc3NkTW9iaWxlbmV0djEubG9hZCh1cmwpOyB9O1xyXG5leHBvcnQgdmFyIGxvYWRUaW55RmFjZURldGVjdG9yTW9kZWwgPSBmdW5jdGlvbiAodXJsKSB7IHJldHVybiBuZXRzLnRpbnlGYWNlRGV0ZWN0b3IubG9hZCh1cmwpOyB9O1xyXG5leHBvcnQgdmFyIGxvYWRNdGNubk1vZGVsID0gZnVuY3Rpb24gKHVybCkgeyByZXR1cm4gbmV0cy5tdGNubi5sb2FkKHVybCk7IH07XHJcbmV4cG9ydCB2YXIgbG9hZFRpbnlZb2xvdjJNb2RlbCA9IGZ1bmN0aW9uICh1cmwpIHsgcmV0dXJuIG5ldHMudGlueVlvbG92Mi5sb2FkKHVybCk7IH07XHJcbmV4cG9ydCB2YXIgbG9hZEZhY2VMYW5kbWFya01vZGVsID0gZnVuY3Rpb24gKHVybCkgeyByZXR1cm4gbmV0cy5mYWNlTGFuZG1hcms2OE5ldC5sb2FkKHVybCk7IH07XHJcbmV4cG9ydCB2YXIgbG9hZEZhY2VMYW5kbWFya1RpbnlNb2RlbCA9IGZ1bmN0aW9uICh1cmwpIHsgcmV0dXJuIG5ldHMuZmFjZUxhbmRtYXJrNjhUaW55TmV0LmxvYWQodXJsKTsgfTtcclxuZXhwb3J0IHZhciBsb2FkRmFjZVJlY29nbml0aW9uTW9kZWwgPSBmdW5jdGlvbiAodXJsKSB7IHJldHVybiBuZXRzLmZhY2VSZWNvZ25pdGlvbk5ldC5sb2FkKHVybCk7IH07XHJcbmV4cG9ydCB2YXIgbG9hZEZhY2VFeHByZXNzaW9uTW9kZWwgPSBmdW5jdGlvbiAodXJsKSB7IHJldHVybiBuZXRzLmZhY2VFeHByZXNzaW9uTmV0LmxvYWQodXJsKTsgfTtcclxuZXhwb3J0IHZhciBsb2FkQWdlR2VuZGVyTW9kZWwgPSBmdW5jdGlvbiAodXJsKSB7IHJldHVybiBuZXRzLmFnZUdlbmRlck5ldC5sb2FkKHVybCk7IH07XHJcbi8vIGJhY2t3YXJkIGNvbXBhdGliaWxpdHlcclxuZXhwb3J0IHZhciBsb2FkRmFjZURldGVjdGlvbk1vZGVsID0gbG9hZFNzZE1vYmlsZW5ldHYxTW9kZWw7XHJcbmV4cG9ydCB2YXIgbG9jYXRlRmFjZXMgPSBzc2RNb2JpbGVuZXR2MTtcclxuZXhwb3J0IHZhciBkZXRlY3RMYW5kbWFya3MgPSBkZXRlY3RGYWNlTGFuZG1hcmtzO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1uZXRzLmpzLm1hcCIsImltcG9ydCB7IF9fYXdhaXRlciwgX19leHRlbmRzLCBfX2dlbmVyYXRvciB9IGZyb20gXCJ0c2xpYlwiO1xyXG5pbXBvcnQgeyBleHRlbmRXaXRoRmFjZUV4cHJlc3Npb25zIH0gZnJvbSAnLi4vZmFjdG9yaWVzL1dpdGhGYWNlRXhwcmVzc2lvbnMnO1xyXG5pbXBvcnQgeyBDb21wb3NhYmxlVGFzayB9IGZyb20gJy4vQ29tcG9zYWJsZVRhc2snO1xyXG5pbXBvcnQgeyBDb21wdXRlQWxsRmFjZURlc2NyaXB0b3JzVGFzaywgQ29tcHV0ZVNpbmdsZUZhY2VEZXNjcmlwdG9yVGFzayB9IGZyb20gJy4vQ29tcHV0ZUZhY2VEZXNjcmlwdG9yc1Rhc2tzJztcclxuaW1wb3J0IHsgZXh0cmFjdEFsbEZhY2VzQW5kQ29tcHV0ZVJlc3VsdHMsIGV4dHJhY3RTaW5nbGVGYWNlQW5kQ29tcHV0ZVJlc3VsdCB9IGZyb20gJy4vZXh0cmFjdEZhY2VzQW5kQ29tcHV0ZVJlc3VsdHMnO1xyXG5pbXBvcnQgeyBuZXRzIH0gZnJvbSAnLi9uZXRzJztcclxuaW1wb3J0IHsgUHJlZGljdEFsbEFnZUFuZEdlbmRlclRhc2ssIFByZWRpY3RBbGxBZ2VBbmRHZW5kZXJXaXRoRmFjZUFsaWdubWVudFRhc2ssIFByZWRpY3RTaW5nbGVBZ2VBbmRHZW5kZXJUYXNrLCBQcmVkaWN0U2luZ2xlQWdlQW5kR2VuZGVyV2l0aEZhY2VBbGlnbm1lbnRUYXNrLCB9IGZyb20gJy4vUHJlZGljdEFnZUFuZEdlbmRlclRhc2snO1xyXG52YXIgUHJlZGljdEZhY2VFeHByZXNzaW9uc1Rhc2tCYXNlID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xyXG4gICAgX19leHRlbmRzKFByZWRpY3RGYWNlRXhwcmVzc2lvbnNUYXNrQmFzZSwgX3N1cGVyKTtcclxuICAgIGZ1bmN0aW9uIFByZWRpY3RGYWNlRXhwcmVzc2lvbnNUYXNrQmFzZShwYXJlbnRUYXNrLCBpbnB1dCwgZXh0cmFjdGVkRmFjZXMpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzKSB8fCB0aGlzO1xyXG4gICAgICAgIF90aGlzLnBhcmVudFRhc2sgPSBwYXJlbnRUYXNrO1xyXG4gICAgICAgIF90aGlzLmlucHV0ID0gaW5wdXQ7XHJcbiAgICAgICAgX3RoaXMuZXh0cmFjdGVkRmFjZXMgPSBleHRyYWN0ZWRGYWNlcztcclxuICAgICAgICByZXR1cm4gX3RoaXM7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gUHJlZGljdEZhY2VFeHByZXNzaW9uc1Rhc2tCYXNlO1xyXG59KENvbXBvc2FibGVUYXNrKSk7XHJcbmV4cG9ydCB7IFByZWRpY3RGYWNlRXhwcmVzc2lvbnNUYXNrQmFzZSB9O1xyXG52YXIgUHJlZGljdEFsbEZhY2VFeHByZXNzaW9uc1Rhc2sgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XHJcbiAgICBfX2V4dGVuZHMoUHJlZGljdEFsbEZhY2VFeHByZXNzaW9uc1Rhc2ssIF9zdXBlcik7XHJcbiAgICBmdW5jdGlvbiBQcmVkaWN0QWxsRmFjZUV4cHJlc3Npb25zVGFzaygpIHtcclxuICAgICAgICByZXR1cm4gX3N1cGVyICE9PSBudWxsICYmIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XHJcbiAgICB9XHJcbiAgICBQcmVkaWN0QWxsRmFjZUV4cHJlc3Npb25zVGFzay5wcm90b3R5cGUucnVuID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIHBhcmVudFJlc3VsdHMsIGZhY2VFeHByZXNzaW9uc0J5RmFjZTtcclxuICAgICAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xyXG4gICAgICAgICAgICAgICAgc3dpdGNoIChfYS5sYWJlbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDogcmV0dXJuIFs0IC8qeWllbGQqLywgdGhpcy5wYXJlbnRUYXNrXTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhcmVudFJlc3VsdHMgPSBfYS5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIGV4dHJhY3RBbGxGYWNlc0FuZENvbXB1dGVSZXN1bHRzKHBhcmVudFJlc3VsdHMsIHRoaXMuaW5wdXQsIGZ1bmN0aW9uIChmYWNlcykgeyByZXR1cm4gX19hd2FpdGVyKF90aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChfYS5sYWJlbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAwOiByZXR1cm4gWzQgLyp5aWVsZCovLCBQcm9taXNlLmFsbChmYWNlcy5tYXAoZnVuY3Rpb24gKGZhY2UpIHsgcmV0dXJuIG5ldHMuZmFjZUV4cHJlc3Npb25OZXQucHJlZGljdEV4cHJlc3Npb25zKGZhY2UpOyB9KSldO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAxOiByZXR1cm4gWzIgLypyZXR1cm4qLywgX2Euc2VudCgpXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7IH0sIHRoaXMuZXh0cmFjdGVkRmFjZXMpXTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDI6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZhY2VFeHByZXNzaW9uc0J5RmFjZSA9IF9hLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIHBhcmVudFJlc3VsdHMubWFwKGZ1bmN0aW9uIChwYXJlbnRSZXN1bHQsIGkpIHsgcmV0dXJuIGV4dGVuZFdpdGhGYWNlRXhwcmVzc2lvbnMocGFyZW50UmVzdWx0LCBmYWNlRXhwcmVzc2lvbnNCeUZhY2VbaV0pOyB9KV07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIFByZWRpY3RBbGxGYWNlRXhwcmVzc2lvbnNUYXNrLnByb3RvdHlwZS53aXRoQWdlQW5kR2VuZGVyID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiBuZXcgUHJlZGljdEFsbEFnZUFuZEdlbmRlclRhc2sodGhpcywgdGhpcy5pbnB1dCk7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIFByZWRpY3RBbGxGYWNlRXhwcmVzc2lvbnNUYXNrO1xyXG59KFByZWRpY3RGYWNlRXhwcmVzc2lvbnNUYXNrQmFzZSkpO1xyXG5leHBvcnQgeyBQcmVkaWN0QWxsRmFjZUV4cHJlc3Npb25zVGFzayB9O1xyXG52YXIgUHJlZGljdFNpbmdsZUZhY2VFeHByZXNzaW9uc1Rhc2sgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XHJcbiAgICBfX2V4dGVuZHMoUHJlZGljdFNpbmdsZUZhY2VFeHByZXNzaW9uc1Rhc2ssIF9zdXBlcik7XHJcbiAgICBmdW5jdGlvbiBQcmVkaWN0U2luZ2xlRmFjZUV4cHJlc3Npb25zVGFzaygpIHtcclxuICAgICAgICByZXR1cm4gX3N1cGVyICE9PSBudWxsICYmIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XHJcbiAgICB9XHJcbiAgICBQcmVkaWN0U2luZ2xlRmFjZUV4cHJlc3Npb25zVGFzay5wcm90b3R5cGUucnVuID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIHBhcmVudFJlc3VsdCwgZmFjZUV4cHJlc3Npb25zO1xyXG4gICAgICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XHJcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKF9hLmxhYmVsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOiByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzLnBhcmVudFRhc2tdO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcclxuICAgICAgICAgICAgICAgICAgICAgICAgcGFyZW50UmVzdWx0ID0gX2Euc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXBhcmVudFJlc3VsdCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi9dO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIGV4dHJhY3RTaW5nbGVGYWNlQW5kQ29tcHV0ZVJlc3VsdChwYXJlbnRSZXN1bHQsIHRoaXMuaW5wdXQsIGZ1bmN0aW9uIChmYWNlKSB7IHJldHVybiBuZXRzLmZhY2VFeHByZXNzaW9uTmV0LnByZWRpY3RFeHByZXNzaW9ucyhmYWNlKTsgfSwgdGhpcy5leHRyYWN0ZWRGYWNlcyldO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgZmFjZUV4cHJlc3Npb25zID0gX2Euc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgZXh0ZW5kV2l0aEZhY2VFeHByZXNzaW9ucyhwYXJlbnRSZXN1bHQsIGZhY2VFeHByZXNzaW9ucyldO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBQcmVkaWN0U2luZ2xlRmFjZUV4cHJlc3Npb25zVGFzay5wcm90b3R5cGUud2l0aEFnZUFuZEdlbmRlciA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gbmV3IFByZWRpY3RTaW5nbGVBZ2VBbmRHZW5kZXJUYXNrKHRoaXMsIHRoaXMuaW5wdXQpO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBQcmVkaWN0U2luZ2xlRmFjZUV4cHJlc3Npb25zVGFzaztcclxufShQcmVkaWN0RmFjZUV4cHJlc3Npb25zVGFza0Jhc2UpKTtcclxuZXhwb3J0IHsgUHJlZGljdFNpbmdsZUZhY2VFeHByZXNzaW9uc1Rhc2sgfTtcclxudmFyIFByZWRpY3RBbGxGYWNlRXhwcmVzc2lvbnNXaXRoRmFjZUFsaWdubWVudFRhc2sgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XHJcbiAgICBfX2V4dGVuZHMoUHJlZGljdEFsbEZhY2VFeHByZXNzaW9uc1dpdGhGYWNlQWxpZ25tZW50VGFzaywgX3N1cGVyKTtcclxuICAgIGZ1bmN0aW9uIFByZWRpY3RBbGxGYWNlRXhwcmVzc2lvbnNXaXRoRmFjZUFsaWdubWVudFRhc2soKSB7XHJcbiAgICAgICAgcmV0dXJuIF9zdXBlciAhPT0gbnVsbCAmJiBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xyXG4gICAgfVxyXG4gICAgUHJlZGljdEFsbEZhY2VFeHByZXNzaW9uc1dpdGhGYWNlQWxpZ25tZW50VGFzay5wcm90b3R5cGUud2l0aEFnZUFuZEdlbmRlciA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gbmV3IFByZWRpY3RBbGxBZ2VBbmRHZW5kZXJXaXRoRmFjZUFsaWdubWVudFRhc2sodGhpcywgdGhpcy5pbnB1dCk7XHJcbiAgICB9O1xyXG4gICAgUHJlZGljdEFsbEZhY2VFeHByZXNzaW9uc1dpdGhGYWNlQWxpZ25tZW50VGFzay5wcm90b3R5cGUud2l0aEZhY2VEZXNjcmlwdG9ycyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gbmV3IENvbXB1dGVBbGxGYWNlRGVzY3JpcHRvcnNUYXNrKHRoaXMsIHRoaXMuaW5wdXQpO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBQcmVkaWN0QWxsRmFjZUV4cHJlc3Npb25zV2l0aEZhY2VBbGlnbm1lbnRUYXNrO1xyXG59KFByZWRpY3RBbGxGYWNlRXhwcmVzc2lvbnNUYXNrKSk7XHJcbmV4cG9ydCB7IFByZWRpY3RBbGxGYWNlRXhwcmVzc2lvbnNXaXRoRmFjZUFsaWdubWVudFRhc2sgfTtcclxudmFyIFByZWRpY3RTaW5nbGVGYWNlRXhwcmVzc2lvbnNXaXRoRmFjZUFsaWdubWVudFRhc2sgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XHJcbiAgICBfX2V4dGVuZHMoUHJlZGljdFNpbmdsZUZhY2VFeHByZXNzaW9uc1dpdGhGYWNlQWxpZ25tZW50VGFzaywgX3N1cGVyKTtcclxuICAgIGZ1bmN0aW9uIFByZWRpY3RTaW5nbGVGYWNlRXhwcmVzc2lvbnNXaXRoRmFjZUFsaWdubWVudFRhc2soKSB7XHJcbiAgICAgICAgcmV0dXJuIF9zdXBlciAhPT0gbnVsbCAmJiBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xyXG4gICAgfVxyXG4gICAgUHJlZGljdFNpbmdsZUZhY2VFeHByZXNzaW9uc1dpdGhGYWNlQWxpZ25tZW50VGFzay5wcm90b3R5cGUud2l0aEFnZUFuZEdlbmRlciA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gbmV3IFByZWRpY3RTaW5nbGVBZ2VBbmRHZW5kZXJXaXRoRmFjZUFsaWdubWVudFRhc2sodGhpcywgdGhpcy5pbnB1dCk7XHJcbiAgICB9O1xyXG4gICAgUHJlZGljdFNpbmdsZUZhY2VFeHByZXNzaW9uc1dpdGhGYWNlQWxpZ25tZW50VGFzay5wcm90b3R5cGUud2l0aEZhY2VEZXNjcmlwdG9yID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiBuZXcgQ29tcHV0ZVNpbmdsZUZhY2VEZXNjcmlwdG9yVGFzayh0aGlzLCB0aGlzLmlucHV0KTtcclxuICAgIH07XHJcbiAgICByZXR1cm4gUHJlZGljdFNpbmdsZUZhY2VFeHByZXNzaW9uc1dpdGhGYWNlQWxpZ25tZW50VGFzaztcclxufShQcmVkaWN0U2luZ2xlRmFjZUV4cHJlc3Npb25zVGFzaykpO1xyXG5leHBvcnQgeyBQcmVkaWN0U2luZ2xlRmFjZUV4cHJlc3Npb25zV2l0aEZhY2VBbGlnbm1lbnRUYXNrIH07XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVByZWRpY3RGYWNlRXhwcmVzc2lvbnNUYXNrLmpzLm1hcCIsImltcG9ydCB7IF9fYXdhaXRlciwgX19leHRlbmRzLCBfX2dlbmVyYXRvciB9IGZyb20gXCJ0c2xpYlwiO1xyXG5pbXBvcnQgeyBleHRlbmRXaXRoQWdlIH0gZnJvbSAnLi4vZmFjdG9yaWVzL1dpdGhBZ2UnO1xyXG5pbXBvcnQgeyBleHRlbmRXaXRoR2VuZGVyIH0gZnJvbSAnLi4vZmFjdG9yaWVzL1dpdGhHZW5kZXInO1xyXG5pbXBvcnQgeyBDb21wb3NhYmxlVGFzayB9IGZyb20gJy4vQ29tcG9zYWJsZVRhc2snO1xyXG5pbXBvcnQgeyBDb21wdXRlQWxsRmFjZURlc2NyaXB0b3JzVGFzaywgQ29tcHV0ZVNpbmdsZUZhY2VEZXNjcmlwdG9yVGFzayB9IGZyb20gJy4vQ29tcHV0ZUZhY2VEZXNjcmlwdG9yc1Rhc2tzJztcclxuaW1wb3J0IHsgZXh0cmFjdEFsbEZhY2VzQW5kQ29tcHV0ZVJlc3VsdHMsIGV4dHJhY3RTaW5nbGVGYWNlQW5kQ29tcHV0ZVJlc3VsdCB9IGZyb20gJy4vZXh0cmFjdEZhY2VzQW5kQ29tcHV0ZVJlc3VsdHMnO1xyXG5pbXBvcnQgeyBuZXRzIH0gZnJvbSAnLi9uZXRzJztcclxuaW1wb3J0IHsgUHJlZGljdEFsbEZhY2VFeHByZXNzaW9uc1Rhc2ssIFByZWRpY3RBbGxGYWNlRXhwcmVzc2lvbnNXaXRoRmFjZUFsaWdubWVudFRhc2ssIFByZWRpY3RTaW5nbGVGYWNlRXhwcmVzc2lvbnNUYXNrLCBQcmVkaWN0U2luZ2xlRmFjZUV4cHJlc3Npb25zV2l0aEZhY2VBbGlnbm1lbnRUYXNrLCB9IGZyb20gJy4vUHJlZGljdEZhY2VFeHByZXNzaW9uc1Rhc2snO1xyXG52YXIgUHJlZGljdEFnZUFuZEdlbmRlclRhc2tCYXNlID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xyXG4gICAgX19leHRlbmRzKFByZWRpY3RBZ2VBbmRHZW5kZXJUYXNrQmFzZSwgX3N1cGVyKTtcclxuICAgIGZ1bmN0aW9uIFByZWRpY3RBZ2VBbmRHZW5kZXJUYXNrQmFzZShwYXJlbnRUYXNrLCBpbnB1dCwgZXh0cmFjdGVkRmFjZXMpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzKSB8fCB0aGlzO1xyXG4gICAgICAgIF90aGlzLnBhcmVudFRhc2sgPSBwYXJlbnRUYXNrO1xyXG4gICAgICAgIF90aGlzLmlucHV0ID0gaW5wdXQ7XHJcbiAgICAgICAgX3RoaXMuZXh0cmFjdGVkRmFjZXMgPSBleHRyYWN0ZWRGYWNlcztcclxuICAgICAgICByZXR1cm4gX3RoaXM7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gUHJlZGljdEFnZUFuZEdlbmRlclRhc2tCYXNlO1xyXG59KENvbXBvc2FibGVUYXNrKSk7XHJcbmV4cG9ydCB7IFByZWRpY3RBZ2VBbmRHZW5kZXJUYXNrQmFzZSB9O1xyXG52YXIgUHJlZGljdEFsbEFnZUFuZEdlbmRlclRhc2sgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XHJcbiAgICBfX2V4dGVuZHMoUHJlZGljdEFsbEFnZUFuZEdlbmRlclRhc2ssIF9zdXBlcik7XHJcbiAgICBmdW5jdGlvbiBQcmVkaWN0QWxsQWdlQW5kR2VuZGVyVGFzaygpIHtcclxuICAgICAgICByZXR1cm4gX3N1cGVyICE9PSBudWxsICYmIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XHJcbiAgICB9XHJcbiAgICBQcmVkaWN0QWxsQWdlQW5kR2VuZGVyVGFzay5wcm90b3R5cGUucnVuID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIHBhcmVudFJlc3VsdHMsIGFnZUFuZEdlbmRlckJ5RmFjZTtcclxuICAgICAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xyXG4gICAgICAgICAgICAgICAgc3dpdGNoIChfYS5sYWJlbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDogcmV0dXJuIFs0IC8qeWllbGQqLywgdGhpcy5wYXJlbnRUYXNrXTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhcmVudFJlc3VsdHMgPSBfYS5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIGV4dHJhY3RBbGxGYWNlc0FuZENvbXB1dGVSZXN1bHRzKHBhcmVudFJlc3VsdHMsIHRoaXMuaW5wdXQsIGZ1bmN0aW9uIChmYWNlcykgeyByZXR1cm4gX19hd2FpdGVyKF90aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChfYS5sYWJlbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAwOiByZXR1cm4gWzQgLyp5aWVsZCovLCBQcm9taXNlLmFsbChmYWNlcy5tYXAoZnVuY3Rpb24gKGZhY2UpIHsgcmV0dXJuIG5ldHMuYWdlR2VuZGVyTmV0LnByZWRpY3RBZ2VBbmRHZW5kZXIoZmFjZSk7IH0pKV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDE6IHJldHVybiBbMiAvKnJldHVybiovLCBfYS5zZW50KCldO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTsgfSwgdGhpcy5leHRyYWN0ZWRGYWNlcyldO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgYWdlQW5kR2VuZGVyQnlGYWNlID0gX2Euc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgcGFyZW50UmVzdWx0cy5tYXAoZnVuY3Rpb24gKHBhcmVudFJlc3VsdCwgaSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBfYSA9IGFnZUFuZEdlbmRlckJ5RmFjZVtpXSwgYWdlID0gX2EuYWdlLCBnZW5kZXIgPSBfYS5nZW5kZXIsIGdlbmRlclByb2JhYmlsaXR5ID0gX2EuZ2VuZGVyUHJvYmFiaWxpdHk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGV4dGVuZFdpdGhBZ2UoZXh0ZW5kV2l0aEdlbmRlcihwYXJlbnRSZXN1bHQsIGdlbmRlciwgZ2VuZGVyUHJvYmFiaWxpdHkpLCBhZ2UpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSldO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBQcmVkaWN0QWxsQWdlQW5kR2VuZGVyVGFzay5wcm90b3R5cGUud2l0aEZhY2VFeHByZXNzaW9ucyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gbmV3IFByZWRpY3RBbGxGYWNlRXhwcmVzc2lvbnNUYXNrKHRoaXMsIHRoaXMuaW5wdXQpO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBQcmVkaWN0QWxsQWdlQW5kR2VuZGVyVGFzaztcclxufShQcmVkaWN0QWdlQW5kR2VuZGVyVGFza0Jhc2UpKTtcclxuZXhwb3J0IHsgUHJlZGljdEFsbEFnZUFuZEdlbmRlclRhc2sgfTtcclxudmFyIFByZWRpY3RTaW5nbGVBZ2VBbmRHZW5kZXJUYXNrID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xyXG4gICAgX19leHRlbmRzKFByZWRpY3RTaW5nbGVBZ2VBbmRHZW5kZXJUYXNrLCBfc3VwZXIpO1xyXG4gICAgZnVuY3Rpb24gUHJlZGljdFNpbmdsZUFnZUFuZEdlbmRlclRhc2soKSB7XHJcbiAgICAgICAgcmV0dXJuIF9zdXBlciAhPT0gbnVsbCAmJiBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xyXG4gICAgfVxyXG4gICAgUHJlZGljdFNpbmdsZUFnZUFuZEdlbmRlclRhc2sucHJvdG90eXBlLnJ1biA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciBwYXJlbnRSZXN1bHQsIF9hLCBhZ2UsIGdlbmRlciwgZ2VuZGVyUHJvYmFiaWxpdHk7XHJcbiAgICAgICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2IpIHtcclxuICAgICAgICAgICAgICAgIHN3aXRjaCAoX2IubGFiZWwpIHtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6IHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMucGFyZW50VGFza107XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBwYXJlbnRSZXN1bHQgPSBfYi5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghcGFyZW50UmVzdWx0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qL107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgZXh0cmFjdFNpbmdsZUZhY2VBbmRDb21wdXRlUmVzdWx0KHBhcmVudFJlc3VsdCwgdGhpcy5pbnB1dCwgZnVuY3Rpb24gKGZhY2UpIHsgcmV0dXJuIG5ldHMuYWdlR2VuZGVyTmV0LnByZWRpY3RBZ2VBbmRHZW5kZXIoZmFjZSk7IH0sIHRoaXMuZXh0cmFjdGVkRmFjZXMpXTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDI6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hID0gX2Iuc2VudCgpLCBhZ2UgPSBfYS5hZ2UsIGdlbmRlciA9IF9hLmdlbmRlciwgZ2VuZGVyUHJvYmFiaWxpdHkgPSBfYS5nZW5kZXJQcm9iYWJpbGl0eTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIGV4dGVuZFdpdGhBZ2UoZXh0ZW5kV2l0aEdlbmRlcihwYXJlbnRSZXN1bHQsIGdlbmRlciwgZ2VuZGVyUHJvYmFiaWxpdHkpLCBhZ2UpXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgUHJlZGljdFNpbmdsZUFnZUFuZEdlbmRlclRhc2sucHJvdG90eXBlLndpdGhGYWNlRXhwcmVzc2lvbnMgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBQcmVkaWN0U2luZ2xlRmFjZUV4cHJlc3Npb25zVGFzayh0aGlzLCB0aGlzLmlucHV0KTtcclxuICAgIH07XHJcbiAgICByZXR1cm4gUHJlZGljdFNpbmdsZUFnZUFuZEdlbmRlclRhc2s7XHJcbn0oUHJlZGljdEFnZUFuZEdlbmRlclRhc2tCYXNlKSk7XHJcbmV4cG9ydCB7IFByZWRpY3RTaW5nbGVBZ2VBbmRHZW5kZXJUYXNrIH07XHJcbnZhciBQcmVkaWN0QWxsQWdlQW5kR2VuZGVyV2l0aEZhY2VBbGlnbm1lbnRUYXNrID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xyXG4gICAgX19leHRlbmRzKFByZWRpY3RBbGxBZ2VBbmRHZW5kZXJXaXRoRmFjZUFsaWdubWVudFRhc2ssIF9zdXBlcik7XHJcbiAgICBmdW5jdGlvbiBQcmVkaWN0QWxsQWdlQW5kR2VuZGVyV2l0aEZhY2VBbGlnbm1lbnRUYXNrKCkge1xyXG4gICAgICAgIHJldHVybiBfc3VwZXIgIT09IG51bGwgJiYgX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcclxuICAgIH1cclxuICAgIFByZWRpY3RBbGxBZ2VBbmRHZW5kZXJXaXRoRmFjZUFsaWdubWVudFRhc2sucHJvdG90eXBlLndpdGhGYWNlRXhwcmVzc2lvbnMgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBQcmVkaWN0QWxsRmFjZUV4cHJlc3Npb25zV2l0aEZhY2VBbGlnbm1lbnRUYXNrKHRoaXMsIHRoaXMuaW5wdXQpO1xyXG4gICAgfTtcclxuICAgIFByZWRpY3RBbGxBZ2VBbmRHZW5kZXJXaXRoRmFjZUFsaWdubWVudFRhc2sucHJvdG90eXBlLndpdGhGYWNlRGVzY3JpcHRvcnMgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBDb21wdXRlQWxsRmFjZURlc2NyaXB0b3JzVGFzayh0aGlzLCB0aGlzLmlucHV0KTtcclxuICAgIH07XHJcbiAgICByZXR1cm4gUHJlZGljdEFsbEFnZUFuZEdlbmRlcldpdGhGYWNlQWxpZ25tZW50VGFzaztcclxufShQcmVkaWN0QWxsQWdlQW5kR2VuZGVyVGFzaykpO1xyXG5leHBvcnQgeyBQcmVkaWN0QWxsQWdlQW5kR2VuZGVyV2l0aEZhY2VBbGlnbm1lbnRUYXNrIH07XHJcbnZhciBQcmVkaWN0U2luZ2xlQWdlQW5kR2VuZGVyV2l0aEZhY2VBbGlnbm1lbnRUYXNrID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xyXG4gICAgX19leHRlbmRzKFByZWRpY3RTaW5nbGVBZ2VBbmRHZW5kZXJXaXRoRmFjZUFsaWdubWVudFRhc2ssIF9zdXBlcik7XHJcbiAgICBmdW5jdGlvbiBQcmVkaWN0U2luZ2xlQWdlQW5kR2VuZGVyV2l0aEZhY2VBbGlnbm1lbnRUYXNrKCkge1xyXG4gICAgICAgIHJldHVybiBfc3VwZXIgIT09IG51bGwgJiYgX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcclxuICAgIH1cclxuICAgIFByZWRpY3RTaW5nbGVBZ2VBbmRHZW5kZXJXaXRoRmFjZUFsaWdubWVudFRhc2sucHJvdG90eXBlLndpdGhGYWNlRXhwcmVzc2lvbnMgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBQcmVkaWN0U2luZ2xlRmFjZUV4cHJlc3Npb25zV2l0aEZhY2VBbGlnbm1lbnRUYXNrKHRoaXMsIHRoaXMuaW5wdXQpO1xyXG4gICAgfTtcclxuICAgIFByZWRpY3RTaW5nbGVBZ2VBbmRHZW5kZXJXaXRoRmFjZUFsaWdubWVudFRhc2sucHJvdG90eXBlLndpdGhGYWNlRGVzY3JpcHRvciA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gbmV3IENvbXB1dGVTaW5nbGVGYWNlRGVzY3JpcHRvclRhc2sodGhpcywgdGhpcy5pbnB1dCk7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIFByZWRpY3RTaW5nbGVBZ2VBbmRHZW5kZXJXaXRoRmFjZUFsaWdubWVudFRhc2s7XHJcbn0oUHJlZGljdFNpbmdsZUFnZUFuZEdlbmRlclRhc2spKTtcclxuZXhwb3J0IHsgUHJlZGljdFNpbmdsZUFnZUFuZEdlbmRlcldpdGhGYWNlQWxpZ25tZW50VGFzayB9O1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1QcmVkaWN0QWdlQW5kR2VuZGVyVGFzay5qcy5tYXAiLCJpbXBvcnQgeyBfX2F3YWl0ZXIsIF9fZXh0ZW5kcywgX19nZW5lcmF0b3IgfSBmcm9tIFwidHNsaWJcIjtcclxuaW1wb3J0IHsgZXh0ZW5kV2l0aEZhY2VEZXNjcmlwdG9yIH0gZnJvbSAnLi4vZmFjdG9yaWVzL1dpdGhGYWNlRGVzY3JpcHRvcic7XHJcbmltcG9ydCB7IENvbXBvc2FibGVUYXNrIH0gZnJvbSAnLi9Db21wb3NhYmxlVGFzayc7XHJcbmltcG9ydCB7IGV4dHJhY3RBbGxGYWNlc0FuZENvbXB1dGVSZXN1bHRzLCBleHRyYWN0U2luZ2xlRmFjZUFuZENvbXB1dGVSZXN1bHQgfSBmcm9tICcuL2V4dHJhY3RGYWNlc0FuZENvbXB1dGVSZXN1bHRzJztcclxuaW1wb3J0IHsgbmV0cyB9IGZyb20gJy4vbmV0cyc7XHJcbmltcG9ydCB7IFByZWRpY3RBbGxBZ2VBbmRHZW5kZXJXaXRoRmFjZUFsaWdubWVudFRhc2ssIFByZWRpY3RTaW5nbGVBZ2VBbmRHZW5kZXJXaXRoRmFjZUFsaWdubWVudFRhc2ssIH0gZnJvbSAnLi9QcmVkaWN0QWdlQW5kR2VuZGVyVGFzayc7XHJcbmltcG9ydCB7IFByZWRpY3RBbGxGYWNlRXhwcmVzc2lvbnNXaXRoRmFjZUFsaWdubWVudFRhc2ssIFByZWRpY3RTaW5nbGVGYWNlRXhwcmVzc2lvbnNXaXRoRmFjZUFsaWdubWVudFRhc2ssIH0gZnJvbSAnLi9QcmVkaWN0RmFjZUV4cHJlc3Npb25zVGFzayc7XHJcbnZhciBDb21wdXRlRmFjZURlc2NyaXB0b3JzVGFza0Jhc2UgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XHJcbiAgICBfX2V4dGVuZHMoQ29tcHV0ZUZhY2VEZXNjcmlwdG9yc1Rhc2tCYXNlLCBfc3VwZXIpO1xyXG4gICAgZnVuY3Rpb24gQ29tcHV0ZUZhY2VEZXNjcmlwdG9yc1Rhc2tCYXNlKHBhcmVudFRhc2ssIGlucHV0KSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcykgfHwgdGhpcztcclxuICAgICAgICBfdGhpcy5wYXJlbnRUYXNrID0gcGFyZW50VGFzaztcclxuICAgICAgICBfdGhpcy5pbnB1dCA9IGlucHV0O1xyXG4gICAgICAgIHJldHVybiBfdGhpcztcclxuICAgIH1cclxuICAgIHJldHVybiBDb21wdXRlRmFjZURlc2NyaXB0b3JzVGFza0Jhc2U7XHJcbn0oQ29tcG9zYWJsZVRhc2spKTtcclxuZXhwb3J0IHsgQ29tcHV0ZUZhY2VEZXNjcmlwdG9yc1Rhc2tCYXNlIH07XHJcbnZhciBDb21wdXRlQWxsRmFjZURlc2NyaXB0b3JzVGFzayA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcclxuICAgIF9fZXh0ZW5kcyhDb21wdXRlQWxsRmFjZURlc2NyaXB0b3JzVGFzaywgX3N1cGVyKTtcclxuICAgIGZ1bmN0aW9uIENvbXB1dGVBbGxGYWNlRGVzY3JpcHRvcnNUYXNrKCkge1xyXG4gICAgICAgIHJldHVybiBfc3VwZXIgIT09IG51bGwgJiYgX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcclxuICAgIH1cclxuICAgIENvbXB1dGVBbGxGYWNlRGVzY3JpcHRvcnNUYXNrLnByb3RvdHlwZS5ydW4gPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgcGFyZW50UmVzdWx0cywgZGVzY3JpcHRvcnM7XHJcbiAgICAgICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcclxuICAgICAgICAgICAgICAgIHN3aXRjaCAoX2EubGFiZWwpIHtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6IHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMucGFyZW50VGFza107XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBwYXJlbnRSZXN1bHRzID0gX2Euc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCBleHRyYWN0QWxsRmFjZXNBbmRDb21wdXRlUmVzdWx0cyhwYXJlbnRSZXN1bHRzLCB0aGlzLmlucHV0LCBmdW5jdGlvbiAoZmFjZXMpIHsgcmV0dXJuIFByb21pc2UuYWxsKGZhY2VzLm1hcChmdW5jdGlvbiAoZmFjZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXRzLmZhY2VSZWNvZ25pdGlvbk5ldC5jb21wdXRlRmFjZURlc2NyaXB0b3IoZmFjZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSk7IH0sIG51bGwsIGZ1bmN0aW9uIChwYXJlbnRSZXN1bHQpIHsgcmV0dXJuIHBhcmVudFJlc3VsdC5sYW5kbWFya3MuYWxpZ24obnVsbCwgeyB1c2VEbGliQWxpZ25tZW50OiB0cnVlIH0pOyB9KV07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAyOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdG9ycyA9IF9hLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIGRlc2NyaXB0b3JzLm1hcChmdW5jdGlvbiAoZGVzY3JpcHRvciwgaSkgeyByZXR1cm4gZXh0ZW5kV2l0aEZhY2VEZXNjcmlwdG9yKHBhcmVudFJlc3VsdHNbaV0sIGRlc2NyaXB0b3IpOyB9KV07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIENvbXB1dGVBbGxGYWNlRGVzY3JpcHRvcnNUYXNrLnByb3RvdHlwZS53aXRoRmFjZUV4cHJlc3Npb25zID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiBuZXcgUHJlZGljdEFsbEZhY2VFeHByZXNzaW9uc1dpdGhGYWNlQWxpZ25tZW50VGFzayh0aGlzLCB0aGlzLmlucHV0KTtcclxuICAgIH07XHJcbiAgICBDb21wdXRlQWxsRmFjZURlc2NyaXB0b3JzVGFzay5wcm90b3R5cGUud2l0aEFnZUFuZEdlbmRlciA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gbmV3IFByZWRpY3RBbGxBZ2VBbmRHZW5kZXJXaXRoRmFjZUFsaWdubWVudFRhc2sodGhpcywgdGhpcy5pbnB1dCk7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIENvbXB1dGVBbGxGYWNlRGVzY3JpcHRvcnNUYXNrO1xyXG59KENvbXB1dGVGYWNlRGVzY3JpcHRvcnNUYXNrQmFzZSkpO1xyXG5leHBvcnQgeyBDb21wdXRlQWxsRmFjZURlc2NyaXB0b3JzVGFzayB9O1xyXG52YXIgQ29tcHV0ZVNpbmdsZUZhY2VEZXNjcmlwdG9yVGFzayA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcclxuICAgIF9fZXh0ZW5kcyhDb21wdXRlU2luZ2xlRmFjZURlc2NyaXB0b3JUYXNrLCBfc3VwZXIpO1xyXG4gICAgZnVuY3Rpb24gQ29tcHV0ZVNpbmdsZUZhY2VEZXNjcmlwdG9yVGFzaygpIHtcclxuICAgICAgICByZXR1cm4gX3N1cGVyICE9PSBudWxsICYmIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XHJcbiAgICB9XHJcbiAgICBDb21wdXRlU2luZ2xlRmFjZURlc2NyaXB0b3JUYXNrLnByb3RvdHlwZS5ydW4gPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgcGFyZW50UmVzdWx0LCBkZXNjcmlwdG9yO1xyXG4gICAgICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XHJcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKF9hLmxhYmVsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOiByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzLnBhcmVudFRhc2tdO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcclxuICAgICAgICAgICAgICAgICAgICAgICAgcGFyZW50UmVzdWx0ID0gX2Euc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXBhcmVudFJlc3VsdCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi9dO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIGV4dHJhY3RTaW5nbGVGYWNlQW5kQ29tcHV0ZVJlc3VsdChwYXJlbnRSZXN1bHQsIHRoaXMuaW5wdXQsIGZ1bmN0aW9uIChmYWNlKSB7IHJldHVybiBuZXRzLmZhY2VSZWNvZ25pdGlvbk5ldC5jb21wdXRlRmFjZURlc2NyaXB0b3IoZmFjZSk7IH0sIG51bGwsIGZ1bmN0aW9uIChwYXJlbnRSZXN1bHQpIHsgcmV0dXJuIHBhcmVudFJlc3VsdC5sYW5kbWFya3MuYWxpZ24obnVsbCwgeyB1c2VEbGliQWxpZ25tZW50OiB0cnVlIH0pOyB9KV07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAyOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdG9yID0gX2Euc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgZXh0ZW5kV2l0aEZhY2VEZXNjcmlwdG9yKHBhcmVudFJlc3VsdCwgZGVzY3JpcHRvcildO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBDb21wdXRlU2luZ2xlRmFjZURlc2NyaXB0b3JUYXNrLnByb3RvdHlwZS53aXRoRmFjZUV4cHJlc3Npb25zID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiBuZXcgUHJlZGljdFNpbmdsZUZhY2VFeHByZXNzaW9uc1dpdGhGYWNlQWxpZ25tZW50VGFzayh0aGlzLCB0aGlzLmlucHV0KTtcclxuICAgIH07XHJcbiAgICBDb21wdXRlU2luZ2xlRmFjZURlc2NyaXB0b3JUYXNrLnByb3RvdHlwZS53aXRoQWdlQW5kR2VuZGVyID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiBuZXcgUHJlZGljdFNpbmdsZUFnZUFuZEdlbmRlcldpdGhGYWNlQWxpZ25tZW50VGFzayh0aGlzLCB0aGlzLmlucHV0KTtcclxuICAgIH07XHJcbiAgICByZXR1cm4gQ29tcHV0ZVNpbmdsZUZhY2VEZXNjcmlwdG9yVGFzaztcclxufShDb21wdXRlRmFjZURlc2NyaXB0b3JzVGFza0Jhc2UpKTtcclxuZXhwb3J0IHsgQ29tcHV0ZVNpbmdsZUZhY2VEZXNjcmlwdG9yVGFzayB9O1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1Db21wdXRlRmFjZURlc2NyaXB0b3JzVGFza3MuanMubWFwIiwiaW1wb3J0IHsgX19hd2FpdGVyLCBfX2V4dGVuZHMsIF9fZ2VuZXJhdG9yIH0gZnJvbSBcInRzbGliXCI7XHJcbmltcG9ydCAqIGFzIHRmIGZyb20gJ0B0ZW5zb3JmbG93L3RmanMtY29yZSc7XHJcbmltcG9ydCB7IGV4dHJhY3RGYWNlcywgZXh0cmFjdEZhY2VUZW5zb3JzIH0gZnJvbSAnLi4vZG9tJztcclxuaW1wb3J0IHsgZXh0ZW5kV2l0aEZhY2VMYW5kbWFya3MgfSBmcm9tICcuLi9mYWN0b3JpZXMvV2l0aEZhY2VMYW5kbWFya3MnO1xyXG5pbXBvcnQgeyBDb21wb3NhYmxlVGFzayB9IGZyb20gJy4vQ29tcG9zYWJsZVRhc2snO1xyXG5pbXBvcnQgeyBDb21wdXRlQWxsRmFjZURlc2NyaXB0b3JzVGFzaywgQ29tcHV0ZVNpbmdsZUZhY2VEZXNjcmlwdG9yVGFzayB9IGZyb20gJy4vQ29tcHV0ZUZhY2VEZXNjcmlwdG9yc1Rhc2tzJztcclxuaW1wb3J0IHsgbmV0cyB9IGZyb20gJy4vbmV0cyc7XHJcbmltcG9ydCB7IFByZWRpY3RBbGxBZ2VBbmRHZW5kZXJXaXRoRmFjZUFsaWdubWVudFRhc2ssIFByZWRpY3RTaW5nbGVBZ2VBbmRHZW5kZXJXaXRoRmFjZUFsaWdubWVudFRhc2ssIH0gZnJvbSAnLi9QcmVkaWN0QWdlQW5kR2VuZGVyVGFzayc7XHJcbmltcG9ydCB7IFByZWRpY3RBbGxGYWNlRXhwcmVzc2lvbnNXaXRoRmFjZUFsaWdubWVudFRhc2ssIFByZWRpY3RTaW5nbGVGYWNlRXhwcmVzc2lvbnNXaXRoRmFjZUFsaWdubWVudFRhc2ssIH0gZnJvbSAnLi9QcmVkaWN0RmFjZUV4cHJlc3Npb25zVGFzayc7XHJcbnZhciBEZXRlY3RGYWNlTGFuZG1hcmtzVGFza0Jhc2UgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XHJcbiAgICBfX2V4dGVuZHMoRGV0ZWN0RmFjZUxhbmRtYXJrc1Rhc2tCYXNlLCBfc3VwZXIpO1xyXG4gICAgZnVuY3Rpb24gRGV0ZWN0RmFjZUxhbmRtYXJrc1Rhc2tCYXNlKHBhcmVudFRhc2ssIGlucHV0LCB1c2VUaW55TGFuZG1hcmtOZXQpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzKSB8fCB0aGlzO1xyXG4gICAgICAgIF90aGlzLnBhcmVudFRhc2sgPSBwYXJlbnRUYXNrO1xyXG4gICAgICAgIF90aGlzLmlucHV0ID0gaW5wdXQ7XHJcbiAgICAgICAgX3RoaXMudXNlVGlueUxhbmRtYXJrTmV0ID0gdXNlVGlueUxhbmRtYXJrTmV0O1xyXG4gICAgICAgIHJldHVybiBfdGhpcztcclxuICAgIH1cclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShEZXRlY3RGYWNlTGFuZG1hcmtzVGFza0Jhc2UucHJvdG90eXBlLCBcImxhbmRtYXJrTmV0XCIsIHtcclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMudXNlVGlueUxhbmRtYXJrTmV0XHJcbiAgICAgICAgICAgICAgICA/IG5ldHMuZmFjZUxhbmRtYXJrNjhUaW55TmV0XHJcbiAgICAgICAgICAgICAgICA6IG5ldHMuZmFjZUxhbmRtYXJrNjhOZXQ7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICByZXR1cm4gRGV0ZWN0RmFjZUxhbmRtYXJrc1Rhc2tCYXNlO1xyXG59KENvbXBvc2FibGVUYXNrKSk7XHJcbmV4cG9ydCB7IERldGVjdEZhY2VMYW5kbWFya3NUYXNrQmFzZSB9O1xyXG52YXIgRGV0ZWN0QWxsRmFjZUxhbmRtYXJrc1Rhc2sgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XHJcbiAgICBfX2V4dGVuZHMoRGV0ZWN0QWxsRmFjZUxhbmRtYXJrc1Rhc2ssIF9zdXBlcik7XHJcbiAgICBmdW5jdGlvbiBEZXRlY3RBbGxGYWNlTGFuZG1hcmtzVGFzaygpIHtcclxuICAgICAgICByZXR1cm4gX3N1cGVyICE9PSBudWxsICYmIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XHJcbiAgICB9XHJcbiAgICBEZXRlY3RBbGxGYWNlTGFuZG1hcmtzVGFzay5wcm90b3R5cGUucnVuID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIHBhcmVudFJlc3VsdHMsIGRldGVjdGlvbnMsIGZhY2VzLCBfYSwgZmFjZUxhbmRtYXJrc0J5RmFjZTtcclxuICAgICAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYikge1xyXG4gICAgICAgICAgICAgICAgc3dpdGNoIChfYi5sYWJlbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDogcmV0dXJuIFs0IC8qeWllbGQqLywgdGhpcy5wYXJlbnRUYXNrXTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhcmVudFJlc3VsdHMgPSBfYi5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRldGVjdGlvbnMgPSBwYXJlbnRSZXN1bHRzLm1hcChmdW5jdGlvbiAocmVzKSB7IHJldHVybiByZXMuZGV0ZWN0aW9uOyB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEodGhpcy5pbnB1dCBpbnN0YW5jZW9mIHRmLlRlbnNvcikpIHJldHVybiBbMyAvKmJyZWFrKi8sIDNdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCBleHRyYWN0RmFjZVRlbnNvcnModGhpcy5pbnB1dCwgZGV0ZWN0aW9ucyldO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2EgPSBfYi5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMyAvKmJyZWFrKi8sIDVdO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMzogcmV0dXJuIFs0IC8qeWllbGQqLywgZXh0cmFjdEZhY2VzKHRoaXMuaW5wdXQsIGRldGVjdGlvbnMpXTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDQ6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hID0gX2Iuc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYi5sYWJlbCA9IDU7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA1OlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmYWNlcyA9IF9hO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCBQcm9taXNlLmFsbChmYWNlcy5tYXAoZnVuY3Rpb24gKGZhY2UpIHsgcmV0dXJuIF90aGlzLmxhbmRtYXJrTmV0LmRldGVjdExhbmRtYXJrcyhmYWNlKTsgfSkpXTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDY6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZhY2VMYW5kbWFya3NCeUZhY2UgPSBfYi5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZhY2VzLmZvckVhY2goZnVuY3Rpb24gKGYpIHsgcmV0dXJuIGYgaW5zdGFuY2VvZiB0Zi5UZW5zb3IgJiYgZi5kaXNwb3NlKCk7IH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgcGFyZW50UmVzdWx0cy5tYXAoZnVuY3Rpb24gKHBhcmVudFJlc3VsdCwgaSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBleHRlbmRXaXRoRmFjZUxhbmRtYXJrcyhwYXJlbnRSZXN1bHQsIGZhY2VMYW5kbWFya3NCeUZhY2VbaV0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSldO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBEZXRlY3RBbGxGYWNlTGFuZG1hcmtzVGFzay5wcm90b3R5cGUud2l0aEZhY2VFeHByZXNzaW9ucyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gbmV3IFByZWRpY3RBbGxGYWNlRXhwcmVzc2lvbnNXaXRoRmFjZUFsaWdubWVudFRhc2sodGhpcywgdGhpcy5pbnB1dCk7XHJcbiAgICB9O1xyXG4gICAgRGV0ZWN0QWxsRmFjZUxhbmRtYXJrc1Rhc2sucHJvdG90eXBlLndpdGhBZ2VBbmRHZW5kZXIgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBQcmVkaWN0QWxsQWdlQW5kR2VuZGVyV2l0aEZhY2VBbGlnbm1lbnRUYXNrKHRoaXMsIHRoaXMuaW5wdXQpO1xyXG4gICAgfTtcclxuICAgIERldGVjdEFsbEZhY2VMYW5kbWFya3NUYXNrLnByb3RvdHlwZS53aXRoRmFjZURlc2NyaXB0b3JzID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiBuZXcgQ29tcHV0ZUFsbEZhY2VEZXNjcmlwdG9yc1Rhc2sodGhpcywgdGhpcy5pbnB1dCk7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIERldGVjdEFsbEZhY2VMYW5kbWFya3NUYXNrO1xyXG59KERldGVjdEZhY2VMYW5kbWFya3NUYXNrQmFzZSkpO1xyXG5leHBvcnQgeyBEZXRlY3RBbGxGYWNlTGFuZG1hcmtzVGFzayB9O1xyXG52YXIgRGV0ZWN0U2luZ2xlRmFjZUxhbmRtYXJrc1Rhc2sgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XHJcbiAgICBfX2V4dGVuZHMoRGV0ZWN0U2luZ2xlRmFjZUxhbmRtYXJrc1Rhc2ssIF9zdXBlcik7XHJcbiAgICBmdW5jdGlvbiBEZXRlY3RTaW5nbGVGYWNlTGFuZG1hcmtzVGFzaygpIHtcclxuICAgICAgICByZXR1cm4gX3N1cGVyICE9PSBudWxsICYmIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XHJcbiAgICB9XHJcbiAgICBEZXRlY3RTaW5nbGVGYWNlTGFuZG1hcmtzVGFzay5wcm90b3R5cGUucnVuID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIHBhcmVudFJlc3VsdCwgZGV0ZWN0aW9uLCBmYWNlcywgX2EsIGxhbmRtYXJrcztcclxuICAgICAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYikge1xyXG4gICAgICAgICAgICAgICAgc3dpdGNoIChfYi5sYWJlbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDogcmV0dXJuIFs0IC8qeWllbGQqLywgdGhpcy5wYXJlbnRUYXNrXTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhcmVudFJlc3VsdCA9IF9iLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFwYXJlbnRSZXN1bHQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBkZXRlY3Rpb24gPSBwYXJlbnRSZXN1bHQuZGV0ZWN0aW9uO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoISh0aGlzLmlucHV0IGluc3RhbmNlb2YgdGYuVGVuc29yKSkgcmV0dXJuIFszIC8qYnJlYWsqLywgM107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIGV4dHJhY3RGYWNlVGVuc29ycyh0aGlzLmlucHV0LCBbZGV0ZWN0aW9uXSldO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2EgPSBfYi5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMyAvKmJyZWFrKi8sIDVdO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMzogcmV0dXJuIFs0IC8qeWllbGQqLywgZXh0cmFjdEZhY2VzKHRoaXMuaW5wdXQsIFtkZXRlY3Rpb25dKV07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA0OlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYSA9IF9iLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2IubGFiZWwgPSA1O1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNTpcclxuICAgICAgICAgICAgICAgICAgICAgICAgZmFjZXMgPSBfYTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgdGhpcy5sYW5kbWFya05ldC5kZXRlY3RMYW5kbWFya3MoZmFjZXNbMF0pXTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDY6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxhbmRtYXJrcyA9IF9iLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZmFjZXMuZm9yRWFjaChmdW5jdGlvbiAoZikgeyByZXR1cm4gZiBpbnN0YW5jZW9mIHRmLlRlbnNvciAmJiBmLmRpc3Bvc2UoKTsgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCBleHRlbmRXaXRoRmFjZUxhbmRtYXJrcyhwYXJlbnRSZXN1bHQsIGxhbmRtYXJrcyldO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBEZXRlY3RTaW5nbGVGYWNlTGFuZG1hcmtzVGFzay5wcm90b3R5cGUud2l0aEZhY2VFeHByZXNzaW9ucyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gbmV3IFByZWRpY3RTaW5nbGVGYWNlRXhwcmVzc2lvbnNXaXRoRmFjZUFsaWdubWVudFRhc2sodGhpcywgdGhpcy5pbnB1dCk7XHJcbiAgICB9O1xyXG4gICAgRGV0ZWN0U2luZ2xlRmFjZUxhbmRtYXJrc1Rhc2sucHJvdG90eXBlLndpdGhBZ2VBbmRHZW5kZXIgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBQcmVkaWN0U2luZ2xlQWdlQW5kR2VuZGVyV2l0aEZhY2VBbGlnbm1lbnRUYXNrKHRoaXMsIHRoaXMuaW5wdXQpO1xyXG4gICAgfTtcclxuICAgIERldGVjdFNpbmdsZUZhY2VMYW5kbWFya3NUYXNrLnByb3RvdHlwZS53aXRoRmFjZURlc2NyaXB0b3IgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBDb21wdXRlU2luZ2xlRmFjZURlc2NyaXB0b3JUYXNrKHRoaXMsIHRoaXMuaW5wdXQpO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBEZXRlY3RTaW5nbGVGYWNlTGFuZG1hcmtzVGFzaztcclxufShEZXRlY3RGYWNlTGFuZG1hcmtzVGFza0Jhc2UpKTtcclxuZXhwb3J0IHsgRGV0ZWN0U2luZ2xlRmFjZUxhbmRtYXJrc1Rhc2sgfTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9RGV0ZWN0RmFjZUxhbmRtYXJrc1Rhc2tzLmpzLm1hcCIsImltcG9ydCB7IF9fYXdhaXRlciwgX19leHRlbmRzLCBfX2dlbmVyYXRvciB9IGZyb20gXCJ0c2xpYlwiO1xyXG5pbXBvcnQgeyBleHRlbmRXaXRoRmFjZURldGVjdGlvbiB9IGZyb20gJy4uL2ZhY3Rvcmllcy9XaXRoRmFjZURldGVjdGlvbic7XHJcbmltcG9ydCB7IE10Y25uT3B0aW9ucyB9IGZyb20gJy4uL210Y25uL010Y25uT3B0aW9ucyc7XHJcbmltcG9ydCB7IFNzZE1vYmlsZW5ldHYxT3B0aW9ucyB9IGZyb20gJy4uL3NzZE1vYmlsZW5ldHYxL1NzZE1vYmlsZW5ldHYxT3B0aW9ucyc7XHJcbmltcG9ydCB7IFRpbnlGYWNlRGV0ZWN0b3JPcHRpb25zIH0gZnJvbSAnLi4vdGlueUZhY2VEZXRlY3Rvci9UaW55RmFjZURldGVjdG9yT3B0aW9ucyc7XHJcbmltcG9ydCB7IFRpbnlZb2xvdjJPcHRpb25zIH0gZnJvbSAnLi4vdGlueVlvbG92Mic7XHJcbmltcG9ydCB7IENvbXBvc2FibGVUYXNrIH0gZnJvbSAnLi9Db21wb3NhYmxlVGFzayc7XHJcbmltcG9ydCB7IERldGVjdEFsbEZhY2VMYW5kbWFya3NUYXNrLCBEZXRlY3RTaW5nbGVGYWNlTGFuZG1hcmtzVGFzayB9IGZyb20gJy4vRGV0ZWN0RmFjZUxhbmRtYXJrc1Rhc2tzJztcclxuaW1wb3J0IHsgbmV0cyB9IGZyb20gJy4vbmV0cyc7XHJcbmltcG9ydCB7IFByZWRpY3RBbGxBZ2VBbmRHZW5kZXJUYXNrLCBQcmVkaWN0U2luZ2xlQWdlQW5kR2VuZGVyVGFzayB9IGZyb20gJy4vUHJlZGljdEFnZUFuZEdlbmRlclRhc2snO1xyXG5pbXBvcnQgeyBQcmVkaWN0QWxsRmFjZUV4cHJlc3Npb25zVGFzaywgUHJlZGljdFNpbmdsZUZhY2VFeHByZXNzaW9uc1Rhc2sgfSBmcm9tICcuL1ByZWRpY3RGYWNlRXhwcmVzc2lvbnNUYXNrJztcclxudmFyIERldGVjdEZhY2VzVGFza0Jhc2UgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XHJcbiAgICBfX2V4dGVuZHMoRGV0ZWN0RmFjZXNUYXNrQmFzZSwgX3N1cGVyKTtcclxuICAgIGZ1bmN0aW9uIERldGVjdEZhY2VzVGFza0Jhc2UoaW5wdXQsIG9wdGlvbnMpIHtcclxuICAgICAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7IG9wdGlvbnMgPSBuZXcgU3NkTW9iaWxlbmV0djFPcHRpb25zKCk7IH1cclxuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzKSB8fCB0aGlzO1xyXG4gICAgICAgIF90aGlzLmlucHV0ID0gaW5wdXQ7XHJcbiAgICAgICAgX3RoaXMub3B0aW9ucyA9IG9wdGlvbnM7XHJcbiAgICAgICAgcmV0dXJuIF90aGlzO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIERldGVjdEZhY2VzVGFza0Jhc2U7XHJcbn0oQ29tcG9zYWJsZVRhc2spKTtcclxuZXhwb3J0IHsgRGV0ZWN0RmFjZXNUYXNrQmFzZSB9O1xyXG52YXIgRGV0ZWN0QWxsRmFjZXNUYXNrID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xyXG4gICAgX19leHRlbmRzKERldGVjdEFsbEZhY2VzVGFzaywgX3N1cGVyKTtcclxuICAgIGZ1bmN0aW9uIERldGVjdEFsbEZhY2VzVGFzaygpIHtcclxuICAgICAgICByZXR1cm4gX3N1cGVyICE9PSBudWxsICYmIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XHJcbiAgICB9XHJcbiAgICBEZXRlY3RBbGxGYWNlc1Rhc2sucHJvdG90eXBlLnJ1biA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciBfYSwgaW5wdXQsIG9wdGlvbnMsIGZhY2VEZXRlY3Rpb25GdW5jdGlvbjtcclxuICAgICAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYikge1xyXG4gICAgICAgICAgICAgICAgc3dpdGNoIChfYi5sYWJlbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2EgPSB0aGlzLCBpbnB1dCA9IF9hLmlucHV0LCBvcHRpb25zID0gX2Eub3B0aW9ucztcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEob3B0aW9ucyBpbnN0YW5jZW9mIE10Y25uT3B0aW9ucykpIHJldHVybiBbMyAvKmJyZWFrKi8sIDJdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCBuZXRzLm10Y25uLmZvcndhcmQoaW5wdXQsIG9wdGlvbnMpXTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6IHJldHVybiBbMiAvKnJldHVybiovLCAoX2Iuc2VudCgpKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLm1hcChmdW5jdGlvbiAocmVzdWx0KSB7IHJldHVybiByZXN1bHQuZGV0ZWN0aW9uOyB9KV07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAyOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmYWNlRGV0ZWN0aW9uRnVuY3Rpb24gPSBvcHRpb25zIGluc3RhbmNlb2YgVGlueUZhY2VEZXRlY3Rvck9wdGlvbnNcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gZnVuY3Rpb24gKGlucHV0KSB7IHJldHVybiBuZXRzLnRpbnlGYWNlRGV0ZWN0b3IubG9jYXRlRmFjZXMoaW5wdXQsIG9wdGlvbnMpOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IChvcHRpb25zIGluc3RhbmNlb2YgU3NkTW9iaWxlbmV0djFPcHRpb25zXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBmdW5jdGlvbiAoaW5wdXQpIHsgcmV0dXJuIG5ldHMuc3NkTW9iaWxlbmV0djEubG9jYXRlRmFjZXMoaW5wdXQsIG9wdGlvbnMpOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiAob3B0aW9ucyBpbnN0YW5jZW9mIFRpbnlZb2xvdjJPcHRpb25zXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gZnVuY3Rpb24gKGlucHV0KSB7IHJldHVybiBuZXRzLnRpbnlZb2xvdjIubG9jYXRlRmFjZXMoaW5wdXQsIG9wdGlvbnMpOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogbnVsbCkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWZhY2VEZXRlY3Rpb25GdW5jdGlvbikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdkZXRlY3RGYWNlcyAtIGV4cGVjdGVkIG9wdGlvbnMgdG8gYmUgaW5zdGFuY2Ugb2YgVGlueUZhY2VEZXRlY3Rvck9wdGlvbnMgfCBTc2RNb2JpbGVuZXR2MU9wdGlvbnMgfCBNdGNubk9wdGlvbnMgfCBUaW55WW9sb3YyT3B0aW9ucycpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCBmYWNlRGV0ZWN0aW9uRnVuY3Rpb24oaW5wdXQpXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgRGV0ZWN0QWxsRmFjZXNUYXNrLnByb3RvdHlwZS5ydW5BbmRFeHRlbmRXaXRoRmFjZURldGVjdGlvbnMgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlcykgeyByZXR1cm4gX19hd2FpdGVyKF90aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgZGV0ZWN0aW9ucztcclxuICAgICAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xyXG4gICAgICAgICAgICAgICAgc3dpdGNoIChfYS5sYWJlbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDogcmV0dXJuIFs0IC8qeWllbGQqLywgdGhpcy5ydW4oKV07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBkZXRlY3Rpb25zID0gX2Euc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgcmVzKGRldGVjdGlvbnMubWFwKGZ1bmN0aW9uIChkZXRlY3Rpb24pIHsgcmV0dXJuIGV4dGVuZFdpdGhGYWNlRGV0ZWN0aW9uKHt9LCBkZXRlY3Rpb24pOyB9KSldO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTsgfSk7XHJcbiAgICB9O1xyXG4gICAgRGV0ZWN0QWxsRmFjZXNUYXNrLnByb3RvdHlwZS53aXRoRmFjZUxhbmRtYXJrcyA9IGZ1bmN0aW9uICh1c2VUaW55TGFuZG1hcmtOZXQpIHtcclxuICAgICAgICBpZiAodXNlVGlueUxhbmRtYXJrTmV0ID09PSB2b2lkIDApIHsgdXNlVGlueUxhbmRtYXJrTmV0ID0gZmFsc2U7IH1cclxuICAgICAgICByZXR1cm4gbmV3IERldGVjdEFsbEZhY2VMYW5kbWFya3NUYXNrKHRoaXMucnVuQW5kRXh0ZW5kV2l0aEZhY2VEZXRlY3Rpb25zKCksIHRoaXMuaW5wdXQsIHVzZVRpbnlMYW5kbWFya05ldCk7XHJcbiAgICB9O1xyXG4gICAgRGV0ZWN0QWxsRmFjZXNUYXNrLnByb3RvdHlwZS53aXRoRmFjZUV4cHJlc3Npb25zID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiBuZXcgUHJlZGljdEFsbEZhY2VFeHByZXNzaW9uc1Rhc2sodGhpcy5ydW5BbmRFeHRlbmRXaXRoRmFjZURldGVjdGlvbnMoKSwgdGhpcy5pbnB1dCk7XHJcbiAgICB9O1xyXG4gICAgRGV0ZWN0QWxsRmFjZXNUYXNrLnByb3RvdHlwZS53aXRoQWdlQW5kR2VuZGVyID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiBuZXcgUHJlZGljdEFsbEFnZUFuZEdlbmRlclRhc2sodGhpcy5ydW5BbmRFeHRlbmRXaXRoRmFjZURldGVjdGlvbnMoKSwgdGhpcy5pbnB1dCk7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIERldGVjdEFsbEZhY2VzVGFzaztcclxufShEZXRlY3RGYWNlc1Rhc2tCYXNlKSk7XHJcbmV4cG9ydCB7IERldGVjdEFsbEZhY2VzVGFzayB9O1xyXG52YXIgRGV0ZWN0U2luZ2xlRmFjZVRhc2sgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XHJcbiAgICBfX2V4dGVuZHMoRGV0ZWN0U2luZ2xlRmFjZVRhc2ssIF9zdXBlcik7XHJcbiAgICBmdW5jdGlvbiBEZXRlY3RTaW5nbGVGYWNlVGFzaygpIHtcclxuICAgICAgICByZXR1cm4gX3N1cGVyICE9PSBudWxsICYmIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XHJcbiAgICB9XHJcbiAgICBEZXRlY3RTaW5nbGVGYWNlVGFzay5wcm90b3R5cGUucnVuID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIGZhY2VEZXRlY3Rpb25zLCBmYWNlRGV0ZWN0aW9uV2l0aEhpZ2hlc3RTY29yZTtcclxuICAgICAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xyXG4gICAgICAgICAgICAgICAgc3dpdGNoIChfYS5sYWJlbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDogcmV0dXJuIFs0IC8qeWllbGQqLywgbmV3IERldGVjdEFsbEZhY2VzVGFzayh0aGlzLmlucHV0LCB0aGlzLm9wdGlvbnMpXTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZhY2VEZXRlY3Rpb25zID0gX2Euc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmYWNlRGV0ZWN0aW9uV2l0aEhpZ2hlc3RTY29yZSA9IGZhY2VEZXRlY3Rpb25zWzBdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmYWNlRGV0ZWN0aW9ucy5mb3JFYWNoKGZ1bmN0aW9uIChmYWNlRGV0ZWN0aW9uKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZmFjZURldGVjdGlvbi5zY29yZSA+IGZhY2VEZXRlY3Rpb25XaXRoSGlnaGVzdFNjb3JlLnNjb3JlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmFjZURldGVjdGlvbldpdGhIaWdoZXN0U2NvcmUgPSBmYWNlRGV0ZWN0aW9uO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIGZhY2VEZXRlY3Rpb25XaXRoSGlnaGVzdFNjb3JlXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgRGV0ZWN0U2luZ2xlRmFjZVRhc2sucHJvdG90eXBlLnJ1bkFuZEV4dGVuZFdpdGhGYWNlRGV0ZWN0aW9uID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXMpIHsgcmV0dXJuIF9fYXdhaXRlcihfdGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIGRldGVjdGlvbjtcclxuICAgICAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xyXG4gICAgICAgICAgICAgICAgc3dpdGNoIChfYS5sYWJlbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDogcmV0dXJuIFs0IC8qeWllbGQqLywgdGhpcy5ydW4oKV07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBkZXRlY3Rpb24gPSBfYS5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCByZXMoZGV0ZWN0aW9uID8gZXh0ZW5kV2l0aEZhY2VEZXRlY3Rpb24oe30sIGRldGVjdGlvbikgOiB1bmRlZmluZWQpXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7IH0pO1xyXG4gICAgfTtcclxuICAgIERldGVjdFNpbmdsZUZhY2VUYXNrLnByb3RvdHlwZS53aXRoRmFjZUxhbmRtYXJrcyA9IGZ1bmN0aW9uICh1c2VUaW55TGFuZG1hcmtOZXQpIHtcclxuICAgICAgICBpZiAodXNlVGlueUxhbmRtYXJrTmV0ID09PSB2b2lkIDApIHsgdXNlVGlueUxhbmRtYXJrTmV0ID0gZmFsc2U7IH1cclxuICAgICAgICByZXR1cm4gbmV3IERldGVjdFNpbmdsZUZhY2VMYW5kbWFya3NUYXNrKHRoaXMucnVuQW5kRXh0ZW5kV2l0aEZhY2VEZXRlY3Rpb24oKSwgdGhpcy5pbnB1dCwgdXNlVGlueUxhbmRtYXJrTmV0KTtcclxuICAgIH07XHJcbiAgICBEZXRlY3RTaW5nbGVGYWNlVGFzay5wcm90b3R5cGUud2l0aEZhY2VFeHByZXNzaW9ucyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gbmV3IFByZWRpY3RTaW5nbGVGYWNlRXhwcmVzc2lvbnNUYXNrKHRoaXMucnVuQW5kRXh0ZW5kV2l0aEZhY2VEZXRlY3Rpb24oKSwgdGhpcy5pbnB1dCk7XHJcbiAgICB9O1xyXG4gICAgRGV0ZWN0U2luZ2xlRmFjZVRhc2sucHJvdG90eXBlLndpdGhBZ2VBbmRHZW5kZXIgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBQcmVkaWN0U2luZ2xlQWdlQW5kR2VuZGVyVGFzayh0aGlzLnJ1bkFuZEV4dGVuZFdpdGhGYWNlRGV0ZWN0aW9uKCksIHRoaXMuaW5wdXQpO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBEZXRlY3RTaW5nbGVGYWNlVGFzaztcclxufShEZXRlY3RGYWNlc1Rhc2tCYXNlKSk7XHJcbmV4cG9ydCB7IERldGVjdFNpbmdsZUZhY2VUYXNrIH07XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPURldGVjdEZhY2VzVGFza3MuanMubWFwIiwiaW1wb3J0IHsgU3NkTW9iaWxlbmV0djFPcHRpb25zIH0gZnJvbSAnLi4vc3NkTW9iaWxlbmV0djEvU3NkTW9iaWxlbmV0djFPcHRpb25zJztcclxuaW1wb3J0IHsgRGV0ZWN0QWxsRmFjZXNUYXNrLCBEZXRlY3RTaW5nbGVGYWNlVGFzayB9IGZyb20gJy4vRGV0ZWN0RmFjZXNUYXNrcyc7XHJcbmV4cG9ydCBmdW5jdGlvbiBkZXRlY3RTaW5nbGVGYWNlKGlucHV0LCBvcHRpb25zKSB7XHJcbiAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7IG9wdGlvbnMgPSBuZXcgU3NkTW9iaWxlbmV0djFPcHRpb25zKCk7IH1cclxuICAgIHJldHVybiBuZXcgRGV0ZWN0U2luZ2xlRmFjZVRhc2soaW5wdXQsIG9wdGlvbnMpO1xyXG59XHJcbmV4cG9ydCBmdW5jdGlvbiBkZXRlY3RBbGxGYWNlcyhpbnB1dCwgb3B0aW9ucykge1xyXG4gICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkgeyBvcHRpb25zID0gbmV3IFNzZE1vYmlsZW5ldHYxT3B0aW9ucygpOyB9XHJcbiAgICByZXR1cm4gbmV3IERldGVjdEFsbEZhY2VzVGFzayhpbnB1dCwgb3B0aW9ucyk7XHJcbn1cclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGV0ZWN0RmFjZXMuanMubWFwIiwiaW1wb3J0IHsgX19hd2FpdGVyLCBfX2dlbmVyYXRvciB9IGZyb20gXCJ0c2xpYlwiO1xyXG5pbXBvcnQgeyBNdGNubk9wdGlvbnMgfSBmcm9tICcuLi9tdGNubi9NdGNubk9wdGlvbnMnO1xyXG5pbXBvcnQgeyBTc2RNb2JpbGVuZXR2MU9wdGlvbnMgfSBmcm9tICcuLi9zc2RNb2JpbGVuZXR2MSc7XHJcbmltcG9ydCB7IFRpbnlZb2xvdjJPcHRpb25zIH0gZnJvbSAnLi4vdGlueVlvbG92Mic7XHJcbmltcG9ydCB7IGRldGVjdEFsbEZhY2VzIH0gZnJvbSAnLi9kZXRlY3RGYWNlcyc7XHJcbi8vIGV4cG9ydCBhbGxGYWNlcyBBUEkgZm9yIGJhY2t3YXJkIGNvbXBhdGliaWxpdHlcclxuZXhwb3J0IGZ1bmN0aW9uIGFsbEZhY2VzU3NkTW9iaWxlbmV0djEoaW5wdXQsIG1pbkNvbmZpZGVuY2UpIHtcclxuICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XHJcbiAgICAgICAgICAgIHN3aXRjaCAoX2EubGFiZWwpIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgMDpcclxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oJ2FsbEZhY2VzU3NkTW9iaWxlbmV0djEgaXMgZGVwcmVjYXRlZCBhbmQgd2lsbCBiZSByZW1vdmVkIHNvb24sIHVzZSB0aGUgaGlnaCBsZXZlbCBhcGkgaW5zdGVhZCcpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIGRldGVjdEFsbEZhY2VzKGlucHV0LCBuZXcgU3NkTW9iaWxlbmV0djFPcHRpb25zKG1pbkNvbmZpZGVuY2UgPyB7IG1pbkNvbmZpZGVuY2U6IG1pbkNvbmZpZGVuY2UgfSA6IHt9KSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC53aXRoRmFjZUxhbmRtYXJrcygpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAud2l0aEZhY2VEZXNjcmlwdG9ycygpXTtcclxuICAgICAgICAgICAgICAgIGNhc2UgMTogcmV0dXJuIFsyIC8qcmV0dXJuKi8sIF9hLnNlbnQoKV07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH0pO1xyXG59XHJcbmV4cG9ydCBmdW5jdGlvbiBhbGxGYWNlc1RpbnlZb2xvdjIoaW5wdXQsIGZvcndhcmRQYXJhbXMpIHtcclxuICAgIGlmIChmb3J3YXJkUGFyYW1zID09PSB2b2lkIDApIHsgZm9yd2FyZFBhcmFtcyA9IHt9OyB9XHJcbiAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xyXG4gICAgICAgICAgICBzd2l0Y2ggKF9hLmxhYmVsKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDA6XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdhbGxGYWNlc1RpbnlZb2xvdjIgaXMgZGVwcmVjYXRlZCBhbmQgd2lsbCBiZSByZW1vdmVkIHNvb24sIHVzZSB0aGUgaGlnaCBsZXZlbCBhcGkgaW5zdGVhZCcpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIGRldGVjdEFsbEZhY2VzKGlucHV0LCBuZXcgVGlueVlvbG92Mk9wdGlvbnMoZm9yd2FyZFBhcmFtcykpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAud2l0aEZhY2VMYW5kbWFya3MoKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLndpdGhGYWNlRGVzY3JpcHRvcnMoKV07XHJcbiAgICAgICAgICAgICAgICBjYXNlIDE6IHJldHVybiBbMiAvKnJldHVybiovLCBfYS5zZW50KCldO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9KTtcclxufVxyXG5leHBvcnQgZnVuY3Rpb24gYWxsRmFjZXNNdGNubihpbnB1dCwgZm9yd2FyZFBhcmFtcykge1xyXG4gICAgaWYgKGZvcndhcmRQYXJhbXMgPT09IHZvaWQgMCkgeyBmb3J3YXJkUGFyYW1zID0ge307IH1cclxuICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XHJcbiAgICAgICAgICAgIHN3aXRjaCAoX2EubGFiZWwpIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgMDpcclxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oJ2FsbEZhY2VzTXRjbm4gaXMgZGVwcmVjYXRlZCBhbmQgd2lsbCBiZSByZW1vdmVkIHNvb24sIHVzZSB0aGUgaGlnaCBsZXZlbCBhcGkgaW5zdGVhZCcpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIGRldGVjdEFsbEZhY2VzKGlucHV0LCBuZXcgTXRjbm5PcHRpb25zKGZvcndhcmRQYXJhbXMpKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLndpdGhGYWNlTGFuZG1hcmtzKClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC53aXRoRmFjZURlc2NyaXB0b3JzKCldO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAxOiByZXR1cm4gWzIgLypyZXR1cm4qLywgX2Euc2VudCgpXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfSk7XHJcbn1cclxuZXhwb3J0IHZhciBhbGxGYWNlcyA9IGFsbEZhY2VzU3NkTW9iaWxlbmV0djE7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFsbEZhY2VzLmpzLm1hcCIsImV4cG9ydCBmdW5jdGlvbiBldWNsaWRlYW5EaXN0YW5jZShhcnIxLCBhcnIyKSB7XHJcbiAgICBpZiAoYXJyMS5sZW5ndGggIT09IGFycjIubGVuZ3RoKVxyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignZXVjbGlkZWFuRGlzdGFuY2U6IGFycjEubGVuZ3RoICE9PSBhcnIyLmxlbmd0aCcpO1xyXG4gICAgdmFyIGRlc2MxID0gQXJyYXkuZnJvbShhcnIxKTtcclxuICAgIHZhciBkZXNjMiA9IEFycmF5LmZyb20oYXJyMik7XHJcbiAgICByZXR1cm4gTWF0aC5zcXJ0KGRlc2MxXHJcbiAgICAgICAgLm1hcChmdW5jdGlvbiAodmFsLCBpKSB7IHJldHVybiB2YWwgLSBkZXNjMltpXTsgfSlcclxuICAgICAgICAucmVkdWNlKGZ1bmN0aW9uIChyZXMsIGRpZmYpIHsgcmV0dXJuIHJlcyArIE1hdGgucG93KGRpZmYsIDIpOyB9LCAwKSk7XHJcbn1cclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZXVjbGlkZWFuRGlzdGFuY2UuanMubWFwIiwiaW1wb3J0IHsgRmFjZU1hdGNoIH0gZnJvbSAnLi4vY2xhc3Nlcy9GYWNlTWF0Y2gnO1xyXG5pbXBvcnQgeyBMYWJlbGVkRmFjZURlc2NyaXB0b3JzIH0gZnJvbSAnLi4vY2xhc3Nlcy9MYWJlbGVkRmFjZURlc2NyaXB0b3JzJztcclxuaW1wb3J0IHsgZXVjbGlkZWFuRGlzdGFuY2UgfSBmcm9tICcuLi9ldWNsaWRlYW5EaXN0YW5jZSc7XHJcbnZhciBGYWNlTWF0Y2hlciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIEZhY2VNYXRjaGVyKGlucHV0cywgZGlzdGFuY2VUaHJlc2hvbGQpIHtcclxuICAgICAgICBpZiAoZGlzdGFuY2VUaHJlc2hvbGQgPT09IHZvaWQgMCkgeyBkaXN0YW5jZVRocmVzaG9sZCA9IDAuNjsgfVxyXG4gICAgICAgIHRoaXMuX2Rpc3RhbmNlVGhyZXNob2xkID0gZGlzdGFuY2VUaHJlc2hvbGQ7XHJcbiAgICAgICAgdmFyIGlucHV0QXJyYXkgPSBBcnJheS5pc0FycmF5KGlucHV0cykgPyBpbnB1dHMgOiBbaW5wdXRzXTtcclxuICAgICAgICBpZiAoIWlucHV0QXJyYXkubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkZhY2VSZWNvZ25pemVyLmNvbnN0cnVjdG9yIC0gZXhwZWN0ZWQgYXRsZWFzdCBvbmUgaW5wdXRcIik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBjb3VudCA9IDE7XHJcbiAgICAgICAgdmFyIGNyZWF0ZVVuaXF1ZUxhYmVsID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gXCJwZXJzb24gXCIgKyBjb3VudCsrOyB9O1xyXG4gICAgICAgIHRoaXMuX2xhYmVsZWREZXNjcmlwdG9ycyA9IGlucHV0QXJyYXkubWFwKGZ1bmN0aW9uIChkZXNjKSB7XHJcbiAgICAgICAgICAgIGlmIChkZXNjIGluc3RhbmNlb2YgTGFiZWxlZEZhY2VEZXNjcmlwdG9ycykge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGRlc2M7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKGRlc2MgaW5zdGFuY2VvZiBGbG9hdDMyQXJyYXkpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgTGFiZWxlZEZhY2VEZXNjcmlwdG9ycyhjcmVhdGVVbmlxdWVMYWJlbCgpLCBbZGVzY10pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChkZXNjLmRlc2NyaXB0b3IgJiYgZGVzYy5kZXNjcmlwdG9yIGluc3RhbmNlb2YgRmxvYXQzMkFycmF5KSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IExhYmVsZWRGYWNlRGVzY3JpcHRvcnMoY3JlYXRlVW5pcXVlTGFiZWwoKSwgW2Rlc2MuZGVzY3JpcHRvcl0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkZhY2VSZWNvZ25pemVyLmNvbnN0cnVjdG9yIC0gZXhwZWN0ZWQgaW5wdXRzIHRvIGJlIG9mIHR5cGUgTGFiZWxlZEZhY2VEZXNjcmlwdG9ycyB8IFdpdGhGYWNlRGVzY3JpcHRvcjxhbnk+IHwgRmxvYXQzMkFycmF5IHwgQXJyYXk8TGFiZWxlZEZhY2VEZXNjcmlwdG9ycyB8IFdpdGhGYWNlRGVzY3JpcHRvcjxhbnk+IHwgRmxvYXQzMkFycmF5PlwiKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShGYWNlTWF0Y2hlci5wcm90b3R5cGUsIFwibGFiZWxlZERlc2NyaXB0b3JzXCIsIHtcclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMuX2xhYmVsZWREZXNjcmlwdG9yczsgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoRmFjZU1hdGNoZXIucHJvdG90eXBlLCBcImRpc3RhbmNlVGhyZXNob2xkXCIsIHtcclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMuX2Rpc3RhbmNlVGhyZXNob2xkOyB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIEZhY2VNYXRjaGVyLnByb3RvdHlwZS5jb21wdXRlTWVhbkRpc3RhbmNlID0gZnVuY3Rpb24gKHF1ZXJ5RGVzY3JpcHRvciwgZGVzY3JpcHRvcnMpIHtcclxuICAgICAgICByZXR1cm4gZGVzY3JpcHRvcnNcclxuICAgICAgICAgICAgLm1hcChmdW5jdGlvbiAoZCkgeyByZXR1cm4gZXVjbGlkZWFuRGlzdGFuY2UoZCwgcXVlcnlEZXNjcmlwdG9yKTsgfSlcclxuICAgICAgICAgICAgLnJlZHVjZShmdW5jdGlvbiAoZDEsIGQyKSB7IHJldHVybiBkMSArIGQyOyB9LCAwKVxyXG4gICAgICAgICAgICAvIChkZXNjcmlwdG9ycy5sZW5ndGggfHwgMSk7XHJcbiAgICB9O1xyXG4gICAgRmFjZU1hdGNoZXIucHJvdG90eXBlLm1hdGNoRGVzY3JpcHRvciA9IGZ1bmN0aW9uIChxdWVyeURlc2NyaXB0b3IpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHJldHVybiB0aGlzLmxhYmVsZWREZXNjcmlwdG9yc1xyXG4gICAgICAgICAgICAubWFwKGZ1bmN0aW9uIChfYSkge1xyXG4gICAgICAgICAgICB2YXIgZGVzY3JpcHRvcnMgPSBfYS5kZXNjcmlwdG9ycywgbGFiZWwgPSBfYS5sYWJlbDtcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBGYWNlTWF0Y2gobGFiZWwsIF90aGlzLmNvbXB1dGVNZWFuRGlzdGFuY2UocXVlcnlEZXNjcmlwdG9yLCBkZXNjcmlwdG9ycykpO1xyXG4gICAgICAgIH0pXHJcbiAgICAgICAgICAgIC5yZWR1Y2UoZnVuY3Rpb24gKGJlc3QsIGN1cnIpIHsgcmV0dXJuIGJlc3QuZGlzdGFuY2UgPCBjdXJyLmRpc3RhbmNlID8gYmVzdCA6IGN1cnI7IH0pO1xyXG4gICAgfTtcclxuICAgIEZhY2VNYXRjaGVyLnByb3RvdHlwZS5maW5kQmVzdE1hdGNoID0gZnVuY3Rpb24gKHF1ZXJ5RGVzY3JpcHRvcikge1xyXG4gICAgICAgIHZhciBiZXN0TWF0Y2ggPSB0aGlzLm1hdGNoRGVzY3JpcHRvcihxdWVyeURlc2NyaXB0b3IpO1xyXG4gICAgICAgIHJldHVybiBiZXN0TWF0Y2guZGlzdGFuY2UgPCB0aGlzLmRpc3RhbmNlVGhyZXNob2xkXHJcbiAgICAgICAgICAgID8gYmVzdE1hdGNoXHJcbiAgICAgICAgICAgIDogbmV3IEZhY2VNYXRjaCgndW5rbm93bicsIGJlc3RNYXRjaC5kaXN0YW5jZSk7XHJcbiAgICB9O1xyXG4gICAgRmFjZU1hdGNoZXIucHJvdG90eXBlLnRvSlNPTiA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBkaXN0YW5jZVRocmVzaG9sZDogdGhpcy5kaXN0YW5jZVRocmVzaG9sZCxcclxuICAgICAgICAgICAgbGFiZWxlZERlc2NyaXB0b3JzOiB0aGlzLmxhYmVsZWREZXNjcmlwdG9ycy5tYXAoZnVuY3Rpb24gKGxkKSB7IHJldHVybiBsZC50b0pTT04oKTsgfSlcclxuICAgICAgICB9O1xyXG4gICAgfTtcclxuICAgIEZhY2VNYXRjaGVyLmZyb21KU09OID0gZnVuY3Rpb24gKGpzb24pIHtcclxuICAgICAgICB2YXIgbGFiZWxlZERlc2NyaXB0b3JzID0ganNvbi5sYWJlbGVkRGVzY3JpcHRvcnNcclxuICAgICAgICAgICAgLm1hcChmdW5jdGlvbiAobGQpIHsgcmV0dXJuIExhYmVsZWRGYWNlRGVzY3JpcHRvcnMuZnJvbUpTT04obGQpOyB9KTtcclxuICAgICAgICByZXR1cm4gbmV3IEZhY2VNYXRjaGVyKGxhYmVsZWREZXNjcmlwdG9ycywganNvbi5kaXN0YW5jZVRocmVzaG9sZCk7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIEZhY2VNYXRjaGVyO1xyXG59KCkpO1xyXG5leHBvcnQgeyBGYWNlTWF0Y2hlciB9O1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1GYWNlTWF0Y2hlci5qcy5tYXAiLCJpbXBvcnQgeyBNdGNubiB9IGZyb20gJy4vTXRjbm4nO1xyXG5leHBvcnQgKiBmcm9tICcuL010Y25uJztcclxuZXhwb3J0ICogZnJvbSAnLi9NdGNubk9wdGlvbnMnO1xyXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlTXRjbm4od2VpZ2h0cykge1xyXG4gICAgdmFyIG5ldCA9IG5ldyBNdGNubigpO1xyXG4gICAgbmV0LmV4dHJhY3RXZWlnaHRzKHdlaWdodHMpO1xyXG4gICAgcmV0dXJuIG5ldDtcclxufVxyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiLCJpbXBvcnQgeyBUaW55RmFjZURldGVjdG9yIH0gZnJvbSAnLi9UaW55RmFjZURldGVjdG9yJztcclxuZXhwb3J0ICogZnJvbSAnLi9UaW55RmFjZURldGVjdG9yJztcclxuZXhwb3J0ICogZnJvbSAnLi9UaW55RmFjZURldGVjdG9yT3B0aW9ucyc7XHJcbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVUaW55RmFjZURldGVjdG9yKHdlaWdodHMpIHtcclxuICAgIHZhciBuZXQgPSBuZXcgVGlueUZhY2VEZXRlY3RvcigpO1xyXG4gICAgbmV0LmV4dHJhY3RXZWlnaHRzKHdlaWdodHMpO1xyXG4gICAgcmV0dXJuIG5ldDtcclxufVxyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiLCJpbXBvcnQgeyBEaW1lbnNpb25zIH0gZnJvbSAnLi9jbGFzc2VzJztcclxuaW1wb3J0IHsgRmFjZURldGVjdGlvbiB9IGZyb20gJy4vY2xhc3Nlcy9GYWNlRGV0ZWN0aW9uJztcclxuaW1wb3J0IHsgRmFjZUxhbmRtYXJrcyB9IGZyb20gJy4vY2xhc3Nlcy9GYWNlTGFuZG1hcmtzJztcclxuaW1wb3J0IHsgZXh0ZW5kV2l0aEZhY2VEZXRlY3Rpb24sIGlzV2l0aEZhY2VEZXRlY3Rpb24gfSBmcm9tICcuL2ZhY3Rvcmllcy9XaXRoRmFjZURldGVjdGlvbic7XHJcbmltcG9ydCB7IGV4dGVuZFdpdGhGYWNlTGFuZG1hcmtzLCBpc1dpdGhGYWNlTGFuZG1hcmtzIH0gZnJvbSAnLi9mYWN0b3JpZXMvV2l0aEZhY2VMYW5kbWFya3MnO1xyXG5leHBvcnQgZnVuY3Rpb24gcmVzaXplUmVzdWx0cyhyZXN1bHRzLCBkaW1lbnNpb25zKSB7XHJcbiAgICB2YXIgX2EgPSBuZXcgRGltZW5zaW9ucyhkaW1lbnNpb25zLndpZHRoLCBkaW1lbnNpb25zLmhlaWdodCksIHdpZHRoID0gX2Eud2lkdGgsIGhlaWdodCA9IF9hLmhlaWdodDtcclxuICAgIGlmICh3aWR0aCA8PSAwIHx8IGhlaWdodCA8PSAwKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwicmVzaXplUmVzdWx0cyAtIGludmFsaWQgZGltZW5zaW9uczogXCIgKyBKU09OLnN0cmluZ2lmeSh7IHdpZHRoOiB3aWR0aCwgaGVpZ2h0OiBoZWlnaHQgfSkpO1xyXG4gICAgfVxyXG4gICAgaWYgKEFycmF5LmlzQXJyYXkocmVzdWx0cykpIHtcclxuICAgICAgICByZXR1cm4gcmVzdWx0cy5tYXAoZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gcmVzaXplUmVzdWx0cyhvYmosIHsgd2lkdGg6IHdpZHRoLCBoZWlnaHQ6IGhlaWdodCB9KTsgfSk7XHJcbiAgICB9XHJcbiAgICBpZiAoaXNXaXRoRmFjZUxhbmRtYXJrcyhyZXN1bHRzKSkge1xyXG4gICAgICAgIHZhciByZXNpemVkRGV0ZWN0aW9uID0gcmVzdWx0cy5kZXRlY3Rpb24uZm9yU2l6ZSh3aWR0aCwgaGVpZ2h0KTtcclxuICAgICAgICB2YXIgcmVzaXplZExhbmRtYXJrcyA9IHJlc3VsdHMudW5zaGlmdGVkTGFuZG1hcmtzLmZvclNpemUocmVzaXplZERldGVjdGlvbi5ib3gud2lkdGgsIHJlc2l6ZWREZXRlY3Rpb24uYm94LmhlaWdodCk7XHJcbiAgICAgICAgcmV0dXJuIGV4dGVuZFdpdGhGYWNlTGFuZG1hcmtzKGV4dGVuZFdpdGhGYWNlRGV0ZWN0aW9uKHJlc3VsdHMsIHJlc2l6ZWREZXRlY3Rpb24pLCByZXNpemVkTGFuZG1hcmtzKTtcclxuICAgIH1cclxuICAgIGlmIChpc1dpdGhGYWNlRGV0ZWN0aW9uKHJlc3VsdHMpKSB7XHJcbiAgICAgICAgcmV0dXJuIGV4dGVuZFdpdGhGYWNlRGV0ZWN0aW9uKHJlc3VsdHMsIHJlc3VsdHMuZGV0ZWN0aW9uLmZvclNpemUod2lkdGgsIGhlaWdodCkpO1xyXG4gICAgfVxyXG4gICAgaWYgKHJlc3VsdHMgaW5zdGFuY2VvZiBGYWNlTGFuZG1hcmtzIHx8IHJlc3VsdHMgaW5zdGFuY2VvZiBGYWNlRGV0ZWN0aW9uKSB7XHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdHMuZm9yU2l6ZSh3aWR0aCwgaGVpZ2h0KTtcclxuICAgIH1cclxuICAgIHJldHVybiByZXN1bHRzO1xyXG59XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJlc2l6ZVJlc3VsdHMuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkZhY2UgPSB2b2lkIDA7XG5jb25zdCBnZXREaXN0YW5jZV8xID0gcmVxdWlyZShcIi4vdXRpbHMvZ2V0RGlzdGFuY2VcIik7XG5jb25zdCBGYWNlRGlyZWN0aW9uXzEgPSByZXF1aXJlKFwiLi9GYWNlRGlyZWN0aW9uXCIpO1xuY2xhc3MgRmFjZSB7XG4gICAgY29uc3RydWN0b3IobGFuZG1hcmtzLCBmcmFtZSkge1xuICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgIGNvbnN0IGxhbmRtYXJrc1Bvc2l0aW9ucyA9IGxhbmRtYXJrcy5fcG9zaXRpb25zO1xuICAgICAgICB0aGlzLmxlZnQgPSBsYW5kbWFya3NQb3NpdGlvbnNbM107XG4gICAgICAgIHRoaXMucmlnaHQgPSBsYW5kbWFya3NQb3NpdGlvbnNbMTVdO1xuICAgICAgICB0aGlzLm5vc2UgPSBsYW5kbWFya3NQb3NpdGlvbnNbMzNdO1xuICAgICAgICB0aGlzLmJvdHRvbSA9IGxhbmRtYXJrc1Bvc2l0aW9uc1s5XTtcbiAgICAgICAgdGhpcy5iZXR3ZWVuRXllcyA9IGxhbmRtYXJrc1Bvc2l0aW9uc1syOF07XG4gICAgICAgIHRoaXMuZGlyZWN0aW9uID0gbmV3IEZhY2VEaXJlY3Rpb25fMS5GYWNlRGlyZWN0aW9uKGxhbmRtYXJrcyk7XG4gICAgICAgIHRoaXMuZnJhbWUgPSBmcmFtZTtcbiAgICB9XG4gICAgZ2V0RmFjZVBvc2lvdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIE1hdGguc3FydChNYXRoLnBvdyh0aGlzLmZyYW1lLndpZHRoIC8gMiAtIHRoaXMubm9zZS54LCAyKSArIE1hdGgucG93KHRoaXMuZnJhbWUuaGVpZ2h0IC8gMiAtIHRoaXMubm9zZS55LCAyKSk7XG4gICAgfVxuICAgIGdldFdpZHRoKCkge1xuICAgICAgICByZXR1cm4gKDAsIGdldERpc3RhbmNlXzEuZ2V0RGlzdGFuY2UpKHRoaXMubGVmdCwgdGhpcy5yaWdodCk7XG4gICAgfVxuICAgIGdldEhlaWdodCgpIHtcbiAgICAgICAgcmV0dXJuICgwLCBnZXREaXN0YW5jZV8xLmdldERpc3RhbmNlKSh0aGlzLmJldHdlZW5FeWVzLCB0aGlzLmJvdHRvbSk7XG4gICAgfVxufVxuZXhwb3J0cy5GYWNlID0gRmFjZTtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5GYWNlRGlyZWN0aW9uID0gdm9pZCAwO1xuY29uc3QgZ2V0RGlzdGFuY2VfMSA9IHJlcXVpcmUoXCIuL3V0aWxzL2dldERpc3RhbmNlXCIpO1xuY2xhc3MgRmFjZURpcmVjdGlvbiB7XG4gICAgY29uc3RydWN0b3IobGFuZG1hcmtzKSB7XG4gICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgY29uc3QgbGFuZG1hcmtzUG9zaXRpb25zID0gbGFuZG1hcmtzLl9wb3NpdGlvbnM7XG4gICAgICAgIGNvbnN0IGxlZnQgPSBsYW5kbWFya3NQb3NpdGlvbnNbM107XG4gICAgICAgIGNvbnN0IHJpZ2h0ID0gbGFuZG1hcmtzUG9zaXRpb25zWzE1XTtcbiAgICAgICAgY29uc3Qgbm9zZSA9IGxhbmRtYXJrc1Bvc2l0aW9uc1szM107XG4gICAgICAgIGNvbnN0IGJvdHRvbSA9IGxhbmRtYXJrc1Bvc2l0aW9uc1s5XTtcbiAgICAgICAgY29uc3QgYmV0d2VlbkV5ZXMgPSBsYW5kbWFya3NQb3NpdGlvbnNbMjhdO1xuICAgICAgICBjb25zdCBmYWNlV2lkdGggPSAoMCwgZ2V0RGlzdGFuY2VfMS5nZXREaXN0YW5jZSkobGVmdCwgcmlnaHQpO1xuICAgICAgICBjb25zdCBmYWNlSGVpZ2h0ID0gKDAsIGdldERpc3RhbmNlXzEuZ2V0RGlzdGFuY2UpKGJldHdlZW5FeWVzLCBib3R0b20pO1xuICAgICAgICB0aGlzLmRpc3RhbmNlTGVmdCA9ICgwLCBnZXREaXN0YW5jZV8xLmdldERpc3RhbmNlKShsZWZ0LCBub3NlKSAvIGZhY2VXaWR0aDtcbiAgICAgICAgdGhpcy5kaXN0YW5jZVRvcCA9ICgwLCBnZXREaXN0YW5jZV8xLmdldERpc3RhbmNlKShiZXR3ZWVuRXllcywgbm9zZSkgLyBmYWNlSGVpZ2h0O1xuICAgIH1cbiAgICBpc0xvb2tTdHJhaWdodCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGlzdGFuY2VMZWZ0ID4gMC40ICYmIHRoaXMuZGlzdGFuY2VMZWZ0IDwgMC43ICYmIHRoaXMuZGlzdGFuY2VUb3AgPiAwLjMyICYmIHRoaXMuZGlzdGFuY2VUb3AgPCAwLjQ7XG4gICAgfVxuICAgIGlzTG9va0xlZnQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmRpc3RhbmNlTGVmdCA+IDAuNztcbiAgICB9XG4gICAgaXNMb29rUmlnaHQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmRpc3RhbmNlTGVmdCA8IDAuNDtcbiAgICB9XG4gICAgaXNMb29rVXAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmRpc3RhbmNlVG9wIDwgMC4zMjtcbiAgICB9XG4gICAgaXNMb29rRG93bigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGlzdGFuY2VUb3AgPiAwLjQ7XG4gICAgfVxufVxuZXhwb3J0cy5GYWNlRGlyZWN0aW9uID0gRmFjZURpcmVjdGlvbjtcbiIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fY3JlYXRlQmluZGluZyA9ICh0aGlzICYmIHRoaXMuX19jcmVhdGVCaW5kaW5nKSB8fCAoT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG0sIGspO1xuICAgIGlmICghZGVzYyB8fCAoXCJnZXRcIiBpbiBkZXNjID8gIW0uX19lc01vZHVsZSA6IGRlc2Mud3JpdGFibGUgfHwgZGVzYy5jb25maWd1cmFibGUpKSB7XG4gICAgICBkZXNjID0geyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gbVtrXTsgfSB9O1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgazIsIGRlc2MpO1xufSkgOiAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIG9bazJdID0gbVtrXTtcbn0pKTtcbnZhciBfX3NldE1vZHVsZURlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9fc2V0TW9kdWxlRGVmYXVsdCkgfHwgKE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgdikge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBcImRlZmF1bHRcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdiB9KTtcbn0pIDogZnVuY3Rpb24obywgdikge1xuICAgIG9bXCJkZWZhdWx0XCJdID0gdjtcbn0pO1xudmFyIF9faW1wb3J0U3RhciA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnRTdGFyKSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgaWYgKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgcmV0dXJuIG1vZDtcbiAgICB2YXIgcmVzdWx0ID0ge307XG4gICAgaWYgKG1vZCAhPSBudWxsKSBmb3IgKHZhciBrIGluIG1vZCkgaWYgKGsgIT09IFwiZGVmYXVsdFwiICYmIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChtb2QsIGspKSBfX2NyZWF0ZUJpbmRpbmcocmVzdWx0LCBtb2QsIGspO1xuICAgIF9fc2V0TW9kdWxlRGVmYXVsdChyZXN1bHQsIG1vZCk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbn07XG52YXIgX19hd2FpdGVyID0gKHRoaXMgJiYgdGhpcy5fX2F3YWl0ZXIpIHx8IGZ1bmN0aW9uICh0aGlzQXJnLCBfYXJndW1lbnRzLCBQLCBnZW5lcmF0b3IpIHtcbiAgICBmdW5jdGlvbiBhZG9wdCh2YWx1ZSkgeyByZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBQID8gdmFsdWUgOiBuZXcgUChmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXNvbHZlKHZhbHVlKTsgfSk7IH1cbiAgICByZXR1cm4gbmV3IChQIHx8IChQID0gUHJvbWlzZSkpKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgZnVuY3Rpb24gZnVsZmlsbGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yLm5leHQodmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxuICAgICAgICBmdW5jdGlvbiByZWplY3RlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvcltcInRocm93XCJdKHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cbiAgICAgICAgZnVuY3Rpb24gc3RlcChyZXN1bHQpIHsgcmVzdWx0LmRvbmUgPyByZXNvbHZlKHJlc3VsdC52YWx1ZSkgOiBhZG9wdChyZXN1bHQudmFsdWUpLnRoZW4oZnVsZmlsbGVkLCByZWplY3RlZCk7IH1cbiAgICAgICAgc3RlcCgoZ2VuZXJhdG9yID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMgfHwgW10pKS5uZXh0KCkpO1xuICAgIH0pO1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuU2VsZmllID0gdm9pZCAwO1xuY29uc3QgZmFjZWFwaSA9IF9faW1wb3J0U3RhcihyZXF1aXJlKFwiZmFjZS1hcGkuanNcIikpO1xuY29uc3QgRmFjZV8xID0gcmVxdWlyZShcIi4vRmFjZVwiKTtcbmNvbnN0IGdldEZhY2VGcmFtZV8xID0gcmVxdWlyZShcIi4vdXRpbHMvZ2V0RmFjZUZyYW1lXCIpO1xuY29uc3Qgcm91bmRGcmFtZSA9IChmcmFtZSkgPT4gKHtcbiAgICB4OiBNYXRoLnJvdW5kKGZyYW1lLngpLFxuICAgIHk6IE1hdGgucm91bmQoZnJhbWUueSksXG4gICAgd2lkdGg6IE1hdGgucm91bmQoZnJhbWUud2lkdGgpLFxuICAgIGhlaWdodDogTWF0aC5yb3VuZChmcmFtZS5oZWlnaHQpLFxufSk7XG5jbGFzcyBTZWxmaWUge1xuICAgIGNvbnN0cnVjdG9yKGNvbmZpZykge1xuICAgICAgICB0aGlzLmZhY2VXaWR0aCA9IDE3MDtcbiAgICAgICAgdGhpcy5hbGxvd2VkRmFjZURldmlhdGlvbiA9IDQ1O1xuICAgICAgICB0aGlzLmZyYW1lID0ge1xuICAgICAgICAgICAgd2lkdGg6IDcyMCxcbiAgICAgICAgICAgIGhlaWdodDogNTYwLFxuICAgICAgICB9O1xuICAgICAgICB0aGlzLmRlYnVnID0gZmFsc2U7XG4gICAgICAgIHRoaXMubGFzdEZhY2VGcmFtZSA9IHt9O1xuICAgICAgICB0aGlzLm9uRnJhbWVQcm9jZXNzZWRDYWxsYmFjayA9ICgoKSA9PiB7IH0pO1xuICAgICAgICB0aGlzLmNhbnZhcyA9IG51bGw7XG4gICAgICAgIHRoaXMub3V0cHV0Q2FudmFzID0gbnVsbDtcbiAgICAgICAgdGhpcy52aWRlbyA9IG51bGw7XG4gICAgICAgIHRoaXMuaXNQbGF5U3RhcnRlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLmNvbmZpZyA9IGNvbmZpZztcbiAgICAgICAgdGhpcy5kZWJ1ZyA9IGNvbmZpZy5kZWJ1ZyB8fCB3aW5kb3cubG9jYXRpb24uc2VhcmNoLmluY2x1ZGVzKCdzZWxmaWUtZGVidWcnKSB8fCBmYWxzZTtcbiAgICAgICAgdGhpcy5mYWNlV2lkdGggPSBjb25maWcuZmFjZVdpZHRoIHx8IHRoaXMuZmFjZVdpZHRoO1xuICAgICAgICB0aGlzLmFsbG93ZWRGYWNlRGV2aWF0aW9uID0gY29uZmlnLmFsbG93ZWRGYWNlRGV2aWF0aW9uIHx8IHRoaXMuYWxsb3dlZEZhY2VEZXZpYXRpb247XG4gICAgICAgIHRoaXMuZnJhbWUgPSBjb25maWcuZnJhbWUgfHwgdGhpcy5mcmFtZTtcbiAgICAgICAgdGhpcy52aWRlbyA9IGNvbmZpZy52aWRlbztcbiAgICAgICAgdGhpcy5vbkZyYW1lUHJvY2Vzc2VkQ2FsbGJhY2sgPSBjb25maWcub25GcmFtZVByb2Nlc3NlZCB8fCB0aGlzLm9uRnJhbWVQcm9jZXNzZWRDYWxsYmFjaztcbiAgICB9XG4gICAgdXBkYXRlQ2FudmFzKCkge1xuICAgICAgICBjb25zdCB2aWRlbyA9IHRoaXMudmlkZW87XG4gICAgICAgIGlmICghdmlkZW8pIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB1cGRhdGVDYW52YXMgPSAoKSA9PiB7XG4gICAgICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgICAgICB0aGlzLm91dHB1dENhbnZhcy5nZXRDb250ZXh0KCcyZCcpLmRyYXdJbWFnZSh0aGlzLnZpZGVvLCAwLCAwLCB0aGlzLm91dHB1dENhbnZhcy53aWR0aCwgdGhpcy5vdXRwdXRDYW52YXMuaGVpZ2h0KTtcbiAgICAgICAgICAgIHZpZGVvLnJlcXVlc3RWaWRlb0ZyYW1lQ2FsbGJhY2sodXBkYXRlQ2FudmFzKTtcbiAgICAgICAgfTtcbiAgICAgICAgdmlkZW8ucmVxdWVzdFZpZGVvRnJhbWVDYWxsYmFjayh1cGRhdGVDYW52YXMpO1xuICAgIH1cbiAgICBzdGFydCgpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIHZhciBfYSwgX2I7XG4gICAgICAgICAgICBjb25zdCB7IHZpZGVvLCB2aWRlb0NvbnRhaW5lciB9ID0gdGhpcy5jb25maWc7XG4gICAgICAgICAgICB2aWRlby5zdHlsZS53aWR0aCA9ICczNTBweCc7XG4gICAgICAgICAgICB2aWRlby5zdHlsZS5oZWlnaHQgPSAnMzUwcHgnO1xuICAgICAgICAgICAgdmlkZW8uc3R5bGUucG9zaXRpb24gPSAnYWJzb2x1dGUnO1xuICAgICAgICAgICAgdGhpcy5vdXRwdXRDYW52YXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdjYW52YXMnKTtcbiAgICAgICAgICAgIHRoaXMub3V0cHV0Q2FudmFzLndpZHRoID0gKChfYSA9IHRoaXMudmlkZW8pID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS52aWRlb1dpZHRoKSB8fCB0aGlzLmZyYW1lLndpZHRoO1xuICAgICAgICAgICAgdGhpcy5vdXRwdXRDYW52YXMuaGVpZ2h0ID0gKChfYiA9IHRoaXMudmlkZW8pID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi52aWRlb0hlaWdodCkgfHwgdGhpcy5mcmFtZS5oZWlnaHQ7XG4gICAgICAgICAgICB2aWRlby5pbnNlcnRBZGphY2VudEVsZW1lbnQoJ2FmdGVyZW5kJywgdGhpcy5vdXRwdXRDYW52YXMpO1xuICAgICAgICAgICAgdmlkZW8uYWRkRXZlbnRMaXN0ZW5lcigncGxheScsICgpID0+IF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmNhbnZhcyA9IGZhY2VhcGkuY3JlYXRlQ2FudmFzRnJvbU1lZGlhKHZpZGVvKTtcbiAgICAgICAgICAgICAgICB0aGlzLmNhbnZhcy5zdHlsZS5wb3NpdGlvbiA9ICdhYnNvbHV0ZSc7XG4gICAgICAgICAgICAgICAgdmlkZW8uc3R5bGUub3BhY2l0eSA9ICcwJztcbiAgICAgICAgICAgICAgICB2aWRlb0NvbnRhaW5lci5hcHBlbmQodGhpcy5jYW52YXMpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGRpc3BsYXlTaXplID0geyB3aWR0aDogdmlkZW8ud2lkdGgsIGhlaWdodDogdmlkZW8uaGVpZ2h0IH07XG4gICAgICAgICAgICAgICAgZmFjZWFwaS5tYXRjaERpbWVuc2lvbnModGhpcy5jYW52YXMsIGRpc3BsYXlTaXplKTtcbiAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZUNhbnZhcygpO1xuICAgICAgICAgICAgICAgIHRoaXMuaXNQbGF5U3RhcnRlZCA9IHRydWU7XG4gICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICB5aWVsZCBQcm9taXNlLmFsbChbXG4gICAgICAgICAgICAgICAgZmFjZWFwaS5uZXRzLnRpbnlGYWNlRGV0ZWN0b3IubG9hZEZyb21VcmkoJy4vd2VpZ2h0cycpLFxuICAgICAgICAgICAgICAgIGZhY2VhcGkubmV0cy5mYWNlTGFuZG1hcms2OE5ldC5sb2FkRnJvbVVyaSgnLi93ZWlnaHRzJyksXG4gICAgICAgICAgICBdKTtcbiAgICAgICAgICAgIHJldHVybiBuYXZpZ2F0b3IubWVkaWFEZXZpY2VzXG4gICAgICAgICAgICAgICAgLmdldFVzZXJNZWRpYSh7XG4gICAgICAgICAgICAgICAgdmlkZW86IHtcbiAgICAgICAgICAgICAgICAgICAgd2lkdGg6IHRoaXMuZnJhbWUud2lkdGgsXG4gICAgICAgICAgICAgICAgICAgIGhlaWdodDogdGhpcy5mcmFtZS5oZWlnaHQsXG4gICAgICAgICAgICAgICAgICAgIGZhY2luZ01vZGU6ICd1c2VyJyxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAudGhlbigoc3RyZWFtKSA9PiB7XG4gICAgICAgICAgICAgICAgdmlkZW8uc3JjT2JqZWN0ID0gc3RyZWFtO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAuY2F0Y2goKGVycikgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGFjY2Vzc2luZyB0aGUgY2FtZXJhJywgZXJyKTtcbiAgICAgICAgICAgICAgICB0aHJvdyBlcnI7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHN0YXJ0UHJvY2Vzc2luZ0xvb3AoKSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICB2YXIgX2EsIF9iO1xuICAgICAgICAgICAgY29uc3QgeyB2aWRlbyB9ID0gdGhpcy5jb25maWc7XG4gICAgICAgICAgICB3aGlsZSAoIXRoaXMuaXNQbGF5U3RhcnRlZCkge1xuICAgICAgICAgICAgICAgIHlpZWxkIG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiBzZXRUaW1lb3V0KHJlc29sdmUsIDEwMCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgd2hpbGUgKHRydWUpIHtcbiAgICAgICAgICAgICAgICB5aWVsZCBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4gc2V0VGltZW91dChyZXNvbHZlLCAxMDApKTtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBkZXRlY3Rpb25zID0geWllbGQgZmFjZWFwaVxuICAgICAgICAgICAgICAgICAgICAgICAgLmRldGVjdEFsbEZhY2VzKHZpZGVvLCBuZXcgZmFjZWFwaS5UaW55RmFjZURldGVjdG9yT3B0aW9ucygpKVxuICAgICAgICAgICAgICAgICAgICAgICAgLndpdGhGYWNlTGFuZG1hcmtzKCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlc2l6ZWREZXRlY3Rpb25zID0gZmFjZWFwaS5yZXNpemVSZXN1bHRzKGRldGVjdGlvbnMsIHRoaXMuZnJhbWUpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoZGV0ZWN0aW9ucy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBmYWNlID0gbmV3IEZhY2VfMS5GYWNlKGRldGVjdGlvbnNbMF0ubGFuZG1hcmtzLCB0aGlzLmZyYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGZhY2VXaWR0aCA9IGZhY2UuZ2V0V2lkdGgoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGRldmlhdGlvbkZhY2VXaWR0aCA9IE1hdGguYWJzKHRoaXMuZmFjZVdpZHRoIC0gZmFjZVdpZHRoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGRldmlhdGlvbkZhY2VQb3NpdGlvbiA9IGZhY2UuZ2V0RmFjZVBvc2lvdGlvbigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgb3ZlcmxheVZpc2libGUgPSBkZXZpYXRpb25GYWNlV2lkdGggPiB0aGlzLmFsbG93ZWRGYWNlRGV2aWF0aW9uIHx8IGRldmlhdGlvbkZhY2VQb3NpdGlvbiA+IHRoaXMuYWxsb3dlZEZhY2VEZXZpYXRpb24gKiAyO1xuICAgICAgICAgICAgICAgICAgICAgICAgKF9iID0gKF9hID0gdGhpcy5jYW52YXMpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5nZXRDb250ZXh0KCcyZCcpKSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IuY2xlYXJSZWN0KDAsIDAsIHRoaXMuY2FudmFzLndpZHRoLCB0aGlzLmNhbnZhcy5oZWlnaHQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuZGVidWcgJiYgdGhpcy5jYW52YXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmYWNlYXBpLmRyYXcuZHJhd0ZhY2VMYW5kbWFya3ModGhpcy5jYW52YXMsIHJlc2l6ZWREZXRlY3Rpb25zKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubGFzdEZhY2VGcmFtZSA9IHJvdW5kRnJhbWUoKDAsIGdldEZhY2VGcmFtZV8xLmdldEZhY2VGcmFtZSkocmVzaXplZERldGVjdGlvbnNbMF0pKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMub25GcmFtZVByb2Nlc3NlZENhbGxiYWNrKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmYWNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZhY2VGcmFtZTogdGhpcy5sYXN0RmFjZUZyYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRldGVjdGlvbjogcmVzaXplZERldGVjdGlvbnNbMF0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb3ZlcmxheVZpc2libGUsXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGNhcHR1cmVJbWFnZSgpIHtcbiAgICAgICAgdmFyIF9hLCBfYjtcbiAgICAgICAgaWYgKCF0aGlzLnZpZGVvKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1ZpZGVvIG5vdCBpbml0aWFsaXplZCcpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGZyYW1lID0gKF9iID0gKF9hID0gdGhpcy5vdXRwdXRDYW52YXMpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5nZXRDb250ZXh0KCcyZCcpKSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IuZ2V0SW1hZ2VEYXRhKDAsIDAsIHRoaXMudmlkZW8udmlkZW9XaWR0aCwgdGhpcy52aWRlby52aWRlb0hlaWdodCk7XG4gICAgICAgIGNvbnN0IGlucHV0RGF0YSA9IGZyYW1lID09PSBudWxsIHx8IGZyYW1lID09PSB2b2lkIDAgPyB2b2lkIDAgOiBmcmFtZS5kYXRhO1xuICAgICAgICByZXR1cm4gaW5wdXREYXRhIHx8IG5ldyBVaW50OENsYW1wZWRBcnJheSgpO1xuICAgIH1cbn1cbmV4cG9ydHMuU2VsZmllID0gU2VsZmllO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19jcmVhdGVCaW5kaW5nID0gKHRoaXMgJiYgdGhpcy5fX2NyZWF0ZUJpbmRpbmcpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICB2YXIgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IobSwgayk7XG4gICAgaWYgKCFkZXNjIHx8IChcImdldFwiIGluIGRlc2MgPyAhbS5fX2VzTW9kdWxlIDogZGVzYy53cml0YWJsZSB8fCBkZXNjLmNvbmZpZ3VyYWJsZSkpIHtcbiAgICAgIGRlc2MgPSB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24oKSB7IHJldHVybiBtW2tdOyB9IH07XG4gICAgfVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBrMiwgZGVzYyk7XG59KSA6IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgb1trMl0gPSBtW2tdO1xufSkpO1xudmFyIF9fc2V0TW9kdWxlRGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19zZXRNb2R1bGVEZWZhdWx0KSB8fCAoT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCB2KSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIFwiZGVmYXVsdFwiLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2IH0pO1xufSkgOiBmdW5jdGlvbihvLCB2KSB7XG4gICAgb1tcImRlZmF1bHRcIl0gPSB2O1xufSk7XG52YXIgX19pbXBvcnRTdGFyID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydFN0YXIpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICBpZiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSByZXR1cm4gbW9kO1xuICAgIHZhciByZXN1bHQgPSB7fTtcbiAgICBpZiAobW9kICE9IG51bGwpIGZvciAodmFyIGsgaW4gbW9kKSBpZiAoayAhPT0gXCJkZWZhdWx0XCIgJiYgT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG1vZCwgaykpIF9fY3JlYXRlQmluZGluZyhyZXN1bHQsIG1vZCwgayk7XG4gICAgX19zZXRNb2R1bGVEZWZhdWx0KHJlc3VsdCwgbW9kKTtcbiAgICByZXR1cm4gcmVzdWx0O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IFNlbGZpZV8xID0gcmVxdWlyZShcIi4vU2VsZmllXCIpO1xuY29uc3QgUHJvY2Vzc29ycyA9IF9faW1wb3J0U3RhcihyZXF1aXJlKFwiLi9wcm9jZXNzb3JzXCIpKTtcbmNvbnN0IFBpcGVsaW5lID0gX19pbXBvcnRTdGFyKHJlcXVpcmUoXCIuL3BpcGVsaW5lXCIpKTtcbi8vIEB0cy1pZ25vcmVcbndpbmRvdy5TZWxmaWUgPSBTZWxmaWVfMS5TZWxmaWU7XG4vLyBAdHMtaWdub3JlXG53aW5kb3cuU2VsZmllUHJvY2Vzc29ycyA9IFByb2Nlc3NvcnM7XG4vLyBAdHMtaWdub3JlXG53aW5kb3cuU2VsZmllUGlwZWxpbmUgPSBQaXBlbGluZTtcbiIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fYXdhaXRlciA9ICh0aGlzICYmIHRoaXMuX19hd2FpdGVyKSB8fCBmdW5jdGlvbiAodGhpc0FyZywgX2FyZ3VtZW50cywgUCwgZ2VuZXJhdG9yKSB7XG4gICAgZnVuY3Rpb24gYWRvcHQodmFsdWUpIHsgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgUCA/IHZhbHVlIDogbmV3IFAoZnVuY3Rpb24gKHJlc29sdmUpIHsgcmVzb2x2ZSh2YWx1ZSk7IH0pOyB9XG4gICAgcmV0dXJuIG5ldyAoUCB8fCAoUCA9IFByb21pc2UpKShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIGZ1bmN0aW9uIGZ1bGZpbGxlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cbiAgICAgICAgZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3JbXCJ0aHJvd1wiXSh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XG4gICAgICAgIGZ1bmN0aW9uIHN0ZXAocmVzdWx0KSB7IHJlc3VsdC5kb25lID8gcmVzb2x2ZShyZXN1bHQudmFsdWUpIDogYWRvcHQocmVzdWx0LnZhbHVlKS50aGVuKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpOyB9XG4gICAgICAgIHN0ZXAoKGdlbmVyYXRvciA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSkubmV4dCgpKTtcbiAgICB9KTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlBpcGVsaW5lID0gdm9pZCAwO1xuY2xhc3MgUGlwZWxpbmUge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLnN0YWdlcyA9IFtdO1xuICAgIH1cbiAgICBhZGRTdGFnZShzdGFnZSkge1xuICAgICAgICB0aGlzLnN0YWdlcy5wdXNoKHN0YWdlKTtcbiAgICAgICAgcmV0dXJuIHN0YWdlO1xuICAgIH1cbiAgICBwcm9jZXNzKGlucHV0KSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICBsZXQgcmVzdWx0ID0gaW5wdXQ7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IHN0YWdlIG9mIHRoaXMuc3RhZ2VzKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0ID0geWllbGQgc3RhZ2UucHJvY2VzcyhyZXN1bHQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfSk7XG4gICAgfVxufVxuZXhwb3J0cy5QaXBlbGluZSA9IFBpcGVsaW5lO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19hd2FpdGVyID0gKHRoaXMgJiYgdGhpcy5fX2F3YWl0ZXIpIHx8IGZ1bmN0aW9uICh0aGlzQXJnLCBfYXJndW1lbnRzLCBQLCBnZW5lcmF0b3IpIHtcbiAgICBmdW5jdGlvbiBhZG9wdCh2YWx1ZSkgeyByZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBQID8gdmFsdWUgOiBuZXcgUChmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXNvbHZlKHZhbHVlKTsgfSk7IH1cbiAgICByZXR1cm4gbmV3IChQIHx8IChQID0gUHJvbWlzZSkpKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgZnVuY3Rpb24gZnVsZmlsbGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yLm5leHQodmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxuICAgICAgICBmdW5jdGlvbiByZWplY3RlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvcltcInRocm93XCJdKHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cbiAgICAgICAgZnVuY3Rpb24gc3RlcChyZXN1bHQpIHsgcmVzdWx0LmRvbmUgPyByZXNvbHZlKHJlc3VsdC52YWx1ZSkgOiBhZG9wdChyZXN1bHQudmFsdWUpLnRoZW4oZnVsZmlsbGVkLCByZWplY3RlZCk7IH1cbiAgICAgICAgc3RlcCgoZ2VuZXJhdG9yID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMgfHwgW10pKS5uZXh0KCkpO1xuICAgIH0pO1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuUGlwZWxpbmVCYXNpY1N0YWdlID0gdm9pZCAwO1xuY2xhc3MgUGlwZWxpbmVCYXNpY1N0YWdlIHtcbiAgICBjb25zdHJ1Y3RvcihvcGVyYXRpb24pIHtcbiAgICAgICAgdGhpcy5fcmVzdWx0ID0gbnVsbDtcbiAgICAgICAgdGhpcy5faXNQcm9jZXNzZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5vcGVyYXRpb24gPSBvcGVyYXRpb247XG4gICAgfVxuICAgIHByb2Nlc3MoaW5wdXQpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIHRoaXMuX3Jlc3VsdCA9IHlpZWxkIHRoaXMub3BlcmF0aW9uKGlucHV0KTtcbiAgICAgICAgICAgIHRoaXMuX2lzUHJvY2Vzc2VkID0gdHJ1ZTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9yZXN1bHQ7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBnZXRSZXN1bHQoKSB7XG4gICAgICAgIGlmICghdGhpcy5faXNQcm9jZXNzZWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignU3RhZ2UgaGFzIG5vdCBiZWVuIHByb2Nlc3NlZCcpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLl9yZXN1bHQ7XG4gICAgfVxufVxuZXhwb3J0cy5QaXBlbGluZUJhc2ljU3RhZ2UgPSBQaXBlbGluZUJhc2ljU3RhZ2U7XG4iLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2F3YWl0ZXIgPSAodGhpcyAmJiB0aGlzLl9fYXdhaXRlcikgfHwgZnVuY3Rpb24gKHRoaXNBcmcsIF9hcmd1bWVudHMsIFAsIGdlbmVyYXRvcikge1xuICAgIGZ1bmN0aW9uIGFkb3B0KHZhbHVlKSB7IHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIFAgPyB2YWx1ZSA6IG5ldyBQKGZ1bmN0aW9uIChyZXNvbHZlKSB7IHJlc29sdmUodmFsdWUpOyB9KTsgfVxuICAgIHJldHVybiBuZXcgKFAgfHwgKFAgPSBQcm9taXNlKSkoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICBmdW5jdGlvbiBmdWxmaWxsZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XG4gICAgICAgIGZ1bmN0aW9uIHJlamVjdGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yW1widGhyb3dcIl0odmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxuICAgICAgICBmdW5jdGlvbiBzdGVwKHJlc3VsdCkgeyByZXN1bHQuZG9uZSA/IHJlc29sdmUocmVzdWx0LnZhbHVlKSA6IGFkb3B0KHJlc3VsdC52YWx1ZSkudGhlbihmdWxmaWxsZWQsIHJlamVjdGVkKTsgfVxuICAgICAgICBzdGVwKChnZW5lcmF0b3IgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSkpLm5leHQoKSk7XG4gICAgfSk7XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5QaXBlbGluZVNwbGl0dGVyID0gdm9pZCAwO1xuY2xhc3MgUGlwZWxpbmVTcGxpdHRlciB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMuc3RhZ2VzID0gW107XG4gICAgfVxuICAgIGFkZFN0YWdlKHN0YWdlKSB7XG4gICAgICAgIHRoaXMuc3RhZ2VzLnB1c2goc3RhZ2UpO1xuICAgICAgICByZXR1cm4gc3RhZ2U7XG4gICAgfVxuICAgIHByb2Nlc3MoaW5wdXQpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIGxldCByZXN1bHQgPSBpbnB1dDtcbiAgICAgICAgICAgIGZvciAoY29uc3Qgc3RhZ2Ugb2YgdGhpcy5zdGFnZXMpIHtcbiAgICAgICAgICAgICAgICByZXN1bHQgPSB5aWVsZCBzdGFnZS5wcm9jZXNzKGlucHV0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH0pO1xuICAgIH1cbn1cbmV4cG9ydHMuUGlwZWxpbmVTcGxpdHRlciA9IFBpcGVsaW5lU3BsaXR0ZXI7XG4iLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2F3YWl0ZXIgPSAodGhpcyAmJiB0aGlzLl9fYXdhaXRlcikgfHwgZnVuY3Rpb24gKHRoaXNBcmcsIF9hcmd1bWVudHMsIFAsIGdlbmVyYXRvcikge1xuICAgIGZ1bmN0aW9uIGFkb3B0KHZhbHVlKSB7IHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIFAgPyB2YWx1ZSA6IG5ldyBQKGZ1bmN0aW9uIChyZXNvbHZlKSB7IHJlc29sdmUodmFsdWUpOyB9KTsgfVxuICAgIHJldHVybiBuZXcgKFAgfHwgKFAgPSBQcm9taXNlKSkoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICBmdW5jdGlvbiBmdWxmaWxsZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XG4gICAgICAgIGZ1bmN0aW9uIHJlamVjdGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yW1widGhyb3dcIl0odmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxuICAgICAgICBmdW5jdGlvbiBzdGVwKHJlc3VsdCkgeyByZXN1bHQuZG9uZSA/IHJlc29sdmUocmVzdWx0LnZhbHVlKSA6IGFkb3B0KHJlc3VsdC52YWx1ZSkudGhlbihmdWxmaWxsZWQsIHJlamVjdGVkKTsgfVxuICAgICAgICBzdGVwKChnZW5lcmF0b3IgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSkpLm5leHQoKSk7XG4gICAgfSk7XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5QaXBlbGluZVN0YWdlID0gdm9pZCAwO1xuY2xhc3MgUGlwZWxpbmVTdGFnZSB7XG4gICAgY29uc3RydWN0b3IocGlwZWxpbmUpIHtcbiAgICAgICAgdGhpcy5fcmVzdWx0ID0gbnVsbDtcbiAgICAgICAgdGhpcy5faXNQcm9jZXNzZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5waXBlbGluZSA9IHBpcGVsaW5lO1xuICAgIH1cbiAgICBwcm9jZXNzKGlucHV0KSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICB0aGlzLl9yZXN1bHQgPSB5aWVsZCB0aGlzLnBpcGVsaW5lLnByb2Nlc3MoaW5wdXQpO1xuICAgICAgICAgICAgdGhpcy5faXNQcm9jZXNzZWQgPSB0cnVlO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3Jlc3VsdDtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGdldFJlc3VsdCgpIHtcbiAgICAgICAgaWYgKCF0aGlzLl9pc1Byb2Nlc3NlZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdTdGFnZSBoYXMgbm90IGJlZW4gcHJvY2Vzc2VkJyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX3Jlc3VsdDtcbiAgICB9XG59XG5leHBvcnRzLlBpcGVsaW5lU3RhZ2UgPSBQaXBlbGluZVN0YWdlO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlBpcGVsaW5lU3BsaXR0ZXIgPSBleHBvcnRzLlBpcGVsaW5lQmFzaWNTdGFnZSA9IGV4cG9ydHMuUGlwZWxpbmVTdGFnZSA9IGV4cG9ydHMuUGlwZWxpbmUgPSB2b2lkIDA7XG52YXIgUGlwZWxpbmVfMSA9IHJlcXVpcmUoXCIuL1BpcGVsaW5lXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiUGlwZWxpbmVcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIFBpcGVsaW5lXzEuUGlwZWxpbmU7IH0gfSk7XG52YXIgUGlwZWxpbmVTdGFnZV8xID0gcmVxdWlyZShcIi4vUGlwZWxpbmVTdGFnZVwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlBpcGVsaW5lU3RhZ2VcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIFBpcGVsaW5lU3RhZ2VfMS5QaXBlbGluZVN0YWdlOyB9IH0pO1xudmFyIFBpcGVsaW5lQmFzaWNTdGFnZV8xID0gcmVxdWlyZShcIi4vUGlwZWxpbmVCYXNpY1N0YWdlXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiUGlwZWxpbmVCYXNpY1N0YWdlXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBQaXBlbGluZUJhc2ljU3RhZ2VfMS5QaXBlbGluZUJhc2ljU3RhZ2U7IH0gfSk7XG52YXIgUGlwZWxpbmVTcGxpdHRlcl8xID0gcmVxdWlyZShcIi4vUGlwZWxpbmVTcGxpdHRlclwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlBpcGVsaW5lU3BsaXR0ZXJcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIFBpcGVsaW5lU3BsaXR0ZXJfMS5QaXBlbGluZVNwbGl0dGVyOyB9IH0pO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5mdW5jdGlvbiBjcm9wRnJhbWUob3JpZ2luYWxGcmFtZSwgZnJhbWUsIGRhdGEpIHtcbiAgICBjb25zdCByZXN1bHQgPSBuZXcgVWludDhDbGFtcGVkQXJyYXkoZnJhbWUud2lkdGggKiBmcmFtZS5oZWlnaHQgKiA0KTtcbiAgICBsZXQgeyB3aWR0aCwgaGVpZ2h0LCB4LCB5IH0gPSBmcmFtZTtcbiAgICBmb3IgKGxldCBpeSA9IDA7IGl5IDwgaGVpZ2h0OyBpeSsrKSB7XG4gICAgICAgIGZvciAobGV0IGl4ID0gMDsgaXggPCB3aWR0aDsgaXgrKykge1xuICAgICAgICAgICAgY29uc3Qgb3JpZ2luYWxJbmRleCA9IChpeSArIHkpICogb3JpZ2luYWxGcmFtZS53aWR0aCArIChpeCArIHgpO1xuICAgICAgICAgICAgY29uc3QgaW5kZXggPSBpeSAqIHdpZHRoICsgaXg7XG4gICAgICAgICAgICByZXN1bHRbaW5kZXggKiA0XSA9IGRhdGFbb3JpZ2luYWxJbmRleCAqIDRdO1xuICAgICAgICAgICAgcmVzdWx0W2luZGV4ICogNCArIDFdID0gZGF0YVtvcmlnaW5hbEluZGV4ICogNCArIDFdO1xuICAgICAgICAgICAgcmVzdWx0W2luZGV4ICogNCArIDJdID0gZGF0YVtvcmlnaW5hbEluZGV4ICogNCArIDJdO1xuICAgICAgICAgICAgcmVzdWx0W2luZGV4ICogNCArIDNdID0gZGF0YVtvcmlnaW5hbEluZGV4ICogNCArIDNdO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG59XG5leHBvcnRzLmRlZmF1bHQgPSBjcm9wRnJhbWU7XG4iLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMucmVzaXplRnJhbWUgPSBleHBvcnRzLnRvSW1hZ2UgPSBleHBvcnRzLmxhcGxhY2lhbiA9IGV4cG9ydHMuY3JvcEZyYW1lID0gZXhwb3J0cy52YXJpYW5jZSA9IHZvaWQgMDtcbnZhciB2YXJpYW5jZV8xID0gcmVxdWlyZShcIi4vdmFyaWFuY2VcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJ2YXJpYW5jZVwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gX19pbXBvcnREZWZhdWx0KHZhcmlhbmNlXzEpLmRlZmF1bHQ7IH0gfSk7XG52YXIgY3JvcEZyYW1lXzEgPSByZXF1aXJlKFwiLi9jcm9wRnJhbWVcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJjcm9wRnJhbWVcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIF9faW1wb3J0RGVmYXVsdChjcm9wRnJhbWVfMSkuZGVmYXVsdDsgfSB9KTtcbnZhciBsYXBsYWNpYW5fMSA9IHJlcXVpcmUoXCIuL2xhcGxhY2lhblwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImxhcGxhY2lhblwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gX19pbXBvcnREZWZhdWx0KGxhcGxhY2lhbl8xKS5kZWZhdWx0OyB9IH0pO1xudmFyIHRvSW1hZ2VfMSA9IHJlcXVpcmUoXCIuL3RvSW1hZ2VcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJ0b0ltYWdlXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBfX2ltcG9ydERlZmF1bHQodG9JbWFnZV8xKS5kZWZhdWx0OyB9IH0pO1xudmFyIHJlc2l6ZUZyYW1lXzEgPSByZXF1aXJlKFwiLi9yZXNpemVGcmFtZVwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcInJlc2l6ZUZyYW1lXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBfX2ltcG9ydERlZmF1bHQocmVzaXplRnJhbWVfMSkuZGVmYXVsdDsgfSB9KTtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgS0VSTkVMID0gWzAsIDEsIDAsIDEsIC00LCAxLCAwLCAxLCAwXTtcbmZ1bmN0aW9uIGxhcGxhY2lhbihmcmFtZSwgZGF0YSkge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xuICAgICAgICBjb25zdCBuZXdEYXRhID0gbmV3IFVpbnQ4Q2xhbXBlZEFycmF5KGRhdGEubGVuZ3RoKTtcbiAgICAgICAgY29uc3QgVEhJQ0tORVNTID0gMjtcbiAgICAgICAgbGV0IHsgd2lkdGgsIGhlaWdodCB9ID0gZnJhbWU7XG4gICAgICAgIHdpZHRoID0gTWF0aC5mbG9vcih3aWR0aCk7XG4gICAgICAgIGhlaWdodCA9IE1hdGguZmxvb3IoaGVpZ2h0KTtcbiAgICAgICAgZm9yIChsZXQgeSA9IDE7IHkgPCBoZWlnaHQgLSAxOyB5KyspIHtcbiAgICAgICAgICAgIGZvciAobGV0IHggPSAxOyB4IDwgd2lkdGggLSAxOyB4KyspIHtcbiAgICAgICAgICAgICAgICBsZXQgc3VtID0gMDtcbiAgICAgICAgICAgICAgICBsZXQgaW5kZXggPSB5ICogd2lkdGggKiA0ICsgeCAqIDQ7XG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IC0xOyBpIDw9IDE7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBqID0gLTE7IGogPD0gMTsgaisrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBrZXJuZWxJbmRleCA9IChpICsgMSkgKiAzICsgKGogKyAxKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHBpeGVsSW5kZXggPSBpbmRleCArIChpICogd2lkdGggKyBqKSAqIDQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdW0gKz0gZGF0YVtwaXhlbEluZGV4XSAqIEtFUk5FTFtrZXJuZWxJbmRleF0gKiBUSElDS05FU1M7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgc3VtID0gc3VtICogMztcbiAgICAgICAgICAgICAgICBuZXdEYXRhW2luZGV4XSA9IHN1bTtcbiAgICAgICAgICAgICAgICBuZXdEYXRhW2luZGV4ICsgMV0gPSBzdW07XG4gICAgICAgICAgICAgICAgbmV3RGF0YVtpbmRleCArIDJdID0gc3VtO1xuICAgICAgICAgICAgICAgIG5ld0RhdGFbaW5kZXggKyAzXSA9IDI1NTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXNvbHZlKG5ld0RhdGEpO1xuICAgIH0pO1xufVxuZXhwb3J0cy5kZWZhdWx0ID0gbGFwbGFjaWFuO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5mdW5jdGlvbiByZXNpemVGcmFtZShvcmlnaW5hbEZyYW1lLCBuZXdGcmFtZSwgZGF0YSkge1xuICAgIGNvbnN0IG5ld0RhdGEgPSBuZXcgVWludDhDbGFtcGVkQXJyYXkobmV3RnJhbWUud2lkdGggKiBuZXdGcmFtZS5oZWlnaHQgKiA0KTtcbiAgICBjb25zdCBzY2FsZVggPSBvcmlnaW5hbEZyYW1lLndpZHRoIC8gbmV3RnJhbWUud2lkdGg7XG4gICAgY29uc3Qgc2NhbGVZID0gb3JpZ2luYWxGcmFtZS5oZWlnaHQgLyBuZXdGcmFtZS5oZWlnaHQ7XG4gICAgZm9yIChsZXQgeSA9IDA7IHkgPCBuZXdGcmFtZS5oZWlnaHQ7IHkrKykge1xuICAgICAgICBmb3IgKGxldCB4ID0gMDsgeCA8IG5ld0ZyYW1lLndpZHRoOyB4KyspIHtcbiAgICAgICAgICAgIGNvbnN0IHNyY1ggPSB4ICogc2NhbGVYO1xuICAgICAgICAgICAgY29uc3Qgc3JjWSA9IHkgKiBzY2FsZVk7XG4gICAgICAgICAgICBjb25zdCB4MSA9IE1hdGguZmxvb3Ioc3JjWCk7XG4gICAgICAgICAgICBjb25zdCB4MiA9IE1hdGgubWluKE1hdGguY2VpbChzcmNYKSwgb3JpZ2luYWxGcmFtZS53aWR0aCAtIDEpO1xuICAgICAgICAgICAgY29uc3QgeTEgPSBNYXRoLmZsb29yKHNyY1kpO1xuICAgICAgICAgICAgY29uc3QgeTIgPSBNYXRoLm1pbihNYXRoLmNlaWwoc3JjWSksIG9yaWdpbmFsRnJhbWUuaGVpZ2h0IC0gMSk7XG4gICAgICAgICAgICBjb25zdCB0ID0gc3JjWCAtIHgxO1xuICAgICAgICAgICAgY29uc3QgdSA9IHNyY1kgLSB5MTtcbiAgICAgICAgICAgIGNvbnN0IGluZGV4MSA9ICh5MSAqIG9yaWdpbmFsRnJhbWUud2lkdGggKyB4MSkgKiA0O1xuICAgICAgICAgICAgY29uc3QgaW5kZXgyID0gKHkxICogb3JpZ2luYWxGcmFtZS53aWR0aCArIHgyKSAqIDQ7XG4gICAgICAgICAgICBjb25zdCBpbmRleDMgPSAoeTIgKiBvcmlnaW5hbEZyYW1lLndpZHRoICsgeDEpICogNDtcbiAgICAgICAgICAgIGNvbnN0IGluZGV4NCA9ICh5MiAqIG9yaWdpbmFsRnJhbWUud2lkdGggKyB4MikgKiA0O1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCA0OyBpKyspIHtcbiAgICAgICAgICAgICAgICBjb25zdCB0b3AgPSBkYXRhW2luZGV4MSArIGldICogKDEgLSB0KSArIGRhdGFbaW5kZXgyICsgaV0gKiB0O1xuICAgICAgICAgICAgICAgIGNvbnN0IGJvdHRvbSA9IGRhdGFbaW5kZXgzICsgaV0gKiAoMSAtIHQpICsgZGF0YVtpbmRleDQgKyBpXSAqIHQ7XG4gICAgICAgICAgICAgICAgbmV3RGF0YVsoeSAqIG5ld0ZyYW1lLndpZHRoICsgeCkgKiA0ICsgaV0gPSB0b3AgKiAoMSAtIHUpICsgYm90dG9tICogdTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbmV3RGF0YTtcbn1cbmV4cG9ydHMuZGVmYXVsdCA9IHJlc2l6ZUZyYW1lO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5mdW5jdGlvbiB0b0ltYWdlKGZyYW1lLCBkYXRhKSB7XG4gICAgY29uc3QgY2FudmFzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnY2FudmFzJyk7XG4gICAgY2FudmFzLndpZHRoID0gZnJhbWUud2lkdGg7XG4gICAgY2FudmFzLmhlaWdodCA9IGZyYW1lLmhlaWdodDtcbiAgICBjb25zdCBjdHggPSBjYW52YXMuZ2V0Q29udGV4dCgnMmQnKTtcbiAgICBpZiAoIWN0eCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0NvdWxkIG5vdCBnZXQgY2FudmFzIGNvbnRleHQnKTtcbiAgICB9XG4gICAgY29uc3QgaW1hZ2VEYXRhID0gbmV3IEltYWdlRGF0YShkYXRhLCBmcmFtZS53aWR0aCwgZnJhbWUuaGVpZ2h0KTtcbiAgICBjdHgucHV0SW1hZ2VEYXRhKGltYWdlRGF0YSwgMCwgMCk7XG4gICAgY29uc3Qgc3JjID0gY2FudmFzLnRvRGF0YVVSTCgpO1xuICAgIGNhbnZhcy5yZW1vdmUoKTtcbiAgICByZXR1cm4gc3JjO1xufVxuZXhwb3J0cy5kZWZhdWx0ID0gdG9JbWFnZTtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZnVuY3Rpb24gY2FsY3VsYXRlVmFyaWFuY2UoZGF0YSkge1xuICAgIGNvbnN0IGQgPSBuZXcgVWludDhDbGFtcGVkQXJyYXkoZGF0YS5sZW5ndGggLyA0KTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGRhdGEubGVuZ3RoOyBpICs9IDQpIHtcbiAgICAgICAgZFtpIC8gNF0gPSBkYXRhW2ldO1xuICAgIH1cbiAgICBjb25zdCBtZWFuID0gZC5yZWR1Y2UoKGFjYywgdmFsKSA9PiBhY2MgKyB2YWwsIDApIC8gZC5sZW5ndGg7XG4gICAgY29uc3Qgc3F1YXJlZERpZmZlcmVuY2VzID0gW107XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBkLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHNxdWFyZWREaWZmZXJlbmNlcy5wdXNoKE1hdGgucG93KGRbaV0gLSBtZWFuLCAyKSk7XG4gICAgfVxuICAgIGNvbnN0IHZhcmlhbmNlID0gc3F1YXJlZERpZmZlcmVuY2VzLnJlZHVjZSgoYWNjLCB2YWwpID0+IGFjYyArIHZhbCwgMCkgLyBkLmxlbmd0aDtcbiAgICByZXR1cm4gdmFyaWFuY2U7XG59XG5leHBvcnRzLmRlZmF1bHQgPSBjYWxjdWxhdGVWYXJpYW5jZTtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5nZXREaXN0YW5jZSA9IHZvaWQgMDtcbmZ1bmN0aW9uIGdldERpc3RhbmNlKHAxLCBwMikge1xuICAgIHJldHVybiBNYXRoLnNxcnQoTWF0aC5wb3cocDIueCAtIHAxLngsIDIpICsgTWF0aC5wb3cocDIueSAtIHAxLnksIDIpKTtcbn1cbmV4cG9ydHMuZ2V0RGlzdGFuY2UgPSBnZXREaXN0YW5jZTtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5nZXRGYWNlRnJhbWUgPSB2b2lkIDA7XG5jb25zdCBnZXRGYWNlRnJhbWUgPSAocmVzaXplZERldGVjdGlvbnMpID0+IHtcbiAgICBjb25zdCBmcmFtZSA9IHtcbiAgICAgICAgaGVpZ2h0OiByZXNpemVkRGV0ZWN0aW9ucy5kZXRlY3Rpb24uYm94LmhlaWdodCxcbiAgICAgICAgd2lkdGg6IHJlc2l6ZWREZXRlY3Rpb25zLmRldGVjdGlvbi5ib3gud2lkdGgsXG4gICAgICAgIHg6IHJlc2l6ZWREZXRlY3Rpb25zLmRldGVjdGlvbi5ib3gueCxcbiAgICAgICAgeTogcmVzaXplZERldGVjdGlvbnMuZGV0ZWN0aW9uLmJveC55LFxuICAgIH07XG4gICAgcmV0dXJuIGZyYW1lO1xufTtcbmV4cG9ydHMuZ2V0RmFjZUZyYW1lID0gZ2V0RmFjZUZyYW1lO1xuIiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG5cdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHQvLyBubyBtb2R1bGUuaWQgbmVlZGVkXG5cdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbiIsIi8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb25zIGZvciBoYXJtb255IGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uZCA9IChleHBvcnRzLCBkZWZpbml0aW9uKSA9PiB7XG5cdGZvcih2YXIga2V5IGluIGRlZmluaXRpb24pIHtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZGVmaW5pdGlvbiwga2V5KSAmJiAhX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIGtleSkpIHtcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBkZWZpbml0aW9uW2tleV0gfSk7XG5cdFx0fVxuXHR9XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18uZyA9IChmdW5jdGlvbigpIHtcblx0aWYgKHR5cGVvZiBnbG9iYWxUaGlzID09PSAnb2JqZWN0JykgcmV0dXJuIGdsb2JhbFRoaXM7XG5cdHRyeSB7XG5cdFx0cmV0dXJuIHRoaXMgfHwgbmV3IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5cdH0gY2F0Y2ggKGUpIHtcblx0XHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gJ29iamVjdCcpIHJldHVybiB3aW5kb3c7XG5cdH1cbn0pKCk7IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5vID0gKG9iaiwgcHJvcCkgPT4gKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApKSIsIi8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uciA9IChleHBvcnRzKSA9PiB7XG5cdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXHR9XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG59OyIsIi8vIHN0YXJ0dXBcbi8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuLy8gVGhpcyBlbnRyeSBtb2R1bGUgaXMgcmVmZXJlbmNlZCBieSBvdGhlciBtb2R1bGVzIHNvIGl0IGNhbid0IGJlIGlubGluZWRcbnZhciBfX3dlYnBhY2tfZXhwb3J0c19fID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4MjEpO1xuIl0sIm5hbWVzIjpbInQiLCJlIiwibiIsIk9iamVjdCIsInNldFByb3RvdHlwZU9mIiwiX19wcm90b19fIiwiQXJyYXkiLCJoYXNPd25Qcm9wZXJ0eSIsInIiLCJ0aGlzIiwiY29uc3RydWN0b3IiLCJwcm90b3R5cGUiLCJjcmVhdGUiLCJQcm9taXNlIiwibyIsImEiLCJpIiwidSIsIm5leHQiLCJzIiwidGhyb3ciLCJkb25lIiwidmFsdWUiLCJ0aGVuIiwiYXBwbHkiLCJsYWJlbCIsInNlbnQiLCJ0cnlzIiwib3BzIiwicmV0dXJuIiwiU3ltYm9sIiwiaXRlcmF0b3IiLCJUeXBlRXJyb3IiLCJjYWxsIiwicG9wIiwibGVuZ3RoIiwicHVzaCIsImdsb2JhbCIsImZsYWdzIiwiZmxhZ1JlZ2lzdHJ5IiwidXJsRmxhZ3MiLCJwb3B1bGF0ZVVSTEZsYWdzIiwic2V0UGxhdGZvcm0iLCJwbGF0Zm9ybSIsImNvbnNvbGUiLCJ3YXJuIiwicGxhdGZvcm1OYW1lIiwicmVnaXN0ZXJGbGFnIiwiZXZhbHVhdGlvbkZuIiwic2V0SG9vayIsInNldCIsImdldCIsImV2YWx1YXRlRmxhZyIsImdldE51bWJlciIsImdldEJvb2wiLCJnZXRGbGFncyIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImNvbmZpZ3VyYWJsZSIsIkVycm9yIiwic2V0RmxhZ3MiLCJhc3NpZ24iLCJyZXNldCIsImxvY2F0aW9uIiwic2VhcmNoIiwicmVwbGFjZSIsImFyZ3VtZW50cyIsImRlY29kZVVSSUNvbXBvbmVudCIsImpvaW4iLCJ0ZmpzZmxhZ3MiLCJzcGxpdCIsImZvckVhY2giLCJ0b0xvd2VyQ2FzZSIsIk1hcCIsImMiLCJsIiwiZyIsImgiLCJmIiwiZW50cmllcyIsImQiLCJrZXJuZWxOYW1lIiwiYmFja2VuZE5hbWUiLCJoYXMiLCJwIiwidiIsImRlbGV0ZSIsIm0iLCJ5IiwiTWF0aCIsInJhbmRvbSIsIngiLCJtYXgiLCJtaW4iLCJiIiwidyIsIkMiLCJFIiwiUyIsIlIiLCJJIiwiaXNBcnJheSIsIlYiLCJrIiwiQSIsIkQiLCJ0YW5oIiwiZXhwIiwiVCIsImNlaWwiLCJzcXJ0IiwiTiIsInJlcGVhdCIsIkYiLCJzZXRUaW1lb3V0IiwiXyIsInNsaWNlIiwiTyIsIm1hcCIsImNvbmNhdCIsImV2ZXJ5IiwiTSIsInNvcnQiLCJuZXdTaGFwZSIsImtlcHREaW1zIiwiQiIsIkZsb2F0MzJBcnJheSIsIkludDMyQXJyYXkiLCJVaW50OEFycmF5IiwiUCIsIkwiLCJpc05hTiIsImlzRmluaXRlIiwiVyIsIlUiLCJ6IiwiRyIsIkgiLCJTdHJpbmciLCJxIiwiSyIsImoiLCJYIiwiWSIsIiQiLCJRIiwicm91bmQiLCJKIiwicmVkdWNlIiwiWiIsInR0IiwiZXQiLCJub3ciLCJudCIsIk51bWJlciIsImlzSW50ZWdlciIsInJ0IiwiZW5jb2RlIiwib3QiLCJkZWNvZGUiLCJhdCIsIml0IiwiZmxvb3IiLCJzdCIsImZyZWV6ZSIsInNodWZmbGUiLCJjbGFtcCIsIm5lYXJlc3RMYXJnZXJFdmVuIiwic3VtIiwicmFuZFVuaWZvcm0iLCJkaXN0U3F1YXJlZCIsImFzc2VydCIsImFzc2VydFNoYXBlc01hdGNoIiwiYXNzZXJ0Tm9uTnVsbCIsImZsYXR0ZW4iLCJzaXplRnJvbVNoYXBlIiwiaXNTY2FsYXJTaGFwZSIsImFycmF5c0VxdWFsIiwiaXNJbnQiLCJzaXplVG9TcXVhcmlzaFNoYXBlIiwiY3JlYXRlU2h1ZmZsZWRJbmRpY2VzIiwiVWludDMyQXJyYXkiLCJyaWdodFBhZCIsInJlcGVhdGVkVHJ5IiwiaW5mZXJGcm9tSW1wbGljaXRTaGFwZSIsInBhcnNlQXhpc1BhcmFtIiwic3F1ZWV6ZVNoYXBlIiwiZ2V0VHlwZWRBcnJheUZyb21EVHlwZSIsImdldEFycmF5RnJvbURUeXBlIiwiY2hlY2tDb252ZXJzaW9uRm9yRXJyb3JzIiwiaXNWYWxpZER0eXBlIiwiaGFzRW5jb2RpbmdMb3NzIiwiaXNUeXBlZEFycmF5IiwiYnl0ZXNQZXJFbGVtZW50IiwiYnl0ZXNGcm9tU3RyaW5nQXJyYXkiLCJpc1N0cmluZyIsImlzQm9vbGVhbiIsImlzTnVtYmVyIiwiaW5mZXJEdHlwZSIsImlzRnVuY3Rpb24iLCJuZWFyZXN0RGl2aXNvciIsImNvbXB1dGVTdHJpZGVzIiwidG9UeXBlZEFycmF5IiwidG9OZXN0ZWRBcnJheSIsIm1ha2VPbmVzVHlwZWRBcnJheSIsIm1ha2VaZXJvc1R5cGVkQXJyYXkiLCJhc3NlcnROb25OZWdhdGl2ZUludGVnZXJEaW1lbnNpb25zIiwiZmV0Y2giLCJlbmNvZGVTdHJpbmciLCJkZWNvZGVTdHJpbmciLCJsb2NUb0luZGV4IiwiaW5kZXhUb0xvYyIsInV0IiwiYmFja2VuZFRpbWVyIiwibG9nZ2VyIiwiY3QiLCJwcm9maWxlS2VybmVsIiwidGltZSIsImRhdGEiLCJkdHlwZSIsImdldEV4dHJhUHJvZmlsZUluZm8iLCJsb2dLZXJuZWxQcm9maWxlIiwia2VybmVsTXMiLCJlcnJvciIsInJhbmsiLCJzaXplIiwic2hhcGUiLCJ0b1N0cmluZyIsImxvZyIsInB0IiwicGFyc2VGbG9hdCIsInRvRml4ZWQiLCJ2dCIsIm10IiwiZ3QiLCJ2YWx1ZXMiLCJzdHJpZGVzIiwidG9UZW5zb3IiLCJ5dCIsIm1ha2VUZW5zb3IiLCJ4dCIsImJ0Iiwid3QiLCJrZXB0IiwiaXNEaXNwb3NlZEludGVybmFsIiwiZGF0YUlkIiwiaWQiLCJyYW5rVHlwZSIsInRocm93SWZEaXNwb3NlZCIsImFzMUQiLCJhc1NjYWxhciIsInJlc2hhcGUiLCJhczJEIiwiYXMzRCIsImFzNEQiLCJhczVEIiwiYXNUeXBlIiwiY2FzdCIsImJ1ZmZlciIsImJ1ZmZlclN5bmMiLCJkYXRhU3luYyIsImFycmF5IiwiYXJyYXlTeW5jIiwicmVhZCIsInJlYWRTeW5jIiwiYnl0ZXMiLCJkaXNwb3NlIiwiaXNEaXNwb3NlZCIsImRpc3Bvc2VUZW5zb3IiLCJ0b0Zsb2F0IiwidG9JbnQiLCJ0b0Jvb2wiLCJwcmludCIsInJlc2hhcGVBcyIsImV4cGFuZERpbXMiLCJjdW1zdW0iLCJzcXVlZXplIiwiY2xvbmUiLCJvbmVIb3QiLCJmaWxsIiwiZnJvbSIsImR0IiwidGlsZSIsImdhdGhlciIsIm1hdE11bCIsImRvdCIsIm5vcm0iLCJyZXZlcnNlIiwic3RhY2siLCJ1bnN0YWNrIiwicGFkIiwiYmF0Y2hOb3JtYWxpemF0aW9uIiwiYmF0Y2hOb3JtIiwiYWxsIiwiYW55IiwibG9nU3VtRXhwIiwicHJvZCIsIm1lYW4iLCJhcmdNaW4iLCJhcmdNYXgiLCJhZGQiLCJhZGRTdHJpY3QiLCJhdGFuMiIsInN1YiIsInN1YlN0cmljdCIsInBvdyIsInBvd1N0cmljdCIsIm11bCIsIm11bFN0cmljdCIsImRpdiIsImRpdk5vTmFuIiwiZmxvb3JEaXYiLCJkaXZTdHJpY3QiLCJtaW5pbXVtIiwibWluaW11bVN0cmljdCIsIm1heGltdW0iLCJtYXhpbXVtU3RyaWN0IiwibW9kIiwibW9kU3RyaWN0Iiwic3F1YXJlZERpZmZlcmVuY2VTdHJpY3QiLCJ0cmFuc3Bvc2UiLCJub3RFcXVhbCIsIm5vdEVxdWFsU3RyaWN0IiwibGVzcyIsImxlc3NTdHJpY3QiLCJlcXVhbCIsImVxdWFsU3RyaWN0IiwibGVzc0VxdWFsIiwibGVzc0VxdWFsU3RyaWN0IiwiZ3JlYXRlciIsImdyZWF0ZXJTdHJpY3QiLCJncmVhdGVyRXF1YWwiLCJncmVhdGVyRXF1YWxTdHJpY3QiLCJsb2dpY2FsQW5kIiwibG9naWNhbE9yIiwibG9naWNhbE5vdCIsImxvZ2ljYWxYb3IiLCJ3aGVyZSIsIm5lZyIsInNpZ24iLCJpc0luZiIsImV4cG0xIiwibG9nMXAiLCJyc3FydCIsInNxdWFyZSIsInJlY2lwcm9jYWwiLCJhYnMiLCJjbGlwQnlWYWx1ZSIsInJlbHUiLCJyZWx1NiIsImVsdSIsInNlbHUiLCJsZWFreVJlbHUiLCJwcmVsdSIsInNpZ21vaWQiLCJsb2dTaWdtb2lkIiwic29mdHBsdXMiLCJ6ZXJvc0xpa2UiLCJvbmVzTGlrZSIsInNpbiIsImNvcyIsInRhbiIsImFzaW4iLCJhY29zIiwiYXRhbiIsInNpbmgiLCJjb3NoIiwiYXNpbmgiLCJhY29zaCIsImF0YW5oIiwiZXJmIiwic3RlcCIsInNvZnRtYXgiLCJsb2dTb2Z0bWF4IiwicmVzaXplQmlsaW5lYXIiLCJpbWFnZSIsInJlc2l6ZU5lYXJlc3ROZWlnaGJvciIsImNvbnYxZCIsImNvbnYyZCIsImNvbnYyZFRyYW5zcG9zZSIsImRlcHRod2lzZUNvbnYyRCIsImRlcHRod2lzZUNvbnYyZCIsInNlcGFyYWJsZUNvbnYyZCIsImF2Z1Bvb2wiLCJtYXhQb29sIiwibG9jYWxSZXNwb25zZU5vcm1hbGl6YXRpb24iLCJwb29sIiwidmFyaWFibGUiLCJtYWtlVmFyaWFibGUiLCJ1bnNvcnRlZFNlZ21lbnRTdW0iLCJiYXRjaFRvU3BhY2VORCIsInNwYWNlVG9CYXRjaE5EIiwidG9wayIsInN0cmlkZWRTbGljZSIsImRlcHRoVG9TcGFjZSIsImZmdCIsInNwZWN0cmFsIiwiaWZmdCIsInJmZnQiLCJpcmZmdCIsImhhc0luc3RhbmNlIiwiQ3QiLCJFdCIsIlJ0IiwiSXQiLCJrdCIsIlN0IiwidHJhaW5hYmxlIiwibmFtZSIsImluY1JlZiIsImRpc3Bvc2VWYXJpYWJsZSIsIkZ1bmN0aW9uIiwiUjAiLCJSMSIsIlIyIiwiUjMiLCJSNCIsIlI1IiwiUjYiLCJmbG9hdDMyIiwiaW50MzIiLCJib29sIiwiY29tcGxleDY0IiwiQXQiLCJEdCIsIlR0IiwiTnQiLCJGdCIsIl90IiwiU2V0IiwiT3QiLCJNdCIsIm1ha2VUeXBlc01hdGNoIiwiYXNzZXJ0VHlwZXNNYXRjaCIsImlzVGVuc29ySW5MaXN0Iiwic29tZSIsImdldFRlbnNvcnNJbkNvbnRhaW5lciIsIkJ0IiwicmVnaXN0ZXJlZFZhcmlhYmxlcyIsIm5leHRUYXBlTm9kZUlkIiwibnVtQnl0ZXMiLCJudW1UZW5zb3JzIiwibnVtU3RyaW5nVGVuc29ycyIsIm51bURhdGFCdWZmZXJzIiwiZ3JhZGllbnREZXB0aCIsImtlcm5lbERlcHRoIiwic2NvcGVTdGFjayIsIm51bURhdGFNb3Zlc1N0YWNrIiwibmV4dFNjb3BlSWQiLCJ0ZW5zb3JJbmZvIiwiV2Vha01hcCIsInByb2ZpbGluZyIsImFjdGl2ZVByb2ZpbGUiLCJuZXdCeXRlcyIsIm5ld1RlbnNvcnMiLCJwZWFrQnl0ZXMiLCJrZXJuZWxzIiwicmVzdWx0IiwiUHQiLCJFTlYiLCJyZWdpc3RyeSIsInJlZ2lzdHJ5RmFjdG9yeSIsInBlbmRpbmdCYWNrZW5kSW5pdElkIiwic3RhdGUiLCJyZWFkeSIsInBlbmRpbmdCYWNrZW5kSW5pdCIsImJhY2tlbmRJbnN0YW5jZSIsImdldFNvcnRlZEJhY2tlbmRzIiwiaW5pdGlhbGl6ZUJhY2tlbmQiLCJzdWNjZXNzIiwic2V0QmFja2VuZCIsImluaXRpYWxpemVCYWNrZW5kc0FuZFJldHVybkJlc3QiLCJhc3luY0luaXQiLCJiYWNrZW5kTmFtZXMiLCJrZXlzIiwiZmluZEJhY2tlbmQiLCJmaW5kQmFja2VuZEZhY3RvcnkiLCJmYWN0b3J5IiwicmVnaXN0ZXJCYWNrZW5kIiwicHJpb3JpdHkiLCJzZXR1cFJlZ2lzdGVyZWRLZXJuZWxzIiwicHJvZmlsZXIiLCJzZXR1cEZ1bmMiLCJkaXNwb3NlUmVnaXN0ZXJlZEtlcm5lbHMiLCJkaXNwb3NlRnVuYyIsInJlc29sdmUiLCJjYXRjaCIsIm1lc3NhZ2UiLCJyZW1vdmVCYWNrZW5kIiwibW92ZURhdGEiLCJiYWNrZW5kIiwiZGlzcG9zZURhdGEiLCJtb3ZlIiwic2hvdWxkQ2hlY2tGb3JNZW1MZWFrcyIsInRpZHkiLCJzY29wZWRSdW4iLCJzdGFydFNjb3BlIiwiZW5kU2NvcGUiLCJuZXh0VGVuc29ySWQiLCJuZXh0VmFyaWFibGVJZCIsIm1ha2VUZW5zb3JGcm9tRGF0YUlkIiwiYWRkVGFwZU5vZGUiLCJhY3RpdmVTY29wZSIsInJ1bktlcm5lbCIsInJ1bktlcm5lbEZ1bmMiLCJjaGVja0tlcm5lbEZvck1lbUxlYWsiLCJudW1EYXRhSWRzIiwiaXNUYXBlT24iLCJrZWVwIiwia2VybmVsRnVuYyIsImlucHV0cyIsImF0dHJzIiwiZmlsdGVyIiwiYnl0ZXNBZGRlZCIsInRvdGFsQnl0ZXNTbmFwc2hvdCIsInRlbnNvcnNBZGRlZCIsInRvdGFsVGVuc29yc1NuYXBzaG90IiwiaW5wdXRTaGFwZXMiLCJvdXRwdXRTaGFwZXMiLCJ3cml0ZSIsInJlZkNvdW50IiwidHJhY2siLCJkaXNwb3NlVmFyaWFibGVzIiwibWVtb3J5IiwidW5yZWxpYWJsZSIsInJlYXNvbnMiLCJwcm9maWxlIiwib3V0cHV0cyIsInNhdmVkIiwiZ3JhZEZ1bmMiLCJncmFkaWVudCIsImFjdGl2ZVRhcGUiLCJzdGFydFRhcGUiLCJlbmRUYXBlIiwic2NvcGVJZCIsImdyYWRpZW50cyIsIkx0IiwiZ3JhZHMiLCJjdXN0b21HcmFkIiwid2FsbE1zIiwid2luZG93IiwicHJvY2VzcyIsInNlbGYiLCJfdGZlbmdpbmUiLCJXdCIsImRvY3VtZW50IiwiV29ya2VyR2xvYmFsU2NvcGUiLCJVdCIsInZlcnNpb25zIiwibm9kZSIsIm5hdmlnYXRvciIsInVzZXJBZ2VudCIsInRlc3QiLCJ2ZW5kb3IiLCJWdCIsInp0IiwiR3QiLCJIdCIsInF0IiwiYWxwaGEiLCJhbnRpYWxpYXMiLCJwcmVtdWx0aXBsaWVkQWxwaGEiLCJwcmVzZXJ2ZURyYXdpbmdCdWZmZXIiLCJkZXB0aCIsInN0ZW5jaWwiLCJmYWlsSWZNYWpvclBlcmZvcm1hbmNlQ2F2ZWF0IiwiS3QiLCJqdCIsIk9mZnNjcmVlbkNhbnZhcyIsImNyZWF0ZUVsZW1lbnQiLCJhZGRFdmVudExpc3RlbmVyIiwicHJldmVudERlZmF1bHQiLCJnZXRDb250ZXh0IiwiaXNDb250ZXh0TG9zdCIsImRpc2FibGUiLCJERVBUSF9URVNUIiwiU1RFTkNJTF9URVNUIiwiQkxFTkQiLCJESVRIRVIiLCJQT0xZR09OX09GRlNFVF9GSUxMIiwiU0FNUExFX0NPVkVSQUdFIiwiZW5hYmxlIiwiU0NJU1NPUl9URVNUIiwiQ1VMTF9GQUNFIiwiY3VsbEZhY2UiLCJCQUNLIiwiWHQiLCJZdCIsIiR0IiwiUXQiLCJSMzJGIiwiUjE2RiIsIlJHQkExNkYiLCJSR0JBMzJGIiwiUkVEIiwiSEFMRl9GTE9BVCIsIkZMT0FUIiwiUkdCQSIsIkhBTEZfRkxPQVRfT0VTIiwiaW50ZXJuYWxGb3JtYXRGbG9hdCIsImludGVybmFsRm9ybWF0SGFsZkZsb2F0IiwiaW50ZXJuYWxGb3JtYXRQYWNrZWRIYWxmRmxvYXQiLCJpbnRlcm5hbEZvcm1hdFBhY2tlZEZsb2F0IiwidGV4dHVyZUZvcm1hdEZsb2F0IiwiZG93bmxvYWRUZXh0dXJlRm9ybWF0IiwiZG93bmxvYWRVbnBhY2tOdW1DaGFubmVscyIsImRlZmF1bHROdW1DaGFubmVscyIsInRleHR1cmVUeXBlSGFsZkZsb2F0IiwidGV4dHVyZVR5cGVGbG9hdCIsIkp0IiwiZ2V0RXJyb3IiLCJOT19FUlJPUiIsIm5lIiwiZWUiLCJJTlZBTElEX0VOVU0iLCJJTlZBTElEX1ZBTFVFIiwiSU5WQUxJRF9PUEVSQVRJT04iLCJJTlZBTElEX0ZSQU1FQlVGRkVSX09QRVJBVElPTiIsIk9VVF9PRl9NRU1PUlkiLCJDT05URVhUX0xPU1RfV0VCR0wiLCJyZSIsImtlIiwiZ2V0RXh0ZW5zaW9uIiwib2UiLCJjcmVhdGVTaGFkZXIiLCJWRVJURVhfU0hBREVSIiwic2hhZGVyU291cmNlIiwiY29tcGlsZVNoYWRlciIsImdldFNoYWRlclBhcmFtZXRlciIsIkNPTVBJTEVfU1RBVFVTIiwiZ2V0U2hhZGVySW5mb0xvZyIsImFlIiwiRlJBR01FTlRfU0hBREVSIiwidWUiLCJleGVjIiwiREVOU0UiLCJTSEFSRURfQkFUQ0giLCJSRU5ERVIiLCJVUExPQUQiLCJQSVhFTFMiLCJET1dOTE9BRCIsIlVOUEFDS0VEX0ZMT0FUMTYiLCJVTlBBQ0tFRF9GTE9BVDMyIiwiUEFDS0VEXzRYMV9VTlNJR05FRF9CWVRFIiwiUEFDS0VEXzJYMl9GTE9BVDMyIiwiUEFDS0VEXzJYMl9GTE9BVDE2IiwiaWUiLCJzZSIsImNlIiwiY3JlYXRlUHJvZ3JhbSIsImxlIiwibGlua1Byb2dyYW0iLCJnZXRQcm9ncmFtUGFyYW1ldGVyIiwiTElOS19TVEFUVVMiLCJnZXRQcm9ncmFtSW5mb0xvZyIsImhlIiwidmFsaWRhdGVQcm9ncmFtIiwiVkFMSURBVEVfU1RBVFVTIiwiZmUiLCJjcmVhdGVCdWZmZXIiLCJiaW5kQnVmZmVyIiwiQVJSQVlfQlVGRkVSIiwiYnVmZmVyRGF0YSIsIlNUQVRJQ19EUkFXIiwiZGUiLCJFTEVNRU5UX0FSUkFZX0JVRkZFUiIsInBlIiwiY3JlYXRlVGV4dHVyZSIsInZlIiwibWUiLCJjcmVhdGVGcmFtZWJ1ZmZlciIsImdlIiwiZ2V0QXR0cmliTG9jYXRpb24iLCJ2ZXJ0ZXhBdHRyaWJQb2ludGVyIiwiZW5hYmxlVmVydGV4QXR0cmliQXJyYXkiLCJ5ZSIsIlNlIiwiYWN0aXZlVGV4dHVyZSIsIlRFWFRVUkUwIiwiYmluZFRleHR1cmUiLCJURVhUVVJFXzJEIiwieGUiLCJnZXRVbmlmb3JtTG9jYXRpb24iLCJiZSIsIndlIiwidW5pZm9ybTFpIiwiQ2UiLCJiaW5kRnJhbWVidWZmZXIiLCJGUkFNRUJVRkZFUiIsImZyYW1lYnVmZmVyVGV4dHVyZTJEIiwiQ09MT1JfQVRUQUNITUVOVDAiLCJFZSIsIlJlIiwiY2hlY2tGcmFtZWJ1ZmZlclN0YXR1cyIsIkZSQU1FQlVGRkVSX0NPTVBMRVRFIiwiSWUiLCJGUkFNRUJVRkZFUl9JTkNPTVBMRVRFX0FUVEFDSE1FTlQiLCJGUkFNRUJVRkZFUl9JTkNPTVBMRVRFX01JU1NJTkdfQVRUQUNITUVOVCIsIkZSQU1FQlVGRkVSX0lOQ09NUExFVEVfRElNRU5TSU9OUyIsIkZSQU1FQlVGRkVSX1VOU1VQUE9SVEVEIiwiTUFYX0NPTUJJTkVEX1RFWFRVUkVfSU1BR0VfVU5JVFMiLCJBZSIsIkRlIiwiVGUiLCJOZSIsIkZlIiwiX2UiLCJPZSIsImdldFBhcmFtZXRlciIsIk1BWF9URVhUVVJFX1NJWkUiLCJNZSIsIk1BWF9URVhUVVJFX0lNQUdFX1VOSVRTIiwiQmUiLCJQZSIsIkxlIiwiV2UiLCJWZSIsIlVlIiwidGV4SW1hZ2UyRCIsImRlbGV0ZVRleHR1cmUiLCJkZWxldGVGcmFtZWJ1ZmZlciIsInplIiwiZmVuY2VTeW5jIiwiR2UiLCJjYWxsQW5kQ2hlY2siLCJjYW5CZVJlcHJlc2VudGVkIiwiZ2V0V2ViR0xFcnJvck1lc3NhZ2UiLCJnZXRFeHRlbnNpb25PclRocm93IiwiY3JlYXRlVmVydGV4U2hhZGVyIiwiY3JlYXRlRnJhZ21lbnRTaGFkZXIiLCJjcmVhdGVTdGF0aWNWZXJ0ZXhCdWZmZXIiLCJjcmVhdGVTdGF0aWNJbmRleEJ1ZmZlciIsImdldE51bUNoYW5uZWxzIiwidmFsaWRhdGVUZXh0dXJlU2l6ZSIsImJpbmRWZXJ0ZXhCdWZmZXJUb1Byb2dyYW1BdHRyaWJ1dGUiLCJiaW5kVGV4dHVyZVVuaXQiLCJ1bmJpbmRUZXh0dXJlVW5pdCIsImdldFByb2dyYW1Vbmlmb3JtTG9jYXRpb25PclRocm93IiwiZ2V0UHJvZ3JhbVVuaWZvcm1Mb2NhdGlvbiIsImJpbmRUZXh0dXJlVG9Qcm9ncmFtVW5pZm9ybVNhbXBsZXIiLCJiaW5kQ2FudmFzVG9GcmFtZWJ1ZmZlciIsInZpZXdwb3J0IiwiY2FudmFzIiwid2lkdGgiLCJoZWlnaHQiLCJzY2lzc29yIiwiYmluZENvbG9yVGV4dHVyZVRvRnJhbWVidWZmZXIiLCJ1bmJpbmRDb2xvclRleHR1cmVGcm9tRnJhbWVidWZmZXIiLCJ2YWxpZGF0ZUZyYW1lYnVmZmVyIiwiZ2V0RnJhbWVidWZmZXJFcnJvck1lc3NhZ2UiLCJnZXRCYXRjaERpbSIsImdldFJvd3NDb2xzIiwiZ2V0U2hhcGVBczNEIiwiZ2V0VGV4dHVyZVNoYXBlRnJvbUxvZ2ljYWxTaGFwZSIsImlzUmVzaGFwZUZyZWUiLCJnZXRXZWJHTE1heFRleHR1cmVTaXplIiwicmVzZXRNYXhUZXh0dXJlU2l6ZSIsInJlc2V0TWF4VGV4dHVyZXNJblNoYWRlciIsImdldE1heFRleHR1cmVzSW5TaGFkZXIiLCJnZXRXZWJHTERpc2pvaW50UXVlcnlUaW1lclZlcnNpb24iLCJoYXNFeHRlbnNpb24iLCJpc1dlYkdMVmVyc2lvbkVuYWJsZWQiLCJpc0NhcGFibGVPZlJlbmRlcmluZ1RvRmxvYXRUZXh0dXJlIiwiaXNEb3dubG9hZEZsb2F0VGV4dHVyZUVuYWJsZWQiLCJpc1dlYkdMRmVuY2VFbmFibGVkIiwiSGUiLCJxZSIsIktlIiwiamUiLCJYZSIsIlllIiwiJGUiLCJRZSIsIkplIiwiWmUiLCJ0biIsImVuIiwibm4iLCJybiIsIm9uIiwiYW4iLCJzbiIsInVuIiwiY24iLCJsbiIsImhuIiwiZm4iLCJkbiIsInBuIiwidm4iLCJtbiIsImluZGV4T2YiLCJnbiIsInluIiwieG4iLCJibiIsInduIiwiQ24iLCJFbiIsIlJuIiwiSW4iLCJrbiIsIlNuIiwiQW4iLCJlbmRzV2l0aCIsInN1YnN0cmluZyIsIm9wZXJhIiwic3Vic3RyIiwiRG4iLCJjb21wbGV4XyIsImNvbXBsZXgiLCIkcmVhbCIsIiRpbWFnIiwiVG4iLCJyZWFsXyIsInJlYWwiLCIkaW5wdXQiLCJObiIsImltYWdfIiwiaW1hZyIsIkZuIiwiX24iLCJPbiIsIk1uIiwiQm4iLCJQbiIsIkxuIiwiV24iLCJVbiIsIlZuIiwiem4iLCJHbiIsIkhuIiwicW4iLCJsaW5zcGFjZSIsIktuIiwiam4iLCJvbmVzTGlrZV8iLCJYbiIsIiR4IiwiemVyb3NMaWtlXyIsIlluIiwiY29uY2F0XyIsImF4aXMiLCJ0ciIsIiRuIiwiY29uY2F0MWRfIiwiUW4iLCJjb25jYXQyZF8iLCJKbiIsImNvbmNhdDNkXyIsIlpuIiwiY29uY2F0NGRfIiwic3BsaXRfIiwiZXIiLCJleHBvcnRzIiwiZ2xvYmFsVGhpcyIsIm5yIiwiY2hhckNvZGVBdCIsInMwIiwiczEiLCJzMiIsImRvdWJsZSIsInF1aWNrIiwiYWxlYSIsInJyIiwieG9yMTI4Iiwib3IiLCJ4b3J3b3ciLCJhciIsIkRhdGUiLCJ4b3JzaGlmdDciLCJpciIsInhvcjQwOTYiLCJzciIsInR5Y2hlaSIsInVyIiwiZW50cm9weSIsInJhbmRvbUJ5dGVzIiwiY3J5cHRvIiwibXNDcnlwdG8iLCJnZXRSYW5kb21WYWx1ZXMiLCJwbHVnaW5zIiwic2NyZWVuIiwicGFzcyIsImZyb21DaGFyQ29kZSIsImNyIiwibHIiLCJzdGREZXYiLCJuZXh0VmFsIiwiTmFOIiwidHJ1bmNhdGVkIiwidXBwZXIiLCJsb3dlciIsIm5leHRWYWx1ZSIsImlzVmFsaWRUcnVuY2F0ZWQiLCJjb252ZXJ0VmFsdWUiLCJociIsImJldGEiLCJyYW5kdSIsInJhbmRuIiwiZnIiLCJjYW5SZXR1cm5GbG9hdCIsInJhbmdlIiwiZHIiLCJwciIsInZyIiwiYmF0Y2hUb1NwYWNlTkRfIiwibXIiLCJicm9hZGNhc3RUb18iLCJ1bnNoaWZ0IiwiaW5wdXQiLCJnciIsImNhc3RfIiwieXIiLCJjbG9uZV8iLCJ4ciIsImN1bXN1bV8iLCJwZXJtdXRlZFgiLCJiciIsImRlcHRoVG9TcGFjZV8iLCJ3ciIsImV4cGFuZERpbXNfIiwic3BsaWNlIiwiT3IiLCJDciIsImV5ZV8iLCJMciIsIkVyIiwibXVsdGlub21pYWxfIiwibXVsdGlub21pYWwiLCJsb2dpdHMyRCIsIlJyIiwib25lSG90XyIsIiRpbmRpY2VzIiwiSXIiLCJwYWRfIiwicGFkZGluZ3MiLCJjb25zdGFudFZhbHVlIiwia3IiLCJwYWQxZF8iLCJTciIsInBhZDJkXyIsIkFyIiwicGFkM2RfIiwiRHIiLCJwYWQ0ZF8iLCJUciIsInJhbmRfIiwiTnIiLCJyYW5kb21Ob3JtYWxfIiwiRnIiLCJyYW5kb21HYW1tYV8iLCJfciIsInJhbmRvbVVuaWZvcm1fIiwicmVzaGFwZV8iLCJNciIsInNwYWNlVG9CYXRjaE5EXyIsIkJyIiwic3F1ZWV6ZV8iLCJQciIsInN0YWNrXyIsInRpbGVfIiwicmVwcyIsIldyIiwidHJ1bmNhdGVkTm9ybWFsXyIsIlVyIiwidW5zdGFja18iLCJWciIsInpyIiwiR3IiLCJIciIsInFyIiwiS3IiLCJqciIsIlhyIiwicHJlcGFyZUFuZFZhbGlkYXRlIiwiJHIiLCJRciIsIkpyIiwiWnIiLCJzbGljZVJhbmsiLCJudW1VcGRhdGVzIiwic2xpY2VTaXplIiwib3V0cHV0U2l6ZSIsInRvIiwidmFsaWRhdGVVcGRhdGVTaGFwZSIsInZhbGlkYXRlSW5wdXQiLCJjYWxjdWxhdGVTaGFwZXMiLCJlbyIsIm5vIiwicm8iLCJvbyIsIk1JTl9TQUZFX0lOVEVHRVIiLCJNQVhfU0FGRV9JTlRFR0VSIiwiYW8iLCJpbyIsInNvIiwidW8iLCJhc3NlcnRQYXJhbXNWYWxpZCIsIm1hc2tUb0F4ZXMiLCJjb21wdXRlT3V0U2hhcGUiLCJzdGFydEZvckF4aXMiLCJzdG9wRm9yQXhpcyIsImlzU2xpY2VDb250aW5vdXMiLCJjb21wdXRlRmxhdE9mZnNldCIsImNvIiwibW8iLCJsbyIsImhvIiwiZ3JhZCIsImZvIiwicG8iLCJ2byIsImdvIiwic29mdG1heF8iLCJsb2dpdHMiLCJkaW0iLCJ5byIsImxvZ1NvZnRtYXhfIiwieG8iLCJkYXRhTW92ZXIiLCJkYXRhSWRzQ291bnQiLCJibyIsIndvIiwiZmxvYXRQcmVjaXNpb24iLCJlcHNpbG9uIiwiYmF0Y2hNYXRNdWwiLCJmdXNlZEJhdGNoTWF0TXVsIiwidHJhbnNwb3NlQSIsInRyYW5zcG9zZUIiLCJiaWFzIiwiYWN0aXZhdGlvbiIsInByZWx1QWN0aXZhdGlvbldlaWdodHMiLCJhZGROIiwic3VidHJhY3QiLCJtdWx0aXBseSIsInJlYWxEaXZpZGUiLCJzZWxlY3QiLCJzcXVhcmVkRGlmZmVyZW5jZSIsImVsdURlciIsImludCIsImNsaXAiLCJjb21wbGV4QWJzIiwiZnVzZWRDb252MmQiLCJjb252SW5mbyIsImNvbnYyZERlcklucHV0IiwiY29udjJkRGVyRmlsdGVyIiwiZnVzZWREZXB0aHdpc2VDb252MkQiLCJkZXB0aHdpc2VDb252MkREZXJJbnB1dCIsImRlcHRod2lzZUNvbnYyRERlckZpbHRlciIsImNvbnYzZCIsImNvbnYzZERlcklucHV0IiwiY29udjNkRGVyRmlsdGVyIiwibWF4UG9vbEJhY2twcm9wIiwiYXZnUG9vbEJhY2twcm9wIiwiYXZnUG9vbDNkIiwiYXZnUG9vbDNkQmFja3Byb3AiLCJtYXhQb29sM2QiLCJtYXhQb29sM2RCYWNrcHJvcCIsImdhdGhlck5EIiwic2NhdHRlck5EIiwicmVzaXplQmlsaW5lYXJCYWNrcHJvcCIsInJlc2l6ZU5lYXJlc3ROZWlnaGJvckJhY2twcm9wIiwibG9jYWxSZXNwb25zZU5vcm1hbGl6YXRpb240RCIsIkxSTkdyYWQiLCJub25NYXhTdXBwcmVzc2lvbiIsImNyb3BBbmRSZXNpemUiLCJzcGFyc2VUb0RlbnNlIiwiZGlhZyIsIkNvIiwiRW8iLCJSbyIsIklvIiwiVG8iLCJTbyIsImtvIiwiTm8iLCJBbyIsIkZvIiwidG9wIiwiYm90dG9tIiwibGVmdCIsInJpZ2h0IiwidHlwZSIsIkRvIiwiX28iLCJwYWRJbmZvIiwib3V0SGVpZ2h0Iiwib3V0V2lkdGgiLCJiYXRjaFNpemUiLCJkYXRhRm9ybWF0IiwiaW5IZWlnaHQiLCJpbldpZHRoIiwiaW5DaGFubmVscyIsIm91dENoYW5uZWxzIiwic3RyaWRlSGVpZ2h0Iiwic3RyaWRlV2lkdGgiLCJmaWx0ZXJIZWlnaHQiLCJmaWx0ZXJXaWR0aCIsImVmZmVjdGl2ZUZpbHRlckhlaWdodCIsImVmZmVjdGl2ZUZpbHRlcldpZHRoIiwiZGlsYXRpb25IZWlnaHQiLCJkaWxhdGlvbldpZHRoIiwiaW5TaGFwZSIsIm91dFNoYXBlIiwiZmlsdGVyU2hhcGUiLCJmcm9udCIsImJhY2siLCJvdXREZXB0aCIsImluRGVwdGgiLCJzdHJpZGVEZXB0aCIsImZpbHRlckRlcHRoIiwiZWZmZWN0aXZlRmlsdGVyRGVwdGgiLCJkaWxhdGlvbkRlcHRoIiwiT28iLCJNbyIsIkJvIiwiUG8iLCJMbyIsIldvIiwiVW8iLCJjYXN0VGVuc29yIiwicmVzaGFwZVRlbnNvciIsImxpbnNwYWNlSW1wbCIsInVwY2FzdFR5cGUiLCJheGVzQXJlSW5uZXJNb3N0RGltcyIsImNvbWJpbmVMb2NhdGlvbnMiLCJjb21wdXRlT3V0QW5kUmVkdWNlU2hhcGVzIiwiZXhwYW5kU2hhcGVUb0tlZXBEaW0iLCJhc3NlcnRBeGVzQXJlSW5uZXJNb3N0RGltcyIsImdldEF4ZXNQZXJtdXRhdGlvbiIsImdldFVuZG9BeGVzUGVybXV0YXRpb24iLCJnZXRJbm5lck1vc3RBeGVzIiwiZ2V0QnJvYWRjYXN0RGltcyIsImdldFJlZHVjdGlvbkF4ZXMiLCJhc3NlcnRBbmRHZXRCcm9hZGNhc3RTaGFwZSIsImFzc2VydFBhcmFtc0NvbnNpc3RlbnQiLCJjb21wdXRlUG9vbDJESW5mbyIsImNvbXB1dGVQb29sM0RJbmZvIiwiY29tcHV0ZUNvbnYyREluZm8iLCJjb21wdXRlQ29udjNESW5mbyIsImNvbXB1dGVEZWZhdWx0UGFkIiwidHVwbGVWYWx1ZXNBcmVPbmUiLCJlaXRoZXJTdHJpZGVzT3JEaWxhdGlvbnNBcmVPbmUiLCJjb252ZXJ0Q29udjJERGF0YUZvcm1hdCIsIlBBUkFMTEVMSVpFX1RIUkVTSE9MRCIsImNvbXB1dGVPcHRpbWFsV2luZG93U2l6ZSIsIlZvIiwiem8iLCJHbyIsIkhvIiwiUEkiLCJxbyIsIktvIiwiam8iLCJZbyIsInNlbGVjdGVkSW5kaWNlcyIsIlhvIiwibnVtVmFsaWRPdXRwdXRzIiwic2VsZWN0ZWRTY29yZXMiLCJzY29yZSIsImJveEluZGV4Iiwic3VwcHJlc3NCZWdpbkluZGV4IiwiSm8iLCIkbyIsIlFvIiwic3ViYXJyYXkiLCJabyIsInRhIiwiZWEiLCJpbmRleCIsIm5hIiwicmEiLCJvdXRwdXRTaGFwZSIsInZhcmlhYmxlTmFtZXMiLCJ1c2VyQ29kZSIsIm9hIiwicGFja2VkSW5wdXRzIiwicGFja2VkT3V0cHV0IiwiYWEiLCJ3aW5kb3dTaXplIiwiaW5TaXplIiwiaWEiLCJzYSIsInVhIiwidmVyc2lvbiIsImF0dHJpYnV0ZSIsInZhcnlpbmdWcyIsInZhcnlpbmdGcyIsInRleHR1cmUyRCIsIm91dHB1dCIsImRlZmluZU91dHB1dCIsImRlZmluZVNwZWNpYWxOYU4iLCJkZWZpbmVTcGVjaWFsSW5mIiwiZGVmaW5lUm91bmQiLCJjYSIsImxhIiwiaGEiLCJmYSIsInNoYXBlSW5mbyIsImxvZ2ljYWxTaGFwZSIsImlzVW5pZm9ybSIsInBhIiwiZGEiLCJjaGFyQXQiLCJ0b1VwcGVyQ2FzZSIsIndhIiwidGV4U2hhcGUiLCJmbGF0T2Zmc2V0IiwidmEiLCJtYSIsImdhIiwiaXNQYWNrZWQiLCJ5YSIsInhhIiwiYmEiLCJDYSIsIkVhIiwiSlNPTiIsInBhcnNlIiwic3RyaW5naWZ5IiwiUmEiLCJJYSIsImthIiwiU2EiLCJBYSIsIk5hIiwiRmEiLCJfYSIsIk9hIiwiTWEiLCJCYSIsIlBhIiwiTGEiLCJzdXBwb3J0c0Jyb2FkY2FzdGluZyIsIldhIiwiZ2V0Q3VzdG9tU2V0dXBGdW5jIiwibWluTG9jIiwiZ2V0VW5pZm9ybUxvY2F0aW9uTm9UaHJvdyIsIm1heExvYyIsImdsIiwidW5pZm9ybTFmIiwiVWEiLCJWYSIsInphIiwiR2EiLCJIYSIsInFhIiwiS2EiLCJqYSIsIlhhIiwiWWEiLCIkYSIsIlFhIiwiSmEiLCJaYSIsInRpIiwiZWkiLCJuaSIsInJpIiwib2kiLCJvdXRQYWNraW5nU2NoZW1lIiwiYWkiLCJpaSIsImJsb2NrU2l6ZSIsImdldEhlaWdodENvb3JkU3RyaW5nIiwiZ2V0V2lkdGhDb29yZFN0cmluZyIsImdldERlcHRoQ29vcmRTdHJpbmciLCJnZXRPdXRwdXREZXB0aFNpemUiLCJnZXRJbnB1dFNhbXBsaW5nU3RyaW5nIiwic2kiLCJ1aSIsIm91dFRleFVzYWdlIiwiY2kiLCJsaSIsImhpIiwicGkiLCJ2aSIsInZhbHVlTG9jIiwibWkiLCJnaSIsInNsaWNlRGltIiwieWkiLCJ4aSIsImJpIiwiVWludDE2QXJyYXkiLCJ3aSIsInRleFBhcmFtZXRlcmkiLCJURVhUVVJFX1dSQVBfUyIsIkNMQU1QX1RPX0VER0UiLCJURVhUVVJFX1dSQVBfVCIsIlRFWFRVUkVfTUlOX0ZJTFRFUiIsIk5FQVJFU1QiLCJURVhUVVJFX01BR19GSUxURVIiLCJDaSIsIkVpIiwiUmkiLCJVTlNJR05FRF9CWVRFIiwiSWkiLCJraSIsIlNpIiwiQWkiLCJEaSIsIlRpIiwiUElYRUxfUEFDS19CVUZGRVIiLCJTVFJFQU1fUkVBRCIsInJlYWRQaXhlbHMiLCJOaSIsImdldEJ1ZmZlclN1YkRhdGEiLCJGaSIsIl9pIiwiT2kiLCJNaSIsImNyZWF0ZVZlcnRleEJ1ZmZlciIsImNyZWF0ZUluZGV4QnVmZmVyIiwiY3JlYXRlRmxvYXQzMk1hdHJpeFRleHR1cmUiLCJjcmVhdGVGbG9hdDE2TWF0cml4VGV4dHVyZSIsImNyZWF0ZVVuc2lnbmVkQnl0ZXNNYXRyaXhUZXh0dXJlIiwiY3JlYXRlUGFja2VkTWF0cml4VGV4dHVyZSIsImNyZWF0ZUZsb2F0MTZQYWNrZWRNYXRyaXhUZXh0dXJlIiwiYmluZFZlcnRleFByb2dyYW1BdHRyaWJ1dGVTdHJlYW1zIiwidXBsb2FkRGVuc2VNYXRyaXhUb1RleHR1cmUiLCJ1cGxvYWRQaXhlbERhdGFUb1RleHR1cmUiLCJjcmVhdGVCdWZmZXJGcm9tT3V0cHV0VGV4dHVyZSIsImRvd25sb2FkRmxvYXQzMk1hdHJpeEZyb21CdWZmZXIiLCJkb3dubG9hZEJ5dGVFbmNvZGVkRmxvYXRNYXRyaXhGcm9tT3V0cHV0VGV4dHVyZSIsImRvd25sb2FkUGFja2VkTWF0cml4RnJvbUJ1ZmZlciIsImRvd25sb2FkTWF0cml4RnJvbVBhY2tlZE91dHB1dFRleHR1cmUiLCJCaSIsIm91dHB1dFRleHR1cmUiLCJwcm9ncmFtIiwiZGlzcG9zZWQiLCJ2ZXJ0ZXhBdHRyc0FyZUJvdW5kIiwiaXRlbXNUb1BvbGwiLCJ0ZXh0dXJlRmxvYXRFeHRlbnNpb24iLCJkZWJ1ZyIsInRleHR1cmVIYWxmRmxvYXRFeHRlbnNpb24iLCJjb2xvckJ1ZmZlckZsb2F0RXh0ZW5zaW9uIiwiY29sb3JCdWZmZXJIYWxmRmxvYXRFeHRlbnNpb24iLCJ2ZXJ0ZXhCdWZmZXIiLCJpbmRleEJ1ZmZlciIsImZyYW1lYnVmZmVyIiwidGV4dHVyZUNvbmZpZyIsImZpbmlzaCIsImRlbGV0ZUJ1ZmZlciIsImRlbGV0ZU1hdHJpeFRleHR1cmUiLCJkb3dubG9hZE1hdHJpeERyaXZlciIsImNyZWF0ZUJ1ZmZlckZyb21UZXh0dXJlIiwiYmluZFRleHR1cmVUb0ZyYW1lQnVmZmVyIiwidW5iaW5kVGV4dHVyZVRvRnJhbWVCdWZmZXIiLCJjcmVhdGVBbmRXYWl0Rm9yRmVuY2UiLCJjcmVhdGVGZW5jZSIsInBvbGxGZW5jZSIsIlNZTkNfR1BVX0NPTU1BTkRTX0NPTVBMRVRFIiwiZmx1c2giLCJjbGllbnRXYWl0U3luYyIsIkFMUkVBRFlfU0lHTkFMRUQiLCJDT05ESVRJT05fU0FUSVNGSUVEIiwiYmVnaW5RdWVyeSIsImVuZFF1ZXJ5IiwiaXNRdWVyeUF2YWlsYWJsZSIsInF1ZXJ5IiwiaXNGZW5jZVBhc3NlZCIsImRvd25sb2FkTWF0cml4RnJvbVBhY2tlZFRleHR1cmUiLCJhdHRhY2hTaGFkZXIiLCJzZXRQcm9ncmFtIiwiZGVsZXRlUHJvZ3JhbSIsInVzZVByb2dyYW0iLCJnZXRBdHRyaWJ1dGVMb2NhdGlvbiIsInNldElucHV0TWF0cml4VGV4dHVyZSIsInRocm93SWZOb1Byb2dyYW0iLCJzZXRPdXRwdXRNYXRyaXhUZXh0dXJlIiwic2V0T3V0cHV0TWF0cml4VGV4dHVyZURyaXZlciIsInNldE91dHB1dFBhY2tlZE1hdHJpeFRleHR1cmUiLCJzZXRPdXRwdXRNYXRyaXhXcml0ZVJlZ2lvbiIsInNldE91dHB1dE1hdHJpeFdyaXRlUmVnaW9uRHJpdmVyIiwic2V0T3V0cHV0UGFja2VkTWF0cml4V3JpdGVSZWdpb24iLCJkZWJ1Z1ZhbGlkYXRlIiwiZXhlY3V0ZVByb2dyYW0iLCJkcmF3RWxlbWVudHMiLCJUUklBTkdMRVMiLCJVTlNJR05FRF9TSE9SVCIsImJsb2NrVW50aWxBbGxQcm9ncmFtc0NvbXBsZXRlZCIsImdldFF1ZXJ5VGltZXJFeHRlbnNpb24iLCJkaXNqb2ludFF1ZXJ5VGltZXJFeHRlbnNpb24iLCJnZXRRdWVyeVRpbWVyRXh0ZW5zaW9uV2ViR0wyIiwiZ2V0UXVlcnlUaW1lckV4dGVuc2lvbldlYkdMMSIsImNyZWF0ZVF1ZXJ5IiwiVElNRV9FTEFQU0VEX0VYVCIsImNyZWF0ZVF1ZXJ5RVhUIiwiYmVnaW5RdWVyeUVYVCIsImVuZFF1ZXJ5RVhUIiwid2FpdEZvclF1ZXJ5QW5kR2V0VGltZSIsImdldFF1ZXJ5VGltZSIsImdldFF1ZXJ5UGFyYW1ldGVyIiwiUVVFUllfUkVTVUxUIiwiZ2V0UXVlcnlPYmplY3RFWFQiLCJRVUVSWV9SRVNVTFRfRVhUIiwiUVVFUllfUkVTVUxUX0FWQUlMQUJMRSIsImRpc2pvaW50IiwiR1BVX0RJU0pPSU5UX0VYVCIsIlFVRVJZX1JFU1VMVF9BVkFJTEFCTEVfRVhUIiwiYWRkSXRlbVRvUG9sbCIsInBvbGxJdGVtcyIsImlzRG9uZUZuIiwicmVzb2x2ZUZuIiwiUGkiLCJ0ZXhEYXRhIiwiTGkiLCJXaSIsIlVpIiwiZGVwdGhSYWRpdXMiLCJWaSIsInppIiwiR2kiLCJIaSIsInFpIiwic2VlZExvYyIsIktpIiwiamkiLCJYaSIsIllpIiwiJGkiLCJRaSIsIkppIiwiWmkiLCJ0cyIsImVzIiwibnMiLCJycyIsIm9zIiwiYXMiLCJpcyIsInNzIiwidXMiLCJudW1TZWdtZW50cyIsImNzIiwibHMiLCJocyIsInN0YXJ0TG9jIiwidW5pZm9ybTFpdiIsImZzIiwiZHMiLCJwcyIsImdwZ3B1IiwibnVtVXNlZFRleHR1cmVzIiwibnVtRnJlZVRleHR1cmVzIiwiZnJlZVRleHR1cmVzIiwibG9nRW5hYmxlZCIsInVzZWRUZXh0dXJlcyIsImFjcXVpcmVUZXh0dXJlIiwidnMiLCJtcyIsInNoaWZ0IiwicmVsZWFzZVRleHR1cmUiLCJnZXROdW1Vc2VkVGV4dHVyZXMiLCJnZXROdW1GcmVlVGV4dHVyZXMiLCJncyIsInlzIiwieHMiLCJicyIsIndzIiwiQ3MiLCJFcyIsIklzIiwia3MiLCJTcyIsIkFzIiwiRHMiLCJUcyIsIk5zIiwiRnMiLCJfcyIsIk9zIiwiTXMiLCJCcyIsIlBzIiwiTHMiLCJXcyIsIlVzIiwiVnMiLCJ6cyIsIkdzIiwicXMiLCJLcyIsImpzIiwiWHMiLCJZcyIsIiRzIiwiUXMiLCJacyIsInBlbmRpbmdSZWFkIiwicGVuZGluZ0Rpc3Bvc2FsIiwiV2Vha1NldCIsImRhdGFSZWZDb3VudCIsIm51bUJ5dGVzSW5HUFUiLCJ1cGxvYWRXYWl0TXMiLCJkb3dubG9hZFdhaXRNcyIsIndhcm5lZEFib3V0TWVtb3J5IiwicGVuZGluZ0RlbGV0ZXMiLCJiaW5hcnlDYWNoZSIsImdwZ3B1Q3JlYXRlZExvY2FsbHkiLCJ0ZXh0dXJlTWFuYWdlciIsIm51bU1CQmVmb3JlV2FybmluZyIsImRldmljZVBpeGVsUmF0aW8iLCJjcHVCYWNrZW5kIiwiY2hlY2tOdW1lcmljYWxQcm9ibGVtcyIsInVzYWdlIiwiY29tcGxleFRlbnNvcnMiLCJydW5XZWJHTFByb2dyYW0iLCJjb252ZXJ0QW5kQ2FjaGVPbkNQVSIsImFjdGl2ZVRpbWVycyIsImdldFZhbHVlc0Zyb21UZXh0dXJlIiwidGV4dHVyZSIsInByb2dyYW1UaW1lcnNTdGFjayIsInN0YXJ0VGltZXIiLCJzdGFydE1zIiwiZW5kTXMiLCJlbmRUaW1lciIsInJlbGVhc2VHUFVEYXRhIiwib3JpZ0RhdGFJZCIsImNvbXB1dGVCeXRlcyIsImdldFRleHR1cmUiLCJ1cGxvYWRUb0dQVSIsImdldERhdGFJbmZvIiwiZ2V0Q1BVQmFja2VuZCIsInNob3VsZEV4ZWN1dGVPbkNQVSIsImdldEdQR1BVQ29udGV4dCIsIm1ha2VPdXRwdXQiLCJjb21waWxlQW5kUnVuIiwic2hhbGxvd1NsaWNlIiwicGFja2VkVW5hcnlPcCIsIm1ha2VDb21wbGV4Q29tcG9uZW50VGVuc29ySW5mbyIsInBhY2tlZEJpbmFyeU9wIiwiYXJnUmVkdWNlIiwiYXJnUmVkdWNlUGFja2VkIiwic2VnT3BDb21wdXRlIiwiYXJnTWluTWF4UmVkdWNlIiwiY29tcGxleFNlcGFyYWJsZUJpbmFyeU9wIiwiY29udjJkQnlNYXRNdWwiLCJjb252MmRXaXRoSW0yUm93IiwicGFja2VkUmVzaGFwZSIsImZmdEltcGwiLCJtYWtlVGVuc29ySW5mbyIsInVucGFja1RlbnNvciIsInBhY2tUZW5zb3IiLCJ1bmlmb3JtVmFsdWVzIiwiZ2V0QW5kU2F2ZUJpbmFyeSIsInNvdXJjZSIsIndlYkdMUHJvZ3JhbSIsInVuaWZvcm1Mb2NhdGlvbnMiLCJpblNoYXBlSW5mb3MiLCJvdXRTaGFwZUluZm8iLCJpbmZMb2MiLCJuYW5Mb2MiLCJ1bmlmb3JtMWZ2IiwiZ2V0VGV4dHVyZU1hbmFnZXIiLCJIVE1MQ2FudmFzRWxlbWVudCIsInJlbW92ZSIsImZsb2F0UHJlY2lzaW9uVmFsdWUiLCJ0dSIsInNxdWFyZV8iLCJldSIsIm51Iiwic3F1YXJlZERpZmZlcmVuY2VfIiwicnUiLCJhYnNfIiwib3UiLCJhY29zXyIsImF1IiwiYWNvc2hfIiwiaXUiLCJhc2luXyIsInN1IiwiYXNpbmhfIiwidXUiLCJhdGFuXyIsImN1IiwiYXRhbmhfIiwibHUiLCJjZWlsXyIsImh1IiwiY2xpcEJ5VmFsdWVfIiwiZnUiLCJjb3NfIiwiZHUiLCJjb3NoXyIsInB1IiwiZXJmXyIsInZ1IiwiZXhwXyIsIm11IiwiZXhwbTFfIiwiZ3UiLCJmbG9vcl8iLCJ5dSIsImxvZ18iLCJ4dSIsImxvZzFwXyIsImJ1IiwibG9nU2lnbW9pZF8iLCJ3dSIsIm5lZ18iLCJDdSIsInJlY2lwcm9jYWxfIiwiRXUiLCJyb3VuZF8iLCJSdSIsInJzcXJ0XyIsIkl1Iiwic2lnbW9pZF8iLCJrdSIsInNpZ25fIiwiU3UiLCJpc05hTl8iLCJBdSIsImlzSW5mXyIsIkR1IiwiaXNGaW5pdGVfIiwiVHUiLCJzaW5fIiwiTnUiLCJzaW5oXyIsIkZ1Iiwic29mdHBsdXNfIiwiX3UiLCJzcXJ0XyIsIk91Iiwic3RlcF8iLCJNdSIsInRhbl8iLCJCdSIsInRhbmhfIiwiUHUiLCJVdSIsIkx1IiwiV3UiLCJWdSIsInZhcmlhbmNlIiwic2NhbGUiLCJvZmZzZXQiLCJ2YXJpYW5jZUVwc2lsb24iLCJ6dSIsIkd1IiwiYmF0Y2hOb3JtYWxpemF0aW9uMmRfIiwiSHUiLCJiYXRjaE5vcm1hbGl6YXRpb24zZF8iLCJxdSIsImJhdGNoTm9ybWFsaXphdGlvbjRkXyIsIkt1IiwiYmF0Y2hOb3JtYWxpemF0aW9uXyIsImp1IiwiYmF0Y2hOb3JtXyIsIlh1IiwiYmF0Y2hOb3JtMmRfIiwiWXUiLCJiYXRjaE5vcm0zZF8iLCIkdSIsImJhdGNoTm9ybTRkXyIsIlF1IiwibG9naWNhbEFuZF8iLCJKdSIsImxvZ2ljYWxOb3RfIiwiWnUiLCJsb2dpY2FsT3JfIiwiJGIiLCJ0YyIsImxvZ2ljYWxYb3JfIiwiZWMiLCJ3aGVyZV8iLCIkY29uZGl0aW9uIiwibmMiLCJyYyIsImFkZF8iLCJvYyIsImFkZE5fIiwiYWMiLCJhZGRTdHJpY3RfIiwiaWMiLCJhdGFuMl8iLCJzYyIsImRpdl8iLCJsYyIsInVjIiwiZGl2Tm9OYW5fIiwiY2MiLCJkaXZTdHJpY3RfIiwiZmxvb3JEaXZfIiwiaGMiLCJtYXhpbXVtXyIsImZjIiwibWF4aW11bVN0cmljdF8iLCJkYyIsIm1pbmltdW1fIiwicGMiLCJtaW5pbXVtU3RyaWN0XyIsInZjIiwibW9kXyIsIm1jIiwibW9kU3RyaWN0XyIsImdjIiwibXVsXyIsInljIiwibXVsU3RyaWN0XyIsInhjIiwicG93XyIsImJjIiwicG93U3RyaWN0XyIsIndjIiwic3F1YXJlZERpZmZlcmVuY2VTdHJpY3RfIiwiQ2MiLCJzdWJfIiwiRWMiLCJzdWJTdHJpY3RfIiwiUmMiLCJlcXVhbF8iLCJJYyIsImVxdWFsU3RyaWN0XyIsImtjIiwiZ3JlYXRlcl8iLCJTYyIsImdyZWF0ZXJFcXVhbF8iLCJBYyIsImdyZWF0ZXJFcXVhbFN0cmljdF8iLCJEYyIsImdyZWF0ZXJTdHJpY3RfIiwiVGMiLCJsZXNzXyIsIk5jIiwibGVzc0VxdWFsXyIsIkZjIiwibGVzc0VxdWFsU3RyaWN0XyIsIl9jIiwibGVzc1N0cmljdF8iLCJPYyIsIm5vdEVxdWFsXyIsIk1jIiwibm90RXF1YWxTdHJpY3RfIiwiQmMiLCJQYyIsIkxjIiwiZ2F0aGVyXyIsImRpbVNpemUiLCJpbmRpY2VzIiwiV2MiLCJ1bnNvcnRlZFNlZ21lbnRTdW1fIiwiVWMiLCJWYyIsImR5NEQiLCJxYyIsImpjIiwiemMiLCJHYyIsImR5NUQiLCJIYyIsImNvbnYxZF8iLCJjb252MmRfIiwiWGMiLCJLYyIsImNvbnYzZF8iLCIkZmlsdGVyIiwieDVEIiwiY29udjJkRGVyRmlsdGVyXyIsIng0RCIsImNvbnYyZERlcklucHV0XyIsIlljIiwiZGVwdGh3aXNlQ29udjJkXyIsIiRjIiwiUWMiLCJkZXB0aHdpc2VDb252MmREZXJJbnB1dF8iLCJkZXB0aHdpc2VDb252MmREZXJGaWx0ZXJfIiwiSmMiLCJzZXBhcmFibGVDb252MmRfIiwiWmMiLCJjb252MmRUcmFuc3Bvc2VfIiwidGwiLCJjb252M2RUcmFuc3Bvc2VfIiwiZWwiLCJtYXRNdWxfIiwibmwiLCJkb3RfIiwicmwiLCJvdXRlclByb2R1Y3RfIiwib2wiLCJyZXZlcnNlXyIsImFsIiwicmV2ZXJzZTFkXyIsImlsIiwicmV2ZXJzZTJkXyIsInNsIiwicmV2ZXJzZTNkXyIsInVsIiwicmV2ZXJzZTRkXyIsImNsIiwiJGR5IiwibGwiLCJpbnB1dDREIiwiaGwiLCJtYXhQb29sXyIsImZsIiwiYXZnUG9vbF8iLCJkbCIsInBvb2xfIiwicGwiLCJtYXhQb29sM2RfIiwiaW5wdXQ1RCIsInZsIiwiYXZnUG9vbDNkXyIsIm1sIiwic2xpY2VfIiwiYmVnaW4iLCJzbGljZTFkXyIsInlsIiwic2xpY2UyZF8iLCJ4bCIsInNsaWNlM2RfIiwiYmwiLCJzbGljZTRkXyIsIndsIiwiQ2wiLCJhbGxfIiwiRWwiLCJhbnlfIiwiUmwiLCJhcmdNYXhfIiwiSWwiLCJhcmdNaW5fIiwia2wiLCJsb2dTdW1FeHBfIiwiU2wiLCJtYXhfIiwiYXhlcyIsIkFsIiwibWVhbl8iLCJEbCIsIm1pbl8iLCJUbCIsIm1vbWVudHNfIiwiTmwiLCJzdW1fIiwiRmwiLCJwcm9kXyIsIl9sIiwiZWx1XyIsImR5IiwiT2wiLCJsZWFreVJlbHVfIiwiTWwiLCJwcmVsdV8iLCJCbCIsInJlbHVfIiwiUGwiLCJyZWx1Nl8iLCJMbCIsInNlbHVfIiwiV2wiLCJ0cmFuc3Bvc2VfIiwicGVybSIsIlVsIiwibG9jYWxSZXNwb25zZU5vcm1hbGl6YXRpb25fIiwiVmwiLCJub3JtXyIsInpsIiwiYmFzaWNMU1RNQ2VsbF8iLCJHbCIsIm11bHRpUk5OQ2VsbF8iLCJIbCIsIm1vdmluZ0F2ZXJhZ2VfIiwicWwiLCJzdHJpZGVkU2xpY2VfIiwiS2wiLCJ0b3BrXyIsImpsIiwic2NhdHRlck5EXyIsInVwZGF0ZXMiLCJYbCIsImZmdF8iLCJZbCIsImlmZnRfIiwiJGwiLCJyZmZ0XyIsIlFsIiwiaXJmZnRfIiwiSmwiLCJabCIsInNwYXJzZVRvRGVuc2VfIiwiJHNwYXJzZUluZGljZXMiLCIkc3BhcnNlVmFsdWVzIiwiJGRlZmF1bHRWYWx1ZSIsInRoIiwiZ2F0aGVyTkRfIiwiZWgiLCJkaWFnXyIsIm5oIiwiZHJvcG91dF8iLCJyaCIsImNoIiwib2giLCJoYW5uV2luZG93XyIsImFoIiwiaGFtbWluZ1dpbmRvd18iLCJpaCIsImZyYW1lXyIsInNoIiwic3RmdF8iLCJ1aCIsImhhbm5XaW5kb3ciLCJoYW1taW5nV2luZG93IiwiZnJhbWUiLCJzdGZ0IiwibGgiLCJOT05FIiwiTUVBTiIsIlNVTSIsIlNVTV9CWV9OT05aRVJPX1dFSUdIVFMiLCJoaCIsImFic29sdXRlRGlmZmVyZW5jZV8iLCJmaCIsImNvbXB1dGVXZWlnaHRlZExvc3NfIiwiZGgiLCJjb3NpbmVEaXN0YW5jZV8iLCJwaCIsImhpbmdlTG9zc18iLCJ2aCIsImh1YmVyTG9zc18iLCJtaCIsImxvZ0xvc3NfIiwiZ2giLCJtZWFuU3F1YXJlZEVycm9yXyIsInloIiwic2lnbW9pZENyb3NzRW50cm9weV8iLCJ4aCIsInNvZnRtYXhDcm9zc0VudHJvcHlfIiwiYmgiLCJSZWR1Y3Rpb24iLCJhYnNvbHV0ZURpZmZlcmVuY2UiLCJjb21wdXRlV2VpZ2h0ZWRMb3NzIiwiY29zaW5lRGlzdGFuY2UiLCJoaW5nZUxvc3MiLCJodWJlckxvc3MiLCJsb2dMb3NzIiwibWVhblNxdWFyZWRFcnJvciIsInNpZ21vaWRDcm9zc0VudHJvcHkiLCJzb2Z0bWF4Q3Jvc3NFbnRyb3B5Iiwid2giLCJDaCIsImJhbmRQYXJ0XyIsIkVoIiwiZ3JhbVNjaG1pZHRfIiwiUmgiLCJxcl8iLCJJaCIsImJhbmRQYXJ0IiwiZ3JhbVNjaG1pZHQiLCJraCIsIk5FR0FUSVZFX0lORklOSVRZIiwibWF4T3V0cHV0U2l6ZSIsImlvdVRocmVzaG9sZCIsInNjb3JlVGhyZXNob2xkIiwic29mdE5tc1NpZ21hIiwiU2giLCJyZXNpemVCaWxpbmVhcl8iLCJhbGlnbkNvcm5lcnMiLCJuZXdIZWlnaHQiLCJuZXdXaWR0aCIsIkFoIiwicmVzaXplTmVhcmVzdE5laWdoYm9yXyIsImJhdGNoSW1hZ2VzIiwiRGgiLCJub25NYXhTdXBwcmVzc2lvbl8iLCJib3hlcyIsInNjb3JlcyIsIk5oIiwibm9uTWF4U3VwcHJlc3Npb25XaXRoU2NvcmVfIiwiX2giLCJjcm9wQW5kUmVzaXplXyIsImltYWdlcyIsImJveEluZCIsIm1ldGhvZCIsImV4dHJhcG9sYXRpb25WYWx1ZSIsImNyb3BTaXplIiwiT2giLCJub25NYXhTdXBwcmVzc2lvbkFzeW5jIiwibm9uTWF4U3VwcHJlc3Npb25XaXRoU2NvcmUiLCJub25NYXhTdXBwcmVzc2lvbldpdGhTY29yZUFzeW5jIiwiTWgiLCJCaCIsIlBoIiwiTGgiLCJXaCIsImZ1c2VkTWF0TXVsXyIsIlVoIiwiZnVzZWRDb252MmRfIiwiZGlsYXRpb25zIiwiZGltUm91bmRpbmdNb2RlIiwiVmgiLCJmdXNlZERlcHRod2lzZUNvbnYyZF8iLCJ6aCIsIkdoIiwibGluYWxnIiwibG9zc2VzIiwiZnVzZWQiLCJzaWduYWwiLCJjb252M2RUcmFuc3Bvc2UiLCJvcCIsImJhdGNoTm9ybWFsaXphdGlvbjJkIiwiYmF0Y2hOb3JtYWxpemF0aW9uM2QiLCJiYXRjaE5vcm1hbGl6YXRpb240ZCIsImJhdGNoTm9ybTJkIiwiYmF0Y2hOb3JtM2QiLCJiYXRjaE5vcm00ZCIsImJvb2xlYW5NYXNrQXN5bmMiLCJjb25jYXQxZCIsImNvbmNhdDJkIiwiY29uY2F0M2QiLCJjb25jYXQ0ZCIsIm91dGVyUHJvZHVjdCIsInJldmVyc2UxZCIsInJldmVyc2UyZCIsInJldmVyc2UzZCIsInJldmVyc2U0ZCIsInNsaWNlMWQiLCJzbGljZTJkIiwic2xpY2UzZCIsInNsaWNlNGQiLCJtb21lbnRzIiwid2hlcmVBc3luYyIsImJyb2FkY2FzdFRvIiwiZXllIiwicGFkMWQiLCJwYWQyZCIsInBhZDNkIiwicGFkNGQiLCJyYW5kIiwicmFuZG9tTm9ybWFsIiwicmFuZG9tR2FtbWEiLCJyYW5kb21Vbmlmb3JtIiwidHJ1bmNhdGVkTm9ybWFsIiwic2V0ZGlmZjFkQXN5bmMiLCJvbmVzIiwic2NhbGFyIiwidGVuc29yIiwidGVuc29yMWQiLCJ0ZW5zb3IyZCIsInRlbnNvcjNkIiwidGVuc29yNGQiLCJ0ZW5zb3I1ZCIsInRlbnNvcjZkIiwiemVyb3MiLCJiYXNpY0xTVE1DZWxsIiwibXVsdGlSTk5DZWxsIiwibW92aW5nQXZlcmFnZSIsImRyb3BvdXQiLCJpblRvcEtBc3luYyIsIkhoIiwicWgiLCJsaW5lYXIiLCJLaCIsImZpcnN0VXNlIiwiYnJvYWRjYXN0ZWRCaW5hcnlDb21wbGV4T3AiLCJicm9hZGNhc3RlZEJpbmFyeU9wIiwiaHlwb3QiLCJ0cnVuYyIsIlBPU0lUSVZFX0lORklOSVRZIiwibWF4UG9vbFBvc2l0aW9ucyIsInBvb2wzZCIsIm1heFBvb2wzZFBvc2l0aW9ucyIsImZmdEJhdGNoIiwiaXNFeHBvbmVudE9mMiIsImZmdFJhZGl4MiIsImZvdXJpZXJUcmFuc2Zvcm1CeU1hdG11bCIsInNjYXR0ZXIiLCJqaCIsIlhoIiwiWWgiLCIkaCIsIlFoIiwiSmgiLCJaaCIsInBpeGVscyIsIm51bUNoYW5uZWxzIiwiSFRNTFZpZGVvRWxlbWVudCIsIkhUTUxJbWFnZUVsZW1lbnQiLCJ2aWRlb1dpZHRoIiwidmlkZW9IZWlnaHQiLCJkcmF3SW1hZ2UiLCJ0ZiIsImVmIiwibmYiLCJwZXJmb3JtYW5jZSIsInRleHRFbmNvZGVyIiwiVGV4dEVuY29kZXIiLCJUZXh0RGVjb2RlciIsInJmIiwiYWYiLCJ1dGlsIiwiaHJ0aW1lIiwic2YiLCJ1aW50MTYiLCJ1aW50OCIsInVmIiwiY2YiLCJxdWFudGl6YXRpb24iLCJsZiIsImJ5dGVMZW5ndGgiLCJoZiIsIkJ1ZmZlciIsIkJsb2IiLCJhdG9iIiwiYnRvYSIsImZmIiwiZGYiLCJwZiIsInRyaW0iLCJ2ZiIsIm1vZGVsVG9wb2xvZ3kiLCJBcnJheUJ1ZmZlciIsImRhdGVTYXZlZCIsIm1vZGVsVG9wb2xvZ3lUeXBlIiwibW9kZWxUb3BvbG9neUJ5dGVzIiwid2VpZ2h0U3BlY3NCeXRlcyIsIndlaWdodFNwZWNzIiwid2VpZ2h0RGF0YUJ5dGVzIiwid2VpZ2h0RGF0YSIsIm1mIiwic2F2ZVJvdXRlcnMiLCJsb2FkUm91dGVycyIsImdldEluc3RhbmNlIiwiaW5zdGFuY2UiLCJyZWdpc3RlclNhdmVSb3V0ZXIiLCJyZWdpc3RlckxvYWRSb3V0ZXIiLCJnZXRTYXZlSGFuZGxlcnMiLCJnZXRIYW5kbGVycyIsImdldExvYWRIYW5kbGVycyIsImdmIiwieWYiLCJtYW5hZ2VycyIsInJlZ2lzdGVyTWFuYWdlciIsImdldE1hbmFnZXIiLCJnZXRTY2hlbWVzIiwieGYiLCJzY2hlbWUiLCJwYXRoIiwiYmYiLCJsb2FkIiwicmVtb3ZlTW9kZWwiLCJzYXZlIiwibW9kZWxBcnRpZmFjdHNJbmZvIiwid2YiLCJDZiIsIkVmIiwiaW5kZXhlZERCIiwibW96SW5kZXhlZERCIiwid2Via2l0SW5kZXhlZERCIiwibXNJbmRleGVkREIiLCJzaGltSW5kZXhlZERCIiwiUmYiLCJjcmVhdGVPYmplY3RTdG9yZSIsImtleVBhdGgiLCJJZiIsIm1vZGVsUGF0aCIsImRhdGFiYXNlQWN0aW9uIiwib3BlbiIsIm9udXBncmFkZW5lZWRlZCIsIm9uc3VjY2VzcyIsInRyYW5zYWN0aW9uIiwib2JqZWN0U3RvcmUiLCJjbG9zZSIsIm1vZGVsQXJ0aWZhY3RzIiwib25lcnJvciIsIm9uY29tcGxldGUiLCJwdXQiLCJVUkxfU0NIRU1FIiwia2YiLCJzdGFydHNXaXRoIiwiU2YiLCJsaXN0TW9kZWxzIiwiZ2V0QWxsIiwiQWYiLCJEZiIsIlRmIiwiTmYiLCJGZiIsIl9mIiwiT2YiLCJNZiIsImluZm8iLCJ0b3BvbG9neSIsIm1vZGVsTWV0YWRhdGEiLCJCZiIsIlBmIiwibG9jYWxTdG9yYWdlIiwiTFMiLCJzZXRJdGVtIiwiZm9ybWF0IiwiZ2VuZXJhdGVkQnkiLCJjb252ZXJ0ZWRCeSIsInVzZXJEZWZpbmVkTWV0YWRhdGEiLCJyZW1vdmVJdGVtIiwiZ2V0SXRlbSIsImJ5dGVPZmZzZXQiLCJMZiIsIldmIiwia2V5IiwiR2YiLCJIZiIsIm1vZGVsVG9wb2xvZ3lGaWxlTmFtZSIsIndlaWdodERhdGFGaWxlTmFtZSIsIlVSTCIsImNyZWF0ZU9iamVjdFVSTCIsInBhdGhzIiwid2VpZ2h0cyIsIndlaWdodHNNYW5pZmVzdCIsImpzb25BbmNob3IiLCJkb3dubG9hZCIsImhyZWYiLCJkaXNwYXRjaEV2ZW50IiwiTW91c2VFdmVudCIsIndlaWdodERhdGFBbmNob3IiLCJxZiIsImZpbGVzIiwiRmlsZVJlYWRlciIsIm9ubG9hZCIsInRhcmdldCIsImNoZWNrTWFuaWZlc3RBbmRXZWlnaHRGaWxlcyIsInJlYWRBc0FycmF5QnVmZmVyIiwicmVhZEFzVGV4dCIsIktmIiwiamYiLCJmZXRjaEZ1bmMiLCJyZXF1ZXN0SW5pdCIsImlzQmluYXJ5Iiwib25Qcm9ncmVzcyIsImFycmF5QnVmZmVyIiwiWGYiLCJtYW5pZmVzdEVudHJ5IiwiZ3JvdXBPZmZzZXQiLCJzaXplQnl0ZXMiLCJZZiIsIkRFRkFVTFRfTUVUSE9EIiwid2VpZ2h0UGF0aFByZWZpeCIsImJvZHkiLCJGb3JtRGF0YSIsImFwcGVuZCIsIm9rIiwicmVzcG9uc2VzIiwic3RhdHVzIiwianNvbiIsImxvYWRXZWlnaHRzIiwibGFzdEluZGV4T2YiLCJVUkxfU0NIRU1FX1JFR0VYIiwiJGYiLCJtYXRjaCIsIlFmIiwiSmYiLCJuZCIsIlpmIiwidGQiLCJzYXZlSGFuZGxlciIsImVkIiwiYnJvd3NlckZpbGVzIiwiYnJvd3NlckhUVFBSZXF1ZXN0IiwiY29uY2F0ZW5hdGVBcnJheUJ1ZmZlcnMiLCJkZWNvZGVXZWlnaHRzIiwiZW5jb2RlV2VpZ2h0cyIsImdyb3VwIiwic3BlY3MiLCJmcm9tTWVtb3J5IiwidHJhaW5pbmdDb25maWciLCJnZXRNb2RlbEFydGlmYWN0c0luZm9Gb3JKU09OIiwiaHR0cCIsImlzSFRUUFNjaGVtZSIsIndlaWdodHNMb2FkZXJGYWN0b3J5Iiwid2l0aFNhdmVIYW5kbGVyIiwiY29weU1vZGVsIiwibW92ZU1vZGVsIiwicmQiLCJjb25mdXNpb25NYXRyaXhfIiwib2QiLCJjb25mdXNpb25NYXRyaXgiLCJhZCIsImZyb21QaXhlbHNfIiwiSW1hZ2VEYXRhIiwicmVhZHlTdGF0ZSIsImdldEltYWdlRGF0YSIsInRvUGl4ZWxzIiwiVWludDhDbGFtcGVkQXJyYXkiLCJwdXRJbWFnZURhdGEiLCJmcm9tUGl4ZWxzIiwic2QiLCJnZXRDbGFzc05hbWUiLCJjbGFzc05hbWUiLCJmcm9tQ29uZmlnIiwidWQiLCJjbGFzc05hbWVNYXAiLCJnZXRNYXAiLCJyZWdpc3RlciIsImNkIiwibGQiLCJTZXJpYWxpemFibGUiLCJTZXJpYWxpemF0aW9uTWFwIiwicmVnaXN0ZXJDbGFzcyIsImRkIiwicGQiLCJ2ZCIsIm1kIiwiVEVTVF9FUFNJTE9OX0ZMT0FUMTYiLCJleHBlY3RBcnJheXNDbG9zZSIsInRlc3RFcHNpbG9uIiwiZXhwZWN0UHJvbWlzZVRvRmFpbCIsImZhaWwiLCJleHBlY3RBcnJheXNFcXVhbCIsImV4cGVjdE51bWJlcnNDbG9zZSIsImV4cGVjdFZhbHVlc0luUmFuZ2UiLCJleHBlY3RBcnJheUJ1ZmZlcnNFcXVhbCIsImV4cGVjdCIsInRvRXF1YWwiLCJnZCIsInlkIiwiZ3BncHVfdXRpbCIsIndlYmdsX3V0aWwiLCJmb3JjZUhhbGZGbG9hdCIsIk1hdGhCYWNrZW5kV2ViR0wiLCJzZXRXZWJHTENvbnRleHQiLCJHUEdQVUNvbnRleHQiLCJ4ZCIsIm1pbmltaXplIiwiY29tcHV0ZUdyYWRpZW50cyIsImFwcGx5R3JhZGllbnRzIiwiaXRlcmF0aW9uc18iLCJpbmNyZW1lbnRJdGVyYXRpb25zIiwiaXRlcmF0aW9ucyIsInNhdmVJdGVyYXRpb25zIiwiZ2V0V2VpZ2h0cyIsInNldFdlaWdodHMiLCJleHRyYWN0SXRlcmF0aW9ucyIsImJkIiwibGVhcm5pbmdSYXRlIiwicmhvIiwiYWNjdW11bGF0ZWRHcmFkcyIsImFjY3VtdWxhdGVkVXBkYXRlcyIsIm9yaWdpbmFsTmFtZSIsImdldENvbmZpZyIsIndkIiwiaW5pdGlhbEFjY3VtdWxhdG9yVmFsdWUiLCJDZCIsImJldGExIiwiYmV0YTIiLCJhY2N1bXVsYXRlZEZpcnN0TW9tZW50IiwiYWNjdW11bGF0ZWRTZWNvbmRNb21lbnQiLCJhY2NCZXRhMSIsImFjY0JldGEyIiwiRWQiLCJkZWNheSIsImFjY3VtdWxhdGVkV2VpZ2h0ZWRJbmZOb3JtIiwiaXRlcmF0aW9uIiwiUmQiLCJzZXRMZWFybmluZ1JhdGUiLCJJZCIsIm1vbWVudHVtIiwidXNlTmVzdGVyb3YiLCJhY2N1bXVsYXRpb25zIiwic2V0TW9tZW50dW0iLCJrZCIsImFjY3VtdWxhdGVkTWVhblNxdWFyZXMiLCJhY2N1bXVsYXRlZE1vbWVudHMiLCJhY2N1bXVsYXRlZE1lYW5HcmFkcyIsImNlbnRlcmVkIiwiU2QiLCJzZ2QiLCJybXNwcm9wIiwiYWRhbSIsImFkYWRlbHRhIiwiYWRhbWF4IiwiYWRhZ3JhZCIsIkFkIiwiRGQiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJzZXRJbW1lZGlhdGUiLCJUZCIsImRyYXdDb250b3VyIiwiY3R4IiwicG9pbnRzIiwiaXNDbG9zZWQiLCJiZWdpblBhdGgiLCJwcmV2SWR4IiwibW92ZVRvIiwibGluZVRvIiwic3Ryb2tlIiwiZXh0ZW5kU3RhdGljcyIsIl9fZXh0ZW5kcyIsIl9fIiwiX19hc3NpZ24iLCJfX2F3YWl0ZXIiLCJ0aGlzQXJnIiwiX2FyZ3VtZW50cyIsImdlbmVyYXRvciIsInJlamVjdCIsImZ1bGZpbGxlZCIsInJlamVjdGVkIiwiX19nZW5lcmF0b3IiLCJ2ZXJiIiwiX19zcHJlYWRBcnJheXMiLCJEaW1lbnNpb25zIiwiaXNWYWxpZE51bWJlciIsIl93aWR0aCIsIl9oZWlnaHQiLCJpc1RlbnNvciIsImlzVGVuc29yMUQiLCJpc1RlbnNvcjJEIiwiaXNUZW5zb3IzRCIsImlzVGVuc29yNEQiLCJpc0Zsb2F0IiwibnVtIiwiaXNFdmVuIiwicHJlYyIsImlzRGltZW5zaW9ucyIsIm9iaiIsImNvbXB1dGVSZXNoYXBlZERpbWVuc2lvbnMiLCJpbnB1dFNpemUiLCJnZXRDZW50ZXJQb2ludCIsInB0cyIsIlBvaW50Iiwic3RhcnQiLCJJbmZpbml0eSIsImlzVmFsaWRQcm9iYWJsaXRpeSIsIl94IiwiX3kiLCJtYWduaXR1ZGUiLCJCb3giLCJfYm94IiwiYWxsb3dOZWdhdGl2ZURpbWVuc2lvbnMiLCJib3giLCJpc0Jib3giLCJpc1JlY3QiLCJhc3NlcnRJc1ZhbGlkQm94IiwicmVjdCIsImNhbGxlZSIsInZhbCIsInRvU3F1YXJlIiwiZGlmZiIsInJlc2NhbGUiLCJzY2FsZVgiLCJzY2FsZVkiLCJwYWRYIiwicGFkWSIsImNsaXBBdEltYWdlQm9yZGVycyIsImltZ1dpZHRoIiwiaW1nSGVpZ2h0IiwiY2xpcHBlZFgiLCJjbGlwcGVkWSIsInN4Iiwic3kiLCJwYWRBdEJvcmRlcnMiLCJpbWFnZUhlaWdodCIsImltYWdlV2lkdGgiLCJlZHgiLCJlZHkiLCJleCIsImV5IiwiZHgiLCJjYWxpYnJhdGUiLCJyZWdpb24iLCJCb3VuZGluZ0JveCIsIl9zdXBlciIsIk9iamVjdERldGVjdGlvbiIsImNsYXNzU2NvcmUiLCJyZWxhdGl2ZUJveCIsImltYWdlRGltcyIsIl9pbWFnZURpbXMiLCJfc2NvcmUiLCJfY2xhc3NTY29yZSIsIl9jbGFzc05hbWUiLCJmb3JTaXplIiwiRmFjZURldGVjdGlvbiIsImlvdSIsImJveDEiLCJib3gyIiwiaXNJT1UiLCJpbnRlclNlY3Rpb24iLCJhcmVhIiwibWluQmJveCIsIm1pblgiLCJtaW5ZIiwibWF4WCIsIm1heFkiLCJpbmRpY2VzU29ydGVkQnlTY29yZSIsImMxIiwiYzIiLCJwaWNrIiwiX2xvb3BfMSIsImN1cnIiLCJpZHgiLCJjdXJyQm94IiwiaWR4Qm94Iiwibm9ybWFsaXplIiwibWVhblJnYiIsImF2Z19yIiwiYXZnX2ciLCJhdmdfYiIsImF2Z19yZ2IiLCJwYWRUb1NxdWFyZSIsImltZ1RlbnNvciIsImlzQ2VudGVySW1hZ2UiLCJkaW1EaWZmIiwicGFkZGluZ0Ftb3VudCIsInBhZGRpbmdBeGlzIiwiY3JlYXRlUGFkZGluZ1RlbnNvciIsInBhZGRpbmdUZW5zb3JTaGFwZSIsInBhZGRpbmdUZW5zb3JBcHBlbmQiLCJyZW1haW5pbmdQYWRkaW5nQW1vdW50IiwidGVuc29yc1RvU3RhY2siLCJzaHVmZmxlQXJyYXkiLCJpbnB1dEFycmF5IiwiaW52ZXJzZVNpZ21vaWQiLCJlbnZpcm9ubWVudCIsIlJlY3QiLCJGYWNlTGFuZG1hcmtzIiwicmVsYXRpdmVGYWNlTGFuZG1hcmtQb3NpdGlvbnMiLCJpbWdEaW1zIiwiX2ltZ0RpbXMiLCJfc2hpZnQiLCJfcG9zaXRpb25zIiwiX3RoaXMiLCJyZWxhdGl2ZVBvc2l0aW9ucyIsInNoaWZ0QnkiLCJzaGlmdEJ5UG9pbnQiLCJhbGlnbiIsImRldGVjdGlvbiIsIm9wdGlvbnMiLCJ1c2VEbGliQWxpZ25tZW50IiwibWluQm94UGFkZGluZyIsImFsaWduRGxpYiIsImFsaWduTWluQmJveCIsImNlbnRlcnMiLCJnZXRSZWZQb2ludHNGb3JBbGlnbm1lbnQiLCJsZWZ0RXllQ2VudGVyIiwicmlnaHRFeWVDZW50ZXIiLCJtb3V0aENlbnRlciIsImRpc3RUb01vdXRoIiwiZXllVG9Nb3V0aERpc3QiLCJyZWZQb2ludCIsInBhZGRpbmciLCJwb3NpdGlvbnMiLCJGYWNlTGFuZG1hcmtzNSIsIkZhY2VMYW5kbWFya3M2OCIsImdldEphd091dGxpbmUiLCJnZXRMZWZ0RXllQnJvdyIsImdldFJpZ2h0RXllQnJvdyIsImdldE5vc2UiLCJnZXRMZWZ0RXllIiwiZ2V0UmlnaHRFeWUiLCJnZXRNb3V0aCIsIkZhY2VNYXRjaCIsImRpc3RhbmNlIiwiX2xhYmVsIiwiX2Rpc3RhbmNlIiwid2l0aERpc3RhbmNlIiwiTGFiZWxlZEJveCIsImFzc2VydElzVmFsaWRMYWJlbGVkQm94IiwiTGFiZWxlZEZhY2VEZXNjcmlwdG9ycyIsImRlc2NyaXB0b3JzIiwiZGVzYyIsIl9kZXNjcmlwdG9ycyIsInRvSlNPTiIsImZyb21KU09OIiwiUHJlZGljdGVkQm94IiwiYXNzZXJ0SXNWYWxpZFByZWRpY3RlZEJveCIsImlzV2l0aEZhY2VEZXRlY3Rpb24iLCJleHRlbmRXaXRoRmFjZURldGVjdGlvbiIsInNvdXJjZU9iaiIsImV4dGVuc2lvbiIsImNyZWF0ZUJyb3dzZXJFbnYiLCJDYW52YXMiLCJDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQiLCJJbWFnZSIsIlZpZGVvIiwiY3JlYXRlQ2FudmFzRWxlbWVudCIsImNyZWF0ZUltYWdlRWxlbWVudCIsInJlYWRGaWxlIiwiY3JlYXRlRmlsZVN5c3RlbSIsInJlcXVpcmVGc0Vycm9yIiwiZXJyIiwiZmlsZVBhdGgiLCJyZXMiLCJyZWoiLCJjcmVhdGVOb2RlanNFbnYiLCJmaWxlU3lzdGVtIiwiaXNCcm93c2VyIiwiaXNOb2RlanMiLCJzZXRFbnYiLCJlbnYiLCJpbml0aWFsaXplIiwiQW5jaG9yUG9zaXRpb24iLCJnZXRFbnYiLCJtb25rZXlQYXRjaCIsIl9iIiwicmVzb2x2ZUlucHV0IiwiYXJnIiwiZ2V0RWxlbWVudEJ5SWQiLCJnZXRDb250ZXh0MmRPclRocm93IiwiY2FudmFzQXJnIiwiRHJhd1RleHRGaWVsZE9wdGlvbnMiLCJhbmNob3JQb3NpdGlvbiIsImJhY2tncm91bmRDb2xvciIsImZvbnRDb2xvciIsImZvbnRTaXplIiwiZm9udFN0eWxlIiwiVE9QX0xFRlQiLCJEcmF3VGV4dEZpZWxkIiwidGV4dCIsImFuY2hvciIsIm1lYXN1cmVXaWR0aCIsIm1lYXN1cmVUZXh0IiwidzAiLCJ3MSIsIm1lYXN1cmVIZWlnaHQiLCJnZXRVcHBlckxlZnQiLCJjYW52YXNEaW1zIiwiaXNTaGlmdExlZnQiLCJCT1RUT01fUklHSFQiLCJUT1BfUklHSFQiLCJpc1NoaWZ0VG9wIiwiQk9UVE9NX0xFRlQiLCJ0ZXh0RmllbGRXaWR0aCIsInRleHRGaWVsZEhlaWdodCIsImRyYXciLCJmb250IiwibWF4VGV4dFdpZHRoIiwidGV4dEhlaWdodCIsImZpbGxTdHlsZSIsInVwcGVyTGVmdCIsImZpbGxSZWN0IiwidGV4dExpbmUiLCJmaWxsVGV4dCIsIkRyYXdCb3hPcHRpb25zIiwiYm94Q29sb3IiLCJsaW5lV2lkdGgiLCJkcmF3TGFiZWxPcHRpb25zIiwiZGVmYXVsdERyYXdMYWJlbE9wdGlvbnMiLCJEcmF3Qm94Iiwic3Ryb2tlU3R5bGUiLCJzdHJva2VSZWN0IiwiZHJhd0RldGVjdGlvbnMiLCJkZXRlY3Rpb25zIiwiZGV0IiwidW5kZWZpbmVkIiwiaXNNZWRpYUxvYWRlZCIsIm1lZGlhIiwiY29tcGxldGUiLCJhd2FpdE1lZGlhTG9hZGVkIiwib25Mb2FkIiwiY3VycmVudFRhcmdldCIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJvbkVycm9yIiwiYnVmZmVyVG9JbWFnZSIsImJ1ZiIsInJlYWRlciIsImltZyIsInNyYyIsInJlYWRBc0RhdGFVUkwiLCJnZXRNZWRpYURpbWVuc2lvbnMiLCJuYXR1cmFsV2lkdGgiLCJuYXR1cmFsSGVpZ2h0IiwiY3JlYXRlQ2FudmFzIiwiY3JlYXRlQ2FudmFzRnJvbU1lZGlhIiwiZGltcyIsImltYWdlVGVuc29yVG9DYW52YXMiLCJ0YXJnZXRDYW52YXMiLCJpbWdUZW5zb3IzRCIsImlzTWVkaWFFbGVtZW50IiwiaW1hZ2VUb1NxdWFyZSIsImNlbnRlckltYWdlIiwiaW5wdXRDYW52YXMiLCJOZXRJbnB1dCIsInRyZWF0QXNCYXRjaElucHV0IiwiX2ltYWdlVGVuc29ycyIsIl9jYW52YXNlcyIsIl90cmVhdEFzQmF0Y2hJbnB1dCIsIl9pbnB1dERpbWVuc2lvbnMiLCJfYmF0Y2hTaXplIiwiX2lucHV0U2l6ZSIsImJhdGNoSWR4IiwiZ2V0UmVzaGFwZWRJbnB1dERpbWVuc2lvbnMiLCJnZXRJbnB1dCIsImNhbnZhc2VzIiwiaW1hZ2VUZW5zb3JzIiwiZ2V0SW5wdXREaW1lbnNpb25zIiwiZ2V0SW5wdXRIZWlnaHQiLCJnZXRJbnB1dFdpZHRoIiwidG9CYXRjaFRlbnNvciIsImlzQ2VudGVySW5wdXRzIiwiaW5wdXRUZW5zb3JzIiwiYmF0Y2hUZW5zb3IiLCJ0b05ldElucHV0IiwiaW5wdXRBcmdBcnJheSIsImdldElkeEhpbnQiLCJleHRyYWN0RmFjZXMiLCJuZXRJbnB1dCIsInRlbnNvck9yQ2FudmFzIiwiZmFjZUltZyIsImV4dHJhY3RGYWNlVGVuc29ycyIsImltYWdlVGVuc29yIiwiZmFjZVRlbnNvcnMiLCJmZXRjaE9yVGhyb3ciLCJ1cmwiLCJpbml0Iiwic3RhdHVzVGV4dCIsImZldGNoSW1hZ2UiLCJ1cmkiLCJibG9iIiwiZmV0Y2hKc29uIiwiZmV0Y2hOZXRXZWlnaHRzIiwiYmluZCIsImdldE1vZGVsVXJpcyIsImRlZmF1bHRNb2RlbE5hbWUiLCJkZWZhdWx0TWFuaWZlc3RGaWxlbmFtZSIsIm1vZGVsQmFzZVVyaSIsIm1hbmlmZXN0VXJpIiwicHJvdG9jb2wiLCJwYXJ0cyIsIm1hbmlmZXN0RmlsZSIsImxvYWRXZWlnaHRNYXAiLCJtYW5pZmVzdCIsIm1hdGNoRGltZW5zaW9ucyIsInJlZmVyZW5jZSIsInVzZU1lZGlhRGltZW5zaW9ucyIsIk5ldXJhbE5ldHdvcmsiLCJfbmFtZSIsIl9wYXJhbXMiLCJfcGFyYW1NYXBwaW5ncyIsInBhcmFtcyIsImdldFBhcmFtRnJvbVBhdGgiLCJwYXJhbVBhdGgiLCJ0cmF2ZXJzZVByb3BlcnR5UGF0aCIsIm9ialByb3AiLCJyZWFzc2lnblBhcmFtRnJvbVBhdGgiLCJnZXRQYXJhbUxpc3QiLCJnZXRUcmFpbmFibGVQYXJhbXMiLCJwYXJhbSIsImdldEZyb3plblBhcmFtcyIsInRocm93T25SZWRpc3Bvc2UiLCJzZXJpYWxpemVQYXJhbXMiLCJmbGF0IiwiYXJyIiwid2VpZ2h0c09yVXJsIiwiZXh0cmFjdFdlaWdodHMiLCJsb2FkRnJvbVVyaSIsIndlaWdodE1hcCIsImdldERlZmF1bHRNb2RlbE5hbWUiLCJsb2FkRnJvbVdlaWdodE1hcCIsImxvYWRGcm9tRGlzayIsImZldGNoV2VpZ2h0c0Zyb21EaXNrIiwiX2QiLCJmaWxlUGF0aHMiLCJleHRyYWN0UGFyYW1zRnJvbVdlaWd0aE1hcCIsInBhcmFtTWFwcGluZ3MiLCJleHRyYWN0UGFyYW1zIiwibmV4dE9iaiIsImRlcHRod2lzZVNlcGFyYWJsZUNvbnYiLCJzdHJpZGUiLCJvdXQiLCJkZXB0aHdpc2VfZmlsdGVyIiwicG9pbnR3aXNlX2ZpbHRlciIsImRlbnNlQmxvY2szIiwiZGVuc2VCbG9ja1BhcmFtcyIsImlzRmlyc3RMYXllciIsIm91dDEiLCJjb252MCIsImZpbHRlcnMiLCJvdXQyIiwiY29udjEiLCJvdXQzIiwiY29udjIiLCJkZW5zZUJsb2NrNCIsImlzU2NhbGVEb3duIiwib3V0NCIsImNvbnYzIiwiY29udkxheWVyIiwid2l0aFJlbHUiLCJkaXNwb3NlVW51c2VkV2VpZ2h0VGVuc29ycyIsInBtIiwib3JpZ2luYWxQYXRoIiwiZXh0cmFjdENvbnZQYXJhbXNGYWN0b3J5IiwiY2hhbm5lbHNJbiIsImNoYW5uZWxzT3V0IiwiZmlsdGVyU2l6ZSIsIm1hcHBlZFByZWZpeCIsImV4dHJhY3RGQ1BhcmFtc0ZhY3RvcnkiLCJmY193ZWlnaHRzIiwiZmNfYmlhcyIsIlNlcGFyYWJsZUNvbnZQYXJhbXMiLCJleHRyYWN0U2VwYXJhYmxlQ29udlBhcmFtc0ZhY3RvcnkiLCJsb2FkU2VwYXJhYmxlQ29udlBhcmFtc0ZhY3RvcnkiLCJleHRyYWN0V2VpZ2h0RW50cnkiLCJwcmVmaXgiLCJleHRyYWN0V2VpZ2h0RW50cnlGYWN0b3J5IiwicGFyYW1SYW5rIiwibWFwcGVkUGF0aCIsImV4dHJhY3RXZWlnaHRzRmFjdG9yeSIsInJlbWFpbmluZ1dlaWdodHMiLCJudW1XZWlnaHRzIiwicmV0IiwiZ2V0UmVtYWluaW5nV2VpZ2h0cyIsImV4dHJhY3RvcnNGYWN0b3J5IiwiZXh0cmFjdENvbnZQYXJhbXMiLCJleHRyYWN0U2VwYXJhYmxlQ29udlBhcmFtcyIsImV4dHJhY3REZW5zZUJsb2NrM1BhcmFtcyIsImV4dHJhY3REZW5zZUJsb2NrNFBhcmFtcyIsImxvYWRDb252UGFyYW1zRmFjdG9yeSIsImxvYWRQYXJhbXNGYWN0b3J5IiwiRmFjZUZlYXR1cmVFeHRyYWN0b3IiLCJmb3J3YXJkSW5wdXQiLCJkZW5zZTAiLCJkZW5zZTEiLCJkZW5zZTIiLCJkZW5zZTMiLCJmb3J3YXJkIiwiZnVsbHlDb25uZWN0ZWRMYXllciIsInNlcGVyYXRlV2VpZ2h0TWFwcyIsImZlYXR1cmVFeHRyYWN0b3JNYXAiLCJjbGFzc2lmaWVyTWFwIiwiRmFjZVByb2Nlc3NvciIsImZhY2VGZWF0dXJlRXh0cmFjdG9yIiwiX2ZhY2VGZWF0dXJlRXh0cmFjdG9yIiwicnVuTmV0IiwiYm90dGxlbmVja0ZlYXR1cmVzIiwibG9hZENsYXNzaWZpZXJQYXJhbXMiLCJleHRyYWN0Q2xhc3NpZmllclBhcmFtcyIsImV4dHJhY3RGQ1BhcmFtcyIsImdldENsYXNzaWZpZXJDaGFubmVsc0luIiwiZ2V0Q2xhc3NpZmllckNoYW5uZWxzT3V0IiwiY0luIiwiY091dCIsImNsYXNzaWZpZXJXZWlnaHRTaXplIiwiZmVhdHVyZUV4dHJhY3RvcldlaWdodHMiLCJjbGFzc2lmaWVyV2VpZ2h0cyIsIkZBQ0VfRVhQUkVTU0lPTl9MQUJFTFMiLCJGYWNlRXhwcmVzc2lvbnMiLCJwcm9iYWJpbGl0aWVzIiwiZXhwcmVzc2lvbiIsImFzU29ydGVkQXJyYXkiLCJwcm9iYWJpbGl0eSIsImUwIiwiZTEiLCJGYWNlRXhwcmVzc2lvbk5ldCIsInByZWRpY3RFeHByZXNzaW9ucyIsInByb2JhYmlsaXRlc0J5QmF0Y2giLCJwcmVkaWN0aW9uc0J5QmF0Y2giLCJwcm9iYWJpbGl0ZXMiLCJpc0JhdGNoSW5wdXQiLCJpc1dpdGhGYWNlRXhwcmVzc2lvbnMiLCJleHRlbmRXaXRoRmFjZUV4cHJlc3Npb25zIiwiZXhwcmVzc2lvbnMiLCJkcmF3RmFjZUV4cHJlc3Npb25zIiwiZmFjZUV4cHJlc3Npb25zIiwibWluQ29uZmlkZW5jZSIsInRleHRGaWVsZEFuY2hvciIsImV4cHIiLCJyZXN1bHRzVG9EaXNwbGF5IiwiYm90dG9tTGVmdCIsImRyYXdUZXh0RmllbGQiLCJpc1dpdGhGYWNlTGFuZG1hcmtzIiwiZXh0ZW5kV2l0aEZhY2VMYW5kbWFya3MiLCJ1bnNoaWZ0ZWRMYW5kbWFya3MiLCJsYW5kbWFya3MiLCJhbGlnbmVkUmVjdCIsIkRyYXdGYWNlTGFuZG1hcmtzT3B0aW9ucyIsImRyYXdMaW5lcyIsImRyYXdQb2ludHMiLCJsaW5lQ29sb3IiLCJwb2ludFNpemUiLCJwb2ludENvbG9yIiwiRHJhd0ZhY2VMYW5kbWFya3MiLCJmYWNlTGFuZG1hcmtzIiwiYXJjIiwiZHJhd0ZhY2VMYW5kbWFya3MiLCJjb252IiwicmVkdWN0aW9uQmxvY2siLCJpc0FjdGl2YXRlSW5wdXQiLCJzZXBhcmFibGVfY29udjAiLCJzZXBhcmFibGVfY29udjEiLCJleHBhbnNpb25fY29udiIsIkdlbmRlciIsIlRpbnlYY2VwdGlvbiIsIm51bU1haW5CbG9ja3MiLCJfbnVtTWFpbkJsb2NrcyIsIm5vcm1hbGl6ZWQiLCJlbnRyeV9mbG93IiwiY29udl9pbiIsInJlZHVjdGlvbl9ibG9ja18wIiwicmVkdWN0aW9uX2Jsb2NrXzEiLCJzZXBhcmFibGVfY29udjIiLCJtYWluQmxvY2siLCJtaWRkbGVfZmxvdyIsImV4aXRfZmxvdyIsInJlZHVjdGlvbl9ibG9jayIsInNlcGFyYWJsZV9jb252IiwiZXh0cmFjdFJlZHVjdGlvbkJsb2NrUGFyYW1zIiwiZXh0cmFjdE1haW5CbG9ja1BhcmFtcyIsImNoYW5uZWxzIiwiQWdlR2VuZGVyTmV0IiwicG9vbGVkIiwiYWdlIiwiZ2VuZGVyIiwicHJlZGljdEFnZUFuZEdlbmRlciIsImFnZXMiLCJnZW5kZXJzIiwiYWdlQW5kR2VuZGVyVGVuc29ycyIsImFnZVRlbnNvciIsImdlbmRlclRlbnNvciIsInByb2JNYWxlIiwiaXNNYWxlIiwiZ2VuZGVyUHJvYmFiaWxpdHkiLCJNQUxFIiwiRkVNQUxFIiwiZXh0cmFjdEZjUGFyYW1zIiwiRmFjZUxhbmRtYXJrNjhOZXRCYXNlIiwicG9zdFByb2Nlc3MiLCJvcmlnaW5hbERpbWVuc2lvbnMiLCJpbnB1dERpbWVuc2lvbnMiLCJjcmVhdGVJbnRlcmxlYXZlZFRlbnNvciIsImZpbGxYIiwiZmlsbFkiLCJnZXRQYWRkaW5nIiwiY29uZCIsImxhbmRtYXJrVGVuc29ycyIsImdldFBhZGRpbmdYIiwiZ2V0UGFkZGluZ1kiLCJkZXRlY3RMYW5kbWFya3MiLCJsYW5kbWFya3NGb3JCYXRjaCIsImxhbmRtYXJrVGVuc29yIiwibGFuZG1hcmtzQXJyYXkiLCJ4Q29vcmRzIiwieUNvb3JkcyIsIkZhY2VMYW5kbWFyazY4TmV0IiwiVGlueUZhY2VGZWF0dXJlRXh0cmFjdG9yIiwiZXh0cmFjdFBhcmFtc0Zyb21XZWlndGhNYXBUaW55IiwiZXh0cmFjdFBhcmFtc1RpbnkiLCJGYWNlTGFuZG1hcms2OFRpbnlOZXQiLCJGYWNlTGFuZG1hcmtOZXQiLCJiaWFzZXMiLCJjb252Tm9SZWx1IiwiY29udkRvd24iLCJleHRyYWN0Q29udkxheWVyUGFyYW1zIiwibnVtRmlsdGVyVmFsdWVzIiwibnVtRmlsdGVycyIsImV4dHJhY3RGaWx0ZXJWYWx1ZXMiLCJleHRyYWN0U2NhbGVMYXllclBhcmFtcyIsImV4dHJhY3RSZXNpZHVhbExheWVyUGFyYW1zIiwiaXNEb3duIiwicmVzaWR1YWwiLCJyZXNpZHVhbERvd24iLCJpc1BhZCIsInBhZFNoYXBlWCIsInplcm9zVyIsInBhZFNoYXBlWSIsInplcm9zSCIsIkZhY2VSZWNvZ25pdGlvbk5ldCIsImNvbnYzMl9kb3duIiwiY29udjMyXzEiLCJjb252MzJfMiIsImNvbnYzMl8zIiwiY29udjY0X2Rvd24iLCJjb252NjRfMSIsImNvbnY2NF8yIiwiY29udjY0XzMiLCJjb252MTI4X2Rvd24iLCJjb252MTI4XzEiLCJjb252MTI4XzIiLCJjb252MjU2X2Rvd24iLCJjb252MjU2XzEiLCJnbG9iYWxBdmciLCJjb252MjU2XzIiLCJjb252MjU2X2Rvd25fb3V0IiwiY29tcHV0ZUZhY2VEZXNjcmlwdG9yIiwiZmFjZURlc2NyaXB0b3JUZW5zb3JzIiwiZmFjZURlc2NyaXB0b3JzRm9yQmF0Y2giLCJjcmVhdGVGYWNlUmVjb2duaXRpb25OZXQiLCJuZXQiLCJleHRlbmRXaXRoRmFjZURlc2NyaXB0b3IiLCJkZXNjcmlwdG9yIiwiaXNXaXRoQWdlIiwiZXh0ZW5kV2l0aEFnZSIsImlzV2l0aEdlbmRlciIsImV4dGVuZFdpdGhHZW5kZXIiLCJNdGNubk9wdGlvbnMiLCJtaW5GYWNlU2l6ZSIsInNjYWxlRmFjdG9yIiwibWF4TnVtU2NhbGVzIiwic2NvcmVUaHJlc2hvbGRzIiwic2NhbGVTdGVwcyIsIl9taW5GYWNlU2l6ZSIsIl9zY2FsZUZhY3RvciIsIl9tYXhOdW1TY2FsZXMiLCJfc2NvcmVUaHJlc2hvbGRzIiwiX3NjYWxlU3RlcHMiLCJwb2ludHdpc2VDb252TGF5ZXIiLCJiYXRjaF9ub3JtX29mZnNldCIsIklPVSIsImJveGVzRGF0YSIsInltaW5JIiwieG1pbkkiLCJ5bWF4SSIsInhtYXhJIiwieW1pbkoiLCJ4bWluSiIsInltYXhKIiwieG1heEoiLCJhcmVhSSIsImFyZWFKIiwiaW50ZXJzZWN0aW9uWW1pbiIsImludGVyc2VjdGlvblhtaW4iLCJpbnRlcnNlY3Rpb25ZbWF4IiwiaW50ZXJzZWN0aW9uWG1heCIsImludGVyc2VjdGlvbkFyZWEiLCJib3hQcmVkaWN0aW9uTGF5ZXIiLCJib3hQcmVkaWN0aW9uRW5jb2RpbmciLCJib3hfZW5jb2RpbmdfcHJlZGljdG9yIiwiY2xhc3NQcmVkaWN0aW9uIiwiY2xhc3NfcHJlZGljdG9yIiwiU3NkTW9iaWxlbmV0djFPcHRpb25zIiwibWF4UmVzdWx0cyIsIl9taW5Db25maWRlbmNlIiwiX21heFJlc3VsdHMiLCJTc2RNb2JpbGVuZXR2MSIsImZlYXR1cmVzIiwiY29udjExIiwiY29udl8wIiwiY29udl8xIiwiY29udl8yIiwiY29udl8zIiwiY29udl80IiwiY29udl81IiwiY29udl82IiwiY29udl83IiwiY29udl84IiwiY29udl85IiwiY29udl8xMCIsImNvbnZfMTEiLCJjb252XzEyIiwiY29udl8xMyIsImxheWVySWR4IiwiZGVwdGh3aXNlQ29udlN0cmlkZXMiLCJnZXRTdHJpZGVzRm9yTGF5ZXJJZHgiLCJiYXRjaF9ub3JtX21lYW4iLCJiYXRjaF9ub3JtX3ZhcmlhbmNlIiwiYmF0Y2hfbm9ybV9zY2FsZSIsImRlcHRod2lzZUNvbnZMYXllciIsImRlcHRod2lzZV9jb252IiwicG9pbnR3aXNlX2NvbnYiLCJtb2JpbGVOZXRWMSIsIm1vYmlsZW5ldHYxIiwiY29udjQiLCJjb252NSIsImNvbnY2IiwiY29udjciLCJib3hQcmVkaWN0aW9uMCIsImJveF9wcmVkaWN0b3JfMCIsImJveFByZWRpY3Rpb24xIiwiYm94X3ByZWRpY3Rvcl8xIiwiYm94UHJlZGljdGlvbjIiLCJib3hfcHJlZGljdG9yXzIiLCJib3hQcmVkaWN0aW9uMyIsImJveF9wcmVkaWN0b3JfMyIsImJveFByZWRpY3Rpb240IiwiYm94X3ByZWRpY3Rvcl80IiwiYm94UHJlZGljdGlvbjUiLCJib3hfcHJlZGljdG9yXzUiLCJib3hQcmVkaWN0aW9ucyIsImNsYXNzUHJlZGljdGlvbnMiLCJwcmVkaWN0aW9uTGF5ZXIiLCJwcmVkaWN0aW9uX2xheWVyIiwieDAiLCJ4MSIsInZlYyIsInNpemVzIiwiZ2V0Q2VudGVyQ29vcmRpbmF0ZXNBbmRTaXplc0xheWVyIiwiZGl2MF9vdXQiLCJhZGQwX291dCIsImRpdjFfb3V0IiwiYWRkMV9vdXQiLCJkZWNvZGVCb3hlc0xheWVyIiwiZXh0cmFfZGltIiwic2NvcmVzQW5kQ2xhc3NlcyIsIm91dHB1dExheWVyIiwib3V0cHV0X2xheWVyIiwibG9jYXRlRmFjZXMiLCJfYm94ZXMiLCJfc2NvcmVzIiwic2NvcmVzRGF0YSIsInJlc2hhcGVkRGltcyIsInJlc3VsdHMiLCJudW1Cb3hlcyIsImNhbmRpZGF0ZXMiLCJzdXBwcmVzc0Z1bmMiLCJzZWxlY3RlZCIsIm9yaWdpbmFsU2NvcmUiLCJleHRyYWN0UG9pbnR3aXNlQ29udlBhcmFtcyIsImV4dHJhY3RDb252UGFpclBhcmFtcyIsInByZWZpeERlcHRod2lzZUNvbnYiLCJtYXBwZWRQcmVmaXhEZXB0aHdpc2VDb252IiwibWFwcGVkUHJlZml4UG9pbnR3aXNlQ29udiIsImV4dHJhY3RCb3hQcmVkaWN0b3JQYXJhbXMiLCJleHRyYWN0TW9iaWxlbmV0VjFQYXJhbXMiLCJleHRyYWN0UHJlZGljdGlvbkxheWVyUGFyYW1zIiwiaXNQb2ludHdpc2VDb252IiwiZXh0cmFjdERlcHRod2lzZUNvbnZQYXJhbXMiLCJjcmVhdGVTc2RNb2JpbGVuZXR2MSIsImNyZWF0ZUZhY2VEZXRlY3Rpb25OZXQiLCJUaW55WW9sb3YyU2l6ZVR5cGUiLCJGYWNlRGV0ZWN0aW9uTmV0IiwiQk9YX0FOQ0hPUlMiLCJCT1hfQU5DSE9SU19TRVBBUkFCTEUiLCJNRUFOX1JHQl9TRVBBUkFCTEUiLCJ2YWxpZGF0ZUNvbmZpZyIsImNvbmZpZyIsIndpdGhTZXBhcmFibGVDb252cyIsImNsYXNzZXMiLCJhbmNob3JzIiwibGVha3kiLCJjb252V2l0aEJhdGNoTm9ybSIsInRydWVkaXYiLCJUaW55WW9sb3YyT3B0aW9ucyIsIl9zY29yZVRocmVzaG9sZCIsIlRpbnlZb2xvdjJCYXNlIiwiX2NvbmZpZyIsIndpdGhDbGFzc1Njb3JlcyIsInJ1blRpbnlZb2xvdjIiLCJjb252OCIsInJ1bk1vYmlsZW5ldCIsImlzRmlyc3RMYXllckNvbnYyZCIsImRldGVjdCIsImZvcndhcmRQYXJhbXMiLCJvdXQwIiwiY2xhc3NTY29yZXMiLCJjbGFzc05hbWVzIiwiZXh0cmFjdEJveGVzIiwiZXh0cmFjdENvbnZXaXRoQmF0Y2hOb3JtUGFyYW1zIiwiZXh0cmFjdEJhdGNoTm9ybVBhcmFtcyIsImZpbHRlclNpemVzIiwiREVGQVVMVF9GSUxURVJfU0laRVMiLCJib3hFbmNvZGluZ1NpemUiLCJzMyIsInM0IiwiczUiLCJzNiIsInM3IiwiczgiLCJvdXRwdXRUZW5zb3IiLCJpbnB1dEJsb2JEaW1lbnNpb25zIiwiY29ycmVjdGlvbkZhY3RvclgiLCJjb3JyZWN0aW9uRmFjdG9yWSIsIm51bUNlbGxzIiwiYm94ZXNUZW5zb3IiLCJzY29yZXNUZW5zb3IiLCJjbGFzc1Njb3Jlc1RlbnNvciIsInJvdyIsImNvbCIsImN0WCIsImN0WSIsIndpZHRoXzEiLCJoZWlnaHRfMSIsInBvcyIsInJlc2hhcGVkIiwiZXh0cmFjdFByZWRpY3RlZENsYXNzIiwiY2xhc3Nlc1RlbnNvciIsImNsYXNzZXNEYXRhIiwiVGlueVlvbG92MiIsImNyZWF0ZVRpbnlZb2xvdjIiLCJUaW55RmFjZURldGVjdG9yT3B0aW9ucyIsIkNvbXBvc2FibGVUYXNrIiwib25mdWxmaWxsZWQiLCJydW4iLCJleHRyYWN0QWxsRmFjZXNBbmRDb21wdXRlUmVzdWx0cyIsInBhcmVudFJlc3VsdHMiLCJjb21wdXRlUmVzdWx0cyIsImV4dHJhY3RlZEZhY2VzIiwiZ2V0UmVjdEZvckFsaWdubWVudCIsImZhY2VCb3hlcyIsImZhY2VzIiwicGFyZW50UmVzdWx0IiwiZXh0cmFjdFNpbmdsZUZhY2VBbmRDb21wdXRlUmVzdWx0IiwiY29tcHV0ZVJlc3VsdCIsImdldFNpemVzRm9yU2NhbGUiLCJNdGNubkJveCIsInNoYXJlZExheWVyIiwiaXNQbmV0IiwicHJlbHUxX2FscGhhIiwicHJlbHUyX2FscGhhIiwicHJlbHUzX2FscGhhIiwic3RhZ2UxIiwic2NhbGVzIiwic3RhdHMiLCJwbmV0T3V0cHV0cyIsInN0YXRzRm9yU2NhbGUiLCJyZXNpemVkIiwicmVzY2FsZUFuZE5vcm1hbGl6ZSIsImNvbnY0XzEiLCJwcm9iIiwicmVnaW9ucyIsImNvbnY0XzIiLCJQTmV0IiwicG5ldCIsInJlZ2lvbnNUZW5zb3IiLCJib3hlc0ZvclNjYWxlIiwiYm91bmRpbmdCb3hlcyIsImNlbGwiLCJyZWdpb25zRGF0YSIsImV4dHJhY3RCb3VuZGluZ0JveGVzIiwiYmJveCIsIm5tcyIsImJveElkeCIsImFsbEJveGVzIiwiZmluYWxCb3hlcyIsImZpbmFsU2NvcmVzIiwic3RhZ2UxX25tcyIsImV4dHJhY3RJbWFnZVBhdGNoZXMiLCJpbWdDdHgiLCJiaXRtYXBzIiwiaW1hZ2VQYXRjaGVzRGF0YXMiLCJmcm9tWCIsImZyb21ZIiwiaW1nRGF0YSIsImNyZWF0ZUltYWdlQml0bWFwIiwiYm1wIiwicGF0Y2hDdHgiLCJjdXJyRGF0YSIsInN0YWdlMiIsImlucHV0Qm94ZXMiLCJybmV0SW5wdXRzIiwicm5ldE91dHMiLCJmaWx0ZXJlZEJveGVzIiwiZmlsdGVyZWRTY29yZXMiLCJpbmRpY2VzTm1zIiwicmVnaW9uc18xIiwic3RhZ2UyX2V4dHJhY3RJbWFnZVBhdGNoZXMiLCJybmV0SW5wdXQiLCJjb252T3V0IiwicHJlbHU0IiwiZmMxIiwicHJlbHU0X2FscGhhIiwiZmMyXzEiLCJmYzJfMiIsIlJOZXQiLCJzdGFnZTJfcm5ldCIsInN0YWdlMl9ubXMiLCJzdGFnZTMiLCJvbmV0SW5wdXRzIiwib25ldE91dHMiLCJmaWx0ZXJlZFJlZ2lvbnMiLCJzdGFnZTNfZXh0cmFjdEltYWdlUGF0Y2hlcyIsIm9uZXRJbnB1dCIsInByZWx1NSIsInByZWx1NV9hbHBoYSIsImZjMl8zIiwiT05ldCIsInN0YWdlM19vbmV0Iiwic3RhZ2UzX25tcyIsInB0SWR4IiwicG9pbnRzRGF0YSIsIk10Y25uIiwidHNUb3RhbCIsIm9uUmV0dXJuIiwidG90YWwiLCJtaW5MYXllciIsInB5cmFtaWREb3duIiwicHlyYW1pZCIsInRvdGFsX3N0YWdlMSIsInN0YWdlMl9udW1JbnB1dEJveGVzIiwicm5ldCIsInRvdGFsX3N0YWdlMiIsInN0YWdlM19udW1JbnB1dEJveGVzIiwib25ldCIsInRvdGFsX3N0YWdlMyIsImZvcndhcmRXaXRoU3RhdHMiLCJleHRyYWN0UFJlbHVQYXJhbXMiLCJleHRyYWN0U2hhcmVkUGFyYW1zIiwiZXh0cmFjdFBOZXRQYXJhbXMiLCJzaGFyZWRQYXJhbXMiLCJleHRyYWN0Uk5ldFBhcmFtcyIsImV4dHJhY3RPTmV0UGFyYW1zIiwiaXNSbmV0IiwiTUVBTl9SR0IiLCJUaW55RmFjZURldGVjdG9yIiwibmV0cyIsInNzZE1vYmlsZW5ldHYxIiwidGlueUZhY2VEZXRlY3RvciIsInRpbnlZb2xvdjIiLCJtdGNubiIsImZhY2VMYW5kbWFyazY4TmV0IiwiZmFjZUxhbmRtYXJrNjhUaW55TmV0IiwiZmFjZVJlY29nbml0aW9uTmV0IiwiZmFjZUV4cHJlc3Npb25OZXQiLCJhZ2VHZW5kZXJOZXQiLCJkZXRlY3RGYWNlTGFuZG1hcmtzIiwiZGV0ZWN0RmFjZUxhbmRtYXJrc1RpbnkiLCJyZWNvZ25pemVGYWNlRXhwcmVzc2lvbnMiLCJsb2FkU3NkTW9iaWxlbmV0djFNb2RlbCIsImxvYWRUaW55RmFjZURldGVjdG9yTW9kZWwiLCJsb2FkTXRjbm5Nb2RlbCIsImxvYWRUaW55WW9sb3YyTW9kZWwiLCJsb2FkRmFjZUxhbmRtYXJrTW9kZWwiLCJsb2FkRmFjZUxhbmRtYXJrVGlueU1vZGVsIiwibG9hZEZhY2VSZWNvZ25pdGlvbk1vZGVsIiwibG9hZEZhY2VFeHByZXNzaW9uTW9kZWwiLCJsb2FkQWdlR2VuZGVyTW9kZWwiLCJsb2FkRmFjZURldGVjdGlvbk1vZGVsIiwiUHJlZGljdEZhY2VFeHByZXNzaW9uc1Rhc2tCYXNlIiwicGFyZW50VGFzayIsIlByZWRpY3RBbGxGYWNlRXhwcmVzc2lvbnNUYXNrIiwiZmFjZUV4cHJlc3Npb25zQnlGYWNlIiwiZmFjZSIsIndpdGhBZ2VBbmRHZW5kZXIiLCJQcmVkaWN0QWxsQWdlQW5kR2VuZGVyVGFzayIsIlByZWRpY3RTaW5nbGVGYWNlRXhwcmVzc2lvbnNUYXNrIiwiUHJlZGljdFNpbmdsZUFnZUFuZEdlbmRlclRhc2siLCJQcmVkaWN0QWxsRmFjZUV4cHJlc3Npb25zV2l0aEZhY2VBbGlnbm1lbnRUYXNrIiwiUHJlZGljdEFsbEFnZUFuZEdlbmRlcldpdGhGYWNlQWxpZ25tZW50VGFzayIsIndpdGhGYWNlRGVzY3JpcHRvcnMiLCJDb21wdXRlQWxsRmFjZURlc2NyaXB0b3JzVGFzayIsIlByZWRpY3RTaW5nbGVGYWNlRXhwcmVzc2lvbnNXaXRoRmFjZUFsaWdubWVudFRhc2siLCJQcmVkaWN0U2luZ2xlQWdlQW5kR2VuZGVyV2l0aEZhY2VBbGlnbm1lbnRUYXNrIiwid2l0aEZhY2VEZXNjcmlwdG9yIiwiQ29tcHV0ZVNpbmdsZUZhY2VEZXNjcmlwdG9yVGFzayIsIlByZWRpY3RBZ2VBbmRHZW5kZXJUYXNrQmFzZSIsImFnZUFuZEdlbmRlckJ5RmFjZSIsIndpdGhGYWNlRXhwcmVzc2lvbnMiLCJDb21wdXRlRmFjZURlc2NyaXB0b3JzVGFza0Jhc2UiLCJEZXRlY3RGYWNlTGFuZG1hcmtzVGFza0Jhc2UiLCJ1c2VUaW55TGFuZG1hcmtOZXQiLCJEZXRlY3RBbGxGYWNlTGFuZG1hcmtzVGFzayIsImZhY2VMYW5kbWFya3NCeUZhY2UiLCJsYW5kbWFya05ldCIsIkRldGVjdFNpbmdsZUZhY2VMYW5kbWFya3NUYXNrIiwiRGV0ZWN0RmFjZXNUYXNrQmFzZSIsIkRldGVjdEFsbEZhY2VzVGFzayIsImZhY2VEZXRlY3Rpb25GdW5jdGlvbiIsInJ1bkFuZEV4dGVuZFdpdGhGYWNlRGV0ZWN0aW9ucyIsIndpdGhGYWNlTGFuZG1hcmtzIiwiRGV0ZWN0U2luZ2xlRmFjZVRhc2siLCJmYWNlRGV0ZWN0aW9ucyIsImZhY2VEZXRlY3Rpb25XaXRoSGlnaGVzdFNjb3JlIiwiZmFjZURldGVjdGlvbiIsInJ1bkFuZEV4dGVuZFdpdGhGYWNlRGV0ZWN0aW9uIiwiZGV0ZWN0U2luZ2xlRmFjZSIsImRldGVjdEFsbEZhY2VzIiwiYWxsRmFjZXNTc2RNb2JpbGVuZXR2MSIsImFsbEZhY2VzVGlueVlvbG92MiIsImFsbEZhY2VzTXRjbm4iLCJhbGxGYWNlcyIsImV1Y2xpZGVhbkRpc3RhbmNlIiwiYXJyMSIsImFycjIiLCJkZXNjMSIsImRlc2MyIiwiRmFjZU1hdGNoZXIiLCJkaXN0YW5jZVRocmVzaG9sZCIsIl9kaXN0YW5jZVRocmVzaG9sZCIsImNvdW50IiwiY3JlYXRlVW5pcXVlTGFiZWwiLCJfbGFiZWxlZERlc2NyaXB0b3JzIiwiY29tcHV0ZU1lYW5EaXN0YW5jZSIsInF1ZXJ5RGVzY3JpcHRvciIsImQxIiwiZDIiLCJtYXRjaERlc2NyaXB0b3IiLCJsYWJlbGVkRGVzY3JpcHRvcnMiLCJiZXN0IiwiZmluZEJlc3RNYXRjaCIsImJlc3RNYXRjaCIsImNyZWF0ZU10Y25uIiwiY3JlYXRlVGlueUZhY2VEZXRlY3RvciIsInJlc2l6ZVJlc3VsdHMiLCJkaW1lbnNpb25zIiwicmVzaXplZERldGVjdGlvbiIsInJlc2l6ZWRMYW5kbWFya3MiLCJGYWNlIiwiZ2V0RGlzdGFuY2VfMSIsIkZhY2VEaXJlY3Rpb25fMSIsImxhbmRtYXJrc1Bvc2l0aW9ucyIsIm5vc2UiLCJiZXR3ZWVuRXllcyIsImRpcmVjdGlvbiIsIkZhY2VEaXJlY3Rpb24iLCJnZXRGYWNlUG9zaW90aW9uIiwiZ2V0V2lkdGgiLCJnZXREaXN0YW5jZSIsImdldEhlaWdodCIsImZhY2VXaWR0aCIsImZhY2VIZWlnaHQiLCJkaXN0YW5jZUxlZnQiLCJkaXN0YW5jZVRvcCIsImlzTG9va1N0cmFpZ2h0IiwiaXNMb29rTGVmdCIsImlzTG9va1JpZ2h0IiwiaXNMb29rVXAiLCJpc0xvb2tEb3duIiwiX19jcmVhdGVCaW5kaW5nIiwiazIiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJfX2VzTW9kdWxlIiwid3JpdGFibGUiLCJfX3NldE1vZHVsZURlZmF1bHQiLCJfX2ltcG9ydFN0YXIiLCJTZWxmaWUiLCJmYWNlYXBpIiwiRmFjZV8xIiwiZ2V0RmFjZUZyYW1lXzEiLCJhbGxvd2VkRmFjZURldmlhdGlvbiIsImxhc3RGYWNlRnJhbWUiLCJvbkZyYW1lUHJvY2Vzc2VkQ2FsbGJhY2siLCJvdXRwdXRDYW52YXMiLCJ2aWRlbyIsImlzUGxheVN0YXJ0ZWQiLCJpbmNsdWRlcyIsIm9uRnJhbWVQcm9jZXNzZWQiLCJ1cGRhdGVDYW52YXMiLCJyZXF1ZXN0VmlkZW9GcmFtZUNhbGxiYWNrIiwidmlkZW9Db250YWluZXIiLCJzdHlsZSIsInBvc2l0aW9uIiwiaW5zZXJ0QWRqYWNlbnRFbGVtZW50Iiwib3BhY2l0eSIsImRpc3BsYXlTaXplIiwibWVkaWFEZXZpY2VzIiwiZ2V0VXNlck1lZGlhIiwiZmFjaW5nTW9kZSIsInN0cmVhbSIsInNyY09iamVjdCIsInN0YXJ0UHJvY2Vzc2luZ0xvb3AiLCJyZXNpemVkRGV0ZWN0aW9ucyIsImRldmlhdGlvbkZhY2VXaWR0aCIsImRldmlhdGlvbkZhY2VQb3NpdGlvbiIsIm92ZXJsYXlWaXNpYmxlIiwiY2xlYXJSZWN0IiwiZ2V0RmFjZUZyYW1lIiwiZmFjZUZyYW1lIiwiY2FwdHVyZUltYWdlIiwiU2VsZmllXzEiLCJQcm9jZXNzb3JzIiwiUGlwZWxpbmUiLCJTZWxmaWVQcm9jZXNzb3JzIiwiU2VsZmllUGlwZWxpbmUiLCJzdGFnZXMiLCJhZGRTdGFnZSIsInN0YWdlIiwiUGlwZWxpbmVCYXNpY1N0YWdlIiwib3BlcmF0aW9uIiwiX3Jlc3VsdCIsIl9pc1Byb2Nlc3NlZCIsImdldFJlc3VsdCIsIlBpcGVsaW5lU3BsaXR0ZXIiLCJQaXBlbGluZVN0YWdlIiwicGlwZWxpbmUiLCJQaXBlbGluZV8xIiwiUGlwZWxpbmVTdGFnZV8xIiwiUGlwZWxpbmVCYXNpY1N0YWdlXzEiLCJQaXBlbGluZVNwbGl0dGVyXzEiLCJvcmlnaW5hbEZyYW1lIiwiaXkiLCJpeCIsIm9yaWdpbmFsSW5kZXgiLCJfX2ltcG9ydERlZmF1bHQiLCJyZXNpemVGcmFtZSIsInRvSW1hZ2UiLCJsYXBsYWNpYW4iLCJjcm9wRnJhbWUiLCJ2YXJpYW5jZV8xIiwiZGVmYXVsdCIsImNyb3BGcmFtZV8xIiwibGFwbGFjaWFuXzEiLCJ0b0ltYWdlXzEiLCJyZXNpemVGcmFtZV8xIiwiS0VSTkVMIiwibmV3RGF0YSIsImtlcm5lbEluZGV4IiwibmV3RnJhbWUiLCJzcmNYIiwic3JjWSIsIngyIiwieTEiLCJ5MiIsImluZGV4MSIsImluZGV4MiIsImluZGV4MyIsImluZGV4NCIsImltYWdlRGF0YSIsInRvRGF0YVVSTCIsImFjYyIsInNxdWFyZWREaWZmZXJlbmNlcyIsInAxIiwicDIiLCJfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18iLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJjYWNoZWRNb2R1bGUiLCJtb2R1bGUiLCJfX3dlYnBhY2tfbW9kdWxlc19fIiwiZGVmaW5pdGlvbiIsInByb3AiLCJ0b1N0cmluZ1RhZyJdLCJzb3VyY2VSb290IjoiIn0=